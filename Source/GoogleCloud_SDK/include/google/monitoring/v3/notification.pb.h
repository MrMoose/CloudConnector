// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/notification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/label.pb.h"
#include "google/api/launch_stage.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/mutation_record.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fnotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fnotification_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fnotification_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class NotificationChannel;
struct NotificationChannelDefaultTypeInternal;
extern NotificationChannelDefaultTypeInternal _NotificationChannel_default_instance_;
class NotificationChannelDescriptor;
struct NotificationChannelDescriptorDefaultTypeInternal;
extern NotificationChannelDescriptorDefaultTypeInternal _NotificationChannelDescriptor_default_instance_;
class NotificationChannel_LabelsEntry_DoNotUse;
struct NotificationChannel_LabelsEntry_DoNotUseDefaultTypeInternal;
extern NotificationChannel_LabelsEntry_DoNotUseDefaultTypeInternal _NotificationChannel_LabelsEntry_DoNotUse_default_instance_;
class NotificationChannel_UserLabelsEntry_DoNotUse;
struct NotificationChannel_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern NotificationChannel_UserLabelsEntry_DoNotUseDefaultTypeInternal _NotificationChannel_UserLabelsEntry_DoNotUse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::NotificationChannel* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(Arena*);
template<> ::google::monitoring::v3::NotificationChannelDescriptor* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannelDescriptor>(Arena*);
template<> ::google::monitoring::v3::NotificationChannel_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::monitoring::v3::NotificationChannel_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel_UserLabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

enum NotificationChannel_VerificationStatus : int {
  NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED = 0,
  NotificationChannel_VerificationStatus_UNVERIFIED = 1,
  NotificationChannel_VerificationStatus_VERIFIED = 2,
  NotificationChannel_VerificationStatus_NotificationChannel_VerificationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NotificationChannel_VerificationStatus_NotificationChannel_VerificationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NotificationChannel_VerificationStatus_IsValid(int value);
constexpr NotificationChannel_VerificationStatus NotificationChannel_VerificationStatus_VerificationStatus_MIN = NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
constexpr NotificationChannel_VerificationStatus NotificationChannel_VerificationStatus_VerificationStatus_MAX = NotificationChannel_VerificationStatus_VERIFIED;
constexpr int NotificationChannel_VerificationStatus_VerificationStatus_ARRAYSIZE = NotificationChannel_VerificationStatus_VerificationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationChannel_VerificationStatus_descriptor();
template<typename T>
inline const std::string& NotificationChannel_VerificationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationChannel_VerificationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationChannel_VerificationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationChannel_VerificationStatus_descriptor(), enum_t_value);
}
inline bool NotificationChannel_VerificationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationChannel_VerificationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationChannel_VerificationStatus>(
    NotificationChannel_VerificationStatus_descriptor(), name, value);
}
// ===================================================================

class NotificationChannelDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.NotificationChannelDescriptor) */ {
 public:
  inline NotificationChannelDescriptor() : NotificationChannelDescriptor(nullptr) {}
  ~NotificationChannelDescriptor() override;
  explicit PROTOBUF_CONSTEXPR NotificationChannelDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationChannelDescriptor(const NotificationChannelDescriptor& from);
  NotificationChannelDescriptor(NotificationChannelDescriptor&& from) noexcept
    : NotificationChannelDescriptor() {
    *this = ::std::move(from);
  }

  inline NotificationChannelDescriptor& operator=(const NotificationChannelDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannelDescriptor& operator=(NotificationChannelDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationChannelDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationChannelDescriptor* internal_default_instance() {
    return reinterpret_cast<const NotificationChannelDescriptor*>(
               &_NotificationChannelDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationChannelDescriptor& a, NotificationChannelDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationChannelDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannelDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationChannelDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationChannelDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationChannelDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationChannelDescriptor& from) {
    NotificationChannelDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannelDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.NotificationChannelDescriptor";
  }
  protected:
  explicit NotificationChannelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kSupportedTiersFieldNumber = 5,
    kTypeFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kNameFieldNumber = 6,
    kLaunchStageFieldNumber = 7,
  };
  // repeated .google.api.LabelDescriptor labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::google::api::LabelDescriptor* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_labels();
  private:
  const ::google::api::LabelDescriptor& _internal_labels(int index) const;
  ::google::api::LabelDescriptor* _internal_add_labels();
  public:
  const ::google::api::LabelDescriptor& labels(int index) const;
  ::google::api::LabelDescriptor* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
      labels() const;

  // repeated .google.monitoring.v3.ServiceTier supported_tiers = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int supported_tiers_size() const;
  private:
  int _internal_supported_tiers_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_supported_tiers();
  private:
  ::google::monitoring::v3::ServiceTier _internal_supported_tiers(int index) const;
  void _internal_add_supported_tiers(::google::monitoring::v3::ServiceTier value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_tiers();
  public:
  PROTOBUF_DEPRECATED ::google::monitoring::v3::ServiceTier supported_tiers(int index) const;
  PROTOBUF_DEPRECATED void set_supported_tiers(int index, ::google::monitoring::v3::ServiceTier value);
  PROTOBUF_DEPRECATED void add_supported_tiers(::google::monitoring::v3::ServiceTier value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_tiers() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_tiers();

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.LaunchStage launch_stage = 7;
  void clear_launch_stage();
  ::google::api::LaunchStage launch_stage() const;
  void set_launch_stage(::google::api::LaunchStage value);
  private:
  ::google::api::LaunchStage _internal_launch_stage() const;
  void _internal_set_launch_stage(::google::api::LaunchStage value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.NotificationChannelDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor > labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_tiers_;
    mutable std::atomic<int> _supported_tiers_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int launch_stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class NotificationChannel_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NotificationChannel_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NotificationChannel_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NotificationChannel_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NotificationChannel_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NotificationChannel_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NotificationChannel_LabelsEntry_DoNotUse& other);
  static const NotificationChannel_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NotificationChannel_LabelsEntry_DoNotUse*>(&_NotificationChannel_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.NotificationChannel.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.NotificationChannel.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_2eproto;
};

// -------------------------------------------------------------------

class NotificationChannel_UserLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NotificationChannel_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NotificationChannel_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NotificationChannel_UserLabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NotificationChannel_UserLabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NotificationChannel_UserLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NotificationChannel_UserLabelsEntry_DoNotUse& other);
  static const NotificationChannel_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NotificationChannel_UserLabelsEntry_DoNotUse*>(&_NotificationChannel_UserLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.NotificationChannel.UserLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.NotificationChannel.UserLabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_2eproto;
};

// -------------------------------------------------------------------

class NotificationChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.NotificationChannel) */ {
 public:
  inline NotificationChannel() : NotificationChannel(nullptr) {}
  ~NotificationChannel() override;
  explicit PROTOBUF_CONSTEXPR NotificationChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationChannel(const NotificationChannel& from);
  NotificationChannel(NotificationChannel&& from) noexcept
    : NotificationChannel() {
    *this = ::std::move(from);
  }

  inline NotificationChannel& operator=(const NotificationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannel& operator=(NotificationChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationChannel* internal_default_instance() {
    return reinterpret_cast<const NotificationChannel*>(
               &_NotificationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationChannel& a, NotificationChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationChannel& from) {
    NotificationChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.NotificationChannel";
  }
  protected:
  explicit NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef NotificationChannel_VerificationStatus VerificationStatus;
  static constexpr VerificationStatus VERIFICATION_STATUS_UNSPECIFIED =
    NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
  static constexpr VerificationStatus UNVERIFIED =
    NotificationChannel_VerificationStatus_UNVERIFIED;
  static constexpr VerificationStatus VERIFIED =
    NotificationChannel_VerificationStatus_VERIFIED;
  static inline bool VerificationStatus_IsValid(int value) {
    return NotificationChannel_VerificationStatus_IsValid(value);
  }
  static constexpr VerificationStatus VerificationStatus_MIN =
    NotificationChannel_VerificationStatus_VerificationStatus_MIN;
  static constexpr VerificationStatus VerificationStatus_MAX =
    NotificationChannel_VerificationStatus_VerificationStatus_MAX;
  static constexpr int VerificationStatus_ARRAYSIZE =
    NotificationChannel_VerificationStatus_VerificationStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VerificationStatus_descriptor() {
    return NotificationChannel_VerificationStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VerificationStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerificationStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerificationStatus_Name.");
    return NotificationChannel_VerificationStatus_Name(enum_t_value);
  }
  static inline bool VerificationStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerificationStatus* value) {
    return NotificationChannel_VerificationStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 5,
    kUserLabelsFieldNumber = 8,
    kMutationRecordsFieldNumber = 13,
    kTypeFieldNumber = 1,
    kDisplayNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kNameFieldNumber = 6,
    kEnabledFieldNumber = 11,
    kCreationRecordFieldNumber = 12,
    kVerificationStatusFieldNumber = 9,
  };
  // map<string, string> labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> user_labels = 8;
  int user_labels_size() const;
  private:
  int _internal_user_labels_size() const;
  public:
  void clear_user_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_user_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_user_labels();

  // repeated .google.monitoring.v3.MutationRecord mutation_records = 13;
  int mutation_records_size() const;
  private:
  int _internal_mutation_records_size() const;
  public:
  void clear_mutation_records();
  ::google::monitoring::v3::MutationRecord* mutable_mutation_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::MutationRecord >*
      mutable_mutation_records();
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_mutation_records(int index) const;
  ::google::monitoring::v3::MutationRecord* _internal_add_mutation_records();
  public:
  const ::google::monitoring::v3::MutationRecord& mutation_records(int index) const;
  ::google::monitoring::v3::MutationRecord* add_mutation_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::MutationRecord >&
      mutation_records() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.BoolValue enabled = 11;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enabled() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enabled();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enabled();
  void set_allocated_enabled(::PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enabled();

  // .google.monitoring.v3.MutationRecord creation_record = 12;
  bool has_creation_record() const;
  private:
  bool _internal_has_creation_record() const;
  public:
  void clear_creation_record();
  const ::google::monitoring::v3::MutationRecord& creation_record() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::MutationRecord* release_creation_record();
  ::google::monitoring::v3::MutationRecord* mutable_creation_record();
  void set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record);
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_creation_record() const;
  ::google::monitoring::v3::MutationRecord* _internal_mutable_creation_record();
  public:
  void unsafe_arena_set_allocated_creation_record(
      ::google::monitoring::v3::MutationRecord* creation_record);
  ::google::monitoring::v3::MutationRecord* unsafe_arena_release_creation_record();

  // .google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;
  void clear_verification_status();
  ::google::monitoring::v3::NotificationChannel_VerificationStatus verification_status() const;
  void set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value);
  private:
  ::google::monitoring::v3::NotificationChannel_VerificationStatus _internal_verification_status() const;
  void _internal_set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.NotificationChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NotificationChannel_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NotificationChannel_UserLabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> user_labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::MutationRecord > mutation_records_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled_;
    ::google::monitoring::v3::MutationRecord* creation_record_;
    int verification_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationChannelDescriptor

// string name = 6;
inline void NotificationChannelDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NotificationChannelDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannelDescriptor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.name)
}
inline std::string* NotificationChannelDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.name)
  return _s;
}
inline const std::string& NotificationChannelDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NotificationChannelDescriptor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.name)
  return _impl_.name_.Release();
}
inline void NotificationChannelDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.name)
}

// string type = 1;
inline void NotificationChannelDescriptor::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& NotificationChannelDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannelDescriptor::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.type)
}
inline std::string* NotificationChannelDescriptor::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.type)
  return _s;
}
inline const std::string& NotificationChannelDescriptor::_internal_type() const {
  return _impl_.type_.Get();
}
inline void NotificationChannelDescriptor::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.type)
  return _impl_.type_.Release();
}
inline void NotificationChannelDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.type)
}

// string display_name = 2;
inline void NotificationChannelDescriptor::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& NotificationChannelDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannelDescriptor::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}
inline std::string* NotificationChannelDescriptor::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  return _s;
}
inline const std::string& NotificationChannelDescriptor::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void NotificationChannelDescriptor::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  return _impl_.display_name_.Release();
}
inline void NotificationChannelDescriptor::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}

// string description = 3;
inline void NotificationChannelDescriptor::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& NotificationChannelDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannelDescriptor::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.description)
}
inline std::string* NotificationChannelDescriptor::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.description)
  return _s;
}
inline const std::string& NotificationChannelDescriptor::_internal_description() const {
  return _impl_.description_.Get();
}
inline void NotificationChannelDescriptor::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannelDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.description)
  return _impl_.description_.Release();
}
inline void NotificationChannelDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.description)
}

// repeated .google.api.LabelDescriptor labels = 4;
inline int NotificationChannelDescriptor::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int NotificationChannelDescriptor::labels_size() const {
  return _internal_labels_size();
}
inline ::google::api::LabelDescriptor* NotificationChannelDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return _impl_.labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
NotificationChannelDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return &_impl_.labels_;
}
inline const ::google::api::LabelDescriptor& NotificationChannelDescriptor::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const ::google::api::LabelDescriptor& NotificationChannelDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return _internal_labels(index);
}
inline ::google::api::LabelDescriptor* NotificationChannelDescriptor::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline ::google::api::LabelDescriptor* NotificationChannelDescriptor::add_labels() {
  ::google::api::LabelDescriptor* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
NotificationChannelDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return _impl_.labels_;
}

// repeated .google.monitoring.v3.ServiceTier supported_tiers = 5 [deprecated = true];
inline int NotificationChannelDescriptor::_internal_supported_tiers_size() const {
  return _impl_.supported_tiers_.size();
}
inline int NotificationChannelDescriptor::supported_tiers_size() const {
  return _internal_supported_tiers_size();
}
inline void NotificationChannelDescriptor::clear_supported_tiers() {
  _impl_.supported_tiers_.Clear();
}
inline ::google::monitoring::v3::ServiceTier NotificationChannelDescriptor::_internal_supported_tiers(int index) const {
  return static_cast< ::google::monitoring::v3::ServiceTier >(_impl_.supported_tiers_.Get(index));
}
inline ::google::monitoring::v3::ServiceTier NotificationChannelDescriptor::supported_tiers(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return _internal_supported_tiers(index);
}
inline void NotificationChannelDescriptor::set_supported_tiers(int index, ::google::monitoring::v3::ServiceTier value) {
  _impl_.supported_tiers_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
}
inline void NotificationChannelDescriptor::_internal_add_supported_tiers(::google::monitoring::v3::ServiceTier value) {
  _impl_.supported_tiers_.Add(value);
}
inline void NotificationChannelDescriptor::add_supported_tiers(::google::monitoring::v3::ServiceTier value) {
  _internal_add_supported_tiers(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
NotificationChannelDescriptor::supported_tiers() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return _impl_.supported_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NotificationChannelDescriptor::_internal_mutable_supported_tiers() {
  return &_impl_.supported_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NotificationChannelDescriptor::mutable_supported_tiers() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return _internal_mutable_supported_tiers();
}

// .google.api.LaunchStage launch_stage = 7;
inline void NotificationChannelDescriptor::clear_launch_stage() {
  _impl_.launch_stage_ = 0;
}
inline ::google::api::LaunchStage NotificationChannelDescriptor::_internal_launch_stage() const {
  return static_cast< ::google::api::LaunchStage >(_impl_.launch_stage_);
}
inline ::google::api::LaunchStage NotificationChannelDescriptor::launch_stage() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.launch_stage)
  return _internal_launch_stage();
}
inline void NotificationChannelDescriptor::_internal_set_launch_stage(::google::api::LaunchStage value) {
  
  _impl_.launch_stage_ = value;
}
inline void NotificationChannelDescriptor::set_launch_stage(::google::api::LaunchStage value) {
  _internal_set_launch_stage(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.launch_stage)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationChannel

// string type = 1;
inline void NotificationChannel::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& NotificationChannel::type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannel::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.type)
}
inline std::string* NotificationChannel::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.type)
  return _s;
}
inline const std::string& NotificationChannel::_internal_type() const {
  return _impl_.type_.Get();
}
inline void NotificationChannel::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannel::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannel::release_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.type)
  return _impl_.type_.Release();
}
inline void NotificationChannel::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.type)
}

// string name = 6;
inline void NotificationChannel::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NotificationChannel::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannel::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.name)
}
inline std::string* NotificationChannel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.name)
  return _s;
}
inline const std::string& NotificationChannel::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NotificationChannel::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannel::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannel::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.name)
  return _impl_.name_.Release();
}
inline void NotificationChannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.name)
}

// string display_name = 3;
inline void NotificationChannel::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& NotificationChannel::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannel::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.display_name)
}
inline std::string* NotificationChannel::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.display_name)
  return _s;
}
inline const std::string& NotificationChannel::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void NotificationChannel::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannel::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannel::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.display_name)
  return _impl_.display_name_.Release();
}
inline void NotificationChannel::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.display_name)
}

// string description = 4;
inline void NotificationChannel::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& NotificationChannel::description() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationChannel::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.description)
}
inline std::string* NotificationChannel::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.description)
  return _s;
}
inline const std::string& NotificationChannel::_internal_description() const {
  return _impl_.description_.Get();
}
inline void NotificationChannel::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationChannel::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationChannel::release_description() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.description)
  return _impl_.description_.Release();
}
inline void NotificationChannel::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.description)
}

// map<string, string> labels = 5;
inline int NotificationChannel::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int NotificationChannel::labels_size() const {
  return _internal_labels_size();
}
inline void NotificationChannel::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NotificationChannel::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NotificationChannel::labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.NotificationChannel.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NotificationChannel::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NotificationChannel::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.NotificationChannel.labels)
  return _internal_mutable_labels();
}

// map<string, string> user_labels = 8;
inline int NotificationChannel::_internal_user_labels_size() const {
  return _impl_.user_labels_.size();
}
inline int NotificationChannel::user_labels_size() const {
  return _internal_user_labels_size();
}
inline void NotificationChannel::clear_user_labels() {
  _impl_.user_labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NotificationChannel::_internal_user_labels() const {
  return _impl_.user_labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NotificationChannel::user_labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.NotificationChannel.user_labels)
  return _internal_user_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NotificationChannel::_internal_mutable_user_labels() {
  return _impl_.user_labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NotificationChannel::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.NotificationChannel.user_labels)
  return _internal_mutable_user_labels();
}

// .google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;
inline void NotificationChannel::clear_verification_status() {
  _impl_.verification_status_ = 0;
}
inline ::google::monitoring::v3::NotificationChannel_VerificationStatus NotificationChannel::_internal_verification_status() const {
  return static_cast< ::google::monitoring::v3::NotificationChannel_VerificationStatus >(_impl_.verification_status_);
}
inline ::google::monitoring::v3::NotificationChannel_VerificationStatus NotificationChannel::verification_status() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.verification_status)
  return _internal_verification_status();
}
inline void NotificationChannel::_internal_set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value) {
  
  _impl_.verification_status_ = value;
}
inline void NotificationChannel::set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value) {
  _internal_set_verification_status(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.verification_status)
}

// .google.protobuf.BoolValue enabled = 11;
inline bool NotificationChannel::_internal_has_enabled() const {
  return this != internal_default_instance() && _impl_.enabled_ != nullptr;
}
inline bool NotificationChannel::has_enabled() const {
  return _internal_has_enabled();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& NotificationChannel::_internal_enabled() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& NotificationChannel::enabled() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.enabled)
  return _internal_enabled();
}
inline void NotificationChannel::unsafe_arena_set_allocated_enabled(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  _impl_.enabled_ = enabled;
  if (enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.NotificationChannel.enabled)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NotificationChannel::release_enabled() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NotificationChannel::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.enabled)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NotificationChannel::_internal_mutable_enabled() {
  
  if (_impl_.enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.enabled_ = p;
  }
  return _impl_.enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NotificationChannel::mutable_enabled() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enabled();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.enabled)
  return _msg;
}
inline void NotificationChannel::set_allocated_enabled(::PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled));
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.enabled)
}

// .google.monitoring.v3.MutationRecord creation_record = 12;
inline bool NotificationChannel::_internal_has_creation_record() const {
  return this != internal_default_instance() && _impl_.creation_record_ != nullptr;
}
inline bool NotificationChannel::has_creation_record() const {
  return _internal_has_creation_record();
}
inline const ::google::monitoring::v3::MutationRecord& NotificationChannel::_internal_creation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = _impl_.creation_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::MutationRecord&>(
      ::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline const ::google::monitoring::v3::MutationRecord& NotificationChannel::creation_record() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.creation_record)
  return _internal_creation_record();
}
inline void NotificationChannel::unsafe_arena_set_allocated_creation_record(
    ::google::monitoring::v3::MutationRecord* creation_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_record_);
  }
  _impl_.creation_record_ = creation_record;
  if (creation_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.NotificationChannel.creation_record)
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::release_creation_record() {
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.creation_record_;
  _impl_.creation_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::unsafe_arena_release_creation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.creation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.creation_record_;
  _impl_.creation_record_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::_internal_mutable_creation_record() {
  
  if (_impl_.creation_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArenaForAllocation());
    _impl_.creation_record_ = p;
  }
  return _impl_.creation_record_;
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::mutable_creation_record() {
  ::google::monitoring::v3::MutationRecord* _msg = _internal_mutable_creation_record();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.creation_record)
  return _msg;
}
inline void NotificationChannel::set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_record_);
  }
  if (creation_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_record));
    if (message_arena != submessage_arena) {
      creation_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creation_record_ = creation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.creation_record)
}

// repeated .google.monitoring.v3.MutationRecord mutation_records = 13;
inline int NotificationChannel::_internal_mutation_records_size() const {
  return _impl_.mutation_records_.size();
}
inline int NotificationChannel::mutation_records_size() const {
  return _internal_mutation_records_size();
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::mutable_mutation_records(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.mutation_records)
  return _impl_.mutation_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::MutationRecord >*
NotificationChannel::mutable_mutation_records() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.NotificationChannel.mutation_records)
  return &_impl_.mutation_records_;
}
inline const ::google::monitoring::v3::MutationRecord& NotificationChannel::_internal_mutation_records(int index) const {
  return _impl_.mutation_records_.Get(index);
}
inline const ::google::monitoring::v3::MutationRecord& NotificationChannel::mutation_records(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.mutation_records)
  return _internal_mutation_records(index);
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::_internal_add_mutation_records() {
  return _impl_.mutation_records_.Add();
}
inline ::google::monitoring::v3::MutationRecord* NotificationChannel::add_mutation_records() {
  ::google::monitoring::v3::MutationRecord* _add = _internal_add_mutation_records();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.NotificationChannel.mutation_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::MutationRecord >&
NotificationChannel::mutation_records() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.NotificationChannel.mutation_records)
  return _impl_.mutation_records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::v3::NotificationChannel_VerificationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::NotificationChannel_VerificationStatus>() {
  return ::google::monitoring::v3::NotificationChannel_VerificationStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto
