// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/notification_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/notification_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// The Notification Channel API provides access to configuration that
// controls how messages related to incidents are sent.
class NotificationChannelService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.NotificationChannelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the descriptors for supported channel types. The use of descriptors
    // makes it possible for new channel types to be dynamically added.
    virtual ::grpc::Status ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>> AsyncListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>>(AsyncListNotificationChannelDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>> PrepareAsyncListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>>(PrepareAsyncListNotificationChannelDescriptorsRaw(context, request, cq));
    }
    // Gets a single channel descriptor. The descriptor indicates which fields
    // are expected / permitted for a notification channel of the given type.
    virtual ::grpc::Status GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::google::monitoring::v3::NotificationChannelDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>> AsyncGetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>>(AsyncGetNotificationChannelDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>> PrepareAsyncGetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>>(PrepareAsyncGetNotificationChannelDescriptorRaw(context, request, cq));
    }
    // Lists the notification channels that have been created for the project.
    virtual ::grpc::Status ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::google::monitoring::v3::ListNotificationChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>> AsyncListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>>(AsyncListNotificationChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>> PrepareAsyncListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>>(PrepareAsyncListNotificationChannelsRaw(context, request, cq));
    }
    // Gets a single notification channel. The channel includes the relevant
    // configuration details with which the channel was created. However, the
    // response may truncate or omit passwords, API keys, or other private key
    // matter and thus the response may not be 100% identical to the information
    // that was supplied in the call to the create method.
    virtual ::grpc::Status GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> AsyncGetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(AsyncGetNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncGetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncGetNotificationChannelRaw(context, request, cq));
    }
    // Creates a new notification channel, representing a single notification
    // endpoint such as an email address, SMS number, or PagerDuty service.
    virtual ::grpc::Status CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> AsyncCreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(AsyncCreateNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncCreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncCreateNotificationChannelRaw(context, request, cq));
    }
    // Updates a notification channel. Fields not specified in the field mask
    // remain unchanged.
    virtual ::grpc::Status UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> AsyncUpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(AsyncUpdateNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncUpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncUpdateNotificationChannelRaw(context, request, cq));
    }
    // Deletes a notification channel.
    virtual ::grpc::Status DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNotificationChannelRaw(context, request, cq));
    }
    // Causes a verification code to be delivered to the channel. The code
    // can then be supplied in `VerifyNotificationChannel` to verify the channel.
    virtual ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    // Requests a verification code for an already verified channel that can then
    // be used in a call to VerifyNotificationChannel() on a different channel
    // with an equivalent identity in the same or in a different project. This
    // makes it possible to copy a channel between projects without requiring
    // manual reverification of the channel. If the channel is not in the
    // verified state, this method will fail (in other words, this may only be
    // used if the SendNotificationChannelVerificationCode and
    // VerifyNotificationChannel paths have already been used to put the given
    // channel into the verified state).
    //
    // There is no guarantee that the verification codes returned by this method
    // will be of a similar structure or form as the ones that are delivered
    // to the channel via SendNotificationChannelVerificationCode; while
    // VerifyNotificationChannel() will recognize both the codes delivered via
    // SendNotificationChannelVerificationCode() and returned from
    // GetNotificationChannelVerificationCode(), it is typically the case that
    // the verification codes delivered via
    // SendNotificationChannelVerificationCode() will be shorter and also
    // have a shorter expiration (e.g. codes such as "G-123456") whereas
    // GetVerificationCode() will typically return a much longer, websafe base
    // 64 encoded string that has a longer expiration time.
    virtual ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>> AsyncGetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>>(AsyncGetNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>> PrepareAsyncGetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>>(PrepareAsyncGetNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    // Verifies a `NotificationChannel` by proving receipt of the code
    // delivered to the channel as a result of calling
    // `SendNotificationChannelVerificationCode`.
    virtual ::grpc::Status VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> AsyncVerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(AsyncVerifyNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncVerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncVerifyNotificationChannelRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists the descriptors for supported channel types. The use of descriptors
      // makes it possible for new channel types to be dynamically added.
      virtual void ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single channel descriptor. The descriptor indicates which fields
      // are expected / permitted for a notification channel of the given type.
      virtual void GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the notification channels that have been created for the project.
      virtual void ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single notification channel. The channel includes the relevant
      // configuration details with which the channel was created. However, the
      // response may truncate or omit passwords, API keys, or other private key
      // matter and thus the response may not be 100% identical to the information
      // that was supplied in the call to the create method.
      virtual void GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new notification channel, representing a single notification
      // endpoint such as an email address, SMS number, or PagerDuty service.
      virtual void CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates a notification channel. Fields not specified in the field mask
      // remain unchanged.
      virtual void UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a notification channel.
      virtual void DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Causes a verification code to be delivered to the channel. The code
      // can then be supplied in `VerifyNotificationChannel` to verify the channel.
      virtual void SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Requests a verification code for an already verified channel that can then
      // be used in a call to VerifyNotificationChannel() on a different channel
      // with an equivalent identity in the same or in a different project. This
      // makes it possible to copy a channel between projects without requiring
      // manual reverification of the channel. If the channel is not in the
      // verified state, this method will fail (in other words, this may only be
      // used if the SendNotificationChannelVerificationCode and
      // VerifyNotificationChannel paths have already been used to put the given
      // channel into the verified state).
      //
      // There is no guarantee that the verification codes returned by this method
      // will be of a similar structure or form as the ones that are delivered
      // to the channel via SendNotificationChannelVerificationCode; while
      // VerifyNotificationChannel() will recognize both the codes delivered via
      // SendNotificationChannelVerificationCode() and returned from
      // GetNotificationChannelVerificationCode(), it is typically the case that
      // the verification codes delivered via
      // SendNotificationChannelVerificationCode() will be shorter and also
      // have a shorter expiration (e.g. codes such as "G-123456") whereas
      // GetVerificationCode() will typically return a much longer, websafe base
      // 64 encoded string that has a longer expiration time.
      virtual void GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Verifies a `NotificationChannel` by proving receipt of the code
      // delivered to the channel as a result of calling
      // `SendNotificationChannelVerificationCode`.
      virtual void VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* AsyncListNotificationChannelDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* PrepareAsyncListNotificationChannelDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>* AsyncGetNotificationChannelDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannelDescriptor>* PrepareAsyncGetNotificationChannelDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>* AsyncListNotificationChannelsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListNotificationChannelsResponse>* PrepareAsyncListNotificationChannelsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* AsyncGetNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncGetNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* AsyncCreateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncCreateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* AsyncUpdateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncUpdateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* AsyncGetNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* PrepareAsyncGetNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* AsyncVerifyNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncVerifyNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>> AsyncListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>>(AsyncListNotificationChannelDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>> PrepareAsyncListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>>(PrepareAsyncListNotificationChannelDescriptorsRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::google::monitoring::v3::NotificationChannelDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>> AsyncGetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>>(AsyncGetNotificationChannelDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>> PrepareAsyncGetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>>(PrepareAsyncGetNotificationChannelDescriptorRaw(context, request, cq));
    }
    ::grpc::Status ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::google::monitoring::v3::ListNotificationChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>> AsyncListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>>(AsyncListNotificationChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>> PrepareAsyncListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>>(PrepareAsyncListNotificationChannelsRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> AsyncGetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(AsyncGetNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncGetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncGetNotificationChannelRaw(context, request, cq));
    }
    ::grpc::Status CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> AsyncCreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(AsyncCreateNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncCreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncCreateNotificationChannelRaw(context, request, cq));
    }
    ::grpc::Status UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> AsyncUpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(AsyncUpdateNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncUpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncUpdateNotificationChannelRaw(context, request, cq));
    }
    ::grpc::Status DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNotificationChannelRaw(context, request, cq));
    }
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>> AsyncGetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>>(AsyncGetNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>> PrepareAsyncGetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>>(PrepareAsyncGetNotificationChannelVerificationCodeRaw(context, request, cq));
    }
    ::grpc::Status VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::google::monitoring::v3::NotificationChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> AsyncVerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(AsyncVerifyNotificationChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>> PrepareAsyncVerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>>(PrepareAsyncVerifyNotificationChannelRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNotificationChannelDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response, std::function<void(::grpc::Status)>) override;
      void GetNotificationChannelDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNotificationChannels(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) override;
      void GetNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) override;
      void CreateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) override;
      void UpdateNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNotificationChannelVerificationCode(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, std::function<void(::grpc::Status)>) override;
      void VerifyNotificationChannel(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* AsyncListNotificationChannelDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* PrepareAsyncListNotificationChannelDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>* AsyncGetNotificationChannelDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannelDescriptor>* PrepareAsyncGetNotificationChannelDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>* AsyncListNotificationChannelsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListNotificationChannelsResponse>* PrepareAsyncListNotificationChannelsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* AsyncGetNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncGetNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* AsyncCreateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncCreateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* AsyncUpdateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncUpdateNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* AsyncGetNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* PrepareAsyncGetNotificationChannelVerificationCodeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* AsyncVerifyNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::NotificationChannel>* PrepareAsyncVerifyNotificationChannelRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotificationChannelDescriptors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationChannelDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotificationChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNotificationChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNotificationChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNotificationChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_SendNotificationChannelVerificationCode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNotificationChannelVerificationCode_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyNotificationChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the descriptors for supported channel types. The use of descriptors
    // makes it possible for new channel types to be dynamically added.
    virtual ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response);
    // Gets a single channel descriptor. The descriptor indicates which fields
    // are expected / permitted for a notification channel of the given type.
    virtual ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response);
    // Lists the notification channels that have been created for the project.
    virtual ::grpc::Status ListNotificationChannels(::grpc::ServerContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response);
    // Gets a single notification channel. The channel includes the relevant
    // configuration details with which the channel was created. However, the
    // response may truncate or omit passwords, API keys, or other private key
    // matter and thus the response may not be 100% identical to the information
    // that was supplied in the call to the create method.
    virtual ::grpc::Status GetNotificationChannel(::grpc::ServerContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response);
    // Creates a new notification channel, representing a single notification
    // endpoint such as an email address, SMS number, or PagerDuty service.
    virtual ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response);
    // Updates a notification channel. Fields not specified in the field mask
    // remain unchanged.
    virtual ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response);
    // Deletes a notification channel.
    virtual ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response);
    // Causes a verification code to be delivered to the channel. The code
    // can then be supplied in `VerifyNotificationChannel` to verify the channel.
    virtual ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response);
    // Requests a verification code for an already verified channel that can then
    // be used in a call to VerifyNotificationChannel() on a different channel
    // with an equivalent identity in the same or in a different project. This
    // makes it possible to copy a channel between projects without requiring
    // manual reverification of the channel. If the channel is not in the
    // verified state, this method will fail (in other words, this may only be
    // used if the SendNotificationChannelVerificationCode and
    // VerifyNotificationChannel paths have already been used to put the given
    // channel into the verified state).
    //
    // There is no guarantee that the verification codes returned by this method
    // will be of a similar structure or form as the ones that are delivered
    // to the channel via SendNotificationChannelVerificationCode; while
    // VerifyNotificationChannel() will recognize both the codes delivered via
    // SendNotificationChannelVerificationCode() and returned from
    // GetNotificationChannelVerificationCode(), it is typically the case that
    // the verification codes delivered via
    // SendNotificationChannelVerificationCode() will be shorter and also
    // have a shorter expiration (e.g. codes such as "G-123456") whereas
    // GetVerificationCode() will typically return a much longer, websafe base
    // 64 encoded string that has a longer expiration time.
    virtual ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response);
    // Verifies a `NotificationChannel` by proving receipt of the code
    // delivered to the channel as a result of calling
    // `SendNotificationChannelVerificationCode`.
    virtual ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotificationChannelDescriptors(::grpc::ServerContext* context, ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannelDescriptor(::grpc::ServerContext* context, ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::NotificationChannelDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotificationChannels(::grpc::ServerContext* context, ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListNotificationChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannel(::grpc::ServerContext* context, ::google::monitoring::v3::GetNotificationChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::NotificationChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNotificationChannel(::grpc::ServerContext* context, ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::NotificationChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNotificationChannel(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::NotificationChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNotificationChannel(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNotificationChannelVerificationCode(::grpc::ServerContext* context, ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannelVerificationCode(::grpc::ServerContext* context, ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyNotificationChannel(::grpc::ServerContext* context, ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::NotificationChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListNotificationChannelDescriptors<WithAsyncMethod_GetNotificationChannelDescriptor<WithAsyncMethod_ListNotificationChannels<WithAsyncMethod_GetNotificationChannel<WithAsyncMethod_CreateNotificationChannel<WithAsyncMethod_UpdateNotificationChannel<WithAsyncMethod_DeleteNotificationChannel<WithAsyncMethod_SendNotificationChannelVerificationCode<WithAsyncMethod_GetNotificationChannelVerificationCode<WithAsyncMethod_VerifyNotificationChannel<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* request, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* response) { return this->ListNotificationChannelDescriptors(context, request, response); }));}
    void SetMessageAllocatorFor_ListNotificationChannelDescriptors(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotificationChannelDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelDescriptorRequest, ::google::monitoring::v3::NotificationChannelDescriptor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* request, ::google::monitoring::v3::NotificationChannelDescriptor* response) { return this->GetNotificationChannelDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationChannelDescriptor(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetNotificationChannelDescriptorRequest, ::google::monitoring::v3::NotificationChannelDescriptor>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelDescriptorRequest, ::google::monitoring::v3::NotificationChannelDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannelDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListNotificationChannelsRequest, ::google::monitoring::v3::ListNotificationChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListNotificationChannelsRequest* request, ::google::monitoring::v3::ListNotificationChannelsResponse* response) { return this->ListNotificationChannels(context, request, response); }));}
    void SetMessageAllocatorFor_ListNotificationChannels(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListNotificationChannelsRequest, ::google::monitoring::v3::ListNotificationChannelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListNotificationChannelsRequest, ::google::monitoring::v3::ListNotificationChannelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotificationChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response) { return this->GetNotificationChannel(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationChannel(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response) { return this->CreateNotificationChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNotificationChannel(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::UpdateNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response) { return this->UpdateNotificationChannel(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNotificationChannel(
        ::grpc::MessageAllocator< ::google::monitoring::v3::UpdateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteNotificationChannelRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::DeleteNotificationChannelRequest* request, ::google::protobuf::Empty* response) { return this->DeleteNotificationChannel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNotificationChannel(
        ::grpc::MessageAllocator< ::google::monitoring::v3::DeleteNotificationChannelRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteNotificationChannelRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* request, ::google::protobuf::Empty* response) { return this->SendNotificationChannelVerificationCode(context, request, response); }));}
    void SetMessageAllocatorFor_SendNotificationChannelVerificationCode(
        ::grpc::MessageAllocator< ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNotificationChannelVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* request, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* response) { return this->GetNotificationChannelVerificationCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetNotificationChannelVerificationCode(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannelVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::VerifyNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::VerifyNotificationChannelRequest* request, ::google::monitoring::v3::NotificationChannel* response) { return this->VerifyNotificationChannel(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyNotificationChannel(
        ::grpc::MessageAllocator< ::google::monitoring::v3::VerifyNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::VerifyNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListNotificationChannelDescriptors<WithCallbackMethod_GetNotificationChannelDescriptor<WithCallbackMethod_ListNotificationChannels<WithCallbackMethod_GetNotificationChannel<WithCallbackMethod_CreateNotificationChannel<WithCallbackMethod_UpdateNotificationChannel<WithCallbackMethod_DeleteNotificationChannel<WithCallbackMethod_SendNotificationChannelVerificationCode<WithCallbackMethod_GetNotificationChannelVerificationCode<WithCallbackMethod_VerifyNotificationChannel<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotificationChannelDescriptors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannelDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotificationChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNotificationChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNotificationChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNotificationChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendNotificationChannelVerificationCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNotificationChannelVerificationCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyNotificationChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNotificationChannelDescriptors(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotificationChannelDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationChannelDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannelDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNotificationChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotificationChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNotificationChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNotificationChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNotificationChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendNotificationChannelVerificationCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendNotificationChannelVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNotificationChannelVerificationCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNotificationChannelVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyNotificationChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyNotificationChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotificationChannelDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNotificationChannelDescriptors() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* streamer) {
                       return this->StreamedListNotificationChannelDescriptors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNotificationChannelDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotificationChannelDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotificationChannelDescriptors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest,::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationChannelDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationChannelDescriptor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetNotificationChannelDescriptorRequest, ::google::monitoring::v3::NotificationChannelDescriptor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetNotificationChannelDescriptorRequest, ::google::monitoring::v3::NotificationChannelDescriptor>* streamer) {
                       return this->StreamedGetNotificationChannelDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationChannelDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationChannelDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* /*request*/, ::google::monitoring::v3::NotificationChannelDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationChannelDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetNotificationChannelDescriptorRequest,::google::monitoring::v3::NotificationChannelDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotificationChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNotificationChannels() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListNotificationChannelsRequest, ::google::monitoring::v3::ListNotificationChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListNotificationChannelsRequest, ::google::monitoring::v3::ListNotificationChannelsResponse>* streamer) {
                       return this->StreamedListNotificationChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNotificationChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotificationChannels(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListNotificationChannelsRequest* /*request*/, ::google::monitoring::v3::ListNotificationChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotificationChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListNotificationChannelsRequest,::google::monitoring::v3::ListNotificationChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationChannel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* streamer) {
                       return this->StreamedGetNotificationChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetNotificationChannelRequest,::google::monitoring::v3::NotificationChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNotificationChannel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* streamer) {
                       return this->StreamedCreateNotificationChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNotificationChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateNotificationChannelRequest,::google::monitoring::v3::NotificationChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNotificationChannel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* streamer) {
                       return this->StreamedUpdateNotificationChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNotificationChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateNotificationChannelRequest,::google::monitoring::v3::NotificationChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNotificationChannel() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteNotificationChannelRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteNotificationChannelRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteNotificationChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteNotificationChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNotificationChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteNotificationChannelRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSendNotificationChannelVerificationCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendNotificationChannelVerificationCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNotificationChannelVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNotificationChannelVerificationCode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* streamer) {
                       return this->StreamedGetNotificationChannelVerificationCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNotificationChannelVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNotificationChannelVerificationCode(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* /*request*/, ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNotificationChannelVerificationCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest,::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyNotificationChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyNotificationChannel() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::VerifyNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::VerifyNotificationChannelRequest, ::google::monitoring::v3::NotificationChannel>* streamer) {
                       return this->StreamedVerifyNotificationChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyNotificationChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyNotificationChannel(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::VerifyNotificationChannelRequest* /*request*/, ::google::monitoring::v3::NotificationChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyNotificationChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::VerifyNotificationChannelRequest,::google::monitoring::v3::NotificationChannel>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListNotificationChannelDescriptors<WithStreamedUnaryMethod_GetNotificationChannelDescriptor<WithStreamedUnaryMethod_ListNotificationChannels<WithStreamedUnaryMethod_GetNotificationChannel<WithStreamedUnaryMethod_CreateNotificationChannel<WithStreamedUnaryMethod_UpdateNotificationChannel<WithStreamedUnaryMethod_DeleteNotificationChannel<WithStreamedUnaryMethod_SendNotificationChannelVerificationCode<WithStreamedUnaryMethod_GetNotificationChannelVerificationCode<WithStreamedUnaryMethod_VerifyNotificationChannel<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListNotificationChannelDescriptors<WithStreamedUnaryMethod_GetNotificationChannelDescriptor<WithStreamedUnaryMethod_ListNotificationChannels<WithStreamedUnaryMethod_GetNotificationChannel<WithStreamedUnaryMethod_CreateNotificationChannel<WithStreamedUnaryMethod_UpdateNotificationChannel<WithStreamedUnaryMethod_DeleteNotificationChannel<WithStreamedUnaryMethod_SendNotificationChannelVerificationCode<WithStreamedUnaryMethod_GetNotificationChannelVerificationCode<WithStreamedUnaryMethod_VerifyNotificationChannel<Service > > > > > > > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto__INCLUDED
