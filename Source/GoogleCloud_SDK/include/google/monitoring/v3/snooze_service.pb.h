// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/snooze_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/snooze.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateSnoozeRequest;
struct CreateSnoozeRequestDefaultTypeInternal;
extern CreateSnoozeRequestDefaultTypeInternal _CreateSnoozeRequest_default_instance_;
class GetSnoozeRequest;
struct GetSnoozeRequestDefaultTypeInternal;
extern GetSnoozeRequestDefaultTypeInternal _GetSnoozeRequest_default_instance_;
class ListSnoozesRequest;
struct ListSnoozesRequestDefaultTypeInternal;
extern ListSnoozesRequestDefaultTypeInternal _ListSnoozesRequest_default_instance_;
class ListSnoozesResponse;
struct ListSnoozesResponseDefaultTypeInternal;
extern ListSnoozesResponseDefaultTypeInternal _ListSnoozesResponse_default_instance_;
class UpdateSnoozeRequest;
struct UpdateSnoozeRequestDefaultTypeInternal;
extern UpdateSnoozeRequestDefaultTypeInternal _UpdateSnoozeRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateSnoozeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateSnoozeRequest>(Arena*);
template<> ::google::monitoring::v3::GetSnoozeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetSnoozeRequest>(Arena*);
template<> ::google::monitoring::v3::ListSnoozesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListSnoozesRequest>(Arena*);
template<> ::google::monitoring::v3::ListSnoozesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListSnoozesResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateSnoozeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateSnoozeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class CreateSnoozeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateSnoozeRequest) */ {
 public:
  inline CreateSnoozeRequest() : CreateSnoozeRequest(nullptr) {}
  ~CreateSnoozeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSnoozeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSnoozeRequest(const CreateSnoozeRequest& from);
  CreateSnoozeRequest(CreateSnoozeRequest&& from) noexcept
    : CreateSnoozeRequest() {
    *this = ::std::move(from);
  }

  inline CreateSnoozeRequest& operator=(const CreateSnoozeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSnoozeRequest& operator=(CreateSnoozeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSnoozeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSnoozeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSnoozeRequest*>(
               &_CreateSnoozeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateSnoozeRequest& a, CreateSnoozeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSnoozeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSnoozeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSnoozeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSnoozeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSnoozeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSnoozeRequest& from) {
    CreateSnoozeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSnoozeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateSnoozeRequest";
  }
  protected:
  explicit CreateSnoozeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSnoozeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.monitoring.v3.Snooze snooze = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_snooze() const;
  private:
  bool _internal_has_snooze() const;
  public:
  void clear_snooze();
  const ::google::monitoring::v3::Snooze& snooze() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Snooze* release_snooze();
  ::google::monitoring::v3::Snooze* mutable_snooze();
  void set_allocated_snooze(::google::monitoring::v3::Snooze* snooze);
  private:
  const ::google::monitoring::v3::Snooze& _internal_snooze() const;
  ::google::monitoring::v3::Snooze* _internal_mutable_snooze();
  public:
  void unsafe_arena_set_allocated_snooze(
      ::google::monitoring::v3::Snooze* snooze);
  ::google::monitoring::v3::Snooze* unsafe_arena_release_snooze();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateSnoozeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::monitoring::v3::Snooze* snooze_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListSnoozesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListSnoozesRequest) */ {
 public:
  inline ListSnoozesRequest() : ListSnoozesRequest(nullptr) {}
  ~ListSnoozesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSnoozesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnoozesRequest(const ListSnoozesRequest& from);
  ListSnoozesRequest(ListSnoozesRequest&& from) noexcept
    : ListSnoozesRequest() {
    *this = ::std::move(from);
  }

  inline ListSnoozesRequest& operator=(const ListSnoozesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnoozesRequest& operator=(ListSnoozesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnoozesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnoozesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnoozesRequest*>(
               &_ListSnoozesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListSnoozesRequest& a, ListSnoozesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnoozesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnoozesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSnoozesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSnoozesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnoozesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSnoozesRequest& from) {
    ListSnoozesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnoozesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListSnoozesRequest";
  }
  protected:
  explicit ListSnoozesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 5,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListSnoozesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListSnoozesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListSnoozesResponse) */ {
 public:
  inline ListSnoozesResponse() : ListSnoozesResponse(nullptr) {}
  ~ListSnoozesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSnoozesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSnoozesResponse(const ListSnoozesResponse& from);
  ListSnoozesResponse(ListSnoozesResponse&& from) noexcept
    : ListSnoozesResponse() {
    *this = ::std::move(from);
  }

  inline ListSnoozesResponse& operator=(const ListSnoozesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnoozesResponse& operator=(ListSnoozesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSnoozesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSnoozesResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnoozesResponse*>(
               &_ListSnoozesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListSnoozesResponse& a, ListSnoozesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnoozesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnoozesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSnoozesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSnoozesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSnoozesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListSnoozesResponse& from) {
    ListSnoozesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnoozesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListSnoozesResponse";
  }
  protected:
  explicit ListSnoozesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnoozesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.Snooze snoozes = 1;
  int snoozes_size() const;
  private:
  int _internal_snoozes_size() const;
  public:
  void clear_snoozes();
  ::google::monitoring::v3::Snooze* mutable_snoozes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Snooze >*
      mutable_snoozes();
  private:
  const ::google::monitoring::v3::Snooze& _internal_snoozes(int index) const;
  ::google::monitoring::v3::Snooze* _internal_add_snoozes();
  public:
  const ::google::monitoring::v3::Snooze& snoozes(int index) const;
  ::google::monitoring::v3::Snooze* add_snoozes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Snooze >&
      snoozes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListSnoozesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Snooze > snoozes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSnoozeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetSnoozeRequest) */ {
 public:
  inline GetSnoozeRequest() : GetSnoozeRequest(nullptr) {}
  ~GetSnoozeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSnoozeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSnoozeRequest(const GetSnoozeRequest& from);
  GetSnoozeRequest(GetSnoozeRequest&& from) noexcept
    : GetSnoozeRequest() {
    *this = ::std::move(from);
  }

  inline GetSnoozeRequest& operator=(const GetSnoozeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnoozeRequest& operator=(GetSnoozeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSnoozeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSnoozeRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnoozeRequest*>(
               &_GetSnoozeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetSnoozeRequest& a, GetSnoozeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnoozeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnoozeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSnoozeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSnoozeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSnoozeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSnoozeRequest& from) {
    GetSnoozeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnoozeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetSnoozeRequest";
  }
  protected:
  explicit GetSnoozeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetSnoozeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateSnoozeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateSnoozeRequest) */ {
 public:
  inline UpdateSnoozeRequest() : UpdateSnoozeRequest(nullptr) {}
  ~UpdateSnoozeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSnoozeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSnoozeRequest(const UpdateSnoozeRequest& from);
  UpdateSnoozeRequest(UpdateSnoozeRequest&& from) noexcept
    : UpdateSnoozeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSnoozeRequest& operator=(const UpdateSnoozeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSnoozeRequest& operator=(UpdateSnoozeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSnoozeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSnoozeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSnoozeRequest*>(
               &_UpdateSnoozeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateSnoozeRequest& a, UpdateSnoozeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSnoozeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSnoozeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSnoozeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSnoozeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSnoozeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSnoozeRequest& from) {
    UpdateSnoozeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSnoozeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateSnoozeRequest";
  }
  protected:
  explicit UpdateSnoozeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnoozeFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.monitoring.v3.Snooze snooze = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_snooze() const;
  private:
  bool _internal_has_snooze() const;
  public:
  void clear_snooze();
  const ::google::monitoring::v3::Snooze& snooze() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Snooze* release_snooze();
  ::google::monitoring::v3::Snooze* mutable_snooze();
  void set_allocated_snooze(::google::monitoring::v3::Snooze* snooze);
  private:
  const ::google::monitoring::v3::Snooze& _internal_snooze() const;
  ::google::monitoring::v3::Snooze* _internal_mutable_snooze();
  public:
  void unsafe_arena_set_allocated_snooze(
      ::google::monitoring::v3::Snooze* snooze);
  ::google::monitoring::v3::Snooze* unsafe_arena_release_snooze();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateSnoozeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::Snooze* snooze_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateSnoozeRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSnoozeRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateSnoozeRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateSnoozeRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSnoozeRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateSnoozeRequest.parent)
}
inline std::string* CreateSnoozeRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateSnoozeRequest.parent)
  return _s;
}
inline const std::string& CreateSnoozeRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateSnoozeRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSnoozeRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSnoozeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateSnoozeRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateSnoozeRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateSnoozeRequest.parent)
}

// .google.monitoring.v3.Snooze snooze = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSnoozeRequest::_internal_has_snooze() const {
  return this != internal_default_instance() && _impl_.snooze_ != nullptr;
}
inline bool CreateSnoozeRequest::has_snooze() const {
  return _internal_has_snooze();
}
inline const ::google::monitoring::v3::Snooze& CreateSnoozeRequest::_internal_snooze() const {
  const ::google::monitoring::v3::Snooze* p = _impl_.snooze_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Snooze&>(
      ::google::monitoring::v3::_Snooze_default_instance_);
}
inline const ::google::monitoring::v3::Snooze& CreateSnoozeRequest::snooze() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateSnoozeRequest.snooze)
  return _internal_snooze();
}
inline void CreateSnoozeRequest::unsafe_arena_set_allocated_snooze(
    ::google::monitoring::v3::Snooze* snooze) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snooze_);
  }
  _impl_.snooze_ = snooze;
  if (snooze) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateSnoozeRequest.snooze)
}
inline ::google::monitoring::v3::Snooze* CreateSnoozeRequest::release_snooze() {
  
  ::google::monitoring::v3::Snooze* temp = _impl_.snooze_;
  _impl_.snooze_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Snooze* CreateSnoozeRequest::unsafe_arena_release_snooze() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateSnoozeRequest.snooze)
  
  ::google::monitoring::v3::Snooze* temp = _impl_.snooze_;
  _impl_.snooze_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Snooze* CreateSnoozeRequest::_internal_mutable_snooze() {
  
  if (_impl_.snooze_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Snooze>(GetArenaForAllocation());
    _impl_.snooze_ = p;
  }
  return _impl_.snooze_;
}
inline ::google::monitoring::v3::Snooze* CreateSnoozeRequest::mutable_snooze() {
  ::google::monitoring::v3::Snooze* _msg = _internal_mutable_snooze();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateSnoozeRequest.snooze)
  return _msg;
}
inline void CreateSnoozeRequest::set_allocated_snooze(::google::monitoring::v3::Snooze* snooze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snooze_);
  }
  if (snooze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snooze));
    if (message_arena != submessage_arena) {
      snooze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snooze, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.snooze_ = snooze;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateSnoozeRequest.snooze)
}

// -------------------------------------------------------------------

// ListSnoozesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSnoozesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListSnoozesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnoozesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListSnoozesRequest.parent)
}
inline std::string* ListSnoozesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListSnoozesRequest.parent)
  return _s;
}
inline const std::string& ListSnoozesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListSnoozesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListSnoozesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListSnoozesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListSnoozesRequest.parent)
}

// string filter = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListSnoozesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListSnoozesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnoozesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListSnoozesRequest.filter)
}
inline std::string* ListSnoozesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListSnoozesRequest.filter)
  return _s;
}
inline const std::string& ListSnoozesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListSnoozesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListSnoozesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListSnoozesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListSnoozesRequest.filter)
}

// int32 page_size = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListSnoozesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListSnoozesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListSnoozesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesRequest.page_size)
  return _internal_page_size();
}
inline void ListSnoozesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListSnoozesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListSnoozesRequest.page_size)
}

// string page_token = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void ListSnoozesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListSnoozesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnoozesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListSnoozesRequest.page_token)
}
inline std::string* ListSnoozesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListSnoozesRequest.page_token)
  return _s;
}
inline const std::string& ListSnoozesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListSnoozesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnoozesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListSnoozesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListSnoozesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListSnoozesRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnoozesResponse

// repeated .google.monitoring.v3.Snooze snoozes = 1;
inline int ListSnoozesResponse::_internal_snoozes_size() const {
  return _impl_.snoozes_.size();
}
inline int ListSnoozesResponse::snoozes_size() const {
  return _internal_snoozes_size();
}
inline ::google::monitoring::v3::Snooze* ListSnoozesResponse::mutable_snoozes(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListSnoozesResponse.snoozes)
  return _impl_.snoozes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Snooze >*
ListSnoozesResponse::mutable_snoozes() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListSnoozesResponse.snoozes)
  return &_impl_.snoozes_;
}
inline const ::google::monitoring::v3::Snooze& ListSnoozesResponse::_internal_snoozes(int index) const {
  return _impl_.snoozes_.Get(index);
}
inline const ::google::monitoring::v3::Snooze& ListSnoozesResponse::snoozes(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesResponse.snoozes)
  return _internal_snoozes(index);
}
inline ::google::monitoring::v3::Snooze* ListSnoozesResponse::_internal_add_snoozes() {
  return _impl_.snoozes_.Add();
}
inline ::google::monitoring::v3::Snooze* ListSnoozesResponse::add_snoozes() {
  ::google::monitoring::v3::Snooze* _add = _internal_add_snoozes();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListSnoozesResponse.snoozes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Snooze >&
ListSnoozesResponse::snoozes() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListSnoozesResponse.snoozes)
  return _impl_.snoozes_;
}

// string next_page_token = 2;
inline void ListSnoozesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListSnoozesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListSnoozesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSnoozesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListSnoozesResponse.next_page_token)
}
inline std::string* ListSnoozesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListSnoozesResponse.next_page_token)
  return _s;
}
inline const std::string& ListSnoozesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListSnoozesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListSnoozesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListSnoozesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListSnoozesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListSnoozesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListSnoozesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSnoozeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSnoozeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetSnoozeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetSnoozeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSnoozeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetSnoozeRequest.name)
}
inline std::string* GetSnoozeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetSnoozeRequest.name)
  return _s;
}
inline const std::string& GetSnoozeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetSnoozeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSnoozeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSnoozeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetSnoozeRequest.name)
  return _impl_.name_.Release();
}
inline void GetSnoozeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetSnoozeRequest.name)
}

// -------------------------------------------------------------------

// UpdateSnoozeRequest

// .google.monitoring.v3.Snooze snooze = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnoozeRequest::_internal_has_snooze() const {
  return this != internal_default_instance() && _impl_.snooze_ != nullptr;
}
inline bool UpdateSnoozeRequest::has_snooze() const {
  return _internal_has_snooze();
}
inline const ::google::monitoring::v3::Snooze& UpdateSnoozeRequest::_internal_snooze() const {
  const ::google::monitoring::v3::Snooze* p = _impl_.snooze_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Snooze&>(
      ::google::monitoring::v3::_Snooze_default_instance_);
}
inline const ::google::monitoring::v3::Snooze& UpdateSnoozeRequest::snooze() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateSnoozeRequest.snooze)
  return _internal_snooze();
}
inline void UpdateSnoozeRequest::unsafe_arena_set_allocated_snooze(
    ::google::monitoring::v3::Snooze* snooze) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snooze_);
  }
  _impl_.snooze_ = snooze;
  if (snooze) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateSnoozeRequest.snooze)
}
inline ::google::monitoring::v3::Snooze* UpdateSnoozeRequest::release_snooze() {
  
  ::google::monitoring::v3::Snooze* temp = _impl_.snooze_;
  _impl_.snooze_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Snooze* UpdateSnoozeRequest::unsafe_arena_release_snooze() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateSnoozeRequest.snooze)
  
  ::google::monitoring::v3::Snooze* temp = _impl_.snooze_;
  _impl_.snooze_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Snooze* UpdateSnoozeRequest::_internal_mutable_snooze() {
  
  if (_impl_.snooze_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Snooze>(GetArenaForAllocation());
    _impl_.snooze_ = p;
  }
  return _impl_.snooze_;
}
inline ::google::monitoring::v3::Snooze* UpdateSnoozeRequest::mutable_snooze() {
  ::google::monitoring::v3::Snooze* _msg = _internal_mutable_snooze();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateSnoozeRequest.snooze)
  return _msg;
}
inline void UpdateSnoozeRequest::set_allocated_snooze(::google::monitoring::v3::Snooze* snooze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snooze_);
  }
  if (snooze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snooze));
    if (message_arena != submessage_arena) {
      snooze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snooze, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.snooze_ = snooze;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateSnoozeRequest.snooze)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnoozeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateSnoozeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnoozeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSnoozeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateSnoozeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSnoozeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateSnoozeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnoozeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnoozeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateSnoozeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnoozeRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSnoozeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateSnoozeRequest.update_mask)
  return _msg;
}
inline void UpdateSnoozeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateSnoozeRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto
