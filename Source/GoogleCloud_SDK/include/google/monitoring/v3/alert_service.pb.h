// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/alert_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/alert.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateAlertPolicyRequest;
class CreateAlertPolicyRequestDefaultTypeInternal;
extern CreateAlertPolicyRequestDefaultTypeInternal _CreateAlertPolicyRequest_default_instance_;
class DeleteAlertPolicyRequest;
class DeleteAlertPolicyRequestDefaultTypeInternal;
extern DeleteAlertPolicyRequestDefaultTypeInternal _DeleteAlertPolicyRequest_default_instance_;
class GetAlertPolicyRequest;
class GetAlertPolicyRequestDefaultTypeInternal;
extern GetAlertPolicyRequestDefaultTypeInternal _GetAlertPolicyRequest_default_instance_;
class ListAlertPoliciesRequest;
class ListAlertPoliciesRequestDefaultTypeInternal;
extern ListAlertPoliciesRequestDefaultTypeInternal _ListAlertPoliciesRequest_default_instance_;
class ListAlertPoliciesResponse;
class ListAlertPoliciesResponseDefaultTypeInternal;
extern ListAlertPoliciesResponseDefaultTypeInternal _ListAlertPoliciesResponse_default_instance_;
class UpdateAlertPolicyRequest;
class UpdateAlertPolicyRequestDefaultTypeInternal;
extern UpdateAlertPolicyRequestDefaultTypeInternal _UpdateAlertPolicyRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::GetAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::ListAlertPoliciesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListAlertPoliciesRequest>(Arena*);
template<> ::google::monitoring::v3::ListAlertPoliciesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListAlertPoliciesResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateAlertPolicyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class CreateAlertPolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateAlertPolicyRequest) */ {
 public:
  inline CreateAlertPolicyRequest() : CreateAlertPolicyRequest(nullptr) {}
  virtual ~CreateAlertPolicyRequest();

  CreateAlertPolicyRequest(const CreateAlertPolicyRequest& from);
  CreateAlertPolicyRequest(CreateAlertPolicyRequest&& from) noexcept
    : CreateAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline CreateAlertPolicyRequest& operator=(const CreateAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAlertPolicyRequest& operator=(CreateAlertPolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAlertPolicyRequest& default_instance();

  static inline const CreateAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAlertPolicyRequest*>(
               &_CreateAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAlertPolicyRequest& a, CreateAlertPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAlertPolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAlertPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<CreateAlertPolicyRequest>(nullptr);
  }

  CreateAlertPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAlertPolicyRequest& from);
  void MergeFrom(const CreateAlertPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAlertPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateAlertPolicyRequest";
  }
  protected:
  explicit CreateAlertPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAlertPolicyFieldNumber = 2,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.AlertPolicy alert_policy = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_alert_policy() const;
  private:
  bool _internal_has_alert_policy() const;
  public:
  void clear_alert_policy();
  const ::google::monitoring::v3::AlertPolicy& alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* release_alert_policy();
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policy();
  void set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy);
  private:
  const ::google::monitoring::v3::AlertPolicy& _internal_alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* _internal_mutable_alert_policy();
  public:
  void unsafe_arena_set_allocated_alert_policy(
      ::google::monitoring::v3::AlertPolicy* alert_policy);
  ::google::monitoring::v3::AlertPolicy* unsafe_arena_release_alert_policy();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateAlertPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::monitoring::v3::AlertPolicy* alert_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAlertPolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetAlertPolicyRequest) */ {
 public:
  inline GetAlertPolicyRequest() : GetAlertPolicyRequest(nullptr) {}
  virtual ~GetAlertPolicyRequest();

  GetAlertPolicyRequest(const GetAlertPolicyRequest& from);
  GetAlertPolicyRequest(GetAlertPolicyRequest&& from) noexcept
    : GetAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetAlertPolicyRequest& operator=(const GetAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAlertPolicyRequest& operator=(GetAlertPolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAlertPolicyRequest& default_instance();

  static inline const GetAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetAlertPolicyRequest*>(
               &_GetAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAlertPolicyRequest& a, GetAlertPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAlertPolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAlertPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<GetAlertPolicyRequest>(nullptr);
  }

  GetAlertPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAlertPolicyRequest& from);
  void MergeFrom(const GetAlertPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAlertPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetAlertPolicyRequest";
  }
  protected:
  explicit GetAlertPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetAlertPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAlertPoliciesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListAlertPoliciesRequest) */ {
 public:
  inline ListAlertPoliciesRequest() : ListAlertPoliciesRequest(nullptr) {}
  virtual ~ListAlertPoliciesRequest();

  ListAlertPoliciesRequest(const ListAlertPoliciesRequest& from);
  ListAlertPoliciesRequest(ListAlertPoliciesRequest&& from) noexcept
    : ListAlertPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline ListAlertPoliciesRequest& operator=(const ListAlertPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAlertPoliciesRequest& operator=(ListAlertPoliciesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAlertPoliciesRequest& default_instance();

  static inline const ListAlertPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAlertPoliciesRequest*>(
               &_ListAlertPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListAlertPoliciesRequest& a, ListAlertPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAlertPoliciesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAlertPoliciesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAlertPoliciesRequest* New() const final {
    return CreateMaybeMessage<ListAlertPoliciesRequest>(nullptr);
  }

  ListAlertPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAlertPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAlertPoliciesRequest& from);
  void MergeFrom(const ListAlertPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListAlertPoliciesRequest";
  }
  protected:
  explicit ListAlertPoliciesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 3,
    kNameFieldNumber = 4,
    kFilterFieldNumber = 5,
    kOrderByFieldNumber = 6,
    kPageSizeFieldNumber = 2,
  };
  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string filter = 5;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string order_by = 6;
  void clear_order_by();
  const std::string& order_by() const;
  void set_order_by(const std::string& value);
  void set_order_by(std::string&& value);
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  std::string* mutable_order_by();
  std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListAlertPoliciesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAlertPoliciesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListAlertPoliciesResponse) */ {
 public:
  inline ListAlertPoliciesResponse() : ListAlertPoliciesResponse(nullptr) {}
  virtual ~ListAlertPoliciesResponse();

  ListAlertPoliciesResponse(const ListAlertPoliciesResponse& from);
  ListAlertPoliciesResponse(ListAlertPoliciesResponse&& from) noexcept
    : ListAlertPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline ListAlertPoliciesResponse& operator=(const ListAlertPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAlertPoliciesResponse& operator=(ListAlertPoliciesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAlertPoliciesResponse& default_instance();

  static inline const ListAlertPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAlertPoliciesResponse*>(
               &_ListAlertPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListAlertPoliciesResponse& a, ListAlertPoliciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAlertPoliciesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAlertPoliciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAlertPoliciesResponse* New() const final {
    return CreateMaybeMessage<ListAlertPoliciesResponse>(nullptr);
  }

  ListAlertPoliciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAlertPoliciesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAlertPoliciesResponse& from);
  void MergeFrom(const ListAlertPoliciesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertPoliciesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListAlertPoliciesResponse";
  }
  protected:
  explicit ListAlertPoliciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertPoliciesFieldNumber = 3,
    kNextPageTokenFieldNumber = 2,
    kTotalSizeFieldNumber = 4,
  };
  // repeated .google.monitoring.v3.AlertPolicy alert_policies = 3;
  int alert_policies_size() const;
  private:
  int _internal_alert_policies_size() const;
  public:
  void clear_alert_policies();
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >*
      mutable_alert_policies();
  private:
  const ::google::monitoring::v3::AlertPolicy& _internal_alert_policies(int index) const;
  ::google::monitoring::v3::AlertPolicy* _internal_add_alert_policies();
  public:
  const ::google::monitoring::v3::AlertPolicy& alert_policies(int index) const;
  ::google::monitoring::v3::AlertPolicy* add_alert_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >&
      alert_policies() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // int32 total_size = 4;
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::int32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_size() const;
  void _internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListAlertPoliciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy > alert_policies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateAlertPolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateAlertPolicyRequest) */ {
 public:
  inline UpdateAlertPolicyRequest() : UpdateAlertPolicyRequest(nullptr) {}
  virtual ~UpdateAlertPolicyRequest();

  UpdateAlertPolicyRequest(const UpdateAlertPolicyRequest& from);
  UpdateAlertPolicyRequest(UpdateAlertPolicyRequest&& from) noexcept
    : UpdateAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAlertPolicyRequest& operator=(const UpdateAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAlertPolicyRequest& operator=(UpdateAlertPolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAlertPolicyRequest& default_instance();

  static inline const UpdateAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAlertPolicyRequest*>(
               &_UpdateAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateAlertPolicyRequest& a, UpdateAlertPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAlertPolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAlertPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<UpdateAlertPolicyRequest>(nullptr);
  }

  UpdateAlertPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAlertPolicyRequest& from);
  void MergeFrom(const UpdateAlertPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAlertPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateAlertPolicyRequest";
  }
  protected:
  explicit UpdateAlertPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateMaskFieldNumber = 2,
    kAlertPolicyFieldNumber = 3,
  };
  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.monitoring.v3.AlertPolicy alert_policy = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_alert_policy() const;
  private:
  bool _internal_has_alert_policy() const;
  public:
  void clear_alert_policy();
  const ::google::monitoring::v3::AlertPolicy& alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* release_alert_policy();
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policy();
  void set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy);
  private:
  const ::google::monitoring::v3::AlertPolicy& _internal_alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* _internal_mutable_alert_policy();
  public:
  void unsafe_arena_set_allocated_alert_policy(
      ::google::monitoring::v3::AlertPolicy* alert_policy);
  ::google::monitoring::v3::AlertPolicy* unsafe_arena_release_alert_policy();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateAlertPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  ::google::monitoring::v3::AlertPolicy* alert_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAlertPolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteAlertPolicyRequest) */ {
 public:
  inline DeleteAlertPolicyRequest() : DeleteAlertPolicyRequest(nullptr) {}
  virtual ~DeleteAlertPolicyRequest();

  DeleteAlertPolicyRequest(const DeleteAlertPolicyRequest& from);
  DeleteAlertPolicyRequest(DeleteAlertPolicyRequest&& from) noexcept
    : DeleteAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAlertPolicyRequest& operator=(const DeleteAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAlertPolicyRequest& operator=(DeleteAlertPolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAlertPolicyRequest& default_instance();

  static inline const DeleteAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAlertPolicyRequest*>(
               &_DeleteAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteAlertPolicyRequest& a, DeleteAlertPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAlertPolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAlertPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<DeleteAlertPolicyRequest>(nullptr);
  }

  DeleteAlertPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAlertPolicyRequest& from);
  void MergeFrom(const DeleteAlertPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAlertPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteAlertPolicyRequest";
  }
  protected:
  explicit DeleteAlertPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteAlertPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAlertPolicyRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateAlertPolicyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateAlertPolicyRequest.name)
  return _internal_name();
}
inline void CreateAlertPolicyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline std::string* CreateAlertPolicyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateAlertPolicyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateAlertPolicyRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateAlertPolicyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAlertPolicyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline void CreateAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline void CreateAlertPolicyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline std::string* CreateAlertPolicyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateAlertPolicyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAlertPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateAlertPolicyRequest.name)
}

// .google.monitoring.v3.AlertPolicy alert_policy = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateAlertPolicyRequest::_internal_has_alert_policy() const {
  return this != internal_default_instance() && alert_policy_ != nullptr;
}
inline bool CreateAlertPolicyRequest::has_alert_policy() const {
  return _internal_has_alert_policy();
}
inline const ::google::monitoring::v3::AlertPolicy& CreateAlertPolicyRequest::_internal_alert_policy() const {
  const ::google::monitoring::v3::AlertPolicy* p = alert_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy&>(
      ::google::monitoring::v3::_AlertPolicy_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy& CreateAlertPolicyRequest::alert_policy() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  return _internal_alert_policy();
}
inline void CreateAlertPolicyRequest::unsafe_arena_set_allocated_alert_policy(
    ::google::monitoring::v3::AlertPolicy* alert_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy_);
  }
  alert_policy_ = alert_policy;
  if (alert_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::release_alert_policy() {
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::unsafe_arena_release_alert_policy() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::_internal_mutable_alert_policy() {
  
  if (alert_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(GetArena());
    alert_policy_ = p;
  }
  return alert_policy_;
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::mutable_alert_policy() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  return _internal_mutable_alert_policy();
}
inline void CreateAlertPolicyRequest::set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy_);
  }
  if (alert_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy)->GetArena();
    if (message_arena != submessage_arena) {
      alert_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert_policy, submessage_arena);
    }
    
  } else {
    
  }
  alert_policy_ = alert_policy;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
}

// -------------------------------------------------------------------

// GetAlertPolicyRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetAlertPolicyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetAlertPolicyRequest.name)
  return _internal_name();
}
inline void GetAlertPolicyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline std::string* GetAlertPolicyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetAlertPolicyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetAlertPolicyRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAlertPolicyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetAlertPolicyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline void GetAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline void GetAlertPolicyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline std::string* GetAlertPolicyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetAlertPolicyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAlertPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetAlertPolicyRequest.name)
}

// -------------------------------------------------------------------

// ListAlertPoliciesRequest

// string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListAlertPoliciesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListAlertPoliciesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.name)
  return _internal_name();
}
inline void ListAlertPoliciesRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline std::string* ListAlertPoliciesRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListAlertPoliciesRequest::_internal_name() const {
  return name_.Get();
}
inline void ListAlertPoliciesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAlertPoliciesRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline void ListAlertPoliciesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline void ListAlertPoliciesRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline std::string* ListAlertPoliciesRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAlertPoliciesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAlertPoliciesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.name)
}

// string filter = 5;
inline void ListAlertPoliciesRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListAlertPoliciesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  return _internal_filter();
}
inline void ListAlertPoliciesRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline std::string* ListAlertPoliciesRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListAlertPoliciesRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListAlertPoliciesRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAlertPoliciesRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline void ListAlertPoliciesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline void ListAlertPoliciesRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline std::string* ListAlertPoliciesRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAlertPoliciesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAlertPoliciesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}

// string order_by = 6;
inline void ListAlertPoliciesRequest::clear_order_by() {
  order_by_.ClearToEmpty();
}
inline const std::string& ListAlertPoliciesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  return _internal_order_by();
}
inline void ListAlertPoliciesRequest::set_order_by(const std::string& value) {
  _internal_set_order_by(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline std::string* ListAlertPoliciesRequest::mutable_order_by() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  return _internal_mutable_order_by();
}
inline const std::string& ListAlertPoliciesRequest::_internal_order_by() const {
  return order_by_.Get();
}
inline void ListAlertPoliciesRequest::_internal_set_order_by(const std::string& value) {
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAlertPoliciesRequest::set_order_by(std::string&& value) {
  
  order_by_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline void ListAlertPoliciesRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline void ListAlertPoliciesRequest::set_order_by(const char* value,
    size_t size) {
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline std::string* ListAlertPoliciesRequest::_internal_mutable_order_by() {
  
  return order_by_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAlertPoliciesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  return order_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAlertPoliciesRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  order_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_by,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}

// int32 page_size = 2;
inline void ListAlertPoliciesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAlertPoliciesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAlertPoliciesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.page_size)
  return _internal_page_size();
}
inline void ListAlertPoliciesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListAlertPoliciesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.page_size)
}

// string page_token = 3;
inline void ListAlertPoliciesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListAlertPoliciesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  return _internal_page_token();
}
inline void ListAlertPoliciesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline std::string* ListAlertPoliciesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListAlertPoliciesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListAlertPoliciesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAlertPoliciesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline void ListAlertPoliciesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline void ListAlertPoliciesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline std::string* ListAlertPoliciesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAlertPoliciesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAlertPoliciesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}

// -------------------------------------------------------------------

// ListAlertPoliciesResponse

// repeated .google.monitoring.v3.AlertPolicy alert_policies = 3;
inline int ListAlertPoliciesResponse::_internal_alert_policies_size() const {
  return alert_policies_.size();
}
inline int ListAlertPoliciesResponse::alert_policies_size() const {
  return _internal_alert_policies_size();
}
inline ::google::monitoring::v3::AlertPolicy* ListAlertPoliciesResponse::mutable_alert_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >*
ListAlertPoliciesResponse::mutable_alert_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return &alert_policies_;
}
inline const ::google::monitoring::v3::AlertPolicy& ListAlertPoliciesResponse::_internal_alert_policies(int index) const {
  return alert_policies_.Get(index);
}
inline const ::google::monitoring::v3::AlertPolicy& ListAlertPoliciesResponse::alert_policies(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return _internal_alert_policies(index);
}
inline ::google::monitoring::v3::AlertPolicy* ListAlertPoliciesResponse::_internal_add_alert_policies() {
  return alert_policies_.Add();
}
inline ::google::monitoring::v3::AlertPolicy* ListAlertPoliciesResponse::add_alert_policies() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return _internal_add_alert_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >&
ListAlertPoliciesResponse::alert_policies() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_;
}

// string next_page_token = 2;
inline void ListAlertPoliciesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListAlertPoliciesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListAlertPoliciesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline std::string* ListAlertPoliciesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListAlertPoliciesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListAlertPoliciesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListAlertPoliciesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline void ListAlertPoliciesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline void ListAlertPoliciesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline std::string* ListAlertPoliciesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListAlertPoliciesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListAlertPoliciesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}

// int32 total_size = 4;
inline void ListAlertPoliciesResponse::clear_total_size() {
  total_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAlertPoliciesResponse::_internal_total_size() const {
  return total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAlertPoliciesResponse::total_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesResponse.total_size)
  return _internal_total_size();
}
inline void ListAlertPoliciesResponse::_internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_size_ = value;
}
inline void ListAlertPoliciesResponse::set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesResponse.total_size)
}

// -------------------------------------------------------------------

// UpdateAlertPolicyRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateAlertPolicyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateAlertPolicyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAlertPolicyRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAlertPolicyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAlertPolicyRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAlertPolicyRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAlertPolicyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAlertPolicyRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAlertPolicyRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateAlertPolicyRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
}

// .google.monitoring.v3.AlertPolicy alert_policy = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateAlertPolicyRequest::_internal_has_alert_policy() const {
  return this != internal_default_instance() && alert_policy_ != nullptr;
}
inline bool UpdateAlertPolicyRequest::has_alert_policy() const {
  return _internal_has_alert_policy();
}
inline const ::google::monitoring::v3::AlertPolicy& UpdateAlertPolicyRequest::_internal_alert_policy() const {
  const ::google::monitoring::v3::AlertPolicy* p = alert_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy&>(
      ::google::monitoring::v3::_AlertPolicy_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy& UpdateAlertPolicyRequest::alert_policy() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  return _internal_alert_policy();
}
inline void UpdateAlertPolicyRequest::unsafe_arena_set_allocated_alert_policy(
    ::google::monitoring::v3::AlertPolicy* alert_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy_);
  }
  alert_policy_ = alert_policy;
  if (alert_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::release_alert_policy() {
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::unsafe_arena_release_alert_policy() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::_internal_mutable_alert_policy() {
  
  if (alert_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(GetArena());
    alert_policy_ = p;
  }
  return alert_policy_;
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::mutable_alert_policy() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  return _internal_mutable_alert_policy();
}
inline void UpdateAlertPolicyRequest::set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy_);
  }
  if (alert_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_policy)->GetArena();
    if (message_arena != submessage_arena) {
      alert_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert_policy, submessage_arena);
    }
    
  } else {
    
  }
  alert_policy_ = alert_policy;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
}

// -------------------------------------------------------------------

// DeleteAlertPolicyRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteAlertPolicyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  return _internal_name();
}
inline void DeleteAlertPolicyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline std::string* DeleteAlertPolicyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteAlertPolicyRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteAlertPolicyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteAlertPolicyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline void DeleteAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline void DeleteAlertPolicyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline std::string* DeleteAlertPolicyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAlertPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
