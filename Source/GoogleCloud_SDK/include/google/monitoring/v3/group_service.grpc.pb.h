// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/group_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/group_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// The Group API lets you inspect and manage your
// [groups](#google.monitoring.v3.Group).
//
// A group is a named filter that is used to identify
// a collection of monitored resources. Groups are typically used to
// mirror the physical and/or logical topology of the environment.
// Because group membership is computed dynamically, monitored
// resources that are started in the future are automatically placed
// in matching groups. By using a group to name monitored resources in,
// for example, an alert policy, the target of that alert policy is
// updated automatically as monitored resources are added and removed
// from the infrastructure.
class GroupService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.GroupService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the existing groups.
    virtual ::grpc::Status ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::google::monitoring::v3::ListGroupsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>> AsyncListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>>(AsyncListGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>> PrepareAsyncListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>>(PrepareAsyncListGroupsRaw(context, request, cq));
    }
    // Gets a single group.
    virtual ::grpc::Status GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::google::monitoring::v3::Group* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> AsyncGetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(AsyncGetGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> PrepareAsyncGetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(PrepareAsyncGetGroupRaw(context, request, cq));
    }
    // Creates a new group.
    virtual ::grpc::Status CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::google::monitoring::v3::Group* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> AsyncCreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(AsyncCreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> PrepareAsyncCreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(PrepareAsyncCreateGroupRaw(context, request, cq));
    }
    // Updates an existing group.
    // You can change any group attributes except `name`.
    virtual ::grpc::Status UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::google::monitoring::v3::Group* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> AsyncUpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(AsyncUpdateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>> PrepareAsyncUpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>>(PrepareAsyncUpdateGroupRaw(context, request, cq));
    }
    // Deletes an existing group.
    virtual ::grpc::Status DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteGroupRaw(context, request, cq));
    }
    // Lists the monitored resources that are members of a group.
    virtual ::grpc::Status ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::google::monitoring::v3::ListGroupMembersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>> AsyncListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>>(AsyncListGroupMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>> PrepareAsyncListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>>(PrepareAsyncListGroupMembersRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists the existing groups.
      virtual void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a single group.
      virtual void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Creates a new group.
      virtual void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates an existing group.
      // You can change any group attributes except `name`.
      virtual void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes an existing group.
      virtual void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists the monitored resources that are members of a group.
      virtual void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>* AsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupsResponse>* PrepareAsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* AsyncGetGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* PrepareAsyncGetGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Group>* PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>* AsyncListGroupMembersRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListGroupMembersResponse>* PrepareAsyncListGroupMembersRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::google::monitoring::v3::ListGroupsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>> AsyncListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>>(AsyncListGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>> PrepareAsyncListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>>(PrepareAsyncListGroupsRaw(context, request, cq));
    }
    ::grpc::Status GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::google::monitoring::v3::Group* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> AsyncGetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(AsyncGetGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> PrepareAsyncGetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(PrepareAsyncGetGroupRaw(context, request, cq));
    }
    ::grpc::Status CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::google::monitoring::v3::Group* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> AsyncCreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(AsyncCreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> PrepareAsyncCreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(PrepareAsyncCreateGroupRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::google::monitoring::v3::Group* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> AsyncUpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(AsyncUpdateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>> PrepareAsyncUpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>>(PrepareAsyncUpdateGroupRaw(context, request, cq));
    }
    ::grpc::Status DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteGroupRaw(context, request, cq));
    }
    ::grpc::Status ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::google::monitoring::v3::ListGroupMembersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>> AsyncListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>>(AsyncListGroupMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>> PrepareAsyncListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>>(PrepareAsyncListGroupMembersRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListGroups(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteGroup(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListGroupMembers(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>* AsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupsResponse>* PrepareAsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* AsyncGetGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* PrepareAsyncGetGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Group>* PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>* AsyncListGroupMembersRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListGroupMembersResponse>* PrepareAsyncListGroupMembersRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListGroupMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_ListGroupMembers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the existing groups.
    virtual ::grpc::Status ListGroups(::grpc::ServerContext* context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response);
    // Gets a single group.
    virtual ::grpc::Status GetGroup(::grpc::ServerContext* context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response);
    // Creates a new group.
    virtual ::grpc::Status CreateGroup(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response);
    // Updates an existing group.
    // You can change any group attributes except `name`.
    virtual ::grpc::Status UpdateGroup(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response);
    // Deletes an existing group.
    virtual ::grpc::Status DeleteGroup(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response);
    // Lists the monitored resources that are members of a group.
    virtual ::grpc::Status ListGroupMembers(::grpc::ServerContext* context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListGroups() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGroups(::grpc::ServerContext* context, ::google::monitoring::v3::ListGroupsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListGroupsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGroup() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGroup(::grpc::ServerContext* context, ::google::monitoring::v3::GetGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Group>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGroup() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroup(::grpc::ServerContext* context, ::google::monitoring::v3::CreateGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Group>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroup() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroup(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Group>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteGroup() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGroup(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListGroupMembers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGroupMembers(::grpc::ServerContext* context, ::google::monitoring::v3::ListGroupMembersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListGroupMembersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListGroups<WithAsyncMethod_GetGroup<WithAsyncMethod_CreateGroup<WithAsyncMethod_UpdateGroup<WithAsyncMethod_DeleteGroup<WithAsyncMethod_ListGroupMembers<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListGroupsRequest, ::google::monitoring::v3::ListGroupsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::ListGroupsRequest* request, ::google::monitoring::v3::ListGroupsResponse* response) { return this->ListGroups(context, request, response); }));}
    void SetMessageAllocatorFor_ListGroups(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::ListGroupsRequest, ::google::monitoring::v3::ListGroupsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListGroupsRequest, ::google::monitoring::v3::ListGroupsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetGroupRequest, ::google::monitoring::v3::Group>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::GetGroupRequest* request, ::google::monitoring::v3::Group* response) { return this->GetGroup(context, request, response); }));}
    void SetMessageAllocatorFor_GetGroup(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::GetGroupRequest, ::google::monitoring::v3::Group>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetGroupRequest, ::google::monitoring::v3::Group>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateGroupRequest, ::google::monitoring::v3::Group>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::CreateGroupRequest* request, ::google::monitoring::v3::Group* response) { return this->CreateGroup(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGroup(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::CreateGroupRequest, ::google::monitoring::v3::Group>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateGroupRequest, ::google::monitoring::v3::Group>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateGroupRequest, ::google::monitoring::v3::Group>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::UpdateGroupRequest* request, ::google::monitoring::v3::Group* response) { return this->UpdateGroup(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroup(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::UpdateGroupRequest, ::google::monitoring::v3::Group>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateGroupRequest, ::google::monitoring::v3::Group>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteGroupRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::DeleteGroupRequest* request, ::google::protobuf::Empty* response) { return this->DeleteGroup(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteGroup(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::DeleteGroupRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteGroupRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListGroupMembers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListGroupMembersRequest, ::google::monitoring::v3::ListGroupMembersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::ListGroupMembersRequest* request, ::google::monitoring::v3::ListGroupMembersResponse* response) { return this->ListGroupMembers(context, request, response); }));}
    void SetMessageAllocatorFor_ListGroupMembers(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::ListGroupMembersRequest, ::google::monitoring::v3::ListGroupMembersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListGroupMembersRequest, ::google::monitoring::v3::ListGroupMembersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGroupMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGroupMembers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListGroups<ExperimentalWithCallbackMethod_GetGroup<ExperimentalWithCallbackMethod_CreateGroup<ExperimentalWithCallbackMethod_UpdateGroup<ExperimentalWithCallbackMethod_DeleteGroup<ExperimentalWithCallbackMethod_ListGroupMembers<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListGroups<ExperimentalWithCallbackMethod_GetGroup<ExperimentalWithCallbackMethod_CreateGroup<ExperimentalWithCallbackMethod_UpdateGroup<ExperimentalWithCallbackMethod_DeleteGroup<ExperimentalWithCallbackMethod_ListGroupMembers<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListGroups() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGroup() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGroup() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroup() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteGroup() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListGroupMembers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListGroups() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGroup() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGroup() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroup() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteGroup() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListGroupMembers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGroupMembers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListGroups(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListGroupMembers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListGroupMembers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListGroupMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListGroupMembers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListGroups() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListGroupsRequest, ::google::monitoring::v3::ListGroupsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListGroupsRequest, ::google::monitoring::v3::ListGroupsResponse>* streamer) {
                       return this->StreamedListGroups(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListGroups(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupsRequest* /*request*/, ::google::monitoring::v3::ListGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListGroupsRequest,::google::monitoring::v3::ListGroupsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGroup() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetGroupRequest, ::google::monitoring::v3::Group>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetGroupRequest, ::google::monitoring::v3::Group>* streamer) {
                       return this->StreamedGetGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetGroupRequest,::google::monitoring::v3::Group>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGroup() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateGroupRequest, ::google::monitoring::v3::Group>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateGroupRequest, ::google::monitoring::v3::Group>* streamer) {
                       return this->StreamedCreateGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateGroupRequest,::google::monitoring::v3::Group>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroup() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateGroupRequest, ::google::monitoring::v3::Group>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateGroupRequest, ::google::monitoring::v3::Group>* streamer) {
                       return this->StreamedUpdateGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateGroupRequest* /*request*/, ::google::monitoring::v3::Group* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateGroupRequest,::google::monitoring::v3::Group>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteGroup() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteGroupRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteGroupRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteGroup(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteGroupRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteGroupRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListGroupMembers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListGroupMembersRequest, ::google::monitoring::v3::ListGroupMembersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListGroupMembersRequest, ::google::monitoring::v3::ListGroupMembersResponse>* streamer) {
                       return this->StreamedListGroupMembers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListGroupMembers(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListGroupMembersRequest* /*request*/, ::google::monitoring::v3::ListGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListGroupMembers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListGroupMembersRequest,::google::monitoring::v3::ListGroupMembersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListGroups<WithStreamedUnaryMethod_GetGroup<WithStreamedUnaryMethod_CreateGroup<WithStreamedUnaryMethod_UpdateGroup<WithStreamedUnaryMethod_DeleteGroup<WithStreamedUnaryMethod_ListGroupMembers<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListGroups<WithStreamedUnaryMethod_GetGroup<WithStreamedUnaryMethod_CreateGroup<WithStreamedUnaryMethod_UpdateGroup<WithStreamedUnaryMethod_DeleteGroup<WithStreamedUnaryMethod_ListGroupMembers<Service > > > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto__INCLUDED
