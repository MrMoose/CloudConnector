// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/service_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/service.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateServiceLevelObjectiveRequest;
struct CreateServiceLevelObjectiveRequestDefaultTypeInternal;
extern CreateServiceLevelObjectiveRequestDefaultTypeInternal _CreateServiceLevelObjectiveRequest_default_instance_;
class CreateServiceRequest;
struct CreateServiceRequestDefaultTypeInternal;
extern CreateServiceRequestDefaultTypeInternal _CreateServiceRequest_default_instance_;
class DeleteServiceLevelObjectiveRequest;
struct DeleteServiceLevelObjectiveRequestDefaultTypeInternal;
extern DeleteServiceLevelObjectiveRequestDefaultTypeInternal _DeleteServiceLevelObjectiveRequest_default_instance_;
class DeleteServiceRequest;
struct DeleteServiceRequestDefaultTypeInternal;
extern DeleteServiceRequestDefaultTypeInternal _DeleteServiceRequest_default_instance_;
class GetServiceLevelObjectiveRequest;
struct GetServiceLevelObjectiveRequestDefaultTypeInternal;
extern GetServiceLevelObjectiveRequestDefaultTypeInternal _GetServiceLevelObjectiveRequest_default_instance_;
class GetServiceRequest;
struct GetServiceRequestDefaultTypeInternal;
extern GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
class ListServiceLevelObjectivesRequest;
struct ListServiceLevelObjectivesRequestDefaultTypeInternal;
extern ListServiceLevelObjectivesRequestDefaultTypeInternal _ListServiceLevelObjectivesRequest_default_instance_;
class ListServiceLevelObjectivesResponse;
struct ListServiceLevelObjectivesResponseDefaultTypeInternal;
extern ListServiceLevelObjectivesResponseDefaultTypeInternal _ListServiceLevelObjectivesResponse_default_instance_;
class ListServicesRequest;
struct ListServicesRequestDefaultTypeInternal;
extern ListServicesRequestDefaultTypeInternal _ListServicesRequest_default_instance_;
class ListServicesResponse;
struct ListServicesResponseDefaultTypeInternal;
extern ListServicesResponseDefaultTypeInternal _ListServicesResponse_default_instance_;
class UpdateServiceLevelObjectiveRequest;
struct UpdateServiceLevelObjectiveRequestDefaultTypeInternal;
extern UpdateServiceLevelObjectiveRequestDefaultTypeInternal _UpdateServiceLevelObjectiveRequest_default_instance_;
class UpdateServiceRequest;
struct UpdateServiceRequestDefaultTypeInternal;
extern UpdateServiceRequestDefaultTypeInternal _UpdateServiceRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateServiceLevelObjectiveRequest>(Arena*);
template<> ::google::monitoring::v3::CreateServiceRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateServiceRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteServiceLevelObjectiveRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteServiceRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteServiceRequest>(Arena*);
template<> ::google::monitoring::v3::GetServiceLevelObjectiveRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetServiceLevelObjectiveRequest>(Arena*);
template<> ::google::monitoring::v3::GetServiceRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetServiceRequest>(Arena*);
template<> ::google::monitoring::v3::ListServiceLevelObjectivesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListServiceLevelObjectivesRequest>(Arena*);
template<> ::google::monitoring::v3::ListServiceLevelObjectivesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListServiceLevelObjectivesResponse>(Arena*);
template<> ::google::monitoring::v3::ListServicesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListServicesRequest>(Arena*);
template<> ::google::monitoring::v3::ListServicesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListServicesResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateServiceLevelObjectiveRequest>(Arena*);
template<> ::google::monitoring::v3::UpdateServiceRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateServiceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class CreateServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateServiceRequest) */ {
 public:
  inline CreateServiceRequest() : CreateServiceRequest(nullptr) {}
  ~CreateServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateServiceRequest(const CreateServiceRequest& from);
  CreateServiceRequest(CreateServiceRequest&& from) noexcept
    : CreateServiceRequest() {
    *this = ::std::move(from);
  }

  inline CreateServiceRequest& operator=(const CreateServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServiceRequest& operator=(CreateServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateServiceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServiceRequest*>(
               &_CreateServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateServiceRequest& a, CreateServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateServiceRequest& from) {
    CreateServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateServiceRequest";
  }
  protected:
  explicit CreateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kServiceIdFieldNumber = 3,
    kServiceFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string service_id = 3;
  void clear_service_id();
  const std::string& service_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_id();
  PROTOBUF_NODISCARD std::string* release_service_id();
  void set_allocated_service_id(std::string* service_id);
  private:
  const std::string& _internal_service_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id(const std::string& value);
  std::string* _internal_mutable_service_id();
  public:

  // .google.monitoring.v3.Service service = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::google::monitoring::v3::Service& service() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Service* release_service();
  ::google::monitoring::v3::Service* mutable_service();
  void set_allocated_service(::google::monitoring::v3::Service* service);
  private:
  const ::google::monitoring::v3::Service& _internal_service() const;
  ::google::monitoring::v3::Service* _internal_mutable_service();
  public:
  void unsafe_arena_set_allocated_service(
      ::google::monitoring::v3::Service* service);
  ::google::monitoring::v3::Service* unsafe_arena_release_service();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_;
    ::google::monitoring::v3::Service* service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetServiceRequest) */ {
 public:
  inline GetServiceRequest() : GetServiceRequest(nullptr) {}
  ~GetServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceRequest(const GetServiceRequest& from);
  GetServiceRequest(GetServiceRequest&& from) noexcept
    : GetServiceRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceRequest& operator=(const GetServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceRequest& operator=(GetServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceRequest*>(
               &_GetServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetServiceRequest& a, GetServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceRequest& from) {
    GetServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetServiceRequest";
  }
  protected:
  explicit GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListServicesRequest) */ {
 public:
  inline ListServicesRequest() : ListServicesRequest(nullptr) {}
  ~ListServicesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListServicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServicesRequest(const ListServicesRequest& from);
  ListServicesRequest(ListServicesRequest&& from) noexcept
    : ListServicesRequest() {
    *this = ::std::move(from);
  }

  inline ListServicesRequest& operator=(const ListServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServicesRequest& operator=(ListServicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListServicesRequest*>(
               &_ListServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListServicesRequest& a, ListServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServicesRequest& from) {
    ListServicesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListServicesRequest";
  }
  protected:
  explicit ListServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListServicesResponse) */ {
 public:
  inline ListServicesResponse() : ListServicesResponse(nullptr) {}
  ~ListServicesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListServicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServicesResponse(const ListServicesResponse& from);
  ListServicesResponse(ListServicesResponse&& from) noexcept
    : ListServicesResponse() {
    *this = ::std::move(from);
  }

  inline ListServicesResponse& operator=(const ListServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServicesResponse& operator=(ListServicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListServicesResponse*>(
               &_ListServicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListServicesResponse& a, ListServicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServicesResponse& from) {
    ListServicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListServicesResponse";
  }
  protected:
  explicit ListServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.Service services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::google::monitoring::v3::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Service >*
      mutable_services();
  private:
  const ::google::monitoring::v3::Service& _internal_services(int index) const;
  ::google::monitoring::v3::Service* _internal_add_services();
  public:
  const ::google::monitoring::v3::Service& services(int index) const;
  ::google::monitoring::v3::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Service >&
      services() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListServicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Service > services_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateServiceRequest) */ {
 public:
  inline UpdateServiceRequest() : UpdateServiceRequest(nullptr) {}
  ~UpdateServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateServiceRequest(const UpdateServiceRequest& from);
  UpdateServiceRequest(UpdateServiceRequest&& from) noexcept
    : UpdateServiceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServiceRequest& operator=(const UpdateServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServiceRequest& operator=(UpdateServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateServiceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServiceRequest*>(
               &_UpdateServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateServiceRequest& a, UpdateServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateServiceRequest& from) {
    UpdateServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateServiceRequest";
  }
  protected:
  explicit UpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.monitoring.v3.Service service = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::google::monitoring::v3::Service& service() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Service* release_service();
  ::google::monitoring::v3::Service* mutable_service();
  void set_allocated_service(::google::monitoring::v3::Service* service);
  private:
  const ::google::monitoring::v3::Service& _internal_service() const;
  ::google::monitoring::v3::Service* _internal_mutable_service();
  public:
  void unsafe_arena_set_allocated_service(
      ::google::monitoring::v3::Service* service);
  ::google::monitoring::v3::Service* unsafe_arena_release_service();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::Service* service_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteServiceRequest) */ {
 public:
  inline DeleteServiceRequest() : DeleteServiceRequest(nullptr) {}
  ~DeleteServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteServiceRequest(const DeleteServiceRequest& from);
  DeleteServiceRequest(DeleteServiceRequest&& from) noexcept
    : DeleteServiceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServiceRequest& operator=(const DeleteServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServiceRequest& operator=(DeleteServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteServiceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServiceRequest*>(
               &_DeleteServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteServiceRequest& a, DeleteServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteServiceRequest& from) {
    DeleteServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteServiceRequest";
  }
  protected:
  explicit DeleteServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateServiceLevelObjectiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateServiceLevelObjectiveRequest) */ {
 public:
  inline CreateServiceLevelObjectiveRequest() : CreateServiceLevelObjectiveRequest(nullptr) {}
  ~CreateServiceLevelObjectiveRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateServiceLevelObjectiveRequest(const CreateServiceLevelObjectiveRequest& from);
  CreateServiceLevelObjectiveRequest(CreateServiceLevelObjectiveRequest&& from) noexcept
    : CreateServiceLevelObjectiveRequest() {
    *this = ::std::move(from);
  }

  inline CreateServiceLevelObjectiveRequest& operator=(const CreateServiceLevelObjectiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServiceLevelObjectiveRequest& operator=(CreateServiceLevelObjectiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateServiceLevelObjectiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateServiceLevelObjectiveRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServiceLevelObjectiveRequest*>(
               &_CreateServiceLevelObjectiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateServiceLevelObjectiveRequest& a, CreateServiceLevelObjectiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServiceLevelObjectiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateServiceLevelObjectiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateServiceLevelObjectiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateServiceLevelObjectiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateServiceLevelObjectiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateServiceLevelObjectiveRequest& from) {
    CreateServiceLevelObjectiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServiceLevelObjectiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateServiceLevelObjectiveRequest";
  }
  protected:
  explicit CreateServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kServiceLevelObjectiveIdFieldNumber = 3,
    kServiceLevelObjectiveFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string service_level_objective_id = 3;
  void clear_service_level_objective_id();
  const std::string& service_level_objective_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_level_objective_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_level_objective_id();
  PROTOBUF_NODISCARD std::string* release_service_level_objective_id();
  void set_allocated_service_level_objective_id(std::string* service_level_objective_id);
  private:
  const std::string& _internal_service_level_objective_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_level_objective_id(const std::string& value);
  std::string* _internal_mutable_service_level_objective_id();
  public:

  // .google.monitoring.v3.ServiceLevelObjective service_level_objective = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_service_level_objective() const;
  private:
  bool _internal_has_service_level_objective() const;
  public:
  void clear_service_level_objective();
  const ::google::monitoring::v3::ServiceLevelObjective& service_level_objective() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::ServiceLevelObjective* release_service_level_objective();
  ::google::monitoring::v3::ServiceLevelObjective* mutable_service_level_objective();
  void set_allocated_service_level_objective(::google::monitoring::v3::ServiceLevelObjective* service_level_objective);
  private:
  const ::google::monitoring::v3::ServiceLevelObjective& _internal_service_level_objective() const;
  ::google::monitoring::v3::ServiceLevelObjective* _internal_mutable_service_level_objective();
  public:
  void unsafe_arena_set_allocated_service_level_objective(
      ::google::monitoring::v3::ServiceLevelObjective* service_level_objective);
  ::google::monitoring::v3::ServiceLevelObjective* unsafe_arena_release_service_level_objective();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateServiceLevelObjectiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_level_objective_id_;
    ::google::monitoring::v3::ServiceLevelObjective* service_level_objective_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServiceLevelObjectiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetServiceLevelObjectiveRequest) */ {
 public:
  inline GetServiceLevelObjectiveRequest() : GetServiceLevelObjectiveRequest(nullptr) {}
  ~GetServiceLevelObjectiveRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceLevelObjectiveRequest(const GetServiceLevelObjectiveRequest& from);
  GetServiceLevelObjectiveRequest(GetServiceLevelObjectiveRequest&& from) noexcept
    : GetServiceLevelObjectiveRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceLevelObjectiveRequest& operator=(const GetServiceLevelObjectiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceLevelObjectiveRequest& operator=(GetServiceLevelObjectiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceLevelObjectiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceLevelObjectiveRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceLevelObjectiveRequest*>(
               &_GetServiceLevelObjectiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServiceLevelObjectiveRequest& a, GetServiceLevelObjectiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceLevelObjectiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceLevelObjectiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceLevelObjectiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceLevelObjectiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceLevelObjectiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceLevelObjectiveRequest& from) {
    GetServiceLevelObjectiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceLevelObjectiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetServiceLevelObjectiveRequest";
  }
  protected:
  explicit GetServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.ServiceLevelObjective.View view = 2;
  void clear_view();
  ::google::monitoring::v3::ServiceLevelObjective_View view() const;
  void set_view(::google::monitoring::v3::ServiceLevelObjective_View value);
  private:
  ::google::monitoring::v3::ServiceLevelObjective_View _internal_view() const;
  void _internal_set_view(::google::monitoring::v3::ServiceLevelObjective_View value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetServiceLevelObjectiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServiceLevelObjectivesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListServiceLevelObjectivesRequest) */ {
 public:
  inline ListServiceLevelObjectivesRequest() : ListServiceLevelObjectivesRequest(nullptr) {}
  ~ListServiceLevelObjectivesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListServiceLevelObjectivesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServiceLevelObjectivesRequest(const ListServiceLevelObjectivesRequest& from);
  ListServiceLevelObjectivesRequest(ListServiceLevelObjectivesRequest&& from) noexcept
    : ListServiceLevelObjectivesRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceLevelObjectivesRequest& operator=(const ListServiceLevelObjectivesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceLevelObjectivesRequest& operator=(ListServiceLevelObjectivesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServiceLevelObjectivesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServiceLevelObjectivesRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceLevelObjectivesRequest*>(
               &_ListServiceLevelObjectivesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListServiceLevelObjectivesRequest& a, ListServiceLevelObjectivesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceLevelObjectivesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceLevelObjectivesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServiceLevelObjectivesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServiceLevelObjectivesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServiceLevelObjectivesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServiceLevelObjectivesRequest& from) {
    ListServiceLevelObjectivesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceLevelObjectivesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListServiceLevelObjectivesRequest";
  }
  protected:
  explicit ListServiceLevelObjectivesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
    kViewFieldNumber = 5,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // .google.monitoring.v3.ServiceLevelObjective.View view = 5;
  void clear_view();
  ::google::monitoring::v3::ServiceLevelObjective_View view() const;
  void set_view(::google::monitoring::v3::ServiceLevelObjective_View value);
  private:
  ::google::monitoring::v3::ServiceLevelObjective_View _internal_view() const;
  void _internal_set_view(::google::monitoring::v3::ServiceLevelObjective_View value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListServiceLevelObjectivesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServiceLevelObjectivesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListServiceLevelObjectivesResponse) */ {
 public:
  inline ListServiceLevelObjectivesResponse() : ListServiceLevelObjectivesResponse(nullptr) {}
  ~ListServiceLevelObjectivesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListServiceLevelObjectivesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServiceLevelObjectivesResponse(const ListServiceLevelObjectivesResponse& from);
  ListServiceLevelObjectivesResponse(ListServiceLevelObjectivesResponse&& from) noexcept
    : ListServiceLevelObjectivesResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceLevelObjectivesResponse& operator=(const ListServiceLevelObjectivesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceLevelObjectivesResponse& operator=(ListServiceLevelObjectivesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServiceLevelObjectivesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServiceLevelObjectivesResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceLevelObjectivesResponse*>(
               &_ListServiceLevelObjectivesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListServiceLevelObjectivesResponse& a, ListServiceLevelObjectivesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceLevelObjectivesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceLevelObjectivesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServiceLevelObjectivesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServiceLevelObjectivesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServiceLevelObjectivesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServiceLevelObjectivesResponse& from) {
    ListServiceLevelObjectivesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceLevelObjectivesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListServiceLevelObjectivesResponse";
  }
  protected:
  explicit ListServiceLevelObjectivesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceLevelObjectivesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.ServiceLevelObjective service_level_objectives = 1;
  int service_level_objectives_size() const;
  private:
  int _internal_service_level_objectives_size() const;
  public:
  void clear_service_level_objectives();
  ::google::monitoring::v3::ServiceLevelObjective* mutable_service_level_objectives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::ServiceLevelObjective >*
      mutable_service_level_objectives();
  private:
  const ::google::monitoring::v3::ServiceLevelObjective& _internal_service_level_objectives(int index) const;
  ::google::monitoring::v3::ServiceLevelObjective* _internal_add_service_level_objectives();
  public:
  const ::google::monitoring::v3::ServiceLevelObjective& service_level_objectives(int index) const;
  ::google::monitoring::v3::ServiceLevelObjective* add_service_level_objectives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::ServiceLevelObjective >&
      service_level_objectives() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListServiceLevelObjectivesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::ServiceLevelObjective > service_level_objectives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateServiceLevelObjectiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateServiceLevelObjectiveRequest) */ {
 public:
  inline UpdateServiceLevelObjectiveRequest() : UpdateServiceLevelObjectiveRequest(nullptr) {}
  ~UpdateServiceLevelObjectiveRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateServiceLevelObjectiveRequest(const UpdateServiceLevelObjectiveRequest& from);
  UpdateServiceLevelObjectiveRequest(UpdateServiceLevelObjectiveRequest&& from) noexcept
    : UpdateServiceLevelObjectiveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServiceLevelObjectiveRequest& operator=(const UpdateServiceLevelObjectiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServiceLevelObjectiveRequest& operator=(UpdateServiceLevelObjectiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateServiceLevelObjectiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateServiceLevelObjectiveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServiceLevelObjectiveRequest*>(
               &_UpdateServiceLevelObjectiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateServiceLevelObjectiveRequest& a, UpdateServiceLevelObjectiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServiceLevelObjectiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServiceLevelObjectiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateServiceLevelObjectiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateServiceLevelObjectiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateServiceLevelObjectiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateServiceLevelObjectiveRequest& from) {
    UpdateServiceLevelObjectiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServiceLevelObjectiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateServiceLevelObjectiveRequest";
  }
  protected:
  explicit UpdateServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceLevelObjectiveFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.monitoring.v3.ServiceLevelObjective service_level_objective = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_service_level_objective() const;
  private:
  bool _internal_has_service_level_objective() const;
  public:
  void clear_service_level_objective();
  const ::google::monitoring::v3::ServiceLevelObjective& service_level_objective() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::ServiceLevelObjective* release_service_level_objective();
  ::google::monitoring::v3::ServiceLevelObjective* mutable_service_level_objective();
  void set_allocated_service_level_objective(::google::monitoring::v3::ServiceLevelObjective* service_level_objective);
  private:
  const ::google::monitoring::v3::ServiceLevelObjective& _internal_service_level_objective() const;
  ::google::monitoring::v3::ServiceLevelObjective* _internal_mutable_service_level_objective();
  public:
  void unsafe_arena_set_allocated_service_level_objective(
      ::google::monitoring::v3::ServiceLevelObjective* service_level_objective);
  ::google::monitoring::v3::ServiceLevelObjective* unsafe_arena_release_service_level_objective();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateServiceLevelObjectiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::ServiceLevelObjective* service_level_objective_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteServiceLevelObjectiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteServiceLevelObjectiveRequest) */ {
 public:
  inline DeleteServiceLevelObjectiveRequest() : DeleteServiceLevelObjectiveRequest(nullptr) {}
  ~DeleteServiceLevelObjectiveRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteServiceLevelObjectiveRequest(const DeleteServiceLevelObjectiveRequest& from);
  DeleteServiceLevelObjectiveRequest(DeleteServiceLevelObjectiveRequest&& from) noexcept
    : DeleteServiceLevelObjectiveRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServiceLevelObjectiveRequest& operator=(const DeleteServiceLevelObjectiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServiceLevelObjectiveRequest& operator=(DeleteServiceLevelObjectiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteServiceLevelObjectiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteServiceLevelObjectiveRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServiceLevelObjectiveRequest*>(
               &_DeleteServiceLevelObjectiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteServiceLevelObjectiveRequest& a, DeleteServiceLevelObjectiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServiceLevelObjectiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServiceLevelObjectiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteServiceLevelObjectiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteServiceLevelObjectiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteServiceLevelObjectiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteServiceLevelObjectiveRequest& from) {
    DeleteServiceLevelObjectiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServiceLevelObjectiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteServiceLevelObjectiveRequest";
  }
  protected:
  explicit DeleteServiceLevelObjectiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteServiceLevelObjectiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateServiceRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateServiceRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateServiceRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateServiceRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateServiceRequest.parent)
}
inline std::string* CreateServiceRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceRequest.parent)
  return _s;
}
inline const std::string& CreateServiceRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateServiceRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateServiceRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateServiceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateServiceRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceRequest.parent)
}

// string service_id = 3;
inline void CreateServiceRequest::clear_service_id() {
  _impl_.service_id_.ClearToEmpty();
}
inline const std::string& CreateServiceRequest::service_id() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceRequest.service_id)
  return _internal_service_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateServiceRequest::set_service_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateServiceRequest.service_id)
}
inline std::string* CreateServiceRequest::mutable_service_id() {
  std::string* _s = _internal_mutable_service_id();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceRequest.service_id)
  return _s;
}
inline const std::string& CreateServiceRequest::_internal_service_id() const {
  return _impl_.service_id_.Get();
}
inline void CreateServiceRequest::_internal_set_service_id(const std::string& value) {
  
  _impl_.service_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateServiceRequest::_internal_mutable_service_id() {
  
  return _impl_.service_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateServiceRequest::release_service_id() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceRequest.service_id)
  return _impl_.service_id_.Release();
}
inline void CreateServiceRequest::set_allocated_service_id(std::string* service_id) {
  if (service_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_id_.SetAllocated(service_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_id_.IsDefault()) {
    _impl_.service_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceRequest.service_id)
}

// .google.monitoring.v3.Service service = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateServiceRequest::_internal_has_service() const {
  return this != internal_default_instance() && _impl_.service_ != nullptr;
}
inline bool CreateServiceRequest::has_service() const {
  return _internal_has_service();
}
inline const ::google::monitoring::v3::Service& CreateServiceRequest::_internal_service() const {
  const ::google::monitoring::v3::Service* p = _impl_.service_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Service&>(
      ::google::monitoring::v3::_Service_default_instance_);
}
inline const ::google::monitoring::v3::Service& CreateServiceRequest::service() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceRequest.service)
  return _internal_service();
}
inline void CreateServiceRequest::unsafe_arena_set_allocated_service(
    ::google::monitoring::v3::Service* service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_);
  }
  _impl_.service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateServiceRequest.service)
}
inline ::google::monitoring::v3::Service* CreateServiceRequest::release_service() {
  
  ::google::monitoring::v3::Service* temp = _impl_.service_;
  _impl_.service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Service* CreateServiceRequest::unsafe_arena_release_service() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceRequest.service)
  
  ::google::monitoring::v3::Service* temp = _impl_.service_;
  _impl_.service_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Service* CreateServiceRequest::_internal_mutable_service() {
  
  if (_impl_.service_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Service>(GetArenaForAllocation());
    _impl_.service_ = p;
  }
  return _impl_.service_;
}
inline ::google::monitoring::v3::Service* CreateServiceRequest::mutable_service() {
  ::google::monitoring::v3::Service* _msg = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceRequest.service)
  return _msg;
}
inline void CreateServiceRequest::set_allocated_service(::google::monitoring::v3::Service* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service));
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_ = service;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceRequest.service)
}

// -------------------------------------------------------------------

// GetServiceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetServiceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetServiceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetServiceRequest.name)
}
inline std::string* GetServiceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetServiceRequest.name)
  return _s;
}
inline const std::string& GetServiceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetServiceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetServiceRequest.name)
  return _impl_.name_.Release();
}
inline void GetServiceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetServiceRequest.name)
}

// -------------------------------------------------------------------

// ListServicesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListServicesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServicesRequest.parent)
}
inline std::string* ListServicesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServicesRequest.parent)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListServicesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServicesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListServicesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServicesRequest.parent)
}

// string filter = 2;
inline void ListServicesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServicesRequest.filter)
}
inline std::string* ListServicesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServicesRequest.filter)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListServicesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServicesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListServicesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServicesRequest.filter)
}

// int32 page_size = 3;
inline void ListServicesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListServicesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListServicesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesRequest.page_size)
  return _internal_page_size();
}
inline void ListServicesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListServicesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServicesRequest.page_size)
}

// string page_token = 4;
inline void ListServicesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServicesRequest.page_token)
}
inline std::string* ListServicesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServicesRequest.page_token)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListServicesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServicesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListServicesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServicesRequest.page_token)
}

// -------------------------------------------------------------------

// ListServicesResponse

// repeated .google.monitoring.v3.Service services = 1;
inline int ListServicesResponse::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int ListServicesResponse::services_size() const {
  return _internal_services_size();
}
inline ::google::monitoring::v3::Service* ListServicesResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServicesResponse.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Service >*
ListServicesResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListServicesResponse.services)
  return &_impl_.services_;
}
inline const ::google::monitoring::v3::Service& ListServicesResponse::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::google::monitoring::v3::Service& ListServicesResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesResponse.services)
  return _internal_services(index);
}
inline ::google::monitoring::v3::Service* ListServicesResponse::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::google::monitoring::v3::Service* ListServicesResponse::add_services() {
  ::google::monitoring::v3::Service* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListServicesResponse.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Service >&
ListServicesResponse::services() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListServicesResponse.services)
  return _impl_.services_;
}

// string next_page_token = 2;
inline void ListServicesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListServicesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServicesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServicesResponse.next_page_token)
}
inline std::string* ListServicesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServicesResponse.next_page_token)
  return _s;
}
inline const std::string& ListServicesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListServicesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServicesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListServicesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServicesResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateServiceRequest

// .google.monitoring.v3.Service service = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateServiceRequest::_internal_has_service() const {
  return this != internal_default_instance() && _impl_.service_ != nullptr;
}
inline bool UpdateServiceRequest::has_service() const {
  return _internal_has_service();
}
inline const ::google::monitoring::v3::Service& UpdateServiceRequest::_internal_service() const {
  const ::google::monitoring::v3::Service* p = _impl_.service_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Service&>(
      ::google::monitoring::v3::_Service_default_instance_);
}
inline const ::google::monitoring::v3::Service& UpdateServiceRequest::service() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateServiceRequest.service)
  return _internal_service();
}
inline void UpdateServiceRequest::unsafe_arena_set_allocated_service(
    ::google::monitoring::v3::Service* service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_);
  }
  _impl_.service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateServiceRequest.service)
}
inline ::google::monitoring::v3::Service* UpdateServiceRequest::release_service() {
  
  ::google::monitoring::v3::Service* temp = _impl_.service_;
  _impl_.service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Service* UpdateServiceRequest::unsafe_arena_release_service() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateServiceRequest.service)
  
  ::google::monitoring::v3::Service* temp = _impl_.service_;
  _impl_.service_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Service* UpdateServiceRequest::_internal_mutable_service() {
  
  if (_impl_.service_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Service>(GetArenaForAllocation());
    _impl_.service_ = p;
  }
  return _impl_.service_;
}
inline ::google::monitoring::v3::Service* UpdateServiceRequest::mutable_service() {
  ::google::monitoring::v3::Service* _msg = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateServiceRequest.service)
  return _msg;
}
inline void UpdateServiceRequest::set_allocated_service(::google::monitoring::v3::Service* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service));
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_ = service;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateServiceRequest.service)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateServiceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateServiceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateServiceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateServiceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateServiceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateServiceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateServiceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateServiceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateServiceRequest.update_mask)
  return _msg;
}
inline void UpdateServiceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateServiceRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteServiceRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteServiceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteServiceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteServiceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteServiceRequest.name)
}
inline std::string* DeleteServiceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteServiceRequest.name)
  return _s;
}
inline const std::string& DeleteServiceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteServiceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteServiceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteServiceRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteServiceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteServiceRequest.name)
}

// -------------------------------------------------------------------

// CreateServiceLevelObjectiveRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateServiceLevelObjectiveRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateServiceLevelObjectiveRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceLevelObjectiveRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateServiceLevelObjectiveRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateServiceLevelObjectiveRequest.parent)
}
inline std::string* CreateServiceLevelObjectiveRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceLevelObjectiveRequest.parent)
  return _s;
}
inline const std::string& CreateServiceLevelObjectiveRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateServiceLevelObjectiveRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateServiceLevelObjectiveRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateServiceLevelObjectiveRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceLevelObjectiveRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateServiceLevelObjectiveRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceLevelObjectiveRequest.parent)
}

// string service_level_objective_id = 3;
inline void CreateServiceLevelObjectiveRequest::clear_service_level_objective_id() {
  _impl_.service_level_objective_id_.ClearToEmpty();
}
inline const std::string& CreateServiceLevelObjectiveRequest::service_level_objective_id() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective_id)
  return _internal_service_level_objective_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateServiceLevelObjectiveRequest::set_service_level_objective_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_level_objective_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective_id)
}
inline std::string* CreateServiceLevelObjectiveRequest::mutable_service_level_objective_id() {
  std::string* _s = _internal_mutable_service_level_objective_id();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective_id)
  return _s;
}
inline const std::string& CreateServiceLevelObjectiveRequest::_internal_service_level_objective_id() const {
  return _impl_.service_level_objective_id_.Get();
}
inline void CreateServiceLevelObjectiveRequest::_internal_set_service_level_objective_id(const std::string& value) {
  
  _impl_.service_level_objective_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateServiceLevelObjectiveRequest::_internal_mutable_service_level_objective_id() {
  
  return _impl_.service_level_objective_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateServiceLevelObjectiveRequest::release_service_level_objective_id() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective_id)
  return _impl_.service_level_objective_id_.Release();
}
inline void CreateServiceLevelObjectiveRequest::set_allocated_service_level_objective_id(std::string* service_level_objective_id) {
  if (service_level_objective_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_level_objective_id_.SetAllocated(service_level_objective_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_level_objective_id_.IsDefault()) {
    _impl_.service_level_objective_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective_id)
}

// .google.monitoring.v3.ServiceLevelObjective service_level_objective = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateServiceLevelObjectiveRequest::_internal_has_service_level_objective() const {
  return this != internal_default_instance() && _impl_.service_level_objective_ != nullptr;
}
inline bool CreateServiceLevelObjectiveRequest::has_service_level_objective() const {
  return _internal_has_service_level_objective();
}
inline const ::google::monitoring::v3::ServiceLevelObjective& CreateServiceLevelObjectiveRequest::_internal_service_level_objective() const {
  const ::google::monitoring::v3::ServiceLevelObjective* p = _impl_.service_level_objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::ServiceLevelObjective&>(
      ::google::monitoring::v3::_ServiceLevelObjective_default_instance_);
}
inline const ::google::monitoring::v3::ServiceLevelObjective& CreateServiceLevelObjectiveRequest::service_level_objective() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective)
  return _internal_service_level_objective();
}
inline void CreateServiceLevelObjectiveRequest::unsafe_arena_set_allocated_service_level_objective(
    ::google::monitoring::v3::ServiceLevelObjective* service_level_objective) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_level_objective_);
  }
  _impl_.service_level_objective_ = service_level_objective;
  if (service_level_objective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective)
}
inline ::google::monitoring::v3::ServiceLevelObjective* CreateServiceLevelObjectiveRequest::release_service_level_objective() {
  
  ::google::monitoring::v3::ServiceLevelObjective* temp = _impl_.service_level_objective_;
  _impl_.service_level_objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::ServiceLevelObjective* CreateServiceLevelObjectiveRequest::unsafe_arena_release_service_level_objective() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective)
  
  ::google::monitoring::v3::ServiceLevelObjective* temp = _impl_.service_level_objective_;
  _impl_.service_level_objective_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::ServiceLevelObjective* CreateServiceLevelObjectiveRequest::_internal_mutable_service_level_objective() {
  
  if (_impl_.service_level_objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::ServiceLevelObjective>(GetArenaForAllocation());
    _impl_.service_level_objective_ = p;
  }
  return _impl_.service_level_objective_;
}
inline ::google::monitoring::v3::ServiceLevelObjective* CreateServiceLevelObjectiveRequest::mutable_service_level_objective() {
  ::google::monitoring::v3::ServiceLevelObjective* _msg = _internal_mutable_service_level_objective();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective)
  return _msg;
}
inline void CreateServiceLevelObjectiveRequest::set_allocated_service_level_objective(::google::monitoring::v3::ServiceLevelObjective* service_level_objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_level_objective_);
  }
  if (service_level_objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_level_objective));
    if (message_arena != submessage_arena) {
      service_level_objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_level_objective, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_level_objective_ = service_level_objective;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateServiceLevelObjectiveRequest.service_level_objective)
}

// -------------------------------------------------------------------

// GetServiceLevelObjectiveRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetServiceLevelObjectiveRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetServiceLevelObjectiveRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetServiceLevelObjectiveRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceLevelObjectiveRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetServiceLevelObjectiveRequest.name)
}
inline std::string* GetServiceLevelObjectiveRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetServiceLevelObjectiveRequest.name)
  return _s;
}
inline const std::string& GetServiceLevelObjectiveRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetServiceLevelObjectiveRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceLevelObjectiveRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceLevelObjectiveRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetServiceLevelObjectiveRequest.name)
  return _impl_.name_.Release();
}
inline void GetServiceLevelObjectiveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetServiceLevelObjectiveRequest.name)
}

// .google.monitoring.v3.ServiceLevelObjective.View view = 2;
inline void GetServiceLevelObjectiveRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::monitoring::v3::ServiceLevelObjective_View GetServiceLevelObjectiveRequest::_internal_view() const {
  return static_cast< ::google::monitoring::v3::ServiceLevelObjective_View >(_impl_.view_);
}
inline ::google::monitoring::v3::ServiceLevelObjective_View GetServiceLevelObjectiveRequest::view() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetServiceLevelObjectiveRequest.view)
  return _internal_view();
}
inline void GetServiceLevelObjectiveRequest::_internal_set_view(::google::monitoring::v3::ServiceLevelObjective_View value) {
  
  _impl_.view_ = value;
}
inline void GetServiceLevelObjectiveRequest::set_view(::google::monitoring::v3::ServiceLevelObjective_View value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetServiceLevelObjectiveRequest.view)
}

// -------------------------------------------------------------------

// ListServiceLevelObjectivesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListServiceLevelObjectivesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListServiceLevelObjectivesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServiceLevelObjectivesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesRequest.parent)
}
inline std::string* ListServiceLevelObjectivesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServiceLevelObjectivesRequest.parent)
  return _s;
}
inline const std::string& ListServiceLevelObjectivesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListServiceLevelObjectivesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServiceLevelObjectivesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListServiceLevelObjectivesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServiceLevelObjectivesRequest.parent)
}

// string filter = 2;
inline void ListServiceLevelObjectivesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListServiceLevelObjectivesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServiceLevelObjectivesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesRequest.filter)
}
inline std::string* ListServiceLevelObjectivesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServiceLevelObjectivesRequest.filter)
  return _s;
}
inline const std::string& ListServiceLevelObjectivesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListServiceLevelObjectivesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServiceLevelObjectivesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListServiceLevelObjectivesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServiceLevelObjectivesRequest.filter)
}

// int32 page_size = 3;
inline void ListServiceLevelObjectivesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListServiceLevelObjectivesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListServiceLevelObjectivesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_size)
  return _internal_page_size();
}
inline void ListServiceLevelObjectivesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListServiceLevelObjectivesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_size)
}

// string page_token = 4;
inline void ListServiceLevelObjectivesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListServiceLevelObjectivesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServiceLevelObjectivesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_token)
}
inline std::string* ListServiceLevelObjectivesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_token)
  return _s;
}
inline const std::string& ListServiceLevelObjectivesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListServiceLevelObjectivesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListServiceLevelObjectivesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServiceLevelObjectivesRequest.page_token)
}

// .google.monitoring.v3.ServiceLevelObjective.View view = 5;
inline void ListServiceLevelObjectivesRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::monitoring::v3::ServiceLevelObjective_View ListServiceLevelObjectivesRequest::_internal_view() const {
  return static_cast< ::google::monitoring::v3::ServiceLevelObjective_View >(_impl_.view_);
}
inline ::google::monitoring::v3::ServiceLevelObjective_View ListServiceLevelObjectivesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesRequest.view)
  return _internal_view();
}
inline void ListServiceLevelObjectivesRequest::_internal_set_view(::google::monitoring::v3::ServiceLevelObjective_View value) {
  
  _impl_.view_ = value;
}
inline void ListServiceLevelObjectivesRequest::set_view(::google::monitoring::v3::ServiceLevelObjective_View value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesRequest.view)
}

// -------------------------------------------------------------------

// ListServiceLevelObjectivesResponse

// repeated .google.monitoring.v3.ServiceLevelObjective service_level_objectives = 1;
inline int ListServiceLevelObjectivesResponse::_internal_service_level_objectives_size() const {
  return _impl_.service_level_objectives_.size();
}
inline int ListServiceLevelObjectivesResponse::service_level_objectives_size() const {
  return _internal_service_level_objectives_size();
}
inline ::google::monitoring::v3::ServiceLevelObjective* ListServiceLevelObjectivesResponse::mutable_service_level_objectives(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServiceLevelObjectivesResponse.service_level_objectives)
  return _impl_.service_level_objectives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::ServiceLevelObjective >*
ListServiceLevelObjectivesResponse::mutable_service_level_objectives() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListServiceLevelObjectivesResponse.service_level_objectives)
  return &_impl_.service_level_objectives_;
}
inline const ::google::monitoring::v3::ServiceLevelObjective& ListServiceLevelObjectivesResponse::_internal_service_level_objectives(int index) const {
  return _impl_.service_level_objectives_.Get(index);
}
inline const ::google::monitoring::v3::ServiceLevelObjective& ListServiceLevelObjectivesResponse::service_level_objectives(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesResponse.service_level_objectives)
  return _internal_service_level_objectives(index);
}
inline ::google::monitoring::v3::ServiceLevelObjective* ListServiceLevelObjectivesResponse::_internal_add_service_level_objectives() {
  return _impl_.service_level_objectives_.Add();
}
inline ::google::monitoring::v3::ServiceLevelObjective* ListServiceLevelObjectivesResponse::add_service_level_objectives() {
  ::google::monitoring::v3::ServiceLevelObjective* _add = _internal_add_service_level_objectives();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListServiceLevelObjectivesResponse.service_level_objectives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::ServiceLevelObjective >&
ListServiceLevelObjectivesResponse::service_level_objectives() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListServiceLevelObjectivesResponse.service_level_objectives)
  return _impl_.service_level_objectives_;
}

// string next_page_token = 2;
inline void ListServiceLevelObjectivesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListServiceLevelObjectivesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListServiceLevelObjectivesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServiceLevelObjectivesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListServiceLevelObjectivesResponse.next_page_token)
}
inline std::string* ListServiceLevelObjectivesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListServiceLevelObjectivesResponse.next_page_token)
  return _s;
}
inline const std::string& ListServiceLevelObjectivesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListServiceLevelObjectivesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServiceLevelObjectivesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListServiceLevelObjectivesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListServiceLevelObjectivesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListServiceLevelObjectivesResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateServiceLevelObjectiveRequest

// .google.monitoring.v3.ServiceLevelObjective service_level_objective = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateServiceLevelObjectiveRequest::_internal_has_service_level_objective() const {
  return this != internal_default_instance() && _impl_.service_level_objective_ != nullptr;
}
inline bool UpdateServiceLevelObjectiveRequest::has_service_level_objective() const {
  return _internal_has_service_level_objective();
}
inline const ::google::monitoring::v3::ServiceLevelObjective& UpdateServiceLevelObjectiveRequest::_internal_service_level_objective() const {
  const ::google::monitoring::v3::ServiceLevelObjective* p = _impl_.service_level_objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::ServiceLevelObjective&>(
      ::google::monitoring::v3::_ServiceLevelObjective_default_instance_);
}
inline const ::google::monitoring::v3::ServiceLevelObjective& UpdateServiceLevelObjectiveRequest::service_level_objective() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.service_level_objective)
  return _internal_service_level_objective();
}
inline void UpdateServiceLevelObjectiveRequest::unsafe_arena_set_allocated_service_level_objective(
    ::google::monitoring::v3::ServiceLevelObjective* service_level_objective) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_level_objective_);
  }
  _impl_.service_level_objective_ = service_level_objective;
  if (service_level_objective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.service_level_objective)
}
inline ::google::monitoring::v3::ServiceLevelObjective* UpdateServiceLevelObjectiveRequest::release_service_level_objective() {
  
  ::google::monitoring::v3::ServiceLevelObjective* temp = _impl_.service_level_objective_;
  _impl_.service_level_objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::ServiceLevelObjective* UpdateServiceLevelObjectiveRequest::unsafe_arena_release_service_level_objective() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.service_level_objective)
  
  ::google::monitoring::v3::ServiceLevelObjective* temp = _impl_.service_level_objective_;
  _impl_.service_level_objective_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::ServiceLevelObjective* UpdateServiceLevelObjectiveRequest::_internal_mutable_service_level_objective() {
  
  if (_impl_.service_level_objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::ServiceLevelObjective>(GetArenaForAllocation());
    _impl_.service_level_objective_ = p;
  }
  return _impl_.service_level_objective_;
}
inline ::google::monitoring::v3::ServiceLevelObjective* UpdateServiceLevelObjectiveRequest::mutable_service_level_objective() {
  ::google::monitoring::v3::ServiceLevelObjective* _msg = _internal_mutable_service_level_objective();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.service_level_objective)
  return _msg;
}
inline void UpdateServiceLevelObjectiveRequest::set_allocated_service_level_objective(::google::monitoring::v3::ServiceLevelObjective* service_level_objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_level_objective_);
  }
  if (service_level_objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_level_objective));
    if (message_arena != submessage_arena) {
      service_level_objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_level_objective, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.service_level_objective_ = service_level_objective;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.service_level_objective)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateServiceLevelObjectiveRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateServiceLevelObjectiveRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateServiceLevelObjectiveRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateServiceLevelObjectiveRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateServiceLevelObjectiveRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceLevelObjectiveRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceLevelObjectiveRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceLevelObjectiveRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateServiceLevelObjectiveRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.update_mask)
  return _msg;
}
inline void UpdateServiceLevelObjectiveRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateServiceLevelObjectiveRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteServiceLevelObjectiveRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteServiceLevelObjectiveRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteServiceLevelObjectiveRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteServiceLevelObjectiveRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteServiceLevelObjectiveRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteServiceLevelObjectiveRequest.name)
}
inline std::string* DeleteServiceLevelObjectiveRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteServiceLevelObjectiveRequest.name)
  return _s;
}
inline const std::string& DeleteServiceLevelObjectiveRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteServiceLevelObjectiveRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteServiceLevelObjectiveRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteServiceLevelObjectiveRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteServiceLevelObjectiveRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteServiceLevelObjectiveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteServiceLevelObjectiveRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto
