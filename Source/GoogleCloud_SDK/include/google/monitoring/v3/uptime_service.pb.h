// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/uptime_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/uptime.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(int index);
namespace google {
namespace monitoring {
namespace v3 {
class CreateUptimeCheckConfigRequest;
struct CreateUptimeCheckConfigRequestDefaultTypeInternal;
extern CreateUptimeCheckConfigRequestDefaultTypeInternal _CreateUptimeCheckConfigRequest_default_instance_;
class DeleteUptimeCheckConfigRequest;
struct DeleteUptimeCheckConfigRequestDefaultTypeInternal;
extern DeleteUptimeCheckConfigRequestDefaultTypeInternal _DeleteUptimeCheckConfigRequest_default_instance_;
class GetUptimeCheckConfigRequest;
struct GetUptimeCheckConfigRequestDefaultTypeInternal;
extern GetUptimeCheckConfigRequestDefaultTypeInternal _GetUptimeCheckConfigRequest_default_instance_;
class ListUptimeCheckConfigsRequest;
struct ListUptimeCheckConfigsRequestDefaultTypeInternal;
extern ListUptimeCheckConfigsRequestDefaultTypeInternal _ListUptimeCheckConfigsRequest_default_instance_;
class ListUptimeCheckConfigsResponse;
struct ListUptimeCheckConfigsResponseDefaultTypeInternal;
extern ListUptimeCheckConfigsResponseDefaultTypeInternal _ListUptimeCheckConfigsResponse_default_instance_;
class ListUptimeCheckIpsRequest;
struct ListUptimeCheckIpsRequestDefaultTypeInternal;
extern ListUptimeCheckIpsRequestDefaultTypeInternal _ListUptimeCheckIpsRequest_default_instance_;
class ListUptimeCheckIpsResponse;
struct ListUptimeCheckIpsResponseDefaultTypeInternal;
extern ListUptimeCheckIpsResponseDefaultTypeInternal _ListUptimeCheckIpsResponse_default_instance_;
class UpdateUptimeCheckConfigRequest;
struct UpdateUptimeCheckConfigRequestDefaultTypeInternal;
extern UpdateUptimeCheckConfigRequestDefaultTypeInternal _UpdateUptimeCheckConfigRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::GetUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckConfigsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckConfigsRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckConfigsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckConfigsResponse>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckIpsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckIpsRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckIpsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckIpsResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateUptimeCheckConfigRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class ListUptimeCheckConfigsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckConfigsRequest) */ {
 public:
  inline ListUptimeCheckConfigsRequest() : ListUptimeCheckConfigsRequest(nullptr) {}
  virtual ~ListUptimeCheckConfigsRequest();
  explicit constexpr ListUptimeCheckConfigsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUptimeCheckConfigsRequest(const ListUptimeCheckConfigsRequest& from);
  ListUptimeCheckConfigsRequest(ListUptimeCheckConfigsRequest&& from) noexcept
    : ListUptimeCheckConfigsRequest() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckConfigsRequest& operator=(const ListUptimeCheckConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUptimeCheckConfigsRequest& operator=(ListUptimeCheckConfigsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUptimeCheckConfigsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUptimeCheckConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckConfigsRequest*>(
               &_ListUptimeCheckConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListUptimeCheckConfigsRequest& a, ListUptimeCheckConfigsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUptimeCheckConfigsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUptimeCheckConfigsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckConfigsRequest* New() const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsRequest>(nullptr);
  }

  ListUptimeCheckConfigsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUptimeCheckConfigsRequest& from);
  void MergeFrom(const ListUptimeCheckConfigsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckConfigsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListUptimeCheckConfigsRequest";
  }
  protected:
  explicit ListUptimeCheckConfigsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckConfigsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUptimeCheckConfigsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckConfigsResponse) */ {
 public:
  inline ListUptimeCheckConfigsResponse() : ListUptimeCheckConfigsResponse(nullptr) {}
  virtual ~ListUptimeCheckConfigsResponse();
  explicit constexpr ListUptimeCheckConfigsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUptimeCheckConfigsResponse(const ListUptimeCheckConfigsResponse& from);
  ListUptimeCheckConfigsResponse(ListUptimeCheckConfigsResponse&& from) noexcept
    : ListUptimeCheckConfigsResponse() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckConfigsResponse& operator=(const ListUptimeCheckConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUptimeCheckConfigsResponse& operator=(ListUptimeCheckConfigsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUptimeCheckConfigsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUptimeCheckConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckConfigsResponse*>(
               &_ListUptimeCheckConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListUptimeCheckConfigsResponse& a, ListUptimeCheckConfigsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUptimeCheckConfigsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUptimeCheckConfigsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckConfigsResponse* New() const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsResponse>(nullptr);
  }

  ListUptimeCheckConfigsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUptimeCheckConfigsResponse& from);
  void MergeFrom(const ListUptimeCheckConfigsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckConfigsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListUptimeCheckConfigsResponse";
  }
  protected:
  explicit ListUptimeCheckConfigsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeCheckConfigsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
    kTotalSizeFieldNumber = 3,
  };
  // repeated .google.monitoring.v3.UptimeCheckConfig uptime_check_configs = 1;
  int uptime_check_configs_size() const;
  private:
  int _internal_uptime_check_configs_size() const;
  public:
  void clear_uptime_check_configs();
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >*
      mutable_uptime_check_configs();
  private:
  const ::google::monitoring::v3::UptimeCheckConfig& _internal_uptime_check_configs(int index) const;
  ::google::monitoring::v3::UptimeCheckConfig* _internal_add_uptime_check_configs();
  public:
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_configs(int index) const;
  ::google::monitoring::v3::UptimeCheckConfig* add_uptime_check_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >&
      uptime_check_configs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // int32 total_size = 3;
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::int32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_size() const;
  void _internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckConfigsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig > uptime_check_configs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUptimeCheckConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetUptimeCheckConfigRequest) */ {
 public:
  inline GetUptimeCheckConfigRequest() : GetUptimeCheckConfigRequest(nullptr) {}
  virtual ~GetUptimeCheckConfigRequest();
  explicit constexpr GetUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUptimeCheckConfigRequest(const GetUptimeCheckConfigRequest& from);
  GetUptimeCheckConfigRequest(GetUptimeCheckConfigRequest&& from) noexcept
    : GetUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetUptimeCheckConfigRequest& operator=(const GetUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUptimeCheckConfigRequest& operator=(GetUptimeCheckConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUptimeCheckConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetUptimeCheckConfigRequest*>(
               &_GetUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUptimeCheckConfigRequest& a, GetUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUptimeCheckConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUptimeCheckConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<GetUptimeCheckConfigRequest>(nullptr);
  }

  GetUptimeCheckConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUptimeCheckConfigRequest& from);
  void MergeFrom(const GetUptimeCheckConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUptimeCheckConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetUptimeCheckConfigRequest";
  }
  protected:
  explicit GetUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetUptimeCheckConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateUptimeCheckConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateUptimeCheckConfigRequest) */ {
 public:
  inline CreateUptimeCheckConfigRequest() : CreateUptimeCheckConfigRequest(nullptr) {}
  virtual ~CreateUptimeCheckConfigRequest();
  explicit constexpr CreateUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUptimeCheckConfigRequest(const CreateUptimeCheckConfigRequest& from);
  CreateUptimeCheckConfigRequest(CreateUptimeCheckConfigRequest&& from) noexcept
    : CreateUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateUptimeCheckConfigRequest& operator=(const CreateUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUptimeCheckConfigRequest& operator=(CreateUptimeCheckConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateUptimeCheckConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUptimeCheckConfigRequest*>(
               &_CreateUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateUptimeCheckConfigRequest& a, CreateUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUptimeCheckConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUptimeCheckConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<CreateUptimeCheckConfigRequest>(nullptr);
  }

  CreateUptimeCheckConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateUptimeCheckConfigRequest& from);
  void MergeFrom(const CreateUptimeCheckConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUptimeCheckConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateUptimeCheckConfigRequest";
  }
  protected:
  explicit CreateUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kUptimeCheckConfigFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_uptime_check_config() const;
  private:
  bool _internal_has_uptime_check_config() const;
  public:
  void clear_uptime_check_config();
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* release_uptime_check_config();
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_config();
  void set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);
  private:
  const ::google::monitoring::v3::UptimeCheckConfig& _internal_uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* _internal_mutable_uptime_check_config();
  public:
  void unsafe_arena_set_allocated_uptime_check_config(
      ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);
  ::google::monitoring::v3::UptimeCheckConfig* unsafe_arena_release_uptime_check_config();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateUptimeCheckConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateUptimeCheckConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateUptimeCheckConfigRequest) */ {
 public:
  inline UpdateUptimeCheckConfigRequest() : UpdateUptimeCheckConfigRequest(nullptr) {}
  virtual ~UpdateUptimeCheckConfigRequest();
  explicit constexpr UpdateUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUptimeCheckConfigRequest(const UpdateUptimeCheckConfigRequest& from);
  UpdateUptimeCheckConfigRequest(UpdateUptimeCheckConfigRequest&& from) noexcept
    : UpdateUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUptimeCheckConfigRequest& operator=(const UpdateUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUptimeCheckConfigRequest& operator=(UpdateUptimeCheckConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateUptimeCheckConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUptimeCheckConfigRequest*>(
               &_UpdateUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateUptimeCheckConfigRequest& a, UpdateUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUptimeCheckConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUptimeCheckConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<UpdateUptimeCheckConfigRequest>(nullptr);
  }

  UpdateUptimeCheckConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateUptimeCheckConfigRequest& from);
  void MergeFrom(const UpdateUptimeCheckConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUptimeCheckConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateUptimeCheckConfigRequest";
  }
  protected:
  explicit UpdateUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateMaskFieldNumber = 2,
    kUptimeCheckConfigFieldNumber = 3,
  };
  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_uptime_check_config() const;
  private:
  bool _internal_has_uptime_check_config() const;
  public:
  void clear_uptime_check_config();
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* release_uptime_check_config();
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_config();
  void set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);
  private:
  const ::google::monitoring::v3::UptimeCheckConfig& _internal_uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* _internal_mutable_uptime_check_config();
  public:
  void unsafe_arena_set_allocated_uptime_check_config(
      ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);
  ::google::monitoring::v3::UptimeCheckConfig* unsafe_arena_release_uptime_check_config();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateUptimeCheckConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteUptimeCheckConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteUptimeCheckConfigRequest) */ {
 public:
  inline DeleteUptimeCheckConfigRequest() : DeleteUptimeCheckConfigRequest(nullptr) {}
  virtual ~DeleteUptimeCheckConfigRequest();
  explicit constexpr DeleteUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUptimeCheckConfigRequest(const DeleteUptimeCheckConfigRequest& from);
  DeleteUptimeCheckConfigRequest(DeleteUptimeCheckConfigRequest&& from) noexcept
    : DeleteUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUptimeCheckConfigRequest& operator=(const DeleteUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUptimeCheckConfigRequest& operator=(DeleteUptimeCheckConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteUptimeCheckConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUptimeCheckConfigRequest*>(
               &_DeleteUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteUptimeCheckConfigRequest& a, DeleteUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUptimeCheckConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUptimeCheckConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<DeleteUptimeCheckConfigRequest>(nullptr);
  }

  DeleteUptimeCheckConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteUptimeCheckConfigRequest& from);
  void MergeFrom(const DeleteUptimeCheckConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUptimeCheckConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteUptimeCheckConfigRequest";
  }
  protected:
  explicit DeleteUptimeCheckConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteUptimeCheckConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUptimeCheckIpsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckIpsRequest) */ {
 public:
  inline ListUptimeCheckIpsRequest() : ListUptimeCheckIpsRequest(nullptr) {}
  virtual ~ListUptimeCheckIpsRequest();
  explicit constexpr ListUptimeCheckIpsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUptimeCheckIpsRequest(const ListUptimeCheckIpsRequest& from);
  ListUptimeCheckIpsRequest(ListUptimeCheckIpsRequest&& from) noexcept
    : ListUptimeCheckIpsRequest() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckIpsRequest& operator=(const ListUptimeCheckIpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUptimeCheckIpsRequest& operator=(ListUptimeCheckIpsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUptimeCheckIpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUptimeCheckIpsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckIpsRequest*>(
               &_ListUptimeCheckIpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListUptimeCheckIpsRequest& a, ListUptimeCheckIpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUptimeCheckIpsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUptimeCheckIpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckIpsRequest* New() const final {
    return CreateMaybeMessage<ListUptimeCheckIpsRequest>(nullptr);
  }

  ListUptimeCheckIpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckIpsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUptimeCheckIpsRequest& from);
  void MergeFrom(const ListUptimeCheckIpsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckIpsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListUptimeCheckIpsRequest";
  }
  protected:
  explicit ListUptimeCheckIpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckIpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUptimeCheckIpsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckIpsResponse) */ {
 public:
  inline ListUptimeCheckIpsResponse() : ListUptimeCheckIpsResponse(nullptr) {}
  virtual ~ListUptimeCheckIpsResponse();
  explicit constexpr ListUptimeCheckIpsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUptimeCheckIpsResponse(const ListUptimeCheckIpsResponse& from);
  ListUptimeCheckIpsResponse(ListUptimeCheckIpsResponse&& from) noexcept
    : ListUptimeCheckIpsResponse() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckIpsResponse& operator=(const ListUptimeCheckIpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUptimeCheckIpsResponse& operator=(ListUptimeCheckIpsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUptimeCheckIpsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUptimeCheckIpsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckIpsResponse*>(
               &_ListUptimeCheckIpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListUptimeCheckIpsResponse& a, ListUptimeCheckIpsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUptimeCheckIpsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUptimeCheckIpsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckIpsResponse* New() const final {
    return CreateMaybeMessage<ListUptimeCheckIpsResponse>(nullptr);
  }

  ListUptimeCheckIpsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckIpsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUptimeCheckIpsResponse& from);
  void MergeFrom(const ListUptimeCheckIpsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckIpsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListUptimeCheckIpsResponse";
  }
  protected:
  explicit ListUptimeCheckIpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeCheckIpsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.UptimeCheckIp uptime_check_ips = 1;
  int uptime_check_ips_size() const;
  private:
  int _internal_uptime_check_ips_size() const;
  public:
  void clear_uptime_check_ips();
  ::google::monitoring::v3::UptimeCheckIp* mutable_uptime_check_ips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >*
      mutable_uptime_check_ips();
  private:
  const ::google::monitoring::v3::UptimeCheckIp& _internal_uptime_check_ips(int index) const;
  ::google::monitoring::v3::UptimeCheckIp* _internal_add_uptime_check_ips();
  public:
  const ::google::monitoring::v3::UptimeCheckIp& uptime_check_ips(int index) const;
  ::google::monitoring::v3::UptimeCheckIp* add_uptime_check_ips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >&
      uptime_check_ips() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckIpsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp > uptime_check_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListUptimeCheckConfigsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListUptimeCheckConfigsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListUptimeCheckConfigsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  return _internal_parent();
}
inline void ListUptimeCheckConfigsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline std::string* ListUptimeCheckConfigsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListUptimeCheckConfigsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListUptimeCheckConfigsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUptimeCheckConfigsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline void ListUptimeCheckConfigsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline void ListUptimeCheckConfigsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline std::string* ListUptimeCheckConfigsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUptimeCheckConfigsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUptimeCheckConfigsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}

// int32 page_size = 3;
inline void ListUptimeCheckConfigsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckConfigsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_size)
  return _internal_page_size();
}
inline void ListUptimeCheckConfigsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListUptimeCheckConfigsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_size)
}

// string page_token = 4;
inline void ListUptimeCheckConfigsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListUptimeCheckConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  return _internal_page_token();
}
inline void ListUptimeCheckConfigsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline std::string* ListUptimeCheckConfigsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListUptimeCheckConfigsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListUptimeCheckConfigsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUptimeCheckConfigsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline void ListUptimeCheckConfigsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline void ListUptimeCheckConfigsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline std::string* ListUptimeCheckConfigsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUptimeCheckConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUptimeCheckConfigsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}

// -------------------------------------------------------------------

// ListUptimeCheckConfigsResponse

// repeated .google.monitoring.v3.UptimeCheckConfig uptime_check_configs = 1;
inline int ListUptimeCheckConfigsResponse::_internal_uptime_check_configs_size() const {
  return uptime_check_configs_.size();
}
inline int ListUptimeCheckConfigsResponse::uptime_check_configs_size() const {
  return _internal_uptime_check_configs_size();
}
inline ::google::monitoring::v3::UptimeCheckConfig* ListUptimeCheckConfigsResponse::mutable_uptime_check_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >*
ListUptimeCheckConfigsResponse::mutable_uptime_check_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return &uptime_check_configs_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& ListUptimeCheckConfigsResponse::_internal_uptime_check_configs(int index) const {
  return uptime_check_configs_.Get(index);
}
inline const ::google::monitoring::v3::UptimeCheckConfig& ListUptimeCheckConfigsResponse::uptime_check_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return _internal_uptime_check_configs(index);
}
inline ::google::monitoring::v3::UptimeCheckConfig* ListUptimeCheckConfigsResponse::_internal_add_uptime_check_configs() {
  return uptime_check_configs_.Add();
}
inline ::google::monitoring::v3::UptimeCheckConfig* ListUptimeCheckConfigsResponse::add_uptime_check_configs() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return _internal_add_uptime_check_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >&
ListUptimeCheckConfigsResponse::uptime_check_configs() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_;
}

// string next_page_token = 2;
inline void ListUptimeCheckConfigsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListUptimeCheckConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline std::string* ListUptimeCheckConfigsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListUptimeCheckConfigsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListUptimeCheckConfigsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline std::string* ListUptimeCheckConfigsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUptimeCheckConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUptimeCheckConfigsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}

// int32 total_size = 3;
inline void ListUptimeCheckConfigsResponse::clear_total_size() {
  total_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckConfigsResponse::_internal_total_size() const {
  return total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckConfigsResponse::total_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.total_size)
  return _internal_total_size();
}
inline void ListUptimeCheckConfigsResponse::_internal_set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_size_ = value;
}
inline void ListUptimeCheckConfigsResponse::set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsResponse.total_size)
}

// -------------------------------------------------------------------

// GetUptimeCheckConfigRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetUptimeCheckConfigRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetUptimeCheckConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  return _internal_name();
}
inline void GetUptimeCheckConfigRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline std::string* GetUptimeCheckConfigRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetUptimeCheckConfigRequest::_internal_name() const {
  return name_.Get();
}
inline void GetUptimeCheckConfigRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUptimeCheckConfigRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline void GetUptimeCheckConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline void GetUptimeCheckConfigRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline std::string* GetUptimeCheckConfigRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUptimeCheckConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUptimeCheckConfigRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}

// -------------------------------------------------------------------

// CreateUptimeCheckConfigRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateUptimeCheckConfigRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateUptimeCheckConfigRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  return _internal_parent();
}
inline void CreateUptimeCheckConfigRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline std::string* CreateUptimeCheckConfigRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateUptimeCheckConfigRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateUptimeCheckConfigRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateUptimeCheckConfigRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline void CreateUptimeCheckConfigRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline void CreateUptimeCheckConfigRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline std::string* CreateUptimeCheckConfigRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateUptimeCheckConfigRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateUptimeCheckConfigRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}

// .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateUptimeCheckConfigRequest::_internal_has_uptime_check_config() const {
  return this != internal_default_instance() && uptime_check_config_ != nullptr;
}
inline bool CreateUptimeCheckConfigRequest::has_uptime_check_config() const {
  return _internal_has_uptime_check_config();
}
inline const ::google::monitoring::v3::UptimeCheckConfig& CreateUptimeCheckConfigRequest::_internal_uptime_check_config() const {
  const ::google::monitoring::v3::UptimeCheckConfig* p = uptime_check_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::UptimeCheckConfig&>(
      ::google::monitoring::v3::_UptimeCheckConfig_default_instance_);
}
inline const ::google::monitoring::v3::UptimeCheckConfig& CreateUptimeCheckConfigRequest::uptime_check_config() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  return _internal_uptime_check_config();
}
inline void CreateUptimeCheckConfigRequest::unsafe_arena_set_allocated_uptime_check_config(
    ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config_);
  }
  uptime_check_config_ = uptime_check_config;
  if (uptime_check_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::release_uptime_check_config() {
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::unsafe_arena_release_uptime_check_config() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::_internal_mutable_uptime_check_config() {
  
  if (uptime_check_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig>(GetArena());
    uptime_check_config_ = p;
  }
  return uptime_check_config_;
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::mutable_uptime_check_config() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  return _internal_mutable_uptime_check_config();
}
inline void CreateUptimeCheckConfigRequest::set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config_);
  }
  if (uptime_check_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config)->GetArena();
    if (message_arena != submessage_arena) {
      uptime_check_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime_check_config, submessage_arena);
    }
    
  } else {
    
  }
  uptime_check_config_ = uptime_check_config;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
}

// -------------------------------------------------------------------

// UpdateUptimeCheckConfigRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateUptimeCheckConfigRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateUptimeCheckConfigRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUptimeCheckConfigRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUptimeCheckConfigRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateUptimeCheckConfigRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUptimeCheckConfigRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUptimeCheckConfigRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUptimeCheckConfigRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUptimeCheckConfigRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateUptimeCheckConfigRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
}

// .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateUptimeCheckConfigRequest::_internal_has_uptime_check_config() const {
  return this != internal_default_instance() && uptime_check_config_ != nullptr;
}
inline bool UpdateUptimeCheckConfigRequest::has_uptime_check_config() const {
  return _internal_has_uptime_check_config();
}
inline const ::google::monitoring::v3::UptimeCheckConfig& UpdateUptimeCheckConfigRequest::_internal_uptime_check_config() const {
  const ::google::monitoring::v3::UptimeCheckConfig* p = uptime_check_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::UptimeCheckConfig&>(
      ::google::monitoring::v3::_UptimeCheckConfig_default_instance_);
}
inline const ::google::monitoring::v3::UptimeCheckConfig& UpdateUptimeCheckConfigRequest::uptime_check_config() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  return _internal_uptime_check_config();
}
inline void UpdateUptimeCheckConfigRequest::unsafe_arena_set_allocated_uptime_check_config(
    ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config_);
  }
  uptime_check_config_ = uptime_check_config;
  if (uptime_check_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::release_uptime_check_config() {
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::unsafe_arena_release_uptime_check_config() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::_internal_mutable_uptime_check_config() {
  
  if (uptime_check_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig>(GetArena());
    uptime_check_config_ = p;
  }
  return uptime_check_config_;
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::mutable_uptime_check_config() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  return _internal_mutable_uptime_check_config();
}
inline void UpdateUptimeCheckConfigRequest::set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config_);
  }
  if (uptime_check_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_check_config)->GetArena();
    if (message_arena != submessage_arena) {
      uptime_check_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime_check_config, submessage_arena);
    }
    
  } else {
    
  }
  uptime_check_config_ = uptime_check_config;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
}

// -------------------------------------------------------------------

// DeleteUptimeCheckConfigRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteUptimeCheckConfigRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteUptimeCheckConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  return _internal_name();
}
inline void DeleteUptimeCheckConfigRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline std::string* DeleteUptimeCheckConfigRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteUptimeCheckConfigRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteUptimeCheckConfigRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteUptimeCheckConfigRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline void DeleteUptimeCheckConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline void DeleteUptimeCheckConfigRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline std::string* DeleteUptimeCheckConfigRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteUptimeCheckConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteUptimeCheckConfigRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}

// -------------------------------------------------------------------

// ListUptimeCheckIpsRequest

// int32 page_size = 2;
inline void ListUptimeCheckIpsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckIpsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUptimeCheckIpsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsRequest.page_size)
  return _internal_page_size();
}
inline void ListUptimeCheckIpsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListUptimeCheckIpsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsRequest.page_size)
}

// string page_token = 3;
inline void ListUptimeCheckIpsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListUptimeCheckIpsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  return _internal_page_token();
}
inline void ListUptimeCheckIpsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline std::string* ListUptimeCheckIpsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListUptimeCheckIpsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListUptimeCheckIpsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUptimeCheckIpsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline void ListUptimeCheckIpsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline void ListUptimeCheckIpsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline std::string* ListUptimeCheckIpsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUptimeCheckIpsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUptimeCheckIpsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}

// -------------------------------------------------------------------

// ListUptimeCheckIpsResponse

// repeated .google.monitoring.v3.UptimeCheckIp uptime_check_ips = 1;
inline int ListUptimeCheckIpsResponse::_internal_uptime_check_ips_size() const {
  return uptime_check_ips_.size();
}
inline int ListUptimeCheckIpsResponse::uptime_check_ips_size() const {
  return _internal_uptime_check_ips_size();
}
inline ::google::monitoring::v3::UptimeCheckIp* ListUptimeCheckIpsResponse::mutable_uptime_check_ips(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >*
ListUptimeCheckIpsResponse::mutable_uptime_check_ips() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return &uptime_check_ips_;
}
inline const ::google::monitoring::v3::UptimeCheckIp& ListUptimeCheckIpsResponse::_internal_uptime_check_ips(int index) const {
  return uptime_check_ips_.Get(index);
}
inline const ::google::monitoring::v3::UptimeCheckIp& ListUptimeCheckIpsResponse::uptime_check_ips(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return _internal_uptime_check_ips(index);
}
inline ::google::monitoring::v3::UptimeCheckIp* ListUptimeCheckIpsResponse::_internal_add_uptime_check_ips() {
  return uptime_check_ips_.Add();
}
inline ::google::monitoring::v3::UptimeCheckIp* ListUptimeCheckIpsResponse::add_uptime_check_ips() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return _internal_add_uptime_check_ips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >&
ListUptimeCheckIpsResponse::uptime_check_ips() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_;
}

// string next_page_token = 2;
inline void ListUptimeCheckIpsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListUptimeCheckIpsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline std::string* ListUptimeCheckIpsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListUptimeCheckIpsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListUptimeCheckIpsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline std::string* ListUptimeCheckIpsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListUptimeCheckIpsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListUptimeCheckIpsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
