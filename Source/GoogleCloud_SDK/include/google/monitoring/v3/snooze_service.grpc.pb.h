// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/snooze_service.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/snooze_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// The SnoozeService API is used to temporarily prevent an alert policy from
// generating alerts. A Snooze is a description of the criteria under which one
// or more alert policies should not fire alerts for the specified duration.
class SnoozeService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.SnoozeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a `Snooze` that will prevent alerts, which match the provided
    // criteria, from being opened. The `Snooze` applies for a specific time
    // interval.
    virtual ::grpc::Status CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> AsyncCreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(AsyncCreateSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> PrepareAsyncCreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(PrepareAsyncCreateSnoozeRaw(context, request, cq));
    }
    // Lists the `Snooze`s associated with a project. Can optionally pass in
    // `filter`, which specifies predicates to match `Snooze`s.
    virtual ::grpc::Status ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::google::monitoring::v3::ListSnoozesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>> AsyncListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>>(AsyncListSnoozesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>> PrepareAsyncListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>>(PrepareAsyncListSnoozesRaw(context, request, cq));
    }
    // Retrieves a `Snooze` by `name`.
    virtual ::grpc::Status GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> AsyncGetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(AsyncGetSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> PrepareAsyncGetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(PrepareAsyncGetSnoozeRaw(context, request, cq));
    }
    // Updates a `Snooze`, identified by its `name`, with the parameters in the
    // given `Snooze` object.
    virtual ::grpc::Status UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> AsyncUpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(AsyncUpdateSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>> PrepareAsyncUpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>>(PrepareAsyncUpdateSnoozeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates a `Snooze` that will prevent alerts, which match the provided
      // criteria, from being opened. The `Snooze` applies for a specific time
      // interval.
      virtual void CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the `Snooze`s associated with a project. Can optionally pass in
      // `filter`, which specifies predicates to match `Snooze`s.
      virtual void ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves a `Snooze` by `name`.
      virtual void GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates a `Snooze`, identified by its `name`, with the parameters in the
      // given `Snooze` object.
      virtual void UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* AsyncCreateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* PrepareAsyncCreateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>* AsyncListSnoozesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListSnoozesResponse>* PrepareAsyncListSnoozesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* AsyncGetSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* PrepareAsyncGetSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* AsyncUpdateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Snooze>* PrepareAsyncUpdateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> AsyncCreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(AsyncCreateSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> PrepareAsyncCreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(PrepareAsyncCreateSnoozeRaw(context, request, cq));
    }
    ::grpc::Status ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::google::monitoring::v3::ListSnoozesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>> AsyncListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>>(AsyncListSnoozesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>> PrepareAsyncListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>>(PrepareAsyncListSnoozesRaw(context, request, cq));
    }
    ::grpc::Status GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> AsyncGetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(AsyncGetSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> PrepareAsyncGetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(PrepareAsyncGetSnoozeRaw(context, request, cq));
    }
    ::grpc::Status UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::google::monitoring::v3::Snooze* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> AsyncUpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(AsyncUpdateSnoozeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>> PrepareAsyncUpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>>(PrepareAsyncUpdateSnoozeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) override;
      void CreateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSnoozes(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) override;
      void GetSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, std::function<void(::grpc::Status)>) override;
      void UpdateSnooze(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* AsyncCreateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* PrepareAsyncCreateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>* AsyncListSnoozesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListSnoozesResponse>* PrepareAsyncListSnoozesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListSnoozesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* AsyncGetSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* PrepareAsyncGetSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* AsyncUpdateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Snooze>* PrepareAsyncUpdateSnoozeRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSnooze_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSnoozes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSnooze_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSnooze_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a `Snooze` that will prevent alerts, which match the provided
    // criteria, from being opened. The `Snooze` applies for a specific time
    // interval.
    virtual ::grpc::Status CreateSnooze(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response);
    // Lists the `Snooze`s associated with a project. Can optionally pass in
    // `filter`, which specifies predicates to match `Snooze`s.
    virtual ::grpc::Status ListSnoozes(::grpc::ServerContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response);
    // Retrieves a `Snooze` by `name`.
    virtual ::grpc::Status GetSnooze(::grpc::ServerContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response);
    // Updates a `Snooze`, identified by its `name`, with the parameters in the
    // given `Snooze` object.
    virtual ::grpc::Status UpdateSnooze(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSnooze(::grpc::ServerContext* context, ::google::monitoring::v3::CreateSnoozeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Snooze>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnoozes(::grpc::ServerContext* context, ::google::monitoring::v3::ListSnoozesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListSnoozesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSnooze() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnooze(::grpc::ServerContext* context, ::google::monitoring::v3::GetSnoozeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Snooze>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSnooze(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateSnoozeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Snooze>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSnooze<WithAsyncMethod_ListSnoozes<WithAsyncMethod_GetSnooze<WithAsyncMethod_UpdateSnooze<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response) { return this->CreateSnooze(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSnooze(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateSnoozeRequest, ::google::monitoring::v3::Snooze>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateSnoozeRequest, ::google::monitoring::v3::Snooze>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListSnoozesRequest, ::google::monitoring::v3::ListSnoozesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListSnoozesRequest* request, ::google::monitoring::v3::ListSnoozesResponse* response) { return this->ListSnoozes(context, request, response); }));}
    void SetMessageAllocatorFor_ListSnoozes(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListSnoozesRequest, ::google::monitoring::v3::ListSnoozesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListSnoozesRequest, ::google::monitoring::v3::ListSnoozesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSnoozes(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSnooze() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetSnoozeRequest* request, ::google::monitoring::v3::Snooze* response) { return this->GetSnooze(context, request, response); }));}
    void SetMessageAllocatorFor_GetSnooze(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetSnoozeRequest, ::google::monitoring::v3::Snooze>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetSnoozeRequest, ::google::monitoring::v3::Snooze>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::UpdateSnoozeRequest* request, ::google::monitoring::v3::Snooze* response) { return this->UpdateSnooze(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSnooze(
        ::grpc::MessageAllocator< ::google::monitoring::v3::UpdateSnoozeRequest, ::google::monitoring::v3::Snooze>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateSnoozeRequest, ::google::monitoring::v3::Snooze>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateSnooze<WithCallbackMethod_ListSnoozes<WithCallbackMethod_GetSnooze<WithCallbackMethod_UpdateSnooze<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSnooze() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSnooze(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnoozes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSnooze() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnooze(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSnooze(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSnooze(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSnoozes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSnoozes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSnooze() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSnooze(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSnooze(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSnooze(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSnooze() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateSnoozeRequest, ::google::monitoring::v3::Snooze>* streamer) {
                       return this->StreamedCreateSnooze(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSnooze(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateSnoozeRequest,::google::monitoring::v3::Snooze>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSnoozes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSnoozes() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListSnoozesRequest, ::google::monitoring::v3::ListSnoozesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListSnoozesRequest, ::google::monitoring::v3::ListSnoozesResponse>* streamer) {
                       return this->StreamedListSnoozes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSnoozes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSnoozes(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListSnoozesRequest* /*request*/, ::google::monitoring::v3::ListSnoozesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSnoozes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListSnoozesRequest,::google::monitoring::v3::ListSnoozesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSnooze() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetSnoozeRequest, ::google::monitoring::v3::Snooze>* streamer) {
                       return this->StreamedGetSnooze(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSnooze(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetSnoozeRequest,::google::monitoring::v3::Snooze>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSnooze : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSnooze() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateSnoozeRequest, ::google::monitoring::v3::Snooze>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateSnoozeRequest, ::google::monitoring::v3::Snooze>* streamer) {
                       return this->StreamedUpdateSnooze(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSnooze() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSnooze(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateSnoozeRequest* /*request*/, ::google::monitoring::v3::Snooze* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSnooze(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateSnoozeRequest,::google::monitoring::v3::Snooze>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSnooze<WithStreamedUnaryMethod_ListSnoozes<WithStreamedUnaryMethod_GetSnooze<WithStreamedUnaryMethod_UpdateSnooze<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSnooze<WithStreamedUnaryMethod_ListSnoozes<WithStreamedUnaryMethod_GetSnooze<WithStreamedUnaryMethod_UpdateSnooze<Service > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2fsnooze_5fservice_2eproto__INCLUDED
