// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/snooze.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fsnooze_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fsnooze_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fsnooze_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class Snooze;
struct SnoozeDefaultTypeInternal;
extern SnoozeDefaultTypeInternal _Snooze_default_instance_;
class Snooze_Criteria;
struct Snooze_CriteriaDefaultTypeInternal;
extern Snooze_CriteriaDefaultTypeInternal _Snooze_Criteria_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::Snooze* Arena::CreateMaybeMessage<::google::monitoring::v3::Snooze>(Arena*);
template<> ::google::monitoring::v3::Snooze_Criteria* Arena::CreateMaybeMessage<::google::monitoring::v3::Snooze_Criteria>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class Snooze_Criteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.Snooze.Criteria) */ {
 public:
  inline Snooze_Criteria() : Snooze_Criteria(nullptr) {}
  ~Snooze_Criteria() override;
  explicit PROTOBUF_CONSTEXPR Snooze_Criteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snooze_Criteria(const Snooze_Criteria& from);
  Snooze_Criteria(Snooze_Criteria&& from) noexcept
    : Snooze_Criteria() {
    *this = ::std::move(from);
  }

  inline Snooze_Criteria& operator=(const Snooze_Criteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snooze_Criteria& operator=(Snooze_Criteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snooze_Criteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snooze_Criteria* internal_default_instance() {
    return reinterpret_cast<const Snooze_Criteria*>(
               &_Snooze_Criteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Snooze_Criteria& a, Snooze_Criteria& b) {
    a.Swap(&b);
  }
  inline void Swap(Snooze_Criteria* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snooze_Criteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snooze_Criteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snooze_Criteria>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snooze_Criteria& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Snooze_Criteria& from) {
    Snooze_Criteria::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snooze_Criteria* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.Snooze.Criteria";
  }
  protected:
  explicit Snooze_Criteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoliciesFieldNumber = 1,
  };
  // repeated string policies = 1 [(.google.api.resource_reference) = {
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  const std::string& policies(int index) const;
  std::string* mutable_policies(int index);
  void set_policies(int index, const std::string& value);
  void set_policies(int index, std::string&& value);
  void set_policies(int index, const char* value);
  void set_policies(int index, const char* value, size_t size);
  std::string* add_policies();
  void add_policies(const std::string& value);
  void add_policies(std::string&& value);
  void add_policies(const char* value);
  void add_policies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& policies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_policies();
  private:
  const std::string& _internal_policies(int index) const;
  std::string* _internal_add_policies();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.Snooze.Criteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> policies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_2eproto;
};
// -------------------------------------------------------------------

class Snooze final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.Snooze) */ {
 public:
  inline Snooze() : Snooze(nullptr) {}
  ~Snooze() override;
  explicit PROTOBUF_CONSTEXPR Snooze(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snooze(const Snooze& from);
  Snooze(Snooze&& from) noexcept
    : Snooze() {
    *this = ::std::move(from);
  }

  inline Snooze& operator=(const Snooze& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snooze& operator=(Snooze&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snooze& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snooze* internal_default_instance() {
    return reinterpret_cast<const Snooze*>(
               &_Snooze_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Snooze& a, Snooze& b) {
    a.Swap(&b);
  }
  inline void Swap(Snooze* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snooze* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snooze* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snooze>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snooze& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Snooze& from) {
    Snooze::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snooze* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.Snooze";
  }
  protected:
  explicit Snooze(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snooze_Criteria Criteria;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 5,
    kCriteriaFieldNumber = 3,
    kIntervalFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.monitoring.v3.Snooze.Criteria criteria = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_criteria() const;
  private:
  bool _internal_has_criteria() const;
  public:
  void clear_criteria();
  const ::google::monitoring::v3::Snooze_Criteria& criteria() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Snooze_Criteria* release_criteria();
  ::google::monitoring::v3::Snooze_Criteria* mutable_criteria();
  void set_allocated_criteria(::google::monitoring::v3::Snooze_Criteria* criteria);
  private:
  const ::google::monitoring::v3::Snooze_Criteria& _internal_criteria() const;
  ::google::monitoring::v3::Snooze_Criteria* _internal_mutable_criteria();
  public:
  void unsafe_arena_set_allocated_criteria(
      ::google::monitoring::v3::Snooze_Criteria* criteria);
  ::google::monitoring::v3::Snooze_Criteria* unsafe_arena_release_criteria();

  // .google.monitoring.v3.TimeInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::google::monitoring::v3::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeInterval* release_interval();
  ::google::monitoring::v3::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::monitoring::v3::TimeInterval* interval);
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_interval() const;
  ::google::monitoring::v3::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::monitoring::v3::TimeInterval* interval);
  ::google::monitoring::v3::TimeInterval* unsafe_arena_release_interval();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.Snooze)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::google::monitoring::v3::Snooze_Criteria* criteria_;
    ::google::monitoring::v3::TimeInterval* interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fsnooze_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Snooze_Criteria

// repeated string policies = 1 [(.google.api.resource_reference) = {
inline int Snooze_Criteria::_internal_policies_size() const {
  return _impl_.policies_.size();
}
inline int Snooze_Criteria::policies_size() const {
  return _internal_policies_size();
}
inline void Snooze_Criteria::clear_policies() {
  _impl_.policies_.Clear();
}
inline std::string* Snooze_Criteria::add_policies() {
  std::string* _s = _internal_add_policies();
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.v3.Snooze.Criteria.policies)
  return _s;
}
inline const std::string& Snooze_Criteria::_internal_policies(int index) const {
  return _impl_.policies_.Get(index);
}
inline const std::string& Snooze_Criteria::policies(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Snooze.Criteria.policies)
  return _internal_policies(index);
}
inline std::string* Snooze_Criteria::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Snooze.Criteria.policies)
  return _impl_.policies_.Mutable(index);
}
inline void Snooze_Criteria::set_policies(int index, const std::string& value) {
  _impl_.policies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::set_policies(int index, std::string&& value) {
  _impl_.policies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::set_policies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.policies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::set_policies(int index, const char* value, size_t size) {
  _impl_.policies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.Snooze.Criteria.policies)
}
inline std::string* Snooze_Criteria::_internal_add_policies() {
  return _impl_.policies_.Add();
}
inline void Snooze_Criteria::add_policies(const std::string& value) {
  _impl_.policies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::add_policies(std::string&& value) {
  _impl_.policies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::add_policies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.policies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.v3.Snooze.Criteria.policies)
}
inline void Snooze_Criteria::add_policies(const char* value, size_t size) {
  _impl_.policies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.v3.Snooze.Criteria.policies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snooze_Criteria::policies() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.Snooze.Criteria.policies)
  return _impl_.policies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snooze_Criteria::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.Snooze.Criteria.policies)
  return &_impl_.policies_;
}

// -------------------------------------------------------------------

// Snooze

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Snooze::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Snooze::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Snooze.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snooze::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Snooze.name)
}
inline std::string* Snooze::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Snooze.name)
  return _s;
}
inline const std::string& Snooze::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Snooze::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Snooze::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Snooze::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Snooze.name)
  return _impl_.name_.Release();
}
inline void Snooze::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Snooze.name)
}

// .google.monitoring.v3.Snooze.Criteria criteria = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool Snooze::_internal_has_criteria() const {
  return this != internal_default_instance() && _impl_.criteria_ != nullptr;
}
inline bool Snooze::has_criteria() const {
  return _internal_has_criteria();
}
inline void Snooze::clear_criteria() {
  if (GetArenaForAllocation() == nullptr && _impl_.criteria_ != nullptr) {
    delete _impl_.criteria_;
  }
  _impl_.criteria_ = nullptr;
}
inline const ::google::monitoring::v3::Snooze_Criteria& Snooze::_internal_criteria() const {
  const ::google::monitoring::v3::Snooze_Criteria* p = _impl_.criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Snooze_Criteria&>(
      ::google::monitoring::v3::_Snooze_Criteria_default_instance_);
}
inline const ::google::monitoring::v3::Snooze_Criteria& Snooze::criteria() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Snooze.criteria)
  return _internal_criteria();
}
inline void Snooze::unsafe_arena_set_allocated_criteria(
    ::google::monitoring::v3::Snooze_Criteria* criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.criteria_);
  }
  _impl_.criteria_ = criteria;
  if (criteria) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.Snooze.criteria)
}
inline ::google::monitoring::v3::Snooze_Criteria* Snooze::release_criteria() {
  
  ::google::monitoring::v3::Snooze_Criteria* temp = _impl_.criteria_;
  _impl_.criteria_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Snooze_Criteria* Snooze::unsafe_arena_release_criteria() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Snooze.criteria)
  
  ::google::monitoring::v3::Snooze_Criteria* temp = _impl_.criteria_;
  _impl_.criteria_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Snooze_Criteria* Snooze::_internal_mutable_criteria() {
  
  if (_impl_.criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Snooze_Criteria>(GetArenaForAllocation());
    _impl_.criteria_ = p;
  }
  return _impl_.criteria_;
}
inline ::google::monitoring::v3::Snooze_Criteria* Snooze::mutable_criteria() {
  ::google::monitoring::v3::Snooze_Criteria* _msg = _internal_mutable_criteria();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Snooze.criteria)
  return _msg;
}
inline void Snooze::set_allocated_criteria(::google::monitoring::v3::Snooze_Criteria* criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.criteria_;
  }
  if (criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(criteria);
    if (message_arena != submessage_arena) {
      criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criteria, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.criteria_ = criteria;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Snooze.criteria)
}

// .google.monitoring.v3.TimeInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool Snooze::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool Snooze::has_interval() const {
  return _internal_has_interval();
}
inline const ::google::monitoring::v3::TimeInterval& Snooze::_internal_interval() const {
  const ::google::monitoring::v3::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeInterval&>(
      ::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline const ::google::monitoring::v3::TimeInterval& Snooze::interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Snooze.interval)
  return _internal_interval();
}
inline void Snooze::unsafe_arena_set_allocated_interval(
    ::google::monitoring::v3::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.Snooze.interval)
}
inline ::google::monitoring::v3::TimeInterval* Snooze::release_interval() {
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* Snooze::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Snooze.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* Snooze::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::monitoring::v3::TimeInterval* Snooze::mutable_interval() {
  ::google::monitoring::v3::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Snooze.interval)
  return _msg;
}
inline void Snooze::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Snooze.interval)
}

// string display_name = 5 [(.google.api.field_behavior) = REQUIRED];
inline void Snooze::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Snooze::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Snooze.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snooze::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Snooze.display_name)
}
inline std::string* Snooze::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Snooze.display_name)
  return _s;
}
inline const std::string& Snooze::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Snooze::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Snooze::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Snooze::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Snooze.display_name)
  return _impl_.display_name_.Release();
}
inline void Snooze::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Snooze.display_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fsnooze_2eproto
