// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/alert.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/mutation_record.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2falert_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2falert_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class AlertPolicy;
class AlertPolicyDefaultTypeInternal;
extern AlertPolicyDefaultTypeInternal _AlertPolicy_default_instance_;
class AlertPolicy_Condition;
class AlertPolicy_ConditionDefaultTypeInternal;
extern AlertPolicy_ConditionDefaultTypeInternal _AlertPolicy_Condition_default_instance_;
class AlertPolicy_Condition_MetricAbsence;
class AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal;
extern AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal _AlertPolicy_Condition_MetricAbsence_default_instance_;
class AlertPolicy_Condition_MetricThreshold;
class AlertPolicy_Condition_MetricThresholdDefaultTypeInternal;
extern AlertPolicy_Condition_MetricThresholdDefaultTypeInternal _AlertPolicy_Condition_MetricThreshold_default_instance_;
class AlertPolicy_Condition_MonitoringQueryLanguageCondition;
class AlertPolicy_Condition_MonitoringQueryLanguageConditionDefaultTypeInternal;
extern AlertPolicy_Condition_MonitoringQueryLanguageConditionDefaultTypeInternal _AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_;
class AlertPolicy_Condition_Trigger;
class AlertPolicy_Condition_TriggerDefaultTypeInternal;
extern AlertPolicy_Condition_TriggerDefaultTypeInternal _AlertPolicy_Condition_Trigger_default_instance_;
class AlertPolicy_Documentation;
class AlertPolicy_DocumentationDefaultTypeInternal;
extern AlertPolicy_DocumentationDefaultTypeInternal _AlertPolicy_Documentation_default_instance_;
class AlertPolicy_UserLabelsEntry_DoNotUse;
class AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal _AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::AlertPolicy* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_Trigger* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Documentation* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

enum AlertPolicy_ConditionCombinerType : int {
  AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED = 0,
  AlertPolicy_ConditionCombinerType_AND = 1,
  AlertPolicy_ConditionCombinerType_OR = 2,
  AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE = 3,
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AlertPolicy_ConditionCombinerType_IsValid(int value);
constexpr AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN = AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
constexpr AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX = AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
constexpr int AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE = AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlertPolicy_ConditionCombinerType_descriptor();
template<typename T>
inline const std::string& AlertPolicy_ConditionCombinerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlertPolicy_ConditionCombinerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlertPolicy_ConditionCombinerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlertPolicy_ConditionCombinerType_descriptor(), enum_t_value);
}
inline bool AlertPolicy_ConditionCombinerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlertPolicy_ConditionCombinerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlertPolicy_ConditionCombinerType>(
    AlertPolicy_ConditionCombinerType_descriptor(), name, value);
}
// ===================================================================

class AlertPolicy_Documentation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Documentation) */ {
 public:
  inline AlertPolicy_Documentation() : AlertPolicy_Documentation(nullptr) {}
  virtual ~AlertPolicy_Documentation();

  AlertPolicy_Documentation(const AlertPolicy_Documentation& from);
  AlertPolicy_Documentation(AlertPolicy_Documentation&& from) noexcept
    : AlertPolicy_Documentation() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Documentation& operator=(const AlertPolicy_Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Documentation& operator=(AlertPolicy_Documentation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Documentation& default_instance();

  static inline const AlertPolicy_Documentation* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Documentation*>(
               &_AlertPolicy_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlertPolicy_Documentation& a, AlertPolicy_Documentation& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Documentation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Documentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Documentation* New() const final {
    return CreateMaybeMessage<AlertPolicy_Documentation>(nullptr);
  }

  AlertPolicy_Documentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Documentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Documentation& from);
  void MergeFrom(const AlertPolicy_Documentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Documentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Documentation";
  }
  protected:
  explicit AlertPolicy_Documentation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string mime_type = 2;
  void clear_mime_type();
  const std::string& mime_type() const;
  void set_mime_type(const std::string& value);
  void set_mime_type(std::string&& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  std::string* mutable_mime_type();
  std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Documentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_Trigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.Trigger) */ {
 public:
  inline AlertPolicy_Condition_Trigger() : AlertPolicy_Condition_Trigger(nullptr) {}
  virtual ~AlertPolicy_Condition_Trigger();

  AlertPolicy_Condition_Trigger(const AlertPolicy_Condition_Trigger& from);
  AlertPolicy_Condition_Trigger(AlertPolicy_Condition_Trigger&& from) noexcept
    : AlertPolicy_Condition_Trigger() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_Trigger& operator=(const AlertPolicy_Condition_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_Trigger& operator=(AlertPolicy_Condition_Trigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Condition_Trigger& default_instance();

  enum TypeCase {
    kCount = 1,
    kPercent = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const AlertPolicy_Condition_Trigger* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_Trigger*>(
               &_AlertPolicy_Condition_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlertPolicy_Condition_Trigger& a, AlertPolicy_Condition_Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_Trigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_Trigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_Trigger* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_Trigger>(nullptr);
  }

  AlertPolicy_Condition_Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_Trigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_Trigger& from);
  void MergeFrom(const AlertPolicy_Condition_Trigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_Trigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.Trigger";
  }
  protected:
  explicit AlertPolicy_Condition_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kPercentFieldNumber = 2,
  };
  // int32 count = 1;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double percent = 2;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  double percent() const;
  void set_percent(double value);
  private:
  double _internal_percent() const;
  void _internal_set_percent(double value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.Trigger)
 private:
  class _Internal;
  void set_has_count();
  void set_has_percent();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 count_;
    double percent_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricThreshold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold) */ {
 public:
  inline AlertPolicy_Condition_MetricThreshold() : AlertPolicy_Condition_MetricThreshold(nullptr) {}
  virtual ~AlertPolicy_Condition_MetricThreshold();

  AlertPolicy_Condition_MetricThreshold(const AlertPolicy_Condition_MetricThreshold& from);
  AlertPolicy_Condition_MetricThreshold(AlertPolicy_Condition_MetricThreshold&& from) noexcept
    : AlertPolicy_Condition_MetricThreshold() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricThreshold& operator=(const AlertPolicy_Condition_MetricThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MetricThreshold& operator=(AlertPolicy_Condition_MetricThreshold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Condition_MetricThreshold& default_instance();

  static inline const AlertPolicy_Condition_MetricThreshold* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricThreshold*>(
               &_AlertPolicy_Condition_MetricThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlertPolicy_Condition_MetricThreshold& a, AlertPolicy_Condition_MetricThreshold& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MetricThreshold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MetricThreshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_MetricThreshold* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricThreshold>(nullptr);
  }

  AlertPolicy_Condition_MetricThreshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricThreshold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_MetricThreshold& from);
  void MergeFrom(const AlertPolicy_Condition_MetricThreshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricThreshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MetricThreshold";
  }
  protected:
  explicit AlertPolicy_Condition_MetricThreshold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationsFieldNumber = 8,
    kDenominatorAggregationsFieldNumber = 10,
    kFilterFieldNumber = 2,
    kDenominatorFilterFieldNumber = 9,
    kDurationFieldNumber = 6,
    kTriggerFieldNumber = 7,
    kThresholdValueFieldNumber = 5,
    kComparisonFieldNumber = 4,
  };
  // repeated .google.monitoring.v3.Aggregation aggregations = 8;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;
  public:
  void clear_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
  int denominator_aggregations_size() const;
  private:
  int _internal_denominator_aggregations_size() const;
  public:
  void clear_denominator_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_denominator_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_denominator_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_denominator_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_denominator_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& denominator_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_denominator_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      denominator_aggregations() const;

  // string filter = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string denominator_filter = 9;
  void clear_denominator_filter();
  const std::string& denominator_filter() const;
  void set_denominator_filter(const std::string& value);
  void set_denominator_filter(std::string&& value);
  void set_denominator_filter(const char* value);
  void set_denominator_filter(const char* value, size_t size);
  std::string* mutable_denominator_filter();
  std::string* release_denominator_filter();
  void set_allocated_denominator_filter(std::string* denominator_filter);
  private:
  const std::string& _internal_denominator_filter() const;
  void _internal_set_denominator_filter(const std::string& value);
  std::string* _internal_mutable_denominator_filter();
  public:

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // double threshold_value = 5;
  void clear_threshold_value();
  double threshold_value() const;
  void set_threshold_value(double value);
  private:
  double _internal_threshold_value() const;
  void _internal_set_threshold_value(double value);
  public:

  // .google.monitoring.v3.ComparisonType comparison = 4;
  void clear_comparison();
  ::google::monitoring::v3::ComparisonType comparison() const;
  void set_comparison(::google::monitoring::v3::ComparisonType value);
  private:
  ::google::monitoring::v3::ComparisonType _internal_comparison() const;
  void _internal_set_comparison(::google::monitoring::v3::ComparisonType value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > denominator_aggregations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denominator_filter_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
  double threshold_value_;
  int comparison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricAbsence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence) */ {
 public:
  inline AlertPolicy_Condition_MetricAbsence() : AlertPolicy_Condition_MetricAbsence(nullptr) {}
  virtual ~AlertPolicy_Condition_MetricAbsence();

  AlertPolicy_Condition_MetricAbsence(const AlertPolicy_Condition_MetricAbsence& from);
  AlertPolicy_Condition_MetricAbsence(AlertPolicy_Condition_MetricAbsence&& from) noexcept
    : AlertPolicy_Condition_MetricAbsence() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricAbsence& operator=(const AlertPolicy_Condition_MetricAbsence& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MetricAbsence& operator=(AlertPolicy_Condition_MetricAbsence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Condition_MetricAbsence& default_instance();

  static inline const AlertPolicy_Condition_MetricAbsence* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricAbsence*>(
               &_AlertPolicy_Condition_MetricAbsence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AlertPolicy_Condition_MetricAbsence& a, AlertPolicy_Condition_MetricAbsence& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MetricAbsence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MetricAbsence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_MetricAbsence* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricAbsence>(nullptr);
  }

  AlertPolicy_Condition_MetricAbsence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricAbsence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_MetricAbsence& from);
  void MergeFrom(const AlertPolicy_Condition_MetricAbsence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricAbsence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MetricAbsence";
  }
  protected:
  explicit AlertPolicy_Condition_MetricAbsence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationsFieldNumber = 5,
    kFilterFieldNumber = 1,
    kDurationFieldNumber = 2,
    kTriggerFieldNumber = 3,
  };
  // repeated .google.monitoring.v3.Aggregation aggregations = 5;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;
  public:
  void clear_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // string filter = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MonitoringQueryLanguageCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition) */ {
 public:
  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition() : AlertPolicy_Condition_MonitoringQueryLanguageCondition(nullptr) {}
  virtual ~AlertPolicy_Condition_MonitoringQueryLanguageCondition();

  AlertPolicy_Condition_MonitoringQueryLanguageCondition(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from);
  AlertPolicy_Condition_MonitoringQueryLanguageCondition(AlertPolicy_Condition_MonitoringQueryLanguageCondition&& from) noexcept
    : AlertPolicy_Condition_MonitoringQueryLanguageCondition() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition& operator=(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition& operator=(AlertPolicy_Condition_MonitoringQueryLanguageCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Condition_MonitoringQueryLanguageCondition& default_instance();

  static inline const AlertPolicy_Condition_MonitoringQueryLanguageCondition* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MonitoringQueryLanguageCondition*>(
               &_AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AlertPolicy_Condition_MonitoringQueryLanguageCondition& a, AlertPolicy_Condition_MonitoringQueryLanguageCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MonitoringQueryLanguageCondition>(nullptr);
  }

  AlertPolicy_Condition_MonitoringQueryLanguageCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MonitoringQueryLanguageCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from);
  void MergeFrom(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition";
  }
  protected:
  explicit AlertPolicy_Condition_MonitoringQueryLanguageCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kDurationFieldNumber = 2,
    kTriggerFieldNumber = 3,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition) */ {
 public:
  inline AlertPolicy_Condition() : AlertPolicy_Condition(nullptr) {}
  virtual ~AlertPolicy_Condition();

  AlertPolicy_Condition(const AlertPolicy_Condition& from);
  AlertPolicy_Condition(AlertPolicy_Condition&& from) noexcept
    : AlertPolicy_Condition() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition& operator=(const AlertPolicy_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition& operator=(AlertPolicy_Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy_Condition& default_instance();

  enum ConditionCase {
    kConditionThreshold = 1,
    kConditionAbsent = 2,
    kConditionMonitoringQueryLanguage = 19,
    CONDITION_NOT_SET = 0,
  };

  static inline const AlertPolicy_Condition* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition*>(
               &_AlertPolicy_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AlertPolicy_Condition& a, AlertPolicy_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition>(nullptr);
  }

  AlertPolicy_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition& from);
  void MergeFrom(const AlertPolicy_Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition";
  }
  protected:
  explicit AlertPolicy_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Condition_Trigger Trigger;
  typedef AlertPolicy_Condition_MetricThreshold MetricThreshold;
  typedef AlertPolicy_Condition_MetricAbsence MetricAbsence;
  typedef AlertPolicy_Condition_MonitoringQueryLanguageCondition MonitoringQueryLanguageCondition;

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 6,
    kNameFieldNumber = 12,
    kConditionThresholdFieldNumber = 1,
    kConditionAbsentFieldNumber = 2,
    kConditionMonitoringQueryLanguageFieldNumber = 19,
  };
  // string display_name = 6;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string name = 12;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
  bool has_condition_threshold() const;
  private:
  bool _internal_has_condition_threshold() const;
  public:
  void clear_condition_threshold();
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& condition_threshold() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* release_condition_threshold();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* mutable_condition_threshold();
  void set_allocated_condition_threshold(::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& _internal_condition_threshold() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* _internal_mutable_condition_threshold();
  public:
  void unsafe_arena_set_allocated_condition_threshold(
      ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold);
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* unsafe_arena_release_condition_threshold();

  // .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
  bool has_condition_absent() const;
  private:
  bool _internal_has_condition_absent() const;
  public:
  void clear_condition_absent();
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& condition_absent() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* release_condition_absent();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* mutable_condition_absent();
  void set_allocated_condition_absent(::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& _internal_condition_absent() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* _internal_mutable_condition_absent();
  public:
  void unsafe_arena_set_allocated_condition_absent(
      ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent);
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* unsafe_arena_release_condition_absent();

  // .google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition condition_monitoring_query_language = 19;
  bool has_condition_monitoring_query_language() const;
  private:
  bool _internal_has_condition_monitoring_query_language() const;
  public:
  void clear_condition_monitoring_query_language();
  const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& condition_monitoring_query_language() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* release_condition_monitoring_query_language();
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* mutable_condition_monitoring_query_language();
  void set_allocated_condition_monitoring_query_language(::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& _internal_condition_monitoring_query_language() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* _internal_mutable_condition_monitoring_query_language();
  public:
  void unsafe_arena_set_allocated_condition_monitoring_query_language(
      ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language);
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* unsafe_arena_release_condition_monitoring_query_language();

  void clear_condition();
  ConditionCase condition_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition)
 private:
  class _Internal;
  void set_has_condition_threshold();
  void set_has_condition_absent();
  void set_has_condition_monitoring_query_language();

  inline bool has_condition() const;
  inline void clear_has_condition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ConditionUnion {
    ConditionUnion() {}
    ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold_;
    ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent_;
    ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language_;
  } condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_UserLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AlertPolicy_UserLabelsEntry_DoNotUse();
  explicit AlertPolicy_UserLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlertPolicy_UserLabelsEntry_DoNotUse& other);
  static const AlertPolicy_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlertPolicy_UserLabelsEntry_DoNotUse*>(&_AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.UserLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.UserLabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class AlertPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy) */ {
 public:
  inline AlertPolicy() : AlertPolicy(nullptr) {}
  virtual ~AlertPolicy();

  AlertPolicy(const AlertPolicy& from);
  AlertPolicy(AlertPolicy&& from) noexcept
    : AlertPolicy() {
    *this = ::std::move(from);
  }

  inline AlertPolicy& operator=(const AlertPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy& operator=(AlertPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlertPolicy& default_instance();

  static inline const AlertPolicy* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy*>(
               &_AlertPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AlertPolicy& a, AlertPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy* New() const final {
    return CreateMaybeMessage<AlertPolicy>(nullptr);
  }

  AlertPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlertPolicy& from);
  void MergeFrom(const AlertPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy";
  }
  protected:
  explicit AlertPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto);
    return ::descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Documentation Documentation;
  typedef AlertPolicy_Condition Condition;

  typedef AlertPolicy_ConditionCombinerType ConditionCombinerType;
  static constexpr ConditionCombinerType COMBINE_UNSPECIFIED =
    AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
  static constexpr ConditionCombinerType AND =
    AlertPolicy_ConditionCombinerType_AND;
  static constexpr ConditionCombinerType OR =
    AlertPolicy_ConditionCombinerType_OR;
  static constexpr ConditionCombinerType AND_WITH_MATCHING_RESOURCE =
    AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
  static inline bool ConditionCombinerType_IsValid(int value) {
    return AlertPolicy_ConditionCombinerType_IsValid(value);
  }
  static constexpr ConditionCombinerType ConditionCombinerType_MIN =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN;
  static constexpr ConditionCombinerType ConditionCombinerType_MAX =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX;
  static constexpr int ConditionCombinerType_ARRAYSIZE =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionCombinerType_descriptor() {
    return AlertPolicy_ConditionCombinerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionCombinerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionCombinerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionCombinerType_Name.");
    return AlertPolicy_ConditionCombinerType_Name(enum_t_value);
  }
  static inline bool ConditionCombinerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConditionCombinerType* value) {
    return AlertPolicy_ConditionCombinerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 12,
    kNotificationChannelsFieldNumber = 14,
    kUserLabelsFieldNumber = 16,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kCreationRecordFieldNumber = 10,
    kMutationRecordFieldNumber = 11,
    kDocumentationFieldNumber = 13,
    kEnabledFieldNumber = 17,
    kValidityFieldNumber = 18,
    kCombinerFieldNumber = 6,
  };
  // repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::google::monitoring::v3::AlertPolicy_Condition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
      mutable_conditions();
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition& _internal_conditions(int index) const;
  ::google::monitoring::v3::AlertPolicy_Condition* _internal_add_conditions();
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition& conditions(int index) const;
  ::google::monitoring::v3::AlertPolicy_Condition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
      conditions() const;

  // repeated string notification_channels = 14;
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const std::string& value);
  void set_notification_channels(int index, std::string&& value);
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  std::string* add_notification_channels();
  void add_notification_channels(const std::string& value);
  void add_notification_channels(std::string&& value);
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_channels();
  private:
  const std::string& _internal_notification_channels(int index) const;
  std::string* _internal_add_notification_channels();
  public:

  // map<string, string> user_labels = 16;
  int user_labels_size() const;
  private:
  int _internal_user_labels_size() const;
  public:
  void clear_user_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_user_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_user_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.monitoring.v3.MutationRecord creation_record = 10;
  bool has_creation_record() const;
  private:
  bool _internal_has_creation_record() const;
  public:
  void clear_creation_record();
  const ::google::monitoring::v3::MutationRecord& creation_record() const;
  ::google::monitoring::v3::MutationRecord* release_creation_record();
  ::google::monitoring::v3::MutationRecord* mutable_creation_record();
  void set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record);
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_creation_record() const;
  ::google::monitoring::v3::MutationRecord* _internal_mutable_creation_record();
  public:
  void unsafe_arena_set_allocated_creation_record(
      ::google::monitoring::v3::MutationRecord* creation_record);
  ::google::monitoring::v3::MutationRecord* unsafe_arena_release_creation_record();

  // .google.monitoring.v3.MutationRecord mutation_record = 11;
  bool has_mutation_record() const;
  private:
  bool _internal_has_mutation_record() const;
  public:
  void clear_mutation_record();
  const ::google::monitoring::v3::MutationRecord& mutation_record() const;
  ::google::monitoring::v3::MutationRecord* release_mutation_record();
  ::google::monitoring::v3::MutationRecord* mutable_mutation_record();
  void set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record);
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_mutation_record() const;
  ::google::monitoring::v3::MutationRecord* _internal_mutable_mutation_record();
  public:
  void unsafe_arena_set_allocated_mutation_record(
      ::google::monitoring::v3::MutationRecord* mutation_record);
  ::google::monitoring::v3::MutationRecord* unsafe_arena_release_mutation_record();

  // .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
  bool has_documentation() const;
  private:
  bool _internal_has_documentation() const;
  public:
  void clear_documentation();
  const ::google::monitoring::v3::AlertPolicy_Documentation& documentation() const;
  ::google::monitoring::v3::AlertPolicy_Documentation* release_documentation();
  ::google::monitoring::v3::AlertPolicy_Documentation* mutable_documentation();
  void set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation);
  private:
  const ::google::monitoring::v3::AlertPolicy_Documentation& _internal_documentation() const;
  ::google::monitoring::v3::AlertPolicy_Documentation* _internal_mutable_documentation();
  public:
  void unsafe_arena_set_allocated_documentation(
      ::google::monitoring::v3::AlertPolicy_Documentation* documentation);
  ::google::monitoring::v3::AlertPolicy_Documentation* unsafe_arena_release_documentation();

  // .google.protobuf.BoolValue enabled = 17;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const PROTOBUF_NAMESPACE_ID::BoolValue& enabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_enabled();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enabled();
  void set_allocated_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enabled();

  // .google.rpc.Status validity = 18;
  bool has_validity() const;
  private:
  bool _internal_has_validity() const;
  public:
  void clear_validity();
  const ::google::rpc::Status& validity() const;
  ::google::rpc::Status* release_validity();
  ::google::rpc::Status* mutable_validity();
  void set_allocated_validity(::google::rpc::Status* validity);
  private:
  const ::google::rpc::Status& _internal_validity() const;
  ::google::rpc::Status* _internal_mutable_validity();
  public:
  void unsafe_arena_set_allocated_validity(
      ::google::rpc::Status* validity);
  ::google::rpc::Status* unsafe_arena_release_validity();

  // .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
  void clear_combiner();
  ::google::monitoring::v3::AlertPolicy_ConditionCombinerType combiner() const;
  void set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value);
  private:
  ::google::monitoring::v3::AlertPolicy_ConditionCombinerType _internal_combiner() const;
  void _internal_set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition > conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AlertPolicy_UserLabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> user_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::google::monitoring::v3::MutationRecord* creation_record_;
  ::google::monitoring::v3::MutationRecord* mutation_record_;
  ::google::monitoring::v3::AlertPolicy_Documentation* documentation_;
  PROTOBUF_NAMESPACE_ID::BoolValue* enabled_;
  ::google::rpc::Status* validity_;
  int combiner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlertPolicy_Documentation

// string content = 1;
inline void AlertPolicy_Documentation::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Documentation::content() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.content)
  return _internal_content();
}
inline void AlertPolicy_Documentation::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline std::string* AlertPolicy_Documentation::mutable_content() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.content)
  return _internal_mutable_content();
}
inline const std::string& AlertPolicy_Documentation::_internal_content() const {
  return content_.Get();
}
inline void AlertPolicy_Documentation::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Documentation::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline void AlertPolicy_Documentation::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline void AlertPolicy_Documentation::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline std::string* AlertPolicy_Documentation::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Documentation::release_content() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Documentation::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.content)
}

// string mime_type = 2;
inline void AlertPolicy_Documentation::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Documentation::mime_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return _internal_mime_type();
}
inline void AlertPolicy_Documentation::set_mime_type(const std::string& value) {
  _internal_set_mime_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline std::string* AlertPolicy_Documentation::mutable_mime_type() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return _internal_mutable_mime_type();
}
inline const std::string& AlertPolicy_Documentation::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void AlertPolicy_Documentation::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Documentation::set_mime_type(std::string&& value) {
  
  mime_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline void AlertPolicy_Documentation::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline void AlertPolicy_Documentation::set_mime_type(const char* value,
    size_t size) {
  
  mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline std::string* AlertPolicy_Documentation::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Documentation::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return mime_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Documentation::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_Trigger

// int32 count = 1;
inline bool AlertPolicy_Condition_Trigger::_internal_has_count() const {
  return type_case() == kCount;
}
inline void AlertPolicy_Condition_Trigger::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void AlertPolicy_Condition_Trigger::clear_count() {
  if (_internal_has_count()) {
    type_.count_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlertPolicy_Condition_Trigger::_internal_count() const {
  if (_internal_has_count()) {
    return type_.count_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_count()) {
    clear_type();
    set_has_count();
  }
  type_.count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlertPolicy_Condition_Trigger::count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
  return _internal_count();
}
inline void AlertPolicy_Condition_Trigger::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
}

// double percent = 2;
inline bool AlertPolicy_Condition_Trigger::_internal_has_percent() const {
  return type_case() == kPercent;
}
inline void AlertPolicy_Condition_Trigger::set_has_percent() {
  _oneof_case_[0] = kPercent;
}
inline void AlertPolicy_Condition_Trigger::clear_percent() {
  if (_internal_has_percent()) {
    type_.percent_ = 0;
    clear_has_type();
  }
}
inline double AlertPolicy_Condition_Trigger::_internal_percent() const {
  if (_internal_has_percent()) {
    return type_.percent_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::_internal_set_percent(double value) {
  if (!_internal_has_percent()) {
    clear_type();
    set_has_percent();
  }
  type_.percent_ = value;
}
inline double AlertPolicy_Condition_Trigger::percent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
  return _internal_percent();
}
inline void AlertPolicy_Condition_Trigger::set_percent(double value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
}

inline bool AlertPolicy_Condition_Trigger::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AlertPolicy_Condition_Trigger::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AlertPolicy_Condition_Trigger::TypeCase AlertPolicy_Condition_Trigger::type_case() const {
  return AlertPolicy_Condition_Trigger::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricThreshold

// string filter = 2 [(.google.api.field_behavior) = REQUIRED];
inline void AlertPolicy_Condition_MetricThreshold::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return _internal_filter();
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return _internal_mutable_filter();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::_internal_filter() const {
  return filter_.Get();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 8;
inline int AlertPolicy_Condition_MetricThreshold::_internal_aggregations_size() const {
  return aggregations_.size();
}
inline int AlertPolicy_Condition_MetricThreshold::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return &aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::_internal_aggregations(int index) const {
  return aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _internal_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::_internal_add_aggregations() {
  return aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _internal_add_aggregations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_;
}

// string denominator_filter = 9;
inline void AlertPolicy_Condition_MetricThreshold::clear_denominator_filter() {
  denominator_filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::denominator_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return _internal_denominator_filter();
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const std::string& value) {
  _internal_set_denominator_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::mutable_denominator_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return _internal_mutable_denominator_filter();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::_internal_denominator_filter() const {
  return denominator_filter_.Get();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_denominator_filter(const std::string& value) {
  
  denominator_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(std::string&& value) {
  
  denominator_filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denominator_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const char* value,
    size_t size) {
  
  denominator_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::_internal_mutable_denominator_filter() {
  
  return denominator_filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::release_denominator_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return denominator_filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_denominator_filter(std::string* denominator_filter) {
  if (denominator_filter != nullptr) {
    
  } else {
    
  }
  denominator_filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denominator_filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}

// repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
inline int AlertPolicy_Condition_MetricThreshold::_internal_denominator_aggregations_size() const {
  return denominator_aggregations_.size();
}
inline int AlertPolicy_Condition_MetricThreshold::denominator_aggregations_size() const {
  return _internal_denominator_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return &denominator_aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::_internal_denominator_aggregations(int index) const {
  return denominator_aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::denominator_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _internal_denominator_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::_internal_add_denominator_aggregations() {
  return denominator_aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_denominator_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _internal_add_denominator_aggregations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::denominator_aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_;
}

// .google.monitoring.v3.ComparisonType comparison = 4;
inline void AlertPolicy_Condition_MetricThreshold::clear_comparison() {
  comparison_ = 0;
}
inline ::google::monitoring::v3::ComparisonType AlertPolicy_Condition_MetricThreshold::_internal_comparison() const {
  return static_cast< ::google::monitoring::v3::ComparisonType >(comparison_);
}
inline ::google::monitoring::v3::ComparisonType AlertPolicy_Condition_MetricThreshold::comparison() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
  return _internal_comparison();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_comparison(::google::monitoring::v3::ComparisonType value) {
  
  comparison_ = value;
}
inline void AlertPolicy_Condition_MetricThreshold::set_comparison(::google::monitoring::v3::ComparisonType value) {
  _internal_set_comparison(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
}

// double threshold_value = 5;
inline void AlertPolicy_Condition_MetricThreshold::clear_threshold_value() {
  threshold_value_ = 0;
}
inline double AlertPolicy_Condition_MetricThreshold::_internal_threshold_value() const {
  return threshold_value_;
}
inline double AlertPolicy_Condition_MetricThreshold::threshold_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
  return _internal_threshold_value();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_threshold_value(double value) {
  
  threshold_value_ = value;
}
inline void AlertPolicy_Condition_MetricThreshold::set_threshold_value(double value) {
  _internal_set_threshold_value(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
}

// .google.protobuf.Duration duration = 6;
inline bool AlertPolicy_Condition_MetricThreshold::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricThreshold::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricThreshold::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricThreshold::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MetricThreshold::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return _internal_mutable_duration();
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
inline bool AlertPolicy_Condition_MetricThreshold::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricThreshold::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MetricThreshold::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MetricThreshold::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::_internal_mutable_trigger() {
  
  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return _internal_mutable_trigger();
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricAbsence

// string filter = 1 [(.google.api.field_behavior) = REQUIRED];
inline void AlertPolicy_Condition_MetricAbsence::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricAbsence::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return _internal_filter();
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline std::string* AlertPolicy_Condition_MetricAbsence::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return _internal_mutable_filter();
}
inline const std::string& AlertPolicy_Condition_MetricAbsence::_internal_filter() const {
  return filter_.Get();
}
inline void AlertPolicy_Condition_MetricAbsence::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline std::string* AlertPolicy_Condition_MetricAbsence::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition_MetricAbsence::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 5;
inline int AlertPolicy_Condition_MetricAbsence::_internal_aggregations_size() const {
  return aggregations_.size();
}
inline int AlertPolicy_Condition_MetricAbsence::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricAbsence::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return &aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricAbsence::_internal_aggregations(int index) const {
  return aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricAbsence::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _internal_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::_internal_add_aggregations() {
  return aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::add_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _internal_add_aggregations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricAbsence::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_;
}

// .google.protobuf.Duration duration = 2;
inline bool AlertPolicy_Condition_MetricAbsence::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricAbsence::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricAbsence::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricAbsence::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MetricAbsence::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return _internal_mutable_duration();
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
inline bool AlertPolicy_Condition_MetricAbsence::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricAbsence::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MetricAbsence::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MetricAbsence::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::_internal_mutable_trigger() {
  
  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return _internal_mutable_trigger();
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_MonitoringQueryLanguageCondition

// string query = 1;
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MonitoringQueryLanguageCondition::query() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return _internal_query();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_query() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return _internal_mutable_query();
}
inline const std::string& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_query() const {
  return query_.Get();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_query() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}

// .google.protobuf.Duration duration = 2;
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MonitoringQueryLanguageCondition::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  return _internal_mutable_duration();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MonitoringQueryLanguageCondition::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_trigger() {
  
  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  return _internal_mutable_trigger();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition

// string name = 12;
inline void AlertPolicy_Condition::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.name)
  return _internal_name();
}
inline void AlertPolicy_Condition::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline std::string* AlertPolicy_Condition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.name)
  return _internal_mutable_name();
}
inline const std::string& AlertPolicy_Condition::_internal_name() const {
  return name_.Get();
}
inline void AlertPolicy_Condition::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline void AlertPolicy_Condition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline void AlertPolicy_Condition::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline std::string* AlertPolicy_Condition::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.name)
}

// string display_name = 6;
inline void AlertPolicy_Condition::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return _internal_display_name();
}
inline void AlertPolicy_Condition::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline std::string* AlertPolicy_Condition::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& AlertPolicy_Condition::_internal_display_name() const {
  return display_name_.Get();
}
inline void AlertPolicy_Condition::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy_Condition::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline void AlertPolicy_Condition::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline void AlertPolicy_Condition::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline std::string* AlertPolicy_Condition::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy_Condition::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy_Condition::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.display_name)
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
inline bool AlertPolicy_Condition::_internal_has_condition_threshold() const {
  return condition_case() == kConditionThreshold;
}
inline bool AlertPolicy_Condition::has_condition_threshold() const {
  return _internal_has_condition_threshold();
}
inline void AlertPolicy_Condition::set_has_condition_threshold() {
  _oneof_case_[0] = kConditionThreshold;
}
inline void AlertPolicy_Condition::clear_condition_threshold() {
  if (_internal_has_condition_threshold()) {
    if (GetArena() == nullptr) {
      delete condition_.condition_threshold_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::release_condition_threshold() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  if (_internal_has_condition_threshold()) {
    clear_has_condition();
      ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* temp = condition_.condition_threshold_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    condition_.condition_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::_internal_condition_threshold() const {
  return _internal_has_condition_threshold()
      ? *condition_.condition_threshold_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold&>(::google::monitoring::v3::_AlertPolicy_Condition_MetricThreshold_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::condition_threshold() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return _internal_condition_threshold();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::unsafe_arena_release_condition_threshold() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  if (_internal_has_condition_threshold()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* temp = condition_.condition_threshold_;
    condition_.condition_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_threshold(::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold) {
  clear_condition();
  if (condition_threshold) {
    set_has_condition_threshold();
    condition_.condition_threshold_ = condition_threshold;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::_internal_mutable_condition_threshold() {
  if (!_internal_has_condition_threshold()) {
    clear_condition();
    set_has_condition_threshold();
    condition_.condition_threshold_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold >(GetArena());
  }
  return condition_.condition_threshold_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::mutable_condition_threshold() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return _internal_mutable_condition_threshold();
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
inline bool AlertPolicy_Condition::_internal_has_condition_absent() const {
  return condition_case() == kConditionAbsent;
}
inline bool AlertPolicy_Condition::has_condition_absent() const {
  return _internal_has_condition_absent();
}
inline void AlertPolicy_Condition::set_has_condition_absent() {
  _oneof_case_[0] = kConditionAbsent;
}
inline void AlertPolicy_Condition::clear_condition_absent() {
  if (_internal_has_condition_absent()) {
    if (GetArena() == nullptr) {
      delete condition_.condition_absent_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::release_condition_absent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  if (_internal_has_condition_absent()) {
    clear_has_condition();
      ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* temp = condition_.condition_absent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    condition_.condition_absent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::_internal_condition_absent() const {
  return _internal_has_condition_absent()
      ? *condition_.condition_absent_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence&>(::google::monitoring::v3::_AlertPolicy_Condition_MetricAbsence_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::condition_absent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return _internal_condition_absent();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::unsafe_arena_release_condition_absent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  if (_internal_has_condition_absent()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* temp = condition_.condition_absent_;
    condition_.condition_absent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_absent(::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent) {
  clear_condition();
  if (condition_absent) {
    set_has_condition_absent();
    condition_.condition_absent_ = condition_absent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::_internal_mutable_condition_absent() {
  if (!_internal_has_condition_absent()) {
    clear_condition();
    set_has_condition_absent();
    condition_.condition_absent_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence >(GetArena());
  }
  return condition_.condition_absent_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::mutable_condition_absent() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return _internal_mutable_condition_absent();
}

// .google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition condition_monitoring_query_language = 19;
inline bool AlertPolicy_Condition::_internal_has_condition_monitoring_query_language() const {
  return condition_case() == kConditionMonitoringQueryLanguage;
}
inline bool AlertPolicy_Condition::has_condition_monitoring_query_language() const {
  return _internal_has_condition_monitoring_query_language();
}
inline void AlertPolicy_Condition::set_has_condition_monitoring_query_language() {
  _oneof_case_[0] = kConditionMonitoringQueryLanguage;
}
inline void AlertPolicy_Condition::clear_condition_monitoring_query_language() {
  if (_internal_has_condition_monitoring_query_language()) {
    if (GetArena() == nullptr) {
      delete condition_.condition_monitoring_query_language_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::release_condition_monitoring_query_language() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  if (_internal_has_condition_monitoring_query_language()) {
    clear_has_condition();
      ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* temp = condition_.condition_monitoring_query_language_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    condition_.condition_monitoring_query_language_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& AlertPolicy_Condition::_internal_condition_monitoring_query_language() const {
  return _internal_has_condition_monitoring_query_language()
      ? *condition_.condition_monitoring_query_language_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition&>(::google::monitoring::v3::_AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& AlertPolicy_Condition::condition_monitoring_query_language() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  return _internal_condition_monitoring_query_language();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::unsafe_arena_release_condition_monitoring_query_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  if (_internal_has_condition_monitoring_query_language()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* temp = condition_.condition_monitoring_query_language_;
    condition_.condition_monitoring_query_language_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_monitoring_query_language(::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language) {
  clear_condition();
  if (condition_monitoring_query_language) {
    set_has_condition_monitoring_query_language();
    condition_.condition_monitoring_query_language_ = condition_monitoring_query_language;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::_internal_mutable_condition_monitoring_query_language() {
  if (!_internal_has_condition_monitoring_query_language()) {
    clear_condition();
    set_has_condition_monitoring_query_language();
    condition_.condition_monitoring_query_language_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition >(GetArena());
  }
  return condition_.condition_monitoring_query_language_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::mutable_condition_monitoring_query_language() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  return _internal_mutable_condition_monitoring_query_language();
}

inline bool AlertPolicy_Condition::has_condition() const {
  return condition_case() != CONDITION_NOT_SET;
}
inline void AlertPolicy_Condition::clear_has_condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline AlertPolicy_Condition::ConditionCase AlertPolicy_Condition::condition_case() const {
  return AlertPolicy_Condition::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlertPolicy

// string name = 1;
inline void AlertPolicy::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AlertPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.name)
  return _internal_name();
}
inline void AlertPolicy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.name)
}
inline std::string* AlertPolicy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.name)
  return _internal_mutable_name();
}
inline const std::string& AlertPolicy::_internal_name() const {
  return name_.Get();
}
inline void AlertPolicy::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.name)
}
inline void AlertPolicy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.name)
}
inline void AlertPolicy::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.name)
}
inline std::string* AlertPolicy::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.name)
}

// string display_name = 2;
inline void AlertPolicy::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& AlertPolicy::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.display_name)
  return _internal_display_name();
}
inline void AlertPolicy::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.display_name)
}
inline std::string* AlertPolicy::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& AlertPolicy::_internal_display_name() const {
  return display_name_.Get();
}
inline void AlertPolicy::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlertPolicy::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.display_name)
}
inline void AlertPolicy::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.display_name)
}
inline void AlertPolicy::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.display_name)
}
inline std::string* AlertPolicy::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlertPolicy::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlertPolicy::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.display_name)
}

// .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
inline bool AlertPolicy::_internal_has_documentation() const {
  return this != internal_default_instance() && documentation_ != nullptr;
}
inline bool AlertPolicy::has_documentation() const {
  return _internal_has_documentation();
}
inline void AlertPolicy::clear_documentation() {
  if (GetArena() == nullptr && documentation_ != nullptr) {
    delete documentation_;
  }
  documentation_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::_internal_documentation() const {
  const ::google::monitoring::v3::AlertPolicy_Documentation* p = documentation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Documentation&>(
      ::google::monitoring::v3::_AlertPolicy_Documentation_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::documentation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.documentation)
  return _internal_documentation();
}
inline void AlertPolicy::unsafe_arena_set_allocated_documentation(
    ::google::monitoring::v3::AlertPolicy_Documentation* documentation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(documentation_);
  }
  documentation_ = documentation;
  if (documentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.documentation)
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::release_documentation() {
  
  ::google::monitoring::v3::AlertPolicy_Documentation* temp = documentation_;
  documentation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::unsafe_arena_release_documentation() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.documentation)
  
  ::google::monitoring::v3::AlertPolicy_Documentation* temp = documentation_;
  documentation_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::_internal_mutable_documentation() {
  
  if (documentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(GetArena());
    documentation_ = p;
  }
  return documentation_;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::mutable_documentation() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.documentation)
  return _internal_mutable_documentation();
}
inline void AlertPolicy::set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete documentation_;
  }
  if (documentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(documentation);
    if (message_arena != submessage_arena) {
      documentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentation, submessage_arena);
    }
    
  } else {
    
  }
  documentation_ = documentation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.documentation)
}

// map<string, string> user_labels = 16;
inline int AlertPolicy::_internal_user_labels_size() const {
  return user_labels_.size();
}
inline int AlertPolicy::user_labels_size() const {
  return _internal_user_labels_size();
}
inline void AlertPolicy::clear_user_labels() {
  user_labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy::_internal_user_labels() const {
  return user_labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy::user_labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.AlertPolicy.user_labels)
  return _internal_user_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy::_internal_mutable_user_labels() {
  return user_labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.AlertPolicy.user_labels)
  return _internal_mutable_user_labels();
}

// repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
inline int AlertPolicy::_internal_conditions_size() const {
  return conditions_.size();
}
inline int AlertPolicy::conditions_size() const {
  return _internal_conditions_size();
}
inline void AlertPolicy::clear_conditions() {
  conditions_.Clear();
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
AlertPolicy::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.conditions)
  return &conditions_;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition& AlertPolicy::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition& AlertPolicy::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.conditions)
  return _internal_conditions(index);
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::add_conditions() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
AlertPolicy::conditions() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_;
}

// .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
inline void AlertPolicy::clear_combiner() {
  combiner_ = 0;
}
inline ::google::monitoring::v3::AlertPolicy_ConditionCombinerType AlertPolicy::_internal_combiner() const {
  return static_cast< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType >(combiner_);
}
inline ::google::monitoring::v3::AlertPolicy_ConditionCombinerType AlertPolicy::combiner() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.combiner)
  return _internal_combiner();
}
inline void AlertPolicy::_internal_set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value) {
  
  combiner_ = value;
}
inline void AlertPolicy::set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value) {
  _internal_set_combiner(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.combiner)
}

// .google.protobuf.BoolValue enabled = 17;
inline bool AlertPolicy::_internal_has_enabled() const {
  return this != internal_default_instance() && enabled_ != nullptr;
}
inline bool AlertPolicy::has_enabled() const {
  return _internal_has_enabled();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AlertPolicy::_internal_enabled() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = enabled_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue&>(
      PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& AlertPolicy::enabled() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.enabled)
  return _internal_enabled();
}
inline void AlertPolicy::unsafe_arena_set_allocated_enabled(
    PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  enabled_ = enabled;
  if (enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.enabled)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::release_enabled() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = enabled_;
  enabled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.enabled)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::_internal_mutable_enabled() {
  
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    enabled_ = p;
  }
  return enabled_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::mutable_enabled() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.enabled)
  return _internal_mutable_enabled();
}
inline void AlertPolicy::set_allocated_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled)->GetArena();
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.enabled)
}

// .google.rpc.Status validity = 18;
inline bool AlertPolicy::_internal_has_validity() const {
  return this != internal_default_instance() && validity_ != nullptr;
}
inline bool AlertPolicy::has_validity() const {
  return _internal_has_validity();
}
inline const ::google::rpc::Status& AlertPolicy::_internal_validity() const {
  const ::google::rpc::Status* p = validity_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& AlertPolicy::validity() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.validity)
  return _internal_validity();
}
inline void AlertPolicy::unsafe_arena_set_allocated_validity(
    ::google::rpc::Status* validity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validity_);
  }
  validity_ = validity;
  if (validity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.validity)
}
inline ::google::rpc::Status* AlertPolicy::release_validity() {
  
  ::google::rpc::Status* temp = validity_;
  validity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* AlertPolicy::unsafe_arena_release_validity() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.validity)
  
  ::google::rpc::Status* temp = validity_;
  validity_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* AlertPolicy::_internal_mutable_validity() {
  
  if (validity_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    validity_ = p;
  }
  return validity_;
}
inline ::google::rpc::Status* AlertPolicy::mutable_validity() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.validity)
  return _internal_mutable_validity();
}
inline void AlertPolicy::set_allocated_validity(::google::rpc::Status* validity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validity_);
  }
  if (validity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validity)->GetArena();
    if (message_arena != submessage_arena) {
      validity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validity, submessage_arena);
    }
    
  } else {
    
  }
  validity_ = validity;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.validity)
}

// repeated string notification_channels = 14;
inline int AlertPolicy::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int AlertPolicy::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void AlertPolicy::clear_notification_channels() {
  notification_channels_.Clear();
}
inline std::string* AlertPolicy::add_notification_channels() {
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return _internal_add_notification_channels();
}
inline const std::string& AlertPolicy::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const std::string& AlertPolicy::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.notification_channels)
  return _internal_notification_channels(index);
}
inline std::string* AlertPolicy::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_.Mutable(index);
}
inline void AlertPolicy::set_notification_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
  notification_channels_.Mutable(index)->assign(value);
}
inline void AlertPolicy::set_notification_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
  notification_channels_.Mutable(index)->assign(std::move(value));
}
inline void AlertPolicy::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::set_notification_channels(int index, const char* value, size_t size) {
  notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline std::string* AlertPolicy::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline void AlertPolicy::add_notification_channels(const std::string& value) {
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(std::string&& value) {
  notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(const char* value, size_t size) {
  notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlertPolicy::notification_channels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlertPolicy::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return &notification_channels_;
}

// .google.monitoring.v3.MutationRecord creation_record = 10;
inline bool AlertPolicy::_internal_has_creation_record() const {
  return this != internal_default_instance() && creation_record_ != nullptr;
}
inline bool AlertPolicy::has_creation_record() const {
  return _internal_has_creation_record();
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_creation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = creation_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::MutationRecord&>(
      ::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::creation_record() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.creation_record)
  return _internal_creation_record();
}
inline void AlertPolicy::unsafe_arena_set_allocated_creation_record(
    ::google::monitoring::v3::MutationRecord* creation_record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_record_);
  }
  creation_record_ = creation_record;
  if (creation_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.creation_record)
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_creation_record() {
  
  ::google::monitoring::v3::MutationRecord* temp = creation_record_;
  creation_record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::unsafe_arena_release_creation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.creation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = creation_record_;
  creation_record_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::_internal_mutable_creation_record() {
  
  if (creation_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArena());
    creation_record_ = p;
  }
  return creation_record_;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_creation_record() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.creation_record)
  return _internal_mutable_creation_record();
}
inline void AlertPolicy::set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_record_);
  }
  if (creation_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_record)->GetArena();
    if (message_arena != submessage_arena) {
      creation_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_record, submessage_arena);
    }
    
  } else {
    
  }
  creation_record_ = creation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.creation_record)
}

// .google.monitoring.v3.MutationRecord mutation_record = 11;
inline bool AlertPolicy::_internal_has_mutation_record() const {
  return this != internal_default_instance() && mutation_record_ != nullptr;
}
inline bool AlertPolicy::has_mutation_record() const {
  return _internal_has_mutation_record();
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_mutation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = mutation_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::MutationRecord&>(
      ::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::mutation_record() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.mutation_record)
  return _internal_mutation_record();
}
inline void AlertPolicy::unsafe_arena_set_allocated_mutation_record(
    ::google::monitoring::v3::MutationRecord* mutation_record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_record_);
  }
  mutation_record_ = mutation_record;
  if (mutation_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.mutation_record)
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_mutation_record() {
  
  ::google::monitoring::v3::MutationRecord* temp = mutation_record_;
  mutation_record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::unsafe_arena_release_mutation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.mutation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = mutation_record_;
  mutation_record_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::_internal_mutable_mutation_record() {
  
  if (mutation_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArena());
    mutation_record_ = p;
  }
  return mutation_record_;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_mutation_record() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.mutation_record)
  return _internal_mutable_mutation_record();
}
inline void AlertPolicy::set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_record_);
  }
  if (mutation_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_record)->GetArena();
    if (message_arena != submessage_arena) {
      mutation_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation_record, submessage_arena);
    }
    
  } else {
    
  }
  mutation_record_ = mutation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.mutation_record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType>() {
  return ::google::monitoring::v3::AlertPolicy_ConditionCombinerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
