// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/alert.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/mutation_record.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2falert_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2falert_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2falert_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class AlertPolicy;
struct AlertPolicyDefaultTypeInternal;
extern AlertPolicyDefaultTypeInternal _AlertPolicy_default_instance_;
class AlertPolicy_AlertStrategy;
struct AlertPolicy_AlertStrategyDefaultTypeInternal;
extern AlertPolicy_AlertStrategyDefaultTypeInternal _AlertPolicy_AlertStrategy_default_instance_;
class AlertPolicy_AlertStrategy_NotificationRateLimit;
struct AlertPolicy_AlertStrategy_NotificationRateLimitDefaultTypeInternal;
extern AlertPolicy_AlertStrategy_NotificationRateLimitDefaultTypeInternal _AlertPolicy_AlertStrategy_NotificationRateLimit_default_instance_;
class AlertPolicy_Condition;
struct AlertPolicy_ConditionDefaultTypeInternal;
extern AlertPolicy_ConditionDefaultTypeInternal _AlertPolicy_Condition_default_instance_;
class AlertPolicy_Condition_LogMatch;
struct AlertPolicy_Condition_LogMatchDefaultTypeInternal;
extern AlertPolicy_Condition_LogMatchDefaultTypeInternal _AlertPolicy_Condition_LogMatch_default_instance_;
class AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse;
struct AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUseDefaultTypeInternal;
extern AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUseDefaultTypeInternal _AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse_default_instance_;
class AlertPolicy_Condition_MetricAbsence;
struct AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal;
extern AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal _AlertPolicy_Condition_MetricAbsence_default_instance_;
class AlertPolicy_Condition_MetricThreshold;
struct AlertPolicy_Condition_MetricThresholdDefaultTypeInternal;
extern AlertPolicy_Condition_MetricThresholdDefaultTypeInternal _AlertPolicy_Condition_MetricThreshold_default_instance_;
class AlertPolicy_Condition_MonitoringQueryLanguageCondition;
struct AlertPolicy_Condition_MonitoringQueryLanguageConditionDefaultTypeInternal;
extern AlertPolicy_Condition_MonitoringQueryLanguageConditionDefaultTypeInternal _AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_;
class AlertPolicy_Condition_Trigger;
struct AlertPolicy_Condition_TriggerDefaultTypeInternal;
extern AlertPolicy_Condition_TriggerDefaultTypeInternal _AlertPolicy_Condition_Trigger_default_instance_;
class AlertPolicy_Documentation;
struct AlertPolicy_DocumentationDefaultTypeInternal;
extern AlertPolicy_DocumentationDefaultTypeInternal _AlertPolicy_Documentation_default_instance_;
class AlertPolicy_UserLabelsEntry_DoNotUse;
struct AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal _AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::AlertPolicy* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_AlertStrategy* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_AlertStrategy>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_LogMatch>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_Trigger* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Documentation* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

enum AlertPolicy_Condition_EvaluationMissingData : int {
  AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_UNSPECIFIED = 0,
  AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_INACTIVE = 1,
  AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_ACTIVE = 2,
  AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_NO_OP = 3,
  AlertPolicy_Condition_EvaluationMissingData_AlertPolicy_Condition_EvaluationMissingData_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlertPolicy_Condition_EvaluationMissingData_AlertPolicy_Condition_EvaluationMissingData_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlertPolicy_Condition_EvaluationMissingData_IsValid(int value);
constexpr AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_MIN = AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_UNSPECIFIED;
constexpr AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_MAX = AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_NO_OP;
constexpr int AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_ARRAYSIZE = AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlertPolicy_Condition_EvaluationMissingData_descriptor();
template<typename T>
inline const std::string& AlertPolicy_Condition_EvaluationMissingData_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlertPolicy_Condition_EvaluationMissingData>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlertPolicy_Condition_EvaluationMissingData_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlertPolicy_Condition_EvaluationMissingData_descriptor(), enum_t_value);
}
inline bool AlertPolicy_Condition_EvaluationMissingData_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlertPolicy_Condition_EvaluationMissingData* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlertPolicy_Condition_EvaluationMissingData>(
    AlertPolicy_Condition_EvaluationMissingData_descriptor(), name, value);
}
enum AlertPolicy_ConditionCombinerType : int {
  AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED = 0,
  AlertPolicy_ConditionCombinerType_AND = 1,
  AlertPolicy_ConditionCombinerType_OR = 2,
  AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE = 3,
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlertPolicy_ConditionCombinerType_IsValid(int value);
constexpr AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN = AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
constexpr AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX = AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
constexpr int AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE = AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlertPolicy_ConditionCombinerType_descriptor();
template<typename T>
inline const std::string& AlertPolicy_ConditionCombinerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlertPolicy_ConditionCombinerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlertPolicy_ConditionCombinerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlertPolicy_ConditionCombinerType_descriptor(), enum_t_value);
}
inline bool AlertPolicy_ConditionCombinerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlertPolicy_ConditionCombinerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlertPolicy_ConditionCombinerType>(
    AlertPolicy_ConditionCombinerType_descriptor(), name, value);
}
// ===================================================================

class AlertPolicy_Documentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Documentation) */ {
 public:
  inline AlertPolicy_Documentation() : AlertPolicy_Documentation(nullptr) {}
  ~AlertPolicy_Documentation() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Documentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Documentation(const AlertPolicy_Documentation& from);
  AlertPolicy_Documentation(AlertPolicy_Documentation&& from) noexcept
    : AlertPolicy_Documentation() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Documentation& operator=(const AlertPolicy_Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Documentation& operator=(AlertPolicy_Documentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Documentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_Documentation* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Documentation*>(
               &_AlertPolicy_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlertPolicy_Documentation& a, AlertPolicy_Documentation& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Documentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Documentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Documentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Documentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Documentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Documentation& from) {
    AlertPolicy_Documentation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Documentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Documentation";
  }
  protected:
  explicit AlertPolicy_Documentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string mime_type = 2;
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Documentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_Trigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.Trigger) */ {
 public:
  inline AlertPolicy_Condition_Trigger() : AlertPolicy_Condition_Trigger(nullptr) {}
  ~AlertPolicy_Condition_Trigger() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_Trigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition_Trigger(const AlertPolicy_Condition_Trigger& from);
  AlertPolicy_Condition_Trigger(AlertPolicy_Condition_Trigger&& from) noexcept
    : AlertPolicy_Condition_Trigger() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_Trigger& operator=(const AlertPolicy_Condition_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_Trigger& operator=(AlertPolicy_Condition_Trigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition_Trigger& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kCount = 1,
    kPercent = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const AlertPolicy_Condition_Trigger* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_Trigger*>(
               &_AlertPolicy_Condition_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlertPolicy_Condition_Trigger& a, AlertPolicy_Condition_Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_Trigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_Trigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition_Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_Trigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition_Trigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition_Trigger& from) {
    AlertPolicy_Condition_Trigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_Trigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.Trigger";
  }
  protected:
  explicit AlertPolicy_Condition_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kPercentFieldNumber = 2,
  };
  // int32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // double percent = 2;
  bool has_percent() const;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  double percent() const;
  void set_percent(double value);
  private:
  double _internal_percent() const;
  void _internal_set_percent(double value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.Trigger)
 private:
  class _Internal;
  void set_has_count();
  void set_has_percent();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t count_;
      double percent_;
    } type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricThreshold final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold) */ {
 public:
  inline AlertPolicy_Condition_MetricThreshold() : AlertPolicy_Condition_MetricThreshold(nullptr) {}
  ~AlertPolicy_Condition_MetricThreshold() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_MetricThreshold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition_MetricThreshold(const AlertPolicy_Condition_MetricThreshold& from);
  AlertPolicy_Condition_MetricThreshold(AlertPolicy_Condition_MetricThreshold&& from) noexcept
    : AlertPolicy_Condition_MetricThreshold() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricThreshold& operator=(const AlertPolicy_Condition_MetricThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MetricThreshold& operator=(AlertPolicy_Condition_MetricThreshold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition_MetricThreshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_Condition_MetricThreshold* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricThreshold*>(
               &_AlertPolicy_Condition_MetricThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlertPolicy_Condition_MetricThreshold& a, AlertPolicy_Condition_MetricThreshold& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MetricThreshold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MetricThreshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition_MetricThreshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricThreshold>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition_MetricThreshold& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition_MetricThreshold& from) {
    AlertPolicy_Condition_MetricThreshold::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricThreshold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MetricThreshold";
  }
  protected:
  explicit AlertPolicy_Condition_MetricThreshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationsFieldNumber = 8,
    kDenominatorAggregationsFieldNumber = 10,
    kFilterFieldNumber = 2,
    kDenominatorFilterFieldNumber = 9,
    kDurationFieldNumber = 6,
    kTriggerFieldNumber = 7,
    kThresholdValueFieldNumber = 5,
    kComparisonFieldNumber = 4,
    kEvaluationMissingDataFieldNumber = 11,
  };
  // repeated .google.monitoring.v3.Aggregation aggregations = 8;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;
  public:
  void clear_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
  int denominator_aggregations_size() const;
  private:
  int _internal_denominator_aggregations_size() const;
  public:
  void clear_denominator_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_denominator_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_denominator_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_denominator_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_denominator_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& denominator_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_denominator_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      denominator_aggregations() const;

  // string filter = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string denominator_filter = 9;
  void clear_denominator_filter();
  const std::string& denominator_filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_denominator_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_denominator_filter();
  PROTOBUF_NODISCARD std::string* release_denominator_filter();
  void set_allocated_denominator_filter(std::string* denominator_filter);
  private:
  const std::string& _internal_denominator_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denominator_filter(const std::string& value);
  std::string* _internal_mutable_denominator_filter();
  public:

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // double threshold_value = 5;
  void clear_threshold_value();
  double threshold_value() const;
  void set_threshold_value(double value);
  private:
  double _internal_threshold_value() const;
  void _internal_set_threshold_value(double value);
  public:

  // .google.monitoring.v3.ComparisonType comparison = 4;
  void clear_comparison();
  ::google::monitoring::v3::ComparisonType comparison() const;
  void set_comparison(::google::monitoring::v3::ComparisonType value);
  private:
  ::google::monitoring::v3::ComparisonType _internal_comparison() const;
  void _internal_set_comparison(::google::monitoring::v3::ComparisonType value);
  public:

  // .google.monitoring.v3.AlertPolicy.Condition.EvaluationMissingData evaluation_missing_data = 11;
  void clear_evaluation_missing_data();
  ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData evaluation_missing_data() const;
  void set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value);
  private:
  ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData _internal_evaluation_missing_data() const;
  void _internal_set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > denominator_aggregations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denominator_filter_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
    double threshold_value_;
    int comparison_;
    int evaluation_missing_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricAbsence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence) */ {
 public:
  inline AlertPolicy_Condition_MetricAbsence() : AlertPolicy_Condition_MetricAbsence(nullptr) {}
  ~AlertPolicy_Condition_MetricAbsence() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_MetricAbsence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition_MetricAbsence(const AlertPolicy_Condition_MetricAbsence& from);
  AlertPolicy_Condition_MetricAbsence(AlertPolicy_Condition_MetricAbsence&& from) noexcept
    : AlertPolicy_Condition_MetricAbsence() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricAbsence& operator=(const AlertPolicy_Condition_MetricAbsence& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MetricAbsence& operator=(AlertPolicy_Condition_MetricAbsence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition_MetricAbsence& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_Condition_MetricAbsence* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricAbsence*>(
               &_AlertPolicy_Condition_MetricAbsence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AlertPolicy_Condition_MetricAbsence& a, AlertPolicy_Condition_MetricAbsence& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MetricAbsence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MetricAbsence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition_MetricAbsence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricAbsence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition_MetricAbsence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition_MetricAbsence& from) {
    AlertPolicy_Condition_MetricAbsence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricAbsence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MetricAbsence";
  }
  protected:
  explicit AlertPolicy_Condition_MetricAbsence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationsFieldNumber = 5,
    kFilterFieldNumber = 1,
    kDurationFieldNumber = 2,
    kTriggerFieldNumber = 3,
  };
  // repeated .google.monitoring.v3.Aggregation aggregations = 5;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;
  public:
  void clear_aggregations();
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  private:
  const ::google::monitoring::v3::Aggregation& _internal_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* _internal_add_aggregations();
  public:
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // string filter = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse& other);
  static const AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse*>(&_AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.Condition.LogMatch.LabelExtractorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.Condition.LogMatch.LabelExtractorsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};

// -------------------------------------------------------------------

class AlertPolicy_Condition_LogMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.LogMatch) */ {
 public:
  inline AlertPolicy_Condition_LogMatch() : AlertPolicy_Condition_LogMatch(nullptr) {}
  ~AlertPolicy_Condition_LogMatch() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_LogMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition_LogMatch(const AlertPolicy_Condition_LogMatch& from);
  AlertPolicy_Condition_LogMatch(AlertPolicy_Condition_LogMatch&& from) noexcept
    : AlertPolicy_Condition_LogMatch() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_LogMatch& operator=(const AlertPolicy_Condition_LogMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_LogMatch& operator=(AlertPolicy_Condition_LogMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition_LogMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_Condition_LogMatch* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_LogMatch*>(
               &_AlertPolicy_Condition_LogMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AlertPolicy_Condition_LogMatch& a, AlertPolicy_Condition_LogMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_LogMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_LogMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition_LogMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_LogMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition_LogMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition_LogMatch& from) {
    AlertPolicy_Condition_LogMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_LogMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.LogMatch";
  }
  protected:
  explicit AlertPolicy_Condition_LogMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelExtractorsFieldNumber = 2,
    kFilterFieldNumber = 1,
  };
  // map<string, string> label_extractors = 2;
  int label_extractors_size() const;
  private:
  int _internal_label_extractors_size() const;
  public:
  void clear_label_extractors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_label_extractors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_label_extractors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      label_extractors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_label_extractors();

  // string filter = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.LogMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AlertPolicy_Condition_LogMatch_LabelExtractorsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> label_extractors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MonitoringQueryLanguageCondition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition) */ {
 public:
  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition() : AlertPolicy_Condition_MonitoringQueryLanguageCondition(nullptr) {}
  ~AlertPolicy_Condition_MonitoringQueryLanguageCondition() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition_MonitoringQueryLanguageCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition_MonitoringQueryLanguageCondition(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from);
  AlertPolicy_Condition_MonitoringQueryLanguageCondition(AlertPolicy_Condition_MonitoringQueryLanguageCondition&& from) noexcept
    : AlertPolicy_Condition_MonitoringQueryLanguageCondition() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition& operator=(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition_MonitoringQueryLanguageCondition& operator=(AlertPolicy_Condition_MonitoringQueryLanguageCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition_MonitoringQueryLanguageCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_Condition_MonitoringQueryLanguageCondition* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MonitoringQueryLanguageCondition*>(
               &_AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AlertPolicy_Condition_MonitoringQueryLanguageCondition& a, AlertPolicy_Condition_MonitoringQueryLanguageCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition_MonitoringQueryLanguageCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MonitoringQueryLanguageCondition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition_MonitoringQueryLanguageCondition& from) {
    AlertPolicy_Condition_MonitoringQueryLanguageCondition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MonitoringQueryLanguageCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition";
  }
  protected:
  explicit AlertPolicy_Condition_MonitoringQueryLanguageCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kDurationFieldNumber = 2,
    kTriggerFieldNumber = 3,
    kEvaluationMissingDataFieldNumber = 4,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* unsafe_arena_release_trigger();

  // .google.monitoring.v3.AlertPolicy.Condition.EvaluationMissingData evaluation_missing_data = 4;
  void clear_evaluation_missing_data();
  ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData evaluation_missing_data() const;
  void set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value);
  private:
  ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData _internal_evaluation_missing_data() const;
  void _internal_set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
    int evaluation_missing_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition) */ {
 public:
  inline AlertPolicy_Condition() : AlertPolicy_Condition(nullptr) {}
  ~AlertPolicy_Condition() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_Condition(const AlertPolicy_Condition& from);
  AlertPolicy_Condition(AlertPolicy_Condition&& from) noexcept
    : AlertPolicy_Condition() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition& operator=(const AlertPolicy_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_Condition& operator=(AlertPolicy_Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_Condition& default_instance() {
    return *internal_default_instance();
  }
  enum ConditionCase {
    kConditionThreshold = 1,
    kConditionAbsent = 2,
    kConditionMatchedLog = 20,
    kConditionMonitoringQueryLanguage = 19,
    CONDITION_NOT_SET = 0,
  };

  static inline const AlertPolicy_Condition* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition*>(
               &_AlertPolicy_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AlertPolicy_Condition& a, AlertPolicy_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_Condition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_Condition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_Condition& from) {
    AlertPolicy_Condition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.Condition";
  }
  protected:
  explicit AlertPolicy_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Condition_Trigger Trigger;
  typedef AlertPolicy_Condition_MetricThreshold MetricThreshold;
  typedef AlertPolicy_Condition_MetricAbsence MetricAbsence;
  typedef AlertPolicy_Condition_LogMatch LogMatch;
  typedef AlertPolicy_Condition_MonitoringQueryLanguageCondition MonitoringQueryLanguageCondition;

  typedef AlertPolicy_Condition_EvaluationMissingData EvaluationMissingData;
  static constexpr EvaluationMissingData EVALUATION_MISSING_DATA_UNSPECIFIED =
    AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_UNSPECIFIED;
  static constexpr EvaluationMissingData EVALUATION_MISSING_DATA_INACTIVE =
    AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_INACTIVE;
  static constexpr EvaluationMissingData EVALUATION_MISSING_DATA_ACTIVE =
    AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_ACTIVE;
  static constexpr EvaluationMissingData EVALUATION_MISSING_DATA_NO_OP =
    AlertPolicy_Condition_EvaluationMissingData_EVALUATION_MISSING_DATA_NO_OP;
  static inline bool EvaluationMissingData_IsValid(int value) {
    return AlertPolicy_Condition_EvaluationMissingData_IsValid(value);
  }
  static constexpr EvaluationMissingData EvaluationMissingData_MIN =
    AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_MIN;
  static constexpr EvaluationMissingData EvaluationMissingData_MAX =
    AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_MAX;
  static constexpr int EvaluationMissingData_ARRAYSIZE =
    AlertPolicy_Condition_EvaluationMissingData_EvaluationMissingData_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EvaluationMissingData_descriptor() {
    return AlertPolicy_Condition_EvaluationMissingData_descriptor();
  }
  template<typename T>
  static inline const std::string& EvaluationMissingData_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EvaluationMissingData>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EvaluationMissingData_Name.");
    return AlertPolicy_Condition_EvaluationMissingData_Name(enum_t_value);
  }
  static inline bool EvaluationMissingData_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EvaluationMissingData* value) {
    return AlertPolicy_Condition_EvaluationMissingData_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 6,
    kNameFieldNumber = 12,
    kConditionThresholdFieldNumber = 1,
    kConditionAbsentFieldNumber = 2,
    kConditionMatchedLogFieldNumber = 20,
    kConditionMonitoringQueryLanguageFieldNumber = 19,
  };
  // string display_name = 6;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string name = 12;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
  bool has_condition_threshold() const;
  private:
  bool _internal_has_condition_threshold() const;
  public:
  void clear_condition_threshold();
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& condition_threshold() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* release_condition_threshold();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* mutable_condition_threshold();
  void set_allocated_condition_threshold(::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& _internal_condition_threshold() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* _internal_mutable_condition_threshold();
  public:
  void unsafe_arena_set_allocated_condition_threshold(
      ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold);
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* unsafe_arena_release_condition_threshold();

  // .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
  bool has_condition_absent() const;
  private:
  bool _internal_has_condition_absent() const;
  public:
  void clear_condition_absent();
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& condition_absent() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* release_condition_absent();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* mutable_condition_absent();
  void set_allocated_condition_absent(::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& _internal_condition_absent() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* _internal_mutable_condition_absent();
  public:
  void unsafe_arena_set_allocated_condition_absent(
      ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent);
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* unsafe_arena_release_condition_absent();

  // .google.monitoring.v3.AlertPolicy.Condition.LogMatch condition_matched_log = 20;
  bool has_condition_matched_log() const;
  private:
  bool _internal_has_condition_matched_log() const;
  public:
  void clear_condition_matched_log();
  const ::google::monitoring::v3::AlertPolicy_Condition_LogMatch& condition_matched_log() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* release_condition_matched_log();
  ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* mutable_condition_matched_log();
  void set_allocated_condition_matched_log(::google::monitoring::v3::AlertPolicy_Condition_LogMatch* condition_matched_log);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_LogMatch& _internal_condition_matched_log() const;
  ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* _internal_mutable_condition_matched_log();
  public:
  void unsafe_arena_set_allocated_condition_matched_log(
      ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* condition_matched_log);
  ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* unsafe_arena_release_condition_matched_log();

  // .google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition condition_monitoring_query_language = 19;
  bool has_condition_monitoring_query_language() const;
  private:
  bool _internal_has_condition_monitoring_query_language() const;
  public:
  void clear_condition_monitoring_query_language();
  const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& condition_monitoring_query_language() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* release_condition_monitoring_query_language();
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* mutable_condition_monitoring_query_language();
  void set_allocated_condition_monitoring_query_language(::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language);
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& _internal_condition_monitoring_query_language() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* _internal_mutable_condition_monitoring_query_language();
  public:
  void unsafe_arena_set_allocated_condition_monitoring_query_language(
      ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language);
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* unsafe_arena_release_condition_monitoring_query_language();

  void clear_condition();
  ConditionCase condition_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition)
 private:
  class _Internal;
  void set_has_condition_threshold();
  void set_has_condition_absent();
  void set_has_condition_matched_log();
  void set_has_condition_monitoring_query_language();

  inline bool has_condition() const;
  inline void clear_has_condition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ConditionUnion {
      constexpr ConditionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold_;
      ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent_;
      ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* condition_matched_log_;
      ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language_;
    } condition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_AlertStrategy_NotificationRateLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit) */ {
 public:
  inline AlertPolicy_AlertStrategy_NotificationRateLimit() : AlertPolicy_AlertStrategy_NotificationRateLimit(nullptr) {}
  ~AlertPolicy_AlertStrategy_NotificationRateLimit() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_AlertStrategy_NotificationRateLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_AlertStrategy_NotificationRateLimit(const AlertPolicy_AlertStrategy_NotificationRateLimit& from);
  AlertPolicy_AlertStrategy_NotificationRateLimit(AlertPolicy_AlertStrategy_NotificationRateLimit&& from) noexcept
    : AlertPolicy_AlertStrategy_NotificationRateLimit() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_AlertStrategy_NotificationRateLimit& operator=(const AlertPolicy_AlertStrategy_NotificationRateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_AlertStrategy_NotificationRateLimit& operator=(AlertPolicy_AlertStrategy_NotificationRateLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_AlertStrategy_NotificationRateLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_AlertStrategy_NotificationRateLimit* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_AlertStrategy_NotificationRateLimit*>(
               &_AlertPolicy_AlertStrategy_NotificationRateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AlertPolicy_AlertStrategy_NotificationRateLimit& a, AlertPolicy_AlertStrategy_NotificationRateLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_AlertStrategy_NotificationRateLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_AlertStrategy_NotificationRateLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_AlertStrategy_NotificationRateLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_AlertStrategy_NotificationRateLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_AlertStrategy_NotificationRateLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_AlertStrategy_NotificationRateLimit& from) {
    AlertPolicy_AlertStrategy_NotificationRateLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_AlertStrategy_NotificationRateLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit";
  }
  protected:
  explicit AlertPolicy_AlertStrategy_NotificationRateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodFieldNumber = 1,
  };
  // .google.protobuf.Duration period = 1;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::PROTOBUF_NAMESPACE_ID::Duration& period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_period();
  void set_allocated_period(::PROTOBUF_NAMESPACE_ID::Duration* period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_period();
  public:
  void unsafe_arena_set_allocated_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_period();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* period_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_AlertStrategy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.AlertStrategy) */ {
 public:
  inline AlertPolicy_AlertStrategy() : AlertPolicy_AlertStrategy(nullptr) {}
  ~AlertPolicy_AlertStrategy() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy_AlertStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy_AlertStrategy(const AlertPolicy_AlertStrategy& from);
  AlertPolicy_AlertStrategy(AlertPolicy_AlertStrategy&& from) noexcept
    : AlertPolicy_AlertStrategy() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_AlertStrategy& operator=(const AlertPolicy_AlertStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy_AlertStrategy& operator=(AlertPolicy_AlertStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy_AlertStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy_AlertStrategy* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_AlertStrategy*>(
               &_AlertPolicy_AlertStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AlertPolicy_AlertStrategy& a, AlertPolicy_AlertStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy_AlertStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy_AlertStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy_AlertStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy_AlertStrategy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy_AlertStrategy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy_AlertStrategy& from) {
    AlertPolicy_AlertStrategy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_AlertStrategy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy.AlertStrategy";
  }
  protected:
  explicit AlertPolicy_AlertStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertPolicy_AlertStrategy_NotificationRateLimit NotificationRateLimit;

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationRateLimitFieldNumber = 1,
    kAutoCloseFieldNumber = 3,
  };
  // .google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit notification_rate_limit = 1;
  bool has_notification_rate_limit() const;
  private:
  bool _internal_has_notification_rate_limit() const;
  public:
  void clear_notification_rate_limit();
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit& notification_rate_limit() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* release_notification_rate_limit();
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* mutable_notification_rate_limit();
  void set_allocated_notification_rate_limit(::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* notification_rate_limit);
  private:
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit& _internal_notification_rate_limit() const;
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* _internal_mutable_notification_rate_limit();
  public:
  void unsafe_arena_set_allocated_notification_rate_limit(
      ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* notification_rate_limit);
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* unsafe_arena_release_notification_rate_limit();

  // .google.protobuf.Duration auto_close = 3;
  bool has_auto_close() const;
  private:
  bool _internal_has_auto_close() const;
  public:
  void clear_auto_close();
  const ::PROTOBUF_NAMESPACE_ID::Duration& auto_close() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_auto_close();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_auto_close();
  void set_allocated_auto_close(::PROTOBUF_NAMESPACE_ID::Duration* auto_close);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_auto_close() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_auto_close();
  public:
  void unsafe_arena_set_allocated_auto_close(
      ::PROTOBUF_NAMESPACE_ID::Duration* auto_close);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_auto_close();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.AlertStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* notification_rate_limit_;
    ::PROTOBUF_NAMESPACE_ID::Duration* auto_close_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// -------------------------------------------------------------------

class AlertPolicy_UserLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AlertPolicy_UserLabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AlertPolicy_UserLabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AlertPolicy_UserLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlertPolicy_UserLabelsEntry_DoNotUse& other);
  static const AlertPolicy_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlertPolicy_UserLabelsEntry_DoNotUse*>(&_AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.UserLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.monitoring.v3.AlertPolicy.UserLabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};

// -------------------------------------------------------------------

class AlertPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy) */ {
 public:
  inline AlertPolicy() : AlertPolicy(nullptr) {}
  ~AlertPolicy() override;
  explicit PROTOBUF_CONSTEXPR AlertPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlertPolicy(const AlertPolicy& from);
  AlertPolicy(AlertPolicy&& from) noexcept
    : AlertPolicy() {
    *this = ::std::move(from);
  }

  inline AlertPolicy& operator=(const AlertPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlertPolicy& operator=(AlertPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlertPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlertPolicy* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy*>(
               &_AlertPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AlertPolicy& a, AlertPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(AlertPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlertPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlertPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlertPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlertPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlertPolicy& from) {
    AlertPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.AlertPolicy";
  }
  protected:
  explicit AlertPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Documentation Documentation;
  typedef AlertPolicy_Condition Condition;
  typedef AlertPolicy_AlertStrategy AlertStrategy;

  typedef AlertPolicy_ConditionCombinerType ConditionCombinerType;
  static constexpr ConditionCombinerType COMBINE_UNSPECIFIED =
    AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
  static constexpr ConditionCombinerType AND =
    AlertPolicy_ConditionCombinerType_AND;
  static constexpr ConditionCombinerType OR =
    AlertPolicy_ConditionCombinerType_OR;
  static constexpr ConditionCombinerType AND_WITH_MATCHING_RESOURCE =
    AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
  static inline bool ConditionCombinerType_IsValid(int value) {
    return AlertPolicy_ConditionCombinerType_IsValid(value);
  }
  static constexpr ConditionCombinerType ConditionCombinerType_MIN =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN;
  static constexpr ConditionCombinerType ConditionCombinerType_MAX =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX;
  static constexpr int ConditionCombinerType_ARRAYSIZE =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionCombinerType_descriptor() {
    return AlertPolicy_ConditionCombinerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionCombinerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionCombinerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionCombinerType_Name.");
    return AlertPolicy_ConditionCombinerType_Name(enum_t_value);
  }
  static inline bool ConditionCombinerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConditionCombinerType* value) {
    return AlertPolicy_ConditionCombinerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 12,
    kNotificationChannelsFieldNumber = 14,
    kUserLabelsFieldNumber = 16,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kCreationRecordFieldNumber = 10,
    kMutationRecordFieldNumber = 11,
    kDocumentationFieldNumber = 13,
    kEnabledFieldNumber = 17,
    kValidityFieldNumber = 18,
    kAlertStrategyFieldNumber = 21,
    kCombinerFieldNumber = 6,
  };
  // repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::google::monitoring::v3::AlertPolicy_Condition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
      mutable_conditions();
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition& _internal_conditions(int index) const;
  ::google::monitoring::v3::AlertPolicy_Condition* _internal_add_conditions();
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition& conditions(int index) const;
  ::google::monitoring::v3::AlertPolicy_Condition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
      conditions() const;

  // repeated string notification_channels = 14;
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const std::string& value);
  void set_notification_channels(int index, std::string&& value);
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  std::string* add_notification_channels();
  void add_notification_channels(const std::string& value);
  void add_notification_channels(std::string&& value);
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_channels();
  private:
  const std::string& _internal_notification_channels(int index) const;
  std::string* _internal_add_notification_channels();
  public:

  // map<string, string> user_labels = 16;
  int user_labels_size() const;
  private:
  int _internal_user_labels_size() const;
  public:
  void clear_user_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_user_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      user_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_user_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.monitoring.v3.MutationRecord creation_record = 10;
  bool has_creation_record() const;
  private:
  bool _internal_has_creation_record() const;
  public:
  void clear_creation_record();
  const ::google::monitoring::v3::MutationRecord& creation_record() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::MutationRecord* release_creation_record();
  ::google::monitoring::v3::MutationRecord* mutable_creation_record();
  void set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record);
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_creation_record() const;
  ::google::monitoring::v3::MutationRecord* _internal_mutable_creation_record();
  public:
  void unsafe_arena_set_allocated_creation_record(
      ::google::monitoring::v3::MutationRecord* creation_record);
  ::google::monitoring::v3::MutationRecord* unsafe_arena_release_creation_record();

  // .google.monitoring.v3.MutationRecord mutation_record = 11;
  bool has_mutation_record() const;
  private:
  bool _internal_has_mutation_record() const;
  public:
  void clear_mutation_record();
  const ::google::monitoring::v3::MutationRecord& mutation_record() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::MutationRecord* release_mutation_record();
  ::google::monitoring::v3::MutationRecord* mutable_mutation_record();
  void set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record);
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_mutation_record() const;
  ::google::monitoring::v3::MutationRecord* _internal_mutable_mutation_record();
  public:
  void unsafe_arena_set_allocated_mutation_record(
      ::google::monitoring::v3::MutationRecord* mutation_record);
  ::google::monitoring::v3::MutationRecord* unsafe_arena_release_mutation_record();

  // .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
  bool has_documentation() const;
  private:
  bool _internal_has_documentation() const;
  public:
  void clear_documentation();
  const ::google::monitoring::v3::AlertPolicy_Documentation& documentation() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_Documentation* release_documentation();
  ::google::monitoring::v3::AlertPolicy_Documentation* mutable_documentation();
  void set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation);
  private:
  const ::google::monitoring::v3::AlertPolicy_Documentation& _internal_documentation() const;
  ::google::monitoring::v3::AlertPolicy_Documentation* _internal_mutable_documentation();
  public:
  void unsafe_arena_set_allocated_documentation(
      ::google::monitoring::v3::AlertPolicy_Documentation* documentation);
  ::google::monitoring::v3::AlertPolicy_Documentation* unsafe_arena_release_documentation();

  // .google.protobuf.BoolValue enabled = 17;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enabled() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enabled();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enabled();
  void set_allocated_enabled(::PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enabled();

  // .google.rpc.Status validity = 18;
  bool has_validity() const;
  private:
  bool _internal_has_validity() const;
  public:
  void clear_validity();
  const ::google::rpc::Status& validity() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_validity();
  ::google::rpc::Status* mutable_validity();
  void set_allocated_validity(::google::rpc::Status* validity);
  private:
  const ::google::rpc::Status& _internal_validity() const;
  ::google::rpc::Status* _internal_mutable_validity();
  public:
  void unsafe_arena_set_allocated_validity(
      ::google::rpc::Status* validity);
  ::google::rpc::Status* unsafe_arena_release_validity();

  // .google.monitoring.v3.AlertPolicy.AlertStrategy alert_strategy = 21;
  bool has_alert_strategy() const;
  private:
  bool _internal_has_alert_strategy() const;
  public:
  void clear_alert_strategy();
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy& alert_strategy() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::AlertPolicy_AlertStrategy* release_alert_strategy();
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* mutable_alert_strategy();
  void set_allocated_alert_strategy(::google::monitoring::v3::AlertPolicy_AlertStrategy* alert_strategy);
  private:
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy& _internal_alert_strategy() const;
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* _internal_mutable_alert_strategy();
  public:
  void unsafe_arena_set_allocated_alert_strategy(
      ::google::monitoring::v3::AlertPolicy_AlertStrategy* alert_strategy);
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* unsafe_arena_release_alert_strategy();

  // .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
  void clear_combiner();
  ::google::monitoring::v3::AlertPolicy_ConditionCombinerType combiner() const;
  void set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value);
  private:
  ::google::monitoring::v3::AlertPolicy_ConditionCombinerType _internal_combiner() const;
  void _internal_set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition > conditions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_channels_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AlertPolicy_UserLabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> user_labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::google::monitoring::v3::MutationRecord* creation_record_;
    ::google::monitoring::v3::MutationRecord* mutation_record_;
    ::google::monitoring::v3::AlertPolicy_Documentation* documentation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled_;
    ::google::rpc::Status* validity_;
    ::google::monitoring::v3::AlertPolicy_AlertStrategy* alert_strategy_;
    int combiner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2falert_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlertPolicy_Documentation

// string content = 1;
inline void AlertPolicy_Documentation::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Documentation::content() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Documentation::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline std::string* AlertPolicy_Documentation::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.content)
  return _s;
}
inline const std::string& AlertPolicy_Documentation::_internal_content() const {
  return _impl_.content_.Get();
}
inline void AlertPolicy_Documentation::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Documentation::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Documentation::release_content() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.content)
  return _impl_.content_.Release();
}
inline void AlertPolicy_Documentation::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.content)
}

// string mime_type = 2;
inline void AlertPolicy_Documentation::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Documentation::mime_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Documentation::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline std::string* AlertPolicy_Documentation::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return _s;
}
inline const std::string& AlertPolicy_Documentation::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void AlertPolicy_Documentation::_internal_set_mime_type(const std::string& value) {
  
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Documentation::_internal_mutable_mime_type() {
  
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Documentation::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return _impl_.mime_type_.Release();
}
inline void AlertPolicy_Documentation::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_Trigger

// int32 count = 1;
inline bool AlertPolicy_Condition_Trigger::_internal_has_count() const {
  return type_case() == kCount;
}
inline bool AlertPolicy_Condition_Trigger::has_count() const {
  return _internal_has_count();
}
inline void AlertPolicy_Condition_Trigger::set_has_count() {
  _impl_._oneof_case_[0] = kCount;
}
inline void AlertPolicy_Condition_Trigger::clear_count() {
  if (_internal_has_count()) {
    _impl_.type_.count_ = 0;
    clear_has_type();
  }
}
inline int32_t AlertPolicy_Condition_Trigger::_internal_count() const {
  if (_internal_has_count()) {
    return _impl_.type_.count_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::_internal_set_count(int32_t value) {
  if (!_internal_has_count()) {
    clear_type();
    set_has_count();
  }
  _impl_.type_.count_ = value;
}
inline int32_t AlertPolicy_Condition_Trigger::count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
  return _internal_count();
}
inline void AlertPolicy_Condition_Trigger::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
}

// double percent = 2;
inline bool AlertPolicy_Condition_Trigger::_internal_has_percent() const {
  return type_case() == kPercent;
}
inline bool AlertPolicy_Condition_Trigger::has_percent() const {
  return _internal_has_percent();
}
inline void AlertPolicy_Condition_Trigger::set_has_percent() {
  _impl_._oneof_case_[0] = kPercent;
}
inline void AlertPolicy_Condition_Trigger::clear_percent() {
  if (_internal_has_percent()) {
    _impl_.type_.percent_ = 0;
    clear_has_type();
  }
}
inline double AlertPolicy_Condition_Trigger::_internal_percent() const {
  if (_internal_has_percent()) {
    return _impl_.type_.percent_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::_internal_set_percent(double value) {
  if (!_internal_has_percent()) {
    clear_type();
    set_has_percent();
  }
  _impl_.type_.percent_ = value;
}
inline double AlertPolicy_Condition_Trigger::percent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
  return _internal_percent();
}
inline void AlertPolicy_Condition_Trigger::set_percent(double value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
}

inline bool AlertPolicy_Condition_Trigger::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AlertPolicy_Condition_Trigger::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline AlertPolicy_Condition_Trigger::TypeCase AlertPolicy_Condition_Trigger::type_case() const {
  return AlertPolicy_Condition_Trigger::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricThreshold

// string filter = 2 [(.google.api.field_behavior) = REQUIRED];
inline void AlertPolicy_Condition_MetricThreshold::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition_MetricThreshold::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return _s;
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return _impl_.filter_.Release();
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 8;
inline int AlertPolicy_Condition_MetricThreshold::_internal_aggregations_size() const {
  return _impl_.aggregations_.size();
}
inline int AlertPolicy_Condition_MetricThreshold::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _impl_.aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return &_impl_.aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::_internal_aggregations(int index) const {
  return _impl_.aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _internal_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::_internal_add_aggregations() {
  return _impl_.aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_aggregations() {
  ::google::monitoring::v3::Aggregation* _add = _internal_add_aggregations();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return _impl_.aggregations_;
}

// string denominator_filter = 9;
inline void AlertPolicy_Condition_MetricThreshold::clear_denominator_filter() {
  _impl_.denominator_filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::denominator_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return _internal_denominator_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.denominator_filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline std::string* AlertPolicy_Condition_MetricThreshold::mutable_denominator_filter() {
  std::string* _s = _internal_mutable_denominator_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return _s;
}
inline const std::string& AlertPolicy_Condition_MetricThreshold::_internal_denominator_filter() const {
  return _impl_.denominator_filter_.Get();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_denominator_filter(const std::string& value) {
  
  _impl_.denominator_filter_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::_internal_mutable_denominator_filter() {
  
  return _impl_.denominator_filter_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricThreshold::release_denominator_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return _impl_.denominator_filter_.Release();
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_denominator_filter(std::string* denominator_filter) {
  if (denominator_filter != nullptr) {
    
  } else {
    
  }
  _impl_.denominator_filter_.SetAllocated(denominator_filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.denominator_filter_.IsDefault()) {
    _impl_.denominator_filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}

// repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
inline int AlertPolicy_Condition_MetricThreshold::_internal_denominator_aggregations_size() const {
  return _impl_.denominator_aggregations_.size();
}
inline int AlertPolicy_Condition_MetricThreshold::denominator_aggregations_size() const {
  return _internal_denominator_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _impl_.denominator_aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return &_impl_.denominator_aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::_internal_denominator_aggregations(int index) const {
  return _impl_.denominator_aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::denominator_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _internal_denominator_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::_internal_add_denominator_aggregations() {
  return _impl_.denominator_aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_denominator_aggregations() {
  ::google::monitoring::v3::Aggregation* _add = _internal_add_denominator_aggregations();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::denominator_aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return _impl_.denominator_aggregations_;
}

// .google.monitoring.v3.ComparisonType comparison = 4;
inline void AlertPolicy_Condition_MetricThreshold::clear_comparison() {
  _impl_.comparison_ = 0;
}
inline ::google::monitoring::v3::ComparisonType AlertPolicy_Condition_MetricThreshold::_internal_comparison() const {
  return static_cast< ::google::monitoring::v3::ComparisonType >(_impl_.comparison_);
}
inline ::google::monitoring::v3::ComparisonType AlertPolicy_Condition_MetricThreshold::comparison() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
  return _internal_comparison();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_comparison(::google::monitoring::v3::ComparisonType value) {
  
  _impl_.comparison_ = value;
}
inline void AlertPolicy_Condition_MetricThreshold::set_comparison(::google::monitoring::v3::ComparisonType value) {
  _internal_set_comparison(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
}

// double threshold_value = 5;
inline void AlertPolicy_Condition_MetricThreshold::clear_threshold_value() {
  _impl_.threshold_value_ = 0;
}
inline double AlertPolicy_Condition_MetricThreshold::_internal_threshold_value() const {
  return _impl_.threshold_value_;
}
inline double AlertPolicy_Condition_MetricThreshold::threshold_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
  return _internal_threshold_value();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_threshold_value(double value) {
  
  _impl_.threshold_value_ = value;
}
inline void AlertPolicy_Condition_MetricThreshold::set_threshold_value(double value) {
  _internal_set_threshold_value(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
}

// .google.protobuf.Duration duration = 6;
inline bool AlertPolicy_Condition_MetricThreshold::_internal_has_duration() const {
  return this != internal_default_instance() && _impl_.duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricThreshold::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricThreshold::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricThreshold::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MetricThreshold::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::_internal_mutable_duration() {
  
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricThreshold::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return _msg;
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
inline bool AlertPolicy_Condition_MetricThreshold::_internal_has_trigger() const {
  return this != internal_default_instance() && _impl_.trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricThreshold::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MetricThreshold::clear_trigger() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_ != nullptr) {
    delete _impl_.trigger_;
  }
  _impl_.trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = _impl_.trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MetricThreshold::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_);
  }
  _impl_.trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::_internal_mutable_trigger() {
  
  if (_impl_.trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArenaForAllocation());
    _impl_.trigger_ = p;
  }
  return _impl_.trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::mutable_trigger() {
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return _msg;
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
}

// .google.monitoring.v3.AlertPolicy.Condition.EvaluationMissingData evaluation_missing_data = 11;
inline void AlertPolicy_Condition_MetricThreshold::clear_evaluation_missing_data() {
  _impl_.evaluation_missing_data_ = 0;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_MetricThreshold::_internal_evaluation_missing_data() const {
  return static_cast< ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData >(_impl_.evaluation_missing_data_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_MetricThreshold::evaluation_missing_data() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.evaluation_missing_data)
  return _internal_evaluation_missing_data();
}
inline void AlertPolicy_Condition_MetricThreshold::_internal_set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value) {
  
  _impl_.evaluation_missing_data_ = value;
}
inline void AlertPolicy_Condition_MetricThreshold::set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value) {
  _internal_set_evaluation_missing_data(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.evaluation_missing_data)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricAbsence

// string filter = 1 [(.google.api.field_behavior) = REQUIRED];
inline void AlertPolicy_Condition_MetricAbsence::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MetricAbsence::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition_MetricAbsence::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline std::string* AlertPolicy_Condition_MetricAbsence::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return _s;
}
inline const std::string& AlertPolicy_Condition_MetricAbsence::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void AlertPolicy_Condition_MetricAbsence::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricAbsence::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MetricAbsence::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return _impl_.filter_.Release();
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 5;
inline int AlertPolicy_Condition_MetricAbsence::_internal_aggregations_size() const {
  return _impl_.aggregations_.size();
}
inline int AlertPolicy_Condition_MetricAbsence::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _impl_.aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricAbsence::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return &_impl_.aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricAbsence::_internal_aggregations(int index) const {
  return _impl_.aggregations_.Get(index);
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricAbsence::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _internal_aggregations(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::_internal_add_aggregations() {
  return _impl_.aggregations_.Add();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::add_aggregations() {
  ::google::monitoring::v3::Aggregation* _add = _internal_add_aggregations();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricAbsence::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return _impl_.aggregations_;
}

// .google.protobuf.Duration duration = 2;
inline bool AlertPolicy_Condition_MetricAbsence::_internal_has_duration() const {
  return this != internal_default_instance() && _impl_.duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricAbsence::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricAbsence::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MetricAbsence::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MetricAbsence::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::_internal_mutable_duration() {
  
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MetricAbsence::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return _msg;
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
inline bool AlertPolicy_Condition_MetricAbsence::_internal_has_trigger() const {
  return this != internal_default_instance() && _impl_.trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MetricAbsence::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MetricAbsence::clear_trigger() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_ != nullptr) {
    delete _impl_.trigger_;
  }
  _impl_.trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = _impl_.trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MetricAbsence::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_);
  }
  _impl_.trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::_internal_mutable_trigger() {
  
  if (_impl_.trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArenaForAllocation());
    _impl_.trigger_ = p;
  }
  return _impl_.trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::mutable_trigger() {
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return _msg;
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlertPolicy_Condition_LogMatch

// string filter = 1 [(.google.api.field_behavior) = REQUIRED];
inline void AlertPolicy_Condition_LogMatch::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_LogMatch::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.LogMatch.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition_LogMatch::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.LogMatch.filter)
}
inline std::string* AlertPolicy_Condition_LogMatch::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.LogMatch.filter)
  return _s;
}
inline const std::string& AlertPolicy_Condition_LogMatch::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void AlertPolicy_Condition_LogMatch::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_LogMatch::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_LogMatch::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.LogMatch.filter)
  return _impl_.filter_.Release();
}
inline void AlertPolicy_Condition_LogMatch::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.LogMatch.filter)
}

// map<string, string> label_extractors = 2;
inline int AlertPolicy_Condition_LogMatch::_internal_label_extractors_size() const {
  return _impl_.label_extractors_.size();
}
inline int AlertPolicy_Condition_LogMatch::label_extractors_size() const {
  return _internal_label_extractors_size();
}
inline void AlertPolicy_Condition_LogMatch::clear_label_extractors() {
  _impl_.label_extractors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy_Condition_LogMatch::_internal_label_extractors() const {
  return _impl_.label_extractors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy_Condition_LogMatch::label_extractors() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.AlertPolicy.Condition.LogMatch.label_extractors)
  return _internal_label_extractors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy_Condition_LogMatch::_internal_mutable_label_extractors() {
  return _impl_.label_extractors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy_Condition_LogMatch::mutable_label_extractors() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.AlertPolicy.Condition.LogMatch.label_extractors)
  return _internal_mutable_label_extractors();
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_MonitoringQueryLanguageCondition

// string query = 1;
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition_MonitoringQueryLanguageCondition::query() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return _s;
}
inline const std::string& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_query() const {
  return _impl_.query_.Get();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_query() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
  return _impl_.query_.Release();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.query)
}

// .google.protobuf.Duration duration = 2;
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_has_duration() const {
  return this != internal_default_instance() && _impl_.duration_ != nullptr;
}
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_Condition_MonitoringQueryLanguageCondition::duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  return _internal_duration();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_duration() {
  
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
  return _msg;
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_has_trigger() const {
  return this != internal_default_instance() && _impl_.trigger_ != nullptr;
}
inline bool AlertPolicy_Condition_MonitoringQueryLanguageCondition::has_trigger() const {
  return _internal_has_trigger();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::clear_trigger() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_ != nullptr) {
    delete _impl_.trigger_;
  }
  _impl_.trigger_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = _impl_.trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger&>(
      ::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MonitoringQueryLanguageCondition::trigger() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  return _internal_trigger();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_set_allocated_trigger(
    ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_);
  }
  _impl_.trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::release_trigger() {
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_mutable_trigger() {
  
  if (_impl_.trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArenaForAllocation());
    _impl_.trigger_ = p;
  }
  return _impl_.trigger_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MonitoringQueryLanguageCondition::mutable_trigger() {
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
  return _msg;
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.trigger)
}

// .google.monitoring.v3.AlertPolicy.Condition.EvaluationMissingData evaluation_missing_data = 4;
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::clear_evaluation_missing_data() {
  _impl_.evaluation_missing_data_ = 0;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_evaluation_missing_data() const {
  return static_cast< ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData >(_impl_.evaluation_missing_data_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData AlertPolicy_Condition_MonitoringQueryLanguageCondition::evaluation_missing_data() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.evaluation_missing_data)
  return _internal_evaluation_missing_data();
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::_internal_set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value) {
  
  _impl_.evaluation_missing_data_ = value;
}
inline void AlertPolicy_Condition_MonitoringQueryLanguageCondition::set_evaluation_missing_data(::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData value) {
  _internal_set_evaluation_missing_data(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition.evaluation_missing_data)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition

// string name = 12;
inline void AlertPolicy_Condition::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline std::string* AlertPolicy_Condition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.name)
  return _s;
}
inline const std::string& AlertPolicy_Condition::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AlertPolicy_Condition::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.name)
  return _impl_.name_.Release();
}
inline void AlertPolicy_Condition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.name)
}

// string display_name = 6;
inline void AlertPolicy_Condition::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& AlertPolicy_Condition::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy_Condition::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline std::string* AlertPolicy_Condition::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return _s;
}
inline const std::string& AlertPolicy_Condition::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void AlertPolicy_Condition::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy_Condition::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return _impl_.display_name_.Release();
}
inline void AlertPolicy_Condition::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.display_name)
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
inline bool AlertPolicy_Condition::_internal_has_condition_threshold() const {
  return condition_case() == kConditionThreshold;
}
inline bool AlertPolicy_Condition::has_condition_threshold() const {
  return _internal_has_condition_threshold();
}
inline void AlertPolicy_Condition::set_has_condition_threshold() {
  _impl_._oneof_case_[0] = kConditionThreshold;
}
inline void AlertPolicy_Condition::clear_condition_threshold() {
  if (_internal_has_condition_threshold()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.condition_.condition_threshold_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::release_condition_threshold() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  if (_internal_has_condition_threshold()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* temp = _impl_.condition_.condition_threshold_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.condition_.condition_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::_internal_condition_threshold() const {
  return _internal_has_condition_threshold()
      ? *_impl_.condition_.condition_threshold_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold&>(::google::monitoring::v3::_AlertPolicy_Condition_MetricThreshold_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::condition_threshold() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return _internal_condition_threshold();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::unsafe_arena_release_condition_threshold() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  if (_internal_has_condition_threshold()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* temp = _impl_.condition_.condition_threshold_;
    _impl_.condition_.condition_threshold_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_threshold(::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold) {
  clear_condition();
  if (condition_threshold) {
    set_has_condition_threshold();
    _impl_.condition_.condition_threshold_ = condition_threshold;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::_internal_mutable_condition_threshold() {
  if (!_internal_has_condition_threshold()) {
    clear_condition();
    set_has_condition_threshold();
    _impl_.condition_.condition_threshold_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold >(GetArenaForAllocation());
  }
  return _impl_.condition_.condition_threshold_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::mutable_condition_threshold() {
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* _msg = _internal_mutable_condition_threshold();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return _msg;
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
inline bool AlertPolicy_Condition::_internal_has_condition_absent() const {
  return condition_case() == kConditionAbsent;
}
inline bool AlertPolicy_Condition::has_condition_absent() const {
  return _internal_has_condition_absent();
}
inline void AlertPolicy_Condition::set_has_condition_absent() {
  _impl_._oneof_case_[0] = kConditionAbsent;
}
inline void AlertPolicy_Condition::clear_condition_absent() {
  if (_internal_has_condition_absent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.condition_.condition_absent_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::release_condition_absent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  if (_internal_has_condition_absent()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* temp = _impl_.condition_.condition_absent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.condition_.condition_absent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::_internal_condition_absent() const {
  return _internal_has_condition_absent()
      ? *_impl_.condition_.condition_absent_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence&>(::google::monitoring::v3::_AlertPolicy_Condition_MetricAbsence_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::condition_absent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return _internal_condition_absent();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::unsafe_arena_release_condition_absent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  if (_internal_has_condition_absent()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* temp = _impl_.condition_.condition_absent_;
    _impl_.condition_.condition_absent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_absent(::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent) {
  clear_condition();
  if (condition_absent) {
    set_has_condition_absent();
    _impl_.condition_.condition_absent_ = condition_absent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::_internal_mutable_condition_absent() {
  if (!_internal_has_condition_absent()) {
    clear_condition();
    set_has_condition_absent();
    _impl_.condition_.condition_absent_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence >(GetArenaForAllocation());
  }
  return _impl_.condition_.condition_absent_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::mutable_condition_absent() {
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* _msg = _internal_mutable_condition_absent();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return _msg;
}

// .google.monitoring.v3.AlertPolicy.Condition.LogMatch condition_matched_log = 20;
inline bool AlertPolicy_Condition::_internal_has_condition_matched_log() const {
  return condition_case() == kConditionMatchedLog;
}
inline bool AlertPolicy_Condition::has_condition_matched_log() const {
  return _internal_has_condition_matched_log();
}
inline void AlertPolicy_Condition::set_has_condition_matched_log() {
  _impl_._oneof_case_[0] = kConditionMatchedLog;
}
inline void AlertPolicy_Condition::clear_condition_matched_log() {
  if (_internal_has_condition_matched_log()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.condition_.condition_matched_log_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* AlertPolicy_Condition::release_condition_matched_log() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_matched_log)
  if (_internal_has_condition_matched_log()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* temp = _impl_.condition_.condition_matched_log_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.condition_.condition_matched_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_LogMatch& AlertPolicy_Condition::_internal_condition_matched_log() const {
  return _internal_has_condition_matched_log()
      ? *_impl_.condition_.condition_matched_log_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_LogMatch&>(::google::monitoring::v3::_AlertPolicy_Condition_LogMatch_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_LogMatch& AlertPolicy_Condition::condition_matched_log() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_matched_log)
  return _internal_condition_matched_log();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* AlertPolicy_Condition::unsafe_arena_release_condition_matched_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_matched_log)
  if (_internal_has_condition_matched_log()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* temp = _impl_.condition_.condition_matched_log_;
    _impl_.condition_.condition_matched_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_matched_log(::google::monitoring::v3::AlertPolicy_Condition_LogMatch* condition_matched_log) {
  clear_condition();
  if (condition_matched_log) {
    set_has_condition_matched_log();
    _impl_.condition_.condition_matched_log_ = condition_matched_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_matched_log)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* AlertPolicy_Condition::_internal_mutable_condition_matched_log() {
  if (!_internal_has_condition_matched_log()) {
    clear_condition();
    set_has_condition_matched_log();
    _impl_.condition_.condition_matched_log_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_LogMatch >(GetArenaForAllocation());
  }
  return _impl_.condition_.condition_matched_log_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* AlertPolicy_Condition::mutable_condition_matched_log() {
  ::google::monitoring::v3::AlertPolicy_Condition_LogMatch* _msg = _internal_mutable_condition_matched_log();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_matched_log)
  return _msg;
}

// .google.monitoring.v3.AlertPolicy.Condition.MonitoringQueryLanguageCondition condition_monitoring_query_language = 19;
inline bool AlertPolicy_Condition::_internal_has_condition_monitoring_query_language() const {
  return condition_case() == kConditionMonitoringQueryLanguage;
}
inline bool AlertPolicy_Condition::has_condition_monitoring_query_language() const {
  return _internal_has_condition_monitoring_query_language();
}
inline void AlertPolicy_Condition::set_has_condition_monitoring_query_language() {
  _impl_._oneof_case_[0] = kConditionMonitoringQueryLanguage;
}
inline void AlertPolicy_Condition::clear_condition_monitoring_query_language() {
  if (_internal_has_condition_monitoring_query_language()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.condition_.condition_monitoring_query_language_;
    }
    clear_has_condition();
  }
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::release_condition_monitoring_query_language() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  if (_internal_has_condition_monitoring_query_language()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* temp = _impl_.condition_.condition_monitoring_query_language_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.condition_.condition_monitoring_query_language_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& AlertPolicy_Condition::_internal_condition_monitoring_query_language() const {
  return _internal_has_condition_monitoring_query_language()
      ? *_impl_.condition_.condition_monitoring_query_language_
      : reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition&>(::google::monitoring::v3::_AlertPolicy_Condition_MonitoringQueryLanguageCondition_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition& AlertPolicy_Condition::condition_monitoring_query_language() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  return _internal_condition_monitoring_query_language();
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::unsafe_arena_release_condition_monitoring_query_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  if (_internal_has_condition_monitoring_query_language()) {
    clear_has_condition();
    ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* temp = _impl_.condition_.condition_monitoring_query_language_;
    _impl_.condition_.condition_monitoring_query_language_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AlertPolicy_Condition::unsafe_arena_set_allocated_condition_monitoring_query_language(::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* condition_monitoring_query_language) {
  clear_condition();
  if (condition_monitoring_query_language) {
    set_has_condition_monitoring_query_language();
    _impl_.condition_.condition_monitoring_query_language_ = condition_monitoring_query_language;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::_internal_mutable_condition_monitoring_query_language() {
  if (!_internal_has_condition_monitoring_query_language()) {
    clear_condition();
    set_has_condition_monitoring_query_language();
    _impl_.condition_.condition_monitoring_query_language_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition >(GetArenaForAllocation());
  }
  return _impl_.condition_.condition_monitoring_query_language_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* AlertPolicy_Condition::mutable_condition_monitoring_query_language() {
  ::google::monitoring::v3::AlertPolicy_Condition_MonitoringQueryLanguageCondition* _msg = _internal_mutable_condition_monitoring_query_language();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_monitoring_query_language)
  return _msg;
}

inline bool AlertPolicy_Condition::has_condition() const {
  return condition_case() != CONDITION_NOT_SET;
}
inline void AlertPolicy_Condition::clear_has_condition() {
  _impl_._oneof_case_[0] = CONDITION_NOT_SET;
}
inline AlertPolicy_Condition::ConditionCase AlertPolicy_Condition::condition_case() const {
  return AlertPolicy_Condition::ConditionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlertPolicy_AlertStrategy_NotificationRateLimit

// .google.protobuf.Duration period = 1;
inline bool AlertPolicy_AlertStrategy_NotificationRateLimit::_internal_has_period() const {
  return this != internal_default_instance() && _impl_.period_ != nullptr;
}
inline bool AlertPolicy_AlertStrategy_NotificationRateLimit::has_period() const {
  return _internal_has_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_AlertStrategy_NotificationRateLimit::_internal_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_AlertStrategy_NotificationRateLimit::period() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit.period)
  return _internal_period();
}
inline void AlertPolicy_AlertStrategy_NotificationRateLimit::unsafe_arena_set_allocated_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_);
  }
  _impl_.period_ = period;
  if (period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit.period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy_NotificationRateLimit::release_period() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.period_;
  _impl_.period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy_NotificationRateLimit::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit.period)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.period_;
  _impl_.period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy_NotificationRateLimit::_internal_mutable_period() {
  
  if (_impl_.period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.period_ = p;
  }
  return _impl_.period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy_NotificationRateLimit::mutable_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_period();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit.period)
  return _msg;
}
inline void AlertPolicy_AlertStrategy_NotificationRateLimit::set_allocated_period(::PROTOBUF_NAMESPACE_ID::Duration* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_);
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period));
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit.period)
}

// -------------------------------------------------------------------

// AlertPolicy_AlertStrategy

// .google.monitoring.v3.AlertPolicy.AlertStrategy.NotificationRateLimit notification_rate_limit = 1;
inline bool AlertPolicy_AlertStrategy::_internal_has_notification_rate_limit() const {
  return this != internal_default_instance() && _impl_.notification_rate_limit_ != nullptr;
}
inline bool AlertPolicy_AlertStrategy::has_notification_rate_limit() const {
  return _internal_has_notification_rate_limit();
}
inline void AlertPolicy_AlertStrategy::clear_notification_rate_limit() {
  if (GetArenaForAllocation() == nullptr && _impl_.notification_rate_limit_ != nullptr) {
    delete _impl_.notification_rate_limit_;
  }
  _impl_.notification_rate_limit_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit& AlertPolicy_AlertStrategy::_internal_notification_rate_limit() const {
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* p = _impl_.notification_rate_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit&>(
      ::google::monitoring::v3::_AlertPolicy_AlertStrategy_NotificationRateLimit_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit& AlertPolicy_AlertStrategy::notification_rate_limit() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.AlertStrategy.notification_rate_limit)
  return _internal_notification_rate_limit();
}
inline void AlertPolicy_AlertStrategy::unsafe_arena_set_allocated_notification_rate_limit(
    ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* notification_rate_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_rate_limit_);
  }
  _impl_.notification_rate_limit_ = notification_rate_limit;
  if (notification_rate_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.notification_rate_limit)
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* AlertPolicy_AlertStrategy::release_notification_rate_limit() {
  
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* temp = _impl_.notification_rate_limit_;
  _impl_.notification_rate_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* AlertPolicy_AlertStrategy::unsafe_arena_release_notification_rate_limit() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.AlertStrategy.notification_rate_limit)
  
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* temp = _impl_.notification_rate_limit_;
  _impl_.notification_rate_limit_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* AlertPolicy_AlertStrategy::_internal_mutable_notification_rate_limit() {
  
  if (_impl_.notification_rate_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit>(GetArenaForAllocation());
    _impl_.notification_rate_limit_ = p;
  }
  return _impl_.notification_rate_limit_;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* AlertPolicy_AlertStrategy::mutable_notification_rate_limit() {
  ::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* _msg = _internal_mutable_notification_rate_limit();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.AlertStrategy.notification_rate_limit)
  return _msg;
}
inline void AlertPolicy_AlertStrategy::set_allocated_notification_rate_limit(::google::monitoring::v3::AlertPolicy_AlertStrategy_NotificationRateLimit* notification_rate_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.notification_rate_limit_;
  }
  if (notification_rate_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notification_rate_limit);
    if (message_arena != submessage_arena) {
      notification_rate_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_rate_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notification_rate_limit_ = notification_rate_limit;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.notification_rate_limit)
}

// .google.protobuf.Duration auto_close = 3;
inline bool AlertPolicy_AlertStrategy::_internal_has_auto_close() const {
  return this != internal_default_instance() && _impl_.auto_close_ != nullptr;
}
inline bool AlertPolicy_AlertStrategy::has_auto_close() const {
  return _internal_has_auto_close();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_AlertStrategy::_internal_auto_close() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.auto_close_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AlertPolicy_AlertStrategy::auto_close() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.AlertStrategy.auto_close)
  return _internal_auto_close();
}
inline void AlertPolicy_AlertStrategy::unsafe_arena_set_allocated_auto_close(
    ::PROTOBUF_NAMESPACE_ID::Duration* auto_close) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_close_);
  }
  _impl_.auto_close_ = auto_close;
  if (auto_close) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.auto_close)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy::release_auto_close() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.auto_close_;
  _impl_.auto_close_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy::unsafe_arena_release_auto_close() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.AlertStrategy.auto_close)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.auto_close_;
  _impl_.auto_close_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy::_internal_mutable_auto_close() {
  
  if (_impl_.auto_close_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.auto_close_ = p;
  }
  return _impl_.auto_close_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AlertPolicy_AlertStrategy::mutable_auto_close() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_auto_close();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.AlertStrategy.auto_close)
  return _msg;
}
inline void AlertPolicy_AlertStrategy::set_allocated_auto_close(::PROTOBUF_NAMESPACE_ID::Duration* auto_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_close_);
  }
  if (auto_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_close));
    if (message_arena != submessage_arena) {
      auto_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_close, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_close_ = auto_close;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.AlertStrategy.auto_close)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlertPolicy

// string name = 1;
inline void AlertPolicy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AlertPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.name)
}
inline std::string* AlertPolicy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.name)
  return _s;
}
inline const std::string& AlertPolicy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AlertPolicy::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.name)
  return _impl_.name_.Release();
}
inline void AlertPolicy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.name)
}

// string display_name = 2;
inline void AlertPolicy::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& AlertPolicy::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlertPolicy::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.display_name)
}
inline std::string* AlertPolicy::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.display_name)
  return _s;
}
inline const std::string& AlertPolicy::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void AlertPolicy::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AlertPolicy::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AlertPolicy::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.display_name)
  return _impl_.display_name_.Release();
}
inline void AlertPolicy::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.display_name)
}

// .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
inline bool AlertPolicy::_internal_has_documentation() const {
  return this != internal_default_instance() && _impl_.documentation_ != nullptr;
}
inline bool AlertPolicy::has_documentation() const {
  return _internal_has_documentation();
}
inline void AlertPolicy::clear_documentation() {
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::_internal_documentation() const {
  const ::google::monitoring::v3::AlertPolicy_Documentation* p = _impl_.documentation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Documentation&>(
      ::google::monitoring::v3::_AlertPolicy_Documentation_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::documentation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.documentation)
  return _internal_documentation();
}
inline void AlertPolicy::unsafe_arena_set_allocated_documentation(
    ::google::monitoring::v3::AlertPolicy_Documentation* documentation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.documentation_);
  }
  _impl_.documentation_ = documentation;
  if (documentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.documentation)
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::release_documentation() {
  
  ::google::monitoring::v3::AlertPolicy_Documentation* temp = _impl_.documentation_;
  _impl_.documentation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::unsafe_arena_release_documentation() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.documentation)
  
  ::google::monitoring::v3::AlertPolicy_Documentation* temp = _impl_.documentation_;
  _impl_.documentation_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::_internal_mutable_documentation() {
  
  if (_impl_.documentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(GetArenaForAllocation());
    _impl_.documentation_ = p;
  }
  return _impl_.documentation_;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::mutable_documentation() {
  ::google::monitoring::v3::AlertPolicy_Documentation* _msg = _internal_mutable_documentation();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.documentation)
  return _msg;
}
inline void AlertPolicy::set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.documentation_;
  }
  if (documentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentation);
    if (message_arena != submessage_arena) {
      documentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.documentation_ = documentation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.documentation)
}

// map<string, string> user_labels = 16;
inline int AlertPolicy::_internal_user_labels_size() const {
  return _impl_.user_labels_.size();
}
inline int AlertPolicy::user_labels_size() const {
  return _internal_user_labels_size();
}
inline void AlertPolicy::clear_user_labels() {
  _impl_.user_labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy::_internal_user_labels() const {
  return _impl_.user_labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlertPolicy::user_labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.AlertPolicy.user_labels)
  return _internal_user_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy::_internal_mutable_user_labels() {
  return _impl_.user_labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlertPolicy::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.AlertPolicy.user_labels)
  return _internal_mutable_user_labels();
}

// repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
inline int AlertPolicy::_internal_conditions_size() const {
  return _impl_.conditions_.size();
}
inline int AlertPolicy::conditions_size() const {
  return _internal_conditions_size();
}
inline void AlertPolicy::clear_conditions() {
  _impl_.conditions_.Clear();
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.conditions)
  return _impl_.conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
AlertPolicy::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.conditions)
  return &_impl_.conditions_;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition& AlertPolicy::_internal_conditions(int index) const {
  return _impl_.conditions_.Get(index);
}
inline const ::google::monitoring::v3::AlertPolicy_Condition& AlertPolicy::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.conditions)
  return _internal_conditions(index);
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::_internal_add_conditions() {
  return _impl_.conditions_.Add();
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::add_conditions() {
  ::google::monitoring::v3::AlertPolicy_Condition* _add = _internal_add_conditions();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.conditions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
AlertPolicy::conditions() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.conditions)
  return _impl_.conditions_;
}

// .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
inline void AlertPolicy::clear_combiner() {
  _impl_.combiner_ = 0;
}
inline ::google::monitoring::v3::AlertPolicy_ConditionCombinerType AlertPolicy::_internal_combiner() const {
  return static_cast< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType >(_impl_.combiner_);
}
inline ::google::monitoring::v3::AlertPolicy_ConditionCombinerType AlertPolicy::combiner() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.combiner)
  return _internal_combiner();
}
inline void AlertPolicy::_internal_set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value) {
  
  _impl_.combiner_ = value;
}
inline void AlertPolicy::set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value) {
  _internal_set_combiner(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.combiner)
}

// .google.protobuf.BoolValue enabled = 17;
inline bool AlertPolicy::_internal_has_enabled() const {
  return this != internal_default_instance() && _impl_.enabled_ != nullptr;
}
inline bool AlertPolicy::has_enabled() const {
  return _internal_has_enabled();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& AlertPolicy::_internal_enabled() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& AlertPolicy::enabled() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.enabled)
  return _internal_enabled();
}
inline void AlertPolicy::unsafe_arena_set_allocated_enabled(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  _impl_.enabled_ = enabled;
  if (enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.enabled)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::release_enabled() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.enabled)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::_internal_mutable_enabled() {
  
  if (_impl_.enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.enabled_ = p;
  }
  return _impl_.enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* AlertPolicy::mutable_enabled() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enabled();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.enabled)
  return _msg;
}
inline void AlertPolicy::set_allocated_enabled(::PROTOBUF_NAMESPACE_ID::BoolValue* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled));
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.enabled)
}

// .google.rpc.Status validity = 18;
inline bool AlertPolicy::_internal_has_validity() const {
  return this != internal_default_instance() && _impl_.validity_ != nullptr;
}
inline bool AlertPolicy::has_validity() const {
  return _internal_has_validity();
}
inline const ::google::rpc::Status& AlertPolicy::_internal_validity() const {
  const ::google::rpc::Status* p = _impl_.validity_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& AlertPolicy::validity() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.validity)
  return _internal_validity();
}
inline void AlertPolicy::unsafe_arena_set_allocated_validity(
    ::google::rpc::Status* validity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validity_);
  }
  _impl_.validity_ = validity;
  if (validity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.validity)
}
inline ::google::rpc::Status* AlertPolicy::release_validity() {
  
  ::google::rpc::Status* temp = _impl_.validity_;
  _impl_.validity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* AlertPolicy::unsafe_arena_release_validity() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.validity)
  
  ::google::rpc::Status* temp = _impl_.validity_;
  _impl_.validity_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* AlertPolicy::_internal_mutable_validity() {
  
  if (_impl_.validity_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.validity_ = p;
  }
  return _impl_.validity_;
}
inline ::google::rpc::Status* AlertPolicy::mutable_validity() {
  ::google::rpc::Status* _msg = _internal_mutable_validity();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.validity)
  return _msg;
}
inline void AlertPolicy::set_allocated_validity(::google::rpc::Status* validity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validity_);
  }
  if (validity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validity));
    if (message_arena != submessage_arena) {
      validity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.validity_ = validity;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.validity)
}

// repeated string notification_channels = 14;
inline int AlertPolicy::_internal_notification_channels_size() const {
  return _impl_.notification_channels_.size();
}
inline int AlertPolicy::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void AlertPolicy::clear_notification_channels() {
  _impl_.notification_channels_.Clear();
}
inline std::string* AlertPolicy::add_notification_channels() {
  std::string* _s = _internal_add_notification_channels();
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return _s;
}
inline const std::string& AlertPolicy::_internal_notification_channels(int index) const {
  return _impl_.notification_channels_.Get(index);
}
inline const std::string& AlertPolicy::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.notification_channels)
  return _internal_notification_channels(index);
}
inline std::string* AlertPolicy::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return _impl_.notification_channels_.Mutable(index);
}
inline void AlertPolicy::set_notification_channels(int index, const std::string& value) {
  _impl_.notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::set_notification_channels(int index, std::string&& value) {
  _impl_.notification_channels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::set_notification_channels(int index, const char* value, size_t size) {
  _impl_.notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline std::string* AlertPolicy::_internal_add_notification_channels() {
  return _impl_.notification_channels_.Add();
}
inline void AlertPolicy::add_notification_channels(const std::string& value) {
  _impl_.notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(std::string&& value) {
  _impl_.notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(const char* value, size_t size) {
  _impl_.notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlertPolicy::notification_channels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return _impl_.notification_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlertPolicy::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return &_impl_.notification_channels_;
}

// .google.monitoring.v3.MutationRecord creation_record = 10;
inline bool AlertPolicy::_internal_has_creation_record() const {
  return this != internal_default_instance() && _impl_.creation_record_ != nullptr;
}
inline bool AlertPolicy::has_creation_record() const {
  return _internal_has_creation_record();
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_creation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = _impl_.creation_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::MutationRecord&>(
      ::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::creation_record() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.creation_record)
  return _internal_creation_record();
}
inline void AlertPolicy::unsafe_arena_set_allocated_creation_record(
    ::google::monitoring::v3::MutationRecord* creation_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_record_);
  }
  _impl_.creation_record_ = creation_record;
  if (creation_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.creation_record)
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_creation_record() {
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.creation_record_;
  _impl_.creation_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::unsafe_arena_release_creation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.creation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.creation_record_;
  _impl_.creation_record_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::_internal_mutable_creation_record() {
  
  if (_impl_.creation_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArenaForAllocation());
    _impl_.creation_record_ = p;
  }
  return _impl_.creation_record_;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_creation_record() {
  ::google::monitoring::v3::MutationRecord* _msg = _internal_mutable_creation_record();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.creation_record)
  return _msg;
}
inline void AlertPolicy::set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creation_record_);
  }
  if (creation_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_record));
    if (message_arena != submessage_arena) {
      creation_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creation_record_ = creation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.creation_record)
}

// .google.monitoring.v3.MutationRecord mutation_record = 11;
inline bool AlertPolicy::_internal_has_mutation_record() const {
  return this != internal_default_instance() && _impl_.mutation_record_ != nullptr;
}
inline bool AlertPolicy::has_mutation_record() const {
  return _internal_has_mutation_record();
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_mutation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = _impl_.mutation_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::MutationRecord&>(
      ::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::mutation_record() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.mutation_record)
  return _internal_mutation_record();
}
inline void AlertPolicy::unsafe_arena_set_allocated_mutation_record(
    ::google::monitoring::v3::MutationRecord* mutation_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mutation_record_);
  }
  _impl_.mutation_record_ = mutation_record;
  if (mutation_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.mutation_record)
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_mutation_record() {
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.mutation_record_;
  _impl_.mutation_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::unsafe_arena_release_mutation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.mutation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = _impl_.mutation_record_;
  _impl_.mutation_record_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::_internal_mutable_mutation_record() {
  
  if (_impl_.mutation_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArenaForAllocation());
    _impl_.mutation_record_ = p;
  }
  return _impl_.mutation_record_;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_mutation_record() {
  ::google::monitoring::v3::MutationRecord* _msg = _internal_mutable_mutation_record();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.mutation_record)
  return _msg;
}
inline void AlertPolicy::set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mutation_record_);
  }
  if (mutation_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_record));
    if (message_arena != submessage_arena) {
      mutation_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation_record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mutation_record_ = mutation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.mutation_record)
}

// .google.monitoring.v3.AlertPolicy.AlertStrategy alert_strategy = 21;
inline bool AlertPolicy::_internal_has_alert_strategy() const {
  return this != internal_default_instance() && _impl_.alert_strategy_ != nullptr;
}
inline bool AlertPolicy::has_alert_strategy() const {
  return _internal_has_alert_strategy();
}
inline void AlertPolicy::clear_alert_strategy() {
  if (GetArenaForAllocation() == nullptr && _impl_.alert_strategy_ != nullptr) {
    delete _impl_.alert_strategy_;
  }
  _impl_.alert_strategy_ = nullptr;
}
inline const ::google::monitoring::v3::AlertPolicy_AlertStrategy& AlertPolicy::_internal_alert_strategy() const {
  const ::google::monitoring::v3::AlertPolicy_AlertStrategy* p = _impl_.alert_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_AlertStrategy&>(
      ::google::monitoring::v3::_AlertPolicy_AlertStrategy_default_instance_);
}
inline const ::google::monitoring::v3::AlertPolicy_AlertStrategy& AlertPolicy::alert_strategy() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.alert_strategy)
  return _internal_alert_strategy();
}
inline void AlertPolicy::unsafe_arena_set_allocated_alert_strategy(
    ::google::monitoring::v3::AlertPolicy_AlertStrategy* alert_strategy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alert_strategy_);
  }
  _impl_.alert_strategy_ = alert_strategy;
  if (alert_strategy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.AlertPolicy.alert_strategy)
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy* AlertPolicy::release_alert_strategy() {
  
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* temp = _impl_.alert_strategy_;
  _impl_.alert_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy* AlertPolicy::unsafe_arena_release_alert_strategy() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.alert_strategy)
  
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* temp = _impl_.alert_strategy_;
  _impl_.alert_strategy_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy* AlertPolicy::_internal_mutable_alert_strategy() {
  
  if (_impl_.alert_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_AlertStrategy>(GetArenaForAllocation());
    _impl_.alert_strategy_ = p;
  }
  return _impl_.alert_strategy_;
}
inline ::google::monitoring::v3::AlertPolicy_AlertStrategy* AlertPolicy::mutable_alert_strategy() {
  ::google::monitoring::v3::AlertPolicy_AlertStrategy* _msg = _internal_mutable_alert_strategy();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.alert_strategy)
  return _msg;
}
inline void AlertPolicy::set_allocated_alert_strategy(::google::monitoring::v3::AlertPolicy_AlertStrategy* alert_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.alert_strategy_;
  }
  if (alert_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alert_strategy);
    if (message_arena != submessage_arena) {
      alert_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert_strategy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alert_strategy_ = alert_strategy;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.alert_strategy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData>() {
  return ::google::monitoring::v3::AlertPolicy_Condition_EvaluationMissingData_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType>() {
  return ::google::monitoring::v3::AlertPolicy_ConditionCombinerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
