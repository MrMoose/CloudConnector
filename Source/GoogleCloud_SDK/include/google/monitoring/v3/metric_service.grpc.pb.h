// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/metric_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/metric_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// Manages metric descriptors, monitored resource descriptors, and
// time series data.
class MetricService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.MetricService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists monitored resource descriptors that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>> AsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>>(AsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>> PrepareAsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>>(PrepareAsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }
    // Gets a single monitored resource descriptor. This method does not require a Workspace.
    virtual ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::google::api::MonitoredResourceDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>> AsyncGetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>>(AsyncGetMonitoredResourceDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>> PrepareAsyncGetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>>(PrepareAsyncGetMonitoredResourceDescriptorRaw(context, request, cq));
    }
    // Lists metric descriptors that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>> AsyncListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>>(AsyncListMetricDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>> PrepareAsyncListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>>(PrepareAsyncListMetricDescriptorsRaw(context, request, cq));
    }
    // Gets a single metric descriptor. This method does not require a Workspace.
    virtual ::grpc::Status GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>> AsyncGetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>>(AsyncGetMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>> PrepareAsyncGetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>>(PrepareAsyncGetMetricDescriptorRaw(context, request, cq));
    }
    // Creates a new metric descriptor.
    // The creation is executed asynchronously and callers may check the returned
    // operation to track its progress.
    // User-created metric descriptors define
    // [custom metrics](https://cloud.google.com/monitoring/custom-metrics).
    virtual ::grpc::Status CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>> AsyncCreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>>(AsyncCreateMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>> PrepareAsyncCreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>>(PrepareAsyncCreateMetricDescriptorRaw(context, request, cq));
    }
    // Deletes a metric descriptor. Only user-created
    // [custom metrics](https://cloud.google.com/monitoring/custom-metrics) can be
    // deleted.
    virtual ::grpc::Status DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteMetricDescriptorRaw(context, request, cq));
    }
    // Lists time series that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::google::monitoring::v3::ListTimeSeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>> AsyncListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>>(AsyncListTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>> PrepareAsyncListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>>(PrepareAsyncListTimeSeriesRaw(context, request, cq));
    }
    // Creates or adds data to one or more time series.
    // The response is empty if all time series in the request were written.
    // If any time series could not be written, a corresponding failure message is
    // included in the error response.
    virtual ::grpc::Status CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCreateTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCreateTimeSeriesRaw(context, request, cq));
    }
    // Creates or adds data to one or more service time series. A service time
    // series is a time series for a metric from a Google Cloud service. The
    // response is empty if all time series in the request were written. If any
    // time series could not be written, a corresponding failure message is
    // included in the error response. This endpoint rejects writes to
    // user-defined metrics.
    // This method is only for use by Google Cloud services. Use
    // [projects.timeSeries.create][google.monitoring.v3.MetricService.CreateTimeSeries]
    // instead.
    virtual ::grpc::Status CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCreateServiceTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCreateServiceTimeSeriesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists monitored resource descriptors that match a filter. This method does not require a Workspace.
      virtual void ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single monitored resource descriptor. This method does not require a Workspace.
      virtual void GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists metric descriptors that match a filter. This method does not require a Workspace.
      virtual void ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single metric descriptor. This method does not require a Workspace.
      virtual void GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new metric descriptor.
      // The creation is executed asynchronously and callers may check the returned
      // operation to track its progress.
      // User-created metric descriptors define
      // [custom metrics](https://cloud.google.com/monitoring/custom-metrics).
      virtual void CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a metric descriptor. Only user-created
      // [custom metrics](https://cloud.google.com/monitoring/custom-metrics) can be
      // deleted.
      virtual void DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists time series that match a filter. This method does not require a Workspace.
      virtual void ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates or adds data to one or more time series.
      // The response is empty if all time series in the request were written.
      // If any time series could not be written, a corresponding failure message is
      // included in the error response.
      virtual void CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates or adds data to one or more service time series. A service time
      // series is a time series for a metric from a Google Cloud service. The
      // response is empty if all time series in the request were written. If any
      // time series could not be written, a corresponding failure message is
      // included in the error response. This endpoint rejects writes to
      // user-defined metrics.
      // This method is only for use by Google Cloud services. Use
      // [projects.timeSeries.create][google.monitoring.v3.MetricService.CreateTimeSeries]
      // instead.
      virtual void CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* PrepareAsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>* AsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MonitoredResourceDescriptor>* PrepareAsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>* AsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListMetricDescriptorsResponse>* PrepareAsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>* AsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>* PrepareAsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>* AsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::MetricDescriptor>* PrepareAsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>* AsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListTimeSeriesResponse>* PrepareAsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCreateServiceTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCreateServiceTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>> AsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>>(AsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>> PrepareAsyncListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>>(PrepareAsyncListMonitoredResourceDescriptorsRaw(context, request, cq));
    }
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::google::api::MonitoredResourceDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>> AsyncGetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>>(AsyncGetMonitoredResourceDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>> PrepareAsyncGetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>>(PrepareAsyncGetMonitoredResourceDescriptorRaw(context, request, cq));
    }
    ::grpc::Status ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>> AsyncListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>>(AsyncListMetricDescriptorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>> PrepareAsyncListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>>(PrepareAsyncListMetricDescriptorsRaw(context, request, cq));
    }
    ::grpc::Status GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>> AsyncGetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>>(AsyncGetMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>> PrepareAsyncGetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>>(PrepareAsyncGetMetricDescriptorRaw(context, request, cq));
    }
    ::grpc::Status CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>> AsyncCreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>>(AsyncCreateMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>> PrepareAsyncCreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>>(PrepareAsyncCreateMetricDescriptorRaw(context, request, cq));
    }
    ::grpc::Status DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteMetricDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteMetricDescriptorRaw(context, request, cq));
    }
    ::grpc::Status ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::google::monitoring::v3::ListTimeSeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>> AsyncListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>>(AsyncListTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>> PrepareAsyncListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>>(PrepareAsyncListTimeSeriesRaw(context, request, cq));
    }
    ::grpc::Status CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCreateTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCreateTimeSeriesRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCreateServiceTimeSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCreateServiceTimeSeriesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response, std::function<void(::grpc::Status)>) override;
      void GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, std::function<void(::grpc::Status)>) override;
      void GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, std::function<void(::grpc::Status)>) override;
      void CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CreateServiceTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* PrepareAsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>* AsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>* PrepareAsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>* AsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>* PrepareAsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* AsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* PrepareAsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* AsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* PrepareAsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>* AsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>* PrepareAsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCreateServiceTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCreateServiceTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListMonitoredResourceDescriptors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMonitoredResourceDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_ListMetricDescriptors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetricDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMetricDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMetricDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTimeSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTimeSeries_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceTimeSeries_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists monitored resource descriptors that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response);
    // Gets a single monitored resource descriptor. This method does not require a Workspace.
    virtual ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response);
    // Lists metric descriptors that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response);
    // Gets a single metric descriptor. This method does not require a Workspace.
    virtual ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response);
    // Creates a new metric descriptor.
    // The creation is executed asynchronously and callers may check the returned
    // operation to track its progress.
    // User-created metric descriptors define
    // [custom metrics](https://cloud.google.com/monitoring/custom-metrics).
    virtual ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response);
    // Deletes a metric descriptor. Only user-created
    // [custom metrics](https://cloud.google.com/monitoring/custom-metrics) can be
    // deleted.
    virtual ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response);
    // Lists time series that match a filter. This method does not require a Workspace.
    virtual ::grpc::Status ListTimeSeries(::grpc::ServerContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response);
    // Creates or adds data to one or more time series.
    // The response is empty if all time series in the request were written.
    // If any time series could not be written, a corresponding failure message is
    // included in the error response.
    virtual ::grpc::Status CreateTimeSeries(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response);
    // Creates or adds data to one or more service time series. A service time
    // series is a time series for a metric from a Google Cloud service. The
    // response is empty if all time series in the request were written. If any
    // time series could not be written, a corresponding failure message is
    // included in the error response. This endpoint rejects writes to
    // user-defined metrics.
    // This method is only for use by Google Cloud services. Use
    // [projects.timeSeries.create][google.monitoring.v3.MetricService.CreateTimeSeries]
    // instead.
    virtual ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMonitoredResourceDescriptors(::grpc::ServerContext* context, ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMonitoredResourceDescriptor(::grpc::ServerContext* context, ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::MonitoredResourceDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMetricDescriptors(::grpc::ServerContext* context, ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListMetricDescriptorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetricDescriptor(::grpc::ServerContext* context, ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::MetricDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMetricDescriptor(::grpc::ServerContext* context, ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::MetricDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMetricDescriptor(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTimeSeries(::grpc::ServerContext* context, ::google::monitoring::v3::ListTimeSeriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListTimeSeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTimeSeries(::grpc::ServerContext* context, ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceTimeSeries(::grpc::ServerContext* context, ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListMonitoredResourceDescriptors<WithAsyncMethod_GetMonitoredResourceDescriptor<WithAsyncMethod_ListMetricDescriptors<WithAsyncMethod_GetMetricDescriptor<WithAsyncMethod_CreateMetricDescriptor<WithAsyncMethod_DeleteMetricDescriptor<WithAsyncMethod_ListTimeSeries<WithAsyncMethod_CreateTimeSeries<WithAsyncMethod_CreateServiceTimeSeries<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response) { return this->ListMonitoredResourceDescriptors(context, request, response); }));}
    void SetMessageAllocatorFor_ListMonitoredResourceDescriptors(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMonitoredResourceDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response) { return this->GetMonitoredResourceDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetMonitoredResourceDescriptor(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMonitoredResourceDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response) { return this->ListMetricDescriptors(context, request, response); }));}
    void SetMessageAllocatorFor_ListMetricDescriptors(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMetricDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response) { return this->GetMetricDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetricDescriptor(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response) { return this->CreateMetricDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMetricDescriptor(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response) { return this->DeleteMetricDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMetricDescriptor(
        ::grpc::MessageAllocator< ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response) { return this->ListTimeSeries(context, request, response); }));}
    void SetMessageAllocatorFor_ListTimeSeries(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response) { return this->CreateTimeSeries(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTimeSeries(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response) { return this->CreateServiceTimeSeries(context, request, response); }));}
    void SetMessageAllocatorFor_CreateServiceTimeSeries(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateServiceTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListMonitoredResourceDescriptors<WithCallbackMethod_GetMonitoredResourceDescriptor<WithCallbackMethod_ListMetricDescriptors<WithCallbackMethod_GetMetricDescriptor<WithCallbackMethod_CreateMetricDescriptor<WithCallbackMethod_DeleteMetricDescriptor<WithCallbackMethod_ListTimeSeries<WithCallbackMethod_CreateTimeSeries<WithCallbackMethod_CreateServiceTimeSeries<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMonitoredResourceDescriptors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMonitoredResourceDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMetricDescriptors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetricDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMetricDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMetricDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTimeSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTimeSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceTimeSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListMonitoredResourceDescriptors(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMonitoredResourceDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMonitoredResourceDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMonitoredResourceDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListMetricDescriptors(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMetricDescriptors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetricDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMetricDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMetricDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMetricDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTimeSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTimeSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateServiceTimeSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateServiceTimeSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMonitoredResourceDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListMonitoredResourceDescriptors() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* streamer) {
                       return this->StreamedListMonitoredResourceDescriptors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListMonitoredResourceDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMonitoredResourceDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMonitoredResourceDescriptors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest,::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMonitoredResourceDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMonitoredResourceDescriptor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>* streamer) {
                       return this->StreamedGetMonitoredResourceDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMonitoredResourceDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMonitoredResourceDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* /*request*/, ::google::api::MonitoredResourceDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMonitoredResourceDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest,::google::api::MonitoredResourceDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMetricDescriptors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListMetricDescriptors() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>* streamer) {
                       return this->StreamedListMetricDescriptors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListMetricDescriptors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMetricDescriptors(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListMetricDescriptorsRequest* /*request*/, ::google::monitoring::v3::ListMetricDescriptorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMetricDescriptors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListMetricDescriptorsRequest,::google::monitoring::v3::ListMetricDescriptorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetricDescriptor() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>* streamer) {
                       return this->StreamedGetMetricDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetricDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetMetricDescriptorRequest,::google::api::MetricDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMetricDescriptor() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>* streamer) {
                       return this->StreamedCreateMetricDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateMetricDescriptorRequest* /*request*/, ::google::api::MetricDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMetricDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateMetricDescriptorRequest,::google::api::MetricDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMetricDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMetricDescriptor() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteMetricDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMetricDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMetricDescriptor(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMetricDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteMetricDescriptorRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTimeSeries() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>* streamer) {
                       return this->StreamedListTimeSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListTimeSeriesRequest* /*request*/, ::google::monitoring::v3::ListTimeSeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTimeSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListTimeSeriesRequest,::google::monitoring::v3::ListTimeSeriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTimeSeries() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCreateTimeSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTimeSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateTimeSeriesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceTimeSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateServiceTimeSeries() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCreateServiceTimeSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateServiceTimeSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceTimeSeries(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateTimeSeriesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceTimeSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateTimeSeriesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListMonitoredResourceDescriptors<WithStreamedUnaryMethod_GetMonitoredResourceDescriptor<WithStreamedUnaryMethod_ListMetricDescriptors<WithStreamedUnaryMethod_GetMetricDescriptor<WithStreamedUnaryMethod_CreateMetricDescriptor<WithStreamedUnaryMethod_DeleteMetricDescriptor<WithStreamedUnaryMethod_ListTimeSeries<WithStreamedUnaryMethod_CreateTimeSeries<WithStreamedUnaryMethod_CreateServiceTimeSeries<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListMonitoredResourceDescriptors<WithStreamedUnaryMethod_GetMonitoredResourceDescriptor<WithStreamedUnaryMethod_ListMetricDescriptors<WithStreamedUnaryMethod_GetMetricDescriptor<WithStreamedUnaryMethod_CreateMetricDescriptor<WithStreamedUnaryMethod_DeleteMetricDescriptor<WithStreamedUnaryMethod_ListTimeSeries<WithStreamedUnaryMethod_CreateTimeSeries<WithStreamedUnaryMethod_CreateServiceTimeSeries<Service > > > > > > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto__INCLUDED
