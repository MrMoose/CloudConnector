// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/group_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/group.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateGroupRequest;
struct CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class DeleteGroupRequest;
struct DeleteGroupRequestDefaultTypeInternal;
extern DeleteGroupRequestDefaultTypeInternal _DeleteGroupRequest_default_instance_;
class GetGroupRequest;
struct GetGroupRequestDefaultTypeInternal;
extern GetGroupRequestDefaultTypeInternal _GetGroupRequest_default_instance_;
class ListGroupMembersRequest;
struct ListGroupMembersRequestDefaultTypeInternal;
extern ListGroupMembersRequestDefaultTypeInternal _ListGroupMembersRequest_default_instance_;
class ListGroupMembersResponse;
struct ListGroupMembersResponseDefaultTypeInternal;
extern ListGroupMembersResponseDefaultTypeInternal _ListGroupMembersResponse_default_instance_;
class ListGroupsRequest;
struct ListGroupsRequestDefaultTypeInternal;
extern ListGroupsRequestDefaultTypeInternal _ListGroupsRequest_default_instance_;
class ListGroupsResponse;
struct ListGroupsResponseDefaultTypeInternal;
extern ListGroupsResponseDefaultTypeInternal _ListGroupsResponse_default_instance_;
class UpdateGroupRequest;
struct UpdateGroupRequestDefaultTypeInternal;
extern UpdateGroupRequestDefaultTypeInternal _UpdateGroupRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateGroupRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateGroupRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteGroupRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteGroupRequest>(Arena*);
template<> ::google::monitoring::v3::GetGroupRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetGroupRequest>(Arena*);
template<> ::google::monitoring::v3::ListGroupMembersRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListGroupMembersRequest>(Arena*);
template<> ::google::monitoring::v3::ListGroupMembersResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListGroupMembersResponse>(Arena*);
template<> ::google::monitoring::v3::ListGroupsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListGroupsRequest>(Arena*);
template<> ::google::monitoring::v3::ListGroupsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListGroupsResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateGroupRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateGroupRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class ListGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListGroupsRequest) */ {
 public:
  inline ListGroupsRequest() : ListGroupsRequest(nullptr) {}
  ~ListGroupsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGroupsRequest(const ListGroupsRequest& from);
  ListGroupsRequest(ListGroupsRequest&& from) noexcept
    : ListGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListGroupsRequest& operator=(const ListGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupsRequest& operator=(ListGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum FilterCase {
    kChildrenOfGroup = 2,
    kAncestorsOfGroup = 3,
    kDescendantsOfGroup = 4,
    FILTER_NOT_SET = 0,
  };

  static inline const ListGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListGroupsRequest*>(
               &_ListGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListGroupsRequest& a, ListGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListGroupsRequest& from) {
    ListGroupsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListGroupsRequest";
  }
  protected:
  explicit ListGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 6,
    kNameFieldNumber = 7,
    kPageSizeFieldNumber = 5,
    kChildrenOfGroupFieldNumber = 2,
    kAncestorsOfGroupFieldNumber = 3,
    kDescendantsOfGroupFieldNumber = 4,
  };
  // string page_token = 6;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 7 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 page_size = 5;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // string children_of_group = 2 [(.google.api.resource_reference) = {
  bool has_children_of_group() const;
  private:
  bool _internal_has_children_of_group() const;
  public:
  void clear_children_of_group();
  const std::string& children_of_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_children_of_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_children_of_group();
  PROTOBUF_NODISCARD std::string* release_children_of_group();
  void set_allocated_children_of_group(std::string* children_of_group);
  private:
  const std::string& _internal_children_of_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_children_of_group(const std::string& value);
  std::string* _internal_mutable_children_of_group();
  public:

  // string ancestors_of_group = 3 [(.google.api.resource_reference) = {
  bool has_ancestors_of_group() const;
  private:
  bool _internal_has_ancestors_of_group() const;
  public:
  void clear_ancestors_of_group();
  const std::string& ancestors_of_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ancestors_of_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ancestors_of_group();
  PROTOBUF_NODISCARD std::string* release_ancestors_of_group();
  void set_allocated_ancestors_of_group(std::string* ancestors_of_group);
  private:
  const std::string& _internal_ancestors_of_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ancestors_of_group(const std::string& value);
  std::string* _internal_mutable_ancestors_of_group();
  public:

  // string descendants_of_group = 4 [(.google.api.resource_reference) = {
  bool has_descendants_of_group() const;
  private:
  bool _internal_has_descendants_of_group() const;
  public:
  void clear_descendants_of_group();
  const std::string& descendants_of_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descendants_of_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descendants_of_group();
  PROTOBUF_NODISCARD std::string* release_descendants_of_group();
  void set_allocated_descendants_of_group(std::string* descendants_of_group);
  private:
  const std::string& _internal_descendants_of_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descendants_of_group(const std::string& value);
  std::string* _internal_mutable_descendants_of_group();
  public:

  void clear_filter();
  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListGroupsRequest)
 private:
  class _Internal;
  void set_has_children_of_group();
  void set_has_ancestors_of_group();
  void set_has_descendants_of_group();

  inline bool has_filter() const;
  inline void clear_has_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t page_size_;
    union FilterUnion {
      constexpr FilterUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr children_of_group_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ancestors_of_group_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descendants_of_group_;
    } filter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListGroupsResponse) */ {
 public:
  inline ListGroupsResponse() : ListGroupsResponse(nullptr) {}
  ~ListGroupsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGroupsResponse(const ListGroupsResponse& from);
  ListGroupsResponse(ListGroupsResponse&& from) noexcept
    : ListGroupsResponse() {
    *this = ::std::move(from);
  }

  inline ListGroupsResponse& operator=(const ListGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupsResponse& operator=(ListGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListGroupsResponse*>(
               &_ListGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListGroupsResponse& a, ListGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListGroupsResponse& from) {
    ListGroupsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListGroupsResponse";
  }
  protected:
  explicit ListGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.Group group = 1;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  ::google::monitoring::v3::Group* mutable_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Group >*
      mutable_group();
  private:
  const ::google::monitoring::v3::Group& _internal_group(int index) const;
  ::google::monitoring::v3::Group* _internal_add_group();
  public:
  const ::google::monitoring::v3::Group& group(int index) const;
  ::google::monitoring::v3::Group* add_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Group >&
      group() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Group > group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetGroupRequest) */ {
 public:
  inline GetGroupRequest() : GetGroupRequest(nullptr) {}
  ~GetGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupRequest(const GetGroupRequest& from);
  GetGroupRequest(GetGroupRequest&& from) noexcept
    : GetGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupRequest& operator=(const GetGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupRequest& operator=(GetGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupRequest*>(
               &_GetGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetGroupRequest& a, GetGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupRequest& from) {
    GetGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetGroupRequest";
  }
  protected:
  explicit GetGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateGroupRequest) */ {
 public:
  inline CreateGroupRequest() : CreateGroupRequest(nullptr) {}
  ~CreateGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupRequest& from) {
    CreateGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateGroupRequest";
  }
  protected:
  explicit CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kGroupFieldNumber = 2,
    kValidateOnlyFieldNumber = 3,
  };
  // string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.Group group = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::google::monitoring::v3::Group& group() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Group* release_group();
  ::google::monitoring::v3::Group* mutable_group();
  void set_allocated_group(::google::monitoring::v3::Group* group);
  private:
  const ::google::monitoring::v3::Group& _internal_group() const;
  ::google::monitoring::v3::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::google::monitoring::v3::Group* group);
  ::google::monitoring::v3::Group* unsafe_arena_release_group();

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::monitoring::v3::Group* group_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateGroupRequest) */ {
 public:
  inline UpdateGroupRequest() : UpdateGroupRequest(nullptr) {}
  ~UpdateGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateGroupRequest(const UpdateGroupRequest& from);
  UpdateGroupRequest(UpdateGroupRequest&& from) noexcept
    : UpdateGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRequest& operator=(const UpdateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGroupRequest& operator=(UpdateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRequest*>(
               &_UpdateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateGroupRequest& a, UpdateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateGroupRequest& from) {
    UpdateGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateGroupRequest";
  }
  protected:
  explicit UpdateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 2,
    kValidateOnlyFieldNumber = 3,
  };
  // .google.monitoring.v3.Group group = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::google::monitoring::v3::Group& group() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Group* release_group();
  ::google::monitoring::v3::Group* mutable_group();
  void set_allocated_group(::google::monitoring::v3::Group* group);
  private:
  const ::google::monitoring::v3::Group& _internal_group() const;
  ::google::monitoring::v3::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::google::monitoring::v3::Group* group);
  ::google::monitoring::v3::Group* unsafe_arena_release_group();

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::Group* group_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteGroupRequest) */ {
 public:
  inline DeleteGroupRequest() : DeleteGroupRequest(nullptr) {}
  ~DeleteGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupRequest(const DeleteGroupRequest& from);
  DeleteGroupRequest(DeleteGroupRequest&& from) noexcept
    : DeleteGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRequest& operator=(const DeleteGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRequest& operator=(DeleteGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRequest*>(
               &_DeleteGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteGroupRequest& a, DeleteGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteGroupRequest& from) {
    DeleteGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteGroupRequest";
  }
  protected:
  explicit DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRecursiveFieldNumber = 4,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool recursive = 4;
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool recursive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListGroupMembersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListGroupMembersRequest) */ {
 public:
  inline ListGroupMembersRequest() : ListGroupMembersRequest(nullptr) {}
  ~ListGroupMembersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListGroupMembersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGroupMembersRequest(const ListGroupMembersRequest& from);
  ListGroupMembersRequest(ListGroupMembersRequest&& from) noexcept
    : ListGroupMembersRequest() {
    *this = ::std::move(from);
  }

  inline ListGroupMembersRequest& operator=(const ListGroupMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupMembersRequest& operator=(ListGroupMembersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListGroupMembersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListGroupMembersRequest* internal_default_instance() {
    return reinterpret_cast<const ListGroupMembersRequest*>(
               &_ListGroupMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListGroupMembersRequest& a, ListGroupMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupMembersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupMembersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListGroupMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListGroupMembersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListGroupMembersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListGroupMembersRequest& from) {
    ListGroupMembersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupMembersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListGroupMembersRequest";
  }
  protected:
  explicit ListGroupMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 4,
    kFilterFieldNumber = 5,
    kNameFieldNumber = 7,
    kIntervalFieldNumber = 6,
    kPageSizeFieldNumber = 3,
  };
  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 5;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string name = 7 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.TimeInterval interval = 6;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::google::monitoring::v3::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeInterval* release_interval();
  ::google::monitoring::v3::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::monitoring::v3::TimeInterval* interval);
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_interval() const;
  ::google::monitoring::v3::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::monitoring::v3::TimeInterval* interval);
  ::google::monitoring::v3::TimeInterval* unsafe_arena_release_interval();

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListGroupMembersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::monitoring::v3::TimeInterval* interval_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListGroupMembersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListGroupMembersResponse) */ {
 public:
  inline ListGroupMembersResponse() : ListGroupMembersResponse(nullptr) {}
  ~ListGroupMembersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGroupMembersResponse(const ListGroupMembersResponse& from);
  ListGroupMembersResponse(ListGroupMembersResponse&& from) noexcept
    : ListGroupMembersResponse() {
    *this = ::std::move(from);
  }

  inline ListGroupMembersResponse& operator=(const ListGroupMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGroupMembersResponse& operator=(ListGroupMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListGroupMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListGroupMembersResponse* internal_default_instance() {
    return reinterpret_cast<const ListGroupMembersResponse*>(
               &_ListGroupMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListGroupMembersResponse& a, ListGroupMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGroupMembersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGroupMembersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListGroupMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListGroupMembersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListGroupMembersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListGroupMembersResponse& from) {
    ListGroupMembersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGroupMembersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListGroupMembersResponse";
  }
  protected:
  explicit ListGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
    kTotalSizeFieldNumber = 3,
  };
  // repeated .google.api.MonitoredResource members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::google::api::MonitoredResource* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResource >*
      mutable_members();
  private:
  const ::google::api::MonitoredResource& _internal_members(int index) const;
  ::google::api::MonitoredResource* _internal_add_members();
  public:
  const ::google::api::MonitoredResource& members(int index) const;
  ::google::api::MonitoredResource* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResource >&
      members() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // int32 total_size = 3;
  void clear_total_size();
  int32_t total_size() const;
  void set_total_size(int32_t value);
  private:
  int32_t _internal_total_size() const;
  void _internal_set_total_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListGroupMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResource > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    int32_t total_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListGroupsRequest

// string name = 7 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListGroupsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListGroupsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.name)
}
inline std::string* ListGroupsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsRequest.name)
  return _s;
}
inline const std::string& ListGroupsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListGroupsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsRequest.name)
  return _impl_.name_.Release();
}
inline void ListGroupsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsRequest.name)
}

// string children_of_group = 2 [(.google.api.resource_reference) = {
inline bool ListGroupsRequest::_internal_has_children_of_group() const {
  return filter_case() == kChildrenOfGroup;
}
inline bool ListGroupsRequest::has_children_of_group() const {
  return _internal_has_children_of_group();
}
inline void ListGroupsRequest::set_has_children_of_group() {
  _impl_._oneof_case_[0] = kChildrenOfGroup;
}
inline void ListGroupsRequest::clear_children_of_group() {
  if (_internal_has_children_of_group()) {
    _impl_.filter_.children_of_group_.Destroy();
    clear_has_filter();
  }
}
inline const std::string& ListGroupsRequest::children_of_group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.children_of_group)
  return _internal_children_of_group();
}
template <typename ArgT0, typename... ArgT>
inline void ListGroupsRequest::set_children_of_group(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_children_of_group()) {
    clear_filter();
    set_has_children_of_group();
    _impl_.filter_.children_of_group_.InitDefault();
  }
  _impl_.filter_.children_of_group_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.children_of_group)
}
inline std::string* ListGroupsRequest::mutable_children_of_group() {
  std::string* _s = _internal_mutable_children_of_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsRequest.children_of_group)
  return _s;
}
inline const std::string& ListGroupsRequest::_internal_children_of_group() const {
  if (_internal_has_children_of_group()) {
    return _impl_.filter_.children_of_group_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ListGroupsRequest::_internal_set_children_of_group(const std::string& value) {
  if (!_internal_has_children_of_group()) {
    clear_filter();
    set_has_children_of_group();
    _impl_.filter_.children_of_group_.InitDefault();
  }
  _impl_.filter_.children_of_group_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::_internal_mutable_children_of_group() {
  if (!_internal_has_children_of_group()) {
    clear_filter();
    set_has_children_of_group();
    _impl_.filter_.children_of_group_.InitDefault();
  }
  return _impl_.filter_.children_of_group_.Mutable(      GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::release_children_of_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsRequest.children_of_group)
  if (_internal_has_children_of_group()) {
    clear_has_filter();
    return _impl_.filter_.children_of_group_.Release();
  } else {
    return nullptr;
  }
}
inline void ListGroupsRequest::set_allocated_children_of_group(std::string* children_of_group) {
  if (has_filter()) {
    clear_filter();
  }
  if (children_of_group != nullptr) {
    set_has_children_of_group();
    _impl_.filter_.children_of_group_.InitAllocated(children_of_group, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsRequest.children_of_group)
}

// string ancestors_of_group = 3 [(.google.api.resource_reference) = {
inline bool ListGroupsRequest::_internal_has_ancestors_of_group() const {
  return filter_case() == kAncestorsOfGroup;
}
inline bool ListGroupsRequest::has_ancestors_of_group() const {
  return _internal_has_ancestors_of_group();
}
inline void ListGroupsRequest::set_has_ancestors_of_group() {
  _impl_._oneof_case_[0] = kAncestorsOfGroup;
}
inline void ListGroupsRequest::clear_ancestors_of_group() {
  if (_internal_has_ancestors_of_group()) {
    _impl_.filter_.ancestors_of_group_.Destroy();
    clear_has_filter();
  }
}
inline const std::string& ListGroupsRequest::ancestors_of_group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.ancestors_of_group)
  return _internal_ancestors_of_group();
}
template <typename ArgT0, typename... ArgT>
inline void ListGroupsRequest::set_ancestors_of_group(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ancestors_of_group()) {
    clear_filter();
    set_has_ancestors_of_group();
    _impl_.filter_.ancestors_of_group_.InitDefault();
  }
  _impl_.filter_.ancestors_of_group_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.ancestors_of_group)
}
inline std::string* ListGroupsRequest::mutable_ancestors_of_group() {
  std::string* _s = _internal_mutable_ancestors_of_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsRequest.ancestors_of_group)
  return _s;
}
inline const std::string& ListGroupsRequest::_internal_ancestors_of_group() const {
  if (_internal_has_ancestors_of_group()) {
    return _impl_.filter_.ancestors_of_group_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ListGroupsRequest::_internal_set_ancestors_of_group(const std::string& value) {
  if (!_internal_has_ancestors_of_group()) {
    clear_filter();
    set_has_ancestors_of_group();
    _impl_.filter_.ancestors_of_group_.InitDefault();
  }
  _impl_.filter_.ancestors_of_group_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::_internal_mutable_ancestors_of_group() {
  if (!_internal_has_ancestors_of_group()) {
    clear_filter();
    set_has_ancestors_of_group();
    _impl_.filter_.ancestors_of_group_.InitDefault();
  }
  return _impl_.filter_.ancestors_of_group_.Mutable(      GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::release_ancestors_of_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsRequest.ancestors_of_group)
  if (_internal_has_ancestors_of_group()) {
    clear_has_filter();
    return _impl_.filter_.ancestors_of_group_.Release();
  } else {
    return nullptr;
  }
}
inline void ListGroupsRequest::set_allocated_ancestors_of_group(std::string* ancestors_of_group) {
  if (has_filter()) {
    clear_filter();
  }
  if (ancestors_of_group != nullptr) {
    set_has_ancestors_of_group();
    _impl_.filter_.ancestors_of_group_.InitAllocated(ancestors_of_group, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsRequest.ancestors_of_group)
}

// string descendants_of_group = 4 [(.google.api.resource_reference) = {
inline bool ListGroupsRequest::_internal_has_descendants_of_group() const {
  return filter_case() == kDescendantsOfGroup;
}
inline bool ListGroupsRequest::has_descendants_of_group() const {
  return _internal_has_descendants_of_group();
}
inline void ListGroupsRequest::set_has_descendants_of_group() {
  _impl_._oneof_case_[0] = kDescendantsOfGroup;
}
inline void ListGroupsRequest::clear_descendants_of_group() {
  if (_internal_has_descendants_of_group()) {
    _impl_.filter_.descendants_of_group_.Destroy();
    clear_has_filter();
  }
}
inline const std::string& ListGroupsRequest::descendants_of_group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.descendants_of_group)
  return _internal_descendants_of_group();
}
template <typename ArgT0, typename... ArgT>
inline void ListGroupsRequest::set_descendants_of_group(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_descendants_of_group()) {
    clear_filter();
    set_has_descendants_of_group();
    _impl_.filter_.descendants_of_group_.InitDefault();
  }
  _impl_.filter_.descendants_of_group_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.descendants_of_group)
}
inline std::string* ListGroupsRequest::mutable_descendants_of_group() {
  std::string* _s = _internal_mutable_descendants_of_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsRequest.descendants_of_group)
  return _s;
}
inline const std::string& ListGroupsRequest::_internal_descendants_of_group() const {
  if (_internal_has_descendants_of_group()) {
    return _impl_.filter_.descendants_of_group_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ListGroupsRequest::_internal_set_descendants_of_group(const std::string& value) {
  if (!_internal_has_descendants_of_group()) {
    clear_filter();
    set_has_descendants_of_group();
    _impl_.filter_.descendants_of_group_.InitDefault();
  }
  _impl_.filter_.descendants_of_group_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::_internal_mutable_descendants_of_group() {
  if (!_internal_has_descendants_of_group()) {
    clear_filter();
    set_has_descendants_of_group();
    _impl_.filter_.descendants_of_group_.InitDefault();
  }
  return _impl_.filter_.descendants_of_group_.Mutable(      GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::release_descendants_of_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsRequest.descendants_of_group)
  if (_internal_has_descendants_of_group()) {
    clear_has_filter();
    return _impl_.filter_.descendants_of_group_.Release();
  } else {
    return nullptr;
  }
}
inline void ListGroupsRequest::set_allocated_descendants_of_group(std::string* descendants_of_group) {
  if (has_filter()) {
    clear_filter();
  }
  if (descendants_of_group != nullptr) {
    set_has_descendants_of_group();
    _impl_.filter_.descendants_of_group_.InitAllocated(descendants_of_group, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsRequest.descendants_of_group)
}

// int32 page_size = 5;
inline void ListGroupsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListGroupsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListGroupsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.page_size)
  return _internal_page_size();
}
inline void ListGroupsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListGroupsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.page_size)
}

// string page_token = 6;
inline void ListGroupsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListGroupsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsRequest.page_token)
}
inline std::string* ListGroupsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsRequest.page_token)
  return _s;
}
inline const std::string& ListGroupsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListGroupsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListGroupsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsRequest.page_token)
}

inline bool ListGroupsRequest::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void ListGroupsRequest::clear_has_filter() {
  _impl_._oneof_case_[0] = FILTER_NOT_SET;
}
inline ListGroupsRequest::FilterCase ListGroupsRequest::filter_case() const {
  return ListGroupsRequest::FilterCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListGroupsResponse

// repeated .google.monitoring.v3.Group group = 1;
inline int ListGroupsResponse::_internal_group_size() const {
  return _impl_.group_.size();
}
inline int ListGroupsResponse::group_size() const {
  return _internal_group_size();
}
inline ::google::monitoring::v3::Group* ListGroupsResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsResponse.group)
  return _impl_.group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Group >*
ListGroupsResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListGroupsResponse.group)
  return &_impl_.group_;
}
inline const ::google::monitoring::v3::Group& ListGroupsResponse::_internal_group(int index) const {
  return _impl_.group_.Get(index);
}
inline const ::google::monitoring::v3::Group& ListGroupsResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsResponse.group)
  return _internal_group(index);
}
inline ::google::monitoring::v3::Group* ListGroupsResponse::_internal_add_group() {
  return _impl_.group_.Add();
}
inline ::google::monitoring::v3::Group* ListGroupsResponse::add_group() {
  ::google::monitoring::v3::Group* _add = _internal_add_group();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListGroupsResponse.group)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Group >&
ListGroupsResponse::group() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListGroupsResponse.group)
  return _impl_.group_;
}

// string next_page_token = 2;
inline void ListGroupsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListGroupsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupsResponse.next_page_token)
}
inline std::string* ListGroupsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupsResponse.next_page_token)
  return _s;
}
inline const std::string& ListGroupsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListGroupsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListGroupsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetGroupRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetGroupRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetGroupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetGroupRequest.name)
}
inline std::string* GetGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetGroupRequest.name)
  return _s;
}
inline const std::string& GetGroupRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetGroupRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetGroupRequest.name)
  return _impl_.name_.Release();
}
inline void GetGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetGroupRequest.name)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateGroupRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateGroupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateGroupRequest.name)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateGroupRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateGroupRequest.name)
  return _impl_.name_.Release();
}
inline void CreateGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateGroupRequest.name)
}

// .google.monitoring.v3.Group group = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateGroupRequest::_internal_has_group() const {
  return this != internal_default_instance() && _impl_.group_ != nullptr;
}
inline bool CreateGroupRequest::has_group() const {
  return _internal_has_group();
}
inline const ::google::monitoring::v3::Group& CreateGroupRequest::_internal_group() const {
  const ::google::monitoring::v3::Group* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Group&>(
      ::google::monitoring::v3::_Group_default_instance_);
}
inline const ::google::monitoring::v3::Group& CreateGroupRequest::group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateGroupRequest.group)
  return _internal_group();
}
inline void CreateGroupRequest::unsafe_arena_set_allocated_group(
    ::google::monitoring::v3::Group* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateGroupRequest.group)
}
inline ::google::monitoring::v3::Group* CreateGroupRequest::release_group() {
  
  ::google::monitoring::v3::Group* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Group* CreateGroupRequest::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateGroupRequest.group)
  
  ::google::monitoring::v3::Group* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Group* CreateGroupRequest::_internal_mutable_group() {
  
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Group>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::google::monitoring::v3::Group* CreateGroupRequest::mutable_group() {
  ::google::monitoring::v3::Group* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateGroupRequest.group)
  return _msg;
}
inline void CreateGroupRequest::set_allocated_group(::google::monitoring::v3::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateGroupRequest.group)
}

// bool validate_only = 3;
inline void CreateGroupRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool CreateGroupRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool CreateGroupRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateGroupRequest.validate_only)
  return _internal_validate_only();
}
inline void CreateGroupRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void CreateGroupRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateGroupRequest.validate_only)
}

// -------------------------------------------------------------------

// UpdateGroupRequest

// .google.monitoring.v3.Group group = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateGroupRequest::_internal_has_group() const {
  return this != internal_default_instance() && _impl_.group_ != nullptr;
}
inline bool UpdateGroupRequest::has_group() const {
  return _internal_has_group();
}
inline const ::google::monitoring::v3::Group& UpdateGroupRequest::_internal_group() const {
  const ::google::monitoring::v3::Group* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Group&>(
      ::google::monitoring::v3::_Group_default_instance_);
}
inline const ::google::monitoring::v3::Group& UpdateGroupRequest::group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateGroupRequest.group)
  return _internal_group();
}
inline void UpdateGroupRequest::unsafe_arena_set_allocated_group(
    ::google::monitoring::v3::Group* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateGroupRequest.group)
}
inline ::google::monitoring::v3::Group* UpdateGroupRequest::release_group() {
  
  ::google::monitoring::v3::Group* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Group* UpdateGroupRequest::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateGroupRequest.group)
  
  ::google::monitoring::v3::Group* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Group* UpdateGroupRequest::_internal_mutable_group() {
  
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Group>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::google::monitoring::v3::Group* UpdateGroupRequest::mutable_group() {
  ::google::monitoring::v3::Group* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateGroupRequest.group)
  return _msg;
}
inline void UpdateGroupRequest::set_allocated_group(::google::monitoring::v3::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateGroupRequest.group)
}

// bool validate_only = 3;
inline void UpdateGroupRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UpdateGroupRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UpdateGroupRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateGroupRequest.validate_only)
  return _internal_validate_only();
}
inline void UpdateGroupRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UpdateGroupRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UpdateGroupRequest.validate_only)
}

// -------------------------------------------------------------------

// DeleteGroupRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteGroupRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteGroupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteGroupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteGroupRequest.name)
}
inline std::string* DeleteGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteGroupRequest.name)
  return _s;
}
inline const std::string& DeleteGroupRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteGroupRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteGroupRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteGroupRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteGroupRequest.name)
}

// bool recursive = 4;
inline void DeleteGroupRequest::clear_recursive() {
  _impl_.recursive_ = false;
}
inline bool DeleteGroupRequest::_internal_recursive() const {
  return _impl_.recursive_;
}
inline bool DeleteGroupRequest::recursive() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteGroupRequest.recursive)
  return _internal_recursive();
}
inline void DeleteGroupRequest::_internal_set_recursive(bool value) {
  
  _impl_.recursive_ = value;
}
inline void DeleteGroupRequest::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteGroupRequest.recursive)
}

// -------------------------------------------------------------------

// ListGroupMembersRequest

// string name = 7 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListGroupMembersRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListGroupMembersRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupMembersRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersRequest.name)
}
inline std::string* ListGroupMembersRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersRequest.name)
  return _s;
}
inline const std::string& ListGroupMembersRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListGroupMembersRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupMembersRequest.name)
  return _impl_.name_.Release();
}
inline void ListGroupMembersRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupMembersRequest.name)
}

// int32 page_size = 3;
inline void ListGroupMembersRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListGroupMembersRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListGroupMembersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersRequest.page_size)
  return _internal_page_size();
}
inline void ListGroupMembersRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListGroupMembersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersRequest.page_size)
}

// string page_token = 4;
inline void ListGroupMembersRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListGroupMembersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupMembersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersRequest.page_token)
}
inline std::string* ListGroupMembersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersRequest.page_token)
  return _s;
}
inline const std::string& ListGroupMembersRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListGroupMembersRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupMembersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListGroupMembersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupMembersRequest.page_token)
}

// string filter = 5;
inline void ListGroupMembersRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListGroupMembersRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupMembersRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersRequest.filter)
}
inline std::string* ListGroupMembersRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersRequest.filter)
  return _s;
}
inline const std::string& ListGroupMembersRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListGroupMembersRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupMembersRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupMembersRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListGroupMembersRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupMembersRequest.filter)
}

// .google.monitoring.v3.TimeInterval interval = 6;
inline bool ListGroupMembersRequest::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool ListGroupMembersRequest::has_interval() const {
  return _internal_has_interval();
}
inline const ::google::monitoring::v3::TimeInterval& ListGroupMembersRequest::_internal_interval() const {
  const ::google::monitoring::v3::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeInterval&>(
      ::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline const ::google::monitoring::v3::TimeInterval& ListGroupMembersRequest::interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersRequest.interval)
  return _internal_interval();
}
inline void ListGroupMembersRequest::unsafe_arena_set_allocated_interval(
    ::google::monitoring::v3::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.ListGroupMembersRequest.interval)
}
inline ::google::monitoring::v3::TimeInterval* ListGroupMembersRequest::release_interval() {
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* ListGroupMembersRequest::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupMembersRequest.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* ListGroupMembersRequest::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::monitoring::v3::TimeInterval* ListGroupMembersRequest::mutable_interval() {
  ::google::monitoring::v3::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersRequest.interval)
  return _msg;
}
inline void ListGroupMembersRequest::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupMembersRequest.interval)
}

// -------------------------------------------------------------------

// ListGroupMembersResponse

// repeated .google.api.MonitoredResource members = 1;
inline int ListGroupMembersResponse::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int ListGroupMembersResponse::members_size() const {
  return _internal_members_size();
}
inline ::google::api::MonitoredResource* ListGroupMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersResponse.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResource >*
ListGroupMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListGroupMembersResponse.members)
  return &_impl_.members_;
}
inline const ::google::api::MonitoredResource& ListGroupMembersResponse::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::google::api::MonitoredResource& ListGroupMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersResponse.members)
  return _internal_members(index);
}
inline ::google::api::MonitoredResource* ListGroupMembersResponse::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::google::api::MonitoredResource* ListGroupMembersResponse::add_members() {
  ::google::api::MonitoredResource* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListGroupMembersResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResource >&
ListGroupMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListGroupMembersResponse.members)
  return _impl_.members_;
}

// string next_page_token = 2;
inline void ListGroupMembersResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListGroupMembersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListGroupMembersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersResponse.next_page_token)
}
inline std::string* ListGroupMembersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListGroupMembersResponse.next_page_token)
  return _s;
}
inline const std::string& ListGroupMembersResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListGroupMembersResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListGroupMembersResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListGroupMembersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListGroupMembersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListGroupMembersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListGroupMembersResponse.next_page_token)
}

// int32 total_size = 3;
inline void ListGroupMembersResponse::clear_total_size() {
  _impl_.total_size_ = 0;
}
inline int32_t ListGroupMembersResponse::_internal_total_size() const {
  return _impl_.total_size_;
}
inline int32_t ListGroupMembersResponse::total_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListGroupMembersResponse.total_size)
  return _internal_total_size();
}
inline void ListGroupMembersResponse::_internal_set_total_size(int32_t value) {
  
  _impl_.total_size_ = value;
}
inline void ListGroupMembersResponse::set_total_size(int32_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListGroupMembersResponse.total_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fgroup_5fservice_2eproto
