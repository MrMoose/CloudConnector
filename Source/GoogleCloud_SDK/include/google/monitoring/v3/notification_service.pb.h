// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/notification_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/notification.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateNotificationChannelRequest;
struct CreateNotificationChannelRequestDefaultTypeInternal;
extern CreateNotificationChannelRequestDefaultTypeInternal _CreateNotificationChannelRequest_default_instance_;
class DeleteNotificationChannelRequest;
struct DeleteNotificationChannelRequestDefaultTypeInternal;
extern DeleteNotificationChannelRequestDefaultTypeInternal _DeleteNotificationChannelRequest_default_instance_;
class GetNotificationChannelDescriptorRequest;
struct GetNotificationChannelDescriptorRequestDefaultTypeInternal;
extern GetNotificationChannelDescriptorRequestDefaultTypeInternal _GetNotificationChannelDescriptorRequest_default_instance_;
class GetNotificationChannelRequest;
struct GetNotificationChannelRequestDefaultTypeInternal;
extern GetNotificationChannelRequestDefaultTypeInternal _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelVerificationCodeRequest;
struct GetNotificationChannelVerificationCodeRequestDefaultTypeInternal;
extern GetNotificationChannelVerificationCodeRequestDefaultTypeInternal _GetNotificationChannelVerificationCodeRequest_default_instance_;
class GetNotificationChannelVerificationCodeResponse;
struct GetNotificationChannelVerificationCodeResponseDefaultTypeInternal;
extern GetNotificationChannelVerificationCodeResponseDefaultTypeInternal _GetNotificationChannelVerificationCodeResponse_default_instance_;
class ListNotificationChannelDescriptorsRequest;
struct ListNotificationChannelDescriptorsRequestDefaultTypeInternal;
extern ListNotificationChannelDescriptorsRequestDefaultTypeInternal _ListNotificationChannelDescriptorsRequest_default_instance_;
class ListNotificationChannelDescriptorsResponse;
struct ListNotificationChannelDescriptorsResponseDefaultTypeInternal;
extern ListNotificationChannelDescriptorsResponseDefaultTypeInternal _ListNotificationChannelDescriptorsResponse_default_instance_;
class ListNotificationChannelsRequest;
struct ListNotificationChannelsRequestDefaultTypeInternal;
extern ListNotificationChannelsRequestDefaultTypeInternal _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponse;
struct ListNotificationChannelsResponseDefaultTypeInternal;
extern ListNotificationChannelsResponseDefaultTypeInternal _ListNotificationChannelsResponse_default_instance_;
class SendNotificationChannelVerificationCodeRequest;
struct SendNotificationChannelVerificationCodeRequestDefaultTypeInternal;
extern SendNotificationChannelVerificationCodeRequestDefaultTypeInternal _SendNotificationChannelVerificationCodeRequest_default_instance_;
class UpdateNotificationChannelRequest;
struct UpdateNotificationChannelRequestDefaultTypeInternal;
extern UpdateNotificationChannelRequestDefaultTypeInternal _UpdateNotificationChannelRequest_default_instance_;
class VerifyNotificationChannelRequest;
struct VerifyNotificationChannelRequestDefaultTypeInternal;
extern VerifyNotificationChannelRequestDefaultTypeInternal _VerifyNotificationChannelRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelDescriptorsRequest>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelsRequest>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelsResponse>(Arena*);
template<> ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest>(Arena*);
template<> ::google::monitoring::v3::UpdateNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::VerifyNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::VerifyNotificationChannelRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class ListNotificationChannelDescriptorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelDescriptorsRequest) */ {
 public:
  inline ListNotificationChannelDescriptorsRequest() : ListNotificationChannelDescriptorsRequest(nullptr) {}
  ~ListNotificationChannelDescriptorsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationChannelDescriptorsRequest(const ListNotificationChannelDescriptorsRequest& from);
  ListNotificationChannelDescriptorsRequest(ListNotificationChannelDescriptorsRequest&& from) noexcept
    : ListNotificationChannelDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelDescriptorsRequest& operator=(const ListNotificationChannelDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelDescriptorsRequest& operator=(ListNotificationChannelDescriptorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelDescriptorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelDescriptorsRequest*>(
               &_ListNotificationChannelDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListNotificationChannelDescriptorsRequest& a, ListNotificationChannelDescriptorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelDescriptorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelDescriptorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelDescriptorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationChannelDescriptorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationChannelDescriptorsRequest& from) {
    ListNotificationChannelDescriptorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelDescriptorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListNotificationChannelDescriptorsRequest";
  }
  protected:
  explicit ListNotificationChannelDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 3,
    kNameFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelDescriptorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelDescriptorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelDescriptorsResponse) */ {
 public:
  inline ListNotificationChannelDescriptorsResponse() : ListNotificationChannelDescriptorsResponse(nullptr) {}
  ~ListNotificationChannelDescriptorsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationChannelDescriptorsResponse(const ListNotificationChannelDescriptorsResponse& from);
  ListNotificationChannelDescriptorsResponse(ListNotificationChannelDescriptorsResponse&& from) noexcept
    : ListNotificationChannelDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelDescriptorsResponse& operator=(const ListNotificationChannelDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelDescriptorsResponse& operator=(ListNotificationChannelDescriptorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelDescriptorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelDescriptorsResponse*>(
               &_ListNotificationChannelDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListNotificationChannelDescriptorsResponse& a, ListNotificationChannelDescriptorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelDescriptorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelDescriptorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelDescriptorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationChannelDescriptorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationChannelDescriptorsResponse& from) {
    ListNotificationChannelDescriptorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelDescriptorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListNotificationChannelDescriptorsResponse";
  }
  protected:
  explicit ListNotificationChannelDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelDescriptorsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
  int channel_descriptors_size() const;
  private:
  int _internal_channel_descriptors_size() const;
  public:
  void clear_channel_descriptors();
  ::google::monitoring::v3::NotificationChannelDescriptor* mutable_channel_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >*
      mutable_channel_descriptors();
  private:
  const ::google::monitoring::v3::NotificationChannelDescriptor& _internal_channel_descriptors(int index) const;
  ::google::monitoring::v3::NotificationChannelDescriptor* _internal_add_channel_descriptors();
  public:
  const ::google::monitoring::v3::NotificationChannelDescriptor& channel_descriptors(int index) const;
  ::google::monitoring::v3::NotificationChannelDescriptor* add_channel_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >&
      channel_descriptors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelDescriptorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor > channel_descriptors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelDescriptorRequest) */ {
 public:
  inline GetNotificationChannelDescriptorRequest() : GetNotificationChannelDescriptorRequest(nullptr) {}
  ~GetNotificationChannelDescriptorRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNotificationChannelDescriptorRequest(const GetNotificationChannelDescriptorRequest& from);
  GetNotificationChannelDescriptorRequest(GetNotificationChannelDescriptorRequest&& from) noexcept
    : GetNotificationChannelDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelDescriptorRequest& operator=(const GetNotificationChannelDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelDescriptorRequest& operator=(GetNotificationChannelDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelDescriptorRequest*>(
               &_GetNotificationChannelDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetNotificationChannelDescriptorRequest& a, GetNotificationChannelDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNotificationChannelDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelDescriptorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNotificationChannelDescriptorRequest& from) {
    GetNotificationChannelDescriptorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelDescriptorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetNotificationChannelDescriptorRequest";
  }
  protected:
  explicit GetNotificationChannelDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateNotificationChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateNotificationChannelRequest) */ {
 public:
  inline CreateNotificationChannelRequest() : CreateNotificationChannelRequest(nullptr) {}
  ~CreateNotificationChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNotificationChannelRequest(const CreateNotificationChannelRequest& from);
  CreateNotificationChannelRequest(CreateNotificationChannelRequest&& from) noexcept
    : CreateNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateNotificationChannelRequest& operator=(const CreateNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNotificationChannelRequest& operator=(CreateNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNotificationChannelRequest*>(
               &_CreateNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateNotificationChannelRequest& a, CreateNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNotificationChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNotificationChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNotificationChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNotificationChannelRequest& from) {
    CreateNotificationChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNotificationChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateNotificationChannelRequest";
  }
  protected:
  explicit CreateNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kNotificationChannelFieldNumber = 2,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.NotificationChannel notification_channel = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_notification_channel() const;
  private:
  bool _internal_has_notification_channel() const;
  public:
  void clear_notification_channel();
  const ::google::monitoring::v3::NotificationChannel& notification_channel() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::NotificationChannel* release_notification_channel();
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel);
  private:
  const ::google::monitoring::v3::NotificationChannel& _internal_notification_channel() const;
  ::google::monitoring::v3::NotificationChannel* _internal_mutable_notification_channel();
  public:
  void unsafe_arena_set_allocated_notification_channel(
      ::google::monitoring::v3::NotificationChannel* notification_channel);
  ::google::monitoring::v3::NotificationChannel* unsafe_arena_release_notification_channel();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::monitoring::v3::NotificationChannel* notification_channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelsRequest) */ {
 public:
  inline ListNotificationChannelsRequest() : ListNotificationChannelsRequest(nullptr) {}
  ~ListNotificationChannelsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from);
  ListNotificationChannelsRequest(ListNotificationChannelsRequest&& from) noexcept
    : ListNotificationChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsRequest& operator=(const ListNotificationChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsRequest& operator=(ListNotificationChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsRequest*>(
               &_ListNotificationChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListNotificationChannelsRequest& a, ListNotificationChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationChannelsRequest& from) {
    ListNotificationChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListNotificationChannelsRequest";
  }
  protected:
  explicit ListNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 4,
    kNameFieldNumber = 5,
    kFilterFieldNumber = 6,
    kOrderByFieldNumber = 7,
    kPageSizeFieldNumber = 3,
  };
  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string filter = 6;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string order_by = 7;
  void clear_order_by();
  const std::string& order_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_by();
  PROTOBUF_NODISCARD std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelsResponse) */ {
 public:
  inline ListNotificationChannelsResponse() : ListNotificationChannelsResponse(nullptr) {}
  ~ListNotificationChannelsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from);
  ListNotificationChannelsResponse(ListNotificationChannelsResponse&& from) noexcept
    : ListNotificationChannelsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsResponse& operator=(const ListNotificationChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsResponse& operator=(ListNotificationChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsResponse*>(
               &_ListNotificationChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNotificationChannelsResponse& a, ListNotificationChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationChannelsResponse& from) {
    ListNotificationChannelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListNotificationChannelsResponse";
  }
  protected:
  explicit ListNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationChannelsFieldNumber = 3,
    kNextPageTokenFieldNumber = 2,
    kTotalSizeFieldNumber = 4,
  };
  // repeated .google.monitoring.v3.NotificationChannel notification_channels = 3;
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >*
      mutable_notification_channels();
  private:
  const ::google::monitoring::v3::NotificationChannel& _internal_notification_channels(int index) const;
  ::google::monitoring::v3::NotificationChannel* _internal_add_notification_channels();
  public:
  const ::google::monitoring::v3::NotificationChannel& notification_channels(int index) const;
  ::google::monitoring::v3::NotificationChannel* add_notification_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >&
      notification_channels() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // int32 total_size = 4;
  void clear_total_size();
  int32_t total_size() const;
  void set_total_size(int32_t value);
  private:
  int32_t _internal_total_size() const;
  void _internal_set_total_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel > notification_channels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    int32_t total_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelRequest) */ {
 public:
  inline GetNotificationChannelRequest() : GetNotificationChannelRequest(nullptr) {}
  ~GetNotificationChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNotificationChannelRequest(const GetNotificationChannelRequest& from);
  GetNotificationChannelRequest(GetNotificationChannelRequest&& from) noexcept
    : GetNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelRequest& operator=(const GetNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelRequest& operator=(GetNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelRequest*>(
               &_GetNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetNotificationChannelRequest& a, GetNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNotificationChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNotificationChannelRequest& from) {
    GetNotificationChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetNotificationChannelRequest";
  }
  protected:
  explicit GetNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateNotificationChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateNotificationChannelRequest) */ {
 public:
  inline UpdateNotificationChannelRequest() : UpdateNotificationChannelRequest(nullptr) {}
  ~UpdateNotificationChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNotificationChannelRequest(const UpdateNotificationChannelRequest& from);
  UpdateNotificationChannelRequest(UpdateNotificationChannelRequest&& from) noexcept
    : UpdateNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNotificationChannelRequest& operator=(const UpdateNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNotificationChannelRequest& operator=(UpdateNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNotificationChannelRequest*>(
               &_UpdateNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateNotificationChannelRequest& a, UpdateNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNotificationChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNotificationChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNotificationChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNotificationChannelRequest& from) {
    UpdateNotificationChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNotificationChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.UpdateNotificationChannelRequest";
  }
  protected:
  explicit UpdateNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateMaskFieldNumber = 2,
    kNotificationChannelFieldNumber = 3,
  };
  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.monitoring.v3.NotificationChannel notification_channel = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_notification_channel() const;
  private:
  bool _internal_has_notification_channel() const;
  public:
  void clear_notification_channel();
  const ::google::monitoring::v3::NotificationChannel& notification_channel() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::NotificationChannel* release_notification_channel();
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel);
  private:
  const ::google::monitoring::v3::NotificationChannel& _internal_notification_channel() const;
  ::google::monitoring::v3::NotificationChannel* _internal_mutable_notification_channel();
  public:
  void unsafe_arena_set_allocated_notification_channel(
      ::google::monitoring::v3::NotificationChannel* notification_channel);
  ::google::monitoring::v3::NotificationChannel* unsafe_arena_release_notification_channel();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    ::google::monitoring::v3::NotificationChannel* notification_channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteNotificationChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteNotificationChannelRequest) */ {
 public:
  inline DeleteNotificationChannelRequest() : DeleteNotificationChannelRequest(nullptr) {}
  ~DeleteNotificationChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNotificationChannelRequest(const DeleteNotificationChannelRequest& from);
  DeleteNotificationChannelRequest(DeleteNotificationChannelRequest&& from) noexcept
    : DeleteNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationChannelRequest& operator=(const DeleteNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNotificationChannelRequest& operator=(DeleteNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationChannelRequest*>(
               &_DeleteNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteNotificationChannelRequest& a, DeleteNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNotificationChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNotificationChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNotificationChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteNotificationChannelRequest& from) {
    DeleteNotificationChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteNotificationChannelRequest";
  }
  protected:
  explicit DeleteNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kForceFieldNumber = 5,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 5;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SendNotificationChannelVerificationCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest) */ {
 public:
  inline SendNotificationChannelVerificationCodeRequest() : SendNotificationChannelVerificationCodeRequest(nullptr) {}
  ~SendNotificationChannelVerificationCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR SendNotificationChannelVerificationCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendNotificationChannelVerificationCodeRequest(const SendNotificationChannelVerificationCodeRequest& from);
  SendNotificationChannelVerificationCodeRequest(SendNotificationChannelVerificationCodeRequest&& from) noexcept
    : SendNotificationChannelVerificationCodeRequest() {
    *this = ::std::move(from);
  }

  inline SendNotificationChannelVerificationCodeRequest& operator=(const SendNotificationChannelVerificationCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendNotificationChannelVerificationCodeRequest& operator=(SendNotificationChannelVerificationCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendNotificationChannelVerificationCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendNotificationChannelVerificationCodeRequest* internal_default_instance() {
    return reinterpret_cast<const SendNotificationChannelVerificationCodeRequest*>(
               &_SendNotificationChannelVerificationCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SendNotificationChannelVerificationCodeRequest& a, SendNotificationChannelVerificationCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendNotificationChannelVerificationCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendNotificationChannelVerificationCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendNotificationChannelVerificationCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendNotificationChannelVerificationCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendNotificationChannelVerificationCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendNotificationChannelVerificationCodeRequest& from) {
    SendNotificationChannelVerificationCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendNotificationChannelVerificationCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.SendNotificationChannelVerificationCodeRequest";
  }
  protected:
  explicit SendNotificationChannelVerificationCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelVerificationCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest) */ {
 public:
  inline GetNotificationChannelVerificationCodeRequest() : GetNotificationChannelVerificationCodeRequest(nullptr) {}
  ~GetNotificationChannelVerificationCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelVerificationCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNotificationChannelVerificationCodeRequest(const GetNotificationChannelVerificationCodeRequest& from);
  GetNotificationChannelVerificationCodeRequest(GetNotificationChannelVerificationCodeRequest&& from) noexcept
    : GetNotificationChannelVerificationCodeRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelVerificationCodeRequest& operator=(const GetNotificationChannelVerificationCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelVerificationCodeRequest& operator=(GetNotificationChannelVerificationCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelVerificationCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelVerificationCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelVerificationCodeRequest*>(
               &_GetNotificationChannelVerificationCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetNotificationChannelVerificationCodeRequest& a, GetNotificationChannelVerificationCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelVerificationCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelVerificationCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelVerificationCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelVerificationCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNotificationChannelVerificationCodeRequest& from) {
    GetNotificationChannelVerificationCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelVerificationCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetNotificationChannelVerificationCodeRequest";
  }
  protected:
  explicit GetNotificationChannelVerificationCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp expire_time = 2;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelVerificationCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse) */ {
 public:
  inline GetNotificationChannelVerificationCodeResponse() : GetNotificationChannelVerificationCodeResponse(nullptr) {}
  ~GetNotificationChannelVerificationCodeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelVerificationCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNotificationChannelVerificationCodeResponse(const GetNotificationChannelVerificationCodeResponse& from);
  GetNotificationChannelVerificationCodeResponse(GetNotificationChannelVerificationCodeResponse&& from) noexcept
    : GetNotificationChannelVerificationCodeResponse() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelVerificationCodeResponse& operator=(const GetNotificationChannelVerificationCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelVerificationCodeResponse& operator=(GetNotificationChannelVerificationCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelVerificationCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelVerificationCodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelVerificationCodeResponse*>(
               &_GetNotificationChannelVerificationCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetNotificationChannelVerificationCodeResponse& a, GetNotificationChannelVerificationCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelVerificationCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelVerificationCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelVerificationCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelVerificationCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNotificationChannelVerificationCodeResponse& from) {
    GetNotificationChannelVerificationCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelVerificationCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetNotificationChannelVerificationCodeResponse";
  }
  protected:
  explicit GetNotificationChannelVerificationCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp expire_time = 2;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// -------------------------------------------------------------------

class VerifyNotificationChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.VerifyNotificationChannelRequest) */ {
 public:
  inline VerifyNotificationChannelRequest() : VerifyNotificationChannelRequest(nullptr) {}
  ~VerifyNotificationChannelRequest() override;
  explicit PROTOBUF_CONSTEXPR VerifyNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyNotificationChannelRequest(const VerifyNotificationChannelRequest& from);
  VerifyNotificationChannelRequest(VerifyNotificationChannelRequest&& from) noexcept
    : VerifyNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline VerifyNotificationChannelRequest& operator=(const VerifyNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyNotificationChannelRequest& operator=(VerifyNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyNotificationChannelRequest*>(
               &_VerifyNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VerifyNotificationChannelRequest& a, VerifyNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyNotificationChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyNotificationChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyNotificationChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyNotificationChannelRequest& from) {
    VerifyNotificationChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyNotificationChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.VerifyNotificationChannelRequest";
  }
  protected:
  explicit VerifyNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.VerifyNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListNotificationChannelDescriptorsRequest

// string name = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNotificationChannelDescriptorsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelDescriptorsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelDescriptorsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}
inline std::string* ListNotificationChannelDescriptorsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  return _s;
}
inline const std::string& ListNotificationChannelDescriptorsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListNotificationChannelDescriptorsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  return _impl_.name_.Release();
}
inline void ListNotificationChannelDescriptorsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}

// int32 page_size = 2;
inline void ListNotificationChannelDescriptorsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListNotificationChannelDescriptorsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListNotificationChannelDescriptorsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_size)
  return _internal_page_size();
}
inline void ListNotificationChannelDescriptorsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListNotificationChannelDescriptorsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_size)
}

// string page_token = 3;
inline void ListNotificationChannelDescriptorsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelDescriptorsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelDescriptorsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}
inline std::string* ListNotificationChannelDescriptorsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  return _s;
}
inline const std::string& ListNotificationChannelDescriptorsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListNotificationChannelDescriptorsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListNotificationChannelDescriptorsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotificationChannelDescriptorsResponse

// repeated .google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
inline int ListNotificationChannelDescriptorsResponse::_internal_channel_descriptors_size() const {
  return _impl_.channel_descriptors_.size();
}
inline int ListNotificationChannelDescriptorsResponse::channel_descriptors_size() const {
  return _internal_channel_descriptors_size();
}
inline ::google::monitoring::v3::NotificationChannelDescriptor* ListNotificationChannelDescriptorsResponse::mutable_channel_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return _impl_.channel_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >*
ListNotificationChannelDescriptorsResponse::mutable_channel_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return &_impl_.channel_descriptors_;
}
inline const ::google::monitoring::v3::NotificationChannelDescriptor& ListNotificationChannelDescriptorsResponse::_internal_channel_descriptors(int index) const {
  return _impl_.channel_descriptors_.Get(index);
}
inline const ::google::monitoring::v3::NotificationChannelDescriptor& ListNotificationChannelDescriptorsResponse::channel_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return _internal_channel_descriptors(index);
}
inline ::google::monitoring::v3::NotificationChannelDescriptor* ListNotificationChannelDescriptorsResponse::_internal_add_channel_descriptors() {
  return _impl_.channel_descriptors_.Add();
}
inline ::google::monitoring::v3::NotificationChannelDescriptor* ListNotificationChannelDescriptorsResponse::add_channel_descriptors() {
  ::google::monitoring::v3::NotificationChannelDescriptor* _add = _internal_add_channel_descriptors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >&
ListNotificationChannelDescriptorsResponse::channel_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return _impl_.channel_descriptors_;
}

// string next_page_token = 2;
inline void ListNotificationChannelDescriptorsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelDescriptorsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelDescriptorsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}
inline std::string* ListNotificationChannelDescriptorsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNotificationChannelDescriptorsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListNotificationChannelDescriptorsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelDescriptorsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListNotificationChannelDescriptorsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNotificationChannelDescriptorRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNotificationChannelDescriptorRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetNotificationChannelDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNotificationChannelDescriptorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}
inline std::string* GetNotificationChannelDescriptorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  return _s;
}
inline const std::string& GetNotificationChannelDescriptorRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetNotificationChannelDescriptorRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNotificationChannelDescriptorRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNotificationChannelDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  return _impl_.name_.Release();
}
inline void GetNotificationChannelDescriptorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}

// -------------------------------------------------------------------

// CreateNotificationChannelRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNotificationChannelRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateNotificationChannelRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNotificationChannelRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateNotificationChannelRequest.name)
}
inline std::string* CreateNotificationChannelRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateNotificationChannelRequest.name)
  return _s;
}
inline const std::string& CreateNotificationChannelRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateNotificationChannelRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNotificationChannelRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateNotificationChannelRequest.name)
  return _impl_.name_.Release();
}
inline void CreateNotificationChannelRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateNotificationChannelRequest.name)
}

// .google.monitoring.v3.NotificationChannel notification_channel = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNotificationChannelRequest::_internal_has_notification_channel() const {
  return this != internal_default_instance() && _impl_.notification_channel_ != nullptr;
}
inline bool CreateNotificationChannelRequest::has_notification_channel() const {
  return _internal_has_notification_channel();
}
inline const ::google::monitoring::v3::NotificationChannel& CreateNotificationChannelRequest::_internal_notification_channel() const {
  const ::google::monitoring::v3::NotificationChannel* p = _impl_.notification_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::NotificationChannel&>(
      ::google::monitoring::v3::_NotificationChannel_default_instance_);
}
inline const ::google::monitoring::v3::NotificationChannel& CreateNotificationChannelRequest::notification_channel() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  return _internal_notification_channel();
}
inline void CreateNotificationChannelRequest::unsafe_arena_set_allocated_notification_channel(
    ::google::monitoring::v3::NotificationChannel* notification_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_channel_);
  }
  _impl_.notification_channel_ = notification_channel;
  if (notification_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::release_notification_channel() {
  
  ::google::monitoring::v3::NotificationChannel* temp = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::unsafe_arena_release_notification_channel() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  
  ::google::monitoring::v3::NotificationChannel* temp = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::_internal_mutable_notification_channel() {
  
  if (_impl_.notification_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(GetArenaForAllocation());
    _impl_.notification_channel_ = p;
  }
  return _impl_.notification_channel_;
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::mutable_notification_channel() {
  ::google::monitoring::v3::NotificationChannel* _msg = _internal_mutable_notification_channel();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  return _msg;
}
inline void CreateNotificationChannelRequest::set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_channel_);
  }
  if (notification_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_channel));
    if (message_arena != submessage_arena) {
      notification_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_channel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notification_channel_ = notification_channel;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
}

// -------------------------------------------------------------------

// ListNotificationChannelsRequest

// string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNotificationChannelsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.name)
}
inline std::string* ListNotificationChannelsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.name)
  return _s;
}
inline const std::string& ListNotificationChannelsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListNotificationChannelsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.name)
  return _impl_.name_.Release();
}
inline void ListNotificationChannelsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.name)
}

// string filter = 6;
inline void ListNotificationChannelsRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}
inline std::string* ListNotificationChannelsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  return _s;
}
inline const std::string& ListNotificationChannelsRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListNotificationChannelsRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListNotificationChannelsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}

// string order_by = 7;
inline void ListNotificationChannelsRequest::clear_order_by() {
  _impl_.order_by_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelsRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  return _internal_order_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelsRequest::set_order_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}
inline std::string* ListNotificationChannelsRequest::mutable_order_by() {
  std::string* _s = _internal_mutable_order_by();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  return _s;
}
inline const std::string& ListNotificationChannelsRequest::_internal_order_by() const {
  return _impl_.order_by_.Get();
}
inline void ListNotificationChannelsRequest::_internal_set_order_by(const std::string& value) {
  
  _impl_.order_by_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::_internal_mutable_order_by() {
  
  return _impl_.order_by_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  return _impl_.order_by_.Release();
}
inline void ListNotificationChannelsRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  _impl_.order_by_.SetAllocated(order_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_by_.IsDefault()) {
    _impl_.order_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}

// int32 page_size = 3;
inline void ListNotificationChannelsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListNotificationChannelsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListNotificationChannelsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.page_size)
  return _internal_page_size();
}
inline void ListNotificationChannelsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListNotificationChannelsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.page_size)
}

// string page_token = 4;
inline void ListNotificationChannelsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}
inline std::string* ListNotificationChannelsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  return _s;
}
inline const std::string& ListNotificationChannelsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListNotificationChannelsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListNotificationChannelsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotificationChannelsResponse

// repeated .google.monitoring.v3.NotificationChannel notification_channels = 3;
inline int ListNotificationChannelsResponse::_internal_notification_channels_size() const {
  return _impl_.notification_channels_.size();
}
inline int ListNotificationChannelsResponse::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline ::google::monitoring::v3::NotificationChannel* ListNotificationChannelsResponse::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return _impl_.notification_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >*
ListNotificationChannelsResponse::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return &_impl_.notification_channels_;
}
inline const ::google::monitoring::v3::NotificationChannel& ListNotificationChannelsResponse::_internal_notification_channels(int index) const {
  return _impl_.notification_channels_.Get(index);
}
inline const ::google::monitoring::v3::NotificationChannel& ListNotificationChannelsResponse::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return _internal_notification_channels(index);
}
inline ::google::monitoring::v3::NotificationChannel* ListNotificationChannelsResponse::_internal_add_notification_channels() {
  return _impl_.notification_channels_.Add();
}
inline ::google::monitoring::v3::NotificationChannel* ListNotificationChannelsResponse::add_notification_channels() {
  ::google::monitoring::v3::NotificationChannel* _add = _internal_add_notification_channels();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >&
ListNotificationChannelsResponse::notification_channels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return _impl_.notification_channels_;
}

// string next_page_token = 2;
inline void ListNotificationChannelsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListNotificationChannelsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationChannelsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}
inline std::string* ListNotificationChannelsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNotificationChannelsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListNotificationChannelsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationChannelsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListNotificationChannelsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}

// int32 total_size = 4;
inline void ListNotificationChannelsResponse::clear_total_size() {
  _impl_.total_size_ = 0;
}
inline int32_t ListNotificationChannelsResponse::_internal_total_size() const {
  return _impl_.total_size_;
}
inline int32_t ListNotificationChannelsResponse::total_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsResponse.total_size)
  return _internal_total_size();
}
inline void ListNotificationChannelsResponse::_internal_set_total_size(int32_t value) {
  
  _impl_.total_size_ = value;
}
inline void ListNotificationChannelsResponse::set_total_size(int32_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsResponse.total_size)
}

// -------------------------------------------------------------------

// GetNotificationChannelRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNotificationChannelRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNotificationChannelRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelRequest.name)
}
inline std::string* GetNotificationChannelRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelRequest.name)
  return _s;
}
inline const std::string& GetNotificationChannelRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetNotificationChannelRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNotificationChannelRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelRequest.name)
  return _impl_.name_.Release();
}
inline void GetNotificationChannelRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelRequest.name)
}

// -------------------------------------------------------------------

// UpdateNotificationChannelRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNotificationChannelRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateNotificationChannelRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNotificationChannelRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNotificationChannelRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNotificationChannelRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNotificationChannelRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNotificationChannelRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNotificationChannelRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNotificationChannelRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  return _msg;
}
inline void UpdateNotificationChannelRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
}

// .google.monitoring.v3.NotificationChannel notification_channel = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateNotificationChannelRequest::_internal_has_notification_channel() const {
  return this != internal_default_instance() && _impl_.notification_channel_ != nullptr;
}
inline bool UpdateNotificationChannelRequest::has_notification_channel() const {
  return _internal_has_notification_channel();
}
inline const ::google::monitoring::v3::NotificationChannel& UpdateNotificationChannelRequest::_internal_notification_channel() const {
  const ::google::monitoring::v3::NotificationChannel* p = _impl_.notification_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::NotificationChannel&>(
      ::google::monitoring::v3::_NotificationChannel_default_instance_);
}
inline const ::google::monitoring::v3::NotificationChannel& UpdateNotificationChannelRequest::notification_channel() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  return _internal_notification_channel();
}
inline void UpdateNotificationChannelRequest::unsafe_arena_set_allocated_notification_channel(
    ::google::monitoring::v3::NotificationChannel* notification_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_channel_);
  }
  _impl_.notification_channel_ = notification_channel;
  if (notification_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::release_notification_channel() {
  
  ::google::monitoring::v3::NotificationChannel* temp = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::unsafe_arena_release_notification_channel() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  
  ::google::monitoring::v3::NotificationChannel* temp = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::_internal_mutable_notification_channel() {
  
  if (_impl_.notification_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(GetArenaForAllocation());
    _impl_.notification_channel_ = p;
  }
  return _impl_.notification_channel_;
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::mutable_notification_channel() {
  ::google::monitoring::v3::NotificationChannel* _msg = _internal_mutable_notification_channel();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  return _msg;
}
inline void UpdateNotificationChannelRequest::set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notification_channel_);
  }
  if (notification_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_channel));
    if (message_arena != submessage_arena) {
      notification_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_channel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notification_channel_ = notification_channel;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
}

// -------------------------------------------------------------------

// DeleteNotificationChannelRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNotificationChannelRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNotificationChannelRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}
inline std::string* DeleteNotificationChannelRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  return _s;
}
inline const std::string& DeleteNotificationChannelRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteNotificationChannelRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteNotificationChannelRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteNotificationChannelRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}

// bool force = 5;
inline void DeleteNotificationChannelRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool DeleteNotificationChannelRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool DeleteNotificationChannelRequest::force() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteNotificationChannelRequest.force)
  return _internal_force();
}
inline void DeleteNotificationChannelRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void DeleteNotificationChannelRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteNotificationChannelRequest.force)
}

// -------------------------------------------------------------------

// SendNotificationChannelVerificationCodeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SendNotificationChannelVerificationCodeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SendNotificationChannelVerificationCodeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendNotificationChannelVerificationCodeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}
inline std::string* SendNotificationChannelVerificationCodeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  return _s;
}
inline const std::string& SendNotificationChannelVerificationCodeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SendNotificationChannelVerificationCodeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendNotificationChannelVerificationCodeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendNotificationChannelVerificationCodeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  return _impl_.name_.Release();
}
inline void SendNotificationChannelVerificationCodeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}

// -------------------------------------------------------------------

// GetNotificationChannelVerificationCodeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNotificationChannelVerificationCodeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetNotificationChannelVerificationCodeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNotificationChannelVerificationCodeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}
inline std::string* GetNotificationChannelVerificationCodeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  return _s;
}
inline const std::string& GetNotificationChannelVerificationCodeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetNotificationChannelVerificationCodeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNotificationChannelVerificationCodeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNotificationChannelVerificationCodeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  return _impl_.name_.Release();
}
inline void GetNotificationChannelVerificationCodeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}

// .google.protobuf.Timestamp expire_time = 2;
inline bool GetNotificationChannelVerificationCodeRequest::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool GetNotificationChannelVerificationCodeRequest::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetNotificationChannelVerificationCodeRequest::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetNotificationChannelVerificationCodeRequest::expire_time() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  return _internal_expire_time();
}
inline void GetNotificationChannelVerificationCodeRequest::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeRequest::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeRequest::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeRequest::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeRequest::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  return _msg;
}
inline void GetNotificationChannelVerificationCodeRequest::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
}

// -------------------------------------------------------------------

// GetNotificationChannelVerificationCodeResponse

// string code = 1;
inline void GetNotificationChannelVerificationCodeResponse::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& GetNotificationChannelVerificationCodeResponse::code() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNotificationChannelVerificationCodeResponse::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}
inline std::string* GetNotificationChannelVerificationCodeResponse::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  return _s;
}
inline const std::string& GetNotificationChannelVerificationCodeResponse::_internal_code() const {
  return _impl_.code_.Get();
}
inline void GetNotificationChannelVerificationCodeResponse::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNotificationChannelVerificationCodeResponse::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNotificationChannelVerificationCodeResponse::release_code() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  return _impl_.code_.Release();
}
inline void GetNotificationChannelVerificationCodeResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}

// .google.protobuf.Timestamp expire_time = 2;
inline bool GetNotificationChannelVerificationCodeResponse::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool GetNotificationChannelVerificationCodeResponse::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetNotificationChannelVerificationCodeResponse::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetNotificationChannelVerificationCodeResponse::expire_time() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  return _internal_expire_time();
}
inline void GetNotificationChannelVerificationCodeResponse::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeResponse::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeResponse::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeResponse::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetNotificationChannelVerificationCodeResponse::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  return _msg;
}
inline void GetNotificationChannelVerificationCodeResponse::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
}

// -------------------------------------------------------------------

// VerifyNotificationChannelRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void VerifyNotificationChannelRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VerifyNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyNotificationChannelRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}
inline std::string* VerifyNotificationChannelRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  return _s;
}
inline const std::string& VerifyNotificationChannelRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VerifyNotificationChannelRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyNotificationChannelRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  return _impl_.name_.Release();
}
inline void VerifyNotificationChannelRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}

// string code = 2 [(.google.api.field_behavior) = REQUIRED];
inline void VerifyNotificationChannelRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& VerifyNotificationChannelRequest::code() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyNotificationChannelRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}
inline std::string* VerifyNotificationChannelRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  return _s;
}
inline const std::string& VerifyNotificationChannelRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void VerifyNotificationChannelRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyNotificationChannelRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyNotificationChannelRequest::release_code() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  return _impl_.code_.Release();
}
inline void VerifyNotificationChannelRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
