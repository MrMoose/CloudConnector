// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/alert_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2falert_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2falert_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/alert_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// The AlertPolicyService API is used to manage (list, create, delete,
// edit) alert policies in Stackdriver Monitoring. An alerting policy is
// a description of the conditions under which some aspect of your
// system is considered to be "unhealthy" and the ways to notify
// people or services about this state. In addition to using this API, alert
// policies can also be managed through
// [Stackdriver Monitoring](https://cloud.google.com/monitoring/docs/),
// which can be reached by clicking the "Monitoring" tab in
// [Cloud Console](https://console.cloud.google.com/).
class AlertPolicyService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.AlertPolicyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the existing alerting policies for the workspace.
    virtual ::grpc::Status ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::google::monitoring::v3::ListAlertPoliciesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>> AsyncListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>>(AsyncListAlertPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>> PrepareAsyncListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>>(PrepareAsyncListAlertPoliciesRaw(context, request, cq));
    }
    // Gets a single alerting policy.
    virtual ::grpc::Status GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> AsyncGetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(AsyncGetAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncGetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncGetAlertPolicyRaw(context, request, cq));
    }
    // Creates a new alerting policy.
    virtual ::grpc::Status CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> AsyncCreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(AsyncCreateAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncCreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncCreateAlertPolicyRaw(context, request, cq));
    }
    // Deletes an alerting policy.
    virtual ::grpc::Status DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteAlertPolicyRaw(context, request, cq));
    }
    // Updates an alerting policy. You can either replace the entire policy with
    // a new one or replace only certain fields in the current alerting policy by
    // specifying the fields to be updated via `updateMask`. Returns the
    // updated alerting policy.
    virtual ::grpc::Status UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> AsyncUpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(AsyncUpdateAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncUpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncUpdateAlertPolicyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists the existing alerting policies for the workspace.
      virtual void ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single alerting policy.
      virtual void GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new alerting policy.
      virtual void CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an alerting policy.
      virtual void DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates an alerting policy. You can either replace the entire policy with
      // a new one or replace only certain fields in the current alerting policy by
      // specifying the fields to be updated via `updateMask`. Returns the
      // updated alerting policy.
      virtual void UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>* AsyncListAlertPoliciesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListAlertPoliciesResponse>* PrepareAsyncListAlertPoliciesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* AsyncGetAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncGetAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* AsyncCreateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncCreateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* AsyncUpdateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncUpdateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::google::monitoring::v3::ListAlertPoliciesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>> AsyncListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>>(AsyncListAlertPoliciesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>> PrepareAsyncListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>>(PrepareAsyncListAlertPoliciesRaw(context, request, cq));
    }
    ::grpc::Status GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> AsyncGetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(AsyncGetAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncGetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncGetAlertPolicyRaw(context, request, cq));
    }
    ::grpc::Status CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> AsyncCreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(AsyncCreateAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncCreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncCreateAlertPolicyRaw(context, request, cq));
    }
    ::grpc::Status DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteAlertPolicyRaw(context, request, cq));
    }
    ::grpc::Status UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::google::monitoring::v3::AlertPolicy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> AsyncUpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(AsyncUpdateAlertPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>> PrepareAsyncUpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>>(PrepareAsyncUpdateAlertPolicyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAlertPolicies(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) override;
      void GetAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) override;
      void CreateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, std::function<void(::grpc::Status)>) override;
      void UpdateAlertPolicy(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>* AsyncListAlertPoliciesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListAlertPoliciesResponse>* PrepareAsyncListAlertPoliciesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* AsyncGetAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncGetAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* AsyncCreateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncCreateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* AsyncUpdateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::AlertPolicy>* PrepareAsyncUpdateAlertPolicyRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListAlertPolicies_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlertPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAlertPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAlertPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAlertPolicy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the existing alerting policies for the workspace.
    virtual ::grpc::Status ListAlertPolicies(::grpc::ServerContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response);
    // Gets a single alerting policy.
    virtual ::grpc::Status GetAlertPolicy(::grpc::ServerContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response);
    // Creates a new alerting policy.
    virtual ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response);
    // Deletes an alerting policy.
    virtual ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response);
    // Updates an alerting policy. You can either replace the entire policy with
    // a new one or replace only certain fields in the current alerting policy by
    // specifying the fields to be updated via `updateMask`. Returns the
    // updated alerting policy.
    virtual ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAlertPolicies(::grpc::ServerContext* context, ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListAlertPoliciesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlertPolicy(::grpc::ServerContext* context, ::google::monitoring::v3::GetAlertPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::AlertPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlertPolicy(::grpc::ServerContext* context, ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::AlertPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAlertPolicy(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAlertPolicy(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::AlertPolicy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListAlertPolicies<WithAsyncMethod_GetAlertPolicy<WithAsyncMethod_CreateAlertPolicy<WithAsyncMethod_DeleteAlertPolicy<WithAsyncMethod_UpdateAlertPolicy<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListAlertPoliciesRequest, ::google::monitoring::v3::ListAlertPoliciesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::ListAlertPoliciesRequest* request, ::google::monitoring::v3::ListAlertPoliciesResponse* response) { return this->ListAlertPolicies(context, request, response); }));}
    void SetMessageAllocatorFor_ListAlertPolicies(
        ::grpc::MessageAllocator< ::google::monitoring::v3::ListAlertPoliciesRequest, ::google::monitoring::v3::ListAlertPoliciesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListAlertPoliciesRequest, ::google::monitoring::v3::ListAlertPoliciesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAlertPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::GetAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response) { return this->GetAlertPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetAlertPolicy(
        ::grpc::MessageAllocator< ::google::monitoring::v3::GetAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::CreateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response) { return this->CreateAlertPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAlertPolicy(
        ::grpc::MessageAllocator< ::google::monitoring::v3::CreateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteAlertPolicyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::DeleteAlertPolicyRequest* request, ::google::protobuf::Empty* response) { return this->DeleteAlertPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAlertPolicy(
        ::grpc::MessageAllocator< ::google::monitoring::v3::DeleteAlertPolicyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteAlertPolicyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::v3::UpdateAlertPolicyRequest* request, ::google::monitoring::v3::AlertPolicy* response) { return this->UpdateAlertPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAlertPolicy(
        ::grpc::MessageAllocator< ::google::monitoring::v3::UpdateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListAlertPolicies<WithCallbackMethod_GetAlertPolicy<WithCallbackMethod_CreateAlertPolicy<WithCallbackMethod_DeleteAlertPolicy<WithCallbackMethod_UpdateAlertPolicy<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAlertPolicies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlertPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlertPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAlertPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAlertPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAlertPolicies(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAlertPolicies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAlertPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAlertPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAlertPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAlertPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAlertPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAlertPolicies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAlertPolicies() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListAlertPoliciesRequest, ::google::monitoring::v3::ListAlertPoliciesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListAlertPoliciesRequest, ::google::monitoring::v3::ListAlertPoliciesResponse>* streamer) {
                       return this->StreamedListAlertPolicies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAlertPolicies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAlertPolicies(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListAlertPoliciesRequest* /*request*/, ::google::monitoring::v3::ListAlertPoliciesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAlertPolicies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListAlertPoliciesRequest,::google::monitoring::v3::ListAlertPoliciesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAlertPolicy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* streamer) {
                       return this->StreamedGetAlertPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAlertPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetAlertPolicyRequest,::google::monitoring::v3::AlertPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAlertPolicy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* streamer) {
                       return this->StreamedCreateAlertPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAlertPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateAlertPolicyRequest,::google::monitoring::v3::AlertPolicy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAlertPolicy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteAlertPolicyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteAlertPolicyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteAlertPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteAlertPolicyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAlertPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteAlertPolicyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAlertPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAlertPolicy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateAlertPolicyRequest, ::google::monitoring::v3::AlertPolicy>* streamer) {
                       return this->StreamedUpdateAlertPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAlertPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAlertPolicy(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateAlertPolicyRequest* /*request*/, ::google::monitoring::v3::AlertPolicy* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAlertPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateAlertPolicyRequest,::google::monitoring::v3::AlertPolicy>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListAlertPolicies<WithStreamedUnaryMethod_GetAlertPolicy<WithStreamedUnaryMethod_CreateAlertPolicy<WithStreamedUnaryMethod_DeleteAlertPolicy<WithStreamedUnaryMethod_UpdateAlertPolicy<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListAlertPolicies<WithStreamedUnaryMethod_GetAlertPolicy<WithStreamedUnaryMethod_CreateAlertPolicy<WithStreamedUnaryMethod_DeleteAlertPolicy<WithStreamedUnaryMethod_UpdateAlertPolicy<Service > > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2falert_5fservice_2eproto__INCLUDED
