// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/service_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto__INCLUDED

#include "google/monitoring/v3/service_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace v3 {

// The Cloud Monitoring Service-Oriented Monitoring API has endpoints for
// managing and querying aspects of a workspace's services. These include the
// `Service`'s monitored resources, its Service-Level Objectives, and a taxonomy
// of categorized Health Metrics.
class ServiceMonitoringService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.v3.ServiceMonitoringService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a `Service`.
    virtual ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::google::monitoring::v3::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> AsyncCreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(AsyncCreateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> PrepareAsyncCreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(PrepareAsyncCreateServiceRaw(context, request, cq));
    }
    // Get the named `Service`.
    virtual ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::google::monitoring::v3::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> AsyncGetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    // List `Service`s for this workspace.
    virtual ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::google::monitoring::v3::ListServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    // Update this `Service`.
    virtual ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::google::monitoring::v3::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> AsyncUpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    // Soft delete this `Service`.
    virtual ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }
    // Create a `ServiceLevelObjective` for the given `Service`.
    virtual ::grpc::Status CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> AsyncCreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncCreateServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncCreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncCreateServiceLevelObjectiveRaw(context, request, cq));
    }
    // Get a `ServiceLevelObjective` by name.
    virtual ::grpc::Status GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> AsyncGetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncGetServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncGetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncGetServiceLevelObjectiveRaw(context, request, cq));
    }
    // List the `ServiceLevelObjective`s for the given `Service`.
    virtual ::grpc::Status ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>> AsyncListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>>(AsyncListServiceLevelObjectivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>> PrepareAsyncListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>>(PrepareAsyncListServiceLevelObjectivesRaw(context, request, cq));
    }
    // Update the given `ServiceLevelObjective`.
    virtual ::grpc::Status UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> AsyncUpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncUpdateServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncUpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncUpdateServiceLevelObjectiveRaw(context, request, cq));
    }
    // Delete the given `ServiceLevelObjective`.
    virtual ::grpc::Status DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceLevelObjectiveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a `Service`.
      virtual void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the named `Service`.
      virtual void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // List `Service`s for this workspace.
      virtual void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update this `Service`.
      virtual void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Soft delete this `Service`.
      virtual void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Create a `ServiceLevelObjective` for the given `Service`.
      virtual void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a `ServiceLevelObjective` by name.
      virtual void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // List the `ServiceLevelObjective`s for the given `Service`.
      virtual void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update the given `ServiceLevelObjective`.
      virtual void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete the given `ServiceLevelObjective`.
      virtual void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* PrepareAsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::Service>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* AsyncCreateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncCreateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* AsyncGetServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncGetServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* AsyncListServiceLevelObjectivesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* PrepareAsyncListServiceLevelObjectivesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* AsyncUpdateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncUpdateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::google::monitoring::v3::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> AsyncCreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(AsyncCreateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> PrepareAsyncCreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(PrepareAsyncCreateServiceRaw(context, request, cq));
    }
    ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::google::monitoring::v3::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> AsyncGetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::google::monitoring::v3::ListServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::google::monitoring::v3::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> AsyncUpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> AsyncCreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncCreateServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncCreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncCreateServiceLevelObjectiveRaw(context, request, cq));
    }
    ::grpc::Status GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> AsyncGetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncGetServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncGetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncGetServiceLevelObjectiveRaw(context, request, cq));
    }
    ::grpc::Status ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>> AsyncListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>>(AsyncListServiceLevelObjectivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>> PrepareAsyncListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>>(PrepareAsyncListServiceLevelObjectivesRaw(context, request, cq));
    }
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::google::monitoring::v3::ServiceLevelObjective* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> AsyncUpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(AsyncUpdateServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>> PrepareAsyncUpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>>(PrepareAsyncUpdateServiceLevelObjectiveRaw(context, request, cq));
    }
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServiceLevelObjectiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceLevelObjectiveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateService(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetService(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListServices(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateService(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteService(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListServiceLevelObjectives(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServiceLevelObjective(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* PrepareAsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::Service>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* AsyncCreateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncCreateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* AsyncGetServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncGetServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* AsyncListServiceLevelObjectivesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* PrepareAsyncListServiceLevelObjectivesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* AsyncUpdateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ServiceLevelObjective>* PrepareAsyncUpdateServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceLevelObjectiveRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetService_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServices_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateService_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteService_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceLevelObjective_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceLevelObjective_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceLevelObjectives_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateServiceLevelObjective_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServiceLevelObjective_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a `Service`.
    virtual ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response);
    // Get the named `Service`.
    virtual ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response);
    // List `Service`s for this workspace.
    virtual ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response);
    // Update this `Service`.
    virtual ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response);
    // Soft delete this `Service`.
    virtual ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response);
    // Create a `ServiceLevelObjective` for the given `Service`.
    virtual ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response);
    // Get a `ServiceLevelObjective` by name.
    virtual ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response);
    // List the `ServiceLevelObjective`s for the given `Service`.
    virtual ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response);
    // Update the given `ServiceLevelObjective`.
    virtual ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response);
    // Delete the given `ServiceLevelObjective`.
    virtual ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateService(::grpc::ServerContext* context, ::google::monitoring::v3::CreateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::google::monitoring::v3::GetServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListServices() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::google::monitoring::v3::ListServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateService() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateService(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteService() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateServiceLevelObjective() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceLevelObjective(::grpc::ServerContext* context, ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ServiceLevelObjective>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceLevelObjective() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceLevelObjective(::grpc::ServerContext* context, ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ServiceLevelObjective>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListServiceLevelObjectives() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceLevelObjectives(::grpc::ServerContext* context, ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateServiceLevelObjective() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServiceLevelObjective(::grpc::ServerContext* context, ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::v3::ServiceLevelObjective>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteServiceLevelObjective() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceLevelObjective(::grpc::ServerContext* context, ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateService<WithAsyncMethod_GetService<WithAsyncMethod_ListServices<WithAsyncMethod_UpdateService<WithAsyncMethod_DeleteService<WithAsyncMethod_CreateServiceLevelObjective<WithAsyncMethod_GetServiceLevelObjective<WithAsyncMethod_ListServiceLevelObjectives<WithAsyncMethod_UpdateServiceLevelObjective<WithAsyncMethod_DeleteServiceLevelObjective<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateServiceRequest, ::google::monitoring::v3::Service>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::CreateServiceRequest* request, ::google::monitoring::v3::Service* response) { return this->CreateService(context, request, response); }));}
    void SetMessageAllocatorFor_CreateService(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::CreateServiceRequest, ::google::monitoring::v3::Service>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateServiceRequest, ::google::monitoring::v3::Service>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetServiceRequest, ::google::monitoring::v3::Service>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::GetServiceRequest* request, ::google::monitoring::v3::Service* response) { return this->GetService(context, request, response); }));}
    void SetMessageAllocatorFor_GetService(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::GetServiceRequest, ::google::monitoring::v3::Service>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetServiceRequest, ::google::monitoring::v3::Service>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListServices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListServicesRequest, ::google::monitoring::v3::ListServicesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::ListServicesRequest* request, ::google::monitoring::v3::ListServicesResponse* response) { return this->ListServices(context, request, response); }));}
    void SetMessageAllocatorFor_ListServices(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::ListServicesRequest, ::google::monitoring::v3::ListServicesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListServicesRequest, ::google::monitoring::v3::ListServicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServices(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateServiceRequest, ::google::monitoring::v3::Service>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::UpdateServiceRequest* request, ::google::monitoring::v3::Service* response) { return this->UpdateService(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateService(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::UpdateServiceRequest, ::google::monitoring::v3::Service>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateServiceRequest, ::google::monitoring::v3::Service>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteServiceRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::DeleteServiceRequest* request, ::google::protobuf::Empty* response) { return this->DeleteService(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteService(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::DeleteServiceRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteServiceRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response) { return this->CreateServiceLevelObjective(context, request, response); }));}
    void SetMessageAllocatorFor_CreateServiceLevelObjective(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::CreateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::CreateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response) { return this->GetServiceLevelObjective(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceLevelObjective(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::GetServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::GetServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListServiceLevelObjectives() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListServiceLevelObjectivesRequest, ::google::monitoring::v3::ListServiceLevelObjectivesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* request, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* response) { return this->ListServiceLevelObjectives(context, request, response); }));}
    void SetMessageAllocatorFor_ListServiceLevelObjectives(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::ListServiceLevelObjectivesRequest, ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::ListServiceLevelObjectivesRequest, ::google::monitoring::v3::ListServiceLevelObjectivesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServiceLevelObjectives(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServiceLevelObjectives(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* request, ::google::monitoring::v3::ServiceLevelObjective* response) { return this->UpdateServiceLevelObjective(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateServiceLevelObjective(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* request, ::google::protobuf::Empty* response) { return this->DeleteServiceLevelObjective(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteServiceLevelObjective(
        ::grpc::experimental::MessageAllocator< ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateService<ExperimentalWithCallbackMethod_GetService<ExperimentalWithCallbackMethod_ListServices<ExperimentalWithCallbackMethod_UpdateService<ExperimentalWithCallbackMethod_DeleteService<ExperimentalWithCallbackMethod_CreateServiceLevelObjective<ExperimentalWithCallbackMethod_GetServiceLevelObjective<ExperimentalWithCallbackMethod_ListServiceLevelObjectives<ExperimentalWithCallbackMethod_UpdateServiceLevelObjective<ExperimentalWithCallbackMethod_DeleteServiceLevelObjective<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateService<ExperimentalWithCallbackMethod_GetService<ExperimentalWithCallbackMethod_ListServices<ExperimentalWithCallbackMethod_UpdateService<ExperimentalWithCallbackMethod_DeleteService<ExperimentalWithCallbackMethod_CreateServiceLevelObjective<ExperimentalWithCallbackMethod_GetServiceLevelObjective<ExperimentalWithCallbackMethod_ListServiceLevelObjectives<ExperimentalWithCallbackMethod_UpdateServiceLevelObjective<ExperimentalWithCallbackMethod_DeleteServiceLevelObjective<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListServices() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateService() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteService() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateServiceLevelObjective() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceLevelObjective() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListServiceLevelObjectives() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateServiceLevelObjective() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteServiceLevelObjective() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListServices() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateService() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteService() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateServiceLevelObjective() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceLevelObjective() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListServiceLevelObjectives() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceLevelObjectives(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateServiceLevelObjective() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteServiceLevelObjective() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListServices(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateServiceLevelObjective(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceLevelObjective(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServiceLevelObjectives() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListServiceLevelObjectives(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServiceLevelObjectives(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServiceLevelObjectives(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateServiceLevelObjective(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteServiceLevelObjective() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteServiceLevelObjective(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServiceLevelObjective(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServiceLevelObjective(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateServiceRequest, ::google::monitoring::v3::Service>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateServiceRequest, ::google::monitoring::v3::Service>* streamer) {
                       return this->StreamedCreateService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateServiceRequest,::google::monitoring::v3::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetServiceRequest, ::google::monitoring::v3::Service>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetServiceRequest, ::google::monitoring::v3::Service>* streamer) {
                       return this->StreamedGetService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetServiceRequest,::google::monitoring::v3::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListServices() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListServicesRequest, ::google::monitoring::v3::ListServicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListServicesRequest, ::google::monitoring::v3::ListServicesResponse>* streamer) {
                       return this->StreamedListServices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServicesRequest* /*request*/, ::google::monitoring::v3::ListServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListServicesRequest,::google::monitoring::v3::ListServicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateService() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateServiceRequest, ::google::monitoring::v3::Service>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateServiceRequest, ::google::monitoring::v3::Service>* streamer) {
                       return this->StreamedUpdateService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceRequest* /*request*/, ::google::monitoring::v3::Service* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateServiceRequest,::google::monitoring::v3::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteService() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteServiceRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteServiceRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteServiceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateServiceLevelObjective() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::CreateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::CreateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* streamer) {
                       return this->StreamedCreateServiceLevelObjective(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::CreateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::CreateServiceLevelObjectiveRequest,::google::monitoring::v3::ServiceLevelObjective>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceLevelObjective() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::GetServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::GetServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* streamer) {
                       return this->StreamedGetServiceLevelObjective(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::GetServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::GetServiceLevelObjectiveRequest,::google::monitoring::v3::ServiceLevelObjective>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceLevelObjectives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListServiceLevelObjectives() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::ListServiceLevelObjectivesRequest, ::google::monitoring::v3::ListServiceLevelObjectivesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::ListServiceLevelObjectivesRequest, ::google::monitoring::v3::ListServiceLevelObjectivesResponse>* streamer) {
                       return this->StreamedListServiceLevelObjectives(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListServiceLevelObjectives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceLevelObjectives(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::ListServiceLevelObjectivesRequest* /*request*/, ::google::monitoring::v3::ListServiceLevelObjectivesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceLevelObjectives(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::ListServiceLevelObjectivesRequest,::google::monitoring::v3::ListServiceLevelObjectivesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateServiceLevelObjective() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest, ::google::monitoring::v3::ServiceLevelObjective>* streamer) {
                       return this->StreamedUpdateServiceLevelObjective(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest* /*request*/, ::google::monitoring::v3::ServiceLevelObjective* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::UpdateServiceLevelObjectiveRequest,::google::monitoring::v3::ServiceLevelObjective>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServiceLevelObjective : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteServiceLevelObjective() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteServiceLevelObjective(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteServiceLevelObjective() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServiceLevelObjective(::grpc::ServerContext* /*context*/, const ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServiceLevelObjective(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::v3::DeleteServiceLevelObjectiveRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateService<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_UpdateService<WithStreamedUnaryMethod_DeleteService<WithStreamedUnaryMethod_CreateServiceLevelObjective<WithStreamedUnaryMethod_GetServiceLevelObjective<WithStreamedUnaryMethod_ListServiceLevelObjectives<WithStreamedUnaryMethod_UpdateServiceLevelObjective<WithStreamedUnaryMethod_DeleteServiceLevelObjective<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateService<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_UpdateService<WithStreamedUnaryMethod_DeleteService<WithStreamedUnaryMethod_CreateServiceLevelObjective<WithStreamedUnaryMethod_GetServiceLevelObjective<WithStreamedUnaryMethod_ListServiceLevelObjectives<WithStreamedUnaryMethod_UpdateServiceLevelObjective<WithStreamedUnaryMethod_DeleteServiceLevelObjective<Service > > > > > > > > > > StreamedService;
};

}  // namespace v3
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fv3_2fservice_5fservice_2eproto__INCLUDED
