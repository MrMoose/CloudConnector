// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/label.pb.h"
#include "google/api/metric.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fmetric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fmetric_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class LabelValue;
struct LabelValueDefaultTypeInternal;
extern LabelValueDefaultTypeInternal _LabelValue_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class QueryError;
struct QueryErrorDefaultTypeInternal;
extern QueryErrorDefaultTypeInternal _QueryError_default_instance_;
class TextLocator;
struct TextLocatorDefaultTypeInternal;
extern TextLocatorDefaultTypeInternal _TextLocator_default_instance_;
class TextLocator_Position;
struct TextLocator_PositionDefaultTypeInternal;
extern TextLocator_PositionDefaultTypeInternal _TextLocator_Position_default_instance_;
class TimeSeries;
struct TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
class TimeSeriesData;
struct TimeSeriesDataDefaultTypeInternal;
extern TimeSeriesDataDefaultTypeInternal _TimeSeriesData_default_instance_;
class TimeSeriesData_PointData;
struct TimeSeriesData_PointDataDefaultTypeInternal;
extern TimeSeriesData_PointDataDefaultTypeInternal _TimeSeriesData_PointData_default_instance_;
class TimeSeriesDescriptor;
struct TimeSeriesDescriptorDefaultTypeInternal;
extern TimeSeriesDescriptorDefaultTypeInternal _TimeSeriesDescriptor_default_instance_;
class TimeSeriesDescriptor_ValueDescriptor;
struct TimeSeriesDescriptor_ValueDescriptorDefaultTypeInternal;
extern TimeSeriesDescriptor_ValueDescriptorDefaultTypeInternal _TimeSeriesDescriptor_ValueDescriptor_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::LabelValue* Arena::CreateMaybeMessage<::google::monitoring::v3::LabelValue>(Arena*);
template<> ::google::monitoring::v3::Point* Arena::CreateMaybeMessage<::google::monitoring::v3::Point>(Arena*);
template<> ::google::monitoring::v3::QueryError* Arena::CreateMaybeMessage<::google::monitoring::v3::QueryError>(Arena*);
template<> ::google::monitoring::v3::TextLocator* Arena::CreateMaybeMessage<::google::monitoring::v3::TextLocator>(Arena*);
template<> ::google::monitoring::v3::TextLocator_Position* Arena::CreateMaybeMessage<::google::monitoring::v3::TextLocator_Position>(Arena*);
template<> ::google::monitoring::v3::TimeSeries* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeries>(Arena*);
template<> ::google::monitoring::v3::TimeSeriesData* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeriesData>(Arena*);
template<> ::google::monitoring::v3::TimeSeriesData_PointData* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeriesData_PointData>(Arena*);
template<> ::google::monitoring::v3::TimeSeriesDescriptor* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeriesDescriptor>(Arena*);
template<> ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.monitoring.v3.TimeInterval interval = 1;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::google::monitoring::v3::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeInterval* release_interval();
  ::google::monitoring::v3::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::monitoring::v3::TimeInterval* interval);
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_interval() const;
  ::google::monitoring::v3::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::monitoring::v3::TimeInterval* interval);
  ::google::monitoring::v3::TimeInterval* unsafe_arena_release_interval();

  // .google.monitoring.v3.TypedValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::monitoring::v3::TypedValue& value() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TypedValue* release_value();
  ::google::monitoring::v3::TypedValue* mutable_value();
  void set_allocated_value(::google::monitoring::v3::TypedValue* value);
  private:
  const ::google::monitoring::v3::TypedValue& _internal_value() const;
  ::google::monitoring::v3::TypedValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::monitoring::v3::TypedValue* value);
  ::google::monitoring::v3::TypedValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::TimeInterval* interval_;
    ::google::monitoring::v3::TypedValue* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TimeSeries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeries) */ {
 public:
  inline TimeSeries() : TimeSeries(nullptr) {}
  ~TimeSeries() override;
  explicit PROTOBUF_CONSTEXPR TimeSeries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeries(const TimeSeries& from);
  TimeSeries(TimeSeries&& from) noexcept
    : TimeSeries() {
    *this = ::std::move(from);
  }

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeries& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
               &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeSeries& a, TimeSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeries& from) {
    TimeSeries::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TimeSeries";
  }
  protected:
  explicit TimeSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 5,
    kUnitFieldNumber = 8,
    kMetricFieldNumber = 1,
    kResourceFieldNumber = 2,
    kMetadataFieldNumber = 7,
    kMetricKindFieldNumber = 3,
    kValueTypeFieldNumber = 4,
  };
  // repeated .google.monitoring.v3.Point points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::google::monitoring::v3::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Point >*
      mutable_points();
  private:
  const ::google::monitoring::v3::Point& _internal_points(int index) const;
  ::google::monitoring::v3::Point* _internal_add_points();
  public:
  const ::google::monitoring::v3::Point& points(int index) const;
  ::google::monitoring::v3::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Point >&
      points() const;

  // string unit = 8;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .google.api.Metric metric = 1;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::google::api::Metric& metric() const;
  PROTOBUF_NODISCARD ::google::api::Metric* release_metric();
  ::google::api::Metric* mutable_metric();
  void set_allocated_metric(::google::api::Metric* metric);
  private:
  const ::google::api::Metric& _internal_metric() const;
  ::google::api::Metric* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::google::api::Metric* metric);
  ::google::api::Metric* unsafe_arena_release_metric();

  // .google.api.MonitoredResource resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::api::MonitoredResource& resource() const;
  PROTOBUF_NODISCARD ::google::api::MonitoredResource* release_resource();
  ::google::api::MonitoredResource* mutable_resource();
  void set_allocated_resource(::google::api::MonitoredResource* resource);
  private:
  const ::google::api::MonitoredResource& _internal_resource() const;
  ::google::api::MonitoredResource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::api::MonitoredResource* resource);
  ::google::api::MonitoredResource* unsafe_arena_release_resource();

  // .google.api.MonitoredResourceMetadata metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::api::MonitoredResourceMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::api::MonitoredResourceMetadata* release_metadata();
  ::google::api::MonitoredResourceMetadata* mutable_metadata();
  void set_allocated_metadata(::google::api::MonitoredResourceMetadata* metadata);
  private:
  const ::google::api::MonitoredResourceMetadata& _internal_metadata() const;
  ::google::api::MonitoredResourceMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::api::MonitoredResourceMetadata* metadata);
  ::google::api::MonitoredResourceMetadata* unsafe_arena_release_metadata();

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  void clear_metric_kind();
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  private:
  ::google::api::MetricDescriptor_MetricKind _internal_metric_kind() const;
  void _internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  public:

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  void clear_value_type();
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);
  private:
  ::google::api::MetricDescriptor_ValueType _internal_value_type() const;
  void _internal_set_value_type(::google::api::MetricDescriptor_ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Point > points_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::google::api::Metric* metric_;
    ::google::api::MonitoredResource* resource_;
    ::google::api::MonitoredResourceMetadata* metadata_;
    int metric_kind_;
    int value_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesDescriptor_ValueDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor) */ {
 public:
  inline TimeSeriesDescriptor_ValueDescriptor() : TimeSeriesDescriptor_ValueDescriptor(nullptr) {}
  ~TimeSeriesDescriptor_ValueDescriptor() override;
  explicit PROTOBUF_CONSTEXPR TimeSeriesDescriptor_ValueDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesDescriptor_ValueDescriptor(const TimeSeriesDescriptor_ValueDescriptor& from);
  TimeSeriesDescriptor_ValueDescriptor(TimeSeriesDescriptor_ValueDescriptor&& from) noexcept
    : TimeSeriesDescriptor_ValueDescriptor() {
    *this = ::std::move(from);
  }

  inline TimeSeriesDescriptor_ValueDescriptor& operator=(const TimeSeriesDescriptor_ValueDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesDescriptor_ValueDescriptor& operator=(TimeSeriesDescriptor_ValueDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeriesDescriptor_ValueDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesDescriptor_ValueDescriptor* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesDescriptor_ValueDescriptor*>(
               &_TimeSeriesDescriptor_ValueDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSeriesDescriptor_ValueDescriptor& a, TimeSeriesDescriptor_ValueDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesDescriptor_ValueDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesDescriptor_ValueDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeriesDescriptor_ValueDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeriesDescriptor_ValueDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeriesDescriptor_ValueDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeriesDescriptor_ValueDescriptor& from) {
    TimeSeriesDescriptor_ValueDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesDescriptor_ValueDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor";
  }
  protected:
  explicit TimeSeriesDescriptor_ValueDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kUnitFieldNumber = 4,
    kValueTypeFieldNumber = 2,
    kMetricKindFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string unit = 4;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .google.api.MetricDescriptor.ValueType value_type = 2;
  void clear_value_type();
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);
  private:
  ::google::api::MetricDescriptor_ValueType _internal_value_type() const;
  void _internal_set_value_type(::google::api::MetricDescriptor_ValueType value);
  public:

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  void clear_metric_kind();
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  private:
  ::google::api::MetricDescriptor_MetricKind _internal_metric_kind() const;
  void _internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    int value_type_;
    int metric_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeriesDescriptor) */ {
 public:
  inline TimeSeriesDescriptor() : TimeSeriesDescriptor(nullptr) {}
  ~TimeSeriesDescriptor() override;
  explicit PROTOBUF_CONSTEXPR TimeSeriesDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesDescriptor(const TimeSeriesDescriptor& from);
  TimeSeriesDescriptor(TimeSeriesDescriptor&& from) noexcept
    : TimeSeriesDescriptor() {
    *this = ::std::move(from);
  }

  inline TimeSeriesDescriptor& operator=(const TimeSeriesDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesDescriptor& operator=(TimeSeriesDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeriesDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesDescriptor* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesDescriptor*>(
               &_TimeSeriesDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimeSeriesDescriptor& a, TimeSeriesDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeriesDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeriesDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeriesDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeriesDescriptor& from) {
    TimeSeriesDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TimeSeriesDescriptor";
  }
  protected:
  explicit TimeSeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimeSeriesDescriptor_ValueDescriptor ValueDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelDescriptorsFieldNumber = 1,
    kPointDescriptorsFieldNumber = 5,
  };
  // repeated .google.api.LabelDescriptor label_descriptors = 1;
  int label_descriptors_size() const;
  private:
  int _internal_label_descriptors_size() const;
  public:
  void clear_label_descriptors();
  ::google::api::LabelDescriptor* mutable_label_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_label_descriptors();
  private:
  const ::google::api::LabelDescriptor& _internal_label_descriptors(int index) const;
  ::google::api::LabelDescriptor* _internal_add_label_descriptors();
  public:
  const ::google::api::LabelDescriptor& label_descriptors(int index) const;
  ::google::api::LabelDescriptor* add_label_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
      label_descriptors() const;

  // repeated .google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor point_descriptors = 5;
  int point_descriptors_size() const;
  private:
  int _internal_point_descriptors_size() const;
  public:
  void clear_point_descriptors();
  ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* mutable_point_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor >*
      mutable_point_descriptors();
  private:
  const ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor& _internal_point_descriptors(int index) const;
  ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* _internal_add_point_descriptors();
  public:
  const ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor& point_descriptors(int index) const;
  ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* add_point_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor >&
      point_descriptors() const;

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeriesDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor > label_descriptors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor > point_descriptors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesData_PointData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeriesData.PointData) */ {
 public:
  inline TimeSeriesData_PointData() : TimeSeriesData_PointData(nullptr) {}
  ~TimeSeriesData_PointData() override;
  explicit PROTOBUF_CONSTEXPR TimeSeriesData_PointData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesData_PointData(const TimeSeriesData_PointData& from);
  TimeSeriesData_PointData(TimeSeriesData_PointData&& from) noexcept
    : TimeSeriesData_PointData() {
    *this = ::std::move(from);
  }

  inline TimeSeriesData_PointData& operator=(const TimeSeriesData_PointData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesData_PointData& operator=(TimeSeriesData_PointData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeriesData_PointData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesData_PointData* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesData_PointData*>(
               &_TimeSeriesData_PointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimeSeriesData_PointData& a, TimeSeriesData_PointData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesData_PointData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesData_PointData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeriesData_PointData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeriesData_PointData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeriesData_PointData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeriesData_PointData& from) {
    TimeSeriesData_PointData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesData_PointData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TimeSeriesData.PointData";
  }
  protected:
  explicit TimeSeriesData_PointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kTimeIntervalFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.TypedValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::google::monitoring::v3::TypedValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TypedValue >*
      mutable_values();
  private:
  const ::google::monitoring::v3::TypedValue& _internal_values(int index) const;
  ::google::monitoring::v3::TypedValue* _internal_add_values();
  public:
  const ::google::monitoring::v3::TypedValue& values(int index) const;
  ::google::monitoring::v3::TypedValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TypedValue >&
      values() const;

  // .google.monitoring.v3.TimeInterval time_interval = 2;
  bool has_time_interval() const;
  private:
  bool _internal_has_time_interval() const;
  public:
  void clear_time_interval();
  const ::google::monitoring::v3::TimeInterval& time_interval() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeInterval* release_time_interval();
  ::google::monitoring::v3::TimeInterval* mutable_time_interval();
  void set_allocated_time_interval(::google::monitoring::v3::TimeInterval* time_interval);
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_time_interval() const;
  ::google::monitoring::v3::TimeInterval* _internal_mutable_time_interval();
  public:
  void unsafe_arena_set_allocated_time_interval(
      ::google::monitoring::v3::TimeInterval* time_interval);
  ::google::monitoring::v3::TimeInterval* unsafe_arena_release_time_interval();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeriesData.PointData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TypedValue > values_;
    ::google::monitoring::v3::TimeInterval* time_interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeriesData) */ {
 public:
  inline TimeSeriesData() : TimeSeriesData(nullptr) {}
  ~TimeSeriesData() override;
  explicit PROTOBUF_CONSTEXPR TimeSeriesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesData(const TimeSeriesData& from);
  TimeSeriesData(TimeSeriesData&& from) noexcept
    : TimeSeriesData() {
    *this = ::std::move(from);
  }

  inline TimeSeriesData& operator=(const TimeSeriesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesData& operator=(TimeSeriesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeriesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesData* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesData*>(
               &_TimeSeriesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeSeriesData& a, TimeSeriesData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeriesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeriesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeriesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeriesData& from) {
    TimeSeriesData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TimeSeriesData";
  }
  protected:
  explicit TimeSeriesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimeSeriesData_PointData PointData;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelValuesFieldNumber = 1,
    kPointDataFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.LabelValue label_values = 1;
  int label_values_size() const;
  private:
  int _internal_label_values_size() const;
  public:
  void clear_label_values();
  ::google::monitoring::v3::LabelValue* mutable_label_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::LabelValue >*
      mutable_label_values();
  private:
  const ::google::monitoring::v3::LabelValue& _internal_label_values(int index) const;
  ::google::monitoring::v3::LabelValue* _internal_add_label_values();
  public:
  const ::google::monitoring::v3::LabelValue& label_values(int index) const;
  ::google::monitoring::v3::LabelValue* add_label_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::LabelValue >&
      label_values() const;

  // repeated .google.monitoring.v3.TimeSeriesData.PointData point_data = 2;
  int point_data_size() const;
  private:
  int _internal_point_data_size() const;
  public:
  void clear_point_data();
  ::google::monitoring::v3::TimeSeriesData_PointData* mutable_point_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData_PointData >*
      mutable_point_data();
  private:
  const ::google::monitoring::v3::TimeSeriesData_PointData& _internal_point_data(int index) const;
  ::google::monitoring::v3::TimeSeriesData_PointData* _internal_add_point_data();
  public:
  const ::google::monitoring::v3::TimeSeriesData_PointData& point_data(int index) const;
  ::google::monitoring::v3::TimeSeriesData_PointData* add_point_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData_PointData >&
      point_data() const;

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeriesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::LabelValue > label_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData_PointData > point_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class LabelValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.LabelValue) */ {
 public:
  inline LabelValue() : LabelValue(nullptr) {}
  ~LabelValue() override;
  explicit PROTOBUF_CONSTEXPR LabelValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelValue(const LabelValue& from);
  LabelValue(LabelValue&& from) noexcept
    : LabelValue() {
    *this = ::std::move(from);
  }

  inline LabelValue& operator=(const LabelValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelValue& operator=(LabelValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 1,
    kInt64Value = 2,
    kStringValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const LabelValue* internal_default_instance() {
    return reinterpret_cast<const LabelValue*>(
               &_LabelValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LabelValue& a, LabelValue& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabelValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LabelValue& from) {
    LabelValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.LabelValue";
  }
  protected:
  explicit LabelValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kStringValueFieldNumber = 3,
  };
  // bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // string string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.LabelValue)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_string_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_value_;
      int64_t int64_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class QueryError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.QueryError) */ {
 public:
  inline QueryError() : QueryError(nullptr) {}
  ~QueryError() override;
  explicit PROTOBUF_CONSTEXPR QueryError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryError(const QueryError& from);
  QueryError(QueryError&& from) noexcept
    : QueryError() {
    *this = ::std::move(from);
  }

  inline QueryError& operator=(const QueryError& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryError& operator=(QueryError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryError& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryError* internal_default_instance() {
    return reinterpret_cast<const QueryError*>(
               &_QueryError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryError& a, QueryError& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryError& from) {
    QueryError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.QueryError";
  }
  protected:
  explicit QueryError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLocatorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.monitoring.v3.TextLocator locator = 1;
  bool has_locator() const;
  private:
  bool _internal_has_locator() const;
  public:
  void clear_locator();
  const ::google::monitoring::v3::TextLocator& locator() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TextLocator* release_locator();
  ::google::monitoring::v3::TextLocator* mutable_locator();
  void set_allocated_locator(::google::monitoring::v3::TextLocator* locator);
  private:
  const ::google::monitoring::v3::TextLocator& _internal_locator() const;
  ::google::monitoring::v3::TextLocator* _internal_mutable_locator();
  public:
  void unsafe_arena_set_allocated_locator(
      ::google::monitoring::v3::TextLocator* locator);
  ::google::monitoring::v3::TextLocator* unsafe_arena_release_locator();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.QueryError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::google::monitoring::v3::TextLocator* locator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TextLocator_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TextLocator.Position) */ {
 public:
  inline TextLocator_Position() : TextLocator_Position(nullptr) {}
  ~TextLocator_Position() override;
  explicit PROTOBUF_CONSTEXPR TextLocator_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextLocator_Position(const TextLocator_Position& from);
  TextLocator_Position(TextLocator_Position&& from) noexcept
    : TextLocator_Position() {
    *this = ::std::move(from);
  }

  inline TextLocator_Position& operator=(const TextLocator_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextLocator_Position& operator=(TextLocator_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextLocator_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextLocator_Position* internal_default_instance() {
    return reinterpret_cast<const TextLocator_Position*>(
               &_TextLocator_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TextLocator_Position& a, TextLocator_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(TextLocator_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextLocator_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextLocator_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextLocator_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextLocator_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextLocator_Position& from) {
    TextLocator_Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextLocator_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TextLocator.Position";
  }
  protected:
  explicit TextLocator_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
  };
  // int32 line = 1;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // int32 column = 2;
  void clear_column();
  int32_t column() const;
  void set_column(int32_t value);
  private:
  int32_t _internal_column() const;
  void _internal_set_column(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TextLocator.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_;
    int32_t column_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class TextLocator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TextLocator) */ {
 public:
  inline TextLocator() : TextLocator(nullptr) {}
  ~TextLocator() override;
  explicit PROTOBUF_CONSTEXPR TextLocator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextLocator(const TextLocator& from);
  TextLocator(TextLocator&& from) noexcept
    : TextLocator() {
    *this = ::std::move(from);
  }

  inline TextLocator& operator=(const TextLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextLocator& operator=(TextLocator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextLocator& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextLocator* internal_default_instance() {
    return reinterpret_cast<const TextLocator*>(
               &_TextLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TextLocator& a, TextLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(TextLocator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextLocator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextLocator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextLocator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextLocator& from) {
    TextLocator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextLocator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.TextLocator";
  }
  protected:
  explicit TextLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TextLocator_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kNestingReasonFieldNumber = 5,
    kStartPositionFieldNumber = 2,
    kEndPositionFieldNumber = 3,
    kNestedLocatorFieldNumber = 4,
  };
  // string source = 1;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string nesting_reason = 5;
  void clear_nesting_reason();
  const std::string& nesting_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nesting_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nesting_reason();
  PROTOBUF_NODISCARD std::string* release_nesting_reason();
  void set_allocated_nesting_reason(std::string* nesting_reason);
  private:
  const std::string& _internal_nesting_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nesting_reason(const std::string& value);
  std::string* _internal_mutable_nesting_reason();
  public:

  // .google.monitoring.v3.TextLocator.Position start_position = 2;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::google::monitoring::v3::TextLocator_Position& start_position() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TextLocator_Position* release_start_position();
  ::google::monitoring::v3::TextLocator_Position* mutable_start_position();
  void set_allocated_start_position(::google::monitoring::v3::TextLocator_Position* start_position);
  private:
  const ::google::monitoring::v3::TextLocator_Position& _internal_start_position() const;
  ::google::monitoring::v3::TextLocator_Position* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::google::monitoring::v3::TextLocator_Position* start_position);
  ::google::monitoring::v3::TextLocator_Position* unsafe_arena_release_start_position();

  // .google.monitoring.v3.TextLocator.Position end_position = 3;
  bool has_end_position() const;
  private:
  bool _internal_has_end_position() const;
  public:
  void clear_end_position();
  const ::google::monitoring::v3::TextLocator_Position& end_position() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TextLocator_Position* release_end_position();
  ::google::monitoring::v3::TextLocator_Position* mutable_end_position();
  void set_allocated_end_position(::google::monitoring::v3::TextLocator_Position* end_position);
  private:
  const ::google::monitoring::v3::TextLocator_Position& _internal_end_position() const;
  ::google::monitoring::v3::TextLocator_Position* _internal_mutable_end_position();
  public:
  void unsafe_arena_set_allocated_end_position(
      ::google::monitoring::v3::TextLocator_Position* end_position);
  ::google::monitoring::v3::TextLocator_Position* unsafe_arena_release_end_position();

  // .google.monitoring.v3.TextLocator nested_locator = 4;
  bool has_nested_locator() const;
  private:
  bool _internal_has_nested_locator() const;
  public:
  void clear_nested_locator();
  const ::google::monitoring::v3::TextLocator& nested_locator() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TextLocator* release_nested_locator();
  ::google::monitoring::v3::TextLocator* mutable_nested_locator();
  void set_allocated_nested_locator(::google::monitoring::v3::TextLocator* nested_locator);
  private:
  const ::google::monitoring::v3::TextLocator& _internal_nested_locator() const;
  ::google::monitoring::v3::TextLocator* _internal_mutable_nested_locator();
  public:
  void unsafe_arena_set_allocated_nested_locator(
      ::google::monitoring::v3::TextLocator* nested_locator);
  ::google::monitoring::v3::TextLocator* unsafe_arena_release_nested_locator();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TextLocator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nesting_reason_;
    ::google::monitoring::v3::TextLocator_Position* start_position_;
    ::google::monitoring::v3::TextLocator_Position* end_position_;
    ::google::monitoring::v3::TextLocator* nested_locator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// .google.monitoring.v3.TimeInterval interval = 1;
inline bool Point::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool Point::has_interval() const {
  return _internal_has_interval();
}
inline const ::google::monitoring::v3::TimeInterval& Point::_internal_interval() const {
  const ::google::monitoring::v3::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeInterval&>(
      ::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline const ::google::monitoring::v3::TimeInterval& Point::interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.interval)
  return _internal_interval();
}
inline void Point::unsafe_arena_set_allocated_interval(
    ::google::monitoring::v3::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.Point.interval)
}
inline ::google::monitoring::v3::TimeInterval* Point::release_interval() {
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* Point::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* Point::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::monitoring::v3::TimeInterval* Point::mutable_interval() {
  ::google::monitoring::v3::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.interval)
  return _msg;
}
inline void Point::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.interval)
}

// .google.monitoring.v3.TypedValue value = 2;
inline bool Point::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool Point::has_value() const {
  return _internal_has_value();
}
inline const ::google::monitoring::v3::TypedValue& Point::_internal_value() const {
  const ::google::monitoring::v3::TypedValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TypedValue&>(
      ::google::monitoring::v3::_TypedValue_default_instance_);
}
inline const ::google::monitoring::v3::TypedValue& Point::value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.value)
  return _internal_value();
}
inline void Point::unsafe_arena_set_allocated_value(
    ::google::monitoring::v3::TypedValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.Point.value)
}
inline ::google::monitoring::v3::TypedValue* Point::release_value() {
  
  ::google::monitoring::v3::TypedValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TypedValue* Point::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.value)
  
  ::google::monitoring::v3::TypedValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TypedValue* Point::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TypedValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::google::monitoring::v3::TypedValue* Point::mutable_value() {
  ::google::monitoring::v3::TypedValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.value)
  return _msg;
}
inline void Point::set_allocated_value(::google::monitoring::v3::TypedValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.value)
}

// -------------------------------------------------------------------

// TimeSeries

// .google.api.Metric metric = 1;
inline bool TimeSeries::_internal_has_metric() const {
  return this != internal_default_instance() && _impl_.metric_ != nullptr;
}
inline bool TimeSeries::has_metric() const {
  return _internal_has_metric();
}
inline const ::google::api::Metric& TimeSeries::_internal_metric() const {
  const ::google::api::Metric* p = _impl_.metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Metric&>(
      ::google::api::_Metric_default_instance_);
}
inline const ::google::api::Metric& TimeSeries::metric() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric)
  return _internal_metric();
}
inline void TimeSeries::unsafe_arena_set_allocated_metric(
    ::google::api::Metric* metric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_);
  }
  _impl_.metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TimeSeries.metric)
}
inline ::google::api::Metric* TimeSeries::release_metric() {
  
  ::google::api::Metric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Metric* TimeSeries::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.metric)
  
  ::google::api::Metric* temp = _impl_.metric_;
  _impl_.metric_ = nullptr;
  return temp;
}
inline ::google::api::Metric* TimeSeries::_internal_mutable_metric() {
  
  if (_impl_.metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Metric>(GetArenaForAllocation());
    _impl_.metric_ = p;
  }
  return _impl_.metric_;
}
inline ::google::api::Metric* TimeSeries::mutable_metric() {
  ::google::api::Metric* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.metric)
  return _msg;
}
inline void TimeSeries::set_allocated_metric(::google::api::Metric* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_);
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric));
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.metric)
}

// .google.api.MonitoredResource resource = 2;
inline bool TimeSeries::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool TimeSeries::has_resource() const {
  return _internal_has_resource();
}
inline const ::google::api::MonitoredResource& TimeSeries::_internal_resource() const {
  const ::google::api::MonitoredResource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MonitoredResource&>(
      ::google::api::_MonitoredResource_default_instance_);
}
inline const ::google::api::MonitoredResource& TimeSeries::resource() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.resource)
  return _internal_resource();
}
inline void TimeSeries::unsafe_arena_set_allocated_resource(
    ::google::api::MonitoredResource* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TimeSeries.resource)
}
inline ::google::api::MonitoredResource* TimeSeries::release_resource() {
  
  ::google::api::MonitoredResource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::MonitoredResource* TimeSeries::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.resource)
  
  ::google::api::MonitoredResource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::api::MonitoredResource* TimeSeries::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResource>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::api::MonitoredResource* TimeSeries::mutable_resource() {
  ::google::api::MonitoredResource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.resource)
  return _msg;
}
inline void TimeSeries::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource));
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.resource)
}

// .google.api.MonitoredResourceMetadata metadata = 7;
inline bool TimeSeries::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool TimeSeries::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::google::api::MonitoredResourceMetadata& TimeSeries::_internal_metadata() const {
  const ::google::api::MonitoredResourceMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MonitoredResourceMetadata&>(
      ::google::api::_MonitoredResourceMetadata_default_instance_);
}
inline const ::google::api::MonitoredResourceMetadata& TimeSeries::metadata() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metadata)
  return _internal_metadata();
}
inline void TimeSeries::unsafe_arena_set_allocated_metadata(
    ::google::api::MonitoredResourceMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TimeSeries.metadata)
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::release_metadata() {
  
  ::google::api::MonitoredResourceMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.metadata)
  
  ::google::api::MonitoredResourceMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResourceMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::mutable_metadata() {
  ::google::api::MonitoredResourceMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.metadata)
  return _msg;
}
inline void TimeSeries::set_allocated_metadata(::google::api::MonitoredResourceMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.metadata)
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3;
inline void TimeSeries::clear_metric_kind() {
  _impl_.metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeries::_internal_metric_kind() const {
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(_impl_.metric_kind_);
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeries::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric_kind)
  return _internal_metric_kind();
}
inline void TimeSeries::_internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  _impl_.metric_kind_ = value;
}
inline void TimeSeries::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  _internal_set_metric_kind(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.metric_kind)
}

// .google.api.MetricDescriptor.ValueType value_type = 4;
inline void TimeSeries::clear_value_type() {
  _impl_.value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType TimeSeries::_internal_value_type() const {
  return static_cast< ::google::api::MetricDescriptor_ValueType >(_impl_.value_type_);
}
inline ::google::api::MetricDescriptor_ValueType TimeSeries::value_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.value_type)
  return _internal_value_type();
}
inline void TimeSeries::_internal_set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  _impl_.value_type_ = value;
}
inline void TimeSeries::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.value_type)
}

// repeated .google.monitoring.v3.Point points = 5;
inline int TimeSeries::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int TimeSeries::points_size() const {
  return _internal_points_size();
}
inline void TimeSeries::clear_points() {
  _impl_.points_.Clear();
}
inline ::google::monitoring::v3::Point* TimeSeries::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Point >*
TimeSeries::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeries.points)
  return &_impl_.points_;
}
inline const ::google::monitoring::v3::Point& TimeSeries::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::google::monitoring::v3::Point& TimeSeries::points(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.points)
  return _internal_points(index);
}
inline ::google::monitoring::v3::Point* TimeSeries::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::google::monitoring::v3::Point* TimeSeries::add_points() {
  ::google::monitoring::v3::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeries.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::Point >&
TimeSeries::points() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeries.points)
  return _impl_.points_;
}

// string unit = 8;
inline void TimeSeries::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& TimeSeries::unit() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeSeries::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.unit)
}
inline std::string* TimeSeries::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.unit)
  return _s;
}
inline const std::string& TimeSeries::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void TimeSeries::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeSeries::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeSeries::release_unit() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.unit)
  return _impl_.unit_.Release();
}
inline void TimeSeries::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.unit)
}

// -------------------------------------------------------------------

// TimeSeriesDescriptor_ValueDescriptor

// string key = 1;
inline void TimeSeriesDescriptor_ValueDescriptor::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& TimeSeriesDescriptor_ValueDescriptor::key() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeSeriesDescriptor_ValueDescriptor::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.key)
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.key)
  return _s;
}
inline const std::string& TimeSeriesDescriptor_ValueDescriptor::_internal_key() const {
  return _impl_.key_.Get();
}
inline void TimeSeriesDescriptor_ValueDescriptor::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::release_key() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.key)
  return _impl_.key_.Release();
}
inline void TimeSeriesDescriptor_ValueDescriptor::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.key)
}

// .google.api.MetricDescriptor.ValueType value_type = 2;
inline void TimeSeriesDescriptor_ValueDescriptor::clear_value_type() {
  _impl_.value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType TimeSeriesDescriptor_ValueDescriptor::_internal_value_type() const {
  return static_cast< ::google::api::MetricDescriptor_ValueType >(_impl_.value_type_);
}
inline ::google::api::MetricDescriptor_ValueType TimeSeriesDescriptor_ValueDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.value_type)
  return _internal_value_type();
}
inline void TimeSeriesDescriptor_ValueDescriptor::_internal_set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  _impl_.value_type_ = value;
}
inline void TimeSeriesDescriptor_ValueDescriptor::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.value_type)
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3;
inline void TimeSeriesDescriptor_ValueDescriptor::clear_metric_kind() {
  _impl_.metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeriesDescriptor_ValueDescriptor::_internal_metric_kind() const {
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(_impl_.metric_kind_);
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeriesDescriptor_ValueDescriptor::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.metric_kind)
  return _internal_metric_kind();
}
inline void TimeSeriesDescriptor_ValueDescriptor::_internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  _impl_.metric_kind_ = value;
}
inline void TimeSeriesDescriptor_ValueDescriptor::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  _internal_set_metric_kind(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.metric_kind)
}

// string unit = 4;
inline void TimeSeriesDescriptor_ValueDescriptor::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& TimeSeriesDescriptor_ValueDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeSeriesDescriptor_ValueDescriptor::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.unit)
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.unit)
  return _s;
}
inline const std::string& TimeSeriesDescriptor_ValueDescriptor::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void TimeSeriesDescriptor_ValueDescriptor::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeSeriesDescriptor_ValueDescriptor::release_unit() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.unit)
  return _impl_.unit_.Release();
}
inline void TimeSeriesDescriptor_ValueDescriptor::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor.unit)
}

// -------------------------------------------------------------------

// TimeSeriesDescriptor

// repeated .google.api.LabelDescriptor label_descriptors = 1;
inline int TimeSeriesDescriptor::_internal_label_descriptors_size() const {
  return _impl_.label_descriptors_.size();
}
inline int TimeSeriesDescriptor::label_descriptors_size() const {
  return _internal_label_descriptors_size();
}
inline ::google::api::LabelDescriptor* TimeSeriesDescriptor::mutable_label_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesDescriptor.label_descriptors)
  return _impl_.label_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
TimeSeriesDescriptor::mutable_label_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeriesDescriptor.label_descriptors)
  return &_impl_.label_descriptors_;
}
inline const ::google::api::LabelDescriptor& TimeSeriesDescriptor::_internal_label_descriptors(int index) const {
  return _impl_.label_descriptors_.Get(index);
}
inline const ::google::api::LabelDescriptor& TimeSeriesDescriptor::label_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.label_descriptors)
  return _internal_label_descriptors(index);
}
inline ::google::api::LabelDescriptor* TimeSeriesDescriptor::_internal_add_label_descriptors() {
  return _impl_.label_descriptors_.Add();
}
inline ::google::api::LabelDescriptor* TimeSeriesDescriptor::add_label_descriptors() {
  ::google::api::LabelDescriptor* _add = _internal_add_label_descriptors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeriesDescriptor.label_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
TimeSeriesDescriptor::label_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeriesDescriptor.label_descriptors)
  return _impl_.label_descriptors_;
}

// repeated .google.monitoring.v3.TimeSeriesDescriptor.ValueDescriptor point_descriptors = 5;
inline int TimeSeriesDescriptor::_internal_point_descriptors_size() const {
  return _impl_.point_descriptors_.size();
}
inline int TimeSeriesDescriptor::point_descriptors_size() const {
  return _internal_point_descriptors_size();
}
inline void TimeSeriesDescriptor::clear_point_descriptors() {
  _impl_.point_descriptors_.Clear();
}
inline ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* TimeSeriesDescriptor::mutable_point_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesDescriptor.point_descriptors)
  return _impl_.point_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor >*
TimeSeriesDescriptor::mutable_point_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeriesDescriptor.point_descriptors)
  return &_impl_.point_descriptors_;
}
inline const ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor& TimeSeriesDescriptor::_internal_point_descriptors(int index) const {
  return _impl_.point_descriptors_.Get(index);
}
inline const ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor& TimeSeriesDescriptor::point_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesDescriptor.point_descriptors)
  return _internal_point_descriptors(index);
}
inline ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* TimeSeriesDescriptor::_internal_add_point_descriptors() {
  return _impl_.point_descriptors_.Add();
}
inline ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* TimeSeriesDescriptor::add_point_descriptors() {
  ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor* _add = _internal_add_point_descriptors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeriesDescriptor.point_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesDescriptor_ValueDescriptor >&
TimeSeriesDescriptor::point_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeriesDescriptor.point_descriptors)
  return _impl_.point_descriptors_;
}

// -------------------------------------------------------------------

// TimeSeriesData_PointData

// repeated .google.monitoring.v3.TypedValue values = 1;
inline int TimeSeriesData_PointData::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int TimeSeriesData_PointData::values_size() const {
  return _internal_values_size();
}
inline ::google::monitoring::v3::TypedValue* TimeSeriesData_PointData::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesData.PointData.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TypedValue >*
TimeSeriesData_PointData::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeriesData.PointData.values)
  return &_impl_.values_;
}
inline const ::google::monitoring::v3::TypedValue& TimeSeriesData_PointData::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::google::monitoring::v3::TypedValue& TimeSeriesData_PointData::values(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesData.PointData.values)
  return _internal_values(index);
}
inline ::google::monitoring::v3::TypedValue* TimeSeriesData_PointData::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::google::monitoring::v3::TypedValue* TimeSeriesData_PointData::add_values() {
  ::google::monitoring::v3::TypedValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeriesData.PointData.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TypedValue >&
TimeSeriesData_PointData::values() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeriesData.PointData.values)
  return _impl_.values_;
}

// .google.monitoring.v3.TimeInterval time_interval = 2;
inline bool TimeSeriesData_PointData::_internal_has_time_interval() const {
  return this != internal_default_instance() && _impl_.time_interval_ != nullptr;
}
inline bool TimeSeriesData_PointData::has_time_interval() const {
  return _internal_has_time_interval();
}
inline const ::google::monitoring::v3::TimeInterval& TimeSeriesData_PointData::_internal_time_interval() const {
  const ::google::monitoring::v3::TimeInterval* p = _impl_.time_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeInterval&>(
      ::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline const ::google::monitoring::v3::TimeInterval& TimeSeriesData_PointData::time_interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesData.PointData.time_interval)
  return _internal_time_interval();
}
inline void TimeSeriesData_PointData::unsafe_arena_set_allocated_time_interval(
    ::google::monitoring::v3::TimeInterval* time_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_interval_);
  }
  _impl_.time_interval_ = time_interval;
  if (time_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TimeSeriesData.PointData.time_interval)
}
inline ::google::monitoring::v3::TimeInterval* TimeSeriesData_PointData::release_time_interval() {
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.time_interval_;
  _impl_.time_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* TimeSeriesData_PointData::unsafe_arena_release_time_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeriesData.PointData.time_interval)
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.time_interval_;
  _impl_.time_interval_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* TimeSeriesData_PointData::_internal_mutable_time_interval() {
  
  if (_impl_.time_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaForAllocation());
    _impl_.time_interval_ = p;
  }
  return _impl_.time_interval_;
}
inline ::google::monitoring::v3::TimeInterval* TimeSeriesData_PointData::mutable_time_interval() {
  ::google::monitoring::v3::TimeInterval* _msg = _internal_mutable_time_interval();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesData.PointData.time_interval)
  return _msg;
}
inline void TimeSeriesData_PointData::set_allocated_time_interval(::google::monitoring::v3::TimeInterval* time_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_interval_);
  }
  if (time_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_interval));
    if (message_arena != submessage_arena) {
      time_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_interval_ = time_interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeriesData.PointData.time_interval)
}

// -------------------------------------------------------------------

// TimeSeriesData

// repeated .google.monitoring.v3.LabelValue label_values = 1;
inline int TimeSeriesData::_internal_label_values_size() const {
  return _impl_.label_values_.size();
}
inline int TimeSeriesData::label_values_size() const {
  return _internal_label_values_size();
}
inline void TimeSeriesData::clear_label_values() {
  _impl_.label_values_.Clear();
}
inline ::google::monitoring::v3::LabelValue* TimeSeriesData::mutable_label_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesData.label_values)
  return _impl_.label_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::LabelValue >*
TimeSeriesData::mutable_label_values() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeriesData.label_values)
  return &_impl_.label_values_;
}
inline const ::google::monitoring::v3::LabelValue& TimeSeriesData::_internal_label_values(int index) const {
  return _impl_.label_values_.Get(index);
}
inline const ::google::monitoring::v3::LabelValue& TimeSeriesData::label_values(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesData.label_values)
  return _internal_label_values(index);
}
inline ::google::monitoring::v3::LabelValue* TimeSeriesData::_internal_add_label_values() {
  return _impl_.label_values_.Add();
}
inline ::google::monitoring::v3::LabelValue* TimeSeriesData::add_label_values() {
  ::google::monitoring::v3::LabelValue* _add = _internal_add_label_values();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeriesData.label_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::LabelValue >&
TimeSeriesData::label_values() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeriesData.label_values)
  return _impl_.label_values_;
}

// repeated .google.monitoring.v3.TimeSeriesData.PointData point_data = 2;
inline int TimeSeriesData::_internal_point_data_size() const {
  return _impl_.point_data_.size();
}
inline int TimeSeriesData::point_data_size() const {
  return _internal_point_data_size();
}
inline void TimeSeriesData::clear_point_data() {
  _impl_.point_data_.Clear();
}
inline ::google::monitoring::v3::TimeSeriesData_PointData* TimeSeriesData::mutable_point_data(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeriesData.point_data)
  return _impl_.point_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData_PointData >*
TimeSeriesData::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeriesData.point_data)
  return &_impl_.point_data_;
}
inline const ::google::monitoring::v3::TimeSeriesData_PointData& TimeSeriesData::_internal_point_data(int index) const {
  return _impl_.point_data_.Get(index);
}
inline const ::google::monitoring::v3::TimeSeriesData_PointData& TimeSeriesData::point_data(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeriesData.point_data)
  return _internal_point_data(index);
}
inline ::google::monitoring::v3::TimeSeriesData_PointData* TimeSeriesData::_internal_add_point_data() {
  return _impl_.point_data_.Add();
}
inline ::google::monitoring::v3::TimeSeriesData_PointData* TimeSeriesData::add_point_data() {
  ::google::monitoring::v3::TimeSeriesData_PointData* _add = _internal_add_point_data();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeriesData.point_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData_PointData >&
TimeSeriesData::point_data() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeriesData.point_data)
  return _impl_.point_data_;
}

// -------------------------------------------------------------------

// LabelValue

// bool bool_value = 1;
inline bool LabelValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool LabelValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void LabelValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void LabelValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool LabelValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void LabelValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool LabelValue::bool_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.LabelValue.bool_value)
  return _internal_bool_value();
}
inline void LabelValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.LabelValue.bool_value)
}

// int64 int64_value = 2;
inline bool LabelValue::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool LabelValue::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void LabelValue::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void LabelValue::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t LabelValue::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.value_.int64_value_;
  }
  return int64_t{0};
}
inline void LabelValue::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
}
inline int64_t LabelValue::int64_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.LabelValue.int64_value)
  return _internal_int64_value();
}
inline void LabelValue::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.LabelValue.int64_value)
}

// string string_value = 3;
inline bool LabelValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool LabelValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void LabelValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void LabelValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& LabelValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.LabelValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void LabelValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.LabelValue.string_value)
}
inline std::string* LabelValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.LabelValue.string_value)
  return _s;
}
inline const std::string& LabelValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LabelValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* LabelValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* LabelValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.LabelValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void LabelValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.LabelValue.string_value)
}

inline bool LabelValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void LabelValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline LabelValue::ValueCase LabelValue::value_case() const {
  return LabelValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryError

// .google.monitoring.v3.TextLocator locator = 1;
inline bool QueryError::_internal_has_locator() const {
  return this != internal_default_instance() && _impl_.locator_ != nullptr;
}
inline bool QueryError::has_locator() const {
  return _internal_has_locator();
}
inline void QueryError::clear_locator() {
  if (GetArenaForAllocation() == nullptr && _impl_.locator_ != nullptr) {
    delete _impl_.locator_;
  }
  _impl_.locator_ = nullptr;
}
inline const ::google::monitoring::v3::TextLocator& QueryError::_internal_locator() const {
  const ::google::monitoring::v3::TextLocator* p = _impl_.locator_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TextLocator&>(
      ::google::monitoring::v3::_TextLocator_default_instance_);
}
inline const ::google::monitoring::v3::TextLocator& QueryError::locator() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryError.locator)
  return _internal_locator();
}
inline void QueryError::unsafe_arena_set_allocated_locator(
    ::google::monitoring::v3::TextLocator* locator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locator_);
  }
  _impl_.locator_ = locator;
  if (locator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.QueryError.locator)
}
inline ::google::monitoring::v3::TextLocator* QueryError::release_locator() {
  
  ::google::monitoring::v3::TextLocator* temp = _impl_.locator_;
  _impl_.locator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TextLocator* QueryError::unsafe_arena_release_locator() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryError.locator)
  
  ::google::monitoring::v3::TextLocator* temp = _impl_.locator_;
  _impl_.locator_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TextLocator* QueryError::_internal_mutable_locator() {
  
  if (_impl_.locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TextLocator>(GetArenaForAllocation());
    _impl_.locator_ = p;
  }
  return _impl_.locator_;
}
inline ::google::monitoring::v3::TextLocator* QueryError::mutable_locator() {
  ::google::monitoring::v3::TextLocator* _msg = _internal_mutable_locator();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryError.locator)
  return _msg;
}
inline void QueryError::set_allocated_locator(::google::monitoring::v3::TextLocator* locator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.locator_;
  }
  if (locator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locator);
    if (message_arena != submessage_arena) {
      locator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locator, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.locator_ = locator;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryError.locator)
}

// string message = 2;
inline void QueryError::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& QueryError::message() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryError::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryError.message)
}
inline std::string* QueryError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryError.message)
  return _s;
}
inline const std::string& QueryError::_internal_message() const {
  return _impl_.message_.Get();
}
inline void QueryError::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryError::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryError::release_message() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryError.message)
  return _impl_.message_.Release();
}
inline void QueryError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryError.message)
}

// -------------------------------------------------------------------

// TextLocator_Position

// int32 line = 1;
inline void TextLocator_Position::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t TextLocator_Position::_internal_line() const {
  return _impl_.line_;
}
inline int32_t TextLocator_Position::line() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.Position.line)
  return _internal_line();
}
inline void TextLocator_Position::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void TextLocator_Position::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TextLocator.Position.line)
}

// int32 column = 2;
inline void TextLocator_Position::clear_column() {
  _impl_.column_ = 0;
}
inline int32_t TextLocator_Position::_internal_column() const {
  return _impl_.column_;
}
inline int32_t TextLocator_Position::column() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.Position.column)
  return _internal_column();
}
inline void TextLocator_Position::_internal_set_column(int32_t value) {
  
  _impl_.column_ = value;
}
inline void TextLocator_Position::set_column(int32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TextLocator.Position.column)
}

// -------------------------------------------------------------------

// TextLocator

// string source = 1;
inline void TextLocator::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TextLocator::source() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextLocator::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TextLocator.source)
}
inline std::string* TextLocator::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TextLocator.source)
  return _s;
}
inline const std::string& TextLocator::_internal_source() const {
  return _impl_.source_.Get();
}
inline void TextLocator::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TextLocator::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* TextLocator::release_source() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TextLocator.source)
  return _impl_.source_.Release();
}
inline void TextLocator::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TextLocator.source)
}

// .google.monitoring.v3.TextLocator.Position start_position = 2;
inline bool TextLocator::_internal_has_start_position() const {
  return this != internal_default_instance() && _impl_.start_position_ != nullptr;
}
inline bool TextLocator::has_start_position() const {
  return _internal_has_start_position();
}
inline void TextLocator::clear_start_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_position_ != nullptr) {
    delete _impl_.start_position_;
  }
  _impl_.start_position_ = nullptr;
}
inline const ::google::monitoring::v3::TextLocator_Position& TextLocator::_internal_start_position() const {
  const ::google::monitoring::v3::TextLocator_Position* p = _impl_.start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TextLocator_Position&>(
      ::google::monitoring::v3::_TextLocator_Position_default_instance_);
}
inline const ::google::monitoring::v3::TextLocator_Position& TextLocator::start_position() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.start_position)
  return _internal_start_position();
}
inline void TextLocator::unsafe_arena_set_allocated_start_position(
    ::google::monitoring::v3::TextLocator_Position* start_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  _impl_.start_position_ = start_position;
  if (start_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TextLocator.start_position)
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::release_start_position() {
  
  ::google::monitoring::v3::TextLocator_Position* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TextLocator.start_position)
  
  ::google::monitoring::v3::TextLocator_Position* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::_internal_mutable_start_position() {
  
  if (_impl_.start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TextLocator_Position>(GetArenaForAllocation());
    _impl_.start_position_ = p;
  }
  return _impl_.start_position_;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::mutable_start_position() {
  ::google::monitoring::v3::TextLocator_Position* _msg = _internal_mutable_start_position();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TextLocator.start_position)
  return _msg;
}
inline void TextLocator::set_allocated_start_position(::google::monitoring::v3::TextLocator_Position* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_position_;
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_position);
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TextLocator.start_position)
}

// .google.monitoring.v3.TextLocator.Position end_position = 3;
inline bool TextLocator::_internal_has_end_position() const {
  return this != internal_default_instance() && _impl_.end_position_ != nullptr;
}
inline bool TextLocator::has_end_position() const {
  return _internal_has_end_position();
}
inline void TextLocator::clear_end_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_position_ != nullptr) {
    delete _impl_.end_position_;
  }
  _impl_.end_position_ = nullptr;
}
inline const ::google::monitoring::v3::TextLocator_Position& TextLocator::_internal_end_position() const {
  const ::google::monitoring::v3::TextLocator_Position* p = _impl_.end_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TextLocator_Position&>(
      ::google::monitoring::v3::_TextLocator_Position_default_instance_);
}
inline const ::google::monitoring::v3::TextLocator_Position& TextLocator::end_position() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.end_position)
  return _internal_end_position();
}
inline void TextLocator::unsafe_arena_set_allocated_end_position(
    ::google::monitoring::v3::TextLocator_Position* end_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  _impl_.end_position_ = end_position;
  if (end_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TextLocator.end_position)
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::release_end_position() {
  
  ::google::monitoring::v3::TextLocator_Position* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::unsafe_arena_release_end_position() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TextLocator.end_position)
  
  ::google::monitoring::v3::TextLocator_Position* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::_internal_mutable_end_position() {
  
  if (_impl_.end_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TextLocator_Position>(GetArenaForAllocation());
    _impl_.end_position_ = p;
  }
  return _impl_.end_position_;
}
inline ::google::monitoring::v3::TextLocator_Position* TextLocator::mutable_end_position() {
  ::google::monitoring::v3::TextLocator_Position* _msg = _internal_mutable_end_position();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TextLocator.end_position)
  return _msg;
}
inline void TextLocator::set_allocated_end_position(::google::monitoring::v3::TextLocator_Position* end_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_position_;
  }
  if (end_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_position);
    if (message_arena != submessage_arena) {
      end_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_position_ = end_position;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TextLocator.end_position)
}

// .google.monitoring.v3.TextLocator nested_locator = 4;
inline bool TextLocator::_internal_has_nested_locator() const {
  return this != internal_default_instance() && _impl_.nested_locator_ != nullptr;
}
inline bool TextLocator::has_nested_locator() const {
  return _internal_has_nested_locator();
}
inline void TextLocator::clear_nested_locator() {
  if (GetArenaForAllocation() == nullptr && _impl_.nested_locator_ != nullptr) {
    delete _impl_.nested_locator_;
  }
  _impl_.nested_locator_ = nullptr;
}
inline const ::google::monitoring::v3::TextLocator& TextLocator::_internal_nested_locator() const {
  const ::google::monitoring::v3::TextLocator* p = _impl_.nested_locator_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TextLocator&>(
      ::google::monitoring::v3::_TextLocator_default_instance_);
}
inline const ::google::monitoring::v3::TextLocator& TextLocator::nested_locator() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.nested_locator)
  return _internal_nested_locator();
}
inline void TextLocator::unsafe_arena_set_allocated_nested_locator(
    ::google::monitoring::v3::TextLocator* nested_locator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nested_locator_);
  }
  _impl_.nested_locator_ = nested_locator;
  if (nested_locator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.TextLocator.nested_locator)
}
inline ::google::monitoring::v3::TextLocator* TextLocator::release_nested_locator() {
  
  ::google::monitoring::v3::TextLocator* temp = _impl_.nested_locator_;
  _impl_.nested_locator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TextLocator* TextLocator::unsafe_arena_release_nested_locator() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TextLocator.nested_locator)
  
  ::google::monitoring::v3::TextLocator* temp = _impl_.nested_locator_;
  _impl_.nested_locator_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TextLocator* TextLocator::_internal_mutable_nested_locator() {
  
  if (_impl_.nested_locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TextLocator>(GetArenaForAllocation());
    _impl_.nested_locator_ = p;
  }
  return _impl_.nested_locator_;
}
inline ::google::monitoring::v3::TextLocator* TextLocator::mutable_nested_locator() {
  ::google::monitoring::v3::TextLocator* _msg = _internal_mutable_nested_locator();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TextLocator.nested_locator)
  return _msg;
}
inline void TextLocator::set_allocated_nested_locator(::google::monitoring::v3::TextLocator* nested_locator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nested_locator_;
  }
  if (nested_locator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nested_locator);
    if (message_arena != submessage_arena) {
      nested_locator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_locator, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nested_locator_ = nested_locator;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TextLocator.nested_locator)
}

// string nesting_reason = 5;
inline void TextLocator::clear_nesting_reason() {
  _impl_.nesting_reason_.ClearToEmpty();
}
inline const std::string& TextLocator::nesting_reason() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TextLocator.nesting_reason)
  return _internal_nesting_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextLocator::set_nesting_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nesting_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TextLocator.nesting_reason)
}
inline std::string* TextLocator::mutable_nesting_reason() {
  std::string* _s = _internal_mutable_nesting_reason();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TextLocator.nesting_reason)
  return _s;
}
inline const std::string& TextLocator::_internal_nesting_reason() const {
  return _impl_.nesting_reason_.Get();
}
inline void TextLocator::_internal_set_nesting_reason(const std::string& value) {
  
  _impl_.nesting_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* TextLocator::_internal_mutable_nesting_reason() {
  
  return _impl_.nesting_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* TextLocator::release_nesting_reason() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TextLocator.nesting_reason)
  return _impl_.nesting_reason_.Release();
}
inline void TextLocator::set_allocated_nesting_reason(std::string* nesting_reason) {
  if (nesting_reason != nullptr) {
    
  } else {
    
  }
  _impl_.nesting_reason_.SetAllocated(nesting_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nesting_reason_.IsDefault()) {
    _impl_.nesting_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TextLocator.nesting_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto
