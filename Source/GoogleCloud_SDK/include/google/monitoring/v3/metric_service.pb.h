// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/metric_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/metric.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/metric.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
namespace google {
namespace monitoring {
namespace v3 {
class CreateMetricDescriptorRequest;
struct CreateMetricDescriptorRequestDefaultTypeInternal;
extern CreateMetricDescriptorRequestDefaultTypeInternal _CreateMetricDescriptorRequest_default_instance_;
class CreateTimeSeriesError;
struct CreateTimeSeriesErrorDefaultTypeInternal;
extern CreateTimeSeriesErrorDefaultTypeInternal _CreateTimeSeriesError_default_instance_;
class CreateTimeSeriesRequest;
struct CreateTimeSeriesRequestDefaultTypeInternal;
extern CreateTimeSeriesRequestDefaultTypeInternal _CreateTimeSeriesRequest_default_instance_;
class CreateTimeSeriesSummary;
struct CreateTimeSeriesSummaryDefaultTypeInternal;
extern CreateTimeSeriesSummaryDefaultTypeInternal _CreateTimeSeriesSummary_default_instance_;
class CreateTimeSeriesSummary_Error;
struct CreateTimeSeriesSummary_ErrorDefaultTypeInternal;
extern CreateTimeSeriesSummary_ErrorDefaultTypeInternal _CreateTimeSeriesSummary_Error_default_instance_;
class DeleteMetricDescriptorRequest;
struct DeleteMetricDescriptorRequestDefaultTypeInternal;
extern DeleteMetricDescriptorRequestDefaultTypeInternal _DeleteMetricDescriptorRequest_default_instance_;
class GetMetricDescriptorRequest;
struct GetMetricDescriptorRequestDefaultTypeInternal;
extern GetMetricDescriptorRequestDefaultTypeInternal _GetMetricDescriptorRequest_default_instance_;
class GetMonitoredResourceDescriptorRequest;
struct GetMonitoredResourceDescriptorRequestDefaultTypeInternal;
extern GetMonitoredResourceDescriptorRequestDefaultTypeInternal _GetMonitoredResourceDescriptorRequest_default_instance_;
class ListMetricDescriptorsRequest;
struct ListMetricDescriptorsRequestDefaultTypeInternal;
extern ListMetricDescriptorsRequestDefaultTypeInternal _ListMetricDescriptorsRequest_default_instance_;
class ListMetricDescriptorsResponse;
struct ListMetricDescriptorsResponseDefaultTypeInternal;
extern ListMetricDescriptorsResponseDefaultTypeInternal _ListMetricDescriptorsResponse_default_instance_;
class ListMonitoredResourceDescriptorsRequest;
struct ListMonitoredResourceDescriptorsRequestDefaultTypeInternal;
extern ListMonitoredResourceDescriptorsRequestDefaultTypeInternal _ListMonitoredResourceDescriptorsRequest_default_instance_;
class ListMonitoredResourceDescriptorsResponse;
struct ListMonitoredResourceDescriptorsResponseDefaultTypeInternal;
extern ListMonitoredResourceDescriptorsResponseDefaultTypeInternal _ListMonitoredResourceDescriptorsResponse_default_instance_;
class ListTimeSeriesRequest;
struct ListTimeSeriesRequestDefaultTypeInternal;
extern ListTimeSeriesRequestDefaultTypeInternal _ListTimeSeriesRequest_default_instance_;
class ListTimeSeriesResponse;
struct ListTimeSeriesResponseDefaultTypeInternal;
extern ListTimeSeriesResponseDefaultTypeInternal _ListTimeSeriesResponse_default_instance_;
class QueryErrorList;
struct QueryErrorListDefaultTypeInternal;
extern QueryErrorListDefaultTypeInternal _QueryErrorList_default_instance_;
class QueryTimeSeriesRequest;
struct QueryTimeSeriesRequestDefaultTypeInternal;
extern QueryTimeSeriesRequestDefaultTypeInternal _QueryTimeSeriesRequest_default_instance_;
class QueryTimeSeriesResponse;
struct QueryTimeSeriesResponseDefaultTypeInternal;
extern QueryTimeSeriesResponseDefaultTypeInternal _QueryTimeSeriesResponse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::v3::CreateMetricDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateMetricDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::CreateTimeSeriesError* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateTimeSeriesError>(Arena*);
template<> ::google::monitoring::v3::CreateTimeSeriesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateTimeSeriesRequest>(Arena*);
template<> ::google::monitoring::v3::CreateTimeSeriesSummary* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateTimeSeriesSummary>(Arena*);
template<> ::google::monitoring::v3::CreateTimeSeriesSummary_Error* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateTimeSeriesSummary_Error>(Arena*);
template<> ::google::monitoring::v3::DeleteMetricDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteMetricDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::GetMetricDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetMetricDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetMonitoredResourceDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::ListMetricDescriptorsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListMetricDescriptorsRequest>(Arena*);
template<> ::google::monitoring::v3::ListMetricDescriptorsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListMetricDescriptorsResponse>(Arena*);
template<> ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest>(Arena*);
template<> ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>(Arena*);
template<> ::google::monitoring::v3::ListTimeSeriesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListTimeSeriesRequest>(Arena*);
template<> ::google::monitoring::v3::ListTimeSeriesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListTimeSeriesResponse>(Arena*);
template<> ::google::monitoring::v3::QueryErrorList* Arena::CreateMaybeMessage<::google::monitoring::v3::QueryErrorList>(Arena*);
template<> ::google::monitoring::v3::QueryTimeSeriesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::QueryTimeSeriesRequest>(Arena*);
template<> ::google::monitoring::v3::QueryTimeSeriesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::QueryTimeSeriesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace v3 {

enum ListTimeSeriesRequest_TimeSeriesView : int {
  ListTimeSeriesRequest_TimeSeriesView_FULL = 0,
  ListTimeSeriesRequest_TimeSeriesView_HEADERS = 1,
  ListTimeSeriesRequest_TimeSeriesView_ListTimeSeriesRequest_TimeSeriesView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ListTimeSeriesRequest_TimeSeriesView_ListTimeSeriesRequest_TimeSeriesView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ListTimeSeriesRequest_TimeSeriesView_IsValid(int value);
constexpr ListTimeSeriesRequest_TimeSeriesView ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_MIN = ListTimeSeriesRequest_TimeSeriesView_FULL;
constexpr ListTimeSeriesRequest_TimeSeriesView ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_MAX = ListTimeSeriesRequest_TimeSeriesView_HEADERS;
constexpr int ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_ARRAYSIZE = ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListTimeSeriesRequest_TimeSeriesView_descriptor();
template<typename T>
inline const std::string& ListTimeSeriesRequest_TimeSeriesView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListTimeSeriesRequest_TimeSeriesView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListTimeSeriesRequest_TimeSeriesView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListTimeSeriesRequest_TimeSeriesView_descriptor(), enum_t_value);
}
inline bool ListTimeSeriesRequest_TimeSeriesView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListTimeSeriesRequest_TimeSeriesView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListTimeSeriesRequest_TimeSeriesView>(
    ListTimeSeriesRequest_TimeSeriesView_descriptor(), name, value);
}
// ===================================================================

class ListMonitoredResourceDescriptorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest) */ {
 public:
  inline ListMonitoredResourceDescriptorsRequest() : ListMonitoredResourceDescriptorsRequest(nullptr) {}
  ~ListMonitoredResourceDescriptorsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListMonitoredResourceDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMonitoredResourceDescriptorsRequest(const ListMonitoredResourceDescriptorsRequest& from);
  ListMonitoredResourceDescriptorsRequest(ListMonitoredResourceDescriptorsRequest&& from) noexcept
    : ListMonitoredResourceDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline ListMonitoredResourceDescriptorsRequest& operator=(const ListMonitoredResourceDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitoredResourceDescriptorsRequest& operator=(ListMonitoredResourceDescriptorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMonitoredResourceDescriptorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMonitoredResourceDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMonitoredResourceDescriptorsRequest*>(
               &_ListMonitoredResourceDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListMonitoredResourceDescriptorsRequest& a, ListMonitoredResourceDescriptorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitoredResourceDescriptorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitoredResourceDescriptorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMonitoredResourceDescriptorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMonitoredResourceDescriptorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMonitoredResourceDescriptorsRequest& from) {
    ListMonitoredResourceDescriptorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitoredResourceDescriptorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListMonitoredResourceDescriptorsRequest";
  }
  protected:
  explicit ListMonitoredResourceDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kNameFieldNumber = 5,
    kPageSizeFieldNumber = 3,
  };
  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMonitoredResourceDescriptorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse) */ {
 public:
  inline ListMonitoredResourceDescriptorsResponse() : ListMonitoredResourceDescriptorsResponse(nullptr) {}
  ~ListMonitoredResourceDescriptorsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListMonitoredResourceDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMonitoredResourceDescriptorsResponse(const ListMonitoredResourceDescriptorsResponse& from);
  ListMonitoredResourceDescriptorsResponse(ListMonitoredResourceDescriptorsResponse&& from) noexcept
    : ListMonitoredResourceDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline ListMonitoredResourceDescriptorsResponse& operator=(const ListMonitoredResourceDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitoredResourceDescriptorsResponse& operator=(ListMonitoredResourceDescriptorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMonitoredResourceDescriptorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMonitoredResourceDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMonitoredResourceDescriptorsResponse*>(
               &_ListMonitoredResourceDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListMonitoredResourceDescriptorsResponse& a, ListMonitoredResourceDescriptorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitoredResourceDescriptorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitoredResourceDescriptorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMonitoredResourceDescriptorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMonitoredResourceDescriptorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMonitoredResourceDescriptorsResponse& from) {
    ListMonitoredResourceDescriptorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitoredResourceDescriptorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListMonitoredResourceDescriptorsResponse";
  }
  protected:
  explicit ListMonitoredResourceDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceDescriptorsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.MonitoredResourceDescriptor resource_descriptors = 1;
  int resource_descriptors_size() const;
  private:
  int _internal_resource_descriptors_size() const;
  public:
  void clear_resource_descriptors();
  ::google::api::MonitoredResourceDescriptor* mutable_resource_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
      mutable_resource_descriptors();
  private:
  const ::google::api::MonitoredResourceDescriptor& _internal_resource_descriptors(int index) const;
  ::google::api::MonitoredResourceDescriptor* _internal_add_resource_descriptors();
  public:
  const ::google::api::MonitoredResourceDescriptor& resource_descriptors(int index) const;
  ::google::api::MonitoredResourceDescriptor* add_resource_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
      resource_descriptors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor > resource_descriptors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMonitoredResourceDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetMonitoredResourceDescriptorRequest) */ {
 public:
  inline GetMonitoredResourceDescriptorRequest() : GetMonitoredResourceDescriptorRequest(nullptr) {}
  ~GetMonitoredResourceDescriptorRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMonitoredResourceDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMonitoredResourceDescriptorRequest(const GetMonitoredResourceDescriptorRequest& from);
  GetMonitoredResourceDescriptorRequest(GetMonitoredResourceDescriptorRequest&& from) noexcept
    : GetMonitoredResourceDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetMonitoredResourceDescriptorRequest& operator=(const GetMonitoredResourceDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMonitoredResourceDescriptorRequest& operator=(GetMonitoredResourceDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMonitoredResourceDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMonitoredResourceDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetMonitoredResourceDescriptorRequest*>(
               &_GetMonitoredResourceDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMonitoredResourceDescriptorRequest& a, GetMonitoredResourceDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMonitoredResourceDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMonitoredResourceDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMonitoredResourceDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMonitoredResourceDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMonitoredResourceDescriptorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMonitoredResourceDescriptorRequest& from) {
    GetMonitoredResourceDescriptorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMonitoredResourceDescriptorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetMonitoredResourceDescriptorRequest";
  }
  protected:
  explicit GetMonitoredResourceDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetMonitoredResourceDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMetricDescriptorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListMetricDescriptorsRequest) */ {
 public:
  inline ListMetricDescriptorsRequest() : ListMetricDescriptorsRequest(nullptr) {}
  ~ListMetricDescriptorsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListMetricDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMetricDescriptorsRequest(const ListMetricDescriptorsRequest& from);
  ListMetricDescriptorsRequest(ListMetricDescriptorsRequest&& from) noexcept
    : ListMetricDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline ListMetricDescriptorsRequest& operator=(const ListMetricDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMetricDescriptorsRequest& operator=(ListMetricDescriptorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMetricDescriptorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMetricDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMetricDescriptorsRequest*>(
               &_ListMetricDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListMetricDescriptorsRequest& a, ListMetricDescriptorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMetricDescriptorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMetricDescriptorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMetricDescriptorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMetricDescriptorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMetricDescriptorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMetricDescriptorsRequest& from) {
    ListMetricDescriptorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMetricDescriptorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListMetricDescriptorsRequest";
  }
  protected:
  explicit ListMetricDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kNameFieldNumber = 5,
    kPageSizeFieldNumber = 3,
  };
  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListMetricDescriptorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMetricDescriptorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListMetricDescriptorsResponse) */ {
 public:
  inline ListMetricDescriptorsResponse() : ListMetricDescriptorsResponse(nullptr) {}
  ~ListMetricDescriptorsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListMetricDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMetricDescriptorsResponse(const ListMetricDescriptorsResponse& from);
  ListMetricDescriptorsResponse(ListMetricDescriptorsResponse&& from) noexcept
    : ListMetricDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline ListMetricDescriptorsResponse& operator=(const ListMetricDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMetricDescriptorsResponse& operator=(ListMetricDescriptorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMetricDescriptorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMetricDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMetricDescriptorsResponse*>(
               &_ListMetricDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListMetricDescriptorsResponse& a, ListMetricDescriptorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMetricDescriptorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMetricDescriptorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMetricDescriptorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMetricDescriptorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMetricDescriptorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMetricDescriptorsResponse& from) {
    ListMetricDescriptorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMetricDescriptorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListMetricDescriptorsResponse";
  }
  protected:
  explicit ListMetricDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricDescriptorsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.MetricDescriptor metric_descriptors = 1;
  int metric_descriptors_size() const;
  private:
  int _internal_metric_descriptors_size() const;
  public:
  void clear_metric_descriptors();
  ::google::api::MetricDescriptor* mutable_metric_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >*
      mutable_metric_descriptors();
  private:
  const ::google::api::MetricDescriptor& _internal_metric_descriptors(int index) const;
  ::google::api::MetricDescriptor* _internal_add_metric_descriptors();
  public:
  const ::google::api::MetricDescriptor& metric_descriptors(int index) const;
  ::google::api::MetricDescriptor* add_metric_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >&
      metric_descriptors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListMetricDescriptorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor > metric_descriptors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMetricDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetMetricDescriptorRequest) */ {
 public:
  inline GetMetricDescriptorRequest() : GetMetricDescriptorRequest(nullptr) {}
  ~GetMetricDescriptorRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetricDescriptorRequest(const GetMetricDescriptorRequest& from);
  GetMetricDescriptorRequest(GetMetricDescriptorRequest&& from) noexcept
    : GetMetricDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricDescriptorRequest& operator=(const GetMetricDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricDescriptorRequest& operator=(GetMetricDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetricDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetricDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricDescriptorRequest*>(
               &_GetMetricDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetMetricDescriptorRequest& a, GetMetricDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMetricDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMetricDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetricDescriptorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMetricDescriptorRequest& from) {
    GetMetricDescriptorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricDescriptorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.GetMetricDescriptorRequest";
  }
  protected:
  explicit GetMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetMetricDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateMetricDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateMetricDescriptorRequest) */ {
 public:
  inline CreateMetricDescriptorRequest() : CreateMetricDescriptorRequest(nullptr) {}
  ~CreateMetricDescriptorRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMetricDescriptorRequest(const CreateMetricDescriptorRequest& from);
  CreateMetricDescriptorRequest(CreateMetricDescriptorRequest&& from) noexcept
    : CreateMetricDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline CreateMetricDescriptorRequest& operator=(const CreateMetricDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMetricDescriptorRequest& operator=(CreateMetricDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMetricDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMetricDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMetricDescriptorRequest*>(
               &_CreateMetricDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateMetricDescriptorRequest& a, CreateMetricDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMetricDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMetricDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMetricDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMetricDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMetricDescriptorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateMetricDescriptorRequest& from) {
    CreateMetricDescriptorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMetricDescriptorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateMetricDescriptorRequest";
  }
  protected:
  explicit CreateMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kMetricDescriptorFieldNumber = 2,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.MetricDescriptor metric_descriptor = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_metric_descriptor() const;
  private:
  bool _internal_has_metric_descriptor() const;
  public:
  void clear_metric_descriptor();
  const ::google::api::MetricDescriptor& metric_descriptor() const;
  PROTOBUF_NODISCARD ::google::api::MetricDescriptor* release_metric_descriptor();
  ::google::api::MetricDescriptor* mutable_metric_descriptor();
  void set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor);
  private:
  const ::google::api::MetricDescriptor& _internal_metric_descriptor() const;
  ::google::api::MetricDescriptor* _internal_mutable_metric_descriptor();
  public:
  void unsafe_arena_set_allocated_metric_descriptor(
      ::google::api::MetricDescriptor* metric_descriptor);
  ::google::api::MetricDescriptor* unsafe_arena_release_metric_descriptor();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateMetricDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::api::MetricDescriptor* metric_descriptor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteMetricDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteMetricDescriptorRequest) */ {
 public:
  inline DeleteMetricDescriptorRequest() : DeleteMetricDescriptorRequest(nullptr) {}
  ~DeleteMetricDescriptorRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMetricDescriptorRequest(const DeleteMetricDescriptorRequest& from);
  DeleteMetricDescriptorRequest(DeleteMetricDescriptorRequest&& from) noexcept
    : DeleteMetricDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMetricDescriptorRequest& operator=(const DeleteMetricDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMetricDescriptorRequest& operator=(DeleteMetricDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMetricDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMetricDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMetricDescriptorRequest*>(
               &_DeleteMetricDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteMetricDescriptorRequest& a, DeleteMetricDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMetricDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMetricDescriptorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMetricDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMetricDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMetricDescriptorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMetricDescriptorRequest& from) {
    DeleteMetricDescriptorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMetricDescriptorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.DeleteMetricDescriptorRequest";
  }
  protected:
  explicit DeleteMetricDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
  };
  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteMetricDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTimeSeriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListTimeSeriesRequest) */ {
 public:
  inline ListTimeSeriesRequest() : ListTimeSeriesRequest(nullptr) {}
  ~ListTimeSeriesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTimeSeriesRequest(const ListTimeSeriesRequest& from);
  ListTimeSeriesRequest(ListTimeSeriesRequest&& from) noexcept
    : ListTimeSeriesRequest() {
    *this = ::std::move(from);
  }

  inline ListTimeSeriesRequest& operator=(const ListTimeSeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTimeSeriesRequest& operator=(ListTimeSeriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTimeSeriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTimeSeriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTimeSeriesRequest*>(
               &_ListTimeSeriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListTimeSeriesRequest& a, ListTimeSeriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTimeSeriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTimeSeriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTimeSeriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTimeSeriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTimeSeriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTimeSeriesRequest& from) {
    ListTimeSeriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTimeSeriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListTimeSeriesRequest";
  }
  protected:
  explicit ListTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListTimeSeriesRequest_TimeSeriesView TimeSeriesView;
  static constexpr TimeSeriesView FULL =
    ListTimeSeriesRequest_TimeSeriesView_FULL;
  static constexpr TimeSeriesView HEADERS =
    ListTimeSeriesRequest_TimeSeriesView_HEADERS;
  static inline bool TimeSeriesView_IsValid(int value) {
    return ListTimeSeriesRequest_TimeSeriesView_IsValid(value);
  }
  static constexpr TimeSeriesView TimeSeriesView_MIN =
    ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_MIN;
  static constexpr TimeSeriesView TimeSeriesView_MAX =
    ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_MAX;
  static constexpr int TimeSeriesView_ARRAYSIZE =
    ListTimeSeriesRequest_TimeSeriesView_TimeSeriesView_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeSeriesView_descriptor() {
    return ListTimeSeriesRequest_TimeSeriesView_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeSeriesView_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeSeriesView>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeSeriesView_Name.");
    return ListTimeSeriesRequest_TimeSeriesView_Name(enum_t_value);
  }
  static inline bool TimeSeriesView_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeSeriesView* value) {
    return ListTimeSeriesRequest_TimeSeriesView_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 2,
    kOrderByFieldNumber = 6,
    kPageTokenFieldNumber = 9,
    kNameFieldNumber = 10,
    kIntervalFieldNumber = 4,
    kAggregationFieldNumber = 5,
    kSecondaryAggregationFieldNumber = 11,
    kViewFieldNumber = 7,
    kPageSizeFieldNumber = 8,
  };
  // string filter = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string order_by = 6;
  void clear_order_by();
  const std::string& order_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_by();
  PROTOBUF_NODISCARD std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // string page_token = 9;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string name = 10 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.monitoring.v3.TimeInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::google::monitoring::v3::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeInterval* release_interval();
  ::google::monitoring::v3::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::monitoring::v3::TimeInterval* interval);
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_interval() const;
  ::google::monitoring::v3::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::monitoring::v3::TimeInterval* interval);
  ::google::monitoring::v3::TimeInterval* unsafe_arena_release_interval();

  // .google.monitoring.v3.Aggregation aggregation = 5;
  bool has_aggregation() const;
  private:
  bool _internal_has_aggregation() const;
  public:
  void clear_aggregation();
  const ::google::monitoring::v3::Aggregation& aggregation() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Aggregation* release_aggregation();
  ::google::monitoring::v3::Aggregation* mutable_aggregation();
  void set_allocated_aggregation(::google::monitoring::v3::Aggregation* aggregation);
  private:
  const ::google::monitoring::v3::Aggregation& _internal_aggregation() const;
  ::google::monitoring::v3::Aggregation* _internal_mutable_aggregation();
  public:
  void unsafe_arena_set_allocated_aggregation(
      ::google::monitoring::v3::Aggregation* aggregation);
  ::google::monitoring::v3::Aggregation* unsafe_arena_release_aggregation();

  // .google.monitoring.v3.Aggregation secondary_aggregation = 11;
  bool has_secondary_aggregation() const;
  private:
  bool _internal_has_secondary_aggregation() const;
  public:
  void clear_secondary_aggregation();
  const ::google::monitoring::v3::Aggregation& secondary_aggregation() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::Aggregation* release_secondary_aggregation();
  ::google::monitoring::v3::Aggregation* mutable_secondary_aggregation();
  void set_allocated_secondary_aggregation(::google::monitoring::v3::Aggregation* secondary_aggregation);
  private:
  const ::google::monitoring::v3::Aggregation& _internal_secondary_aggregation() const;
  ::google::monitoring::v3::Aggregation* _internal_mutable_secondary_aggregation();
  public:
  void unsafe_arena_set_allocated_secondary_aggregation(
      ::google::monitoring::v3::Aggregation* secondary_aggregation);
  ::google::monitoring::v3::Aggregation* unsafe_arena_release_secondary_aggregation();

  // .google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView view = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_view();
  ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView view() const;
  void set_view(::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView value);
  private:
  ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView _internal_view() const;
  void _internal_set_view(::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView value);
  public:

  // int32 page_size = 8;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListTimeSeriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::monitoring::v3::TimeInterval* interval_;
    ::google::monitoring::v3::Aggregation* aggregation_;
    ::google::monitoring::v3::Aggregation* secondary_aggregation_;
    int view_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTimeSeriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListTimeSeriesResponse) */ {
 public:
  inline ListTimeSeriesResponse() : ListTimeSeriesResponse(nullptr) {}
  ~ListTimeSeriesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTimeSeriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTimeSeriesResponse(const ListTimeSeriesResponse& from);
  ListTimeSeriesResponse(ListTimeSeriesResponse&& from) noexcept
    : ListTimeSeriesResponse() {
    *this = ::std::move(from);
  }

  inline ListTimeSeriesResponse& operator=(const ListTimeSeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTimeSeriesResponse& operator=(ListTimeSeriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTimeSeriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTimeSeriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListTimeSeriesResponse*>(
               &_ListTimeSeriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListTimeSeriesResponse& a, ListTimeSeriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTimeSeriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTimeSeriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTimeSeriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTimeSeriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTimeSeriesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListTimeSeriesResponse& from) {
    ListTimeSeriesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTimeSeriesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.ListTimeSeriesResponse";
  }
  protected:
  explicit ListTimeSeriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSeriesFieldNumber = 1,
    kExecutionErrorsFieldNumber = 3,
    kNextPageTokenFieldNumber = 2,
    kUnitFieldNumber = 5,
  };
  // repeated .google.monitoring.v3.TimeSeries time_series = 1;
  int time_series_size() const;
  private:
  int _internal_time_series_size() const;
  public:
  void clear_time_series();
  ::google::monitoring::v3::TimeSeries* mutable_time_series(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >*
      mutable_time_series();
  private:
  const ::google::monitoring::v3::TimeSeries& _internal_time_series(int index) const;
  ::google::monitoring::v3::TimeSeries* _internal_add_time_series();
  public:
  const ::google::monitoring::v3::TimeSeries& time_series(int index) const;
  ::google::monitoring::v3::TimeSeries* add_time_series();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >&
      time_series() const;

  // repeated .google.rpc.Status execution_errors = 3;
  int execution_errors_size() const;
  private:
  int _internal_execution_errors_size() const;
  public:
  void clear_execution_errors();
  ::google::rpc::Status* mutable_execution_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
      mutable_execution_errors();
  private:
  const ::google::rpc::Status& _internal_execution_errors(int index) const;
  ::google::rpc::Status* _internal_add_execution_errors();
  public:
  const ::google::rpc::Status& execution_errors(int index) const;
  ::google::rpc::Status* add_execution_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
      execution_errors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListTimeSeriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries > time_series_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status > execution_errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateTimeSeriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateTimeSeriesRequest) */ {
 public:
  inline CreateTimeSeriesRequest() : CreateTimeSeriesRequest(nullptr) {}
  ~CreateTimeSeriesRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTimeSeriesRequest(const CreateTimeSeriesRequest& from);
  CreateTimeSeriesRequest(CreateTimeSeriesRequest&& from) noexcept
    : CreateTimeSeriesRequest() {
    *this = ::std::move(from);
  }

  inline CreateTimeSeriesRequest& operator=(const CreateTimeSeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTimeSeriesRequest& operator=(CreateTimeSeriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTimeSeriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTimeSeriesRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTimeSeriesRequest*>(
               &_CreateTimeSeriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateTimeSeriesRequest& a, CreateTimeSeriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTimeSeriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTimeSeriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTimeSeriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTimeSeriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTimeSeriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateTimeSeriesRequest& from) {
    CreateTimeSeriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTimeSeriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateTimeSeriesRequest";
  }
  protected:
  explicit CreateTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSeriesFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // repeated .google.monitoring.v3.TimeSeries time_series = 2 [(.google.api.field_behavior) = REQUIRED];
  int time_series_size() const;
  private:
  int _internal_time_series_size() const;
  public:
  void clear_time_series();
  ::google::monitoring::v3::TimeSeries* mutable_time_series(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >*
      mutable_time_series();
  private:
  const ::google::monitoring::v3::TimeSeries& _internal_time_series(int index) const;
  ::google::monitoring::v3::TimeSeries* _internal_add_time_series();
  public:
  const ::google::monitoring::v3::TimeSeries& time_series(int index) const;
  ::google::monitoring::v3::TimeSeries* add_time_series();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >&
      time_series() const;

  // string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateTimeSeriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries > time_series_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateTimeSeriesError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateTimeSeriesError) */ {
 public:
  inline CreateTimeSeriesError() : CreateTimeSeriesError(nullptr) {}
  ~CreateTimeSeriesError() override;
  explicit PROTOBUF_CONSTEXPR CreateTimeSeriesError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTimeSeriesError(const CreateTimeSeriesError& from);
  CreateTimeSeriesError(CreateTimeSeriesError&& from) noexcept
    : CreateTimeSeriesError() {
    *this = ::std::move(from);
  }

  inline CreateTimeSeriesError& operator=(const CreateTimeSeriesError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTimeSeriesError& operator=(CreateTimeSeriesError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTimeSeriesError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTimeSeriesError* internal_default_instance() {
    return reinterpret_cast<const CreateTimeSeriesError*>(
               &_CreateTimeSeriesError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateTimeSeriesError& a, CreateTimeSeriesError& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTimeSeriesError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTimeSeriesError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTimeSeriesError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTimeSeriesError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTimeSeriesError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateTimeSeriesError& from) {
    CreateTimeSeriesError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTimeSeriesError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateTimeSeriesError";
  }
  protected:
  explicit CreateTimeSeriesError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSeriesFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .google.monitoring.v3.TimeSeries time_series = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_time_series() const;
  private:
  bool _internal_has_time_series() const;
  public:
  PROTOBUF_DEPRECATED void clear_time_series();
  PROTOBUF_DEPRECATED const ::google::monitoring::v3::TimeSeries& time_series() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::google::monitoring::v3::TimeSeries* release_time_series();
  PROTOBUF_DEPRECATED ::google::monitoring::v3::TimeSeries* mutable_time_series();
  PROTOBUF_DEPRECATED void set_allocated_time_series(::google::monitoring::v3::TimeSeries* time_series);
  private:
  const ::google::monitoring::v3::TimeSeries& _internal_time_series() const;
  ::google::monitoring::v3::TimeSeries* _internal_mutable_time_series();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_time_series(
      ::google::monitoring::v3::TimeSeries* time_series);
  PROTOBUF_DEPRECATED ::google::monitoring::v3::TimeSeries* unsafe_arena_release_time_series();

  // .google.rpc.Status status = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  PROTOBUF_DEPRECATED void clear_status();
  PROTOBUF_DEPRECATED const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::google::rpc::Status* release_status();
  PROTOBUF_DEPRECATED ::google::rpc::Status* mutable_status();
  PROTOBUF_DEPRECATED void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  PROTOBUF_DEPRECATED ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateTimeSeriesError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::monitoring::v3::TimeSeries* time_series_;
    ::google::rpc::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateTimeSeriesSummary_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateTimeSeriesSummary.Error) */ {
 public:
  inline CreateTimeSeriesSummary_Error() : CreateTimeSeriesSummary_Error(nullptr) {}
  ~CreateTimeSeriesSummary_Error() override;
  explicit PROTOBUF_CONSTEXPR CreateTimeSeriesSummary_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTimeSeriesSummary_Error(const CreateTimeSeriesSummary_Error& from);
  CreateTimeSeriesSummary_Error(CreateTimeSeriesSummary_Error&& from) noexcept
    : CreateTimeSeriesSummary_Error() {
    *this = ::std::move(from);
  }

  inline CreateTimeSeriesSummary_Error& operator=(const CreateTimeSeriesSummary_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTimeSeriesSummary_Error& operator=(CreateTimeSeriesSummary_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTimeSeriesSummary_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTimeSeriesSummary_Error* internal_default_instance() {
    return reinterpret_cast<const CreateTimeSeriesSummary_Error*>(
               &_CreateTimeSeriesSummary_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateTimeSeriesSummary_Error& a, CreateTimeSeriesSummary_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTimeSeriesSummary_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTimeSeriesSummary_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTimeSeriesSummary_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTimeSeriesSummary_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTimeSeriesSummary_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateTimeSeriesSummary_Error& from) {
    CreateTimeSeriesSummary_Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTimeSeriesSummary_Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateTimeSeriesSummary.Error";
  }
  protected:
  explicit CreateTimeSeriesSummary_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPointCountFieldNumber = 2,
  };
  // .google.rpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // int32 point_count = 2;
  void clear_point_count();
  int32_t point_count() const;
  void set_point_count(int32_t value);
  private:
  int32_t _internal_point_count() const;
  void _internal_set_point_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateTimeSeriesSummary.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::rpc::Status* status_;
    int32_t point_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateTimeSeriesSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateTimeSeriesSummary) */ {
 public:
  inline CreateTimeSeriesSummary() : CreateTimeSeriesSummary(nullptr) {}
  ~CreateTimeSeriesSummary() override;
  explicit PROTOBUF_CONSTEXPR CreateTimeSeriesSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTimeSeriesSummary(const CreateTimeSeriesSummary& from);
  CreateTimeSeriesSummary(CreateTimeSeriesSummary&& from) noexcept
    : CreateTimeSeriesSummary() {
    *this = ::std::move(from);
  }

  inline CreateTimeSeriesSummary& operator=(const CreateTimeSeriesSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTimeSeriesSummary& operator=(CreateTimeSeriesSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTimeSeriesSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTimeSeriesSummary* internal_default_instance() {
    return reinterpret_cast<const CreateTimeSeriesSummary*>(
               &_CreateTimeSeriesSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateTimeSeriesSummary& a, CreateTimeSeriesSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTimeSeriesSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTimeSeriesSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTimeSeriesSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTimeSeriesSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTimeSeriesSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateTimeSeriesSummary& from) {
    CreateTimeSeriesSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTimeSeriesSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.CreateTimeSeriesSummary";
  }
  protected:
  explicit CreateTimeSeriesSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateTimeSeriesSummary_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 3,
    kTotalPointCountFieldNumber = 1,
    kSuccessPointCountFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.CreateTimeSeriesSummary.Error errors = 3;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::google::monitoring::v3::CreateTimeSeriesSummary_Error* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::CreateTimeSeriesSummary_Error >*
      mutable_errors();
  private:
  const ::google::monitoring::v3::CreateTimeSeriesSummary_Error& _internal_errors(int index) const;
  ::google::monitoring::v3::CreateTimeSeriesSummary_Error* _internal_add_errors();
  public:
  const ::google::monitoring::v3::CreateTimeSeriesSummary_Error& errors(int index) const;
  ::google::monitoring::v3::CreateTimeSeriesSummary_Error* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::CreateTimeSeriesSummary_Error >&
      errors() const;

  // int32 total_point_count = 1;
  void clear_total_point_count();
  int32_t total_point_count() const;
  void set_total_point_count(int32_t value);
  private:
  int32_t _internal_total_point_count() const;
  void _internal_set_total_point_count(int32_t value);
  public:

  // int32 success_point_count = 2;
  void clear_success_point_count();
  int32_t success_point_count() const;
  void set_success_point_count(int32_t value);
  private:
  int32_t _internal_success_point_count() const;
  void _internal_set_success_point_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateTimeSeriesSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::CreateTimeSeriesSummary_Error > errors_;
    int32_t total_point_count_;
    int32_t success_point_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class QueryTimeSeriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.QueryTimeSeriesRequest) */ {
 public:
  inline QueryTimeSeriesRequest() : QueryTimeSeriesRequest(nullptr) {}
  ~QueryTimeSeriesRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTimeSeriesRequest(const QueryTimeSeriesRequest& from);
  QueryTimeSeriesRequest(QueryTimeSeriesRequest&& from) noexcept
    : QueryTimeSeriesRequest() {
    *this = ::std::move(from);
  }

  inline QueryTimeSeriesRequest& operator=(const QueryTimeSeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTimeSeriesRequest& operator=(QueryTimeSeriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTimeSeriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTimeSeriesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTimeSeriesRequest*>(
               &_QueryTimeSeriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryTimeSeriesRequest& a, QueryTimeSeriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTimeSeriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTimeSeriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTimeSeriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTimeSeriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTimeSeriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTimeSeriesRequest& from) {
    QueryTimeSeriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTimeSeriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.QueryTimeSeriesRequest";
  }
  protected:
  explicit QueryTimeSeriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kQueryFieldNumber = 7,
    kPageTokenFieldNumber = 10,
    kPageSizeFieldNumber = 9,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string query = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string page_token = 10;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 9;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.QueryTimeSeriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class QueryTimeSeriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.QueryTimeSeriesResponse) */ {
 public:
  inline QueryTimeSeriesResponse() : QueryTimeSeriesResponse(nullptr) {}
  ~QueryTimeSeriesResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryTimeSeriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTimeSeriesResponse(const QueryTimeSeriesResponse& from);
  QueryTimeSeriesResponse(QueryTimeSeriesResponse&& from) noexcept
    : QueryTimeSeriesResponse() {
    *this = ::std::move(from);
  }

  inline QueryTimeSeriesResponse& operator=(const QueryTimeSeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTimeSeriesResponse& operator=(QueryTimeSeriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTimeSeriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTimeSeriesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTimeSeriesResponse*>(
               &_QueryTimeSeriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryTimeSeriesResponse& a, QueryTimeSeriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTimeSeriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTimeSeriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTimeSeriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTimeSeriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTimeSeriesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTimeSeriesResponse& from) {
    QueryTimeSeriesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTimeSeriesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.QueryTimeSeriesResponse";
  }
  protected:
  explicit QueryTimeSeriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSeriesDataFieldNumber = 9,
    kPartialErrorsFieldNumber = 11,
    kNextPageTokenFieldNumber = 10,
    kTimeSeriesDescriptorFieldNumber = 8,
  };
  // repeated .google.monitoring.v3.TimeSeriesData time_series_data = 9;
  int time_series_data_size() const;
  private:
  int _internal_time_series_data_size() const;
  public:
  void clear_time_series_data();
  ::google::monitoring::v3::TimeSeriesData* mutable_time_series_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData >*
      mutable_time_series_data();
  private:
  const ::google::monitoring::v3::TimeSeriesData& _internal_time_series_data(int index) const;
  ::google::monitoring::v3::TimeSeriesData* _internal_add_time_series_data();
  public:
  const ::google::monitoring::v3::TimeSeriesData& time_series_data(int index) const;
  ::google::monitoring::v3::TimeSeriesData* add_time_series_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData >&
      time_series_data() const;

  // repeated .google.rpc.Status partial_errors = 11;
  int partial_errors_size() const;
  private:
  int _internal_partial_errors_size() const;
  public:
  void clear_partial_errors();
  ::google::rpc::Status* mutable_partial_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
      mutable_partial_errors();
  private:
  const ::google::rpc::Status& _internal_partial_errors(int index) const;
  ::google::rpc::Status* _internal_add_partial_errors();
  public:
  const ::google::rpc::Status& partial_errors(int index) const;
  ::google::rpc::Status* add_partial_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
      partial_errors() const;

  // string next_page_token = 10;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // .google.monitoring.v3.TimeSeriesDescriptor time_series_descriptor = 8;
  bool has_time_series_descriptor() const;
  private:
  bool _internal_has_time_series_descriptor() const;
  public:
  void clear_time_series_descriptor();
  const ::google::monitoring::v3::TimeSeriesDescriptor& time_series_descriptor() const;
  PROTOBUF_NODISCARD ::google::monitoring::v3::TimeSeriesDescriptor* release_time_series_descriptor();
  ::google::monitoring::v3::TimeSeriesDescriptor* mutable_time_series_descriptor();
  void set_allocated_time_series_descriptor(::google::monitoring::v3::TimeSeriesDescriptor* time_series_descriptor);
  private:
  const ::google::monitoring::v3::TimeSeriesDescriptor& _internal_time_series_descriptor() const;
  ::google::monitoring::v3::TimeSeriesDescriptor* _internal_mutable_time_series_descriptor();
  public:
  void unsafe_arena_set_allocated_time_series_descriptor(
      ::google::monitoring::v3::TimeSeriesDescriptor* time_series_descriptor);
  ::google::monitoring::v3::TimeSeriesDescriptor* unsafe_arena_release_time_series_descriptor();

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.QueryTimeSeriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData > time_series_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status > partial_errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    ::google::monitoring::v3::TimeSeriesDescriptor* time_series_descriptor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// -------------------------------------------------------------------

class QueryErrorList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.QueryErrorList) */ {
 public:
  inline QueryErrorList() : QueryErrorList(nullptr) {}
  ~QueryErrorList() override;
  explicit PROTOBUF_CONSTEXPR QueryErrorList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryErrorList(const QueryErrorList& from);
  QueryErrorList(QueryErrorList&& from) noexcept
    : QueryErrorList() {
    *this = ::std::move(from);
  }

  inline QueryErrorList& operator=(const QueryErrorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryErrorList& operator=(QueryErrorList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryErrorList& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryErrorList* internal_default_instance() {
    return reinterpret_cast<const QueryErrorList*>(
               &_QueryErrorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryErrorList& a, QueryErrorList& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryErrorList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryErrorList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryErrorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryErrorList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryErrorList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryErrorList& from) {
    QueryErrorList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryErrorList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.v3.QueryErrorList";
  }
  protected:
  explicit QueryErrorList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
    kErrorSummaryFieldNumber = 2,
  };
  // repeated .google.monitoring.v3.QueryError errors = 1;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::google::monitoring::v3::QueryError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::QueryError >*
      mutable_errors();
  private:
  const ::google::monitoring::v3::QueryError& _internal_errors(int index) const;
  ::google::monitoring::v3::QueryError* _internal_add_errors();
  public:
  const ::google::monitoring::v3::QueryError& errors(int index) const;
  ::google::monitoring::v3::QueryError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::QueryError >&
      errors() const;

  // string error_summary = 2;
  void clear_error_summary();
  const std::string& error_summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_summary();
  PROTOBUF_NODISCARD std::string* release_error_summary();
  void set_allocated_error_summary(std::string* error_summary);
  private:
  const std::string& _internal_error_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_summary(const std::string& value);
  std::string* _internal_mutable_error_summary();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.QueryErrorList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::QueryError > errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_summary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListMonitoredResourceDescriptorsRequest

// string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMonitoredResourceDescriptorsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMonitoredResourceDescriptorsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.name)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.name)
  return _s;
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.name)
  return _impl_.name_.Release();
}
inline void ListMonitoredResourceDescriptorsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.name)
}

// string filter = 2;
inline void ListMonitoredResourceDescriptorsRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMonitoredResourceDescriptorsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.filter)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.filter)
  return _s;
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListMonitoredResourceDescriptorsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.filter)
}

// int32 page_size = 3;
inline void ListMonitoredResourceDescriptorsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListMonitoredResourceDescriptorsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListMonitoredResourceDescriptorsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_size)
  return _internal_page_size();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_size)
}

// string page_token = 4;
inline void ListMonitoredResourceDescriptorsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMonitoredResourceDescriptorsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_token)
  return _s;
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListMonitoredResourceDescriptorsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.page_token)
}

// -------------------------------------------------------------------

// ListMonitoredResourceDescriptorsResponse

// repeated .google.api.MonitoredResourceDescriptor resource_descriptors = 1;
inline int ListMonitoredResourceDescriptorsResponse::_internal_resource_descriptors_size() const {
  return _impl_.resource_descriptors_.size();
}
inline int ListMonitoredResourceDescriptorsResponse::resource_descriptors_size() const {
  return _internal_resource_descriptors_size();
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::mutable_resource_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _impl_.resource_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
ListMonitoredResourceDescriptorsResponse::mutable_resource_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return &_impl_.resource_descriptors_;
}
inline const ::google::api::MonitoredResourceDescriptor& ListMonitoredResourceDescriptorsResponse::_internal_resource_descriptors(int index) const {
  return _impl_.resource_descriptors_.Get(index);
}
inline const ::google::api::MonitoredResourceDescriptor& ListMonitoredResourceDescriptorsResponse::resource_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _internal_resource_descriptors(index);
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::_internal_add_resource_descriptors() {
  return _impl_.resource_descriptors_.Add();
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::add_resource_descriptors() {
  ::google::api::MonitoredResourceDescriptor* _add = _internal_add_resource_descriptors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
ListMonitoredResourceDescriptorsResponse::resource_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _impl_.resource_descriptors_;
}

// string next_page_token = 2;
inline void ListMonitoredResourceDescriptorsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListMonitoredResourceDescriptorsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMonitoredResourceDescriptorsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline std::string* ListMonitoredResourceDescriptorsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.next_page_token)
  return _s;
}
inline const std::string& ListMonitoredResourceDescriptorsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListMonitoredResourceDescriptorsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMonitoredResourceDescriptorsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListMonitoredResourceDescriptorsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetMonitoredResourceDescriptorRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetMonitoredResourceDescriptorRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetMonitoredResourceDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetMonitoredResourceDescriptorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMonitoredResourceDescriptorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetMonitoredResourceDescriptorRequest.name)
}
inline std::string* GetMonitoredResourceDescriptorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetMonitoredResourceDescriptorRequest.name)
  return _s;
}
inline const std::string& GetMonitoredResourceDescriptorRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetMonitoredResourceDescriptorRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMonitoredResourceDescriptorRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMonitoredResourceDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetMonitoredResourceDescriptorRequest.name)
  return _impl_.name_.Release();
}
inline void GetMonitoredResourceDescriptorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetMonitoredResourceDescriptorRequest.name)
}

// -------------------------------------------------------------------

// ListMetricDescriptorsRequest

// string name = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMetricDescriptorsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListMetricDescriptorsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMetricDescriptorsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMetricDescriptorsRequest.name)
}
inline std::string* ListMetricDescriptorsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMetricDescriptorsRequest.name)
  return _s;
}
inline const std::string& ListMetricDescriptorsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListMetricDescriptorsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMetricDescriptorsRequest.name)
  return _impl_.name_.Release();
}
inline void ListMetricDescriptorsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMetricDescriptorsRequest.name)
}

// string filter = 2;
inline void ListMetricDescriptorsRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListMetricDescriptorsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMetricDescriptorsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMetricDescriptorsRequest.filter)
}
inline std::string* ListMetricDescriptorsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMetricDescriptorsRequest.filter)
  return _s;
}
inline const std::string& ListMetricDescriptorsRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListMetricDescriptorsRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMetricDescriptorsRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListMetricDescriptorsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMetricDescriptorsRequest.filter)
}

// int32 page_size = 3;
inline void ListMetricDescriptorsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListMetricDescriptorsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListMetricDescriptorsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsRequest.page_size)
  return _internal_page_size();
}
inline void ListMetricDescriptorsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListMetricDescriptorsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMetricDescriptorsRequest.page_size)
}

// string page_token = 4;
inline void ListMetricDescriptorsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListMetricDescriptorsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMetricDescriptorsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMetricDescriptorsRequest.page_token)
}
inline std::string* ListMetricDescriptorsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMetricDescriptorsRequest.page_token)
  return _s;
}
inline const std::string& ListMetricDescriptorsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListMetricDescriptorsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMetricDescriptorsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListMetricDescriptorsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMetricDescriptorsRequest.page_token)
}

// -------------------------------------------------------------------

// ListMetricDescriptorsResponse

// repeated .google.api.MetricDescriptor metric_descriptors = 1;
inline int ListMetricDescriptorsResponse::_internal_metric_descriptors_size() const {
  return _impl_.metric_descriptors_.size();
}
inline int ListMetricDescriptorsResponse::metric_descriptors_size() const {
  return _internal_metric_descriptors_size();
}
inline ::google::api::MetricDescriptor* ListMetricDescriptorsResponse::mutable_metric_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMetricDescriptorsResponse.metric_descriptors)
  return _impl_.metric_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >*
ListMetricDescriptorsResponse::mutable_metric_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListMetricDescriptorsResponse.metric_descriptors)
  return &_impl_.metric_descriptors_;
}
inline const ::google::api::MetricDescriptor& ListMetricDescriptorsResponse::_internal_metric_descriptors(int index) const {
  return _impl_.metric_descriptors_.Get(index);
}
inline const ::google::api::MetricDescriptor& ListMetricDescriptorsResponse::metric_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsResponse.metric_descriptors)
  return _internal_metric_descriptors(index);
}
inline ::google::api::MetricDescriptor* ListMetricDescriptorsResponse::_internal_add_metric_descriptors() {
  return _impl_.metric_descriptors_.Add();
}
inline ::google::api::MetricDescriptor* ListMetricDescriptorsResponse::add_metric_descriptors() {
  ::google::api::MetricDescriptor* _add = _internal_add_metric_descriptors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListMetricDescriptorsResponse.metric_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >&
ListMetricDescriptorsResponse::metric_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListMetricDescriptorsResponse.metric_descriptors)
  return _impl_.metric_descriptors_;
}

// string next_page_token = 2;
inline void ListMetricDescriptorsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListMetricDescriptorsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListMetricDescriptorsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMetricDescriptorsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListMetricDescriptorsResponse.next_page_token)
}
inline std::string* ListMetricDescriptorsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListMetricDescriptorsResponse.next_page_token)
  return _s;
}
inline const std::string& ListMetricDescriptorsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListMetricDescriptorsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMetricDescriptorsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListMetricDescriptorsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListMetricDescriptorsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListMetricDescriptorsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetMetricDescriptorRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetMetricDescriptorRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetMetricDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetMetricDescriptorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricDescriptorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetMetricDescriptorRequest.name)
}
inline std::string* GetMetricDescriptorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetMetricDescriptorRequest.name)
  return _s;
}
inline const std::string& GetMetricDescriptorRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetMetricDescriptorRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMetricDescriptorRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMetricDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetMetricDescriptorRequest.name)
  return _impl_.name_.Release();
}
inline void GetMetricDescriptorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetMetricDescriptorRequest.name)
}

// -------------------------------------------------------------------

// CreateMetricDescriptorRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateMetricDescriptorRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateMetricDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateMetricDescriptorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMetricDescriptorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateMetricDescriptorRequest.name)
}
inline std::string* CreateMetricDescriptorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateMetricDescriptorRequest.name)
  return _s;
}
inline const std::string& CreateMetricDescriptorRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateMetricDescriptorRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMetricDescriptorRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMetricDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateMetricDescriptorRequest.name)
  return _impl_.name_.Release();
}
inline void CreateMetricDescriptorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateMetricDescriptorRequest.name)
}

// .google.api.MetricDescriptor metric_descriptor = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateMetricDescriptorRequest::_internal_has_metric_descriptor() const {
  return this != internal_default_instance() && _impl_.metric_descriptor_ != nullptr;
}
inline bool CreateMetricDescriptorRequest::has_metric_descriptor() const {
  return _internal_has_metric_descriptor();
}
inline const ::google::api::MetricDescriptor& CreateMetricDescriptorRequest::_internal_metric_descriptor() const {
  const ::google::api::MetricDescriptor* p = _impl_.metric_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::MetricDescriptor&>(
      ::google::api::_MetricDescriptor_default_instance_);
}
inline const ::google::api::MetricDescriptor& CreateMetricDescriptorRequest::metric_descriptor() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateMetricDescriptorRequest.metric_descriptor)
  return _internal_metric_descriptor();
}
inline void CreateMetricDescriptorRequest::unsafe_arena_set_allocated_metric_descriptor(
    ::google::api::MetricDescriptor* metric_descriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_descriptor_);
  }
  _impl_.metric_descriptor_ = metric_descriptor;
  if (metric_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateMetricDescriptorRequest.metric_descriptor)
}
inline ::google::api::MetricDescriptor* CreateMetricDescriptorRequest::release_metric_descriptor() {
  
  ::google::api::MetricDescriptor* temp = _impl_.metric_descriptor_;
  _impl_.metric_descriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::MetricDescriptor* CreateMetricDescriptorRequest::unsafe_arena_release_metric_descriptor() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateMetricDescriptorRequest.metric_descriptor)
  
  ::google::api::MetricDescriptor* temp = _impl_.metric_descriptor_;
  _impl_.metric_descriptor_ = nullptr;
  return temp;
}
inline ::google::api::MetricDescriptor* CreateMetricDescriptorRequest::_internal_mutable_metric_descriptor() {
  
  if (_impl_.metric_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MetricDescriptor>(GetArenaForAllocation());
    _impl_.metric_descriptor_ = p;
  }
  return _impl_.metric_descriptor_;
}
inline ::google::api::MetricDescriptor* CreateMetricDescriptorRequest::mutable_metric_descriptor() {
  ::google::api::MetricDescriptor* _msg = _internal_mutable_metric_descriptor();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateMetricDescriptorRequest.metric_descriptor)
  return _msg;
}
inline void CreateMetricDescriptorRequest::set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metric_descriptor_);
  }
  if (metric_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric_descriptor));
    if (message_arena != submessage_arena) {
      metric_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metric_descriptor_ = metric_descriptor;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateMetricDescriptorRequest.metric_descriptor)
}

// -------------------------------------------------------------------

// DeleteMetricDescriptorRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteMetricDescriptorRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteMetricDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteMetricDescriptorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMetricDescriptorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteMetricDescriptorRequest.name)
}
inline std::string* DeleteMetricDescriptorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteMetricDescriptorRequest.name)
  return _s;
}
inline const std::string& DeleteMetricDescriptorRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteMetricDescriptorRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMetricDescriptorRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMetricDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteMetricDescriptorRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteMetricDescriptorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteMetricDescriptorRequest.name)
}

// -------------------------------------------------------------------

// ListTimeSeriesRequest

// string name = 10 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTimeSeriesRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.name)
}
inline std::string* ListTimeSeriesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.name)
  return _s;
}
inline const std::string& ListTimeSeriesRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ListTimeSeriesRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.name)
  return _impl_.name_.Release();
}
inline void ListTimeSeriesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.name)
}

// string filter = 2 [(.google.api.field_behavior) = REQUIRED];
inline void ListTimeSeriesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.filter)
}
inline std::string* ListTimeSeriesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.filter)
  return _s;
}
inline const std::string& ListTimeSeriesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListTimeSeriesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListTimeSeriesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.filter)
}

// .google.monitoring.v3.TimeInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool ListTimeSeriesRequest::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool ListTimeSeriesRequest::has_interval() const {
  return _internal_has_interval();
}
inline const ::google::monitoring::v3::TimeInterval& ListTimeSeriesRequest::_internal_interval() const {
  const ::google::monitoring::v3::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeInterval&>(
      ::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline const ::google::monitoring::v3::TimeInterval& ListTimeSeriesRequest::interval() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.interval)
  return _internal_interval();
}
inline void ListTimeSeriesRequest::unsafe_arena_set_allocated_interval(
    ::google::monitoring::v3::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.interval)
}
inline ::google::monitoring::v3::TimeInterval* ListTimeSeriesRequest::release_interval() {
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* ListTimeSeriesRequest::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* ListTimeSeriesRequest::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::monitoring::v3::TimeInterval* ListTimeSeriesRequest::mutable_interval() {
  ::google::monitoring::v3::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.interval)
  return _msg;
}
inline void ListTimeSeriesRequest::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.interval)
}

// .google.monitoring.v3.Aggregation aggregation = 5;
inline bool ListTimeSeriesRequest::_internal_has_aggregation() const {
  return this != internal_default_instance() && _impl_.aggregation_ != nullptr;
}
inline bool ListTimeSeriesRequest::has_aggregation() const {
  return _internal_has_aggregation();
}
inline const ::google::monitoring::v3::Aggregation& ListTimeSeriesRequest::_internal_aggregation() const {
  const ::google::monitoring::v3::Aggregation* p = _impl_.aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Aggregation&>(
      ::google::monitoring::v3::_Aggregation_default_instance_);
}
inline const ::google::monitoring::v3::Aggregation& ListTimeSeriesRequest::aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.aggregation)
  return _internal_aggregation();
}
inline void ListTimeSeriesRequest::unsafe_arena_set_allocated_aggregation(
    ::google::monitoring::v3::Aggregation* aggregation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aggregation_);
  }
  _impl_.aggregation_ = aggregation;
  if (aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.aggregation)
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::release_aggregation() {
  
  ::google::monitoring::v3::Aggregation* temp = _impl_.aggregation_;
  _impl_.aggregation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::unsafe_arena_release_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.aggregation)
  
  ::google::monitoring::v3::Aggregation* temp = _impl_.aggregation_;
  _impl_.aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::_internal_mutable_aggregation() {
  
  if (_impl_.aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Aggregation>(GetArenaForAllocation());
    _impl_.aggregation_ = p;
  }
  return _impl_.aggregation_;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::mutable_aggregation() {
  ::google::monitoring::v3::Aggregation* _msg = _internal_mutable_aggregation();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.aggregation)
  return _msg;
}
inline void ListTimeSeriesRequest::set_allocated_aggregation(::google::monitoring::v3::Aggregation* aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aggregation_);
  }
  if (aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation));
    if (message_arena != submessage_arena) {
      aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aggregation_ = aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.aggregation)
}

// .google.monitoring.v3.Aggregation secondary_aggregation = 11;
inline bool ListTimeSeriesRequest::_internal_has_secondary_aggregation() const {
  return this != internal_default_instance() && _impl_.secondary_aggregation_ != nullptr;
}
inline bool ListTimeSeriesRequest::has_secondary_aggregation() const {
  return _internal_has_secondary_aggregation();
}
inline const ::google::monitoring::v3::Aggregation& ListTimeSeriesRequest::_internal_secondary_aggregation() const {
  const ::google::monitoring::v3::Aggregation* p = _impl_.secondary_aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::Aggregation&>(
      ::google::monitoring::v3::_Aggregation_default_instance_);
}
inline const ::google::monitoring::v3::Aggregation& ListTimeSeriesRequest::secondary_aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.secondary_aggregation)
  return _internal_secondary_aggregation();
}
inline void ListTimeSeriesRequest::unsafe_arena_set_allocated_secondary_aggregation(
    ::google::monitoring::v3::Aggregation* secondary_aggregation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_aggregation_);
  }
  _impl_.secondary_aggregation_ = secondary_aggregation;
  if (secondary_aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.secondary_aggregation)
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::release_secondary_aggregation() {
  
  ::google::monitoring::v3::Aggregation* temp = _impl_.secondary_aggregation_;
  _impl_.secondary_aggregation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::unsafe_arena_release_secondary_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.secondary_aggregation)
  
  ::google::monitoring::v3::Aggregation* temp = _impl_.secondary_aggregation_;
  _impl_.secondary_aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::_internal_mutable_secondary_aggregation() {
  
  if (_impl_.secondary_aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::Aggregation>(GetArenaForAllocation());
    _impl_.secondary_aggregation_ = p;
  }
  return _impl_.secondary_aggregation_;
}
inline ::google::monitoring::v3::Aggregation* ListTimeSeriesRequest::mutable_secondary_aggregation() {
  ::google::monitoring::v3::Aggregation* _msg = _internal_mutable_secondary_aggregation();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.secondary_aggregation)
  return _msg;
}
inline void ListTimeSeriesRequest::set_allocated_secondary_aggregation(::google::monitoring::v3::Aggregation* secondary_aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_aggregation_);
  }
  if (secondary_aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation));
    if (message_arena != submessage_arena) {
      secondary_aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_aggregation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.secondary_aggregation_ = secondary_aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.secondary_aggregation)
}

// string order_by = 6;
inline void ListTimeSeriesRequest::clear_order_by() {
  _impl_.order_by_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.order_by)
  return _internal_order_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesRequest::set_order_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.order_by)
}
inline std::string* ListTimeSeriesRequest::mutable_order_by() {
  std::string* _s = _internal_mutable_order_by();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.order_by)
  return _s;
}
inline const std::string& ListTimeSeriesRequest::_internal_order_by() const {
  return _impl_.order_by_.Get();
}
inline void ListTimeSeriesRequest::_internal_set_order_by(const std::string& value) {
  
  _impl_.order_by_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::_internal_mutable_order_by() {
  
  return _impl_.order_by_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.order_by)
  return _impl_.order_by_.Release();
}
inline void ListTimeSeriesRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  _impl_.order_by_.SetAllocated(order_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_by_.IsDefault()) {
    _impl_.order_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.order_by)
}

// .google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView view = 7 [(.google.api.field_behavior) = REQUIRED];
inline void ListTimeSeriesRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView ListTimeSeriesRequest::_internal_view() const {
  return static_cast< ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView >(_impl_.view_);
}
inline ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView ListTimeSeriesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.view)
  return _internal_view();
}
inline void ListTimeSeriesRequest::_internal_set_view(::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView value) {
  
  _impl_.view_ = value;
}
inline void ListTimeSeriesRequest::set_view(::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.view)
}

// int32 page_size = 8;
inline void ListTimeSeriesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListTimeSeriesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListTimeSeriesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.page_size)
  return _internal_page_size();
}
inline void ListTimeSeriesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListTimeSeriesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.page_size)
}

// string page_token = 9;
inline void ListTimeSeriesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesRequest.page_token)
}
inline std::string* ListTimeSeriesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesRequest.page_token)
  return _s;
}
inline const std::string& ListTimeSeriesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListTimeSeriesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListTimeSeriesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesRequest.page_token)
}

// -------------------------------------------------------------------

// ListTimeSeriesResponse

// repeated .google.monitoring.v3.TimeSeries time_series = 1;
inline int ListTimeSeriesResponse::_internal_time_series_size() const {
  return _impl_.time_series_.size();
}
inline int ListTimeSeriesResponse::time_series_size() const {
  return _internal_time_series_size();
}
inline ::google::monitoring::v3::TimeSeries* ListTimeSeriesResponse::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesResponse.time_series)
  return _impl_.time_series_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >*
ListTimeSeriesResponse::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListTimeSeriesResponse.time_series)
  return &_impl_.time_series_;
}
inline const ::google::monitoring::v3::TimeSeries& ListTimeSeriesResponse::_internal_time_series(int index) const {
  return _impl_.time_series_.Get(index);
}
inline const ::google::monitoring::v3::TimeSeries& ListTimeSeriesResponse::time_series(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesResponse.time_series)
  return _internal_time_series(index);
}
inline ::google::monitoring::v3::TimeSeries* ListTimeSeriesResponse::_internal_add_time_series() {
  return _impl_.time_series_.Add();
}
inline ::google::monitoring::v3::TimeSeries* ListTimeSeriesResponse::add_time_series() {
  ::google::monitoring::v3::TimeSeries* _add = _internal_add_time_series();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListTimeSeriesResponse.time_series)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >&
ListTimeSeriesResponse::time_series() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListTimeSeriesResponse.time_series)
  return _impl_.time_series_;
}

// string next_page_token = 2;
inline void ListTimeSeriesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesResponse.next_page_token)
}
inline std::string* ListTimeSeriesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesResponse.next_page_token)
  return _s;
}
inline const std::string& ListTimeSeriesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListTimeSeriesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListTimeSeriesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesResponse.next_page_token)
}

// repeated .google.rpc.Status execution_errors = 3;
inline int ListTimeSeriesResponse::_internal_execution_errors_size() const {
  return _impl_.execution_errors_.size();
}
inline int ListTimeSeriesResponse::execution_errors_size() const {
  return _internal_execution_errors_size();
}
inline ::google::rpc::Status* ListTimeSeriesResponse::mutable_execution_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesResponse.execution_errors)
  return _impl_.execution_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
ListTimeSeriesResponse::mutable_execution_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListTimeSeriesResponse.execution_errors)
  return &_impl_.execution_errors_;
}
inline const ::google::rpc::Status& ListTimeSeriesResponse::_internal_execution_errors(int index) const {
  return _impl_.execution_errors_.Get(index);
}
inline const ::google::rpc::Status& ListTimeSeriesResponse::execution_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesResponse.execution_errors)
  return _internal_execution_errors(index);
}
inline ::google::rpc::Status* ListTimeSeriesResponse::_internal_add_execution_errors() {
  return _impl_.execution_errors_.Add();
}
inline ::google::rpc::Status* ListTimeSeriesResponse::add_execution_errors() {
  ::google::rpc::Status* _add = _internal_add_execution_errors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListTimeSeriesResponse.execution_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
ListTimeSeriesResponse::execution_errors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListTimeSeriesResponse.execution_errors)
  return _impl_.execution_errors_;
}

// string unit = 5;
inline void ListTimeSeriesResponse::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& ListTimeSeriesResponse::unit() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListTimeSeriesResponse.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTimeSeriesResponse::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListTimeSeriesResponse.unit)
}
inline std::string* ListTimeSeriesResponse::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListTimeSeriesResponse.unit)
  return _s;
}
inline const std::string& ListTimeSeriesResponse::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void ListTimeSeriesResponse::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* ListTimeSeriesResponse::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* ListTimeSeriesResponse::release_unit() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListTimeSeriesResponse.unit)
  return _impl_.unit_.Release();
}
inline void ListTimeSeriesResponse::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListTimeSeriesResponse.unit)
}

// -------------------------------------------------------------------

// CreateTimeSeriesRequest

// string name = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTimeSeriesRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateTimeSeriesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTimeSeriesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateTimeSeriesRequest.name)
}
inline std::string* CreateTimeSeriesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesRequest.name)
  return _s;
}
inline const std::string& CreateTimeSeriesRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateTimeSeriesRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateTimeSeriesRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateTimeSeriesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateTimeSeriesRequest.name)
  return _impl_.name_.Release();
}
inline void CreateTimeSeriesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateTimeSeriesRequest.name)
}

// repeated .google.monitoring.v3.TimeSeries time_series = 2 [(.google.api.field_behavior) = REQUIRED];
inline int CreateTimeSeriesRequest::_internal_time_series_size() const {
  return _impl_.time_series_.size();
}
inline int CreateTimeSeriesRequest::time_series_size() const {
  return _internal_time_series_size();
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesRequest::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesRequest.time_series)
  return _impl_.time_series_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >*
CreateTimeSeriesRequest::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.CreateTimeSeriesRequest.time_series)
  return &_impl_.time_series_;
}
inline const ::google::monitoring::v3::TimeSeries& CreateTimeSeriesRequest::_internal_time_series(int index) const {
  return _impl_.time_series_.Get(index);
}
inline const ::google::monitoring::v3::TimeSeries& CreateTimeSeriesRequest::time_series(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesRequest.time_series)
  return _internal_time_series(index);
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesRequest::_internal_add_time_series() {
  return _impl_.time_series_.Add();
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesRequest::add_time_series() {
  ::google::monitoring::v3::TimeSeries* _add = _internal_add_time_series();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.CreateTimeSeriesRequest.time_series)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeries >&
CreateTimeSeriesRequest::time_series() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.CreateTimeSeriesRequest.time_series)
  return _impl_.time_series_;
}

// -------------------------------------------------------------------

// CreateTimeSeriesError

// .google.monitoring.v3.TimeSeries time_series = 1 [deprecated = true];
inline bool CreateTimeSeriesError::_internal_has_time_series() const {
  return this != internal_default_instance() && _impl_.time_series_ != nullptr;
}
inline bool CreateTimeSeriesError::has_time_series() const {
  return _internal_has_time_series();
}
inline const ::google::monitoring::v3::TimeSeries& CreateTimeSeriesError::_internal_time_series() const {
  const ::google::monitoring::v3::TimeSeries* p = _impl_.time_series_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeSeries&>(
      ::google::monitoring::v3::_TimeSeries_default_instance_);
}
inline const ::google::monitoring::v3::TimeSeries& CreateTimeSeriesError::time_series() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesError.time_series)
  return _internal_time_series();
}
inline void CreateTimeSeriesError::unsafe_arena_set_allocated_time_series(
    ::google::monitoring::v3::TimeSeries* time_series) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_);
  }
  _impl_.time_series_ = time_series;
  if (time_series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateTimeSeriesError.time_series)
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesError::release_time_series() {
  
  ::google::monitoring::v3::TimeSeries* temp = _impl_.time_series_;
  _impl_.time_series_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesError::unsafe_arena_release_time_series() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateTimeSeriesError.time_series)
  
  ::google::monitoring::v3::TimeSeries* temp = _impl_.time_series_;
  _impl_.time_series_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesError::_internal_mutable_time_series() {
  
  if (_impl_.time_series_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeSeries>(GetArenaForAllocation());
    _impl_.time_series_ = p;
  }
  return _impl_.time_series_;
}
inline ::google::monitoring::v3::TimeSeries* CreateTimeSeriesError::mutable_time_series() {
  ::google::monitoring::v3::TimeSeries* _msg = _internal_mutable_time_series();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesError.time_series)
  return _msg;
}
inline void CreateTimeSeriesError::set_allocated_time_series(::google::monitoring::v3::TimeSeries* time_series) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_);
  }
  if (time_series) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_series));
    if (message_arena != submessage_arena) {
      time_series = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_series, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_series_ = time_series;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateTimeSeriesError.time_series)
}

// .google.rpc.Status status = 2 [deprecated = true];
inline bool CreateTimeSeriesError::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CreateTimeSeriesError::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& CreateTimeSeriesError::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& CreateTimeSeriesError::status() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesError.status)
  return _internal_status();
}
inline void CreateTimeSeriesError::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateTimeSeriesError.status)
}
inline ::google::rpc::Status* CreateTimeSeriesError::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* CreateTimeSeriesError::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateTimeSeriesError.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* CreateTimeSeriesError::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* CreateTimeSeriesError::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesError.status)
  return _msg;
}
inline void CreateTimeSeriesError::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateTimeSeriesError.status)
}

// -------------------------------------------------------------------

// CreateTimeSeriesSummary_Error

// .google.rpc.Status status = 1;
inline bool CreateTimeSeriesSummary_Error::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CreateTimeSeriesSummary_Error::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& CreateTimeSeriesSummary_Error::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& CreateTimeSeriesSummary_Error::status() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesSummary.Error.status)
  return _internal_status();
}
inline void CreateTimeSeriesSummary_Error::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.CreateTimeSeriesSummary.Error.status)
}
inline ::google::rpc::Status* CreateTimeSeriesSummary_Error::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* CreateTimeSeriesSummary_Error::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateTimeSeriesSummary.Error.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* CreateTimeSeriesSummary_Error::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* CreateTimeSeriesSummary_Error::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesSummary.Error.status)
  return _msg;
}
inline void CreateTimeSeriesSummary_Error::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateTimeSeriesSummary.Error.status)
}

// int32 point_count = 2;
inline void CreateTimeSeriesSummary_Error::clear_point_count() {
  _impl_.point_count_ = 0;
}
inline int32_t CreateTimeSeriesSummary_Error::_internal_point_count() const {
  return _impl_.point_count_;
}
inline int32_t CreateTimeSeriesSummary_Error::point_count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesSummary.Error.point_count)
  return _internal_point_count();
}
inline void CreateTimeSeriesSummary_Error::_internal_set_point_count(int32_t value) {
  
  _impl_.point_count_ = value;
}
inline void CreateTimeSeriesSummary_Error::set_point_count(int32_t value) {
  _internal_set_point_count(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateTimeSeriesSummary.Error.point_count)
}

// -------------------------------------------------------------------

// CreateTimeSeriesSummary

// int32 total_point_count = 1;
inline void CreateTimeSeriesSummary::clear_total_point_count() {
  _impl_.total_point_count_ = 0;
}
inline int32_t CreateTimeSeriesSummary::_internal_total_point_count() const {
  return _impl_.total_point_count_;
}
inline int32_t CreateTimeSeriesSummary::total_point_count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesSummary.total_point_count)
  return _internal_total_point_count();
}
inline void CreateTimeSeriesSummary::_internal_set_total_point_count(int32_t value) {
  
  _impl_.total_point_count_ = value;
}
inline void CreateTimeSeriesSummary::set_total_point_count(int32_t value) {
  _internal_set_total_point_count(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateTimeSeriesSummary.total_point_count)
}

// int32 success_point_count = 2;
inline void CreateTimeSeriesSummary::clear_success_point_count() {
  _impl_.success_point_count_ = 0;
}
inline int32_t CreateTimeSeriesSummary::_internal_success_point_count() const {
  return _impl_.success_point_count_;
}
inline int32_t CreateTimeSeriesSummary::success_point_count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesSummary.success_point_count)
  return _internal_success_point_count();
}
inline void CreateTimeSeriesSummary::_internal_set_success_point_count(int32_t value) {
  
  _impl_.success_point_count_ = value;
}
inline void CreateTimeSeriesSummary::set_success_point_count(int32_t value) {
  _internal_set_success_point_count(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateTimeSeriesSummary.success_point_count)
}

// repeated .google.monitoring.v3.CreateTimeSeriesSummary.Error errors = 3;
inline int CreateTimeSeriesSummary::_internal_errors_size() const {
  return _impl_.errors_.size();
}
inline int CreateTimeSeriesSummary::errors_size() const {
  return _internal_errors_size();
}
inline void CreateTimeSeriesSummary::clear_errors() {
  _impl_.errors_.Clear();
}
inline ::google::monitoring::v3::CreateTimeSeriesSummary_Error* CreateTimeSeriesSummary::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateTimeSeriesSummary.errors)
  return _impl_.errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::CreateTimeSeriesSummary_Error >*
CreateTimeSeriesSummary::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.CreateTimeSeriesSummary.errors)
  return &_impl_.errors_;
}
inline const ::google::monitoring::v3::CreateTimeSeriesSummary_Error& CreateTimeSeriesSummary::_internal_errors(int index) const {
  return _impl_.errors_.Get(index);
}
inline const ::google::monitoring::v3::CreateTimeSeriesSummary_Error& CreateTimeSeriesSummary::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateTimeSeriesSummary.errors)
  return _internal_errors(index);
}
inline ::google::monitoring::v3::CreateTimeSeriesSummary_Error* CreateTimeSeriesSummary::_internal_add_errors() {
  return _impl_.errors_.Add();
}
inline ::google::monitoring::v3::CreateTimeSeriesSummary_Error* CreateTimeSeriesSummary::add_errors() {
  ::google::monitoring::v3::CreateTimeSeriesSummary_Error* _add = _internal_add_errors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.CreateTimeSeriesSummary.errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::CreateTimeSeriesSummary_Error >&
CreateTimeSeriesSummary::errors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.CreateTimeSeriesSummary.errors)
  return _impl_.errors_;
}

// -------------------------------------------------------------------

// QueryTimeSeriesRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void QueryTimeSeriesRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryTimeSeriesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryTimeSeriesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryTimeSeriesRequest.name)
}
inline std::string* QueryTimeSeriesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesRequest.name)
  return _s;
}
inline const std::string& QueryTimeSeriesRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryTimeSeriesRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryTimeSeriesRequest.name)
  return _impl_.name_.Release();
}
inline void QueryTimeSeriesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryTimeSeriesRequest.name)
}

// string query = 7 [(.google.api.field_behavior) = REQUIRED];
inline void QueryTimeSeriesRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& QueryTimeSeriesRequest::query() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryTimeSeriesRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryTimeSeriesRequest.query)
}
inline std::string* QueryTimeSeriesRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesRequest.query)
  return _s;
}
inline const std::string& QueryTimeSeriesRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void QueryTimeSeriesRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryTimeSeriesRequest.query)
  return _impl_.query_.Release();
}
inline void QueryTimeSeriesRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryTimeSeriesRequest.query)
}

// int32 page_size = 9;
inline void QueryTimeSeriesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t QueryTimeSeriesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t QueryTimeSeriesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesRequest.page_size)
  return _internal_page_size();
}
inline void QueryTimeSeriesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void QueryTimeSeriesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryTimeSeriesRequest.page_size)
}

// string page_token = 10;
inline void QueryTimeSeriesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& QueryTimeSeriesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryTimeSeriesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryTimeSeriesRequest.page_token)
}
inline std::string* QueryTimeSeriesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesRequest.page_token)
  return _s;
}
inline const std::string& QueryTimeSeriesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void QueryTimeSeriesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryTimeSeriesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void QueryTimeSeriesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryTimeSeriesRequest.page_token)
}

// -------------------------------------------------------------------

// QueryTimeSeriesResponse

// .google.monitoring.v3.TimeSeriesDescriptor time_series_descriptor = 8;
inline bool QueryTimeSeriesResponse::_internal_has_time_series_descriptor() const {
  return this != internal_default_instance() && _impl_.time_series_descriptor_ != nullptr;
}
inline bool QueryTimeSeriesResponse::has_time_series_descriptor() const {
  return _internal_has_time_series_descriptor();
}
inline const ::google::monitoring::v3::TimeSeriesDescriptor& QueryTimeSeriesResponse::_internal_time_series_descriptor() const {
  const ::google::monitoring::v3::TimeSeriesDescriptor* p = _impl_.time_series_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::v3::TimeSeriesDescriptor&>(
      ::google::monitoring::v3::_TimeSeriesDescriptor_default_instance_);
}
inline const ::google::monitoring::v3::TimeSeriesDescriptor& QueryTimeSeriesResponse::time_series_descriptor() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesResponse.time_series_descriptor)
  return _internal_time_series_descriptor();
}
inline void QueryTimeSeriesResponse::unsafe_arena_set_allocated_time_series_descriptor(
    ::google::monitoring::v3::TimeSeriesDescriptor* time_series_descriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_descriptor_);
  }
  _impl_.time_series_descriptor_ = time_series_descriptor;
  if (time_series_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.v3.QueryTimeSeriesResponse.time_series_descriptor)
}
inline ::google::monitoring::v3::TimeSeriesDescriptor* QueryTimeSeriesResponse::release_time_series_descriptor() {
  
  ::google::monitoring::v3::TimeSeriesDescriptor* temp = _impl_.time_series_descriptor_;
  _impl_.time_series_descriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::v3::TimeSeriesDescriptor* QueryTimeSeriesResponse::unsafe_arena_release_time_series_descriptor() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryTimeSeriesResponse.time_series_descriptor)
  
  ::google::monitoring::v3::TimeSeriesDescriptor* temp = _impl_.time_series_descriptor_;
  _impl_.time_series_descriptor_ = nullptr;
  return temp;
}
inline ::google::monitoring::v3::TimeSeriesDescriptor* QueryTimeSeriesResponse::_internal_mutable_time_series_descriptor() {
  
  if (_impl_.time_series_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeSeriesDescriptor>(GetArenaForAllocation());
    _impl_.time_series_descriptor_ = p;
  }
  return _impl_.time_series_descriptor_;
}
inline ::google::monitoring::v3::TimeSeriesDescriptor* QueryTimeSeriesResponse::mutable_time_series_descriptor() {
  ::google::monitoring::v3::TimeSeriesDescriptor* _msg = _internal_mutable_time_series_descriptor();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesResponse.time_series_descriptor)
  return _msg;
}
inline void QueryTimeSeriesResponse::set_allocated_time_series_descriptor(::google::monitoring::v3::TimeSeriesDescriptor* time_series_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_descriptor_);
  }
  if (time_series_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_series_descriptor));
    if (message_arena != submessage_arena) {
      time_series_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_series_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_series_descriptor_ = time_series_descriptor;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryTimeSeriesResponse.time_series_descriptor)
}

// repeated .google.monitoring.v3.TimeSeriesData time_series_data = 9;
inline int QueryTimeSeriesResponse::_internal_time_series_data_size() const {
  return _impl_.time_series_data_.size();
}
inline int QueryTimeSeriesResponse::time_series_data_size() const {
  return _internal_time_series_data_size();
}
inline ::google::monitoring::v3::TimeSeriesData* QueryTimeSeriesResponse::mutable_time_series_data(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesResponse.time_series_data)
  return _impl_.time_series_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData >*
QueryTimeSeriesResponse::mutable_time_series_data() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.QueryTimeSeriesResponse.time_series_data)
  return &_impl_.time_series_data_;
}
inline const ::google::monitoring::v3::TimeSeriesData& QueryTimeSeriesResponse::_internal_time_series_data(int index) const {
  return _impl_.time_series_data_.Get(index);
}
inline const ::google::monitoring::v3::TimeSeriesData& QueryTimeSeriesResponse::time_series_data(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesResponse.time_series_data)
  return _internal_time_series_data(index);
}
inline ::google::monitoring::v3::TimeSeriesData* QueryTimeSeriesResponse::_internal_add_time_series_data() {
  return _impl_.time_series_data_.Add();
}
inline ::google::monitoring::v3::TimeSeriesData* QueryTimeSeriesResponse::add_time_series_data() {
  ::google::monitoring::v3::TimeSeriesData* _add = _internal_add_time_series_data();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.QueryTimeSeriesResponse.time_series_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::TimeSeriesData >&
QueryTimeSeriesResponse::time_series_data() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.QueryTimeSeriesResponse.time_series_data)
  return _impl_.time_series_data_;
}

// string next_page_token = 10;
inline void QueryTimeSeriesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& QueryTimeSeriesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryTimeSeriesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryTimeSeriesResponse.next_page_token)
}
inline std::string* QueryTimeSeriesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesResponse.next_page_token)
  return _s;
}
inline const std::string& QueryTimeSeriesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void QueryTimeSeriesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryTimeSeriesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryTimeSeriesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void QueryTimeSeriesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryTimeSeriesResponse.next_page_token)
}

// repeated .google.rpc.Status partial_errors = 11;
inline int QueryTimeSeriesResponse::_internal_partial_errors_size() const {
  return _impl_.partial_errors_.size();
}
inline int QueryTimeSeriesResponse::partial_errors_size() const {
  return _internal_partial_errors_size();
}
inline ::google::rpc::Status* QueryTimeSeriesResponse::mutable_partial_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryTimeSeriesResponse.partial_errors)
  return _impl_.partial_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
QueryTimeSeriesResponse::mutable_partial_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.QueryTimeSeriesResponse.partial_errors)
  return &_impl_.partial_errors_;
}
inline const ::google::rpc::Status& QueryTimeSeriesResponse::_internal_partial_errors(int index) const {
  return _impl_.partial_errors_.Get(index);
}
inline const ::google::rpc::Status& QueryTimeSeriesResponse::partial_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryTimeSeriesResponse.partial_errors)
  return _internal_partial_errors(index);
}
inline ::google::rpc::Status* QueryTimeSeriesResponse::_internal_add_partial_errors() {
  return _impl_.partial_errors_.Add();
}
inline ::google::rpc::Status* QueryTimeSeriesResponse::add_partial_errors() {
  ::google::rpc::Status* _add = _internal_add_partial_errors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.QueryTimeSeriesResponse.partial_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
QueryTimeSeriesResponse::partial_errors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.QueryTimeSeriesResponse.partial_errors)
  return _impl_.partial_errors_;
}

// -------------------------------------------------------------------

// QueryErrorList

// repeated .google.monitoring.v3.QueryError errors = 1;
inline int QueryErrorList::_internal_errors_size() const {
  return _impl_.errors_.size();
}
inline int QueryErrorList::errors_size() const {
  return _internal_errors_size();
}
inline ::google::monitoring::v3::QueryError* QueryErrorList::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryErrorList.errors)
  return _impl_.errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::QueryError >*
QueryErrorList::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.QueryErrorList.errors)
  return &_impl_.errors_;
}
inline const ::google::monitoring::v3::QueryError& QueryErrorList::_internal_errors(int index) const {
  return _impl_.errors_.Get(index);
}
inline const ::google::monitoring::v3::QueryError& QueryErrorList::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryErrorList.errors)
  return _internal_errors(index);
}
inline ::google::monitoring::v3::QueryError* QueryErrorList::_internal_add_errors() {
  return _impl_.errors_.Add();
}
inline ::google::monitoring::v3::QueryError* QueryErrorList::add_errors() {
  ::google::monitoring::v3::QueryError* _add = _internal_add_errors();
  // @@protoc_insertion_point(field_add:google.monitoring.v3.QueryErrorList.errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::v3::QueryError >&
QueryErrorList::errors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.QueryErrorList.errors)
  return _impl_.errors_;
}

// string error_summary = 2;
inline void QueryErrorList::clear_error_summary() {
  _impl_.error_summary_.ClearToEmpty();
}
inline const std::string& QueryErrorList::error_summary() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.QueryErrorList.error_summary)
  return _internal_error_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryErrorList::set_error_summary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_summary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.v3.QueryErrorList.error_summary)
}
inline std::string* QueryErrorList::mutable_error_summary() {
  std::string* _s = _internal_mutable_error_summary();
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.QueryErrorList.error_summary)
  return _s;
}
inline const std::string& QueryErrorList::_internal_error_summary() const {
  return _impl_.error_summary_.Get();
}
inline void QueryErrorList::_internal_set_error_summary(const std::string& value) {
  
  _impl_.error_summary_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryErrorList::_internal_mutable_error_summary() {
  
  return _impl_.error_summary_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryErrorList::release_error_summary() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.QueryErrorList.error_summary)
  return _impl_.error_summary_.Release();
}
inline void QueryErrorList::set_allocated_error_summary(std::string* error_summary) {
  if (error_summary != nullptr) {
    
  } else {
    
  }
  _impl_.error_summary_.SetAllocated(error_summary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_summary_.IsDefault()) {
    _impl_.error_summary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.QueryErrorList.error_summary)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView>() {
  return ::google::monitoring::v3::ListTimeSeriesRequest_TimeSeriesView_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_5fservice_2eproto
