// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/scorecard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/monitoring/dashboard/v1/metrics.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto;
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class Scorecard;
struct ScorecardDefaultTypeInternal;
extern ScorecardDefaultTypeInternal _Scorecard_default_instance_;
class Scorecard_GaugeView;
struct Scorecard_GaugeViewDefaultTypeInternal;
extern Scorecard_GaugeViewDefaultTypeInternal _Scorecard_GaugeView_default_instance_;
class Scorecard_SparkChartView;
struct Scorecard_SparkChartViewDefaultTypeInternal;
extern Scorecard_SparkChartViewDefaultTypeInternal _Scorecard_SparkChartView_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::Scorecard* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Scorecard>(Arena*);
template<> ::google::monitoring::dashboard::v1::Scorecard_GaugeView* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Scorecard_GaugeView>(Arena*);
template<> ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Scorecard_SparkChartView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

// ===================================================================

class Scorecard_GaugeView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Scorecard.GaugeView) */ {
 public:
  inline Scorecard_GaugeView() : Scorecard_GaugeView(nullptr) {}
  ~Scorecard_GaugeView() override;
  explicit PROTOBUF_CONSTEXPR Scorecard_GaugeView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scorecard_GaugeView(const Scorecard_GaugeView& from);
  Scorecard_GaugeView(Scorecard_GaugeView&& from) noexcept
    : Scorecard_GaugeView() {
    *this = ::std::move(from);
  }

  inline Scorecard_GaugeView& operator=(const Scorecard_GaugeView& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scorecard_GaugeView& operator=(Scorecard_GaugeView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scorecard_GaugeView& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scorecard_GaugeView* internal_default_instance() {
    return reinterpret_cast<const Scorecard_GaugeView*>(
               &_Scorecard_GaugeView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scorecard_GaugeView& a, Scorecard_GaugeView& b) {
    a.Swap(&b);
  }
  inline void Swap(Scorecard_GaugeView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scorecard_GaugeView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scorecard_GaugeView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scorecard_GaugeView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scorecard_GaugeView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scorecard_GaugeView& from) {
    Scorecard_GaugeView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scorecard_GaugeView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Scorecard.GaugeView";
  }
  protected:
  explicit Scorecard_GaugeView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
  };
  // double lower_bound = 1;
  void clear_lower_bound();
  double lower_bound() const;
  void set_lower_bound(double value);
  private:
  double _internal_lower_bound() const;
  void _internal_set_lower_bound(double value);
  public:

  // double upper_bound = 2;
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard.GaugeView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lower_bound_;
    double upper_bound_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto;
};
// -------------------------------------------------------------------

class Scorecard_SparkChartView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Scorecard.SparkChartView) */ {
 public:
  inline Scorecard_SparkChartView() : Scorecard_SparkChartView(nullptr) {}
  ~Scorecard_SparkChartView() override;
  explicit PROTOBUF_CONSTEXPR Scorecard_SparkChartView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scorecard_SparkChartView(const Scorecard_SparkChartView& from);
  Scorecard_SparkChartView(Scorecard_SparkChartView&& from) noexcept
    : Scorecard_SparkChartView() {
    *this = ::std::move(from);
  }

  inline Scorecard_SparkChartView& operator=(const Scorecard_SparkChartView& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scorecard_SparkChartView& operator=(Scorecard_SparkChartView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scorecard_SparkChartView& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scorecard_SparkChartView* internal_default_instance() {
    return reinterpret_cast<const Scorecard_SparkChartView*>(
               &_Scorecard_SparkChartView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scorecard_SparkChartView& a, Scorecard_SparkChartView& b) {
    a.Swap(&b);
  }
  inline void Swap(Scorecard_SparkChartView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scorecard_SparkChartView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scorecard_SparkChartView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scorecard_SparkChartView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scorecard_SparkChartView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scorecard_SparkChartView& from) {
    Scorecard_SparkChartView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scorecard_SparkChartView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Scorecard.SparkChartView";
  }
  protected:
  explicit Scorecard_SparkChartView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinAlignmentPeriodFieldNumber = 2,
    kSparkChartTypeFieldNumber = 1,
  };
  // .google.protobuf.Duration min_alignment_period = 2;
  bool has_min_alignment_period() const;
  private:
  bool _internal_has_min_alignment_period() const;
  public:
  void clear_min_alignment_period();
  const ::PROTOBUF_NAMESPACE_ID::Duration& min_alignment_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_min_alignment_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_min_alignment_period();
  void set_allocated_min_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_min_alignment_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_min_alignment_period();
  public:
  void unsafe_arena_set_allocated_min_alignment_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_min_alignment_period();

  // .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_spark_chart_type();
  ::google::monitoring::dashboard::v1::SparkChartType spark_chart_type() const;
  void set_spark_chart_type(::google::monitoring::dashboard::v1::SparkChartType value);
  private:
  ::google::monitoring::dashboard::v1::SparkChartType _internal_spark_chart_type() const;
  void _internal_set_spark_chart_type(::google::monitoring::dashboard::v1::SparkChartType value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period_;
    int spark_chart_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto;
};
// -------------------------------------------------------------------

class Scorecard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Scorecard) */ {
 public:
  inline Scorecard() : Scorecard(nullptr) {}
  ~Scorecard() override;
  explicit PROTOBUF_CONSTEXPR Scorecard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scorecard(const Scorecard& from);
  Scorecard(Scorecard&& from) noexcept
    : Scorecard() {
    *this = ::std::move(from);
  }

  inline Scorecard& operator=(const Scorecard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scorecard& operator=(Scorecard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scorecard& default_instance() {
    return *internal_default_instance();
  }
  enum DataViewCase {
    kGaugeView = 4,
    kSparkChartView = 5,
    DATA_VIEW_NOT_SET = 0,
  };

  static inline const Scorecard* internal_default_instance() {
    return reinterpret_cast<const Scorecard*>(
               &_Scorecard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Scorecard& a, Scorecard& b) {
    a.Swap(&b);
  }
  inline void Swap(Scorecard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scorecard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scorecard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scorecard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scorecard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scorecard& from) {
    Scorecard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scorecard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Scorecard";
  }
  protected:
  explicit Scorecard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scorecard_GaugeView GaugeView;
  typedef Scorecard_SparkChartView SparkChartView;

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdsFieldNumber = 6,
    kTimeSeriesQueryFieldNumber = 1,
    kGaugeViewFieldNumber = 4,
    kSparkChartViewFieldNumber = 5,
  };
  // repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  ::google::monitoring::dashboard::v1::Threshold* mutable_thresholds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >*
      mutable_thresholds();
  private:
  const ::google::monitoring::dashboard::v1::Threshold& _internal_thresholds(int index) const;
  ::google::monitoring::dashboard::v1::Threshold* _internal_add_thresholds();
  public:
  const ::google::monitoring::dashboard::v1::Threshold& thresholds(int index) const;
  ::google::monitoring::dashboard::v1::Threshold* add_thresholds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >&
      thresholds() const;

  // .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_time_series_query() const;
  private:
  bool _internal_has_time_series_query() const;
  public:
  void clear_time_series_query();
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery& time_series_query() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::TimeSeriesQuery* release_time_series_query();
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* mutable_time_series_query();
  void set_allocated_time_series_query(::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery& _internal_time_series_query() const;
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* _internal_mutable_time_series_query();
  public:
  void unsafe_arena_set_allocated_time_series_query(
      ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query);
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* unsafe_arena_release_time_series_query();

  // .google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;
  bool has_gauge_view() const;
  private:
  bool _internal_has_gauge_view() const;
  public:
  void clear_gauge_view();
  const ::google::monitoring::dashboard::v1::Scorecard_GaugeView& gauge_view() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::Scorecard_GaugeView* release_gauge_view();
  ::google::monitoring::dashboard::v1::Scorecard_GaugeView* mutable_gauge_view();
  void set_allocated_gauge_view(::google::monitoring::dashboard::v1::Scorecard_GaugeView* gauge_view);
  private:
  const ::google::monitoring::dashboard::v1::Scorecard_GaugeView& _internal_gauge_view() const;
  ::google::monitoring::dashboard::v1::Scorecard_GaugeView* _internal_mutable_gauge_view();
  public:
  void unsafe_arena_set_allocated_gauge_view(
      ::google::monitoring::dashboard::v1::Scorecard_GaugeView* gauge_view);
  ::google::monitoring::dashboard::v1::Scorecard_GaugeView* unsafe_arena_release_gauge_view();

  // .google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;
  bool has_spark_chart_view() const;
  private:
  bool _internal_has_spark_chart_view() const;
  public:
  void clear_spark_chart_view();
  const ::google::monitoring::dashboard::v1::Scorecard_SparkChartView& spark_chart_view() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* release_spark_chart_view();
  ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* mutable_spark_chart_view();
  void set_allocated_spark_chart_view(::google::monitoring::dashboard::v1::Scorecard_SparkChartView* spark_chart_view);
  private:
  const ::google::monitoring::dashboard::v1::Scorecard_SparkChartView& _internal_spark_chart_view() const;
  ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* _internal_mutable_spark_chart_view();
  public:
  void unsafe_arena_set_allocated_spark_chart_view(
      ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* spark_chart_view);
  ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* unsafe_arena_release_spark_chart_view();

  void clear_data_view();
  DataViewCase data_view_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard)
 private:
  class _Internal;
  void set_has_gauge_view();
  void set_has_spark_chart_view();

  inline bool has_data_view() const;
  inline void clear_has_data_view();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold > thresholds_;
    ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query_;
    union DataViewUnion {
      constexpr DataViewUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::monitoring::dashboard::v1::Scorecard_GaugeView* gauge_view_;
      ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* spark_chart_view_;
    } data_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scorecard_GaugeView

// double lower_bound = 1;
inline void Scorecard_GaugeView::clear_lower_bound() {
  _impl_.lower_bound_ = 0;
}
inline double Scorecard_GaugeView::_internal_lower_bound() const {
  return _impl_.lower_bound_;
}
inline double Scorecard_GaugeView::lower_bound() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.GaugeView.lower_bound)
  return _internal_lower_bound();
}
inline void Scorecard_GaugeView::_internal_set_lower_bound(double value) {
  
  _impl_.lower_bound_ = value;
}
inline void Scorecard_GaugeView::set_lower_bound(double value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Scorecard.GaugeView.lower_bound)
}

// double upper_bound = 2;
inline void Scorecard_GaugeView::clear_upper_bound() {
  _impl_.upper_bound_ = 0;
}
inline double Scorecard_GaugeView::_internal_upper_bound() const {
  return _impl_.upper_bound_;
}
inline double Scorecard_GaugeView::upper_bound() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.GaugeView.upper_bound)
  return _internal_upper_bound();
}
inline void Scorecard_GaugeView::_internal_set_upper_bound(double value) {
  
  _impl_.upper_bound_ = value;
}
inline void Scorecard_GaugeView::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Scorecard.GaugeView.upper_bound)
}

// -------------------------------------------------------------------

// Scorecard_SparkChartView

// .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Scorecard_SparkChartView::clear_spark_chart_type() {
  _impl_.spark_chart_type_ = 0;
}
inline ::google::monitoring::dashboard::v1::SparkChartType Scorecard_SparkChartView::_internal_spark_chart_type() const {
  return static_cast< ::google::monitoring::dashboard::v1::SparkChartType >(_impl_.spark_chart_type_);
}
inline ::google::monitoring::dashboard::v1::SparkChartType Scorecard_SparkChartView::spark_chart_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.SparkChartView.spark_chart_type)
  return _internal_spark_chart_type();
}
inline void Scorecard_SparkChartView::_internal_set_spark_chart_type(::google::monitoring::dashboard::v1::SparkChartType value) {
  
  _impl_.spark_chart_type_ = value;
}
inline void Scorecard_SparkChartView::set_spark_chart_type(::google::monitoring::dashboard::v1::SparkChartType value) {
  _internal_set_spark_chart_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Scorecard.SparkChartView.spark_chart_type)
}

// .google.protobuf.Duration min_alignment_period = 2;
inline bool Scorecard_SparkChartView::_internal_has_min_alignment_period() const {
  return this != internal_default_instance() && _impl_.min_alignment_period_ != nullptr;
}
inline bool Scorecard_SparkChartView::has_min_alignment_period() const {
  return _internal_has_min_alignment_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Scorecard_SparkChartView::_internal_min_alignment_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.min_alignment_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Scorecard_SparkChartView::min_alignment_period() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.SparkChartView.min_alignment_period)
  return _internal_min_alignment_period();
}
inline void Scorecard_SparkChartView::unsafe_arena_set_allocated_min_alignment_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_alignment_period_);
  }
  _impl_.min_alignment_period_ = min_alignment_period;
  if (min_alignment_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Scorecard.SparkChartView.min_alignment_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Scorecard_SparkChartView::release_min_alignment_period() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.min_alignment_period_;
  _impl_.min_alignment_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Scorecard_SparkChartView::unsafe_arena_release_min_alignment_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Scorecard.SparkChartView.min_alignment_period)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.min_alignment_period_;
  _impl_.min_alignment_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Scorecard_SparkChartView::_internal_mutable_min_alignment_period() {
  
  if (_impl_.min_alignment_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.min_alignment_period_ = p;
  }
  return _impl_.min_alignment_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Scorecard_SparkChartView::mutable_min_alignment_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_min_alignment_period();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Scorecard.SparkChartView.min_alignment_period)
  return _msg;
}
inline void Scorecard_SparkChartView::set_allocated_min_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_alignment_period_);
  }
  if (min_alignment_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_alignment_period));
    if (message_arena != submessage_arena) {
      min_alignment_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_alignment_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_alignment_period_ = min_alignment_period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Scorecard.SparkChartView.min_alignment_period)
}

// -------------------------------------------------------------------

// Scorecard

// .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool Scorecard::_internal_has_time_series_query() const {
  return this != internal_default_instance() && _impl_.time_series_query_ != nullptr;
}
inline bool Scorecard::has_time_series_query() const {
  return _internal_has_time_series_query();
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesQuery& Scorecard::_internal_time_series_query() const {
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery* p = _impl_.time_series_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::TimeSeriesQuery&>(
      ::google::monitoring::dashboard::v1::_TimeSeriesQuery_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesQuery& Scorecard::time_series_query() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.time_series_query)
  return _internal_time_series_query();
}
inline void Scorecard::unsafe_arena_set_allocated_time_series_query(
    ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_query_);
  }
  _impl_.time_series_query_ = time_series_query;
  if (time_series_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Scorecard.time_series_query)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* Scorecard::release_time_series_query() {
  
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* temp = _impl_.time_series_query_;
  _impl_.time_series_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* Scorecard::unsafe_arena_release_time_series_query() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Scorecard.time_series_query)
  
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* temp = _impl_.time_series_query_;
  _impl_.time_series_query_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* Scorecard::_internal_mutable_time_series_query() {
  
  if (_impl_.time_series_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesQuery>(GetArenaForAllocation());
    _impl_.time_series_query_ = p;
  }
  return _impl_.time_series_query_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* Scorecard::mutable_time_series_query() {
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* _msg = _internal_mutable_time_series_query();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Scorecard.time_series_query)
  return _msg;
}
inline void Scorecard::set_allocated_time_series_query(::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_query_);
  }
  if (time_series_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_series_query));
    if (message_arena != submessage_arena) {
      time_series_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_series_query, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_series_query_ = time_series_query;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Scorecard.time_series_query)
}

// .google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;
inline bool Scorecard::_internal_has_gauge_view() const {
  return data_view_case() == kGaugeView;
}
inline bool Scorecard::has_gauge_view() const {
  return _internal_has_gauge_view();
}
inline void Scorecard::set_has_gauge_view() {
  _impl_._oneof_case_[0] = kGaugeView;
}
inline void Scorecard::clear_gauge_view() {
  if (_internal_has_gauge_view()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_view_.gauge_view_;
    }
    clear_has_data_view();
  }
}
inline ::google::monitoring::dashboard::v1::Scorecard_GaugeView* Scorecard::release_gauge_view() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Scorecard.gauge_view)
  if (_internal_has_gauge_view()) {
    clear_has_data_view();
    ::google::monitoring::dashboard::v1::Scorecard_GaugeView* temp = _impl_.data_view_.gauge_view_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_view_.gauge_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::Scorecard_GaugeView& Scorecard::_internal_gauge_view() const {
  return _internal_has_gauge_view()
      ? *_impl_.data_view_.gauge_view_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::Scorecard_GaugeView&>(::google::monitoring::dashboard::v1::_Scorecard_GaugeView_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Scorecard_GaugeView& Scorecard::gauge_view() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.gauge_view)
  return _internal_gauge_view();
}
inline ::google::monitoring::dashboard::v1::Scorecard_GaugeView* Scorecard::unsafe_arena_release_gauge_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Scorecard.gauge_view)
  if (_internal_has_gauge_view()) {
    clear_has_data_view();
    ::google::monitoring::dashboard::v1::Scorecard_GaugeView* temp = _impl_.data_view_.gauge_view_;
    _impl_.data_view_.gauge_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Scorecard::unsafe_arena_set_allocated_gauge_view(::google::monitoring::dashboard::v1::Scorecard_GaugeView* gauge_view) {
  clear_data_view();
  if (gauge_view) {
    set_has_gauge_view();
    _impl_.data_view_.gauge_view_ = gauge_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Scorecard.gauge_view)
}
inline ::google::monitoring::dashboard::v1::Scorecard_GaugeView* Scorecard::_internal_mutable_gauge_view() {
  if (!_internal_has_gauge_view()) {
    clear_data_view();
    set_has_gauge_view();
    _impl_.data_view_.gauge_view_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::Scorecard_GaugeView >(GetArenaForAllocation());
  }
  return _impl_.data_view_.gauge_view_;
}
inline ::google::monitoring::dashboard::v1::Scorecard_GaugeView* Scorecard::mutable_gauge_view() {
  ::google::monitoring::dashboard::v1::Scorecard_GaugeView* _msg = _internal_mutable_gauge_view();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Scorecard.gauge_view)
  return _msg;
}

// .google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;
inline bool Scorecard::_internal_has_spark_chart_view() const {
  return data_view_case() == kSparkChartView;
}
inline bool Scorecard::has_spark_chart_view() const {
  return _internal_has_spark_chart_view();
}
inline void Scorecard::set_has_spark_chart_view() {
  _impl_._oneof_case_[0] = kSparkChartView;
}
inline void Scorecard::clear_spark_chart_view() {
  if (_internal_has_spark_chart_view()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_view_.spark_chart_view_;
    }
    clear_has_data_view();
  }
}
inline ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* Scorecard::release_spark_chart_view() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Scorecard.spark_chart_view)
  if (_internal_has_spark_chart_view()) {
    clear_has_data_view();
    ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* temp = _impl_.data_view_.spark_chart_view_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_view_.spark_chart_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::Scorecard_SparkChartView& Scorecard::_internal_spark_chart_view() const {
  return _internal_has_spark_chart_view()
      ? *_impl_.data_view_.spark_chart_view_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::Scorecard_SparkChartView&>(::google::monitoring::dashboard::v1::_Scorecard_SparkChartView_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Scorecard_SparkChartView& Scorecard::spark_chart_view() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.spark_chart_view)
  return _internal_spark_chart_view();
}
inline ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* Scorecard::unsafe_arena_release_spark_chart_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Scorecard.spark_chart_view)
  if (_internal_has_spark_chart_view()) {
    clear_has_data_view();
    ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* temp = _impl_.data_view_.spark_chart_view_;
    _impl_.data_view_.spark_chart_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Scorecard::unsafe_arena_set_allocated_spark_chart_view(::google::monitoring::dashboard::v1::Scorecard_SparkChartView* spark_chart_view) {
  clear_data_view();
  if (spark_chart_view) {
    set_has_spark_chart_view();
    _impl_.data_view_.spark_chart_view_ = spark_chart_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Scorecard.spark_chart_view)
}
inline ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* Scorecard::_internal_mutable_spark_chart_view() {
  if (!_internal_has_spark_chart_view()) {
    clear_data_view();
    set_has_spark_chart_view();
    _impl_.data_view_.spark_chart_view_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::Scorecard_SparkChartView >(GetArenaForAllocation());
  }
  return _impl_.data_view_.spark_chart_view_;
}
inline ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* Scorecard::mutable_spark_chart_view() {
  ::google::monitoring::dashboard::v1::Scorecard_SparkChartView* _msg = _internal_mutable_spark_chart_view();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Scorecard.spark_chart_view)
  return _msg;
}

// repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;
inline int Scorecard::_internal_thresholds_size() const {
  return _impl_.thresholds_.size();
}
inline int Scorecard::thresholds_size() const {
  return _internal_thresholds_size();
}
inline ::google::monitoring::dashboard::v1::Threshold* Scorecard::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Scorecard.thresholds)
  return _impl_.thresholds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >*
Scorecard::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.dashboard.v1.Scorecard.thresholds)
  return &_impl_.thresholds_;
}
inline const ::google::monitoring::dashboard::v1::Threshold& Scorecard::_internal_thresholds(int index) const {
  return _impl_.thresholds_.Get(index);
}
inline const ::google::monitoring::dashboard::v1::Threshold& Scorecard::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Scorecard.thresholds)
  return _internal_thresholds(index);
}
inline ::google::monitoring::dashboard::v1::Threshold* Scorecard::_internal_add_thresholds() {
  return _impl_.thresholds_.Add();
}
inline ::google::monitoring::dashboard::v1::Threshold* Scorecard::add_thresholds() {
  ::google::monitoring::dashboard::v1::Threshold* _add = _internal_add_thresholds();
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.Scorecard.thresholds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >&
Scorecard::thresholds() const {
  // @@protoc_insertion_point(field_list:google.monitoring.dashboard.v1.Scorecard.thresholds)
  return _impl_.thresholds_;
}

inline bool Scorecard::has_data_view() const {
  return data_view_case() != DATA_VIEW_NOT_SET;
}
inline void Scorecard::clear_has_data_view() {
  _impl_._oneof_case_[0] = DATA_VIEW_NOT_SET;
}
inline Scorecard::DataViewCase Scorecard::data_view_case() const {
  return Scorecard::DataViewCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fscorecard_2eproto
