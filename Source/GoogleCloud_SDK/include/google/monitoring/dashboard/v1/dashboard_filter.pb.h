// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/dashboard_filter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto;
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class DashboardFilter;
struct DashboardFilterDefaultTypeInternal;
extern DashboardFilterDefaultTypeInternal _DashboardFilter_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::DashboardFilter* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::DashboardFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

enum DashboardFilter_FilterType : int {
  DashboardFilter_FilterType_FILTER_TYPE_UNSPECIFIED = 0,
  DashboardFilter_FilterType_RESOURCE_LABEL = 1,
  DashboardFilter_FilterType_METRIC_LABEL = 2,
  DashboardFilter_FilterType_USER_METADATA_LABEL = 3,
  DashboardFilter_FilterType_SYSTEM_METADATA_LABEL = 4,
  DashboardFilter_FilterType_GROUP = 5,
  DashboardFilter_FilterType_DashboardFilter_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DashboardFilter_FilterType_DashboardFilter_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DashboardFilter_FilterType_IsValid(int value);
constexpr DashboardFilter_FilterType DashboardFilter_FilterType_FilterType_MIN = DashboardFilter_FilterType_FILTER_TYPE_UNSPECIFIED;
constexpr DashboardFilter_FilterType DashboardFilter_FilterType_FilterType_MAX = DashboardFilter_FilterType_GROUP;
constexpr int DashboardFilter_FilterType_FilterType_ARRAYSIZE = DashboardFilter_FilterType_FilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DashboardFilter_FilterType_descriptor();
template<typename T>
inline const std::string& DashboardFilter_FilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DashboardFilter_FilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DashboardFilter_FilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DashboardFilter_FilterType_descriptor(), enum_t_value);
}
inline bool DashboardFilter_FilterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DashboardFilter_FilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DashboardFilter_FilterType>(
    DashboardFilter_FilterType_descriptor(), name, value);
}
// ===================================================================

class DashboardFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.DashboardFilter) */ {
 public:
  inline DashboardFilter() : DashboardFilter(nullptr) {}
  ~DashboardFilter() override;
  explicit PROTOBUF_CONSTEXPR DashboardFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DashboardFilter(const DashboardFilter& from);
  DashboardFilter(DashboardFilter&& from) noexcept
    : DashboardFilter() {
    *this = ::std::move(from);
  }

  inline DashboardFilter& operator=(const DashboardFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashboardFilter& operator=(DashboardFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DashboardFilter& default_instance() {
    return *internal_default_instance();
  }
  enum DefaultValueCase {
    kStringValue = 4,
    DEFAULT_VALUE_NOT_SET = 0,
  };

  static inline const DashboardFilter* internal_default_instance() {
    return reinterpret_cast<const DashboardFilter*>(
               &_DashboardFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DashboardFilter& a, DashboardFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(DashboardFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DashboardFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DashboardFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DashboardFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DashboardFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DashboardFilter& from) {
    DashboardFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DashboardFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.DashboardFilter";
  }
  protected:
  explicit DashboardFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DashboardFilter_FilterType FilterType;
  static constexpr FilterType FILTER_TYPE_UNSPECIFIED =
    DashboardFilter_FilterType_FILTER_TYPE_UNSPECIFIED;
  static constexpr FilterType RESOURCE_LABEL =
    DashboardFilter_FilterType_RESOURCE_LABEL;
  static constexpr FilterType METRIC_LABEL =
    DashboardFilter_FilterType_METRIC_LABEL;
  static constexpr FilterType USER_METADATA_LABEL =
    DashboardFilter_FilterType_USER_METADATA_LABEL;
  static constexpr FilterType SYSTEM_METADATA_LABEL =
    DashboardFilter_FilterType_SYSTEM_METADATA_LABEL;
  static constexpr FilterType GROUP =
    DashboardFilter_FilterType_GROUP;
  static inline bool FilterType_IsValid(int value) {
    return DashboardFilter_FilterType_IsValid(value);
  }
  static constexpr FilterType FilterType_MIN =
    DashboardFilter_FilterType_FilterType_MIN;
  static constexpr FilterType FilterType_MAX =
    DashboardFilter_FilterType_FilterType_MAX;
  static constexpr int FilterType_ARRAYSIZE =
    DashboardFilter_FilterType_FilterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterType_descriptor() {
    return DashboardFilter_FilterType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterType_Name.");
    return DashboardFilter_FilterType_Name(enum_t_value);
  }
  static inline bool FilterType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FilterType* value) {
    return DashboardFilter_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelKeyFieldNumber = 1,
    kTemplateVariableFieldNumber = 3,
    kFilterTypeFieldNumber = 5,
    kStringValueFieldNumber = 4,
  };
  // string label_key = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_label_key();
  const std::string& label_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label_key();
  PROTOBUF_NODISCARD std::string* release_label_key();
  void set_allocated_label_key(std::string* label_key);
  private:
  const std::string& _internal_label_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_key(const std::string& value);
  std::string* _internal_mutable_label_key();
  public:

  // string template_variable = 3;
  void clear_template_variable();
  const std::string& template_variable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_variable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_variable();
  PROTOBUF_NODISCARD std::string* release_template_variable();
  void set_allocated_template_variable(std::string* template_variable);
  private:
  const std::string& _internal_template_variable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_variable(const std::string& value);
  std::string* _internal_mutable_template_variable();
  public:

  // .google.monitoring.dashboard.v1.DashboardFilter.FilterType filter_type = 5;
  void clear_filter_type();
  ::google::monitoring::dashboard::v1::DashboardFilter_FilterType filter_type() const;
  void set_filter_type(::google::monitoring::dashboard::v1::DashboardFilter_FilterType value);
  private:
  ::google::monitoring::dashboard::v1::DashboardFilter_FilterType _internal_filter_type() const;
  void _internal_set_filter_type(::google::monitoring::dashboard::v1::DashboardFilter_FilterType value);
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_default_value();
  DefaultValueCase default_value_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.DashboardFilter)
 private:
  class _Internal;
  void set_has_string_value();

  inline bool has_default_value() const;
  inline void clear_has_default_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_variable_;
    int filter_type_;
    union DefaultValueUnion {
      constexpr DefaultValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    } default_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DashboardFilter

// string label_key = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DashboardFilter::clear_label_key() {
  _impl_.label_key_.ClearToEmpty();
}
inline const std::string& DashboardFilter::label_key() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.DashboardFilter.label_key)
  return _internal_label_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DashboardFilter::set_label_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.DashboardFilter.label_key)
}
inline std::string* DashboardFilter::mutable_label_key() {
  std::string* _s = _internal_mutable_label_key();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.DashboardFilter.label_key)
  return _s;
}
inline const std::string& DashboardFilter::_internal_label_key() const {
  return _impl_.label_key_.Get();
}
inline void DashboardFilter::_internal_set_label_key(const std::string& value) {
  
  _impl_.label_key_.Set(value, GetArenaForAllocation());
}
inline std::string* DashboardFilter::_internal_mutable_label_key() {
  
  return _impl_.label_key_.Mutable(GetArenaForAllocation());
}
inline std::string* DashboardFilter::release_label_key() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.DashboardFilter.label_key)
  return _impl_.label_key_.Release();
}
inline void DashboardFilter::set_allocated_label_key(std::string* label_key) {
  if (label_key != nullptr) {
    
  } else {
    
  }
  _impl_.label_key_.SetAllocated(label_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_key_.IsDefault()) {
    _impl_.label_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.DashboardFilter.label_key)
}

// string template_variable = 3;
inline void DashboardFilter::clear_template_variable() {
  _impl_.template_variable_.ClearToEmpty();
}
inline const std::string& DashboardFilter::template_variable() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.DashboardFilter.template_variable)
  return _internal_template_variable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DashboardFilter::set_template_variable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.template_variable_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.DashboardFilter.template_variable)
}
inline std::string* DashboardFilter::mutable_template_variable() {
  std::string* _s = _internal_mutable_template_variable();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.DashboardFilter.template_variable)
  return _s;
}
inline const std::string& DashboardFilter::_internal_template_variable() const {
  return _impl_.template_variable_.Get();
}
inline void DashboardFilter::_internal_set_template_variable(const std::string& value) {
  
  _impl_.template_variable_.Set(value, GetArenaForAllocation());
}
inline std::string* DashboardFilter::_internal_mutable_template_variable() {
  
  return _impl_.template_variable_.Mutable(GetArenaForAllocation());
}
inline std::string* DashboardFilter::release_template_variable() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.DashboardFilter.template_variable)
  return _impl_.template_variable_.Release();
}
inline void DashboardFilter::set_allocated_template_variable(std::string* template_variable) {
  if (template_variable != nullptr) {
    
  } else {
    
  }
  _impl_.template_variable_.SetAllocated(template_variable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_variable_.IsDefault()) {
    _impl_.template_variable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.DashboardFilter.template_variable)
}

// string string_value = 4;
inline bool DashboardFilter::_internal_has_string_value() const {
  return default_value_case() == kStringValue;
}
inline bool DashboardFilter::has_string_value() const {
  return _internal_has_string_value();
}
inline void DashboardFilter::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void DashboardFilter::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.default_value_.string_value_.Destroy();
    clear_has_default_value();
  }
}
inline const std::string& DashboardFilter::string_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.DashboardFilter.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void DashboardFilter::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_default_value();
    set_has_string_value();
    _impl_.default_value_.string_value_.InitDefault();
  }
  _impl_.default_value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.DashboardFilter.string_value)
}
inline std::string* DashboardFilter::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.DashboardFilter.string_value)
  return _s;
}
inline const std::string& DashboardFilter::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.default_value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DashboardFilter::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_default_value();
    set_has_string_value();
    _impl_.default_value_.string_value_.InitDefault();
  }
  _impl_.default_value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* DashboardFilter::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_default_value();
    set_has_string_value();
    _impl_.default_value_.string_value_.InitDefault();
  }
  return _impl_.default_value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* DashboardFilter::release_string_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.DashboardFilter.string_value)
  if (_internal_has_string_value()) {
    clear_has_default_value();
    return _impl_.default_value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void DashboardFilter::set_allocated_string_value(std::string* string_value) {
  if (has_default_value()) {
    clear_default_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.default_value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.DashboardFilter.string_value)
}

// .google.monitoring.dashboard.v1.DashboardFilter.FilterType filter_type = 5;
inline void DashboardFilter::clear_filter_type() {
  _impl_.filter_type_ = 0;
}
inline ::google::monitoring::dashboard::v1::DashboardFilter_FilterType DashboardFilter::_internal_filter_type() const {
  return static_cast< ::google::monitoring::dashboard::v1::DashboardFilter_FilterType >(_impl_.filter_type_);
}
inline ::google::monitoring::dashboard::v1::DashboardFilter_FilterType DashboardFilter::filter_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.DashboardFilter.filter_type)
  return _internal_filter_type();
}
inline void DashboardFilter::_internal_set_filter_type(::google::monitoring::dashboard::v1::DashboardFilter_FilterType value) {
  
  _impl_.filter_type_ = value;
}
inline void DashboardFilter::set_filter_type(::google::monitoring::dashboard::v1::DashboardFilter_FilterType value) {
  _internal_set_filter_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.DashboardFilter.filter_type)
}

inline bool DashboardFilter::has_default_value() const {
  return default_value_case() != DEFAULT_VALUE_NOT_SET;
}
inline void DashboardFilter::clear_has_default_value() {
  _impl_._oneof_case_[0] = DEFAULT_VALUE_NOT_SET;
}
inline DashboardFilter::DefaultValueCase DashboardFilter::default_value_case() const {
  return DashboardFilter::DefaultValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::DashboardFilter_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::DashboardFilter_FilterType>() {
  return ::google::monitoring::dashboard::v1::DashboardFilter_FilterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_5ffilter_2eproto
