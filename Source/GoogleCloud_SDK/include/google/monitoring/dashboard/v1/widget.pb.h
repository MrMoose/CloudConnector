// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/widget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/monitoring/dashboard/v1/alertchart.pb.h"
#include "google/monitoring/dashboard/v1/collapsible_group.pb.h"
#include "google/monitoring/dashboard/v1/logs_panel.pb.h"
#include "google/monitoring/dashboard/v1/scorecard.pb.h"
#include "google/monitoring/dashboard/v1/table.pb.h"
#include "google/monitoring/dashboard/v1/text.pb.h"
#include "google/monitoring/dashboard/v1/xychart.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto;
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class Widget;
struct WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::Widget* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Widget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

// ===================================================================

class Widget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Widget) */ {
 public:
  inline Widget() : Widget(nullptr) {}
  ~Widget() override;
  explicit PROTOBUF_CONSTEXPR Widget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Widget(const Widget& from);
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Widget& operator=(Widget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Widget& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kXyChart = 2,
    kScorecard = 3,
    kText = 4,
    kBlank = 5,
    kAlertChart = 7,
    kTimeSeriesTable = 8,
    kCollapsibleGroup = 9,
    kLogsPanel = 10,
    CONTENT_NOT_SET = 0,
  };

  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(Widget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Widget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Widget& from) {
    Widget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Widget";
  }
  protected:
  explicit Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kXyChartFieldNumber = 2,
    kScorecardFieldNumber = 3,
    kTextFieldNumber = 4,
    kBlankFieldNumber = 5,
    kAlertChartFieldNumber = 7,
    kTimeSeriesTableFieldNumber = 8,
    kCollapsibleGroupFieldNumber = 9,
    kLogsPanelFieldNumber = 10,
  };
  // string title = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .google.monitoring.dashboard.v1.XyChart xy_chart = 2;
  bool has_xy_chart() const;
  private:
  bool _internal_has_xy_chart() const;
  public:
  void clear_xy_chart();
  const ::google::monitoring::dashboard::v1::XyChart& xy_chart() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::XyChart* release_xy_chart();
  ::google::monitoring::dashboard::v1::XyChart* mutable_xy_chart();
  void set_allocated_xy_chart(::google::monitoring::dashboard::v1::XyChart* xy_chart);
  private:
  const ::google::monitoring::dashboard::v1::XyChart& _internal_xy_chart() const;
  ::google::monitoring::dashboard::v1::XyChart* _internal_mutable_xy_chart();
  public:
  void unsafe_arena_set_allocated_xy_chart(
      ::google::monitoring::dashboard::v1::XyChart* xy_chart);
  ::google::monitoring::dashboard::v1::XyChart* unsafe_arena_release_xy_chart();

  // .google.monitoring.dashboard.v1.Scorecard scorecard = 3;
  bool has_scorecard() const;
  private:
  bool _internal_has_scorecard() const;
  public:
  void clear_scorecard();
  const ::google::monitoring::dashboard::v1::Scorecard& scorecard() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::Scorecard* release_scorecard();
  ::google::monitoring::dashboard::v1::Scorecard* mutable_scorecard();
  void set_allocated_scorecard(::google::monitoring::dashboard::v1::Scorecard* scorecard);
  private:
  const ::google::monitoring::dashboard::v1::Scorecard& _internal_scorecard() const;
  ::google::monitoring::dashboard::v1::Scorecard* _internal_mutable_scorecard();
  public:
  void unsafe_arena_set_allocated_scorecard(
      ::google::monitoring::dashboard::v1::Scorecard* scorecard);
  ::google::monitoring::dashboard::v1::Scorecard* unsafe_arena_release_scorecard();

  // .google.monitoring.dashboard.v1.Text text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::google::monitoring::dashboard::v1::Text& text() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::Text* release_text();
  ::google::monitoring::dashboard::v1::Text* mutable_text();
  void set_allocated_text(::google::monitoring::dashboard::v1::Text* text);
  private:
  const ::google::monitoring::dashboard::v1::Text& _internal_text() const;
  ::google::monitoring::dashboard::v1::Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::google::monitoring::dashboard::v1::Text* text);
  ::google::monitoring::dashboard::v1::Text* unsafe_arena_release_text();

  // .google.protobuf.Empty blank = 5;
  bool has_blank() const;
  private:
  bool _internal_has_blank() const;
  public:
  void clear_blank();
  const ::PROTOBUF_NAMESPACE_ID::Empty& blank() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_blank();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_blank();
  void set_allocated_blank(::PROTOBUF_NAMESPACE_ID::Empty* blank);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_blank() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_blank();
  public:
  void unsafe_arena_set_allocated_blank(
      ::PROTOBUF_NAMESPACE_ID::Empty* blank);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_blank();

  // .google.monitoring.dashboard.v1.AlertChart alert_chart = 7;
  bool has_alert_chart() const;
  private:
  bool _internal_has_alert_chart() const;
  public:
  void clear_alert_chart();
  const ::google::monitoring::dashboard::v1::AlertChart& alert_chart() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::AlertChart* release_alert_chart();
  ::google::monitoring::dashboard::v1::AlertChart* mutable_alert_chart();
  void set_allocated_alert_chart(::google::monitoring::dashboard::v1::AlertChart* alert_chart);
  private:
  const ::google::monitoring::dashboard::v1::AlertChart& _internal_alert_chart() const;
  ::google::monitoring::dashboard::v1::AlertChart* _internal_mutable_alert_chart();
  public:
  void unsafe_arena_set_allocated_alert_chart(
      ::google::monitoring::dashboard::v1::AlertChart* alert_chart);
  ::google::monitoring::dashboard::v1::AlertChart* unsafe_arena_release_alert_chart();

  // .google.monitoring.dashboard.v1.TimeSeriesTable time_series_table = 8;
  bool has_time_series_table() const;
  private:
  bool _internal_has_time_series_table() const;
  public:
  void clear_time_series_table();
  const ::google::monitoring::dashboard::v1::TimeSeriesTable& time_series_table() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::TimeSeriesTable* release_time_series_table();
  ::google::monitoring::dashboard::v1::TimeSeriesTable* mutable_time_series_table();
  void set_allocated_time_series_table(::google::monitoring::dashboard::v1::TimeSeriesTable* time_series_table);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesTable& _internal_time_series_table() const;
  ::google::monitoring::dashboard::v1::TimeSeriesTable* _internal_mutable_time_series_table();
  public:
  void unsafe_arena_set_allocated_time_series_table(
      ::google::monitoring::dashboard::v1::TimeSeriesTable* time_series_table);
  ::google::monitoring::dashboard::v1::TimeSeriesTable* unsafe_arena_release_time_series_table();

  // .google.monitoring.dashboard.v1.CollapsibleGroup collapsible_group = 9;
  bool has_collapsible_group() const;
  private:
  bool _internal_has_collapsible_group() const;
  public:
  void clear_collapsible_group();
  const ::google::monitoring::dashboard::v1::CollapsibleGroup& collapsible_group() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::CollapsibleGroup* release_collapsible_group();
  ::google::monitoring::dashboard::v1::CollapsibleGroup* mutable_collapsible_group();
  void set_allocated_collapsible_group(::google::monitoring::dashboard::v1::CollapsibleGroup* collapsible_group);
  private:
  const ::google::monitoring::dashboard::v1::CollapsibleGroup& _internal_collapsible_group() const;
  ::google::monitoring::dashboard::v1::CollapsibleGroup* _internal_mutable_collapsible_group();
  public:
  void unsafe_arena_set_allocated_collapsible_group(
      ::google::monitoring::dashboard::v1::CollapsibleGroup* collapsible_group);
  ::google::monitoring::dashboard::v1::CollapsibleGroup* unsafe_arena_release_collapsible_group();

  // .google.monitoring.dashboard.v1.LogsPanel logs_panel = 10;
  bool has_logs_panel() const;
  private:
  bool _internal_has_logs_panel() const;
  public:
  void clear_logs_panel();
  const ::google::monitoring::dashboard::v1::LogsPanel& logs_panel() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::LogsPanel* release_logs_panel();
  ::google::monitoring::dashboard::v1::LogsPanel* mutable_logs_panel();
  void set_allocated_logs_panel(::google::monitoring::dashboard::v1::LogsPanel* logs_panel);
  private:
  const ::google::monitoring::dashboard::v1::LogsPanel& _internal_logs_panel() const;
  ::google::monitoring::dashboard::v1::LogsPanel* _internal_mutable_logs_panel();
  public:
  void unsafe_arena_set_allocated_logs_panel(
      ::google::monitoring::dashboard::v1::LogsPanel* logs_panel);
  ::google::monitoring::dashboard::v1::LogsPanel* unsafe_arena_release_logs_panel();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Widget)
 private:
  class _Internal;
  void set_has_xy_chart();
  void set_has_scorecard();
  void set_has_text();
  void set_has_blank();
  void set_has_alert_chart();
  void set_has_time_series_table();
  void set_has_collapsible_group();
  void set_has_logs_panel();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::monitoring::dashboard::v1::XyChart* xy_chart_;
      ::google::monitoring::dashboard::v1::Scorecard* scorecard_;
      ::google::monitoring::dashboard::v1::Text* text_;
      ::PROTOBUF_NAMESPACE_ID::Empty* blank_;
      ::google::monitoring::dashboard::v1::AlertChart* alert_chart_;
      ::google::monitoring::dashboard::v1::TimeSeriesTable* time_series_table_;
      ::google::monitoring::dashboard::v1::CollapsibleGroup* collapsible_group_;
      ::google::monitoring::dashboard::v1::LogsPanel* logs_panel_;
    } content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Widget

// string title = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Widget::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Widget::title() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Widget::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Widget.title)
}
inline std::string* Widget::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.title)
  return _s;
}
inline const std::string& Widget::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Widget::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Widget::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Widget::release_title() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.title)
  return _impl_.title_.Release();
}
inline void Widget::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Widget.title)
}

// .google.monitoring.dashboard.v1.XyChart xy_chart = 2;
inline bool Widget::_internal_has_xy_chart() const {
  return content_case() == kXyChart;
}
inline bool Widget::has_xy_chart() const {
  return _internal_has_xy_chart();
}
inline void Widget::set_has_xy_chart() {
  _impl_._oneof_case_[0] = kXyChart;
}
inline ::google::monitoring::dashboard::v1::XyChart* Widget::release_xy_chart() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.xy_chart)
  if (_internal_has_xy_chart()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::XyChart* temp = _impl_.content_.xy_chart_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.xy_chart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::XyChart& Widget::_internal_xy_chart() const {
  return _internal_has_xy_chart()
      ? *_impl_.content_.xy_chart_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::XyChart&>(::google::monitoring::dashboard::v1::_XyChart_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::XyChart& Widget::xy_chart() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.xy_chart)
  return _internal_xy_chart();
}
inline ::google::monitoring::dashboard::v1::XyChart* Widget::unsafe_arena_release_xy_chart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.xy_chart)
  if (_internal_has_xy_chart()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::XyChart* temp = _impl_.content_.xy_chart_;
    _impl_.content_.xy_chart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_xy_chart(::google::monitoring::dashboard::v1::XyChart* xy_chart) {
  clear_content();
  if (xy_chart) {
    set_has_xy_chart();
    _impl_.content_.xy_chart_ = xy_chart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.xy_chart)
}
inline ::google::monitoring::dashboard::v1::XyChart* Widget::_internal_mutable_xy_chart() {
  if (!_internal_has_xy_chart()) {
    clear_content();
    set_has_xy_chart();
    _impl_.content_.xy_chart_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::XyChart >(GetArenaForAllocation());
  }
  return _impl_.content_.xy_chart_;
}
inline ::google::monitoring::dashboard::v1::XyChart* Widget::mutable_xy_chart() {
  ::google::monitoring::dashboard::v1::XyChart* _msg = _internal_mutable_xy_chart();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.xy_chart)
  return _msg;
}

// .google.monitoring.dashboard.v1.Scorecard scorecard = 3;
inline bool Widget::_internal_has_scorecard() const {
  return content_case() == kScorecard;
}
inline bool Widget::has_scorecard() const {
  return _internal_has_scorecard();
}
inline void Widget::set_has_scorecard() {
  _impl_._oneof_case_[0] = kScorecard;
}
inline ::google::monitoring::dashboard::v1::Scorecard* Widget::release_scorecard() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.scorecard)
  if (_internal_has_scorecard()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::Scorecard* temp = _impl_.content_.scorecard_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.scorecard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::Scorecard& Widget::_internal_scorecard() const {
  return _internal_has_scorecard()
      ? *_impl_.content_.scorecard_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::Scorecard&>(::google::monitoring::dashboard::v1::_Scorecard_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Scorecard& Widget::scorecard() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.scorecard)
  return _internal_scorecard();
}
inline ::google::monitoring::dashboard::v1::Scorecard* Widget::unsafe_arena_release_scorecard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.scorecard)
  if (_internal_has_scorecard()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::Scorecard* temp = _impl_.content_.scorecard_;
    _impl_.content_.scorecard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_scorecard(::google::monitoring::dashboard::v1::Scorecard* scorecard) {
  clear_content();
  if (scorecard) {
    set_has_scorecard();
    _impl_.content_.scorecard_ = scorecard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.scorecard)
}
inline ::google::monitoring::dashboard::v1::Scorecard* Widget::_internal_mutable_scorecard() {
  if (!_internal_has_scorecard()) {
    clear_content();
    set_has_scorecard();
    _impl_.content_.scorecard_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::Scorecard >(GetArenaForAllocation());
  }
  return _impl_.content_.scorecard_;
}
inline ::google::monitoring::dashboard::v1::Scorecard* Widget::mutable_scorecard() {
  ::google::monitoring::dashboard::v1::Scorecard* _msg = _internal_mutable_scorecard();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.scorecard)
  return _msg;
}

// .google.monitoring.dashboard.v1.Text text = 4;
inline bool Widget::_internal_has_text() const {
  return content_case() == kText;
}
inline bool Widget::has_text() const {
  return _internal_has_text();
}
inline void Widget::set_has_text() {
  _impl_._oneof_case_[0] = kText;
}
inline ::google::monitoring::dashboard::v1::Text* Widget::release_text() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.text)
  if (_internal_has_text()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::Text* temp = _impl_.content_.text_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::Text& Widget::_internal_text() const {
  return _internal_has_text()
      ? *_impl_.content_.text_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::Text&>(::google::monitoring::dashboard::v1::_Text_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Text& Widget::text() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.text)
  return _internal_text();
}
inline ::google::monitoring::dashboard::v1::Text* Widget::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.text)
  if (_internal_has_text()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::Text* temp = _impl_.content_.text_;
    _impl_.content_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_text(::google::monitoring::dashboard::v1::Text* text) {
  clear_content();
  if (text) {
    set_has_text();
    _impl_.content_.text_ = text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.text)
}
inline ::google::monitoring::dashboard::v1::Text* Widget::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    _impl_.content_.text_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::Text >(GetArenaForAllocation());
  }
  return _impl_.content_.text_;
}
inline ::google::monitoring::dashboard::v1::Text* Widget::mutable_text() {
  ::google::monitoring::dashboard::v1::Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.text)
  return _msg;
}

// .google.protobuf.Empty blank = 5;
inline bool Widget::_internal_has_blank() const {
  return content_case() == kBlank;
}
inline bool Widget::has_blank() const {
  return _internal_has_blank();
}
inline void Widget::set_has_blank() {
  _impl_._oneof_case_[0] = kBlank;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Widget::release_blank() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.blank)
  if (_internal_has_blank()) {
    clear_has_content();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.content_.blank_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.blank_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Widget::_internal_blank() const {
  return _internal_has_blank()
      ? *_impl_.content_.blank_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Empty&>(::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Widget::blank() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.blank)
  return _internal_blank();
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Widget::unsafe_arena_release_blank() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.blank)
  if (_internal_has_blank()) {
    clear_has_content();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.content_.blank_;
    _impl_.content_.blank_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_blank(::PROTOBUF_NAMESPACE_ID::Empty* blank) {
  clear_content();
  if (blank) {
    set_has_blank();
    _impl_.content_.blank_ = blank;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.blank)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Widget::_internal_mutable_blank() {
  if (!_internal_has_blank()) {
    clear_content();
    set_has_blank();
    _impl_.content_.blank_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Empty >(GetArenaForAllocation());
  }
  return _impl_.content_.blank_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Widget::mutable_blank() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_blank();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.blank)
  return _msg;
}

// .google.monitoring.dashboard.v1.AlertChart alert_chart = 7;
inline bool Widget::_internal_has_alert_chart() const {
  return content_case() == kAlertChart;
}
inline bool Widget::has_alert_chart() const {
  return _internal_has_alert_chart();
}
inline void Widget::set_has_alert_chart() {
  _impl_._oneof_case_[0] = kAlertChart;
}
inline ::google::monitoring::dashboard::v1::AlertChart* Widget::release_alert_chart() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.alert_chart)
  if (_internal_has_alert_chart()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::AlertChart* temp = _impl_.content_.alert_chart_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.alert_chart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::AlertChart& Widget::_internal_alert_chart() const {
  return _internal_has_alert_chart()
      ? *_impl_.content_.alert_chart_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::AlertChart&>(::google::monitoring::dashboard::v1::_AlertChart_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::AlertChart& Widget::alert_chart() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.alert_chart)
  return _internal_alert_chart();
}
inline ::google::monitoring::dashboard::v1::AlertChart* Widget::unsafe_arena_release_alert_chart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.alert_chart)
  if (_internal_has_alert_chart()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::AlertChart* temp = _impl_.content_.alert_chart_;
    _impl_.content_.alert_chart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_alert_chart(::google::monitoring::dashboard::v1::AlertChart* alert_chart) {
  clear_content();
  if (alert_chart) {
    set_has_alert_chart();
    _impl_.content_.alert_chart_ = alert_chart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.alert_chart)
}
inline ::google::monitoring::dashboard::v1::AlertChart* Widget::_internal_mutable_alert_chart() {
  if (!_internal_has_alert_chart()) {
    clear_content();
    set_has_alert_chart();
    _impl_.content_.alert_chart_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::AlertChart >(GetArenaForAllocation());
  }
  return _impl_.content_.alert_chart_;
}
inline ::google::monitoring::dashboard::v1::AlertChart* Widget::mutable_alert_chart() {
  ::google::monitoring::dashboard::v1::AlertChart* _msg = _internal_mutable_alert_chart();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.alert_chart)
  return _msg;
}

// .google.monitoring.dashboard.v1.TimeSeriesTable time_series_table = 8;
inline bool Widget::_internal_has_time_series_table() const {
  return content_case() == kTimeSeriesTable;
}
inline bool Widget::has_time_series_table() const {
  return _internal_has_time_series_table();
}
inline void Widget::set_has_time_series_table() {
  _impl_._oneof_case_[0] = kTimeSeriesTable;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesTable* Widget::release_time_series_table() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.time_series_table)
  if (_internal_has_time_series_table()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::TimeSeriesTable* temp = _impl_.content_.time_series_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.time_series_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesTable& Widget::_internal_time_series_table() const {
  return _internal_has_time_series_table()
      ? *_impl_.content_.time_series_table_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::TimeSeriesTable&>(::google::monitoring::dashboard::v1::_TimeSeriesTable_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesTable& Widget::time_series_table() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.time_series_table)
  return _internal_time_series_table();
}
inline ::google::monitoring::dashboard::v1::TimeSeriesTable* Widget::unsafe_arena_release_time_series_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.time_series_table)
  if (_internal_has_time_series_table()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::TimeSeriesTable* temp = _impl_.content_.time_series_table_;
    _impl_.content_.time_series_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_time_series_table(::google::monitoring::dashboard::v1::TimeSeriesTable* time_series_table) {
  clear_content();
  if (time_series_table) {
    set_has_time_series_table();
    _impl_.content_.time_series_table_ = time_series_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.time_series_table)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesTable* Widget::_internal_mutable_time_series_table() {
  if (!_internal_has_time_series_table()) {
    clear_content();
    set_has_time_series_table();
    _impl_.content_.time_series_table_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::TimeSeriesTable >(GetArenaForAllocation());
  }
  return _impl_.content_.time_series_table_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesTable* Widget::mutable_time_series_table() {
  ::google::monitoring::dashboard::v1::TimeSeriesTable* _msg = _internal_mutable_time_series_table();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.time_series_table)
  return _msg;
}

// .google.monitoring.dashboard.v1.CollapsibleGroup collapsible_group = 9;
inline bool Widget::_internal_has_collapsible_group() const {
  return content_case() == kCollapsibleGroup;
}
inline bool Widget::has_collapsible_group() const {
  return _internal_has_collapsible_group();
}
inline void Widget::set_has_collapsible_group() {
  _impl_._oneof_case_[0] = kCollapsibleGroup;
}
inline ::google::monitoring::dashboard::v1::CollapsibleGroup* Widget::release_collapsible_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.collapsible_group)
  if (_internal_has_collapsible_group()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::CollapsibleGroup* temp = _impl_.content_.collapsible_group_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.collapsible_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::CollapsibleGroup& Widget::_internal_collapsible_group() const {
  return _internal_has_collapsible_group()
      ? *_impl_.content_.collapsible_group_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::CollapsibleGroup&>(::google::monitoring::dashboard::v1::_CollapsibleGroup_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::CollapsibleGroup& Widget::collapsible_group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.collapsible_group)
  return _internal_collapsible_group();
}
inline ::google::monitoring::dashboard::v1::CollapsibleGroup* Widget::unsafe_arena_release_collapsible_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.collapsible_group)
  if (_internal_has_collapsible_group()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::CollapsibleGroup* temp = _impl_.content_.collapsible_group_;
    _impl_.content_.collapsible_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_collapsible_group(::google::monitoring::dashboard::v1::CollapsibleGroup* collapsible_group) {
  clear_content();
  if (collapsible_group) {
    set_has_collapsible_group();
    _impl_.content_.collapsible_group_ = collapsible_group;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.collapsible_group)
}
inline ::google::monitoring::dashboard::v1::CollapsibleGroup* Widget::_internal_mutable_collapsible_group() {
  if (!_internal_has_collapsible_group()) {
    clear_content();
    set_has_collapsible_group();
    _impl_.content_.collapsible_group_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::CollapsibleGroup >(GetArenaForAllocation());
  }
  return _impl_.content_.collapsible_group_;
}
inline ::google::monitoring::dashboard::v1::CollapsibleGroup* Widget::mutable_collapsible_group() {
  ::google::monitoring::dashboard::v1::CollapsibleGroup* _msg = _internal_mutable_collapsible_group();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.collapsible_group)
  return _msg;
}

// .google.monitoring.dashboard.v1.LogsPanel logs_panel = 10;
inline bool Widget::_internal_has_logs_panel() const {
  return content_case() == kLogsPanel;
}
inline bool Widget::has_logs_panel() const {
  return _internal_has_logs_panel();
}
inline void Widget::set_has_logs_panel() {
  _impl_._oneof_case_[0] = kLogsPanel;
}
inline ::google::monitoring::dashboard::v1::LogsPanel* Widget::release_logs_panel() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Widget.logs_panel)
  if (_internal_has_logs_panel()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::LogsPanel* temp = _impl_.content_.logs_panel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.logs_panel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::LogsPanel& Widget::_internal_logs_panel() const {
  return _internal_has_logs_panel()
      ? *_impl_.content_.logs_panel_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::LogsPanel&>(::google::monitoring::dashboard::v1::_LogsPanel_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::LogsPanel& Widget::logs_panel() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Widget.logs_panel)
  return _internal_logs_panel();
}
inline ::google::monitoring::dashboard::v1::LogsPanel* Widget::unsafe_arena_release_logs_panel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Widget.logs_panel)
  if (_internal_has_logs_panel()) {
    clear_has_content();
    ::google::monitoring::dashboard::v1::LogsPanel* temp = _impl_.content_.logs_panel_;
    _impl_.content_.logs_panel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Widget::unsafe_arena_set_allocated_logs_panel(::google::monitoring::dashboard::v1::LogsPanel* logs_panel) {
  clear_content();
  if (logs_panel) {
    set_has_logs_panel();
    _impl_.content_.logs_panel_ = logs_panel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Widget.logs_panel)
}
inline ::google::monitoring::dashboard::v1::LogsPanel* Widget::_internal_mutable_logs_panel() {
  if (!_internal_has_logs_panel()) {
    clear_content();
    set_has_logs_panel();
    _impl_.content_.logs_panel_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::LogsPanel >(GetArenaForAllocation());
  }
  return _impl_.content_.logs_panel_;
}
inline ::google::monitoring::dashboard::v1::LogsPanel* Widget::mutable_logs_panel() {
  ::google::monitoring::dashboard::v1::LogsPanel* _msg = _internal_mutable_logs_panel();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Widget.logs_panel)
  return _msg;
}

inline bool Widget::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Widget::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline Widget::ContentCase Widget::content_case() const {
  return Widget::ContentCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fwidget_2eproto
