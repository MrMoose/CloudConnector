// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto;
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class Aggregation;
struct AggregationDefaultTypeInternal;
extern AggregationDefaultTypeInternal _Aggregation_default_instance_;
class PickTimeSeriesFilter;
struct PickTimeSeriesFilterDefaultTypeInternal;
extern PickTimeSeriesFilterDefaultTypeInternal _PickTimeSeriesFilter_default_instance_;
class StatisticalTimeSeriesFilter;
struct StatisticalTimeSeriesFilterDefaultTypeInternal;
extern StatisticalTimeSeriesFilterDefaultTypeInternal _StatisticalTimeSeriesFilter_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::Aggregation* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Aggregation>(Arena*);
template<> ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::PickTimeSeriesFilter>(Arena*);
template<> ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

enum Aggregation_Aligner : int {
  Aggregation_Aligner_ALIGN_NONE = 0,
  Aggregation_Aligner_ALIGN_DELTA = 1,
  Aggregation_Aligner_ALIGN_RATE = 2,
  Aggregation_Aligner_ALIGN_INTERPOLATE = 3,
  Aggregation_Aligner_ALIGN_NEXT_OLDER = 4,
  Aggregation_Aligner_ALIGN_MIN = 10,
  Aggregation_Aligner_ALIGN_MAX = 11,
  Aggregation_Aligner_ALIGN_MEAN = 12,
  Aggregation_Aligner_ALIGN_COUNT = 13,
  Aggregation_Aligner_ALIGN_SUM = 14,
  Aggregation_Aligner_ALIGN_STDDEV = 15,
  Aggregation_Aligner_ALIGN_COUNT_TRUE = 16,
  Aggregation_Aligner_ALIGN_COUNT_FALSE = 24,
  Aggregation_Aligner_ALIGN_FRACTION_TRUE = 17,
  Aggregation_Aligner_ALIGN_PERCENTILE_99 = 18,
  Aggregation_Aligner_ALIGN_PERCENTILE_95 = 19,
  Aggregation_Aligner_ALIGN_PERCENTILE_50 = 20,
  Aggregation_Aligner_ALIGN_PERCENTILE_05 = 21,
  Aggregation_Aligner_ALIGN_PERCENT_CHANGE = 23,
  Aggregation_Aligner_Aggregation_Aligner_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Aggregation_Aligner_Aggregation_Aligner_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Aggregation_Aligner_IsValid(int value);
constexpr Aggregation_Aligner Aggregation_Aligner_Aligner_MIN = Aggregation_Aligner_ALIGN_NONE;
constexpr Aggregation_Aligner Aggregation_Aligner_Aligner_MAX = Aggregation_Aligner_ALIGN_COUNT_FALSE;
constexpr int Aggregation_Aligner_Aligner_ARRAYSIZE = Aggregation_Aligner_Aligner_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_Aligner_descriptor();
template<typename T>
inline const std::string& Aggregation_Aligner_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aggregation_Aligner>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aggregation_Aligner_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aggregation_Aligner_descriptor(), enum_t_value);
}
inline bool Aggregation_Aligner_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aggregation_Aligner* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aggregation_Aligner>(
    Aggregation_Aligner_descriptor(), name, value);
}
enum Aggregation_Reducer : int {
  Aggregation_Reducer_REDUCE_NONE = 0,
  Aggregation_Reducer_REDUCE_MEAN = 1,
  Aggregation_Reducer_REDUCE_MIN = 2,
  Aggregation_Reducer_REDUCE_MAX = 3,
  Aggregation_Reducer_REDUCE_SUM = 4,
  Aggregation_Reducer_REDUCE_STDDEV = 5,
  Aggregation_Reducer_REDUCE_COUNT = 6,
  Aggregation_Reducer_REDUCE_COUNT_TRUE = 7,
  Aggregation_Reducer_REDUCE_COUNT_FALSE = 15,
  Aggregation_Reducer_REDUCE_FRACTION_TRUE = 8,
  Aggregation_Reducer_REDUCE_PERCENTILE_99 = 9,
  Aggregation_Reducer_REDUCE_PERCENTILE_95 = 10,
  Aggregation_Reducer_REDUCE_PERCENTILE_50 = 11,
  Aggregation_Reducer_REDUCE_PERCENTILE_05 = 12,
  Aggregation_Reducer_Aggregation_Reducer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Aggregation_Reducer_Aggregation_Reducer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Aggregation_Reducer_IsValid(int value);
constexpr Aggregation_Reducer Aggregation_Reducer_Reducer_MIN = Aggregation_Reducer_REDUCE_NONE;
constexpr Aggregation_Reducer Aggregation_Reducer_Reducer_MAX = Aggregation_Reducer_REDUCE_COUNT_FALSE;
constexpr int Aggregation_Reducer_Reducer_ARRAYSIZE = Aggregation_Reducer_Reducer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_Reducer_descriptor();
template<typename T>
inline const std::string& Aggregation_Reducer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aggregation_Reducer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aggregation_Reducer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aggregation_Reducer_descriptor(), enum_t_value);
}
inline bool Aggregation_Reducer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aggregation_Reducer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aggregation_Reducer>(
    Aggregation_Reducer_descriptor(), name, value);
}
enum PickTimeSeriesFilter_Method : int {
  PickTimeSeriesFilter_Method_METHOD_UNSPECIFIED = 0,
  PickTimeSeriesFilter_Method_METHOD_MEAN = 1,
  PickTimeSeriesFilter_Method_METHOD_MAX = 2,
  PickTimeSeriesFilter_Method_METHOD_MIN = 3,
  PickTimeSeriesFilter_Method_METHOD_SUM = 4,
  PickTimeSeriesFilter_Method_METHOD_LATEST = 5,
  PickTimeSeriesFilter_Method_PickTimeSeriesFilter_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PickTimeSeriesFilter_Method_PickTimeSeriesFilter_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PickTimeSeriesFilter_Method_IsValid(int value);
constexpr PickTimeSeriesFilter_Method PickTimeSeriesFilter_Method_Method_MIN = PickTimeSeriesFilter_Method_METHOD_UNSPECIFIED;
constexpr PickTimeSeriesFilter_Method PickTimeSeriesFilter_Method_Method_MAX = PickTimeSeriesFilter_Method_METHOD_LATEST;
constexpr int PickTimeSeriesFilter_Method_Method_ARRAYSIZE = PickTimeSeriesFilter_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PickTimeSeriesFilter_Method_descriptor();
template<typename T>
inline const std::string& PickTimeSeriesFilter_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PickTimeSeriesFilter_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PickTimeSeriesFilter_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PickTimeSeriesFilter_Method_descriptor(), enum_t_value);
}
inline bool PickTimeSeriesFilter_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PickTimeSeriesFilter_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PickTimeSeriesFilter_Method>(
    PickTimeSeriesFilter_Method_descriptor(), name, value);
}
enum PickTimeSeriesFilter_Direction : int {
  PickTimeSeriesFilter_Direction_DIRECTION_UNSPECIFIED = 0,
  PickTimeSeriesFilter_Direction_TOP = 1,
  PickTimeSeriesFilter_Direction_BOTTOM = 2,
  PickTimeSeriesFilter_Direction_PickTimeSeriesFilter_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PickTimeSeriesFilter_Direction_PickTimeSeriesFilter_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PickTimeSeriesFilter_Direction_IsValid(int value);
constexpr PickTimeSeriesFilter_Direction PickTimeSeriesFilter_Direction_Direction_MIN = PickTimeSeriesFilter_Direction_DIRECTION_UNSPECIFIED;
constexpr PickTimeSeriesFilter_Direction PickTimeSeriesFilter_Direction_Direction_MAX = PickTimeSeriesFilter_Direction_BOTTOM;
constexpr int PickTimeSeriesFilter_Direction_Direction_ARRAYSIZE = PickTimeSeriesFilter_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PickTimeSeriesFilter_Direction_descriptor();
template<typename T>
inline const std::string& PickTimeSeriesFilter_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PickTimeSeriesFilter_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PickTimeSeriesFilter_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PickTimeSeriesFilter_Direction_descriptor(), enum_t_value);
}
inline bool PickTimeSeriesFilter_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PickTimeSeriesFilter_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PickTimeSeriesFilter_Direction>(
    PickTimeSeriesFilter_Direction_descriptor(), name, value);
}
enum StatisticalTimeSeriesFilter_Method : int {
  StatisticalTimeSeriesFilter_Method_METHOD_UNSPECIFIED = 0,
  StatisticalTimeSeriesFilter_Method_METHOD_CLUSTER_OUTLIER = 1,
  StatisticalTimeSeriesFilter_Method_StatisticalTimeSeriesFilter_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatisticalTimeSeriesFilter_Method_StatisticalTimeSeriesFilter_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatisticalTimeSeriesFilter_Method_IsValid(int value);
constexpr StatisticalTimeSeriesFilter_Method StatisticalTimeSeriesFilter_Method_Method_MIN = StatisticalTimeSeriesFilter_Method_METHOD_UNSPECIFIED;
constexpr StatisticalTimeSeriesFilter_Method StatisticalTimeSeriesFilter_Method_Method_MAX = StatisticalTimeSeriesFilter_Method_METHOD_CLUSTER_OUTLIER;
constexpr int StatisticalTimeSeriesFilter_Method_Method_ARRAYSIZE = StatisticalTimeSeriesFilter_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatisticalTimeSeriesFilter_Method_descriptor();
template<typename T>
inline const std::string& StatisticalTimeSeriesFilter_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatisticalTimeSeriesFilter_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatisticalTimeSeriesFilter_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatisticalTimeSeriesFilter_Method_descriptor(), enum_t_value);
}
inline bool StatisticalTimeSeriesFilter_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatisticalTimeSeriesFilter_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatisticalTimeSeriesFilter_Method>(
    StatisticalTimeSeriesFilter_Method_descriptor(), name, value);
}
// ===================================================================

class Aggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Aggregation) */ {
 public:
  inline Aggregation() : Aggregation(nullptr) {}
  ~Aggregation() override;
  explicit PROTOBUF_CONSTEXPR Aggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aggregation(const Aggregation& from);
  Aggregation(Aggregation&& from) noexcept
    : Aggregation() {
    *this = ::std::move(from);
  }

  inline Aggregation& operator=(const Aggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aggregation& operator=(Aggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aggregation* internal_default_instance() {
    return reinterpret_cast<const Aggregation*>(
               &_Aggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Aggregation& a, Aggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(Aggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aggregation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Aggregation& from) {
    Aggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Aggregation";
  }
  protected:
  explicit Aggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Aggregation_Aligner Aligner;
  static constexpr Aligner ALIGN_NONE =
    Aggregation_Aligner_ALIGN_NONE;
  static constexpr Aligner ALIGN_DELTA =
    Aggregation_Aligner_ALIGN_DELTA;
  static constexpr Aligner ALIGN_RATE =
    Aggregation_Aligner_ALIGN_RATE;
  static constexpr Aligner ALIGN_INTERPOLATE =
    Aggregation_Aligner_ALIGN_INTERPOLATE;
  static constexpr Aligner ALIGN_NEXT_OLDER =
    Aggregation_Aligner_ALIGN_NEXT_OLDER;
  static constexpr Aligner ALIGN_MIN =
    Aggregation_Aligner_ALIGN_MIN;
  static constexpr Aligner ALIGN_MAX =
    Aggregation_Aligner_ALIGN_MAX;
  static constexpr Aligner ALIGN_MEAN =
    Aggregation_Aligner_ALIGN_MEAN;
  static constexpr Aligner ALIGN_COUNT =
    Aggregation_Aligner_ALIGN_COUNT;
  static constexpr Aligner ALIGN_SUM =
    Aggregation_Aligner_ALIGN_SUM;
  static constexpr Aligner ALIGN_STDDEV =
    Aggregation_Aligner_ALIGN_STDDEV;
  static constexpr Aligner ALIGN_COUNT_TRUE =
    Aggregation_Aligner_ALIGN_COUNT_TRUE;
  static constexpr Aligner ALIGN_COUNT_FALSE =
    Aggregation_Aligner_ALIGN_COUNT_FALSE;
  static constexpr Aligner ALIGN_FRACTION_TRUE =
    Aggregation_Aligner_ALIGN_FRACTION_TRUE;
  static constexpr Aligner ALIGN_PERCENTILE_99 =
    Aggregation_Aligner_ALIGN_PERCENTILE_99;
  static constexpr Aligner ALIGN_PERCENTILE_95 =
    Aggregation_Aligner_ALIGN_PERCENTILE_95;
  static constexpr Aligner ALIGN_PERCENTILE_50 =
    Aggregation_Aligner_ALIGN_PERCENTILE_50;
  static constexpr Aligner ALIGN_PERCENTILE_05 =
    Aggregation_Aligner_ALIGN_PERCENTILE_05;
  static constexpr Aligner ALIGN_PERCENT_CHANGE =
    Aggregation_Aligner_ALIGN_PERCENT_CHANGE;
  static inline bool Aligner_IsValid(int value) {
    return Aggregation_Aligner_IsValid(value);
  }
  static constexpr Aligner Aligner_MIN =
    Aggregation_Aligner_Aligner_MIN;
  static constexpr Aligner Aligner_MAX =
    Aggregation_Aligner_Aligner_MAX;
  static constexpr int Aligner_ARRAYSIZE =
    Aggregation_Aligner_Aligner_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Aligner_descriptor() {
    return Aggregation_Aligner_descriptor();
  }
  template<typename T>
  static inline const std::string& Aligner_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Aligner>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Aligner_Name.");
    return Aggregation_Aligner_Name(enum_t_value);
  }
  static inline bool Aligner_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Aligner* value) {
    return Aggregation_Aligner_Parse(name, value);
  }

  typedef Aggregation_Reducer Reducer;
  static constexpr Reducer REDUCE_NONE =
    Aggregation_Reducer_REDUCE_NONE;
  static constexpr Reducer REDUCE_MEAN =
    Aggregation_Reducer_REDUCE_MEAN;
  static constexpr Reducer REDUCE_MIN =
    Aggregation_Reducer_REDUCE_MIN;
  static constexpr Reducer REDUCE_MAX =
    Aggregation_Reducer_REDUCE_MAX;
  static constexpr Reducer REDUCE_SUM =
    Aggregation_Reducer_REDUCE_SUM;
  static constexpr Reducer REDUCE_STDDEV =
    Aggregation_Reducer_REDUCE_STDDEV;
  static constexpr Reducer REDUCE_COUNT =
    Aggregation_Reducer_REDUCE_COUNT;
  static constexpr Reducer REDUCE_COUNT_TRUE =
    Aggregation_Reducer_REDUCE_COUNT_TRUE;
  static constexpr Reducer REDUCE_COUNT_FALSE =
    Aggregation_Reducer_REDUCE_COUNT_FALSE;
  static constexpr Reducer REDUCE_FRACTION_TRUE =
    Aggregation_Reducer_REDUCE_FRACTION_TRUE;
  static constexpr Reducer REDUCE_PERCENTILE_99 =
    Aggregation_Reducer_REDUCE_PERCENTILE_99;
  static constexpr Reducer REDUCE_PERCENTILE_95 =
    Aggregation_Reducer_REDUCE_PERCENTILE_95;
  static constexpr Reducer REDUCE_PERCENTILE_50 =
    Aggregation_Reducer_REDUCE_PERCENTILE_50;
  static constexpr Reducer REDUCE_PERCENTILE_05 =
    Aggregation_Reducer_REDUCE_PERCENTILE_05;
  static inline bool Reducer_IsValid(int value) {
    return Aggregation_Reducer_IsValid(value);
  }
  static constexpr Reducer Reducer_MIN =
    Aggregation_Reducer_Reducer_MIN;
  static constexpr Reducer Reducer_MAX =
    Aggregation_Reducer_Reducer_MAX;
  static constexpr int Reducer_ARRAYSIZE =
    Aggregation_Reducer_Reducer_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reducer_descriptor() {
    return Aggregation_Reducer_descriptor();
  }
  template<typename T>
  static inline const std::string& Reducer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reducer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reducer_Name.");
    return Aggregation_Reducer_Name(enum_t_value);
  }
  static inline bool Reducer_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reducer* value) {
    return Aggregation_Reducer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupByFieldsFieldNumber = 5,
    kAlignmentPeriodFieldNumber = 1,
    kPerSeriesAlignerFieldNumber = 2,
    kCrossSeriesReducerFieldNumber = 4,
  };
  // repeated string group_by_fields = 5;
  int group_by_fields_size() const;
  private:
  int _internal_group_by_fields_size() const;
  public:
  void clear_group_by_fields();
  const std::string& group_by_fields(int index) const;
  std::string* mutable_group_by_fields(int index);
  void set_group_by_fields(int index, const std::string& value);
  void set_group_by_fields(int index, std::string&& value);
  void set_group_by_fields(int index, const char* value);
  void set_group_by_fields(int index, const char* value, size_t size);
  std::string* add_group_by_fields();
  void add_group_by_fields(const std::string& value);
  void add_group_by_fields(std::string&& value);
  void add_group_by_fields(const char* value);
  void add_group_by_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by_fields();
  private:
  const std::string& _internal_group_by_fields(int index) const;
  std::string* _internal_add_group_by_fields();
  public:

  // .google.protobuf.Duration alignment_period = 1;
  bool has_alignment_period() const;
  private:
  bool _internal_has_alignment_period() const;
  public:
  void clear_alignment_period();
  const ::PROTOBUF_NAMESPACE_ID::Duration& alignment_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_alignment_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_alignment_period();
  void set_allocated_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* alignment_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_alignment_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_alignment_period();
  public:
  void unsafe_arena_set_allocated_alignment_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* alignment_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_alignment_period();

  // .google.monitoring.dashboard.v1.Aggregation.Aligner per_series_aligner = 2;
  void clear_per_series_aligner();
  ::google::monitoring::dashboard::v1::Aggregation_Aligner per_series_aligner() const;
  void set_per_series_aligner(::google::monitoring::dashboard::v1::Aggregation_Aligner value);
  private:
  ::google::monitoring::dashboard::v1::Aggregation_Aligner _internal_per_series_aligner() const;
  void _internal_set_per_series_aligner(::google::monitoring::dashboard::v1::Aggregation_Aligner value);
  public:

  // .google.monitoring.dashboard.v1.Aggregation.Reducer cross_series_reducer = 4;
  void clear_cross_series_reducer();
  ::google::monitoring::dashboard::v1::Aggregation_Reducer cross_series_reducer() const;
  void set_cross_series_reducer(::google::monitoring::dashboard::v1::Aggregation_Reducer value);
  private:
  ::google::monitoring::dashboard::v1::Aggregation_Reducer _internal_cross_series_reducer() const;
  void _internal_set_cross_series_reducer(::google::monitoring::dashboard::v1::Aggregation_Reducer value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Aggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_fields_;
    ::PROTOBUF_NAMESPACE_ID::Duration* alignment_period_;
    int per_series_aligner_;
    int cross_series_reducer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PickTimeSeriesFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.PickTimeSeriesFilter) */ {
 public:
  inline PickTimeSeriesFilter() : PickTimeSeriesFilter(nullptr) {}
  ~PickTimeSeriesFilter() override;
  explicit PROTOBUF_CONSTEXPR PickTimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PickTimeSeriesFilter(const PickTimeSeriesFilter& from);
  PickTimeSeriesFilter(PickTimeSeriesFilter&& from) noexcept
    : PickTimeSeriesFilter() {
    *this = ::std::move(from);
  }

  inline PickTimeSeriesFilter& operator=(const PickTimeSeriesFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PickTimeSeriesFilter& operator=(PickTimeSeriesFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PickTimeSeriesFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PickTimeSeriesFilter* internal_default_instance() {
    return reinterpret_cast<const PickTimeSeriesFilter*>(
               &_PickTimeSeriesFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PickTimeSeriesFilter& a, PickTimeSeriesFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(PickTimeSeriesFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PickTimeSeriesFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PickTimeSeriesFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PickTimeSeriesFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PickTimeSeriesFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PickTimeSeriesFilter& from) {
    PickTimeSeriesFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PickTimeSeriesFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.PickTimeSeriesFilter";
  }
  protected:
  explicit PickTimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PickTimeSeriesFilter_Method Method;
  static constexpr Method METHOD_UNSPECIFIED =
    PickTimeSeriesFilter_Method_METHOD_UNSPECIFIED;
  static constexpr Method METHOD_MEAN =
    PickTimeSeriesFilter_Method_METHOD_MEAN;
  static constexpr Method METHOD_MAX =
    PickTimeSeriesFilter_Method_METHOD_MAX;
  static constexpr Method METHOD_MIN =
    PickTimeSeriesFilter_Method_METHOD_MIN;
  static constexpr Method METHOD_SUM =
    PickTimeSeriesFilter_Method_METHOD_SUM;
  static constexpr Method METHOD_LATEST =
    PickTimeSeriesFilter_Method_METHOD_LATEST;
  static inline bool Method_IsValid(int value) {
    return PickTimeSeriesFilter_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    PickTimeSeriesFilter_Method_Method_MIN;
  static constexpr Method Method_MAX =
    PickTimeSeriesFilter_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    PickTimeSeriesFilter_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return PickTimeSeriesFilter_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return PickTimeSeriesFilter_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Method* value) {
    return PickTimeSeriesFilter_Method_Parse(name, value);
  }

  typedef PickTimeSeriesFilter_Direction Direction;
  static constexpr Direction DIRECTION_UNSPECIFIED =
    PickTimeSeriesFilter_Direction_DIRECTION_UNSPECIFIED;
  static constexpr Direction TOP =
    PickTimeSeriesFilter_Direction_TOP;
  static constexpr Direction BOTTOM =
    PickTimeSeriesFilter_Direction_BOTTOM;
  static inline bool Direction_IsValid(int value) {
    return PickTimeSeriesFilter_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    PickTimeSeriesFilter_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    PickTimeSeriesFilter_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    PickTimeSeriesFilter_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return PickTimeSeriesFilter_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return PickTimeSeriesFilter_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return PickTimeSeriesFilter_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRankingMethodFieldNumber = 1,
    kNumTimeSeriesFieldNumber = 2,
    kDirectionFieldNumber = 3,
  };
  // .google.monitoring.dashboard.v1.PickTimeSeriesFilter.Method ranking_method = 1;
  void clear_ranking_method();
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method ranking_method() const;
  void set_ranking_method(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method value);
  private:
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method _internal_ranking_method() const;
  void _internal_set_ranking_method(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method value);
  public:

  // int32 num_time_series = 2;
  void clear_num_time_series();
  int32_t num_time_series() const;
  void set_num_time_series(int32_t value);
  private:
  int32_t _internal_num_time_series() const;
  void _internal_set_num_time_series(int32_t value);
  public:

  // .google.monitoring.dashboard.v1.PickTimeSeriesFilter.Direction direction = 3;
  void clear_direction();
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction direction() const;
  void set_direction(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction value);
  private:
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction _internal_direction() const;
  void _internal_set_direction(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.PickTimeSeriesFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int ranking_method_;
    int32_t num_time_series_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class StatisticalTimeSeriesFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter) */ {
 public:
  inline StatisticalTimeSeriesFilter() : StatisticalTimeSeriesFilter(nullptr) {}
  ~StatisticalTimeSeriesFilter() override;
  explicit PROTOBUF_CONSTEXPR StatisticalTimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticalTimeSeriesFilter(const StatisticalTimeSeriesFilter& from);
  StatisticalTimeSeriesFilter(StatisticalTimeSeriesFilter&& from) noexcept
    : StatisticalTimeSeriesFilter() {
    *this = ::std::move(from);
  }

  inline StatisticalTimeSeriesFilter& operator=(const StatisticalTimeSeriesFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticalTimeSeriesFilter& operator=(StatisticalTimeSeriesFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticalTimeSeriesFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticalTimeSeriesFilter* internal_default_instance() {
    return reinterpret_cast<const StatisticalTimeSeriesFilter*>(
               &_StatisticalTimeSeriesFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatisticalTimeSeriesFilter& a, StatisticalTimeSeriesFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticalTimeSeriesFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticalTimeSeriesFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticalTimeSeriesFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticalTimeSeriesFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticalTimeSeriesFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatisticalTimeSeriesFilter& from) {
    StatisticalTimeSeriesFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalTimeSeriesFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter";
  }
  protected:
  explicit StatisticalTimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatisticalTimeSeriesFilter_Method Method;
  static constexpr Method METHOD_UNSPECIFIED =
    StatisticalTimeSeriesFilter_Method_METHOD_UNSPECIFIED;
  static constexpr Method METHOD_CLUSTER_OUTLIER =
    StatisticalTimeSeriesFilter_Method_METHOD_CLUSTER_OUTLIER;
  static inline bool Method_IsValid(int value) {
    return StatisticalTimeSeriesFilter_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    StatisticalTimeSeriesFilter_Method_Method_MIN;
  static constexpr Method Method_MAX =
    StatisticalTimeSeriesFilter_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    StatisticalTimeSeriesFilter_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return StatisticalTimeSeriesFilter_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return StatisticalTimeSeriesFilter_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Method* value) {
    return StatisticalTimeSeriesFilter_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRankingMethodFieldNumber = 1,
    kNumTimeSeriesFieldNumber = 2,
  };
  // .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.Method ranking_method = 1;
  void clear_ranking_method();
  ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method ranking_method() const;
  void set_ranking_method(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method value);
  private:
  ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method _internal_ranking_method() const;
  void _internal_set_ranking_method(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method value);
  public:

  // int32 num_time_series = 2;
  void clear_num_time_series();
  int32_t num_time_series() const;
  void set_num_time_series(int32_t value);
  private:
  int32_t _internal_num_time_series() const;
  void _internal_set_num_time_series(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int ranking_method_;
    int32_t num_time_series_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Aggregation

// .google.protobuf.Duration alignment_period = 1;
inline bool Aggregation::_internal_has_alignment_period() const {
  return this != internal_default_instance() && _impl_.alignment_period_ != nullptr;
}
inline bool Aggregation::has_alignment_period() const {
  return _internal_has_alignment_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Aggregation::_internal_alignment_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.alignment_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Aggregation::alignment_period() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Aggregation.alignment_period)
  return _internal_alignment_period();
}
inline void Aggregation::unsafe_arena_set_allocated_alignment_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* alignment_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_period_);
  }
  _impl_.alignment_period_ = alignment_period;
  if (alignment_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Aggregation.alignment_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Aggregation::release_alignment_period() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.alignment_period_;
  _impl_.alignment_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Aggregation::unsafe_arena_release_alignment_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Aggregation.alignment_period)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.alignment_period_;
  _impl_.alignment_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Aggregation::_internal_mutable_alignment_period() {
  
  if (_impl_.alignment_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.alignment_period_ = p;
  }
  return _impl_.alignment_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Aggregation::mutable_alignment_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_alignment_period();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Aggregation.alignment_period)
  return _msg;
}
inline void Aggregation::set_allocated_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* alignment_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_period_);
  }
  if (alignment_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_period));
    if (message_arena != submessage_arena) {
      alignment_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alignment_period_ = alignment_period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Aggregation.alignment_period)
}

// .google.monitoring.dashboard.v1.Aggregation.Aligner per_series_aligner = 2;
inline void Aggregation::clear_per_series_aligner() {
  _impl_.per_series_aligner_ = 0;
}
inline ::google::monitoring::dashboard::v1::Aggregation_Aligner Aggregation::_internal_per_series_aligner() const {
  return static_cast< ::google::monitoring::dashboard::v1::Aggregation_Aligner >(_impl_.per_series_aligner_);
}
inline ::google::monitoring::dashboard::v1::Aggregation_Aligner Aggregation::per_series_aligner() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Aggregation.per_series_aligner)
  return _internal_per_series_aligner();
}
inline void Aggregation::_internal_set_per_series_aligner(::google::monitoring::dashboard::v1::Aggregation_Aligner value) {
  
  _impl_.per_series_aligner_ = value;
}
inline void Aggregation::set_per_series_aligner(::google::monitoring::dashboard::v1::Aggregation_Aligner value) {
  _internal_set_per_series_aligner(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Aggregation.per_series_aligner)
}

// .google.monitoring.dashboard.v1.Aggregation.Reducer cross_series_reducer = 4;
inline void Aggregation::clear_cross_series_reducer() {
  _impl_.cross_series_reducer_ = 0;
}
inline ::google::monitoring::dashboard::v1::Aggregation_Reducer Aggregation::_internal_cross_series_reducer() const {
  return static_cast< ::google::monitoring::dashboard::v1::Aggregation_Reducer >(_impl_.cross_series_reducer_);
}
inline ::google::monitoring::dashboard::v1::Aggregation_Reducer Aggregation::cross_series_reducer() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Aggregation.cross_series_reducer)
  return _internal_cross_series_reducer();
}
inline void Aggregation::_internal_set_cross_series_reducer(::google::monitoring::dashboard::v1::Aggregation_Reducer value) {
  
  _impl_.cross_series_reducer_ = value;
}
inline void Aggregation::set_cross_series_reducer(::google::monitoring::dashboard::v1::Aggregation_Reducer value) {
  _internal_set_cross_series_reducer(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Aggregation.cross_series_reducer)
}

// repeated string group_by_fields = 5;
inline int Aggregation::_internal_group_by_fields_size() const {
  return _impl_.group_by_fields_.size();
}
inline int Aggregation::group_by_fields_size() const {
  return _internal_group_by_fields_size();
}
inline void Aggregation::clear_group_by_fields() {
  _impl_.group_by_fields_.Clear();
}
inline std::string* Aggregation::add_group_by_fields() {
  std::string* _s = _internal_add_group_by_fields();
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
  return _s;
}
inline const std::string& Aggregation::_internal_group_by_fields(int index) const {
  return _impl_.group_by_fields_.Get(index);
}
inline const std::string& Aggregation::group_by_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
  return _internal_group_by_fields(index);
}
inline std::string* Aggregation::mutable_group_by_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
  return _impl_.group_by_fields_.Mutable(index);
}
inline void Aggregation::set_group_by_fields(int index, const std::string& value) {
  _impl_.group_by_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::set_group_by_fields(int index, std::string&& value) {
  _impl_.group_by_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::set_group_by_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.group_by_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::set_group_by_fields(int index, const char* value, size_t size) {
  _impl_.group_by_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline std::string* Aggregation::_internal_add_group_by_fields() {
  return _impl_.group_by_fields_.Add();
}
inline void Aggregation::add_group_by_fields(const std::string& value) {
  _impl_.group_by_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::add_group_by_fields(std::string&& value) {
  _impl_.group_by_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::add_group_by_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.group_by_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline void Aggregation::add_group_by_fields(const char* value, size_t size) {
  _impl_.group_by_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Aggregation::group_by_fields() const {
  // @@protoc_insertion_point(field_list:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
  return _impl_.group_by_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Aggregation::mutable_group_by_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.dashboard.v1.Aggregation.group_by_fields)
  return &_impl_.group_by_fields_;
}

// -------------------------------------------------------------------

// PickTimeSeriesFilter

// .google.monitoring.dashboard.v1.PickTimeSeriesFilter.Method ranking_method = 1;
inline void PickTimeSeriesFilter::clear_ranking_method() {
  _impl_.ranking_method_ = 0;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method PickTimeSeriesFilter::_internal_ranking_method() const {
  return static_cast< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method >(_impl_.ranking_method_);
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method PickTimeSeriesFilter::ranking_method() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.PickTimeSeriesFilter.ranking_method)
  return _internal_ranking_method();
}
inline void PickTimeSeriesFilter::_internal_set_ranking_method(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method value) {
  
  _impl_.ranking_method_ = value;
}
inline void PickTimeSeriesFilter::set_ranking_method(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method value) {
  _internal_set_ranking_method(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.PickTimeSeriesFilter.ranking_method)
}

// int32 num_time_series = 2;
inline void PickTimeSeriesFilter::clear_num_time_series() {
  _impl_.num_time_series_ = 0;
}
inline int32_t PickTimeSeriesFilter::_internal_num_time_series() const {
  return _impl_.num_time_series_;
}
inline int32_t PickTimeSeriesFilter::num_time_series() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.PickTimeSeriesFilter.num_time_series)
  return _internal_num_time_series();
}
inline void PickTimeSeriesFilter::_internal_set_num_time_series(int32_t value) {
  
  _impl_.num_time_series_ = value;
}
inline void PickTimeSeriesFilter::set_num_time_series(int32_t value) {
  _internal_set_num_time_series(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.PickTimeSeriesFilter.num_time_series)
}

// .google.monitoring.dashboard.v1.PickTimeSeriesFilter.Direction direction = 3;
inline void PickTimeSeriesFilter::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction PickTimeSeriesFilter::_internal_direction() const {
  return static_cast< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction >(_impl_.direction_);
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction PickTimeSeriesFilter::direction() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.PickTimeSeriesFilter.direction)
  return _internal_direction();
}
inline void PickTimeSeriesFilter::_internal_set_direction(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction value) {
  
  _impl_.direction_ = value;
}
inline void PickTimeSeriesFilter::set_direction(::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.PickTimeSeriesFilter.direction)
}

// -------------------------------------------------------------------

// StatisticalTimeSeriesFilter

// .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.Method ranking_method = 1;
inline void StatisticalTimeSeriesFilter::clear_ranking_method() {
  _impl_.ranking_method_ = 0;
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method StatisticalTimeSeriesFilter::_internal_ranking_method() const {
  return static_cast< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method >(_impl_.ranking_method_);
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method StatisticalTimeSeriesFilter::ranking_method() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.ranking_method)
  return _internal_ranking_method();
}
inline void StatisticalTimeSeriesFilter::_internal_set_ranking_method(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method value) {
  
  _impl_.ranking_method_ = value;
}
inline void StatisticalTimeSeriesFilter::set_ranking_method(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method value) {
  _internal_set_ranking_method(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.ranking_method)
}

// int32 num_time_series = 2;
inline void StatisticalTimeSeriesFilter::clear_num_time_series() {
  _impl_.num_time_series_ = 0;
}
inline int32_t StatisticalTimeSeriesFilter::_internal_num_time_series() const {
  return _impl_.num_time_series_;
}
inline int32_t StatisticalTimeSeriesFilter::num_time_series() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.num_time_series)
  return _internal_num_time_series();
}
inline void StatisticalTimeSeriesFilter::_internal_set_num_time_series(int32_t value) {
  
  _impl_.num_time_series_ = value;
}
inline void StatisticalTimeSeriesFilter::set_num_time_series(int32_t value) {
  _internal_set_num_time_series(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter.num_time_series)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::Aggregation_Aligner> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::Aggregation_Aligner>() {
  return ::google::monitoring::dashboard::v1::Aggregation_Aligner_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::Aggregation_Reducer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::Aggregation_Reducer>() {
  return ::google::monitoring::dashboard::v1::Aggregation_Reducer_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method>() {
  return ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Method_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction>() {
  return ::google::monitoring::dashboard::v1::PickTimeSeriesFilter_Direction_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method>() {
  return ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter_Method_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fcommon_2eproto
