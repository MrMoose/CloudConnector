// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/dashboard/v1/dashboards_service.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto__INCLUDED

#include "google/monitoring/dashboard/v1/dashboards_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

// Manages Stackdriver dashboards. A dashboard is an arrangement of data display
// widgets in a specific layout.
class DashboardsService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.dashboard.v1.DashboardsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see [Managing dashboards by API](https://cloud.google.com/monitoring/dashboards/api-dashboard).
    // This method requires the `monitoring.dashboards.create` permission on the specified project. For more information about permissions, see [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> AsyncCreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncCreateDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncCreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncCreateDashboardRaw(context, request, cq));
    }
    // Lists the existing dashboards.
    //
    // This method requires the `monitoring.dashboards.list` permission
    // on the specified project. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>> AsyncListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>>(AsyncListDashboardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>> PrepareAsyncListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>>(PrepareAsyncListDashboardsRaw(context, request, cq));
    }
    // Fetches a specific dashboard.
    //
    // This method requires the `monitoring.dashboards.get` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> AsyncGetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncGetDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncGetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncGetDashboardRaw(context, request, cq));
    }
    // Deletes an existing custom dashboard.
    //
    // This method requires the `monitoring.dashboards.delete` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteDashboardRaw(context, request, cq));
    }
    // Replaces an existing custom dashboard with a new definition.
    //
    // This method requires the `monitoring.dashboards.update` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> AsyncUpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncUpdateDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncUpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncUpdateDashboardRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see [Managing dashboards by API](https://cloud.google.com/monitoring/dashboards/api-dashboard).
      // This method requires the `monitoring.dashboards.create` permission on the specified project. For more information about permissions, see [Cloud Identity and Access Management](https://cloud.google.com/iam).
      virtual void CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the existing dashboards.
      //
      // This method requires the `monitoring.dashboards.list` permission
      // on the specified project. For more information, see
      // [Cloud Identity and Access Management](https://cloud.google.com/iam).
      virtual void ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Fetches a specific dashboard.
      //
      // This method requires the `monitoring.dashboards.get` permission
      // on the specified dashboard. For more information, see
      // [Cloud Identity and Access Management](https://cloud.google.com/iam).
      virtual void GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an existing custom dashboard.
      //
      // This method requires the `monitoring.dashboards.delete` permission
      // on the specified dashboard. For more information, see
      // [Cloud Identity and Access Management](https://cloud.google.com/iam).
      virtual void DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Replaces an existing custom dashboard with a new definition.
      //
      // This method requires the `monitoring.dashboards.update` permission
      // on the specified dashboard. For more information, see
      // [Cloud Identity and Access Management](https://cloud.google.com/iam).
      virtual void UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* AsyncCreateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncCreateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>* AsyncListDashboardsRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::ListDashboardsResponse>* PrepareAsyncListDashboardsRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* AsyncGetDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncGetDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* AsyncUpdateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncUpdateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> AsyncCreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncCreateDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncCreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncCreateDashboardRaw(context, request, cq));
    }
    ::grpc::Status ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>> AsyncListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>>(AsyncListDashboardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>> PrepareAsyncListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>>(PrepareAsyncListDashboardsRaw(context, request, cq));
    }
    ::grpc::Status GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> AsyncGetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncGetDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncGetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncGetDashboardRaw(context, request, cq));
    }
    ::grpc::Status DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteDashboardRaw(context, request, cq));
    }
    ::grpc::Status UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::google::monitoring::dashboard::v1::Dashboard* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> AsyncUpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(AsyncUpdateDashboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>> PrepareAsyncUpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>>(PrepareAsyncUpdateDashboardRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) override;
      void CreateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDashboards(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) override;
      void GetDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, std::function<void(::grpc::Status)>) override;
      void UpdateDashboard(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* AsyncCreateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncCreateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>* AsyncListDashboardsRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::ListDashboardsResponse>* PrepareAsyncListDashboardsRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* AsyncGetDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncGetDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* AsyncUpdateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::dashboard::v1::Dashboard>* PrepareAsyncUpdateDashboardRaw(::grpc::ClientContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDashboard_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDashboards_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDashboard_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDashboard_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDashboard_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see [Managing dashboards by API](https://cloud.google.com/monitoring/dashboards/api-dashboard).
    // This method requires the `monitoring.dashboards.create` permission on the specified project. For more information about permissions, see [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status CreateDashboard(::grpc::ServerContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response);
    // Lists the existing dashboards.
    //
    // This method requires the `monitoring.dashboards.list` permission
    // on the specified project. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status ListDashboards(::grpc::ServerContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response);
    // Fetches a specific dashboard.
    //
    // This method requires the `monitoring.dashboards.get` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status GetDashboard(::grpc::ServerContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response);
    // Deletes an existing custom dashboard.
    //
    // This method requires the `monitoring.dashboards.delete` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status DeleteDashboard(::grpc::ServerContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response);
    // Replaces an existing custom dashboard with a new definition.
    //
    // This method requires the `monitoring.dashboards.update` permission
    // on the specified dashboard. For more information, see
    // [Cloud Identity and Access Management](https://cloud.google.com/iam).
    virtual ::grpc::Status UpdateDashboard(::grpc::ServerContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDashboard(::grpc::ServerContext* context, ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::dashboard::v1::Dashboard>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDashboards() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDashboards(::grpc::ServerContext* context, ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::dashboard::v1::ListDashboardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDashboard() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDashboard(::grpc::ServerContext* context, ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::dashboard::v1::Dashboard>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDashboard(::grpc::ServerContext* context, ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashboard(::grpc::ServerContext* context, ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::dashboard::v1::Dashboard>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDashboard<WithAsyncMethod_ListDashboards<WithAsyncMethod_GetDashboard<WithAsyncMethod_DeleteDashboard<WithAsyncMethod_UpdateDashboard<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::CreateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response) { return this->CreateDashboard(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDashboard(
        ::grpc::MessageAllocator< ::google::monitoring::dashboard::v1::CreateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::CreateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDashboards() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::ListDashboardsRequest, ::google::monitoring::dashboard::v1::ListDashboardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* request, ::google::monitoring::dashboard::v1::ListDashboardsResponse* response) { return this->ListDashboards(context, request, response); }));}
    void SetMessageAllocatorFor_ListDashboards(
        ::grpc::MessageAllocator< ::google::monitoring::dashboard::v1::ListDashboardsRequest, ::google::monitoring::dashboard::v1::ListDashboardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::ListDashboardsRequest, ::google::monitoring::dashboard::v1::ListDashboardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDashboards(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDashboard() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::GetDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::dashboard::v1::GetDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response) { return this->GetDashboard(context, request, response); }));}
    void SetMessageAllocatorFor_GetDashboard(
        ::grpc::MessageAllocator< ::google::monitoring::dashboard::v1::GetDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::GetDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::DeleteDashboardRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* request, ::google::protobuf::Empty* response) { return this->DeleteDashboard(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDashboard(
        ::grpc::MessageAllocator< ::google::monitoring::dashboard::v1::DeleteDashboardRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::DeleteDashboardRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::UpdateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* request, ::google::monitoring::dashboard::v1::Dashboard* response) { return this->UpdateDashboard(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDashboard(
        ::grpc::MessageAllocator< ::google::monitoring::dashboard::v1::UpdateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::dashboard::v1::UpdateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateDashboard<WithCallbackMethod_ListDashboards<WithCallbackMethod_GetDashboard<WithCallbackMethod_DeleteDashboard<WithCallbackMethod_UpdateDashboard<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDashboards() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDashboard() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDashboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDashboards() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDashboards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDashboard() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDashboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDashboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDashboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDashboard(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDashboards() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDashboards(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDashboards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDashboard() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDashboard(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDashboard(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDashboard(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDashboard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDashboard() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::dashboard::v1::CreateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::dashboard::v1::CreateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* streamer) {
                       return this->StreamedCreateDashboard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::CreateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDashboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::dashboard::v1::CreateDashboardRequest,::google::monitoring::dashboard::v1::Dashboard>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDashboards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDashboards() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::dashboard::v1::ListDashboardsRequest, ::google::monitoring::dashboard::v1::ListDashboardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::dashboard::v1::ListDashboardsRequest, ::google::monitoring::dashboard::v1::ListDashboardsResponse>* streamer) {
                       return this->StreamedListDashboards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDashboards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDashboards(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::ListDashboardsRequest* /*request*/, ::google::monitoring::dashboard::v1::ListDashboardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDashboards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::dashboard::v1::ListDashboardsRequest,::google::monitoring::dashboard::v1::ListDashboardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDashboard() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::dashboard::v1::GetDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::dashboard::v1::GetDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* streamer) {
                       return this->StreamedGetDashboard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::GetDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDashboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::dashboard::v1::GetDashboardRequest,::google::monitoring::dashboard::v1::Dashboard>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDashboard() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::dashboard::v1::DeleteDashboardRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::dashboard::v1::DeleteDashboardRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteDashboard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::DeleteDashboardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDashboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::dashboard::v1::DeleteDashboardRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDashboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDashboard() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::dashboard::v1::UpdateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::dashboard::v1::UpdateDashboardRequest, ::google::monitoring::dashboard::v1::Dashboard>* streamer) {
                       return this->StreamedUpdateDashboard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDashboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDashboard(::grpc::ServerContext* /*context*/, const ::google::monitoring::dashboard::v1::UpdateDashboardRequest* /*request*/, ::google::monitoring::dashboard::v1::Dashboard* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDashboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::dashboard::v1::UpdateDashboardRequest,::google::monitoring::dashboard::v1::Dashboard>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDashboard<WithStreamedUnaryMethod_ListDashboards<WithStreamedUnaryMethod_GetDashboard<WithStreamedUnaryMethod_DeleteDashboard<WithStreamedUnaryMethod_UpdateDashboard<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDashboard<WithStreamedUnaryMethod_ListDashboards<WithStreamedUnaryMethod_GetDashboard<WithStreamedUnaryMethod_DeleteDashboard<WithStreamedUnaryMethod_UpdateDashboard<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto__INCLUDED
