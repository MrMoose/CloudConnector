// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/dashboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/dashboard/v1/layouts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto_metadata_getter(int index);
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class Dashboard;
struct DashboardDefaultTypeInternal;
extern DashboardDefaultTypeInternal _Dashboard_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::Dashboard* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Dashboard>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

// ===================================================================

class Dashboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Dashboard) */ {
 public:
  inline Dashboard() : Dashboard(nullptr) {}
  virtual ~Dashboard();
  explicit constexpr Dashboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dashboard(const Dashboard& from);
  Dashboard(Dashboard&& from) noexcept
    : Dashboard() {
    *this = ::std::move(from);
  }

  inline Dashboard& operator=(const Dashboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dashboard& operator=(Dashboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dashboard& default_instance() {
    return *internal_default_instance();
  }
  enum LayoutCase {
    kGridLayout = 5,
    kMosaicLayout = 6,
    kRowLayout = 8,
    kColumnLayout = 9,
    LAYOUT_NOT_SET = 0,
  };

  static inline const Dashboard* internal_default_instance() {
    return reinterpret_cast<const Dashboard*>(
               &_Dashboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dashboard& a, Dashboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Dashboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dashboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dashboard* New() const final {
    return CreateMaybeMessage<Dashboard>(nullptr);
  }

  Dashboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dashboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dashboard& from);
  void MergeFrom(const Dashboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dashboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Dashboard";
  }
  protected:
  explicit Dashboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kEtagFieldNumber = 4,
    kGridLayoutFieldNumber = 5,
    kMosaicLayoutFieldNumber = 6,
    kRowLayoutFieldNumber = 8,
    kColumnLayoutFieldNumber = 9,
  };
  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string etag = 4;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.monitoring.dashboard.v1.GridLayout grid_layout = 5;
  bool has_grid_layout() const;
  private:
  bool _internal_has_grid_layout() const;
  public:
  void clear_grid_layout();
  const ::google::monitoring::dashboard::v1::GridLayout& grid_layout() const;
  ::google::monitoring::dashboard::v1::GridLayout* release_grid_layout();
  ::google::monitoring::dashboard::v1::GridLayout* mutable_grid_layout();
  void set_allocated_grid_layout(::google::monitoring::dashboard::v1::GridLayout* grid_layout);
  private:
  const ::google::monitoring::dashboard::v1::GridLayout& _internal_grid_layout() const;
  ::google::monitoring::dashboard::v1::GridLayout* _internal_mutable_grid_layout();
  public:
  void unsafe_arena_set_allocated_grid_layout(
      ::google::monitoring::dashboard::v1::GridLayout* grid_layout);
  ::google::monitoring::dashboard::v1::GridLayout* unsafe_arena_release_grid_layout();

  // .google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;
  bool has_mosaic_layout() const;
  private:
  bool _internal_has_mosaic_layout() const;
  public:
  void clear_mosaic_layout();
  const ::google::monitoring::dashboard::v1::MosaicLayout& mosaic_layout() const;
  ::google::monitoring::dashboard::v1::MosaicLayout* release_mosaic_layout();
  ::google::monitoring::dashboard::v1::MosaicLayout* mutable_mosaic_layout();
  void set_allocated_mosaic_layout(::google::monitoring::dashboard::v1::MosaicLayout* mosaic_layout);
  private:
  const ::google::monitoring::dashboard::v1::MosaicLayout& _internal_mosaic_layout() const;
  ::google::monitoring::dashboard::v1::MosaicLayout* _internal_mutable_mosaic_layout();
  public:
  void unsafe_arena_set_allocated_mosaic_layout(
      ::google::monitoring::dashboard::v1::MosaicLayout* mosaic_layout);
  ::google::monitoring::dashboard::v1::MosaicLayout* unsafe_arena_release_mosaic_layout();

  // .google.monitoring.dashboard.v1.RowLayout row_layout = 8;
  bool has_row_layout() const;
  private:
  bool _internal_has_row_layout() const;
  public:
  void clear_row_layout();
  const ::google::monitoring::dashboard::v1::RowLayout& row_layout() const;
  ::google::monitoring::dashboard::v1::RowLayout* release_row_layout();
  ::google::monitoring::dashboard::v1::RowLayout* mutable_row_layout();
  void set_allocated_row_layout(::google::monitoring::dashboard::v1::RowLayout* row_layout);
  private:
  const ::google::monitoring::dashboard::v1::RowLayout& _internal_row_layout() const;
  ::google::monitoring::dashboard::v1::RowLayout* _internal_mutable_row_layout();
  public:
  void unsafe_arena_set_allocated_row_layout(
      ::google::monitoring::dashboard::v1::RowLayout* row_layout);
  ::google::monitoring::dashboard::v1::RowLayout* unsafe_arena_release_row_layout();

  // .google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;
  bool has_column_layout() const;
  private:
  bool _internal_has_column_layout() const;
  public:
  void clear_column_layout();
  const ::google::monitoring::dashboard::v1::ColumnLayout& column_layout() const;
  ::google::monitoring::dashboard::v1::ColumnLayout* release_column_layout();
  ::google::monitoring::dashboard::v1::ColumnLayout* mutable_column_layout();
  void set_allocated_column_layout(::google::monitoring::dashboard::v1::ColumnLayout* column_layout);
  private:
  const ::google::monitoring::dashboard::v1::ColumnLayout& _internal_column_layout() const;
  ::google::monitoring::dashboard::v1::ColumnLayout* _internal_mutable_column_layout();
  public:
  void unsafe_arena_set_allocated_column_layout(
      ::google::monitoring::dashboard::v1::ColumnLayout* column_layout);
  ::google::monitoring::dashboard::v1::ColumnLayout* unsafe_arena_release_column_layout();

  void clear_layout();
  LayoutCase layout_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Dashboard)
 private:
  class _Internal;
  void set_has_grid_layout();
  void set_has_mosaic_layout();
  void set_has_row_layout();
  void set_has_column_layout();

  inline bool has_layout() const;
  inline void clear_has_layout();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  union LayoutUnion {
    constexpr LayoutUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::monitoring::dashboard::v1::GridLayout* grid_layout_;
    ::google::monitoring::dashboard::v1::MosaicLayout* mosaic_layout_;
    ::google::monitoring::dashboard::v1::RowLayout* row_layout_;
    ::google::monitoring::dashboard::v1::ColumnLayout* column_layout_;
  } layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dashboard

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Dashboard::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Dashboard::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.name)
  return _internal_name();
}
inline void Dashboard::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Dashboard.name)
}
inline std::string* Dashboard::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.name)
  return _internal_mutable_name();
}
inline const std::string& Dashboard::_internal_name() const {
  return name_.Get();
}
inline void Dashboard::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Dashboard::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.Dashboard.name)
}
inline void Dashboard::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.Dashboard.name)
}
inline void Dashboard::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.Dashboard.name)
}
inline std::string* Dashboard::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Dashboard::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Dashboard::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Dashboard.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Dashboard::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& Dashboard::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.display_name)
  return _internal_display_name();
}
inline void Dashboard::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Dashboard.display_name)
}
inline std::string* Dashboard::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Dashboard::_internal_display_name() const {
  return display_name_.Get();
}
inline void Dashboard::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Dashboard::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.Dashboard.display_name)
}
inline void Dashboard::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.Dashboard.display_name)
}
inline void Dashboard::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.Dashboard.display_name)
}
inline std::string* Dashboard::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Dashboard::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Dashboard::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Dashboard.display_name)
}

// string etag = 4;
inline void Dashboard::clear_etag() {
  etag_.ClearToEmpty();
}
inline const std::string& Dashboard::etag() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.etag)
  return _internal_etag();
}
inline void Dashboard::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Dashboard.etag)
}
inline std::string* Dashboard::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.etag)
  return _internal_mutable_etag();
}
inline const std::string& Dashboard::_internal_etag() const {
  return etag_.Get();
}
inline void Dashboard::_internal_set_etag(const std::string& value) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Dashboard::set_etag(std::string&& value) {
  
  etag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.Dashboard.etag)
}
inline void Dashboard::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.Dashboard.etag)
}
inline void Dashboard::set_etag(const char* value,
    size_t size) {
  
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.Dashboard.etag)
}
inline std::string* Dashboard::_internal_mutable_etag() {
  
  return etag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Dashboard::release_etag() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Dashboard::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Dashboard.etag)
}

// .google.monitoring.dashboard.v1.GridLayout grid_layout = 5;
inline bool Dashboard::_internal_has_grid_layout() const {
  return layout_case() == kGridLayout;
}
inline bool Dashboard::has_grid_layout() const {
  return _internal_has_grid_layout();
}
inline void Dashboard::set_has_grid_layout() {
  _oneof_case_[0] = kGridLayout;
}
inline ::google::monitoring::dashboard::v1::GridLayout* Dashboard::release_grid_layout() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.grid_layout)
  if (_internal_has_grid_layout()) {
    clear_has_layout();
      ::google::monitoring::dashboard::v1::GridLayout* temp = layout_.grid_layout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layout_.grid_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::GridLayout& Dashboard::_internal_grid_layout() const {
  return _internal_has_grid_layout()
      ? *layout_.grid_layout_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::GridLayout&>(::google::monitoring::dashboard::v1::_GridLayout_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::GridLayout& Dashboard::grid_layout() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.grid_layout)
  return _internal_grid_layout();
}
inline ::google::monitoring::dashboard::v1::GridLayout* Dashboard::unsafe_arena_release_grid_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Dashboard.grid_layout)
  if (_internal_has_grid_layout()) {
    clear_has_layout();
    ::google::monitoring::dashboard::v1::GridLayout* temp = layout_.grid_layout_;
    layout_.grid_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dashboard::unsafe_arena_set_allocated_grid_layout(::google::monitoring::dashboard::v1::GridLayout* grid_layout) {
  clear_layout();
  if (grid_layout) {
    set_has_grid_layout();
    layout_.grid_layout_ = grid_layout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Dashboard.grid_layout)
}
inline ::google::monitoring::dashboard::v1::GridLayout* Dashboard::_internal_mutable_grid_layout() {
  if (!_internal_has_grid_layout()) {
    clear_layout();
    set_has_grid_layout();
    layout_.grid_layout_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::GridLayout >(GetArena());
  }
  return layout_.grid_layout_;
}
inline ::google::monitoring::dashboard::v1::GridLayout* Dashboard::mutable_grid_layout() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.grid_layout)
  return _internal_mutable_grid_layout();
}

// .google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;
inline bool Dashboard::_internal_has_mosaic_layout() const {
  return layout_case() == kMosaicLayout;
}
inline bool Dashboard::has_mosaic_layout() const {
  return _internal_has_mosaic_layout();
}
inline void Dashboard::set_has_mosaic_layout() {
  _oneof_case_[0] = kMosaicLayout;
}
inline ::google::monitoring::dashboard::v1::MosaicLayout* Dashboard::release_mosaic_layout() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.mosaic_layout)
  if (_internal_has_mosaic_layout()) {
    clear_has_layout();
      ::google::monitoring::dashboard::v1::MosaicLayout* temp = layout_.mosaic_layout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layout_.mosaic_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::MosaicLayout& Dashboard::_internal_mosaic_layout() const {
  return _internal_has_mosaic_layout()
      ? *layout_.mosaic_layout_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::MosaicLayout&>(::google::monitoring::dashboard::v1::_MosaicLayout_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::MosaicLayout& Dashboard::mosaic_layout() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.mosaic_layout)
  return _internal_mosaic_layout();
}
inline ::google::monitoring::dashboard::v1::MosaicLayout* Dashboard::unsafe_arena_release_mosaic_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Dashboard.mosaic_layout)
  if (_internal_has_mosaic_layout()) {
    clear_has_layout();
    ::google::monitoring::dashboard::v1::MosaicLayout* temp = layout_.mosaic_layout_;
    layout_.mosaic_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dashboard::unsafe_arena_set_allocated_mosaic_layout(::google::monitoring::dashboard::v1::MosaicLayout* mosaic_layout) {
  clear_layout();
  if (mosaic_layout) {
    set_has_mosaic_layout();
    layout_.mosaic_layout_ = mosaic_layout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Dashboard.mosaic_layout)
}
inline ::google::monitoring::dashboard::v1::MosaicLayout* Dashboard::_internal_mutable_mosaic_layout() {
  if (!_internal_has_mosaic_layout()) {
    clear_layout();
    set_has_mosaic_layout();
    layout_.mosaic_layout_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::MosaicLayout >(GetArena());
  }
  return layout_.mosaic_layout_;
}
inline ::google::monitoring::dashboard::v1::MosaicLayout* Dashboard::mutable_mosaic_layout() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.mosaic_layout)
  return _internal_mutable_mosaic_layout();
}

// .google.monitoring.dashboard.v1.RowLayout row_layout = 8;
inline bool Dashboard::_internal_has_row_layout() const {
  return layout_case() == kRowLayout;
}
inline bool Dashboard::has_row_layout() const {
  return _internal_has_row_layout();
}
inline void Dashboard::set_has_row_layout() {
  _oneof_case_[0] = kRowLayout;
}
inline ::google::monitoring::dashboard::v1::RowLayout* Dashboard::release_row_layout() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.row_layout)
  if (_internal_has_row_layout()) {
    clear_has_layout();
      ::google::monitoring::dashboard::v1::RowLayout* temp = layout_.row_layout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layout_.row_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::RowLayout& Dashboard::_internal_row_layout() const {
  return _internal_has_row_layout()
      ? *layout_.row_layout_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::RowLayout&>(::google::monitoring::dashboard::v1::_RowLayout_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::RowLayout& Dashboard::row_layout() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.row_layout)
  return _internal_row_layout();
}
inline ::google::monitoring::dashboard::v1::RowLayout* Dashboard::unsafe_arena_release_row_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Dashboard.row_layout)
  if (_internal_has_row_layout()) {
    clear_has_layout();
    ::google::monitoring::dashboard::v1::RowLayout* temp = layout_.row_layout_;
    layout_.row_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dashboard::unsafe_arena_set_allocated_row_layout(::google::monitoring::dashboard::v1::RowLayout* row_layout) {
  clear_layout();
  if (row_layout) {
    set_has_row_layout();
    layout_.row_layout_ = row_layout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Dashboard.row_layout)
}
inline ::google::monitoring::dashboard::v1::RowLayout* Dashboard::_internal_mutable_row_layout() {
  if (!_internal_has_row_layout()) {
    clear_layout();
    set_has_row_layout();
    layout_.row_layout_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::RowLayout >(GetArena());
  }
  return layout_.row_layout_;
}
inline ::google::monitoring::dashboard::v1::RowLayout* Dashboard::mutable_row_layout() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.row_layout)
  return _internal_mutable_row_layout();
}

// .google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;
inline bool Dashboard::_internal_has_column_layout() const {
  return layout_case() == kColumnLayout;
}
inline bool Dashboard::has_column_layout() const {
  return _internal_has_column_layout();
}
inline void Dashboard::set_has_column_layout() {
  _oneof_case_[0] = kColumnLayout;
}
inline ::google::monitoring::dashboard::v1::ColumnLayout* Dashboard::release_column_layout() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Dashboard.column_layout)
  if (_internal_has_column_layout()) {
    clear_has_layout();
      ::google::monitoring::dashboard::v1::ColumnLayout* temp = layout_.column_layout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layout_.column_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::ColumnLayout& Dashboard::_internal_column_layout() const {
  return _internal_has_column_layout()
      ? *layout_.column_layout_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::ColumnLayout&>(::google::monitoring::dashboard::v1::_ColumnLayout_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::ColumnLayout& Dashboard::column_layout() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Dashboard.column_layout)
  return _internal_column_layout();
}
inline ::google::monitoring::dashboard::v1::ColumnLayout* Dashboard::unsafe_arena_release_column_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.Dashboard.column_layout)
  if (_internal_has_column_layout()) {
    clear_has_layout();
    ::google::monitoring::dashboard::v1::ColumnLayout* temp = layout_.column_layout_;
    layout_.column_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dashboard::unsafe_arena_set_allocated_column_layout(::google::monitoring::dashboard::v1::ColumnLayout* column_layout) {
  clear_layout();
  if (column_layout) {
    set_has_column_layout();
    layout_.column_layout_ = column_layout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.Dashboard.column_layout)
}
inline ::google::monitoring::dashboard::v1::ColumnLayout* Dashboard::_internal_mutable_column_layout() {
  if (!_internal_has_column_layout()) {
    clear_layout();
    set_has_column_layout();
    layout_.column_layout_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::ColumnLayout >(GetArena());
  }
  return layout_.column_layout_;
}
inline ::google::monitoring::dashboard::v1::ColumnLayout* Dashboard::mutable_column_layout() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Dashboard.column_layout)
  return _internal_mutable_column_layout();
}

inline bool Dashboard::has_layout() const {
  return layout_case() != LAYOUT_NOT_SET;
}
inline void Dashboard::clear_has_layout() {
  _oneof_case_[0] = LAYOUT_NOT_SET;
}
inline Dashboard::LayoutCase Dashboard::layout_case() const {
  return Dashboard::LayoutCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboard_2eproto
