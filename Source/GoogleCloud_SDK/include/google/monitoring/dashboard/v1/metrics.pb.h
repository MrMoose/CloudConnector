// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/monitoring/dashboard/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(int index);
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class Threshold;
struct ThresholdDefaultTypeInternal;
extern ThresholdDefaultTypeInternal _Threshold_default_instance_;
class TimeSeriesFilter;
struct TimeSeriesFilterDefaultTypeInternal;
extern TimeSeriesFilterDefaultTypeInternal _TimeSeriesFilter_default_instance_;
class TimeSeriesFilterRatio;
struct TimeSeriesFilterRatioDefaultTypeInternal;
extern TimeSeriesFilterRatioDefaultTypeInternal _TimeSeriesFilterRatio_default_instance_;
class TimeSeriesFilterRatio_RatioPart;
struct TimeSeriesFilterRatio_RatioPartDefaultTypeInternal;
extern TimeSeriesFilterRatio_RatioPartDefaultTypeInternal _TimeSeriesFilterRatio_RatioPart_default_instance_;
class TimeSeriesQuery;
struct TimeSeriesQueryDefaultTypeInternal;
extern TimeSeriesQueryDefaultTypeInternal _TimeSeriesQuery_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::Threshold* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::Threshold>(Arena*);
template<> ::google::monitoring::dashboard::v1::TimeSeriesFilter* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesFilter>(Arena*);
template<> ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesFilterRatio>(Arena*);
template<> ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart>(Arena*);
template<> ::google::monitoring::dashboard::v1::TimeSeriesQuery* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

enum Threshold_Color : int {
  Threshold_Color_COLOR_UNSPECIFIED = 0,
  Threshold_Color_YELLOW = 4,
  Threshold_Color_RED = 6,
  Threshold_Color_Threshold_Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Threshold_Color_Threshold_Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Threshold_Color_IsValid(int value);
constexpr Threshold_Color Threshold_Color_Color_MIN = Threshold_Color_COLOR_UNSPECIFIED;
constexpr Threshold_Color Threshold_Color_Color_MAX = Threshold_Color_RED;
constexpr int Threshold_Color_Color_ARRAYSIZE = Threshold_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Threshold_Color_descriptor();
template<typename T>
inline const std::string& Threshold_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Threshold_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Threshold_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Threshold_Color_descriptor(), enum_t_value);
}
inline bool Threshold_Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Threshold_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Threshold_Color>(
    Threshold_Color_descriptor(), name, value);
}
enum Threshold_Direction : int {
  Threshold_Direction_DIRECTION_UNSPECIFIED = 0,
  Threshold_Direction_ABOVE = 1,
  Threshold_Direction_BELOW = 2,
  Threshold_Direction_Threshold_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Threshold_Direction_Threshold_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Threshold_Direction_IsValid(int value);
constexpr Threshold_Direction Threshold_Direction_Direction_MIN = Threshold_Direction_DIRECTION_UNSPECIFIED;
constexpr Threshold_Direction Threshold_Direction_Direction_MAX = Threshold_Direction_BELOW;
constexpr int Threshold_Direction_Direction_ARRAYSIZE = Threshold_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Threshold_Direction_descriptor();
template<typename T>
inline const std::string& Threshold_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Threshold_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Threshold_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Threshold_Direction_descriptor(), enum_t_value);
}
inline bool Threshold_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Threshold_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Threshold_Direction>(
    Threshold_Direction_descriptor(), name, value);
}
enum SparkChartType : int {
  SPARK_CHART_TYPE_UNSPECIFIED = 0,
  SPARK_LINE = 1,
  SPARK_BAR = 2,
  SparkChartType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SparkChartType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SparkChartType_IsValid(int value);
constexpr SparkChartType SparkChartType_MIN = SPARK_CHART_TYPE_UNSPECIFIED;
constexpr SparkChartType SparkChartType_MAX = SPARK_BAR;
constexpr int SparkChartType_ARRAYSIZE = SparkChartType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SparkChartType_descriptor();
template<typename T>
inline const std::string& SparkChartType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SparkChartType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SparkChartType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SparkChartType_descriptor(), enum_t_value);
}
inline bool SparkChartType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SparkChartType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SparkChartType>(
    SparkChartType_descriptor(), name, value);
}
// ===================================================================

class TimeSeriesQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.TimeSeriesQuery) */ {
 public:
  inline TimeSeriesQuery() : TimeSeriesQuery(nullptr) {}
  virtual ~TimeSeriesQuery();
  explicit constexpr TimeSeriesQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesQuery(const TimeSeriesQuery& from);
  TimeSeriesQuery(TimeSeriesQuery&& from) noexcept
    : TimeSeriesQuery() {
    *this = ::std::move(from);
  }

  inline TimeSeriesQuery& operator=(const TimeSeriesQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesQuery& operator=(TimeSeriesQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesQuery& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kTimeSeriesFilter = 1,
    kTimeSeriesFilterRatio = 2,
    kTimeSeriesQueryLanguage = 3,
    SOURCE_NOT_SET = 0,
  };

  static inline const TimeSeriesQuery* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesQuery*>(
               &_TimeSeriesQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSeriesQuery& a, TimeSeriesQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesQuery* New() const final {
    return CreateMaybeMessage<TimeSeriesQuery>(nullptr);
  }

  TimeSeriesQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesQuery& from);
  void MergeFrom(const TimeSeriesQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.TimeSeriesQuery";
  }
  protected:
  explicit TimeSeriesQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitOverrideFieldNumber = 5,
    kTimeSeriesFilterFieldNumber = 1,
    kTimeSeriesFilterRatioFieldNumber = 2,
    kTimeSeriesQueryLanguageFieldNumber = 3,
  };
  // string unit_override = 5;
  void clear_unit_override();
  const std::string& unit_override() const;
  void set_unit_override(const std::string& value);
  void set_unit_override(std::string&& value);
  void set_unit_override(const char* value);
  void set_unit_override(const char* value, size_t size);
  std::string* mutable_unit_override();
  std::string* release_unit_override();
  void set_allocated_unit_override(std::string* unit_override);
  private:
  const std::string& _internal_unit_override() const;
  void _internal_set_unit_override(const std::string& value);
  std::string* _internal_mutable_unit_override();
  public:

  // .google.monitoring.dashboard.v1.TimeSeriesFilter time_series_filter = 1;
  bool has_time_series_filter() const;
  private:
  bool _internal_has_time_series_filter() const;
  public:
  void clear_time_series_filter();
  const ::google::monitoring::dashboard::v1::TimeSeriesFilter& time_series_filter() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilter* release_time_series_filter();
  ::google::monitoring::dashboard::v1::TimeSeriesFilter* mutable_time_series_filter();
  void set_allocated_time_series_filter(::google::monitoring::dashboard::v1::TimeSeriesFilter* time_series_filter);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesFilter& _internal_time_series_filter() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilter* _internal_mutable_time_series_filter();
  public:
  void unsafe_arena_set_allocated_time_series_filter(
      ::google::monitoring::dashboard::v1::TimeSeriesFilter* time_series_filter);
  ::google::monitoring::dashboard::v1::TimeSeriesFilter* unsafe_arena_release_time_series_filter();

  // .google.monitoring.dashboard.v1.TimeSeriesFilterRatio time_series_filter_ratio = 2;
  bool has_time_series_filter_ratio() const;
  private:
  bool _internal_has_time_series_filter_ratio() const;
  public:
  void clear_time_series_filter_ratio();
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio& time_series_filter_ratio() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* release_time_series_filter_ratio();
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* mutable_time_series_filter_ratio();
  void set_allocated_time_series_filter_ratio(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* time_series_filter_ratio);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio& _internal_time_series_filter_ratio() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* _internal_mutable_time_series_filter_ratio();
  public:
  void unsafe_arena_set_allocated_time_series_filter_ratio(
      ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* time_series_filter_ratio);
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* unsafe_arena_release_time_series_filter_ratio();

  // string time_series_query_language = 3;
  bool has_time_series_query_language() const;
  private:
  bool _internal_has_time_series_query_language() const;
  public:
  void clear_time_series_query_language();
  const std::string& time_series_query_language() const;
  void set_time_series_query_language(const std::string& value);
  void set_time_series_query_language(std::string&& value);
  void set_time_series_query_language(const char* value);
  void set_time_series_query_language(const char* value, size_t size);
  std::string* mutable_time_series_query_language();
  std::string* release_time_series_query_language();
  void set_allocated_time_series_query_language(std::string* time_series_query_language);
  private:
  const std::string& _internal_time_series_query_language() const;
  void _internal_set_time_series_query_language(const std::string& value);
  std::string* _internal_mutable_time_series_query_language();
  public:

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.TimeSeriesQuery)
 private:
  class _Internal;
  void set_has_time_series_filter();
  void set_has_time_series_filter_ratio();
  void set_has_time_series_query_language();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_override_;
  union SourceUnion {
    constexpr SourceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::monitoring::dashboard::v1::TimeSeriesFilter* time_series_filter_;
    ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* time_series_filter_ratio_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_series_query_language_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.TimeSeriesFilter) */ {
 public:
  inline TimeSeriesFilter() : TimeSeriesFilter(nullptr) {}
  virtual ~TimeSeriesFilter();
  explicit constexpr TimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesFilter(const TimeSeriesFilter& from);
  TimeSeriesFilter(TimeSeriesFilter&& from) noexcept
    : TimeSeriesFilter() {
    *this = ::std::move(from);
  }

  inline TimeSeriesFilter& operator=(const TimeSeriesFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesFilter& operator=(TimeSeriesFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesFilter& default_instance() {
    return *internal_default_instance();
  }
  enum OutputFilterCase {
    kPickTimeSeriesFilter = 4,
    kStatisticalTimeSeriesFilter = 5,
    OUTPUT_FILTER_NOT_SET = 0,
  };

  static inline const TimeSeriesFilter* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesFilter*>(
               &_TimeSeriesFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeSeriesFilter& a, TimeSeriesFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesFilter* New() const final {
    return CreateMaybeMessage<TimeSeriesFilter>(nullptr);
  }

  TimeSeriesFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesFilter& from);
  void MergeFrom(const TimeSeriesFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.TimeSeriesFilter";
  }
  protected:
  explicit TimeSeriesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kAggregationFieldNumber = 2,
    kSecondaryAggregationFieldNumber = 3,
    kPickTimeSeriesFilterFieldNumber = 4,
    kStatisticalTimeSeriesFilterFieldNumber = 5,
  };
  // string filter = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.monitoring.dashboard.v1.Aggregation aggregation = 2;
  bool has_aggregation() const;
  private:
  bool _internal_has_aggregation() const;
  public:
  void clear_aggregation();
  const ::google::monitoring::dashboard::v1::Aggregation& aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* release_aggregation();
  ::google::monitoring::dashboard::v1::Aggregation* mutable_aggregation();
  void set_allocated_aggregation(::google::monitoring::dashboard::v1::Aggregation* aggregation);
  private:
  const ::google::monitoring::dashboard::v1::Aggregation& _internal_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* _internal_mutable_aggregation();
  public:
  void unsafe_arena_set_allocated_aggregation(
      ::google::monitoring::dashboard::v1::Aggregation* aggregation);
  ::google::monitoring::dashboard::v1::Aggregation* unsafe_arena_release_aggregation();

  // .google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
  bool has_secondary_aggregation() const;
  private:
  bool _internal_has_secondary_aggregation() const;
  public:
  void clear_secondary_aggregation();
  const ::google::monitoring::dashboard::v1::Aggregation& secondary_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* release_secondary_aggregation();
  ::google::monitoring::dashboard::v1::Aggregation* mutable_secondary_aggregation();
  void set_allocated_secondary_aggregation(::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation);
  private:
  const ::google::monitoring::dashboard::v1::Aggregation& _internal_secondary_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* _internal_mutable_secondary_aggregation();
  public:
  void unsafe_arena_set_allocated_secondary_aggregation(
      ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation);
  ::google::monitoring::dashboard::v1::Aggregation* unsafe_arena_release_secondary_aggregation();

  // .google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
  bool has_pick_time_series_filter() const;
  private:
  bool _internal_has_pick_time_series_filter() const;
  public:
  void clear_pick_time_series_filter();
  const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& pick_time_series_filter() const;
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* release_pick_time_series_filter();
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* mutable_pick_time_series_filter();
  void set_allocated_pick_time_series_filter(::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter);
  private:
  const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& _internal_pick_time_series_filter() const;
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* _internal_mutable_pick_time_series_filter();
  public:
  void unsafe_arena_set_allocated_pick_time_series_filter(
      ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter);
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* unsafe_arena_release_pick_time_series_filter();

  // .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_statistical_time_series_filter() const;
  private:
  bool _internal_has_statistical_time_series_filter() const;
  public:
  PROTOBUF_DEPRECATED void clear_statistical_time_series_filter();
  PROTOBUF_DEPRECATED const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& statistical_time_series_filter() const;
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* release_statistical_time_series_filter();
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* mutable_statistical_time_series_filter();
  PROTOBUF_DEPRECATED void set_allocated_statistical_time_series_filter(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter);
  private:
  const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& _internal_statistical_time_series_filter() const;
  ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* _internal_mutable_statistical_time_series_filter();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_statistical_time_series_filter(
      ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter);
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* unsafe_arena_release_statistical_time_series_filter();

  void clear_output_filter();
  OutputFilterCase output_filter_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.TimeSeriesFilter)
 private:
  class _Internal;
  void set_has_pick_time_series_filter();
  void set_has_statistical_time_series_filter();

  inline bool has_output_filter() const;
  inline void clear_has_output_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::google::monitoring::dashboard::v1::Aggregation* aggregation_;
  ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation_;
  union OutputFilterUnion {
    constexpr OutputFilterUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter_;
    ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter_;
  } output_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesFilterRatio_RatioPart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart) */ {
 public:
  inline TimeSeriesFilterRatio_RatioPart() : TimeSeriesFilterRatio_RatioPart(nullptr) {}
  virtual ~TimeSeriesFilterRatio_RatioPart();
  explicit constexpr TimeSeriesFilterRatio_RatioPart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesFilterRatio_RatioPart(const TimeSeriesFilterRatio_RatioPart& from);
  TimeSeriesFilterRatio_RatioPart(TimeSeriesFilterRatio_RatioPart&& from) noexcept
    : TimeSeriesFilterRatio_RatioPart() {
    *this = ::std::move(from);
  }

  inline TimeSeriesFilterRatio_RatioPart& operator=(const TimeSeriesFilterRatio_RatioPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesFilterRatio_RatioPart& operator=(TimeSeriesFilterRatio_RatioPart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesFilterRatio_RatioPart& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeriesFilterRatio_RatioPart* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesFilterRatio_RatioPart*>(
               &_TimeSeriesFilterRatio_RatioPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSeriesFilterRatio_RatioPart& a, TimeSeriesFilterRatio_RatioPart& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesFilterRatio_RatioPart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesFilterRatio_RatioPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesFilterRatio_RatioPart* New() const final {
    return CreateMaybeMessage<TimeSeriesFilterRatio_RatioPart>(nullptr);
  }

  TimeSeriesFilterRatio_RatioPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesFilterRatio_RatioPart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesFilterRatio_RatioPart& from);
  void MergeFrom(const TimeSeriesFilterRatio_RatioPart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesFilterRatio_RatioPart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart";
  }
  protected:
  explicit TimeSeriesFilterRatio_RatioPart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kAggregationFieldNumber = 2,
  };
  // string filter = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.monitoring.dashboard.v1.Aggregation aggregation = 2;
  bool has_aggregation() const;
  private:
  bool _internal_has_aggregation() const;
  public:
  void clear_aggregation();
  const ::google::monitoring::dashboard::v1::Aggregation& aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* release_aggregation();
  ::google::monitoring::dashboard::v1::Aggregation* mutable_aggregation();
  void set_allocated_aggregation(::google::monitoring::dashboard::v1::Aggregation* aggregation);
  private:
  const ::google::monitoring::dashboard::v1::Aggregation& _internal_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* _internal_mutable_aggregation();
  public:
  void unsafe_arena_set_allocated_aggregation(
      ::google::monitoring::dashboard::v1::Aggregation* aggregation);
  ::google::monitoring::dashboard::v1::Aggregation* unsafe_arena_release_aggregation();

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::google::monitoring::dashboard::v1::Aggregation* aggregation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesFilterRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.TimeSeriesFilterRatio) */ {
 public:
  inline TimeSeriesFilterRatio() : TimeSeriesFilterRatio(nullptr) {}
  virtual ~TimeSeriesFilterRatio();
  explicit constexpr TimeSeriesFilterRatio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeriesFilterRatio(const TimeSeriesFilterRatio& from);
  TimeSeriesFilterRatio(TimeSeriesFilterRatio&& from) noexcept
    : TimeSeriesFilterRatio() {
    *this = ::std::move(from);
  }

  inline TimeSeriesFilterRatio& operator=(const TimeSeriesFilterRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesFilterRatio& operator=(TimeSeriesFilterRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesFilterRatio& default_instance() {
    return *internal_default_instance();
  }
  enum OutputFilterCase {
    kPickTimeSeriesFilter = 4,
    kStatisticalTimeSeriesFilter = 5,
    OUTPUT_FILTER_NOT_SET = 0,
  };

  static inline const TimeSeriesFilterRatio* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesFilterRatio*>(
               &_TimeSeriesFilterRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimeSeriesFilterRatio& a, TimeSeriesFilterRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesFilterRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeriesFilterRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesFilterRatio* New() const final {
    return CreateMaybeMessage<TimeSeriesFilterRatio>(nullptr);
  }

  TimeSeriesFilterRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesFilterRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesFilterRatio& from);
  void MergeFrom(const TimeSeriesFilterRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesFilterRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.TimeSeriesFilterRatio";
  }
  protected:
  explicit TimeSeriesFilterRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeSeriesFilterRatio_RatioPart RatioPart;

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorFieldNumber = 1,
    kDenominatorFieldNumber = 2,
    kSecondaryAggregationFieldNumber = 3,
    kPickTimeSeriesFilterFieldNumber = 4,
    kStatisticalTimeSeriesFilterFieldNumber = 5,
  };
  // .google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart numerator = 1;
  bool has_numerator() const;
  private:
  bool _internal_has_numerator() const;
  public:
  void clear_numerator();
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& numerator() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* release_numerator();
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* mutable_numerator();
  void set_allocated_numerator(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* numerator);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& _internal_numerator() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* _internal_mutable_numerator();
  public:
  void unsafe_arena_set_allocated_numerator(
      ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* numerator);
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* unsafe_arena_release_numerator();

  // .google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart denominator = 2;
  bool has_denominator() const;
  private:
  bool _internal_has_denominator() const;
  public:
  void clear_denominator();
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& denominator() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* release_denominator();
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* mutable_denominator();
  void set_allocated_denominator(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* denominator);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& _internal_denominator() const;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* _internal_mutable_denominator();
  public:
  void unsafe_arena_set_allocated_denominator(
      ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* denominator);
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* unsafe_arena_release_denominator();

  // .google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
  bool has_secondary_aggregation() const;
  private:
  bool _internal_has_secondary_aggregation() const;
  public:
  void clear_secondary_aggregation();
  const ::google::monitoring::dashboard::v1::Aggregation& secondary_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* release_secondary_aggregation();
  ::google::monitoring::dashboard::v1::Aggregation* mutable_secondary_aggregation();
  void set_allocated_secondary_aggregation(::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation);
  private:
  const ::google::monitoring::dashboard::v1::Aggregation& _internal_secondary_aggregation() const;
  ::google::monitoring::dashboard::v1::Aggregation* _internal_mutable_secondary_aggregation();
  public:
  void unsafe_arena_set_allocated_secondary_aggregation(
      ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation);
  ::google::monitoring::dashboard::v1::Aggregation* unsafe_arena_release_secondary_aggregation();

  // .google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
  bool has_pick_time_series_filter() const;
  private:
  bool _internal_has_pick_time_series_filter() const;
  public:
  void clear_pick_time_series_filter();
  const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& pick_time_series_filter() const;
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* release_pick_time_series_filter();
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* mutable_pick_time_series_filter();
  void set_allocated_pick_time_series_filter(::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter);
  private:
  const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& _internal_pick_time_series_filter() const;
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* _internal_mutable_pick_time_series_filter();
  public:
  void unsafe_arena_set_allocated_pick_time_series_filter(
      ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter);
  ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* unsafe_arena_release_pick_time_series_filter();

  // .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_statistical_time_series_filter() const;
  private:
  bool _internal_has_statistical_time_series_filter() const;
  public:
  PROTOBUF_DEPRECATED void clear_statistical_time_series_filter();
  PROTOBUF_DEPRECATED const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& statistical_time_series_filter() const;
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* release_statistical_time_series_filter();
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* mutable_statistical_time_series_filter();
  PROTOBUF_DEPRECATED void set_allocated_statistical_time_series_filter(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter);
  private:
  const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& _internal_statistical_time_series_filter() const;
  ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* _internal_mutable_statistical_time_series_filter();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_statistical_time_series_filter(
      ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter);
  PROTOBUF_DEPRECATED ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* unsafe_arena_release_statistical_time_series_filter();

  void clear_output_filter();
  OutputFilterCase output_filter_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.TimeSeriesFilterRatio)
 private:
  class _Internal;
  void set_has_pick_time_series_filter();
  void set_has_statistical_time_series_filter();

  inline bool has_output_filter() const;
  inline void clear_has_output_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* numerator_;
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* denominator_;
  ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation_;
  union OutputFilterUnion {
    constexpr OutputFilterUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter_;
    ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter_;
  } output_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Threshold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.Threshold) */ {
 public:
  inline Threshold() : Threshold(nullptr) {}
  virtual ~Threshold();
  explicit constexpr Threshold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Threshold(const Threshold& from);
  Threshold(Threshold&& from) noexcept
    : Threshold() {
    *this = ::std::move(from);
  }

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline Threshold& operator=(Threshold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Threshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const Threshold* internal_default_instance() {
    return reinterpret_cast<const Threshold*>(
               &_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Threshold& a, Threshold& b) {
    a.Swap(&b);
  }
  inline void Swap(Threshold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Threshold* New() const final {
    return CreateMaybeMessage<Threshold>(nullptr);
  }

  Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Threshold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Threshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.Threshold";
  }
  protected:
  explicit Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Threshold_Color Color;
  static constexpr Color COLOR_UNSPECIFIED =
    Threshold_Color_COLOR_UNSPECIFIED;
  static constexpr Color YELLOW =
    Threshold_Color_YELLOW;
  static constexpr Color RED =
    Threshold_Color_RED;
  static inline bool Color_IsValid(int value) {
    return Threshold_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    Threshold_Color_Color_MIN;
  static constexpr Color Color_MAX =
    Threshold_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    Threshold_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return Threshold_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return Threshold_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Color* value) {
    return Threshold_Color_Parse(name, value);
  }

  typedef Threshold_Direction Direction;
  static constexpr Direction DIRECTION_UNSPECIFIED =
    Threshold_Direction_DIRECTION_UNSPECIFIED;
  static constexpr Direction ABOVE =
    Threshold_Direction_ABOVE;
  static constexpr Direction BELOW =
    Threshold_Direction_BELOW;
  static inline bool Direction_IsValid(int value) {
    return Threshold_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    Threshold_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    Threshold_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    Threshold_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return Threshold_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return Threshold_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return Threshold_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kValueFieldNumber = 2,
    kColorFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // .google.monitoring.dashboard.v1.Threshold.Color color = 3;
  void clear_color();
  ::google::monitoring::dashboard::v1::Threshold_Color color() const;
  void set_color(::google::monitoring::dashboard::v1::Threshold_Color value);
  private:
  ::google::monitoring::dashboard::v1::Threshold_Color _internal_color() const;
  void _internal_set_color(::google::monitoring::dashboard::v1::Threshold_Color value);
  public:

  // .google.monitoring.dashboard.v1.Threshold.Direction direction = 4;
  void clear_direction();
  ::google::monitoring::dashboard::v1::Threshold_Direction direction() const;
  void set_direction(::google::monitoring::dashboard::v1::Threshold_Direction value);
  private:
  ::google::monitoring::dashboard::v1::Threshold_Direction _internal_direction() const;
  void _internal_set_direction(::google::monitoring::dashboard::v1::Threshold_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double value_;
  int color_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSeriesQuery

// .google.monitoring.dashboard.v1.TimeSeriesFilter time_series_filter = 1;
inline bool TimeSeriesQuery::_internal_has_time_series_filter() const {
  return source_case() == kTimeSeriesFilter;
}
inline bool TimeSeriesQuery::has_time_series_filter() const {
  return _internal_has_time_series_filter();
}
inline void TimeSeriesQuery::set_has_time_series_filter() {
  _oneof_case_[0] = kTimeSeriesFilter;
}
inline void TimeSeriesQuery::clear_time_series_filter() {
  if (_internal_has_time_series_filter()) {
    if (GetArena() == nullptr) {
      delete source_.time_series_filter_;
    }
    clear_has_source();
  }
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilter* TimeSeriesQuery::release_time_series_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter)
  if (_internal_has_time_series_filter()) {
    clear_has_source();
      ::google::monitoring::dashboard::v1::TimeSeriesFilter* temp = source_.time_series_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilter& TimeSeriesQuery::_internal_time_series_filter() const {
  return _internal_has_time_series_filter()
      ? *source_.time_series_filter_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::TimeSeriesFilter&>(::google::monitoring::dashboard::v1::_TimeSeriesFilter_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilter& TimeSeriesQuery::time_series_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter)
  return _internal_time_series_filter();
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilter* TimeSeriesQuery::unsafe_arena_release_time_series_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter)
  if (_internal_has_time_series_filter()) {
    clear_has_source();
    ::google::monitoring::dashboard::v1::TimeSeriesFilter* temp = source_.time_series_filter_;
    source_.time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesQuery::unsafe_arena_set_allocated_time_series_filter(::google::monitoring::dashboard::v1::TimeSeriesFilter* time_series_filter) {
  clear_source();
  if (time_series_filter) {
    set_has_time_series_filter();
    source_.time_series_filter_ = time_series_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilter* TimeSeriesQuery::_internal_mutable_time_series_filter() {
  if (!_internal_has_time_series_filter()) {
    clear_source();
    set_has_time_series_filter();
    source_.time_series_filter_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::TimeSeriesFilter >(GetArena());
  }
  return source_.time_series_filter_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilter* TimeSeriesQuery::mutable_time_series_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter)
  return _internal_mutable_time_series_filter();
}

// .google.monitoring.dashboard.v1.TimeSeriesFilterRatio time_series_filter_ratio = 2;
inline bool TimeSeriesQuery::_internal_has_time_series_filter_ratio() const {
  return source_case() == kTimeSeriesFilterRatio;
}
inline bool TimeSeriesQuery::has_time_series_filter_ratio() const {
  return _internal_has_time_series_filter_ratio();
}
inline void TimeSeriesQuery::set_has_time_series_filter_ratio() {
  _oneof_case_[0] = kTimeSeriesFilterRatio;
}
inline void TimeSeriesQuery::clear_time_series_filter_ratio() {
  if (_internal_has_time_series_filter_ratio()) {
    if (GetArena() == nullptr) {
      delete source_.time_series_filter_ratio_;
    }
    clear_has_source();
  }
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* TimeSeriesQuery::release_time_series_filter_ratio() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter_ratio)
  if (_internal_has_time_series_filter_ratio()) {
    clear_has_source();
      ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* temp = source_.time_series_filter_ratio_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.time_series_filter_ratio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio& TimeSeriesQuery::_internal_time_series_filter_ratio() const {
  return _internal_has_time_series_filter_ratio()
      ? *source_.time_series_filter_ratio_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio&>(::google::monitoring::dashboard::v1::_TimeSeriesFilterRatio_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio& TimeSeriesQuery::time_series_filter_ratio() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter_ratio)
  return _internal_time_series_filter_ratio();
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* TimeSeriesQuery::unsafe_arena_release_time_series_filter_ratio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter_ratio)
  if (_internal_has_time_series_filter_ratio()) {
    clear_has_source();
    ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* temp = source_.time_series_filter_ratio_;
    source_.time_series_filter_ratio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesQuery::unsafe_arena_set_allocated_time_series_filter_ratio(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* time_series_filter_ratio) {
  clear_source();
  if (time_series_filter_ratio) {
    set_has_time_series_filter_ratio();
    source_.time_series_filter_ratio_ = time_series_filter_ratio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter_ratio)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* TimeSeriesQuery::_internal_mutable_time_series_filter_ratio() {
  if (!_internal_has_time_series_filter_ratio()) {
    clear_source();
    set_has_time_series_filter_ratio();
    source_.time_series_filter_ratio_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio >(GetArena());
  }
  return source_.time_series_filter_ratio_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio* TimeSeriesQuery::mutable_time_series_filter_ratio() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_filter_ratio)
  return _internal_mutable_time_series_filter_ratio();
}

// string time_series_query_language = 3;
inline bool TimeSeriesQuery::_internal_has_time_series_query_language() const {
  return source_case() == kTimeSeriesQueryLanguage;
}
inline bool TimeSeriesQuery::has_time_series_query_language() const {
  return _internal_has_time_series_query_language();
}
inline void TimeSeriesQuery::set_has_time_series_query_language() {
  _oneof_case_[0] = kTimeSeriesQueryLanguage;
}
inline void TimeSeriesQuery::clear_time_series_query_language() {
  if (_internal_has_time_series_query_language()) {
    source_.time_series_query_language_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_source();
  }
}
inline const std::string& TimeSeriesQuery::time_series_query_language() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
  return _internal_time_series_query_language();
}
inline void TimeSeriesQuery::set_time_series_query_language(const std::string& value) {
  _internal_set_time_series_query_language(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
}
inline std::string* TimeSeriesQuery::mutable_time_series_query_language() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
  return _internal_mutable_time_series_query_language();
}
inline const std::string& TimeSeriesQuery::_internal_time_series_query_language() const {
  if (_internal_has_time_series_query_language()) {
    return source_.time_series_query_language_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TimeSeriesQuery::_internal_set_time_series_query_language(const std::string& value) {
  if (!_internal_has_time_series_query_language()) {
    clear_source();
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.time_series_query_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeSeriesQuery::set_time_series_query_language(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
  if (!_internal_has_time_series_query_language()) {
    clear_source();
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.time_series_query_language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
}
inline void TimeSeriesQuery::set_time_series_query_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_time_series_query_language()) {
    clear_source();
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.time_series_query_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
}
inline void TimeSeriesQuery::set_time_series_query_language(const char* value,
                             size_t size) {
  if (!_internal_has_time_series_query_language()) {
    clear_source();
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.time_series_query_language_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
}
inline std::string* TimeSeriesQuery::_internal_mutable_time_series_query_language() {
  if (!_internal_has_time_series_query_language()) {
    clear_source();
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.time_series_query_language_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSeriesQuery::release_time_series_query_language() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
  if (_internal_has_time_series_query_language()) {
    clear_has_source();
    return source_.time_series_query_language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TimeSeriesQuery::set_allocated_time_series_query_language(std::string* time_series_query_language) {
  if (has_source()) {
    clear_source();
  }
  if (time_series_query_language != nullptr) {
    set_has_time_series_query_language();
    source_.time_series_query_language_.UnsafeSetDefault(time_series_query_language);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(time_series_query_language);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesQuery.time_series_query_language)
}

// string unit_override = 5;
inline void TimeSeriesQuery::clear_unit_override() {
  unit_override_.ClearToEmpty();
}
inline const std::string& TimeSeriesQuery::unit_override() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
  return _internal_unit_override();
}
inline void TimeSeriesQuery::set_unit_override(const std::string& value) {
  _internal_set_unit_override(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
}
inline std::string* TimeSeriesQuery::mutable_unit_override() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
  return _internal_mutable_unit_override();
}
inline const std::string& TimeSeriesQuery::_internal_unit_override() const {
  return unit_override_.Get();
}
inline void TimeSeriesQuery::_internal_set_unit_override(const std::string& value) {
  
  unit_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeSeriesQuery::set_unit_override(std::string&& value) {
  
  unit_override_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
}
inline void TimeSeriesQuery::set_unit_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
}
inline void TimeSeriesQuery::set_unit_override(const char* value,
    size_t size) {
  
  unit_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
}
inline std::string* TimeSeriesQuery::_internal_mutable_unit_override() {
  
  return unit_override_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSeriesQuery::release_unit_override() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
  return unit_override_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSeriesQuery::set_allocated_unit_override(std::string* unit_override) {
  if (unit_override != nullptr) {
    
  } else {
    
  }
  unit_override_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit_override,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesQuery.unit_override)
}

inline bool TimeSeriesQuery::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void TimeSeriesQuery::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline TimeSeriesQuery::SourceCase TimeSeriesQuery::source_case() const {
  return TimeSeriesQuery::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeSeriesFilter

// string filter = 1 [(.google.api.field_behavior) = REQUIRED];
inline void TimeSeriesFilter::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& TimeSeriesFilter::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
  return _internal_filter();
}
inline void TimeSeriesFilter::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
}
inline std::string* TimeSeriesFilter::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
  return _internal_mutable_filter();
}
inline const std::string& TimeSeriesFilter::_internal_filter() const {
  return filter_.Get();
}
inline void TimeSeriesFilter::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeSeriesFilter::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
}
inline void TimeSeriesFilter::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
}
inline void TimeSeriesFilter::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
}
inline std::string* TimeSeriesFilter::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSeriesFilter::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSeriesFilter::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.filter)
}

// .google.monitoring.dashboard.v1.Aggregation aggregation = 2;
inline bool TimeSeriesFilter::_internal_has_aggregation() const {
  return this != internal_default_instance() && aggregation_ != nullptr;
}
inline bool TimeSeriesFilter::has_aggregation() const {
  return _internal_has_aggregation();
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilter::_internal_aggregation() const {
  const ::google::monitoring::dashboard::v1::Aggregation* p = aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Aggregation&>(
      ::google::monitoring::dashboard::v1::_Aggregation_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilter::aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilter.aggregation)
  return _internal_aggregation();
}
inline void TimeSeriesFilter::unsafe_arena_set_allocated_aggregation(
    ::google::monitoring::dashboard::v1::Aggregation* aggregation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation_);
  }
  aggregation_ = aggregation;
  if (aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.aggregation)
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::release_aggregation() {
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = aggregation_;
  aggregation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::unsafe_arena_release_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilter.aggregation)
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = aggregation_;
  aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::_internal_mutable_aggregation() {
  
  if (aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Aggregation>(GetArena());
    aggregation_ = p;
  }
  return aggregation_;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::mutable_aggregation() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilter.aggregation)
  return _internal_mutable_aggregation();
}
inline void TimeSeriesFilter::set_allocated_aggregation(::google::monitoring::dashboard::v1::Aggregation* aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation_);
  }
  if (aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation)->GetArena();
    if (message_arena != submessage_arena) {
      aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregation, submessage_arena);
    }
    
  } else {
    
  }
  aggregation_ = aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.aggregation)
}

// .google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
inline bool TimeSeriesFilter::_internal_has_secondary_aggregation() const {
  return this != internal_default_instance() && secondary_aggregation_ != nullptr;
}
inline bool TimeSeriesFilter::has_secondary_aggregation() const {
  return _internal_has_secondary_aggregation();
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilter::_internal_secondary_aggregation() const {
  const ::google::monitoring::dashboard::v1::Aggregation* p = secondary_aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Aggregation&>(
      ::google::monitoring::dashboard::v1::_Aggregation_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilter::secondary_aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilter.secondary_aggregation)
  return _internal_secondary_aggregation();
}
inline void TimeSeriesFilter::unsafe_arena_set_allocated_secondary_aggregation(
    ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation_);
  }
  secondary_aggregation_ = secondary_aggregation;
  if (secondary_aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.secondary_aggregation)
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::release_secondary_aggregation() {
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = secondary_aggregation_;
  secondary_aggregation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::unsafe_arena_release_secondary_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilter.secondary_aggregation)
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = secondary_aggregation_;
  secondary_aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::_internal_mutable_secondary_aggregation() {
  
  if (secondary_aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Aggregation>(GetArena());
    secondary_aggregation_ = p;
  }
  return secondary_aggregation_;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilter::mutable_secondary_aggregation() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilter.secondary_aggregation)
  return _internal_mutable_secondary_aggregation();
}
inline void TimeSeriesFilter::set_allocated_secondary_aggregation(::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation_);
  }
  if (secondary_aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_aggregation, submessage_arena);
    }
    
  } else {
    
  }
  secondary_aggregation_ = secondary_aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.secondary_aggregation)
}

// .google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
inline bool TimeSeriesFilter::_internal_has_pick_time_series_filter() const {
  return output_filter_case() == kPickTimeSeriesFilter;
}
inline bool TimeSeriesFilter::has_pick_time_series_filter() const {
  return _internal_has_pick_time_series_filter();
}
inline void TimeSeriesFilter::set_has_pick_time_series_filter() {
  _oneof_case_[0] = kPickTimeSeriesFilter;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilter::release_pick_time_series_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilter.pick_time_series_filter)
  if (_internal_has_pick_time_series_filter()) {
    clear_has_output_filter();
      ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* temp = output_filter_.pick_time_series_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_filter_.pick_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& TimeSeriesFilter::_internal_pick_time_series_filter() const {
  return _internal_has_pick_time_series_filter()
      ? *output_filter_.pick_time_series_filter_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter&>(::google::monitoring::dashboard::v1::_PickTimeSeriesFilter_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& TimeSeriesFilter::pick_time_series_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilter.pick_time_series_filter)
  return _internal_pick_time_series_filter();
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilter::unsafe_arena_release_pick_time_series_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesFilter.pick_time_series_filter)
  if (_internal_has_pick_time_series_filter()) {
    clear_has_output_filter();
    ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* temp = output_filter_.pick_time_series_filter_;
    output_filter_.pick_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesFilter::unsafe_arena_set_allocated_pick_time_series_filter(::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter) {
  clear_output_filter();
  if (pick_time_series_filter) {
    set_has_pick_time_series_filter();
    output_filter_.pick_time_series_filter_ = pick_time_series_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.pick_time_series_filter)
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilter::_internal_mutable_pick_time_series_filter() {
  if (!_internal_has_pick_time_series_filter()) {
    clear_output_filter();
    set_has_pick_time_series_filter();
    output_filter_.pick_time_series_filter_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter >(GetArena());
  }
  return output_filter_.pick_time_series_filter_;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilter::mutable_pick_time_series_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilter.pick_time_series_filter)
  return _internal_mutable_pick_time_series_filter();
}

// .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
inline bool TimeSeriesFilter::_internal_has_statistical_time_series_filter() const {
  return output_filter_case() == kStatisticalTimeSeriesFilter;
}
inline bool TimeSeriesFilter::has_statistical_time_series_filter() const {
  return _internal_has_statistical_time_series_filter();
}
inline void TimeSeriesFilter::set_has_statistical_time_series_filter() {
  _oneof_case_[0] = kStatisticalTimeSeriesFilter;
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilter::release_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilter.statistical_time_series_filter)
  if (_internal_has_statistical_time_series_filter()) {
    clear_has_output_filter();
      ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* temp = output_filter_.statistical_time_series_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_filter_.statistical_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& TimeSeriesFilter::_internal_statistical_time_series_filter() const {
  return _internal_has_statistical_time_series_filter()
      ? *output_filter_.statistical_time_series_filter_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter&>(::google::monitoring::dashboard::v1::_StatisticalTimeSeriesFilter_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& TimeSeriesFilter::statistical_time_series_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilter.statistical_time_series_filter)
  return _internal_statistical_time_series_filter();
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilter::unsafe_arena_release_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesFilter.statistical_time_series_filter)
  if (_internal_has_statistical_time_series_filter()) {
    clear_has_output_filter();
    ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* temp = output_filter_.statistical_time_series_filter_;
    output_filter_.statistical_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesFilter::unsafe_arena_set_allocated_statistical_time_series_filter(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter) {
  clear_output_filter();
  if (statistical_time_series_filter) {
    set_has_statistical_time_series_filter();
    output_filter_.statistical_time_series_filter_ = statistical_time_series_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilter.statistical_time_series_filter)
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilter::_internal_mutable_statistical_time_series_filter() {
  if (!_internal_has_statistical_time_series_filter()) {
    clear_output_filter();
    set_has_statistical_time_series_filter();
    output_filter_.statistical_time_series_filter_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter >(GetArena());
  }
  return output_filter_.statistical_time_series_filter_;
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilter::mutable_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilter.statistical_time_series_filter)
  return _internal_mutable_statistical_time_series_filter();
}

inline bool TimeSeriesFilter::has_output_filter() const {
  return output_filter_case() != OUTPUT_FILTER_NOT_SET;
}
inline void TimeSeriesFilter::clear_has_output_filter() {
  _oneof_case_[0] = OUTPUT_FILTER_NOT_SET;
}
inline TimeSeriesFilter::OutputFilterCase TimeSeriesFilter::output_filter_case() const {
  return TimeSeriesFilter::OutputFilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeSeriesFilterRatio_RatioPart

// string filter = 1 [(.google.api.field_behavior) = REQUIRED];
inline void TimeSeriesFilterRatio_RatioPart::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& TimeSeriesFilterRatio_RatioPart::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
  return _internal_filter();
}
inline void TimeSeriesFilterRatio_RatioPart::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
}
inline std::string* TimeSeriesFilterRatio_RatioPart::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
  return _internal_mutable_filter();
}
inline const std::string& TimeSeriesFilterRatio_RatioPart::_internal_filter() const {
  return filter_.Get();
}
inline void TimeSeriesFilterRatio_RatioPart::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimeSeriesFilterRatio_RatioPart::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
}
inline void TimeSeriesFilterRatio_RatioPart::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
}
inline void TimeSeriesFilterRatio_RatioPart::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
}
inline std::string* TimeSeriesFilterRatio_RatioPart::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSeriesFilterRatio_RatioPart::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSeriesFilterRatio_RatioPart::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.filter)
}

// .google.monitoring.dashboard.v1.Aggregation aggregation = 2;
inline bool TimeSeriesFilterRatio_RatioPart::_internal_has_aggregation() const {
  return this != internal_default_instance() && aggregation_ != nullptr;
}
inline bool TimeSeriesFilterRatio_RatioPart::has_aggregation() const {
  return _internal_has_aggregation();
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilterRatio_RatioPart::_internal_aggregation() const {
  const ::google::monitoring::dashboard::v1::Aggregation* p = aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Aggregation&>(
      ::google::monitoring::dashboard::v1::_Aggregation_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilterRatio_RatioPart::aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.aggregation)
  return _internal_aggregation();
}
inline void TimeSeriesFilterRatio_RatioPart::unsafe_arena_set_allocated_aggregation(
    ::google::monitoring::dashboard::v1::Aggregation* aggregation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation_);
  }
  aggregation_ = aggregation;
  if (aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.aggregation)
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio_RatioPart::release_aggregation() {
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = aggregation_;
  aggregation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio_RatioPart::unsafe_arena_release_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.aggregation)
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = aggregation_;
  aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio_RatioPart::_internal_mutable_aggregation() {
  
  if (aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Aggregation>(GetArena());
    aggregation_ = p;
  }
  return aggregation_;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio_RatioPart::mutable_aggregation() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.aggregation)
  return _internal_mutable_aggregation();
}
inline void TimeSeriesFilterRatio_RatioPart::set_allocated_aggregation(::google::monitoring::dashboard::v1::Aggregation* aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation_);
  }
  if (aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregation)->GetArena();
    if (message_arena != submessage_arena) {
      aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregation, submessage_arena);
    }
    
  } else {
    
  }
  aggregation_ = aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.aggregation)
}

// -------------------------------------------------------------------

// TimeSeriesFilterRatio

// .google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart numerator = 1;
inline bool TimeSeriesFilterRatio::_internal_has_numerator() const {
  return this != internal_default_instance() && numerator_ != nullptr;
}
inline bool TimeSeriesFilterRatio::has_numerator() const {
  return _internal_has_numerator();
}
inline void TimeSeriesFilterRatio::clear_numerator() {
  if (GetArena() == nullptr && numerator_ != nullptr) {
    delete numerator_;
  }
  numerator_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& TimeSeriesFilterRatio::_internal_numerator() const {
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* p = numerator_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart&>(
      ::google::monitoring::dashboard::v1::_TimeSeriesFilterRatio_RatioPart_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& TimeSeriesFilterRatio::numerator() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.numerator)
  return _internal_numerator();
}
inline void TimeSeriesFilterRatio::unsafe_arena_set_allocated_numerator(
    ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* numerator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numerator_);
  }
  numerator_ = numerator;
  if (numerator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.numerator)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::release_numerator() {
  
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* temp = numerator_;
  numerator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::unsafe_arena_release_numerator() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.numerator)
  
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* temp = numerator_;
  numerator_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::_internal_mutable_numerator() {
  
  if (numerator_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart>(GetArena());
    numerator_ = p;
  }
  return numerator_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::mutable_numerator() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.numerator)
  return _internal_mutable_numerator();
}
inline void TimeSeriesFilterRatio::set_allocated_numerator(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* numerator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete numerator_;
  }
  if (numerator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(numerator);
    if (message_arena != submessage_arena) {
      numerator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numerator, submessage_arena);
    }
    
  } else {
    
  }
  numerator_ = numerator;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.numerator)
}

// .google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart denominator = 2;
inline bool TimeSeriesFilterRatio::_internal_has_denominator() const {
  return this != internal_default_instance() && denominator_ != nullptr;
}
inline bool TimeSeriesFilterRatio::has_denominator() const {
  return _internal_has_denominator();
}
inline void TimeSeriesFilterRatio::clear_denominator() {
  if (GetArena() == nullptr && denominator_ != nullptr) {
    delete denominator_;
  }
  denominator_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& TimeSeriesFilterRatio::_internal_denominator() const {
  const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* p = denominator_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart&>(
      ::google::monitoring::dashboard::v1::_TimeSeriesFilterRatio_RatioPart_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart& TimeSeriesFilterRatio::denominator() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.denominator)
  return _internal_denominator();
}
inline void TimeSeriesFilterRatio::unsafe_arena_set_allocated_denominator(
    ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* denominator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(denominator_);
  }
  denominator_ = denominator;
  if (denominator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.denominator)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::release_denominator() {
  
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* temp = denominator_;
  denominator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::unsafe_arena_release_denominator() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.denominator)
  
  ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* temp = denominator_;
  denominator_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::_internal_mutable_denominator() {
  
  if (denominator_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart>(GetArena());
    denominator_ = p;
  }
  return denominator_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* TimeSeriesFilterRatio::mutable_denominator() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.denominator)
  return _internal_mutable_denominator();
}
inline void TimeSeriesFilterRatio::set_allocated_denominator(::google::monitoring::dashboard::v1::TimeSeriesFilterRatio_RatioPart* denominator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete denominator_;
  }
  if (denominator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(denominator);
    if (message_arena != submessage_arena) {
      denominator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, denominator, submessage_arena);
    }
    
  } else {
    
  }
  denominator_ = denominator;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.denominator)
}

// .google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
inline bool TimeSeriesFilterRatio::_internal_has_secondary_aggregation() const {
  return this != internal_default_instance() && secondary_aggregation_ != nullptr;
}
inline bool TimeSeriesFilterRatio::has_secondary_aggregation() const {
  return _internal_has_secondary_aggregation();
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilterRatio::_internal_secondary_aggregation() const {
  const ::google::monitoring::dashboard::v1::Aggregation* p = secondary_aggregation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Aggregation&>(
      ::google::monitoring::dashboard::v1::_Aggregation_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Aggregation& TimeSeriesFilterRatio::secondary_aggregation() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.secondary_aggregation)
  return _internal_secondary_aggregation();
}
inline void TimeSeriesFilterRatio::unsafe_arena_set_allocated_secondary_aggregation(
    ::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation_);
  }
  secondary_aggregation_ = secondary_aggregation;
  if (secondary_aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.secondary_aggregation)
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio::release_secondary_aggregation() {
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = secondary_aggregation_;
  secondary_aggregation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio::unsafe_arena_release_secondary_aggregation() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.secondary_aggregation)
  
  ::google::monitoring::dashboard::v1::Aggregation* temp = secondary_aggregation_;
  secondary_aggregation_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio::_internal_mutable_secondary_aggregation() {
  
  if (secondary_aggregation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Aggregation>(GetArena());
    secondary_aggregation_ = p;
  }
  return secondary_aggregation_;
}
inline ::google::monitoring::dashboard::v1::Aggregation* TimeSeriesFilterRatio::mutable_secondary_aggregation() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.secondary_aggregation)
  return _internal_mutable_secondary_aggregation();
}
inline void TimeSeriesFilterRatio::set_allocated_secondary_aggregation(::google::monitoring::dashboard::v1::Aggregation* secondary_aggregation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation_);
  }
  if (secondary_aggregation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_aggregation)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_aggregation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_aggregation, submessage_arena);
    }
    
  } else {
    
  }
  secondary_aggregation_ = secondary_aggregation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.secondary_aggregation)
}

// .google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
inline bool TimeSeriesFilterRatio::_internal_has_pick_time_series_filter() const {
  return output_filter_case() == kPickTimeSeriesFilter;
}
inline bool TimeSeriesFilterRatio::has_pick_time_series_filter() const {
  return _internal_has_pick_time_series_filter();
}
inline void TimeSeriesFilterRatio::set_has_pick_time_series_filter() {
  _oneof_case_[0] = kPickTimeSeriesFilter;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilterRatio::release_pick_time_series_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.pick_time_series_filter)
  if (_internal_has_pick_time_series_filter()) {
    clear_has_output_filter();
      ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* temp = output_filter_.pick_time_series_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_filter_.pick_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& TimeSeriesFilterRatio::_internal_pick_time_series_filter() const {
  return _internal_has_pick_time_series_filter()
      ? *output_filter_.pick_time_series_filter_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter&>(::google::monitoring::dashboard::v1::_PickTimeSeriesFilter_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::PickTimeSeriesFilter& TimeSeriesFilterRatio::pick_time_series_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.pick_time_series_filter)
  return _internal_pick_time_series_filter();
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilterRatio::unsafe_arena_release_pick_time_series_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.pick_time_series_filter)
  if (_internal_has_pick_time_series_filter()) {
    clear_has_output_filter();
    ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* temp = output_filter_.pick_time_series_filter_;
    output_filter_.pick_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesFilterRatio::unsafe_arena_set_allocated_pick_time_series_filter(::google::monitoring::dashboard::v1::PickTimeSeriesFilter* pick_time_series_filter) {
  clear_output_filter();
  if (pick_time_series_filter) {
    set_has_pick_time_series_filter();
    output_filter_.pick_time_series_filter_ = pick_time_series_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.pick_time_series_filter)
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilterRatio::_internal_mutable_pick_time_series_filter() {
  if (!_internal_has_pick_time_series_filter()) {
    clear_output_filter();
    set_has_pick_time_series_filter();
    output_filter_.pick_time_series_filter_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::PickTimeSeriesFilter >(GetArena());
  }
  return output_filter_.pick_time_series_filter_;
}
inline ::google::monitoring::dashboard::v1::PickTimeSeriesFilter* TimeSeriesFilterRatio::mutable_pick_time_series_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.pick_time_series_filter)
  return _internal_mutable_pick_time_series_filter();
}

// .google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
inline bool TimeSeriesFilterRatio::_internal_has_statistical_time_series_filter() const {
  return output_filter_case() == kStatisticalTimeSeriesFilter;
}
inline bool TimeSeriesFilterRatio::has_statistical_time_series_filter() const {
  return _internal_has_statistical_time_series_filter();
}
inline void TimeSeriesFilterRatio::set_has_statistical_time_series_filter() {
  _oneof_case_[0] = kStatisticalTimeSeriesFilter;
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilterRatio::release_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.statistical_time_series_filter)
  if (_internal_has_statistical_time_series_filter()) {
    clear_has_output_filter();
      ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* temp = output_filter_.statistical_time_series_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_filter_.statistical_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& TimeSeriesFilterRatio::_internal_statistical_time_series_filter() const {
  return _internal_has_statistical_time_series_filter()
      ? *output_filter_.statistical_time_series_filter_
      : reinterpret_cast< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter&>(::google::monitoring::dashboard::v1::_StatisticalTimeSeriesFilter_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter& TimeSeriesFilterRatio::statistical_time_series_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.statistical_time_series_filter)
  return _internal_statistical_time_series_filter();
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilterRatio::unsafe_arena_release_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.statistical_time_series_filter)
  if (_internal_has_statistical_time_series_filter()) {
    clear_has_output_filter();
    ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* temp = output_filter_.statistical_time_series_filter_;
    output_filter_.statistical_time_series_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSeriesFilterRatio::unsafe_arena_set_allocated_statistical_time_series_filter(::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* statistical_time_series_filter) {
  clear_output_filter();
  if (statistical_time_series_filter) {
    set_has_statistical_time_series_filter();
    output_filter_.statistical_time_series_filter_ = statistical_time_series_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.statistical_time_series_filter)
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilterRatio::_internal_mutable_statistical_time_series_filter() {
  if (!_internal_has_statistical_time_series_filter()) {
    clear_output_filter();
    set_has_statistical_time_series_filter();
    output_filter_.statistical_time_series_filter_ = CreateMaybeMessage< ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter >(GetArena());
  }
  return output_filter_.statistical_time_series_filter_;
}
inline ::google::monitoring::dashboard::v1::StatisticalTimeSeriesFilter* TimeSeriesFilterRatio::mutable_statistical_time_series_filter() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.TimeSeriesFilterRatio.statistical_time_series_filter)
  return _internal_mutable_statistical_time_series_filter();
}

inline bool TimeSeriesFilterRatio::has_output_filter() const {
  return output_filter_case() != OUTPUT_FILTER_NOT_SET;
}
inline void TimeSeriesFilterRatio::clear_has_output_filter() {
  _oneof_case_[0] = OUTPUT_FILTER_NOT_SET;
}
inline TimeSeriesFilterRatio::OutputFilterCase TimeSeriesFilterRatio::output_filter_case() const {
  return TimeSeriesFilterRatio::OutputFilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Threshold

// string label = 1;
inline void Threshold::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Threshold::label() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Threshold.label)
  return _internal_label();
}
inline void Threshold::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Threshold.label)
}
inline std::string* Threshold::mutable_label() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.Threshold.label)
  return _internal_mutable_label();
}
inline const std::string& Threshold::_internal_label() const {
  return label_.Get();
}
inline void Threshold::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Threshold::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.Threshold.label)
}
inline void Threshold::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.Threshold.label)
}
inline void Threshold::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.Threshold.label)
}
inline std::string* Threshold::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Threshold::release_label() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.Threshold.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Threshold::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.Threshold.label)
}

// double value = 2;
inline void Threshold::clear_value() {
  value_ = 0;
}
inline double Threshold::_internal_value() const {
  return value_;
}
inline double Threshold::value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Threshold.value)
  return _internal_value();
}
inline void Threshold::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Threshold::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Threshold.value)
}

// .google.monitoring.dashboard.v1.Threshold.Color color = 3;
inline void Threshold::clear_color() {
  color_ = 0;
}
inline ::google::monitoring::dashboard::v1::Threshold_Color Threshold::_internal_color() const {
  return static_cast< ::google::monitoring::dashboard::v1::Threshold_Color >(color_);
}
inline ::google::monitoring::dashboard::v1::Threshold_Color Threshold::color() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Threshold.color)
  return _internal_color();
}
inline void Threshold::_internal_set_color(::google::monitoring::dashboard::v1::Threshold_Color value) {
  
  color_ = value;
}
inline void Threshold::set_color(::google::monitoring::dashboard::v1::Threshold_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Threshold.color)
}

// .google.monitoring.dashboard.v1.Threshold.Direction direction = 4;
inline void Threshold::clear_direction() {
  direction_ = 0;
}
inline ::google::monitoring::dashboard::v1::Threshold_Direction Threshold::_internal_direction() const {
  return static_cast< ::google::monitoring::dashboard::v1::Threshold_Direction >(direction_);
}
inline ::google::monitoring::dashboard::v1::Threshold_Direction Threshold::direction() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.Threshold.direction)
  return _internal_direction();
}
inline void Threshold::_internal_set_direction(::google::monitoring::dashboard::v1::Threshold_Direction value) {
  
  direction_ = value;
}
inline void Threshold::set_direction(::google::monitoring::dashboard::v1::Threshold_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.Threshold.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::Threshold_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::Threshold_Color>() {
  return ::google::monitoring::dashboard::v1::Threshold_Color_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::Threshold_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::Threshold_Direction>() {
  return ::google::monitoring::dashboard::v1::Threshold_Direction_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::SparkChartType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::SparkChartType>() {
  return ::google::monitoring::dashboard::v1::SparkChartType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fmetrics_2eproto
