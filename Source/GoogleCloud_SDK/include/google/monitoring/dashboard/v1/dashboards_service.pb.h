// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/dashboards_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/monitoring/dashboard/v1/dashboard.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/api/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(int index);
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class CreateDashboardRequest;
struct CreateDashboardRequestDefaultTypeInternal;
extern CreateDashboardRequestDefaultTypeInternal _CreateDashboardRequest_default_instance_;
class DeleteDashboardRequest;
struct DeleteDashboardRequestDefaultTypeInternal;
extern DeleteDashboardRequestDefaultTypeInternal _DeleteDashboardRequest_default_instance_;
class GetDashboardRequest;
struct GetDashboardRequestDefaultTypeInternal;
extern GetDashboardRequestDefaultTypeInternal _GetDashboardRequest_default_instance_;
class ListDashboardsRequest;
struct ListDashboardsRequestDefaultTypeInternal;
extern ListDashboardsRequestDefaultTypeInternal _ListDashboardsRequest_default_instance_;
class ListDashboardsResponse;
struct ListDashboardsResponseDefaultTypeInternal;
extern ListDashboardsResponseDefaultTypeInternal _ListDashboardsResponse_default_instance_;
class UpdateDashboardRequest;
struct UpdateDashboardRequestDefaultTypeInternal;
extern UpdateDashboardRequestDefaultTypeInternal _UpdateDashboardRequest_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::CreateDashboardRequest* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::CreateDashboardRequest>(Arena*);
template<> ::google::monitoring::dashboard::v1::DeleteDashboardRequest* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::DeleteDashboardRequest>(Arena*);
template<> ::google::monitoring::dashboard::v1::GetDashboardRequest* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::GetDashboardRequest>(Arena*);
template<> ::google::monitoring::dashboard::v1::ListDashboardsRequest* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::ListDashboardsRequest>(Arena*);
template<> ::google::monitoring::dashboard::v1::ListDashboardsResponse* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::ListDashboardsResponse>(Arena*);
template<> ::google::monitoring::dashboard::v1::UpdateDashboardRequest* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::UpdateDashboardRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

// ===================================================================

class CreateDashboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.CreateDashboardRequest) */ {
 public:
  inline CreateDashboardRequest() : CreateDashboardRequest(nullptr) {}
  virtual ~CreateDashboardRequest();
  explicit constexpr CreateDashboardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDashboardRequest(const CreateDashboardRequest& from);
  CreateDashboardRequest(CreateDashboardRequest&& from) noexcept
    : CreateDashboardRequest() {
    *this = ::std::move(from);
  }

  inline CreateDashboardRequest& operator=(const CreateDashboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDashboardRequest& operator=(CreateDashboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDashboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDashboardRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDashboardRequest*>(
               &_CreateDashboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateDashboardRequest& a, CreateDashboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDashboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDashboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDashboardRequest* New() const final {
    return CreateMaybeMessage<CreateDashboardRequest>(nullptr);
  }

  CreateDashboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDashboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDashboardRequest& from);
  void MergeFrom(const CreateDashboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDashboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.CreateDashboardRequest";
  }
  protected:
  explicit CreateDashboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDashboardFieldNumber = 2,
    kValidateOnlyFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.monitoring.dashboard.v1.Dashboard dashboard = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_dashboard() const;
  private:
  bool _internal_has_dashboard() const;
  public:
  void clear_dashboard();
  const ::google::monitoring::dashboard::v1::Dashboard& dashboard() const;
  ::google::monitoring::dashboard::v1::Dashboard* release_dashboard();
  ::google::monitoring::dashboard::v1::Dashboard* mutable_dashboard();
  void set_allocated_dashboard(::google::monitoring::dashboard::v1::Dashboard* dashboard);
  private:
  const ::google::monitoring::dashboard::v1::Dashboard& _internal_dashboard() const;
  ::google::monitoring::dashboard::v1::Dashboard* _internal_mutable_dashboard();
  public:
  void unsafe_arena_set_allocated_dashboard(
      ::google::monitoring::dashboard::v1::Dashboard* dashboard);
  ::google::monitoring::dashboard::v1::Dashboard* unsafe_arena_release_dashboard();

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.CreateDashboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::monitoring::dashboard::v1::Dashboard* dashboard_;
  bool validate_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDashboardsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.ListDashboardsRequest) */ {
 public:
  inline ListDashboardsRequest() : ListDashboardsRequest(nullptr) {}
  virtual ~ListDashboardsRequest();
  explicit constexpr ListDashboardsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDashboardsRequest(const ListDashboardsRequest& from);
  ListDashboardsRequest(ListDashboardsRequest&& from) noexcept
    : ListDashboardsRequest() {
    *this = ::std::move(from);
  }

  inline ListDashboardsRequest& operator=(const ListDashboardsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDashboardsRequest& operator=(ListDashboardsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDashboardsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDashboardsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDashboardsRequest*>(
               &_ListDashboardsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListDashboardsRequest& a, ListDashboardsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDashboardsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDashboardsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDashboardsRequest* New() const final {
    return CreateMaybeMessage<ListDashboardsRequest>(nullptr);
  }

  ListDashboardsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDashboardsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDashboardsRequest& from);
  void MergeFrom(const ListDashboardsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDashboardsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.ListDashboardsRequest";
  }
  protected:
  explicit ListDashboardsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.ListDashboardsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDashboardsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.ListDashboardsResponse) */ {
 public:
  inline ListDashboardsResponse() : ListDashboardsResponse(nullptr) {}
  virtual ~ListDashboardsResponse();
  explicit constexpr ListDashboardsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDashboardsResponse(const ListDashboardsResponse& from);
  ListDashboardsResponse(ListDashboardsResponse&& from) noexcept
    : ListDashboardsResponse() {
    *this = ::std::move(from);
  }

  inline ListDashboardsResponse& operator=(const ListDashboardsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDashboardsResponse& operator=(ListDashboardsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDashboardsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDashboardsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDashboardsResponse*>(
               &_ListDashboardsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListDashboardsResponse& a, ListDashboardsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDashboardsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDashboardsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDashboardsResponse* New() const final {
    return CreateMaybeMessage<ListDashboardsResponse>(nullptr);
  }

  ListDashboardsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDashboardsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDashboardsResponse& from);
  void MergeFrom(const ListDashboardsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDashboardsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.ListDashboardsResponse";
  }
  protected:
  explicit ListDashboardsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDashboardsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.monitoring.dashboard.v1.Dashboard dashboards = 1;
  int dashboards_size() const;
  private:
  int _internal_dashboards_size() const;
  public:
  void clear_dashboards();
  ::google::monitoring::dashboard::v1::Dashboard* mutable_dashboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Dashboard >*
      mutable_dashboards();
  private:
  const ::google::monitoring::dashboard::v1::Dashboard& _internal_dashboards(int index) const;
  ::google::monitoring::dashboard::v1::Dashboard* _internal_add_dashboards();
  public:
  const ::google::monitoring::dashboard::v1::Dashboard& dashboards(int index) const;
  ::google::monitoring::dashboard::v1::Dashboard* add_dashboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Dashboard >&
      dashboards() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.ListDashboardsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Dashboard > dashboards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDashboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.GetDashboardRequest) */ {
 public:
  inline GetDashboardRequest() : GetDashboardRequest(nullptr) {}
  virtual ~GetDashboardRequest();
  explicit constexpr GetDashboardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDashboardRequest(const GetDashboardRequest& from);
  GetDashboardRequest(GetDashboardRequest&& from) noexcept
    : GetDashboardRequest() {
    *this = ::std::move(from);
  }

  inline GetDashboardRequest& operator=(const GetDashboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDashboardRequest& operator=(GetDashboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDashboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDashboardRequest* internal_default_instance() {
    return reinterpret_cast<const GetDashboardRequest*>(
               &_GetDashboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDashboardRequest& a, GetDashboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDashboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDashboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDashboardRequest* New() const final {
    return CreateMaybeMessage<GetDashboardRequest>(nullptr);
  }

  GetDashboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDashboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDashboardRequest& from);
  void MergeFrom(const GetDashboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDashboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.GetDashboardRequest";
  }
  protected:
  explicit GetDashboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.GetDashboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDashboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.DeleteDashboardRequest) */ {
 public:
  inline DeleteDashboardRequest() : DeleteDashboardRequest(nullptr) {}
  virtual ~DeleteDashboardRequest();
  explicit constexpr DeleteDashboardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDashboardRequest(const DeleteDashboardRequest& from);
  DeleteDashboardRequest(DeleteDashboardRequest&& from) noexcept
    : DeleteDashboardRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDashboardRequest& operator=(const DeleteDashboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDashboardRequest& operator=(DeleteDashboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDashboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDashboardRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDashboardRequest*>(
               &_DeleteDashboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteDashboardRequest& a, DeleteDashboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDashboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDashboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDashboardRequest* New() const final {
    return CreateMaybeMessage<DeleteDashboardRequest>(nullptr);
  }

  DeleteDashboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDashboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDashboardRequest& from);
  void MergeFrom(const DeleteDashboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDashboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.DeleteDashboardRequest";
  }
  protected:
  explicit DeleteDashboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.DeleteDashboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDashboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.UpdateDashboardRequest) */ {
 public:
  inline UpdateDashboardRequest() : UpdateDashboardRequest(nullptr) {}
  virtual ~UpdateDashboardRequest();
  explicit constexpr UpdateDashboardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDashboardRequest(const UpdateDashboardRequest& from);
  UpdateDashboardRequest(UpdateDashboardRequest&& from) noexcept
    : UpdateDashboardRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDashboardRequest& operator=(const UpdateDashboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDashboardRequest& operator=(UpdateDashboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDashboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDashboardRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDashboardRequest*>(
               &_UpdateDashboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateDashboardRequest& a, UpdateDashboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDashboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDashboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDashboardRequest* New() const final {
    return CreateMaybeMessage<UpdateDashboardRequest>(nullptr);
  }

  UpdateDashboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDashboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDashboardRequest& from);
  void MergeFrom(const UpdateDashboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDashboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.UpdateDashboardRequest";
  }
  protected:
  explicit UpdateDashboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDashboardFieldNumber = 1,
    kValidateOnlyFieldNumber = 3,
  };
  // .google.monitoring.dashboard.v1.Dashboard dashboard = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_dashboard() const;
  private:
  bool _internal_has_dashboard() const;
  public:
  void clear_dashboard();
  const ::google::monitoring::dashboard::v1::Dashboard& dashboard() const;
  ::google::monitoring::dashboard::v1::Dashboard* release_dashboard();
  ::google::monitoring::dashboard::v1::Dashboard* mutable_dashboard();
  void set_allocated_dashboard(::google::monitoring::dashboard::v1::Dashboard* dashboard);
  private:
  const ::google::monitoring::dashboard::v1::Dashboard& _internal_dashboard() const;
  ::google::monitoring::dashboard::v1::Dashboard* _internal_mutable_dashboard();
  public:
  void unsafe_arena_set_allocated_dashboard(
      ::google::monitoring::dashboard::v1::Dashboard* dashboard);
  ::google::monitoring::dashboard::v1::Dashboard* unsafe_arena_release_dashboard();

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.UpdateDashboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::monitoring::dashboard::v1::Dashboard* dashboard_;
  bool validate_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateDashboardRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CreateDashboardRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateDashboardRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
  return _internal_parent();
}
inline void CreateDashboardRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
}
inline std::string* CreateDashboardRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateDashboardRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateDashboardRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDashboardRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
}
inline void CreateDashboardRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
}
inline void CreateDashboardRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
}
inline std::string* CreateDashboardRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDashboardRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDashboardRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.CreateDashboardRequest.parent)
}

// .google.monitoring.dashboard.v1.Dashboard dashboard = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateDashboardRequest::_internal_has_dashboard() const {
  return this != internal_default_instance() && dashboard_ != nullptr;
}
inline bool CreateDashboardRequest::has_dashboard() const {
  return _internal_has_dashboard();
}
inline const ::google::monitoring::dashboard::v1::Dashboard& CreateDashboardRequest::_internal_dashboard() const {
  const ::google::monitoring::dashboard::v1::Dashboard* p = dashboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Dashboard&>(
      ::google::monitoring::dashboard::v1::_Dashboard_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Dashboard& CreateDashboardRequest::dashboard() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.CreateDashboardRequest.dashboard)
  return _internal_dashboard();
}
inline void CreateDashboardRequest::unsafe_arena_set_allocated_dashboard(
    ::google::monitoring::dashboard::v1::Dashboard* dashboard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard_);
  }
  dashboard_ = dashboard;
  if (dashboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.CreateDashboardRequest.dashboard)
}
inline ::google::monitoring::dashboard::v1::Dashboard* CreateDashboardRequest::release_dashboard() {
  
  ::google::monitoring::dashboard::v1::Dashboard* temp = dashboard_;
  dashboard_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Dashboard* CreateDashboardRequest::unsafe_arena_release_dashboard() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.CreateDashboardRequest.dashboard)
  
  ::google::monitoring::dashboard::v1::Dashboard* temp = dashboard_;
  dashboard_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Dashboard* CreateDashboardRequest::_internal_mutable_dashboard() {
  
  if (dashboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Dashboard>(GetArena());
    dashboard_ = p;
  }
  return dashboard_;
}
inline ::google::monitoring::dashboard::v1::Dashboard* CreateDashboardRequest::mutable_dashboard() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.CreateDashboardRequest.dashboard)
  return _internal_mutable_dashboard();
}
inline void CreateDashboardRequest::set_allocated_dashboard(::google::monitoring::dashboard::v1::Dashboard* dashboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard_);
  }
  if (dashboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard)->GetArena();
    if (message_arena != submessage_arena) {
      dashboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dashboard, submessage_arena);
    }
    
  } else {
    
  }
  dashboard_ = dashboard;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.CreateDashboardRequest.dashboard)
}

// bool validate_only = 3;
inline void CreateDashboardRequest::clear_validate_only() {
  validate_only_ = false;
}
inline bool CreateDashboardRequest::_internal_validate_only() const {
  return validate_only_;
}
inline bool CreateDashboardRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.CreateDashboardRequest.validate_only)
  return _internal_validate_only();
}
inline void CreateDashboardRequest::_internal_set_validate_only(bool value) {
  
  validate_only_ = value;
}
inline void CreateDashboardRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.CreateDashboardRequest.validate_only)
}

// -------------------------------------------------------------------

// ListDashboardsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDashboardsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListDashboardsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
  return _internal_parent();
}
inline void ListDashboardsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
}
inline std::string* ListDashboardsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListDashboardsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListDashboardsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDashboardsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
}
inline void ListDashboardsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
}
inline void ListDashboardsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
}
inline std::string* ListDashboardsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDashboardsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDashboardsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.ListDashboardsRequest.parent)
}

// int32 page_size = 2;
inline void ListDashboardsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDashboardsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDashboardsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ListDashboardsRequest.page_size)
  return _internal_page_size();
}
inline void ListDashboardsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListDashboardsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.ListDashboardsRequest.page_size)
}

// string page_token = 3;
inline void ListDashboardsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListDashboardsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
  return _internal_page_token();
}
inline void ListDashboardsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
}
inline std::string* ListDashboardsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListDashboardsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDashboardsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDashboardsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
}
inline void ListDashboardsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
}
inline void ListDashboardsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
}
inline std::string* ListDashboardsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDashboardsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDashboardsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.ListDashboardsRequest.page_token)
}

// -------------------------------------------------------------------

// ListDashboardsResponse

// repeated .google.monitoring.dashboard.v1.Dashboard dashboards = 1;
inline int ListDashboardsResponse::_internal_dashboards_size() const {
  return dashboards_.size();
}
inline int ListDashboardsResponse::dashboards_size() const {
  return _internal_dashboards_size();
}
inline ::google::monitoring::dashboard::v1::Dashboard* ListDashboardsResponse::mutable_dashboards(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.ListDashboardsResponse.dashboards)
  return dashboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Dashboard >*
ListDashboardsResponse::mutable_dashboards() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.dashboard.v1.ListDashboardsResponse.dashboards)
  return &dashboards_;
}
inline const ::google::monitoring::dashboard::v1::Dashboard& ListDashboardsResponse::_internal_dashboards(int index) const {
  return dashboards_.Get(index);
}
inline const ::google::monitoring::dashboard::v1::Dashboard& ListDashboardsResponse::dashboards(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ListDashboardsResponse.dashboards)
  return _internal_dashboards(index);
}
inline ::google::monitoring::dashboard::v1::Dashboard* ListDashboardsResponse::_internal_add_dashboards() {
  return dashboards_.Add();
}
inline ::google::monitoring::dashboard::v1::Dashboard* ListDashboardsResponse::add_dashboards() {
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.ListDashboardsResponse.dashboards)
  return _internal_add_dashboards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Dashboard >&
ListDashboardsResponse::dashboards() const {
  // @@protoc_insertion_point(field_list:google.monitoring.dashboard.v1.ListDashboardsResponse.dashboards)
  return dashboards_;
}

// string next_page_token = 2;
inline void ListDashboardsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListDashboardsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListDashboardsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
}
inline std::string* ListDashboardsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListDashboardsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDashboardsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDashboardsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
}
inline void ListDashboardsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
}
inline void ListDashboardsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
}
inline std::string* ListDashboardsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDashboardsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDashboardsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.ListDashboardsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetDashboardRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDashboardRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDashboardRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.GetDashboardRequest.name)
  return _internal_name();
}
inline void GetDashboardRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.GetDashboardRequest.name)
}
inline std::string* GetDashboardRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.GetDashboardRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetDashboardRequest::_internal_name() const {
  return name_.Get();
}
inline void GetDashboardRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDashboardRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.GetDashboardRequest.name)
}
inline void GetDashboardRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.GetDashboardRequest.name)
}
inline void GetDashboardRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.GetDashboardRequest.name)
}
inline std::string* GetDashboardRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDashboardRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.GetDashboardRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDashboardRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.GetDashboardRequest.name)
}

// -------------------------------------------------------------------

// DeleteDashboardRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteDashboardRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteDashboardRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
  return _internal_name();
}
inline void DeleteDashboardRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
}
inline std::string* DeleteDashboardRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteDashboardRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteDashboardRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteDashboardRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
}
inline void DeleteDashboardRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
}
inline void DeleteDashboardRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
}
inline std::string* DeleteDashboardRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteDashboardRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDashboardRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.DeleteDashboardRequest.name)
}

// -------------------------------------------------------------------

// UpdateDashboardRequest

// .google.monitoring.dashboard.v1.Dashboard dashboard = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDashboardRequest::_internal_has_dashboard() const {
  return this != internal_default_instance() && dashboard_ != nullptr;
}
inline bool UpdateDashboardRequest::has_dashboard() const {
  return _internal_has_dashboard();
}
inline const ::google::monitoring::dashboard::v1::Dashboard& UpdateDashboardRequest::_internal_dashboard() const {
  const ::google::monitoring::dashboard::v1::Dashboard* p = dashboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::Dashboard&>(
      ::google::monitoring::dashboard::v1::_Dashboard_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::Dashboard& UpdateDashboardRequest::dashboard() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.UpdateDashboardRequest.dashboard)
  return _internal_dashboard();
}
inline void UpdateDashboardRequest::unsafe_arena_set_allocated_dashboard(
    ::google::monitoring::dashboard::v1::Dashboard* dashboard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard_);
  }
  dashboard_ = dashboard;
  if (dashboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.UpdateDashboardRequest.dashboard)
}
inline ::google::monitoring::dashboard::v1::Dashboard* UpdateDashboardRequest::release_dashboard() {
  
  ::google::monitoring::dashboard::v1::Dashboard* temp = dashboard_;
  dashboard_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::monitoring::dashboard::v1::Dashboard* UpdateDashboardRequest::unsafe_arena_release_dashboard() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.UpdateDashboardRequest.dashboard)
  
  ::google::monitoring::dashboard::v1::Dashboard* temp = dashboard_;
  dashboard_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::Dashboard* UpdateDashboardRequest::_internal_mutable_dashboard() {
  
  if (dashboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::Dashboard>(GetArena());
    dashboard_ = p;
  }
  return dashboard_;
}
inline ::google::monitoring::dashboard::v1::Dashboard* UpdateDashboardRequest::mutable_dashboard() {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.UpdateDashboardRequest.dashboard)
  return _internal_mutable_dashboard();
}
inline void UpdateDashboardRequest::set_allocated_dashboard(::google::monitoring::dashboard::v1::Dashboard* dashboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard_);
  }
  if (dashboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dashboard)->GetArena();
    if (message_arena != submessage_arena) {
      dashboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dashboard, submessage_arena);
    }
    
  } else {
    
  }
  dashboard_ = dashboard;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.UpdateDashboardRequest.dashboard)
}

// bool validate_only = 3;
inline void UpdateDashboardRequest::clear_validate_only() {
  validate_only_ = false;
}
inline bool UpdateDashboardRequest::_internal_validate_only() const {
  return validate_only_;
}
inline bool UpdateDashboardRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.UpdateDashboardRequest.validate_only)
  return _internal_validate_only();
}
inline void UpdateDashboardRequest::_internal_set_validate_only(bool value) {
  
  validate_only_ = value;
}
inline void UpdateDashboardRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.UpdateDashboardRequest.validate_only)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fdashboards_5fservice_2eproto
