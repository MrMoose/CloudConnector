// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/xychart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/monitoring/dashboard/v1/metrics.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto;
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {
class ChartOptions;
struct ChartOptionsDefaultTypeInternal;
extern ChartOptionsDefaultTypeInternal _ChartOptions_default_instance_;
class XyChart;
struct XyChartDefaultTypeInternal;
extern XyChartDefaultTypeInternal _XyChart_default_instance_;
class XyChart_Axis;
struct XyChart_AxisDefaultTypeInternal;
extern XyChart_AxisDefaultTypeInternal _XyChart_Axis_default_instance_;
class XyChart_DataSet;
struct XyChart_DataSetDefaultTypeInternal;
extern XyChart_DataSetDefaultTypeInternal _XyChart_DataSet_default_instance_;
}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::monitoring::dashboard::v1::ChartOptions* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::ChartOptions>(Arena*);
template<> ::google::monitoring::dashboard::v1::XyChart* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart>(Arena*);
template<> ::google::monitoring::dashboard::v1::XyChart_Axis* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart_Axis>(Arena*);
template<> ::google::monitoring::dashboard::v1::XyChart_DataSet* Arena::CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart_DataSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace monitoring {
namespace dashboard {
namespace v1 {

enum XyChart_DataSet_PlotType : int {
  XyChart_DataSet_PlotType_PLOT_TYPE_UNSPECIFIED = 0,
  XyChart_DataSet_PlotType_LINE = 1,
  XyChart_DataSet_PlotType_STACKED_AREA = 2,
  XyChart_DataSet_PlotType_STACKED_BAR = 3,
  XyChart_DataSet_PlotType_HEATMAP = 4,
  XyChart_DataSet_PlotType_XyChart_DataSet_PlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  XyChart_DataSet_PlotType_XyChart_DataSet_PlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool XyChart_DataSet_PlotType_IsValid(int value);
constexpr XyChart_DataSet_PlotType XyChart_DataSet_PlotType_PlotType_MIN = XyChart_DataSet_PlotType_PLOT_TYPE_UNSPECIFIED;
constexpr XyChart_DataSet_PlotType XyChart_DataSet_PlotType_PlotType_MAX = XyChart_DataSet_PlotType_HEATMAP;
constexpr int XyChart_DataSet_PlotType_PlotType_ARRAYSIZE = XyChart_DataSet_PlotType_PlotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* XyChart_DataSet_PlotType_descriptor();
template<typename T>
inline const std::string& XyChart_DataSet_PlotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, XyChart_DataSet_PlotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function XyChart_DataSet_PlotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    XyChart_DataSet_PlotType_descriptor(), enum_t_value);
}
inline bool XyChart_DataSet_PlotType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, XyChart_DataSet_PlotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<XyChart_DataSet_PlotType>(
    XyChart_DataSet_PlotType_descriptor(), name, value);
}
enum XyChart_DataSet_TargetAxis : int {
  XyChart_DataSet_TargetAxis_TARGET_AXIS_UNSPECIFIED = 0,
  XyChart_DataSet_TargetAxis_Y1 = 1,
  XyChart_DataSet_TargetAxis_Y2 = 2,
  XyChart_DataSet_TargetAxis_XyChart_DataSet_TargetAxis_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  XyChart_DataSet_TargetAxis_XyChart_DataSet_TargetAxis_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool XyChart_DataSet_TargetAxis_IsValid(int value);
constexpr XyChart_DataSet_TargetAxis XyChart_DataSet_TargetAxis_TargetAxis_MIN = XyChart_DataSet_TargetAxis_TARGET_AXIS_UNSPECIFIED;
constexpr XyChart_DataSet_TargetAxis XyChart_DataSet_TargetAxis_TargetAxis_MAX = XyChart_DataSet_TargetAxis_Y2;
constexpr int XyChart_DataSet_TargetAxis_TargetAxis_ARRAYSIZE = XyChart_DataSet_TargetAxis_TargetAxis_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* XyChart_DataSet_TargetAxis_descriptor();
template<typename T>
inline const std::string& XyChart_DataSet_TargetAxis_Name(T enum_t_value) {
  static_assert(::std::is_same<T, XyChart_DataSet_TargetAxis>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function XyChart_DataSet_TargetAxis_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    XyChart_DataSet_TargetAxis_descriptor(), enum_t_value);
}
inline bool XyChart_DataSet_TargetAxis_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, XyChart_DataSet_TargetAxis* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<XyChart_DataSet_TargetAxis>(
    XyChart_DataSet_TargetAxis_descriptor(), name, value);
}
enum XyChart_Axis_Scale : int {
  XyChart_Axis_Scale_SCALE_UNSPECIFIED = 0,
  XyChart_Axis_Scale_LINEAR = 1,
  XyChart_Axis_Scale_LOG10 = 2,
  XyChart_Axis_Scale_XyChart_Axis_Scale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  XyChart_Axis_Scale_XyChart_Axis_Scale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool XyChart_Axis_Scale_IsValid(int value);
constexpr XyChart_Axis_Scale XyChart_Axis_Scale_Scale_MIN = XyChart_Axis_Scale_SCALE_UNSPECIFIED;
constexpr XyChart_Axis_Scale XyChart_Axis_Scale_Scale_MAX = XyChart_Axis_Scale_LOG10;
constexpr int XyChart_Axis_Scale_Scale_ARRAYSIZE = XyChart_Axis_Scale_Scale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* XyChart_Axis_Scale_descriptor();
template<typename T>
inline const std::string& XyChart_Axis_Scale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, XyChart_Axis_Scale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function XyChart_Axis_Scale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    XyChart_Axis_Scale_descriptor(), enum_t_value);
}
inline bool XyChart_Axis_Scale_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, XyChart_Axis_Scale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<XyChart_Axis_Scale>(
    XyChart_Axis_Scale_descriptor(), name, value);
}
enum ChartOptions_Mode : int {
  ChartOptions_Mode_MODE_UNSPECIFIED = 0,
  ChartOptions_Mode_COLOR = 1,
  ChartOptions_Mode_X_RAY = 2,
  ChartOptions_Mode_STATS = 3,
  ChartOptions_Mode_ChartOptions_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChartOptions_Mode_ChartOptions_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChartOptions_Mode_IsValid(int value);
constexpr ChartOptions_Mode ChartOptions_Mode_Mode_MIN = ChartOptions_Mode_MODE_UNSPECIFIED;
constexpr ChartOptions_Mode ChartOptions_Mode_Mode_MAX = ChartOptions_Mode_STATS;
constexpr int ChartOptions_Mode_Mode_ARRAYSIZE = ChartOptions_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChartOptions_Mode_descriptor();
template<typename T>
inline const std::string& ChartOptions_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChartOptions_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChartOptions_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChartOptions_Mode_descriptor(), enum_t_value);
}
inline bool ChartOptions_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChartOptions_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChartOptions_Mode>(
    ChartOptions_Mode_descriptor(), name, value);
}
// ===================================================================

class XyChart_DataSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.XyChart.DataSet) */ {
 public:
  inline XyChart_DataSet() : XyChart_DataSet(nullptr) {}
  ~XyChart_DataSet() override;
  explicit PROTOBUF_CONSTEXPR XyChart_DataSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XyChart_DataSet(const XyChart_DataSet& from);
  XyChart_DataSet(XyChart_DataSet&& from) noexcept
    : XyChart_DataSet() {
    *this = ::std::move(from);
  }

  inline XyChart_DataSet& operator=(const XyChart_DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline XyChart_DataSet& operator=(XyChart_DataSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XyChart_DataSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const XyChart_DataSet* internal_default_instance() {
    return reinterpret_cast<const XyChart_DataSet*>(
               &_XyChart_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XyChart_DataSet& a, XyChart_DataSet& b) {
    a.Swap(&b);
  }
  inline void Swap(XyChart_DataSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XyChart_DataSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XyChart_DataSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XyChart_DataSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XyChart_DataSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const XyChart_DataSet& from) {
    XyChart_DataSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XyChart_DataSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.XyChart.DataSet";
  }
  protected:
  explicit XyChart_DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XyChart_DataSet_PlotType PlotType;
  static constexpr PlotType PLOT_TYPE_UNSPECIFIED =
    XyChart_DataSet_PlotType_PLOT_TYPE_UNSPECIFIED;
  static constexpr PlotType LINE =
    XyChart_DataSet_PlotType_LINE;
  static constexpr PlotType STACKED_AREA =
    XyChart_DataSet_PlotType_STACKED_AREA;
  static constexpr PlotType STACKED_BAR =
    XyChart_DataSet_PlotType_STACKED_BAR;
  static constexpr PlotType HEATMAP =
    XyChart_DataSet_PlotType_HEATMAP;
  static inline bool PlotType_IsValid(int value) {
    return XyChart_DataSet_PlotType_IsValid(value);
  }
  static constexpr PlotType PlotType_MIN =
    XyChart_DataSet_PlotType_PlotType_MIN;
  static constexpr PlotType PlotType_MAX =
    XyChart_DataSet_PlotType_PlotType_MAX;
  static constexpr int PlotType_ARRAYSIZE =
    XyChart_DataSet_PlotType_PlotType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlotType_descriptor() {
    return XyChart_DataSet_PlotType_descriptor();
  }
  template<typename T>
  static inline const std::string& PlotType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlotType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlotType_Name.");
    return XyChart_DataSet_PlotType_Name(enum_t_value);
  }
  static inline bool PlotType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlotType* value) {
    return XyChart_DataSet_PlotType_Parse(name, value);
  }

  typedef XyChart_DataSet_TargetAxis TargetAxis;
  static constexpr TargetAxis TARGET_AXIS_UNSPECIFIED =
    XyChart_DataSet_TargetAxis_TARGET_AXIS_UNSPECIFIED;
  static constexpr TargetAxis Y1 =
    XyChart_DataSet_TargetAxis_Y1;
  static constexpr TargetAxis Y2 =
    XyChart_DataSet_TargetAxis_Y2;
  static inline bool TargetAxis_IsValid(int value) {
    return XyChart_DataSet_TargetAxis_IsValid(value);
  }
  static constexpr TargetAxis TargetAxis_MIN =
    XyChart_DataSet_TargetAxis_TargetAxis_MIN;
  static constexpr TargetAxis TargetAxis_MAX =
    XyChart_DataSet_TargetAxis_TargetAxis_MAX;
  static constexpr int TargetAxis_ARRAYSIZE =
    XyChart_DataSet_TargetAxis_TargetAxis_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TargetAxis_descriptor() {
    return XyChart_DataSet_TargetAxis_descriptor();
  }
  template<typename T>
  static inline const std::string& TargetAxis_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TargetAxis>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TargetAxis_Name.");
    return XyChart_DataSet_TargetAxis_Name(enum_t_value);
  }
  static inline bool TargetAxis_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TargetAxis* value) {
    return XyChart_DataSet_TargetAxis_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLegendTemplateFieldNumber = 3,
    kTimeSeriesQueryFieldNumber = 1,
    kMinAlignmentPeriodFieldNumber = 4,
    kPlotTypeFieldNumber = 2,
    kTargetAxisFieldNumber = 5,
  };
  // string legend_template = 3;
  void clear_legend_template();
  const std::string& legend_template() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legend_template(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legend_template();
  PROTOBUF_NODISCARD std::string* release_legend_template();
  void set_allocated_legend_template(std::string* legend_template);
  private:
  const std::string& _internal_legend_template() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legend_template(const std::string& value);
  std::string* _internal_mutable_legend_template();
  public:

  // .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_time_series_query() const;
  private:
  bool _internal_has_time_series_query() const;
  public:
  void clear_time_series_query();
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery& time_series_query() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::TimeSeriesQuery* release_time_series_query();
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* mutable_time_series_query();
  void set_allocated_time_series_query(::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query);
  private:
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery& _internal_time_series_query() const;
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* _internal_mutable_time_series_query();
  public:
  void unsafe_arena_set_allocated_time_series_query(
      ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query);
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* unsafe_arena_release_time_series_query();

  // .google.protobuf.Duration min_alignment_period = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_min_alignment_period() const;
  private:
  bool _internal_has_min_alignment_period() const;
  public:
  void clear_min_alignment_period();
  const ::PROTOBUF_NAMESPACE_ID::Duration& min_alignment_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_min_alignment_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_min_alignment_period();
  void set_allocated_min_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_min_alignment_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_min_alignment_period();
  public:
  void unsafe_arena_set_allocated_min_alignment_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_min_alignment_period();

  // .google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;
  void clear_plot_type();
  ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType plot_type() const;
  void set_plot_type(::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType value);
  private:
  ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType _internal_plot_type() const;
  void _internal_set_plot_type(::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType value);
  public:

  // .google.monitoring.dashboard.v1.XyChart.DataSet.TargetAxis target_axis = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_target_axis();
  ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis target_axis() const;
  void set_target_axis(::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis value);
  private:
  ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis _internal_target_axis() const;
  void _internal_set_target_axis(::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.XyChart.DataSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legend_template_;
    ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query_;
    ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period_;
    int plot_type_;
    int target_axis_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto;
};
// -------------------------------------------------------------------

class XyChart_Axis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.XyChart.Axis) */ {
 public:
  inline XyChart_Axis() : XyChart_Axis(nullptr) {}
  ~XyChart_Axis() override;
  explicit PROTOBUF_CONSTEXPR XyChart_Axis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XyChart_Axis(const XyChart_Axis& from);
  XyChart_Axis(XyChart_Axis&& from) noexcept
    : XyChart_Axis() {
    *this = ::std::move(from);
  }

  inline XyChart_Axis& operator=(const XyChart_Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline XyChart_Axis& operator=(XyChart_Axis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XyChart_Axis& default_instance() {
    return *internal_default_instance();
  }
  static inline const XyChart_Axis* internal_default_instance() {
    return reinterpret_cast<const XyChart_Axis*>(
               &_XyChart_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XyChart_Axis& a, XyChart_Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(XyChart_Axis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XyChart_Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XyChart_Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XyChart_Axis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XyChart_Axis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const XyChart_Axis& from) {
    XyChart_Axis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XyChart_Axis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.XyChart.Axis";
  }
  protected:
  explicit XyChart_Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XyChart_Axis_Scale Scale;
  static constexpr Scale SCALE_UNSPECIFIED =
    XyChart_Axis_Scale_SCALE_UNSPECIFIED;
  static constexpr Scale LINEAR =
    XyChart_Axis_Scale_LINEAR;
  static constexpr Scale LOG10 =
    XyChart_Axis_Scale_LOG10;
  static inline bool Scale_IsValid(int value) {
    return XyChart_Axis_Scale_IsValid(value);
  }
  static constexpr Scale Scale_MIN =
    XyChart_Axis_Scale_Scale_MIN;
  static constexpr Scale Scale_MAX =
    XyChart_Axis_Scale_Scale_MAX;
  static constexpr int Scale_ARRAYSIZE =
    XyChart_Axis_Scale_Scale_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scale_descriptor() {
    return XyChart_Axis_Scale_descriptor();
  }
  template<typename T>
  static inline const std::string& Scale_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scale>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scale_Name.");
    return XyChart_Axis_Scale_Name(enum_t_value);
  }
  static inline bool Scale_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scale* value) {
    return XyChart_Axis_Scale_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .google.monitoring.dashboard.v1.XyChart.Axis.Scale scale = 2;
  void clear_scale();
  ::google::monitoring::dashboard::v1::XyChart_Axis_Scale scale() const;
  void set_scale(::google::monitoring::dashboard::v1::XyChart_Axis_Scale value);
  private:
  ::google::monitoring::dashboard::v1::XyChart_Axis_Scale _internal_scale() const;
  void _internal_set_scale(::google::monitoring::dashboard::v1::XyChart_Axis_Scale value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.XyChart.Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    int scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto;
};
// -------------------------------------------------------------------

class XyChart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.XyChart) */ {
 public:
  inline XyChart() : XyChart(nullptr) {}
  ~XyChart() override;
  explicit PROTOBUF_CONSTEXPR XyChart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XyChart(const XyChart& from);
  XyChart(XyChart&& from) noexcept
    : XyChart() {
    *this = ::std::move(from);
  }

  inline XyChart& operator=(const XyChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline XyChart& operator=(XyChart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XyChart& default_instance() {
    return *internal_default_instance();
  }
  static inline const XyChart* internal_default_instance() {
    return reinterpret_cast<const XyChart*>(
               &_XyChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XyChart& a, XyChart& b) {
    a.Swap(&b);
  }
  inline void Swap(XyChart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XyChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XyChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XyChart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XyChart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const XyChart& from) {
    XyChart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XyChart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.XyChart";
  }
  protected:
  explicit XyChart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XyChart_DataSet DataSet;
  typedef XyChart_Axis Axis;

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetsFieldNumber = 1,
    kThresholdsFieldNumber = 5,
    kTimeshiftDurationFieldNumber = 4,
    kXAxisFieldNumber = 6,
    kYAxisFieldNumber = 7,
    kChartOptionsFieldNumber = 8,
    kY2AxisFieldNumber = 9,
  };
  // repeated .google.monitoring.dashboard.v1.XyChart.DataSet data_sets = 1 [(.google.api.field_behavior) = REQUIRED];
  int data_sets_size() const;
  private:
  int _internal_data_sets_size() const;
  public:
  void clear_data_sets();
  ::google::monitoring::dashboard::v1::XyChart_DataSet* mutable_data_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::XyChart_DataSet >*
      mutable_data_sets();
  private:
  const ::google::monitoring::dashboard::v1::XyChart_DataSet& _internal_data_sets(int index) const;
  ::google::monitoring::dashboard::v1::XyChart_DataSet* _internal_add_data_sets();
  public:
  const ::google::monitoring::dashboard::v1::XyChart_DataSet& data_sets(int index) const;
  ::google::monitoring::dashboard::v1::XyChart_DataSet* add_data_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::XyChart_DataSet >&
      data_sets() const;

  // repeated .google.monitoring.dashboard.v1.Threshold thresholds = 5;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  ::google::monitoring::dashboard::v1::Threshold* mutable_thresholds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >*
      mutable_thresholds();
  private:
  const ::google::monitoring::dashboard::v1::Threshold& _internal_thresholds(int index) const;
  ::google::monitoring::dashboard::v1::Threshold* _internal_add_thresholds();
  public:
  const ::google::monitoring::dashboard::v1::Threshold& thresholds(int index) const;
  ::google::monitoring::dashboard::v1::Threshold* add_thresholds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >&
      thresholds() const;

  // .google.protobuf.Duration timeshift_duration = 4;
  bool has_timeshift_duration() const;
  private:
  bool _internal_has_timeshift_duration() const;
  public:
  void clear_timeshift_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& timeshift_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_timeshift_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_timeshift_duration();
  void set_allocated_timeshift_duration(::PROTOBUF_NAMESPACE_ID::Duration* timeshift_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_timeshift_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeshift_duration();
  public:
  void unsafe_arena_set_allocated_timeshift_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* timeshift_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeshift_duration();

  // .google.monitoring.dashboard.v1.XyChart.Axis x_axis = 6;
  bool has_x_axis() const;
  private:
  bool _internal_has_x_axis() const;
  public:
  void clear_x_axis();
  const ::google::monitoring::dashboard::v1::XyChart_Axis& x_axis() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::XyChart_Axis* release_x_axis();
  ::google::monitoring::dashboard::v1::XyChart_Axis* mutable_x_axis();
  void set_allocated_x_axis(::google::monitoring::dashboard::v1::XyChart_Axis* x_axis);
  private:
  const ::google::monitoring::dashboard::v1::XyChart_Axis& _internal_x_axis() const;
  ::google::monitoring::dashboard::v1::XyChart_Axis* _internal_mutable_x_axis();
  public:
  void unsafe_arena_set_allocated_x_axis(
      ::google::monitoring::dashboard::v1::XyChart_Axis* x_axis);
  ::google::monitoring::dashboard::v1::XyChart_Axis* unsafe_arena_release_x_axis();

  // .google.monitoring.dashboard.v1.XyChart.Axis y_axis = 7;
  bool has_y_axis() const;
  private:
  bool _internal_has_y_axis() const;
  public:
  void clear_y_axis();
  const ::google::monitoring::dashboard::v1::XyChart_Axis& y_axis() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::XyChart_Axis* release_y_axis();
  ::google::monitoring::dashboard::v1::XyChart_Axis* mutable_y_axis();
  void set_allocated_y_axis(::google::monitoring::dashboard::v1::XyChart_Axis* y_axis);
  private:
  const ::google::monitoring::dashboard::v1::XyChart_Axis& _internal_y_axis() const;
  ::google::monitoring::dashboard::v1::XyChart_Axis* _internal_mutable_y_axis();
  public:
  void unsafe_arena_set_allocated_y_axis(
      ::google::monitoring::dashboard::v1::XyChart_Axis* y_axis);
  ::google::monitoring::dashboard::v1::XyChart_Axis* unsafe_arena_release_y_axis();

  // .google.monitoring.dashboard.v1.ChartOptions chart_options = 8;
  bool has_chart_options() const;
  private:
  bool _internal_has_chart_options() const;
  public:
  void clear_chart_options();
  const ::google::monitoring::dashboard::v1::ChartOptions& chart_options() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::ChartOptions* release_chart_options();
  ::google::monitoring::dashboard::v1::ChartOptions* mutable_chart_options();
  void set_allocated_chart_options(::google::monitoring::dashboard::v1::ChartOptions* chart_options);
  private:
  const ::google::monitoring::dashboard::v1::ChartOptions& _internal_chart_options() const;
  ::google::monitoring::dashboard::v1::ChartOptions* _internal_mutable_chart_options();
  public:
  void unsafe_arena_set_allocated_chart_options(
      ::google::monitoring::dashboard::v1::ChartOptions* chart_options);
  ::google::monitoring::dashboard::v1::ChartOptions* unsafe_arena_release_chart_options();

  // .google.monitoring.dashboard.v1.XyChart.Axis y2_axis = 9;
  bool has_y2_axis() const;
  private:
  bool _internal_has_y2_axis() const;
  public:
  void clear_y2_axis();
  const ::google::monitoring::dashboard::v1::XyChart_Axis& y2_axis() const;
  PROTOBUF_NODISCARD ::google::monitoring::dashboard::v1::XyChart_Axis* release_y2_axis();
  ::google::monitoring::dashboard::v1::XyChart_Axis* mutable_y2_axis();
  void set_allocated_y2_axis(::google::monitoring::dashboard::v1::XyChart_Axis* y2_axis);
  private:
  const ::google::monitoring::dashboard::v1::XyChart_Axis& _internal_y2_axis() const;
  ::google::monitoring::dashboard::v1::XyChart_Axis* _internal_mutable_y2_axis();
  public:
  void unsafe_arena_set_allocated_y2_axis(
      ::google::monitoring::dashboard::v1::XyChart_Axis* y2_axis);
  ::google::monitoring::dashboard::v1::XyChart_Axis* unsafe_arena_release_y2_axis();

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.XyChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::XyChart_DataSet > data_sets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold > thresholds_;
    ::PROTOBUF_NAMESPACE_ID::Duration* timeshift_duration_;
    ::google::monitoring::dashboard::v1::XyChart_Axis* x_axis_;
    ::google::monitoring::dashboard::v1::XyChart_Axis* y_axis_;
    ::google::monitoring::dashboard::v1::ChartOptions* chart_options_;
    ::google::monitoring::dashboard::v1::XyChart_Axis* y2_axis_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto;
};
// -------------------------------------------------------------------

class ChartOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.monitoring.dashboard.v1.ChartOptions) */ {
 public:
  inline ChartOptions() : ChartOptions(nullptr) {}
  ~ChartOptions() override;
  explicit PROTOBUF_CONSTEXPR ChartOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartOptions(const ChartOptions& from);
  ChartOptions(ChartOptions&& from) noexcept
    : ChartOptions() {
    *this = ::std::move(from);
  }

  inline ChartOptions& operator=(const ChartOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartOptions& operator=(ChartOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartOptions* internal_default_instance() {
    return reinterpret_cast<const ChartOptions*>(
               &_ChartOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChartOptions& a, ChartOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartOptions& from) {
    ChartOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.monitoring.dashboard.v1.ChartOptions";
  }
  protected:
  explicit ChartOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartOptions_Mode Mode;
  static constexpr Mode MODE_UNSPECIFIED =
    ChartOptions_Mode_MODE_UNSPECIFIED;
  static constexpr Mode COLOR =
    ChartOptions_Mode_COLOR;
  static constexpr Mode X_RAY =
    ChartOptions_Mode_X_RAY;
  static constexpr Mode STATS =
    ChartOptions_Mode_STATS;
  static inline bool Mode_IsValid(int value) {
    return ChartOptions_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    ChartOptions_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    ChartOptions_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    ChartOptions_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return ChartOptions_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return ChartOptions_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return ChartOptions_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .google.monitoring.dashboard.v1.ChartOptions.Mode mode = 1;
  void clear_mode();
  ::google::monitoring::dashboard::v1::ChartOptions_Mode mode() const;
  void set_mode(::google::monitoring::dashboard::v1::ChartOptions_Mode value);
  private:
  ::google::monitoring::dashboard::v1::ChartOptions_Mode _internal_mode() const;
  void _internal_set_mode(::google::monitoring::dashboard::v1::ChartOptions_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.ChartOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XyChart_DataSet

// .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool XyChart_DataSet::_internal_has_time_series_query() const {
  return this != internal_default_instance() && _impl_.time_series_query_ != nullptr;
}
inline bool XyChart_DataSet::has_time_series_query() const {
  return _internal_has_time_series_query();
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesQuery& XyChart_DataSet::_internal_time_series_query() const {
  const ::google::monitoring::dashboard::v1::TimeSeriesQuery* p = _impl_.time_series_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::TimeSeriesQuery&>(
      ::google::monitoring::dashboard::v1::_TimeSeriesQuery_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::TimeSeriesQuery& XyChart_DataSet::time_series_query() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.DataSet.time_series_query)
  return _internal_time_series_query();
}
inline void XyChart_DataSet::unsafe_arena_set_allocated_time_series_query(
    ::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_query_);
  }
  _impl_.time_series_query_ = time_series_query;
  if (time_series_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.DataSet.time_series_query)
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* XyChart_DataSet::release_time_series_query() {
  
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* temp = _impl_.time_series_query_;
  _impl_.time_series_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* XyChart_DataSet::unsafe_arena_release_time_series_query() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.DataSet.time_series_query)
  
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* temp = _impl_.time_series_query_;
  _impl_.time_series_query_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* XyChart_DataSet::_internal_mutable_time_series_query() {
  
  if (_impl_.time_series_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::TimeSeriesQuery>(GetArenaForAllocation());
    _impl_.time_series_query_ = p;
  }
  return _impl_.time_series_query_;
}
inline ::google::monitoring::dashboard::v1::TimeSeriesQuery* XyChart_DataSet::mutable_time_series_query() {
  ::google::monitoring::dashboard::v1::TimeSeriesQuery* _msg = _internal_mutable_time_series_query();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.DataSet.time_series_query)
  return _msg;
}
inline void XyChart_DataSet::set_allocated_time_series_query(::google::monitoring::dashboard::v1::TimeSeriesQuery* time_series_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_series_query_);
  }
  if (time_series_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_series_query));
    if (message_arena != submessage_arena) {
      time_series_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_series_query, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_series_query_ = time_series_query;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.DataSet.time_series_query)
}

// .google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;
inline void XyChart_DataSet::clear_plot_type() {
  _impl_.plot_type_ = 0;
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType XyChart_DataSet::_internal_plot_type() const {
  return static_cast< ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType >(_impl_.plot_type_);
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType XyChart_DataSet::plot_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.DataSet.plot_type)
  return _internal_plot_type();
}
inline void XyChart_DataSet::_internal_set_plot_type(::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType value) {
  
  _impl_.plot_type_ = value;
}
inline void XyChart_DataSet::set_plot_type(::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType value) {
  _internal_set_plot_type(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.XyChart.DataSet.plot_type)
}

// string legend_template = 3;
inline void XyChart_DataSet::clear_legend_template() {
  _impl_.legend_template_.ClearToEmpty();
}
inline const std::string& XyChart_DataSet::legend_template() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.DataSet.legend_template)
  return _internal_legend_template();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XyChart_DataSet::set_legend_template(ArgT0&& arg0, ArgT... args) {
 
 _impl_.legend_template_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.XyChart.DataSet.legend_template)
}
inline std::string* XyChart_DataSet::mutable_legend_template() {
  std::string* _s = _internal_mutable_legend_template();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.DataSet.legend_template)
  return _s;
}
inline const std::string& XyChart_DataSet::_internal_legend_template() const {
  return _impl_.legend_template_.Get();
}
inline void XyChart_DataSet::_internal_set_legend_template(const std::string& value) {
  
  _impl_.legend_template_.Set(value, GetArenaForAllocation());
}
inline std::string* XyChart_DataSet::_internal_mutable_legend_template() {
  
  return _impl_.legend_template_.Mutable(GetArenaForAllocation());
}
inline std::string* XyChart_DataSet::release_legend_template() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.DataSet.legend_template)
  return _impl_.legend_template_.Release();
}
inline void XyChart_DataSet::set_allocated_legend_template(std::string* legend_template) {
  if (legend_template != nullptr) {
    
  } else {
    
  }
  _impl_.legend_template_.SetAllocated(legend_template, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legend_template_.IsDefault()) {
    _impl_.legend_template_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.DataSet.legend_template)
}

// .google.protobuf.Duration min_alignment_period = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool XyChart_DataSet::_internal_has_min_alignment_period() const {
  return this != internal_default_instance() && _impl_.min_alignment_period_ != nullptr;
}
inline bool XyChart_DataSet::has_min_alignment_period() const {
  return _internal_has_min_alignment_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& XyChart_DataSet::_internal_min_alignment_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.min_alignment_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& XyChart_DataSet::min_alignment_period() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.DataSet.min_alignment_period)
  return _internal_min_alignment_period();
}
inline void XyChart_DataSet::unsafe_arena_set_allocated_min_alignment_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_alignment_period_);
  }
  _impl_.min_alignment_period_ = min_alignment_period;
  if (min_alignment_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.DataSet.min_alignment_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart_DataSet::release_min_alignment_period() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.min_alignment_period_;
  _impl_.min_alignment_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart_DataSet::unsafe_arena_release_min_alignment_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.DataSet.min_alignment_period)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.min_alignment_period_;
  _impl_.min_alignment_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart_DataSet::_internal_mutable_min_alignment_period() {
  
  if (_impl_.min_alignment_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.min_alignment_period_ = p;
  }
  return _impl_.min_alignment_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart_DataSet::mutable_min_alignment_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_min_alignment_period();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.DataSet.min_alignment_period)
  return _msg;
}
inline void XyChart_DataSet::set_allocated_min_alignment_period(::PROTOBUF_NAMESPACE_ID::Duration* min_alignment_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_alignment_period_);
  }
  if (min_alignment_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_alignment_period));
    if (message_arena != submessage_arena) {
      min_alignment_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_alignment_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_alignment_period_ = min_alignment_period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.DataSet.min_alignment_period)
}

// .google.monitoring.dashboard.v1.XyChart.DataSet.TargetAxis target_axis = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void XyChart_DataSet::clear_target_axis() {
  _impl_.target_axis_ = 0;
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis XyChart_DataSet::_internal_target_axis() const {
  return static_cast< ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis >(_impl_.target_axis_);
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis XyChart_DataSet::target_axis() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.DataSet.target_axis)
  return _internal_target_axis();
}
inline void XyChart_DataSet::_internal_set_target_axis(::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis value) {
  
  _impl_.target_axis_ = value;
}
inline void XyChart_DataSet::set_target_axis(::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis value) {
  _internal_set_target_axis(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.XyChart.DataSet.target_axis)
}

// -------------------------------------------------------------------

// XyChart_Axis

// string label = 1;
inline void XyChart_Axis::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& XyChart_Axis::label() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.Axis.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XyChart_Axis::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.XyChart.Axis.label)
}
inline std::string* XyChart_Axis::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.Axis.label)
  return _s;
}
inline const std::string& XyChart_Axis::_internal_label() const {
  return _impl_.label_.Get();
}
inline void XyChart_Axis::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* XyChart_Axis::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* XyChart_Axis::release_label() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.Axis.label)
  return _impl_.label_.Release();
}
inline void XyChart_Axis::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.Axis.label)
}

// .google.monitoring.dashboard.v1.XyChart.Axis.Scale scale = 2;
inline void XyChart_Axis::clear_scale() {
  _impl_.scale_ = 0;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis_Scale XyChart_Axis::_internal_scale() const {
  return static_cast< ::google::monitoring::dashboard::v1::XyChart_Axis_Scale >(_impl_.scale_);
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis_Scale XyChart_Axis::scale() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.Axis.scale)
  return _internal_scale();
}
inline void XyChart_Axis::_internal_set_scale(::google::monitoring::dashboard::v1::XyChart_Axis_Scale value) {
  
  _impl_.scale_ = value;
}
inline void XyChart_Axis::set_scale(::google::monitoring::dashboard::v1::XyChart_Axis_Scale value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.XyChart.Axis.scale)
}

// -------------------------------------------------------------------

// XyChart

// repeated .google.monitoring.dashboard.v1.XyChart.DataSet data_sets = 1 [(.google.api.field_behavior) = REQUIRED];
inline int XyChart::_internal_data_sets_size() const {
  return _impl_.data_sets_.size();
}
inline int XyChart::data_sets_size() const {
  return _internal_data_sets_size();
}
inline void XyChart::clear_data_sets() {
  _impl_.data_sets_.Clear();
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet* XyChart::mutable_data_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.data_sets)
  return _impl_.data_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::XyChart_DataSet >*
XyChart::mutable_data_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.dashboard.v1.XyChart.data_sets)
  return &_impl_.data_sets_;
}
inline const ::google::monitoring::dashboard::v1::XyChart_DataSet& XyChart::_internal_data_sets(int index) const {
  return _impl_.data_sets_.Get(index);
}
inline const ::google::monitoring::dashboard::v1::XyChart_DataSet& XyChart::data_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.data_sets)
  return _internal_data_sets(index);
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet* XyChart::_internal_add_data_sets() {
  return _impl_.data_sets_.Add();
}
inline ::google::monitoring::dashboard::v1::XyChart_DataSet* XyChart::add_data_sets() {
  ::google::monitoring::dashboard::v1::XyChart_DataSet* _add = _internal_add_data_sets();
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.XyChart.data_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::XyChart_DataSet >&
XyChart::data_sets() const {
  // @@protoc_insertion_point(field_list:google.monitoring.dashboard.v1.XyChart.data_sets)
  return _impl_.data_sets_;
}

// .google.protobuf.Duration timeshift_duration = 4;
inline bool XyChart::_internal_has_timeshift_duration() const {
  return this != internal_default_instance() && _impl_.timeshift_duration_ != nullptr;
}
inline bool XyChart::has_timeshift_duration() const {
  return _internal_has_timeshift_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& XyChart::_internal_timeshift_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.timeshift_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& XyChart::timeshift_duration() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.timeshift_duration)
  return _internal_timeshift_duration();
}
inline void XyChart::unsafe_arena_set_allocated_timeshift_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* timeshift_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeshift_duration_);
  }
  _impl_.timeshift_duration_ = timeshift_duration;
  if (timeshift_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.timeshift_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart::release_timeshift_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timeshift_duration_;
  _impl_.timeshift_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart::unsafe_arena_release_timeshift_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.timeshift_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timeshift_duration_;
  _impl_.timeshift_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart::_internal_mutable_timeshift_duration() {
  
  if (_impl_.timeshift_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.timeshift_duration_ = p;
  }
  return _impl_.timeshift_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* XyChart::mutable_timeshift_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_timeshift_duration();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.timeshift_duration)
  return _msg;
}
inline void XyChart::set_allocated_timeshift_duration(::PROTOBUF_NAMESPACE_ID::Duration* timeshift_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeshift_duration_);
  }
  if (timeshift_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeshift_duration));
    if (message_arena != submessage_arena) {
      timeshift_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeshift_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timeshift_duration_ = timeshift_duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.timeshift_duration)
}

// repeated .google.monitoring.dashboard.v1.Threshold thresholds = 5;
inline int XyChart::_internal_thresholds_size() const {
  return _impl_.thresholds_.size();
}
inline int XyChart::thresholds_size() const {
  return _internal_thresholds_size();
}
inline ::google::monitoring::dashboard::v1::Threshold* XyChart::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.thresholds)
  return _impl_.thresholds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >*
XyChart::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.dashboard.v1.XyChart.thresholds)
  return &_impl_.thresholds_;
}
inline const ::google::monitoring::dashboard::v1::Threshold& XyChart::_internal_thresholds(int index) const {
  return _impl_.thresholds_.Get(index);
}
inline const ::google::monitoring::dashboard::v1::Threshold& XyChart::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.thresholds)
  return _internal_thresholds(index);
}
inline ::google::monitoring::dashboard::v1::Threshold* XyChart::_internal_add_thresholds() {
  return _impl_.thresholds_.Add();
}
inline ::google::monitoring::dashboard::v1::Threshold* XyChart::add_thresholds() {
  ::google::monitoring::dashboard::v1::Threshold* _add = _internal_add_thresholds();
  // @@protoc_insertion_point(field_add:google.monitoring.dashboard.v1.XyChart.thresholds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::monitoring::dashboard::v1::Threshold >&
XyChart::thresholds() const {
  // @@protoc_insertion_point(field_list:google.monitoring.dashboard.v1.XyChart.thresholds)
  return _impl_.thresholds_;
}

// .google.monitoring.dashboard.v1.XyChart.Axis x_axis = 6;
inline bool XyChart::_internal_has_x_axis() const {
  return this != internal_default_instance() && _impl_.x_axis_ != nullptr;
}
inline bool XyChart::has_x_axis() const {
  return _internal_has_x_axis();
}
inline void XyChart::clear_x_axis() {
  if (GetArenaForAllocation() == nullptr && _impl_.x_axis_ != nullptr) {
    delete _impl_.x_axis_;
  }
  _impl_.x_axis_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::_internal_x_axis() const {
  const ::google::monitoring::dashboard::v1::XyChart_Axis* p = _impl_.x_axis_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::XyChart_Axis&>(
      ::google::monitoring::dashboard::v1::_XyChart_Axis_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::x_axis() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.x_axis)
  return _internal_x_axis();
}
inline void XyChart::unsafe_arena_set_allocated_x_axis(
    ::google::monitoring::dashboard::v1::XyChart_Axis* x_axis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_axis_);
  }
  _impl_.x_axis_ = x_axis;
  if (x_axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.x_axis)
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::release_x_axis() {
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.x_axis_;
  _impl_.x_axis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::unsafe_arena_release_x_axis() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.x_axis)
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.x_axis_;
  _impl_.x_axis_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::_internal_mutable_x_axis() {
  
  if (_impl_.x_axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart_Axis>(GetArenaForAllocation());
    _impl_.x_axis_ = p;
  }
  return _impl_.x_axis_;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::mutable_x_axis() {
  ::google::monitoring::dashboard::v1::XyChart_Axis* _msg = _internal_mutable_x_axis();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.x_axis)
  return _msg;
}
inline void XyChart::set_allocated_x_axis(::google::monitoring::dashboard::v1::XyChart_Axis* x_axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.x_axis_;
  }
  if (x_axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(x_axis);
    if (message_arena != submessage_arena) {
      x_axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_axis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_axis_ = x_axis;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.x_axis)
}

// .google.monitoring.dashboard.v1.XyChart.Axis y_axis = 7;
inline bool XyChart::_internal_has_y_axis() const {
  return this != internal_default_instance() && _impl_.y_axis_ != nullptr;
}
inline bool XyChart::has_y_axis() const {
  return _internal_has_y_axis();
}
inline void XyChart::clear_y_axis() {
  if (GetArenaForAllocation() == nullptr && _impl_.y_axis_ != nullptr) {
    delete _impl_.y_axis_;
  }
  _impl_.y_axis_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::_internal_y_axis() const {
  const ::google::monitoring::dashboard::v1::XyChart_Axis* p = _impl_.y_axis_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::XyChart_Axis&>(
      ::google::monitoring::dashboard::v1::_XyChart_Axis_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::y_axis() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.y_axis)
  return _internal_y_axis();
}
inline void XyChart::unsafe_arena_set_allocated_y_axis(
    ::google::monitoring::dashboard::v1::XyChart_Axis* y_axis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_axis_);
  }
  _impl_.y_axis_ = y_axis;
  if (y_axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.y_axis)
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::release_y_axis() {
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.y_axis_;
  _impl_.y_axis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::unsafe_arena_release_y_axis() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.y_axis)
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.y_axis_;
  _impl_.y_axis_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::_internal_mutable_y_axis() {
  
  if (_impl_.y_axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart_Axis>(GetArenaForAllocation());
    _impl_.y_axis_ = p;
  }
  return _impl_.y_axis_;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::mutable_y_axis() {
  ::google::monitoring::dashboard::v1::XyChart_Axis* _msg = _internal_mutable_y_axis();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.y_axis)
  return _msg;
}
inline void XyChart::set_allocated_y_axis(::google::monitoring::dashboard::v1::XyChart_Axis* y_axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.y_axis_;
  }
  if (y_axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(y_axis);
    if (message_arena != submessage_arena) {
      y_axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y_axis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_axis_ = y_axis;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.y_axis)
}

// .google.monitoring.dashboard.v1.XyChart.Axis y2_axis = 9;
inline bool XyChart::_internal_has_y2_axis() const {
  return this != internal_default_instance() && _impl_.y2_axis_ != nullptr;
}
inline bool XyChart::has_y2_axis() const {
  return _internal_has_y2_axis();
}
inline void XyChart::clear_y2_axis() {
  if (GetArenaForAllocation() == nullptr && _impl_.y2_axis_ != nullptr) {
    delete _impl_.y2_axis_;
  }
  _impl_.y2_axis_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::_internal_y2_axis() const {
  const ::google::monitoring::dashboard::v1::XyChart_Axis* p = _impl_.y2_axis_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::XyChart_Axis&>(
      ::google::monitoring::dashboard::v1::_XyChart_Axis_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::XyChart_Axis& XyChart::y2_axis() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.y2_axis)
  return _internal_y2_axis();
}
inline void XyChart::unsafe_arena_set_allocated_y2_axis(
    ::google::monitoring::dashboard::v1::XyChart_Axis* y2_axis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y2_axis_);
  }
  _impl_.y2_axis_ = y2_axis;
  if (y2_axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.y2_axis)
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::release_y2_axis() {
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.y2_axis_;
  _impl_.y2_axis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::unsafe_arena_release_y2_axis() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.y2_axis)
  
  ::google::monitoring::dashboard::v1::XyChart_Axis* temp = _impl_.y2_axis_;
  _impl_.y2_axis_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::_internal_mutable_y2_axis() {
  
  if (_impl_.y2_axis_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::XyChart_Axis>(GetArenaForAllocation());
    _impl_.y2_axis_ = p;
  }
  return _impl_.y2_axis_;
}
inline ::google::monitoring::dashboard::v1::XyChart_Axis* XyChart::mutable_y2_axis() {
  ::google::monitoring::dashboard::v1::XyChart_Axis* _msg = _internal_mutable_y2_axis();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.y2_axis)
  return _msg;
}
inline void XyChart::set_allocated_y2_axis(::google::monitoring::dashboard::v1::XyChart_Axis* y2_axis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.y2_axis_;
  }
  if (y2_axis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(y2_axis);
    if (message_arena != submessage_arena) {
      y2_axis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y2_axis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y2_axis_ = y2_axis;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.y2_axis)
}

// .google.monitoring.dashboard.v1.ChartOptions chart_options = 8;
inline bool XyChart::_internal_has_chart_options() const {
  return this != internal_default_instance() && _impl_.chart_options_ != nullptr;
}
inline bool XyChart::has_chart_options() const {
  return _internal_has_chart_options();
}
inline void XyChart::clear_chart_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.chart_options_ != nullptr) {
    delete _impl_.chart_options_;
  }
  _impl_.chart_options_ = nullptr;
}
inline const ::google::monitoring::dashboard::v1::ChartOptions& XyChart::_internal_chart_options() const {
  const ::google::monitoring::dashboard::v1::ChartOptions* p = _impl_.chart_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::monitoring::dashboard::v1::ChartOptions&>(
      ::google::monitoring::dashboard::v1::_ChartOptions_default_instance_);
}
inline const ::google::monitoring::dashboard::v1::ChartOptions& XyChart::chart_options() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.XyChart.chart_options)
  return _internal_chart_options();
}
inline void XyChart::unsafe_arena_set_allocated_chart_options(
    ::google::monitoring::dashboard::v1::ChartOptions* chart_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_options_);
  }
  _impl_.chart_options_ = chart_options;
  if (chart_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.monitoring.dashboard.v1.XyChart.chart_options)
}
inline ::google::monitoring::dashboard::v1::ChartOptions* XyChart::release_chart_options() {
  
  ::google::monitoring::dashboard::v1::ChartOptions* temp = _impl_.chart_options_;
  _impl_.chart_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::monitoring::dashboard::v1::ChartOptions* XyChart::unsafe_arena_release_chart_options() {
  // @@protoc_insertion_point(field_release:google.monitoring.dashboard.v1.XyChart.chart_options)
  
  ::google::monitoring::dashboard::v1::ChartOptions* temp = _impl_.chart_options_;
  _impl_.chart_options_ = nullptr;
  return temp;
}
inline ::google::monitoring::dashboard::v1::ChartOptions* XyChart::_internal_mutable_chart_options() {
  
  if (_impl_.chart_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::monitoring::dashboard::v1::ChartOptions>(GetArenaForAllocation());
    _impl_.chart_options_ = p;
  }
  return _impl_.chart_options_;
}
inline ::google::monitoring::dashboard::v1::ChartOptions* XyChart::mutable_chart_options() {
  ::google::monitoring::dashboard::v1::ChartOptions* _msg = _internal_mutable_chart_options();
  // @@protoc_insertion_point(field_mutable:google.monitoring.dashboard.v1.XyChart.chart_options)
  return _msg;
}
inline void XyChart::set_allocated_chart_options(::google::monitoring::dashboard::v1::ChartOptions* chart_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chart_options_;
  }
  if (chart_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chart_options);
    if (message_arena != submessage_arena) {
      chart_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chart_options_ = chart_options;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.dashboard.v1.XyChart.chart_options)
}

// -------------------------------------------------------------------

// ChartOptions

// .google.monitoring.dashboard.v1.ChartOptions.Mode mode = 1;
inline void ChartOptions::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::google::monitoring::dashboard::v1::ChartOptions_Mode ChartOptions::_internal_mode() const {
  return static_cast< ::google::monitoring::dashboard::v1::ChartOptions_Mode >(_impl_.mode_);
}
inline ::google::monitoring::dashboard::v1::ChartOptions_Mode ChartOptions::mode() const {
  // @@protoc_insertion_point(field_get:google.monitoring.dashboard.v1.ChartOptions.mode)
  return _internal_mode();
}
inline void ChartOptions::_internal_set_mode(::google::monitoring::dashboard::v1::ChartOptions_Mode value) {
  
  _impl_.mode_ = value;
}
inline void ChartOptions::set_mode(::google::monitoring::dashboard::v1::ChartOptions_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:google.monitoring.dashboard.v1.ChartOptions.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dashboard
}  // namespace monitoring
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType>() {
  return ::google::monitoring::dashboard::v1::XyChart_DataSet_PlotType_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis>() {
  return ::google::monitoring::dashboard::v1::XyChart_DataSet_TargetAxis_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::XyChart_Axis_Scale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::XyChart_Axis_Scale>() {
  return ::google::monitoring::dashboard::v1::XyChart_Axis_Scale_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::dashboard::v1::ChartOptions_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::dashboard::v1::ChartOptions_Mode>() {
  return ::google::monitoring::dashboard::v1::ChartOptions_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fmonitoring_2fdashboard_2fv1_2fxychart_2eproto
