// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/metricsscope/v1/metrics_scopes.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fmonitoring_2fmetricsscope_2fv1_2fmetrics_5fscopes_2eproto__INCLUDED
#define GRPC_google_2fmonitoring_2fmetricsscope_2fv1_2fmetrics_5fscopes_2eproto__INCLUDED

#include "google/monitoring/metricsscope/v1/metrics_scopes.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace monitoring {
namespace metricsscope {
namespace v1 {

// Manages Cloud Monitoring Metrics Scopes, and the monitoring of Google Cloud
// projects and AWS accounts.
class MetricsScopes final {
 public:
  static constexpr char const* service_full_name() {
    return "google.monitoring.metricsscope.v1.MetricsScopes";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns a specific `Metrics Scope`.
    virtual ::grpc::Status GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::google::monitoring::metricsscope::v1::MetricsScope* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>> AsyncGetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>>(AsyncGetMetricsScopeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>> PrepareAsyncGetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>>(PrepareAsyncGetMetricsScopeRaw(context, request, cq));
    }
    // Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
    // has been added to. The metrics scope representing the specified monitored
    // project will always be the first entry in the response.
    virtual ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>> AsyncListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>>(AsyncListMetricsScopesByMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>> PrepareAsyncListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>>(PrepareAsyncListMetricsScopesByMonitoredProjectRaw(context, request, cq));
    }
    // Adds a `MonitoredProject` with the given project ID
    // to the specified `Metrics Scope`.
    virtual ::grpc::Status CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateMonitoredProjectRaw(context, request, cq));
    }
    // Deletes a `MonitoredProject` from the specified `Metrics Scope`.
    virtual ::grpc::Status DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteMonitoredProjectRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Returns a specific `Metrics Scope`.
      virtual void GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
      // has been added to. The metrics scope representing the specified monitored
      // project will always be the first entry in the response.
      virtual void ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds a `MonitoredProject` with the given project ID
      // to the specified `Metrics Scope`.
      virtual void CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a `MonitoredProject` from the specified `Metrics Scope`.
      virtual void DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>* AsyncGetMetricsScopeRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::MetricsScope>* PrepareAsyncGetMetricsScopeRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* AsyncListMetricsScopesByMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* PrepareAsyncListMetricsScopesByMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::google::monitoring::metricsscope::v1::MetricsScope* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>> AsyncGetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>>(AsyncGetMetricsScopeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>> PrepareAsyncGetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>>(PrepareAsyncGetMetricsScopeRaw(context, request, cq));
    }
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>> AsyncListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>>(AsyncListMetricsScopesByMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>> PrepareAsyncListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>>(PrepareAsyncListMetricsScopesByMonitoredProjectRaw(context, request, cq));
    }
    ::grpc::Status CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateMonitoredProjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteMonitoredProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteMonitoredProjectRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response, std::function<void(::grpc::Status)>) override;
      void GetMetricsScope(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void ListMetricsScopesByMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteMonitoredProject(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>* AsyncGetMetricsScopeRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::MetricsScope>* PrepareAsyncGetMetricsScopeRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* AsyncListMetricsScopesByMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* PrepareAsyncListMetricsScopesByMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteMonitoredProjectRaw(::grpc::ClientContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetricsScope_;
    const ::grpc::internal::RpcMethod rpcmethod_ListMetricsScopesByMonitoredProject_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMonitoredProject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMonitoredProject_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns a specific `Metrics Scope`.
    virtual ::grpc::Status GetMetricsScope(::grpc::ServerContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response);
    // Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
    // has been added to. The metrics scope representing the specified monitored
    // project will always be the first entry in the response.
    virtual ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response);
    // Adds a `MonitoredProject` with the given project ID
    // to the specified `Metrics Scope`.
    virtual ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response);
    // Deletes a `MonitoredProject` from the specified `Metrics Scope`.
    virtual ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetricsScope(::grpc::ServerContext* context, ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::metricsscope::v1::MetricsScope>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMetricsScopesByMonitoredProject(::grpc::ServerContext* context, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMonitoredProject(::grpc::ServerContext* context, ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMonitoredProject(::grpc::ServerContext* context, ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMetricsScope<WithAsyncMethod_ListMetricsScopesByMonitoredProject<WithAsyncMethod_CreateMonitoredProject<WithAsyncMethod_DeleteMonitoredProject<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest, ::google::monitoring::metricsscope::v1::MetricsScope>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* request, ::google::monitoring::metricsscope::v1::MetricsScope* response) { return this->GetMetricsScope(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetricsScope(
        ::grpc::MessageAllocator< ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest, ::google::monitoring::metricsscope::v1::MetricsScope>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest, ::google::monitoring::metricsscope::v1::MetricsScope>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetricsScope(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* request, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* response) { return this->ListMetricsScopesByMonitoredProject(context, request, response); }));}
    void SetMessageAllocatorFor_ListMetricsScopesByMonitoredProject(
        ::grpc::MessageAllocator< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMetricsScopesByMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* request, ::google::longrunning::Operation* response) { return this->CreateMonitoredProject(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMonitoredProject(
        ::grpc::MessageAllocator< ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* request, ::google::longrunning::Operation* response) { return this->DeleteMonitoredProject(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMonitoredProject(
        ::grpc::MessageAllocator< ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMetricsScope<WithCallbackMethod_ListMetricsScopesByMonitoredProject<WithCallbackMethod_CreateMonitoredProject<WithCallbackMethod_DeleteMonitoredProject<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetricsScope(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMetricsScopesByMonitoredProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMonitoredProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMonitoredProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetricsScope(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetricsScope(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListMetricsScopesByMonitoredProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMetricsScopesByMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMonitoredProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMonitoredProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMonitoredProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetricsScope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetricsScope() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest, ::google::monitoring::metricsscope::v1::MetricsScope>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest, ::google::monitoring::metricsscope::v1::MetricsScope>* streamer) {
                       return this->StreamedGetMetricsScope(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetricsScope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetricsScope(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest* /*request*/, ::google::monitoring::metricsscope::v1::MetricsScope* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetricsScope(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::metricsscope::v1::GetMetricsScopeRequest,::google::monitoring::metricsscope::v1::MetricsScope>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMetricsScopesByMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListMetricsScopesByMonitoredProject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* streamer) {
                       return this->StreamedListMetricsScopesByMonitoredProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListMetricsScopesByMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMetricsScopesByMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest* /*request*/, ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMetricsScopesByMonitoredProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectRequest,::google::monitoring::metricsscope::v1::ListMetricsScopesByMonitoredProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMonitoredProject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedCreateMonitoredProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMonitoredProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::metricsscope::v1::CreateMonitoredProjectRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMonitoredProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMonitoredProject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedDeleteMonitoredProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMonitoredProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMonitoredProject(::grpc::ServerContext* /*context*/, const ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMonitoredProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::monitoring::metricsscope::v1::DeleteMonitoredProjectRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMetricsScope<WithStreamedUnaryMethod_ListMetricsScopesByMonitoredProject<WithStreamedUnaryMethod_CreateMonitoredProject<WithStreamedUnaryMethod_DeleteMonitoredProject<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMetricsScope<WithStreamedUnaryMethod_ListMetricsScopesByMonitoredProject<WithStreamedUnaryMethod_CreateMonitoredProject<WithStreamedUnaryMethod_DeleteMonitoredProject<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace metricsscope
}  // namespace monitoring
}  // namespace google


#endif  // GRPC_google_2fmonitoring_2fmetricsscope_2fv1_2fmetrics_5fscopes_2eproto__INCLUDED
