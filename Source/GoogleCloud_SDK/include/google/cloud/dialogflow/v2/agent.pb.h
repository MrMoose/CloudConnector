// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/validation_result.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class Agent;
struct AgentDefaultTypeInternal;
extern AgentDefaultTypeInternal _Agent_default_instance_;
class DeleteAgentRequest;
struct DeleteAgentRequestDefaultTypeInternal;
extern DeleteAgentRequestDefaultTypeInternal _DeleteAgentRequest_default_instance_;
class ExportAgentRequest;
struct ExportAgentRequestDefaultTypeInternal;
extern ExportAgentRequestDefaultTypeInternal _ExportAgentRequest_default_instance_;
class ExportAgentResponse;
struct ExportAgentResponseDefaultTypeInternal;
extern ExportAgentResponseDefaultTypeInternal _ExportAgentResponse_default_instance_;
class GetAgentRequest;
struct GetAgentRequestDefaultTypeInternal;
extern GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;
class GetValidationResultRequest;
struct GetValidationResultRequestDefaultTypeInternal;
extern GetValidationResultRequestDefaultTypeInternal _GetValidationResultRequest_default_instance_;
class ImportAgentRequest;
struct ImportAgentRequestDefaultTypeInternal;
extern ImportAgentRequestDefaultTypeInternal _ImportAgentRequest_default_instance_;
class RestoreAgentRequest;
struct RestoreAgentRequestDefaultTypeInternal;
extern RestoreAgentRequestDefaultTypeInternal _RestoreAgentRequest_default_instance_;
class SearchAgentsRequest;
struct SearchAgentsRequestDefaultTypeInternal;
extern SearchAgentsRequestDefaultTypeInternal _SearchAgentsRequest_default_instance_;
class SearchAgentsResponse;
struct SearchAgentsResponseDefaultTypeInternal;
extern SearchAgentsResponseDefaultTypeInternal _SearchAgentsResponse_default_instance_;
class SetAgentRequest;
struct SetAgentRequestDefaultTypeInternal;
extern SetAgentRequestDefaultTypeInternal _SetAgentRequest_default_instance_;
class TrainAgentRequest;
struct TrainAgentRequestDefaultTypeInternal;
extern TrainAgentRequestDefaultTypeInternal _TrainAgentRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::Agent* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Agent>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ExportAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ExportAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ExportAgentResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ExportAgentResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetValidationResultRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetValidationResultRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::RestoreAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::RestoreAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::SearchAgentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SearchAgentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::SearchAgentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SearchAgentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::SetAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SetAgentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::TrainAgentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::TrainAgentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Agent_MatchMode : int {
  Agent_MatchMode_MATCH_MODE_UNSPECIFIED = 0,
  Agent_MatchMode_MATCH_MODE_HYBRID = 1,
  Agent_MatchMode_MATCH_MODE_ML_ONLY = 2,
  Agent_MatchMode_Agent_MatchMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Agent_MatchMode_Agent_MatchMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Agent_MatchMode_IsValid(int value);
constexpr Agent_MatchMode Agent_MatchMode_MatchMode_MIN = Agent_MatchMode_MATCH_MODE_UNSPECIFIED;
constexpr Agent_MatchMode Agent_MatchMode_MatchMode_MAX = Agent_MatchMode_MATCH_MODE_ML_ONLY;
constexpr int Agent_MatchMode_MatchMode_ARRAYSIZE = Agent_MatchMode_MatchMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Agent_MatchMode_descriptor();
template<typename T>
inline const std::string& Agent_MatchMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Agent_MatchMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Agent_MatchMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Agent_MatchMode_descriptor(), enum_t_value);
}
inline bool Agent_MatchMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Agent_MatchMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Agent_MatchMode>(
    Agent_MatchMode_descriptor(), name, value);
}
enum Agent_ApiVersion : int {
  Agent_ApiVersion_API_VERSION_UNSPECIFIED = 0,
  Agent_ApiVersion_API_VERSION_V1 = 1,
  Agent_ApiVersion_API_VERSION_V2 = 2,
  Agent_ApiVersion_API_VERSION_V2_BETA_1 = 3,
  Agent_ApiVersion_Agent_ApiVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Agent_ApiVersion_Agent_ApiVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Agent_ApiVersion_IsValid(int value);
constexpr Agent_ApiVersion Agent_ApiVersion_ApiVersion_MIN = Agent_ApiVersion_API_VERSION_UNSPECIFIED;
constexpr Agent_ApiVersion Agent_ApiVersion_ApiVersion_MAX = Agent_ApiVersion_API_VERSION_V2_BETA_1;
constexpr int Agent_ApiVersion_ApiVersion_ARRAYSIZE = Agent_ApiVersion_ApiVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Agent_ApiVersion_descriptor();
template<typename T>
inline const std::string& Agent_ApiVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Agent_ApiVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Agent_ApiVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Agent_ApiVersion_descriptor(), enum_t_value);
}
inline bool Agent_ApiVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Agent_ApiVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Agent_ApiVersion>(
    Agent_ApiVersion_descriptor(), name, value);
}
enum Agent_Tier : int {
  Agent_Tier_TIER_UNSPECIFIED = 0,
  Agent_Tier_TIER_STANDARD = 1,
  Agent_Tier_TIER_ENTERPRISE = 2,
  Agent_Tier_TIER_ENTERPRISE_PLUS PROTOBUF_DEPRECATED_ENUM = 3,
  Agent_Tier_Agent_Tier_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Agent_Tier_Agent_Tier_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Agent_Tier_IsValid(int value);
constexpr Agent_Tier Agent_Tier_Tier_MIN = Agent_Tier_TIER_UNSPECIFIED;
constexpr Agent_Tier Agent_Tier_Tier_MAX = Agent_Tier_TIER_ENTERPRISE_PLUS;
constexpr int Agent_Tier_Tier_ARRAYSIZE = Agent_Tier_Tier_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Agent_Tier_descriptor();
template<typename T>
inline const std::string& Agent_Tier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Agent_Tier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Agent_Tier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Agent_Tier_descriptor(), enum_t_value);
}
inline bool Agent_Tier_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Agent_Tier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Agent_Tier>(
    Agent_Tier_descriptor(), name, value);
}
// ===================================================================

class Agent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Agent) */ {
 public:
  inline Agent() : Agent(nullptr) {}
  ~Agent() override;
  explicit PROTOBUF_CONSTEXPR Agent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Agent(const Agent& from);
  Agent(Agent&& from) noexcept
    : Agent() {
    *this = ::std::move(from);
  }

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agent& operator=(Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Agent* internal_default_instance() {
    return reinterpret_cast<const Agent*>(
               &_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Agent& a, Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Agent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Agent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Agent& from) {
    Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Agent";
  }
  protected:
  explicit Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Agent_MatchMode MatchMode;
  static constexpr MatchMode MATCH_MODE_UNSPECIFIED =
    Agent_MatchMode_MATCH_MODE_UNSPECIFIED;
  static constexpr MatchMode MATCH_MODE_HYBRID =
    Agent_MatchMode_MATCH_MODE_HYBRID;
  static constexpr MatchMode MATCH_MODE_ML_ONLY =
    Agent_MatchMode_MATCH_MODE_ML_ONLY;
  static inline bool MatchMode_IsValid(int value) {
    return Agent_MatchMode_IsValid(value);
  }
  static constexpr MatchMode MatchMode_MIN =
    Agent_MatchMode_MatchMode_MIN;
  static constexpr MatchMode MatchMode_MAX =
    Agent_MatchMode_MatchMode_MAX;
  static constexpr int MatchMode_ARRAYSIZE =
    Agent_MatchMode_MatchMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatchMode_descriptor() {
    return Agent_MatchMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MatchMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatchMode_Name.");
    return Agent_MatchMode_Name(enum_t_value);
  }
  static inline bool MatchMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatchMode* value) {
    return Agent_MatchMode_Parse(name, value);
  }

  typedef Agent_ApiVersion ApiVersion;
  static constexpr ApiVersion API_VERSION_UNSPECIFIED =
    Agent_ApiVersion_API_VERSION_UNSPECIFIED;
  static constexpr ApiVersion API_VERSION_V1 =
    Agent_ApiVersion_API_VERSION_V1;
  static constexpr ApiVersion API_VERSION_V2 =
    Agent_ApiVersion_API_VERSION_V2;
  static constexpr ApiVersion API_VERSION_V2_BETA_1 =
    Agent_ApiVersion_API_VERSION_V2_BETA_1;
  static inline bool ApiVersion_IsValid(int value) {
    return Agent_ApiVersion_IsValid(value);
  }
  static constexpr ApiVersion ApiVersion_MIN =
    Agent_ApiVersion_ApiVersion_MIN;
  static constexpr ApiVersion ApiVersion_MAX =
    Agent_ApiVersion_ApiVersion_MAX;
  static constexpr int ApiVersion_ARRAYSIZE =
    Agent_ApiVersion_ApiVersion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApiVersion_descriptor() {
    return Agent_ApiVersion_descriptor();
  }
  template<typename T>
  static inline const std::string& ApiVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApiVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApiVersion_Name.");
    return Agent_ApiVersion_Name(enum_t_value);
  }
  static inline bool ApiVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ApiVersion* value) {
    return Agent_ApiVersion_Parse(name, value);
  }

  typedef Agent_Tier Tier;
  static constexpr Tier TIER_UNSPECIFIED =
    Agent_Tier_TIER_UNSPECIFIED;
  static constexpr Tier TIER_STANDARD =
    Agent_Tier_TIER_STANDARD;
  static constexpr Tier TIER_ENTERPRISE =
    Agent_Tier_TIER_ENTERPRISE;
  PROTOBUF_DEPRECATED_ENUM static constexpr Tier TIER_ENTERPRISE_PLUS =
    Agent_Tier_TIER_ENTERPRISE_PLUS;
  static inline bool Tier_IsValid(int value) {
    return Agent_Tier_IsValid(value);
  }
  static constexpr Tier Tier_MIN =
    Agent_Tier_Tier_MIN;
  static constexpr Tier Tier_MAX =
    Agent_Tier_Tier_MAX;
  static constexpr int Tier_ARRAYSIZE =
    Agent_Tier_Tier_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Tier_descriptor() {
    return Agent_Tier_descriptor();
  }
  template<typename T>
  static inline const std::string& Tier_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Tier>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Tier_Name.");
    return Agent_Tier_Name(enum_t_value);
  }
  static inline bool Tier_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Tier* value) {
    return Agent_Tier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedLanguageCodesFieldNumber = 4,
    kParentFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDefaultLanguageCodeFieldNumber = 3,
    kTimeZoneFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kAvatarUriFieldNumber = 7,
    kEnableLoggingFieldNumber = 8,
    kMatchModeFieldNumber = 9,
    kClassificationThresholdFieldNumber = 10,
    kApiVersionFieldNumber = 14,
    kTierFieldNumber = 15,
  };
  // repeated string supported_language_codes = 4 [(.google.api.field_behavior) = OPTIONAL];
  int supported_language_codes_size() const;
  private:
  int _internal_supported_language_codes_size() const;
  public:
  void clear_supported_language_codes();
  const std::string& supported_language_codes(int index) const;
  std::string* mutable_supported_language_codes(int index);
  void set_supported_language_codes(int index, const std::string& value);
  void set_supported_language_codes(int index, std::string&& value);
  void set_supported_language_codes(int index, const char* value);
  void set_supported_language_codes(int index, const char* value, size_t size);
  std::string* add_supported_language_codes();
  void add_supported_language_codes(const std::string& value);
  void add_supported_language_codes(std::string&& value);
  void add_supported_language_codes(const char* value);
  void add_supported_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_language_codes();
  private:
  const std::string& _internal_supported_language_codes(int index) const;
  std::string* _internal_add_supported_language_codes();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string default_language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_default_language_code();
  const std::string& default_language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_language_code();
  PROTOBUF_NODISCARD std::string* release_default_language_code();
  void set_allocated_default_language_code(std::string* default_language_code);
  private:
  const std::string& _internal_default_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_language_code(const std::string& value);
  std::string* _internal_mutable_default_language_code();
  public:

  // string time_zone = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_time_zone();
  const std::string& time_zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_zone();
  PROTOBUF_NODISCARD std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // string description = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_uri = 7 [(.google.api.field_behavior) = OPTIONAL];
  void clear_avatar_uri();
  const std::string& avatar_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_uri();
  PROTOBUF_NODISCARD std::string* release_avatar_uri();
  void set_allocated_avatar_uri(std::string* avatar_uri);
  private:
  const std::string& _internal_avatar_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_uri(const std::string& value);
  std::string* _internal_mutable_avatar_uri();
  public:

  // bool enable_logging = 8 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enable_logging();
  bool enable_logging() const;
  void set_enable_logging(bool value);
  private:
  bool _internal_enable_logging() const;
  void _internal_set_enable_logging(bool value);
  public:

  // .google.cloud.dialogflow.v2.Agent.MatchMode match_mode = 9 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  PROTOBUF_DEPRECATED void clear_match_mode();
  PROTOBUF_DEPRECATED ::google::cloud::dialogflow::v2::Agent_MatchMode match_mode() const;
  PROTOBUF_DEPRECATED void set_match_mode(::google::cloud::dialogflow::v2::Agent_MatchMode value);
  private:
  ::google::cloud::dialogflow::v2::Agent_MatchMode _internal_match_mode() const;
  void _internal_set_match_mode(::google::cloud::dialogflow::v2::Agent_MatchMode value);
  public:

  // float classification_threshold = 10 [(.google.api.field_behavior) = OPTIONAL];
  void clear_classification_threshold();
  float classification_threshold() const;
  void set_classification_threshold(float value);
  private:
  float _internal_classification_threshold() const;
  void _internal_set_classification_threshold(float value);
  public:

  // .google.cloud.dialogflow.v2.Agent.ApiVersion api_version = 14 [(.google.api.field_behavior) = OPTIONAL];
  void clear_api_version();
  ::google::cloud::dialogflow::v2::Agent_ApiVersion api_version() const;
  void set_api_version(::google::cloud::dialogflow::v2::Agent_ApiVersion value);
  private:
  ::google::cloud::dialogflow::v2::Agent_ApiVersion _internal_api_version() const;
  void _internal_set_api_version(::google::cloud::dialogflow::v2::Agent_ApiVersion value);
  public:

  // .google.cloud.dialogflow.v2.Agent.Tier tier = 15 [(.google.api.field_behavior) = OPTIONAL];
  void clear_tier();
  ::google::cloud::dialogflow::v2::Agent_Tier tier() const;
  void set_tier(::google::cloud::dialogflow::v2::Agent_Tier value);
  private:
  ::google::cloud::dialogflow::v2::Agent_Tier _internal_tier() const;
  void _internal_set_tier(::google::cloud::dialogflow::v2::Agent_Tier value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_language_codes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_uri_;
    bool enable_logging_;
    int match_mode_;
    float classification_threshold_;
    int api_version_;
    int tier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetAgentRequest) */ {
 public:
  inline GetAgentRequest() : GetAgentRequest(nullptr) {}
  ~GetAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentRequest(const GetAgentRequest& from);
  GetAgentRequest(GetAgentRequest&& from) noexcept
    : GetAgentRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentRequest& operator=(const GetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentRequest& operator=(GetAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentRequest*>(
               &_GetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAgentRequest& a, GetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAgentRequest& from) {
    GetAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetAgentRequest";
  }
  protected:
  explicit GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SetAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SetAgentRequest) */ {
 public:
  inline SetAgentRequest() : SetAgentRequest(nullptr) {}
  ~SetAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR SetAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAgentRequest(const SetAgentRequest& from);
  SetAgentRequest(SetAgentRequest&& from) noexcept
    : SetAgentRequest() {
    *this = ::std::move(from);
  }

  inline SetAgentRequest& operator=(const SetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAgentRequest& operator=(SetAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const SetAgentRequest*>(
               &_SetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAgentRequest& a, SetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetAgentRequest& from) {
    SetAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SetAgentRequest";
  }
  protected:
  explicit SetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.Agent agent = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::google::cloud::dialogflow::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Agent* release_agent();
  ::google::cloud::dialogflow::v2::Agent* mutable_agent();
  void set_allocated_agent(::google::cloud::dialogflow::v2::Agent* agent);
  private:
  const ::google::cloud::dialogflow::v2::Agent& _internal_agent() const;
  ::google::cloud::dialogflow::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::google::cloud::dialogflow::v2::Agent* agent);
  ::google::cloud::dialogflow::v2::Agent* unsafe_arena_release_agent();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::Agent* agent_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteAgentRequest) */ {
 public:
  inline DeleteAgentRequest() : DeleteAgentRequest(nullptr) {}
  ~DeleteAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAgentRequest(const DeleteAgentRequest& from);
  DeleteAgentRequest(DeleteAgentRequest&& from) noexcept
    : DeleteAgentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAgentRequest& operator=(const DeleteAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentRequest& operator=(DeleteAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAgentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentRequest*>(
               &_DeleteAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteAgentRequest& a, DeleteAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteAgentRequest& from) {
    DeleteAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteAgentRequest";
  }
  protected:
  explicit DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SearchAgentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SearchAgentsRequest) */ {
 public:
  inline SearchAgentsRequest() : SearchAgentsRequest(nullptr) {}
  ~SearchAgentsRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchAgentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAgentsRequest(const SearchAgentsRequest& from);
  SearchAgentsRequest(SearchAgentsRequest&& from) noexcept
    : SearchAgentsRequest() {
    *this = ::std::move(from);
  }

  inline SearchAgentsRequest& operator=(const SearchAgentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAgentsRequest& operator=(SearchAgentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAgentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAgentsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchAgentsRequest*>(
               &_SearchAgentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchAgentsRequest& a, SearchAgentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAgentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAgentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAgentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAgentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAgentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAgentsRequest& from) {
    SearchAgentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAgentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SearchAgentsRequest";
  }
  protected:
  explicit SearchAgentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SearchAgentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SearchAgentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SearchAgentsResponse) */ {
 public:
  inline SearchAgentsResponse() : SearchAgentsResponse(nullptr) {}
  ~SearchAgentsResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchAgentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchAgentsResponse(const SearchAgentsResponse& from);
  SearchAgentsResponse(SearchAgentsResponse&& from) noexcept
    : SearchAgentsResponse() {
    *this = ::std::move(from);
  }

  inline SearchAgentsResponse& operator=(const SearchAgentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchAgentsResponse& operator=(SearchAgentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchAgentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchAgentsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchAgentsResponse*>(
               &_SearchAgentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchAgentsResponse& a, SearchAgentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchAgentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchAgentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchAgentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchAgentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchAgentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchAgentsResponse& from) {
    SearchAgentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchAgentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SearchAgentsResponse";
  }
  protected:
  explicit SearchAgentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::google::cloud::dialogflow::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Agent >*
      mutable_agents();
  private:
  const ::google::cloud::dialogflow::v2::Agent& _internal_agents(int index) const;
  ::google::cloud::dialogflow::v2::Agent* _internal_add_agents();
  public:
  const ::google::cloud::dialogflow::v2::Agent& agents(int index) const;
  ::google::cloud::dialogflow::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Agent >&
      agents() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SearchAgentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Agent > agents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class TrainAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.TrainAgentRequest) */ {
 public:
  inline TrainAgentRequest() : TrainAgentRequest(nullptr) {}
  ~TrainAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR TrainAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainAgentRequest(const TrainAgentRequest& from);
  TrainAgentRequest(TrainAgentRequest&& from) noexcept
    : TrainAgentRequest() {
    *this = ::std::move(from);
  }

  inline TrainAgentRequest& operator=(const TrainAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainAgentRequest& operator=(TrainAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainAgentRequest* internal_default_instance() {
    return reinterpret_cast<const TrainAgentRequest*>(
               &_TrainAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrainAgentRequest& a, TrainAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrainAgentRequest& from) {
    TrainAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.TrainAgentRequest";
  }
  protected:
  explicit TrainAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.TrainAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ExportAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ExportAgentRequest) */ {
 public:
  inline ExportAgentRequest() : ExportAgentRequest(nullptr) {}
  ~ExportAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR ExportAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportAgentRequest(const ExportAgentRequest& from);
  ExportAgentRequest(ExportAgentRequest&& from) noexcept
    : ExportAgentRequest() {
    *this = ::std::move(from);
  }

  inline ExportAgentRequest& operator=(const ExportAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportAgentRequest& operator=(ExportAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportAgentRequest* internal_default_instance() {
    return reinterpret_cast<const ExportAgentRequest*>(
               &_ExportAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExportAgentRequest& a, ExportAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportAgentRequest& from) {
    ExportAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ExportAgentRequest";
  }
  protected:
  explicit ExportAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAgentUriFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string agent_uri = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_agent_uri();
  const std::string& agent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_uri();
  PROTOBUF_NODISCARD std::string* release_agent_uri();
  void set_allocated_agent_uri(std::string* agent_uri);
  private:
  const std::string& _internal_agent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_uri(const std::string& value);
  std::string* _internal_mutable_agent_uri();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ExportAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ExportAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ExportAgentResponse) */ {
 public:
  inline ExportAgentResponse() : ExportAgentResponse(nullptr) {}
  ~ExportAgentResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportAgentResponse(const ExportAgentResponse& from);
  ExportAgentResponse(ExportAgentResponse&& from) noexcept
    : ExportAgentResponse() {
    *this = ::std::move(from);
  }

  inline ExportAgentResponse& operator=(const ExportAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportAgentResponse& operator=(ExportAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  enum AgentCase {
    kAgentUri = 1,
    kAgentContent = 2,
    AGENT_NOT_SET = 0,
  };

  static inline const ExportAgentResponse* internal_default_instance() {
    return reinterpret_cast<const ExportAgentResponse*>(
               &_ExportAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExportAgentResponse& a, ExportAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportAgentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportAgentResponse& from) {
    ExportAgentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportAgentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ExportAgentResponse";
  }
  protected:
  explicit ExportAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentUriFieldNumber = 1,
    kAgentContentFieldNumber = 2,
  };
  // string agent_uri = 1;
  bool has_agent_uri() const;
  private:
  bool _internal_has_agent_uri() const;
  public:
  void clear_agent_uri();
  const std::string& agent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_uri();
  PROTOBUF_NODISCARD std::string* release_agent_uri();
  void set_allocated_agent_uri(std::string* agent_uri);
  private:
  const std::string& _internal_agent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_uri(const std::string& value);
  std::string* _internal_mutable_agent_uri();
  public:

  // bytes agent_content = 2;
  bool has_agent_content() const;
  private:
  bool _internal_has_agent_content() const;
  public:
  void clear_agent_content();
  const std::string& agent_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_content();
  PROTOBUF_NODISCARD std::string* release_agent_content();
  void set_allocated_agent_content(std::string* agent_content);
  private:
  const std::string& _internal_agent_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_content(const std::string& value);
  std::string* _internal_mutable_agent_content();
  public:

  void clear_agent();
  AgentCase agent_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ExportAgentResponse)
 private:
  class _Internal;
  void set_has_agent_uri();
  void set_has_agent_content();

  inline bool has_agent() const;
  inline void clear_has_agent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AgentUnion {
      constexpr AgentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_uri_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_content_;
    } agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ImportAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportAgentRequest) */ {
 public:
  inline ImportAgentRequest() : ImportAgentRequest(nullptr) {}
  ~ImportAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAgentRequest(const ImportAgentRequest& from);
  ImportAgentRequest(ImportAgentRequest&& from) noexcept
    : ImportAgentRequest() {
    *this = ::std::move(from);
  }

  inline ImportAgentRequest& operator=(const ImportAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAgentRequest& operator=(ImportAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum AgentCase {
    kAgentUri = 2,
    kAgentContent = 3,
    AGENT_NOT_SET = 0,
  };

  static inline const ImportAgentRequest* internal_default_instance() {
    return reinterpret_cast<const ImportAgentRequest*>(
               &_ImportAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImportAgentRequest& a, ImportAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportAgentRequest& from) {
    ImportAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportAgentRequest";
  }
  protected:
  explicit ImportAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAgentUriFieldNumber = 2,
    kAgentContentFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string agent_uri = 2;
  bool has_agent_uri() const;
  private:
  bool _internal_has_agent_uri() const;
  public:
  void clear_agent_uri();
  const std::string& agent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_uri();
  PROTOBUF_NODISCARD std::string* release_agent_uri();
  void set_allocated_agent_uri(std::string* agent_uri);
  private:
  const std::string& _internal_agent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_uri(const std::string& value);
  std::string* _internal_mutable_agent_uri();
  public:

  // bytes agent_content = 3;
  bool has_agent_content() const;
  private:
  bool _internal_has_agent_content() const;
  public:
  void clear_agent_content();
  const std::string& agent_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_content();
  PROTOBUF_NODISCARD std::string* release_agent_content();
  void set_allocated_agent_content(std::string* agent_content);
  private:
  const std::string& _internal_agent_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_content(const std::string& value);
  std::string* _internal_mutable_agent_content();
  public:

  void clear_agent();
  AgentCase agent_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportAgentRequest)
 private:
  class _Internal;
  void set_has_agent_uri();
  void set_has_agent_content();

  inline bool has_agent() const;
  inline void clear_has_agent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    union AgentUnion {
      constexpr AgentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_uri_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_content_;
    } agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class RestoreAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.RestoreAgentRequest) */ {
 public:
  inline RestoreAgentRequest() : RestoreAgentRequest(nullptr) {}
  ~RestoreAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR RestoreAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreAgentRequest(const RestoreAgentRequest& from);
  RestoreAgentRequest(RestoreAgentRequest&& from) noexcept
    : RestoreAgentRequest() {
    *this = ::std::move(from);
  }

  inline RestoreAgentRequest& operator=(const RestoreAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreAgentRequest& operator=(RestoreAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestoreAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum AgentCase {
    kAgentUri = 2,
    kAgentContent = 3,
    AGENT_NOT_SET = 0,
  };

  static inline const RestoreAgentRequest* internal_default_instance() {
    return reinterpret_cast<const RestoreAgentRequest*>(
               &_RestoreAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RestoreAgentRequest& a, RestoreAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestoreAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestoreAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestoreAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RestoreAgentRequest& from) {
    RestoreAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.RestoreAgentRequest";
  }
  protected:
  explicit RestoreAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAgentUriFieldNumber = 2,
    kAgentContentFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string agent_uri = 2;
  bool has_agent_uri() const;
  private:
  bool _internal_has_agent_uri() const;
  public:
  void clear_agent_uri();
  const std::string& agent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_uri();
  PROTOBUF_NODISCARD std::string* release_agent_uri();
  void set_allocated_agent_uri(std::string* agent_uri);
  private:
  const std::string& _internal_agent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_uri(const std::string& value);
  std::string* _internal_mutable_agent_uri();
  public:

  // bytes agent_content = 3;
  bool has_agent_content() const;
  private:
  bool _internal_has_agent_content() const;
  public:
  void clear_agent_content();
  const std::string& agent_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_content();
  PROTOBUF_NODISCARD std::string* release_agent_content();
  void set_allocated_agent_content(std::string* agent_content);
  private:
  const std::string& _internal_agent_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_content(const std::string& value);
  std::string* _internal_mutable_agent_content();
  public:

  void clear_agent();
  AgentCase agent_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.RestoreAgentRequest)
 private:
  class _Internal;
  void set_has_agent_uri();
  void set_has_agent_content();

  inline bool has_agent() const;
  inline void clear_has_agent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    union AgentUnion {
      constexpr AgentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_uri_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_content_;
    } agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetValidationResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetValidationResultRequest) */ {
 public:
  inline GetValidationResultRequest() : GetValidationResultRequest(nullptr) {}
  ~GetValidationResultRequest() override;
  explicit PROTOBUF_CONSTEXPR GetValidationResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetValidationResultRequest(const GetValidationResultRequest& from);
  GetValidationResultRequest(GetValidationResultRequest&& from) noexcept
    : GetValidationResultRequest() {
    *this = ::std::move(from);
  }

  inline GetValidationResultRequest& operator=(const GetValidationResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetValidationResultRequest& operator=(GetValidationResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetValidationResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetValidationResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetValidationResultRequest*>(
               &_GetValidationResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetValidationResultRequest& a, GetValidationResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetValidationResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetValidationResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetValidationResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetValidationResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetValidationResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetValidationResultRequest& from) {
    GetValidationResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetValidationResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetValidationResultRequest";
  }
  protected:
  explicit GetValidationResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetValidationResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Agent

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Agent::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& Agent::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.parent)
}
inline std::string* Agent::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.parent)
  return _s;
}
inline const std::string& Agent::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void Agent::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.parent)
  return _impl_.parent_.Release();
}
inline void Agent::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.parent)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Agent::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Agent::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.display_name)
}
inline std::string* Agent::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.display_name)
  return _s;
}
inline const std::string& Agent::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Agent::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.display_name)
  return _impl_.display_name_.Release();
}
inline void Agent::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.display_name)
}

// string default_language_code = 3 [(.google.api.field_behavior) = REQUIRED];
inline void Agent::clear_default_language_code() {
  _impl_.default_language_code_.ClearToEmpty();
}
inline const std::string& Agent::default_language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.default_language_code)
  return _internal_default_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_default_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.default_language_code)
}
inline std::string* Agent::mutable_default_language_code() {
  std::string* _s = _internal_mutable_default_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.default_language_code)
  return _s;
}
inline const std::string& Agent::_internal_default_language_code() const {
  return _impl_.default_language_code_.Get();
}
inline void Agent::_internal_set_default_language_code(const std::string& value) {
  
  _impl_.default_language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_default_language_code() {
  
  return _impl_.default_language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_default_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.default_language_code)
  return _impl_.default_language_code_.Release();
}
inline void Agent::set_allocated_default_language_code(std::string* default_language_code) {
  if (default_language_code != nullptr) {
    
  } else {
    
  }
  _impl_.default_language_code_.SetAllocated(default_language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_language_code_.IsDefault()) {
    _impl_.default_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.default_language_code)
}

// repeated string supported_language_codes = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Agent::_internal_supported_language_codes_size() const {
  return _impl_.supported_language_codes_.size();
}
inline int Agent::supported_language_codes_size() const {
  return _internal_supported_language_codes_size();
}
inline void Agent::clear_supported_language_codes() {
  _impl_.supported_language_codes_.Clear();
}
inline std::string* Agent::add_supported_language_codes() {
  std::string* _s = _internal_add_supported_language_codes();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Agent.supported_language_codes)
  return _s;
}
inline const std::string& Agent::_internal_supported_language_codes(int index) const {
  return _impl_.supported_language_codes_.Get(index);
}
inline const std::string& Agent::supported_language_codes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.supported_language_codes)
  return _internal_supported_language_codes(index);
}
inline std::string* Agent::mutable_supported_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.supported_language_codes)
  return _impl_.supported_language_codes_.Mutable(index);
}
inline void Agent::set_supported_language_codes(int index, const std::string& value) {
  _impl_.supported_language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::set_supported_language_codes(int index, std::string&& value) {
  _impl_.supported_language_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::set_supported_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::set_supported_language_codes(int index, const char* value, size_t size) {
  _impl_.supported_language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline std::string* Agent::_internal_add_supported_language_codes() {
  return _impl_.supported_language_codes_.Add();
}
inline void Agent::add_supported_language_codes(const std::string& value) {
  _impl_.supported_language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::add_supported_language_codes(std::string&& value) {
  _impl_.supported_language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::add_supported_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline void Agent::add_supported_language_codes(const char* value, size_t size) {
  _impl_.supported_language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Agent.supported_language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Agent::supported_language_codes() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Agent.supported_language_codes)
  return _impl_.supported_language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Agent::mutable_supported_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Agent.supported_language_codes)
  return &_impl_.supported_language_codes_;
}

// string time_zone = 5 [(.google.api.field_behavior) = REQUIRED];
inline void Agent::clear_time_zone() {
  _impl_.time_zone_.ClearToEmpty();
}
inline const std::string& Agent::time_zone() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.time_zone)
  return _internal_time_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_time_zone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.time_zone)
}
inline std::string* Agent::mutable_time_zone() {
  std::string* _s = _internal_mutable_time_zone();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.time_zone)
  return _s;
}
inline const std::string& Agent::_internal_time_zone() const {
  return _impl_.time_zone_.Get();
}
inline void Agent::_internal_set_time_zone(const std::string& value) {
  
  _impl_.time_zone_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_time_zone() {
  
  return _impl_.time_zone_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.time_zone)
  return _impl_.time_zone_.Release();
}
inline void Agent::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  _impl_.time_zone_.SetAllocated(time_zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_zone_.IsDefault()) {
    _impl_.time_zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.time_zone)
}

// string description = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Agent::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.description)
}
inline std::string* Agent::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.description)
  return _s;
}
inline const std::string& Agent::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Agent::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.description)
  return _impl_.description_.Release();
}
inline void Agent::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.description)
}

// string avatar_uri = 7 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_avatar_uri() {
  _impl_.avatar_uri_.ClearToEmpty();
}
inline const std::string& Agent::avatar_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.avatar_uri)
  return _internal_avatar_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Agent::set_avatar_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.avatar_uri)
}
inline std::string* Agent::mutable_avatar_uri() {
  std::string* _s = _internal_mutable_avatar_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Agent.avatar_uri)
  return _s;
}
inline const std::string& Agent::_internal_avatar_uri() const {
  return _impl_.avatar_uri_.Get();
}
inline void Agent::_internal_set_avatar_uri(const std::string& value) {
  
  _impl_.avatar_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Agent::_internal_mutable_avatar_uri() {
  
  return _impl_.avatar_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Agent::release_avatar_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Agent.avatar_uri)
  return _impl_.avatar_uri_.Release();
}
inline void Agent::set_allocated_avatar_uri(std::string* avatar_uri) {
  if (avatar_uri != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_uri_.SetAllocated(avatar_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_uri_.IsDefault()) {
    _impl_.avatar_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Agent.avatar_uri)
}

// bool enable_logging = 8 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_enable_logging() {
  _impl_.enable_logging_ = false;
}
inline bool Agent::_internal_enable_logging() const {
  return _impl_.enable_logging_;
}
inline bool Agent::enable_logging() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.enable_logging)
  return _internal_enable_logging();
}
inline void Agent::_internal_set_enable_logging(bool value) {
  
  _impl_.enable_logging_ = value;
}
inline void Agent::set_enable_logging(bool value) {
  _internal_set_enable_logging(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.enable_logging)
}

// .google.cloud.dialogflow.v2.Agent.MatchMode match_mode = 9 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_match_mode() {
  _impl_.match_mode_ = 0;
}
inline ::google::cloud::dialogflow::v2::Agent_MatchMode Agent::_internal_match_mode() const {
  return static_cast< ::google::cloud::dialogflow::v2::Agent_MatchMode >(_impl_.match_mode_);
}
inline ::google::cloud::dialogflow::v2::Agent_MatchMode Agent::match_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.match_mode)
  return _internal_match_mode();
}
inline void Agent::_internal_set_match_mode(::google::cloud::dialogflow::v2::Agent_MatchMode value) {
  
  _impl_.match_mode_ = value;
}
inline void Agent::set_match_mode(::google::cloud::dialogflow::v2::Agent_MatchMode value) {
  _internal_set_match_mode(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.match_mode)
}

// float classification_threshold = 10 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_classification_threshold() {
  _impl_.classification_threshold_ = 0;
}
inline float Agent::_internal_classification_threshold() const {
  return _impl_.classification_threshold_;
}
inline float Agent::classification_threshold() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.classification_threshold)
  return _internal_classification_threshold();
}
inline void Agent::_internal_set_classification_threshold(float value) {
  
  _impl_.classification_threshold_ = value;
}
inline void Agent::set_classification_threshold(float value) {
  _internal_set_classification_threshold(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.classification_threshold)
}

// .google.cloud.dialogflow.v2.Agent.ApiVersion api_version = 14 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_api_version() {
  _impl_.api_version_ = 0;
}
inline ::google::cloud::dialogflow::v2::Agent_ApiVersion Agent::_internal_api_version() const {
  return static_cast< ::google::cloud::dialogflow::v2::Agent_ApiVersion >(_impl_.api_version_);
}
inline ::google::cloud::dialogflow::v2::Agent_ApiVersion Agent::api_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.api_version)
  return _internal_api_version();
}
inline void Agent::_internal_set_api_version(::google::cloud::dialogflow::v2::Agent_ApiVersion value) {
  
  _impl_.api_version_ = value;
}
inline void Agent::set_api_version(::google::cloud::dialogflow::v2::Agent_ApiVersion value) {
  _internal_set_api_version(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.api_version)
}

// .google.cloud.dialogflow.v2.Agent.Tier tier = 15 [(.google.api.field_behavior) = OPTIONAL];
inline void Agent::clear_tier() {
  _impl_.tier_ = 0;
}
inline ::google::cloud::dialogflow::v2::Agent_Tier Agent::_internal_tier() const {
  return static_cast< ::google::cloud::dialogflow::v2::Agent_Tier >(_impl_.tier_);
}
inline ::google::cloud::dialogflow::v2::Agent_Tier Agent::tier() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Agent.tier)
  return _internal_tier();
}
inline void Agent::_internal_set_tier(::google::cloud::dialogflow::v2::Agent_Tier value) {
  
  _impl_.tier_ = value;
}
inline void Agent::set_tier(::google::cloud::dialogflow::v2::Agent_Tier value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Agent.tier)
}

// -------------------------------------------------------------------

// GetAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GetAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetAgentRequest.parent)
}
inline std::string* GetAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetAgentRequest.parent)
  return _s;
}
inline const std::string& GetAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void GetAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void GetAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetAgentRequest.parent)
}

// -------------------------------------------------------------------

// SetAgentRequest

// .google.cloud.dialogflow.v2.Agent agent = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool SetAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool SetAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline void SetAgentRequest::clear_agent() {
  if (GetArenaForAllocation() == nullptr && _impl_.agent_ != nullptr) {
    delete _impl_.agent_;
  }
  _impl_.agent_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Agent& SetAgentRequest::_internal_agent() const {
  const ::google::cloud::dialogflow::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Agent&>(
      ::google::cloud::dialogflow::v2::_Agent_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Agent& SetAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SetAgentRequest.agent)
  return _internal_agent();
}
inline void SetAgentRequest::unsafe_arena_set_allocated_agent(
    ::google::cloud::dialogflow::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SetAgentRequest.agent)
}
inline ::google::cloud::dialogflow::v2::Agent* SetAgentRequest::release_agent() {
  
  ::google::cloud::dialogflow::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Agent* SetAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SetAgentRequest.agent)
  
  ::google::cloud::dialogflow::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Agent* SetAgentRequest::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::google::cloud::dialogflow::v2::Agent* SetAgentRequest::mutable_agent() {
  ::google::cloud::dialogflow::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SetAgentRequest.agent)
  return _msg;
}
inline void SetAgentRequest::set_allocated_agent(::google::cloud::dialogflow::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SetAgentRequest.agent)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool SetAgentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool SetAgentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& SetAgentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& SetAgentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SetAgentRequest.update_mask)
  return _internal_update_mask();
}
inline void SetAgentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SetAgentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetAgentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetAgentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SetAgentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetAgentRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* SetAgentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SetAgentRequest.update_mask)
  return _msg;
}
inline void SetAgentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SetAgentRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& DeleteAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteAgentRequest.parent)
}
inline std::string* DeleteAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteAgentRequest.parent)
  return _s;
}
inline const std::string& DeleteAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void DeleteAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void DeleteAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteAgentRequest.parent)
}

// -------------------------------------------------------------------

// SearchAgentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SearchAgentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SearchAgentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SearchAgentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAgentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SearchAgentsRequest.parent)
}
inline std::string* SearchAgentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SearchAgentsRequest.parent)
  return _s;
}
inline const std::string& SearchAgentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SearchAgentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAgentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAgentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SearchAgentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void SearchAgentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SearchAgentsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void SearchAgentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t SearchAgentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t SearchAgentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SearchAgentsRequest.page_size)
  return _internal_page_size();
}
inline void SearchAgentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void SearchAgentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SearchAgentsRequest.page_size)
}

// string page_token = 3;
inline void SearchAgentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& SearchAgentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SearchAgentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAgentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SearchAgentsRequest.page_token)
}
inline std::string* SearchAgentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SearchAgentsRequest.page_token)
  return _s;
}
inline const std::string& SearchAgentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void SearchAgentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAgentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAgentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SearchAgentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void SearchAgentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SearchAgentsRequest.page_token)
}

// -------------------------------------------------------------------

// SearchAgentsResponse

// repeated .google.cloud.dialogflow.v2.Agent agents = 1;
inline int SearchAgentsResponse::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int SearchAgentsResponse::agents_size() const {
  return _internal_agents_size();
}
inline void SearchAgentsResponse::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Agent* SearchAgentsResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SearchAgentsResponse.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Agent >*
SearchAgentsResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.SearchAgentsResponse.agents)
  return &_impl_.agents_;
}
inline const ::google::cloud::dialogflow::v2::Agent& SearchAgentsResponse::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Agent& SearchAgentsResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SearchAgentsResponse.agents)
  return _internal_agents(index);
}
inline ::google::cloud::dialogflow::v2::Agent* SearchAgentsResponse::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::google::cloud::dialogflow::v2::Agent* SearchAgentsResponse::add_agents() {
  ::google::cloud::dialogflow::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.SearchAgentsResponse.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Agent >&
SearchAgentsResponse::agents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.SearchAgentsResponse.agents)
  return _impl_.agents_;
}

// string next_page_token = 2;
inline void SearchAgentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& SearchAgentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SearchAgentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchAgentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SearchAgentsResponse.next_page_token)
}
inline std::string* SearchAgentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SearchAgentsResponse.next_page_token)
  return _s;
}
inline const std::string& SearchAgentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void SearchAgentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchAgentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchAgentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SearchAgentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void SearchAgentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SearchAgentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// TrainAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void TrainAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& TrainAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TrainAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrainAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TrainAgentRequest.parent)
}
inline std::string* TrainAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.TrainAgentRequest.parent)
  return _s;
}
inline const std::string& TrainAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void TrainAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* TrainAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* TrainAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.TrainAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void TrainAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.TrainAgentRequest.parent)
}

// -------------------------------------------------------------------

// ExportAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ExportAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ExportAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportAgentRequest.parent)
}
inline std::string* ExportAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportAgentRequest.parent)
  return _s;
}
inline const std::string& ExportAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ExportAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void ExportAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ExportAgentRequest.parent)
}

// string agent_uri = 2 [(.google.api.field_behavior) = REQUIRED];
inline void ExportAgentRequest::clear_agent_uri() {
  _impl_.agent_uri_.ClearToEmpty();
}
inline const std::string& ExportAgentRequest::agent_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportAgentRequest.agent_uri)
  return _internal_agent_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportAgentRequest::set_agent_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportAgentRequest.agent_uri)
}
inline std::string* ExportAgentRequest::mutable_agent_uri() {
  std::string* _s = _internal_mutable_agent_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportAgentRequest.agent_uri)
  return _s;
}
inline const std::string& ExportAgentRequest::_internal_agent_uri() const {
  return _impl_.agent_uri_.Get();
}
inline void ExportAgentRequest::_internal_set_agent_uri(const std::string& value) {
  
  _impl_.agent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportAgentRequest::_internal_mutable_agent_uri() {
  
  return _impl_.agent_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportAgentRequest::release_agent_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportAgentRequest.agent_uri)
  return _impl_.agent_uri_.Release();
}
inline void ExportAgentRequest::set_allocated_agent_uri(std::string* agent_uri) {
  if (agent_uri != nullptr) {
    
  } else {
    
  }
  _impl_.agent_uri_.SetAllocated(agent_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_uri_.IsDefault()) {
    _impl_.agent_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ExportAgentRequest.agent_uri)
}

// -------------------------------------------------------------------

// ExportAgentResponse

// string agent_uri = 1;
inline bool ExportAgentResponse::_internal_has_agent_uri() const {
  return agent_case() == kAgentUri;
}
inline bool ExportAgentResponse::has_agent_uri() const {
  return _internal_has_agent_uri();
}
inline void ExportAgentResponse::set_has_agent_uri() {
  _impl_._oneof_case_[0] = kAgentUri;
}
inline void ExportAgentResponse::clear_agent_uri() {
  if (_internal_has_agent_uri()) {
    _impl_.agent_.agent_uri_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& ExportAgentResponse::agent_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportAgentResponse.agent_uri)
  return _internal_agent_uri();
}
template <typename ArgT0, typename... ArgT>
inline void ExportAgentResponse::set_agent_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportAgentResponse.agent_uri)
}
inline std::string* ExportAgentResponse::mutable_agent_uri() {
  std::string* _s = _internal_mutable_agent_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportAgentResponse.agent_uri)
  return _s;
}
inline const std::string& ExportAgentResponse::_internal_agent_uri() const {
  if (_internal_has_agent_uri()) {
    return _impl_.agent_.agent_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ExportAgentResponse::_internal_set_agent_uri(const std::string& value) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportAgentResponse::_internal_mutable_agent_uri() {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  return _impl_.agent_.agent_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* ExportAgentResponse::release_agent_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportAgentResponse.agent_uri)
  if (_internal_has_agent_uri()) {
    clear_has_agent();
    return _impl_.agent_.agent_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void ExportAgentResponse::set_allocated_agent_uri(std::string* agent_uri) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_uri != nullptr) {
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitAllocated(agent_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ExportAgentResponse.agent_uri)
}

// bytes agent_content = 2;
inline bool ExportAgentResponse::_internal_has_agent_content() const {
  return agent_case() == kAgentContent;
}
inline bool ExportAgentResponse::has_agent_content() const {
  return _internal_has_agent_content();
}
inline void ExportAgentResponse::set_has_agent_content() {
  _impl_._oneof_case_[0] = kAgentContent;
}
inline void ExportAgentResponse::clear_agent_content() {
  if (_internal_has_agent_content()) {
    _impl_.agent_.agent_content_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& ExportAgentResponse::agent_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportAgentResponse.agent_content)
  return _internal_agent_content();
}
template <typename ArgT0, typename... ArgT>
inline void ExportAgentResponse::set_agent_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportAgentResponse.agent_content)
}
inline std::string* ExportAgentResponse::mutable_agent_content() {
  std::string* _s = _internal_mutable_agent_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportAgentResponse.agent_content)
  return _s;
}
inline const std::string& ExportAgentResponse::_internal_agent_content() const {
  if (_internal_has_agent_content()) {
    return _impl_.agent_.agent_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ExportAgentResponse::_internal_set_agent_content(const std::string& value) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportAgentResponse::_internal_mutable_agent_content() {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  return _impl_.agent_.agent_content_.Mutable(      GetArenaForAllocation());
}
inline std::string* ExportAgentResponse::release_agent_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportAgentResponse.agent_content)
  if (_internal_has_agent_content()) {
    clear_has_agent();
    return _impl_.agent_.agent_content_.Release();
  } else {
    return nullptr;
  }
}
inline void ExportAgentResponse::set_allocated_agent_content(std::string* agent_content) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_content != nullptr) {
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitAllocated(agent_content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ExportAgentResponse.agent_content)
}

inline bool ExportAgentResponse::has_agent() const {
  return agent_case() != AGENT_NOT_SET;
}
inline void ExportAgentResponse::clear_has_agent() {
  _impl_._oneof_case_[0] = AGENT_NOT_SET;
}
inline ExportAgentResponse::AgentCase ExportAgentResponse::agent_case() const {
  return ExportAgentResponse::AgentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImportAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ImportAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ImportAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportAgentRequest.parent)
}
inline std::string* ImportAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportAgentRequest.parent)
  return _s;
}
inline const std::string& ImportAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ImportAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void ImportAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportAgentRequest.parent)
}

// string agent_uri = 2;
inline bool ImportAgentRequest::_internal_has_agent_uri() const {
  return agent_case() == kAgentUri;
}
inline bool ImportAgentRequest::has_agent_uri() const {
  return _internal_has_agent_uri();
}
inline void ImportAgentRequest::set_has_agent_uri() {
  _impl_._oneof_case_[0] = kAgentUri;
}
inline void ImportAgentRequest::clear_agent_uri() {
  if (_internal_has_agent_uri()) {
    _impl_.agent_.agent_uri_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& ImportAgentRequest::agent_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportAgentRequest.agent_uri)
  return _internal_agent_uri();
}
template <typename ArgT0, typename... ArgT>
inline void ImportAgentRequest::set_agent_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportAgentRequest.agent_uri)
}
inline std::string* ImportAgentRequest::mutable_agent_uri() {
  std::string* _s = _internal_mutable_agent_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportAgentRequest.agent_uri)
  return _s;
}
inline const std::string& ImportAgentRequest::_internal_agent_uri() const {
  if (_internal_has_agent_uri()) {
    return _impl_.agent_.agent_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ImportAgentRequest::_internal_set_agent_uri(const std::string& value) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::_internal_mutable_agent_uri() {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  return _impl_.agent_.agent_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::release_agent_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportAgentRequest.agent_uri)
  if (_internal_has_agent_uri()) {
    clear_has_agent();
    return _impl_.agent_.agent_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void ImportAgentRequest::set_allocated_agent_uri(std::string* agent_uri) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_uri != nullptr) {
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitAllocated(agent_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportAgentRequest.agent_uri)
}

// bytes agent_content = 3;
inline bool ImportAgentRequest::_internal_has_agent_content() const {
  return agent_case() == kAgentContent;
}
inline bool ImportAgentRequest::has_agent_content() const {
  return _internal_has_agent_content();
}
inline void ImportAgentRequest::set_has_agent_content() {
  _impl_._oneof_case_[0] = kAgentContent;
}
inline void ImportAgentRequest::clear_agent_content() {
  if (_internal_has_agent_content()) {
    _impl_.agent_.agent_content_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& ImportAgentRequest::agent_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportAgentRequest.agent_content)
  return _internal_agent_content();
}
template <typename ArgT0, typename... ArgT>
inline void ImportAgentRequest::set_agent_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportAgentRequest.agent_content)
}
inline std::string* ImportAgentRequest::mutable_agent_content() {
  std::string* _s = _internal_mutable_agent_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportAgentRequest.agent_content)
  return _s;
}
inline const std::string& ImportAgentRequest::_internal_agent_content() const {
  if (_internal_has_agent_content()) {
    return _impl_.agent_.agent_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ImportAgentRequest::_internal_set_agent_content(const std::string& value) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::_internal_mutable_agent_content() {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  return _impl_.agent_.agent_content_.Mutable(      GetArenaForAllocation());
}
inline std::string* ImportAgentRequest::release_agent_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportAgentRequest.agent_content)
  if (_internal_has_agent_content()) {
    clear_has_agent();
    return _impl_.agent_.agent_content_.Release();
  } else {
    return nullptr;
  }
}
inline void ImportAgentRequest::set_allocated_agent_content(std::string* agent_content) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_content != nullptr) {
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitAllocated(agent_content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportAgentRequest.agent_content)
}

inline bool ImportAgentRequest::has_agent() const {
  return agent_case() != AGENT_NOT_SET;
}
inline void ImportAgentRequest::clear_has_agent() {
  _impl_._oneof_case_[0] = AGENT_NOT_SET;
}
inline ImportAgentRequest::AgentCase ImportAgentRequest::agent_case() const {
  return ImportAgentRequest::AgentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestoreAgentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void RestoreAgentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& RestoreAgentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.RestoreAgentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RestoreAgentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.RestoreAgentRequest.parent)
}
inline std::string* RestoreAgentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.RestoreAgentRequest.parent)
  return _s;
}
inline const std::string& RestoreAgentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void RestoreAgentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.RestoreAgentRequest.parent)
  return _impl_.parent_.Release();
}
inline void RestoreAgentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.RestoreAgentRequest.parent)
}

// string agent_uri = 2;
inline bool RestoreAgentRequest::_internal_has_agent_uri() const {
  return agent_case() == kAgentUri;
}
inline bool RestoreAgentRequest::has_agent_uri() const {
  return _internal_has_agent_uri();
}
inline void RestoreAgentRequest::set_has_agent_uri() {
  _impl_._oneof_case_[0] = kAgentUri;
}
inline void RestoreAgentRequest::clear_agent_uri() {
  if (_internal_has_agent_uri()) {
    _impl_.agent_.agent_uri_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& RestoreAgentRequest::agent_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_uri)
  return _internal_agent_uri();
}
template <typename ArgT0, typename... ArgT>
inline void RestoreAgentRequest::set_agent_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_uri)
}
inline std::string* RestoreAgentRequest::mutable_agent_uri() {
  std::string* _s = _internal_mutable_agent_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_uri)
  return _s;
}
inline const std::string& RestoreAgentRequest::_internal_agent_uri() const {
  if (_internal_has_agent_uri()) {
    return _impl_.agent_.agent_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestoreAgentRequest::_internal_set_agent_uri(const std::string& value) {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  _impl_.agent_.agent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::_internal_mutable_agent_uri() {
  if (!_internal_has_agent_uri()) {
    clear_agent();
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitDefault();
  }
  return _impl_.agent_.agent_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::release_agent_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_uri)
  if (_internal_has_agent_uri()) {
    clear_has_agent();
    return _impl_.agent_.agent_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void RestoreAgentRequest::set_allocated_agent_uri(std::string* agent_uri) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_uri != nullptr) {
    set_has_agent_uri();
    _impl_.agent_.agent_uri_.InitAllocated(agent_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_uri)
}

// bytes agent_content = 3;
inline bool RestoreAgentRequest::_internal_has_agent_content() const {
  return agent_case() == kAgentContent;
}
inline bool RestoreAgentRequest::has_agent_content() const {
  return _internal_has_agent_content();
}
inline void RestoreAgentRequest::set_has_agent_content() {
  _impl_._oneof_case_[0] = kAgentContent;
}
inline void RestoreAgentRequest::clear_agent_content() {
  if (_internal_has_agent_content()) {
    _impl_.agent_.agent_content_.Destroy();
    clear_has_agent();
  }
}
inline const std::string& RestoreAgentRequest::agent_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_content)
  return _internal_agent_content();
}
template <typename ArgT0, typename... ArgT>
inline void RestoreAgentRequest::set_agent_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_content)
}
inline std::string* RestoreAgentRequest::mutable_agent_content() {
  std::string* _s = _internal_mutable_agent_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_content)
  return _s;
}
inline const std::string& RestoreAgentRequest::_internal_agent_content() const {
  if (_internal_has_agent_content()) {
    return _impl_.agent_.agent_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestoreAgentRequest::_internal_set_agent_content(const std::string& value) {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  _impl_.agent_.agent_content_.Set(value, GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::_internal_mutable_agent_content() {
  if (!_internal_has_agent_content()) {
    clear_agent();
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitDefault();
  }
  return _impl_.agent_.agent_content_.Mutable(      GetArenaForAllocation());
}
inline std::string* RestoreAgentRequest::release_agent_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_content)
  if (_internal_has_agent_content()) {
    clear_has_agent();
    return _impl_.agent_.agent_content_.Release();
  } else {
    return nullptr;
  }
}
inline void RestoreAgentRequest::set_allocated_agent_content(std::string* agent_content) {
  if (has_agent()) {
    clear_agent();
  }
  if (agent_content != nullptr) {
    set_has_agent_content();
    _impl_.agent_.agent_content_.InitAllocated(agent_content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.RestoreAgentRequest.agent_content)
}

inline bool RestoreAgentRequest::has_agent() const {
  return agent_case() != AGENT_NOT_SET;
}
inline void RestoreAgentRequest::clear_has_agent() {
  _impl_._oneof_case_[0] = AGENT_NOT_SET;
}
inline RestoreAgentRequest::AgentCase RestoreAgentRequest::agent_case() const {
  return RestoreAgentRequest::AgentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetValidationResultRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetValidationResultRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GetValidationResultRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetValidationResultRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetValidationResultRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetValidationResultRequest.parent)
}
inline std::string* GetValidationResultRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetValidationResultRequest.parent)
  return _s;
}
inline const std::string& GetValidationResultRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void GetValidationResultRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* GetValidationResultRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* GetValidationResultRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetValidationResultRequest.parent)
  return _impl_.parent_.Release();
}
inline void GetValidationResultRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetValidationResultRequest.parent)
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void GetValidationResultRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& GetValidationResultRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetValidationResultRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetValidationResultRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetValidationResultRequest.language_code)
}
inline std::string* GetValidationResultRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetValidationResultRequest.language_code)
  return _s;
}
inline const std::string& GetValidationResultRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void GetValidationResultRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GetValidationResultRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GetValidationResultRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetValidationResultRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void GetValidationResultRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetValidationResultRequest.language_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Agent_MatchMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Agent_MatchMode>() {
  return ::google::cloud::dialogflow::v2::Agent_MatchMode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Agent_ApiVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Agent_ApiVersion>() {
  return ::google::cloud::dialogflow::v2::Agent_ApiVersion_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Agent_Tier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Agent_Tier>() {
  return ::google::cloud::dialogflow::v2::Agent_Tier_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fagent_2eproto
