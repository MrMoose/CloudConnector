// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/intent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/context.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class BatchDeleteIntentsRequest;
struct BatchDeleteIntentsRequestDefaultTypeInternal;
extern BatchDeleteIntentsRequestDefaultTypeInternal _BatchDeleteIntentsRequest_default_instance_;
class BatchUpdateIntentsRequest;
struct BatchUpdateIntentsRequestDefaultTypeInternal;
extern BatchUpdateIntentsRequestDefaultTypeInternal _BatchUpdateIntentsRequest_default_instance_;
class BatchUpdateIntentsResponse;
struct BatchUpdateIntentsResponseDefaultTypeInternal;
extern BatchUpdateIntentsResponseDefaultTypeInternal _BatchUpdateIntentsResponse_default_instance_;
class CreateIntentRequest;
struct CreateIntentRequestDefaultTypeInternal;
extern CreateIntentRequestDefaultTypeInternal _CreateIntentRequest_default_instance_;
class DeleteIntentRequest;
struct DeleteIntentRequestDefaultTypeInternal;
extern DeleteIntentRequestDefaultTypeInternal _DeleteIntentRequest_default_instance_;
class GetIntentRequest;
struct GetIntentRequestDefaultTypeInternal;
extern GetIntentRequestDefaultTypeInternal _GetIntentRequest_default_instance_;
class Intent;
struct IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class IntentBatch;
struct IntentBatchDefaultTypeInternal;
extern IntentBatchDefaultTypeInternal _IntentBatch_default_instance_;
class Intent_FollowupIntentInfo;
struct Intent_FollowupIntentInfoDefaultTypeInternal;
extern Intent_FollowupIntentInfoDefaultTypeInternal _Intent_FollowupIntentInfo_default_instance_;
class Intent_Message;
struct Intent_MessageDefaultTypeInternal;
extern Intent_MessageDefaultTypeInternal _Intent_Message_default_instance_;
class Intent_Message_BasicCard;
struct Intent_Message_BasicCardDefaultTypeInternal;
extern Intent_Message_BasicCardDefaultTypeInternal _Intent_Message_BasicCard_default_instance_;
class Intent_Message_BasicCard_Button;
struct Intent_Message_BasicCard_ButtonDefaultTypeInternal;
extern Intent_Message_BasicCard_ButtonDefaultTypeInternal _Intent_Message_BasicCard_Button_default_instance_;
class Intent_Message_BasicCard_Button_OpenUriAction;
struct Intent_Message_BasicCard_Button_OpenUriActionDefaultTypeInternal;
extern Intent_Message_BasicCard_Button_OpenUriActionDefaultTypeInternal _Intent_Message_BasicCard_Button_OpenUriAction_default_instance_;
class Intent_Message_BrowseCarouselCard;
struct Intent_Message_BrowseCarouselCardDefaultTypeInternal;
extern Intent_Message_BrowseCarouselCardDefaultTypeInternal _Intent_Message_BrowseCarouselCard_default_instance_;
class Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem;
struct Intent_Message_BrowseCarouselCard_BrowseCarouselCardItemDefaultTypeInternal;
extern Intent_Message_BrowseCarouselCard_BrowseCarouselCardItemDefaultTypeInternal _Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_default_instance_;
class Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction;
struct Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlActionDefaultTypeInternal;
extern Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlActionDefaultTypeInternal _Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_default_instance_;
class Intent_Message_Card;
struct Intent_Message_CardDefaultTypeInternal;
extern Intent_Message_CardDefaultTypeInternal _Intent_Message_Card_default_instance_;
class Intent_Message_Card_Button;
struct Intent_Message_Card_ButtonDefaultTypeInternal;
extern Intent_Message_Card_ButtonDefaultTypeInternal _Intent_Message_Card_Button_default_instance_;
class Intent_Message_CarouselSelect;
struct Intent_Message_CarouselSelectDefaultTypeInternal;
extern Intent_Message_CarouselSelectDefaultTypeInternal _Intent_Message_CarouselSelect_default_instance_;
class Intent_Message_CarouselSelect_Item;
struct Intent_Message_CarouselSelect_ItemDefaultTypeInternal;
extern Intent_Message_CarouselSelect_ItemDefaultTypeInternal _Intent_Message_CarouselSelect_Item_default_instance_;
class Intent_Message_ColumnProperties;
struct Intent_Message_ColumnPropertiesDefaultTypeInternal;
extern Intent_Message_ColumnPropertiesDefaultTypeInternal _Intent_Message_ColumnProperties_default_instance_;
class Intent_Message_Image;
struct Intent_Message_ImageDefaultTypeInternal;
extern Intent_Message_ImageDefaultTypeInternal _Intent_Message_Image_default_instance_;
class Intent_Message_LinkOutSuggestion;
struct Intent_Message_LinkOutSuggestionDefaultTypeInternal;
extern Intent_Message_LinkOutSuggestionDefaultTypeInternal _Intent_Message_LinkOutSuggestion_default_instance_;
class Intent_Message_ListSelect;
struct Intent_Message_ListSelectDefaultTypeInternal;
extern Intent_Message_ListSelectDefaultTypeInternal _Intent_Message_ListSelect_default_instance_;
class Intent_Message_ListSelect_Item;
struct Intent_Message_ListSelect_ItemDefaultTypeInternal;
extern Intent_Message_ListSelect_ItemDefaultTypeInternal _Intent_Message_ListSelect_Item_default_instance_;
class Intent_Message_MediaContent;
struct Intent_Message_MediaContentDefaultTypeInternal;
extern Intent_Message_MediaContentDefaultTypeInternal _Intent_Message_MediaContent_default_instance_;
class Intent_Message_MediaContent_ResponseMediaObject;
struct Intent_Message_MediaContent_ResponseMediaObjectDefaultTypeInternal;
extern Intent_Message_MediaContent_ResponseMediaObjectDefaultTypeInternal _Intent_Message_MediaContent_ResponseMediaObject_default_instance_;
class Intent_Message_QuickReplies;
struct Intent_Message_QuickRepliesDefaultTypeInternal;
extern Intent_Message_QuickRepliesDefaultTypeInternal _Intent_Message_QuickReplies_default_instance_;
class Intent_Message_SelectItemInfo;
struct Intent_Message_SelectItemInfoDefaultTypeInternal;
extern Intent_Message_SelectItemInfoDefaultTypeInternal _Intent_Message_SelectItemInfo_default_instance_;
class Intent_Message_SimpleResponse;
struct Intent_Message_SimpleResponseDefaultTypeInternal;
extern Intent_Message_SimpleResponseDefaultTypeInternal _Intent_Message_SimpleResponse_default_instance_;
class Intent_Message_SimpleResponses;
struct Intent_Message_SimpleResponsesDefaultTypeInternal;
extern Intent_Message_SimpleResponsesDefaultTypeInternal _Intent_Message_SimpleResponses_default_instance_;
class Intent_Message_Suggestion;
struct Intent_Message_SuggestionDefaultTypeInternal;
extern Intent_Message_SuggestionDefaultTypeInternal _Intent_Message_Suggestion_default_instance_;
class Intent_Message_Suggestions;
struct Intent_Message_SuggestionsDefaultTypeInternal;
extern Intent_Message_SuggestionsDefaultTypeInternal _Intent_Message_Suggestions_default_instance_;
class Intent_Message_TableCard;
struct Intent_Message_TableCardDefaultTypeInternal;
extern Intent_Message_TableCardDefaultTypeInternal _Intent_Message_TableCard_default_instance_;
class Intent_Message_TableCardCell;
struct Intent_Message_TableCardCellDefaultTypeInternal;
extern Intent_Message_TableCardCellDefaultTypeInternal _Intent_Message_TableCardCell_default_instance_;
class Intent_Message_TableCardRow;
struct Intent_Message_TableCardRowDefaultTypeInternal;
extern Intent_Message_TableCardRowDefaultTypeInternal _Intent_Message_TableCardRow_default_instance_;
class Intent_Message_Text;
struct Intent_Message_TextDefaultTypeInternal;
extern Intent_Message_TextDefaultTypeInternal _Intent_Message_Text_default_instance_;
class Intent_Parameter;
struct Intent_ParameterDefaultTypeInternal;
extern Intent_ParameterDefaultTypeInternal _Intent_Parameter_default_instance_;
class Intent_TrainingPhrase;
struct Intent_TrainingPhraseDefaultTypeInternal;
extern Intent_TrainingPhraseDefaultTypeInternal _Intent_TrainingPhrase_default_instance_;
class Intent_TrainingPhrase_Part;
struct Intent_TrainingPhrase_PartDefaultTypeInternal;
extern Intent_TrainingPhrase_PartDefaultTypeInternal _Intent_TrainingPhrase_Part_default_instance_;
class ListIntentsRequest;
struct ListIntentsRequestDefaultTypeInternal;
extern ListIntentsRequestDefaultTypeInternal _ListIntentsRequest_default_instance_;
class ListIntentsResponse;
struct ListIntentsResponseDefaultTypeInternal;
extern ListIntentsResponseDefaultTypeInternal _ListIntentsResponse_default_instance_;
class UpdateIntentRequest;
struct UpdateIntentRequestDefaultTypeInternal;
extern UpdateIntentRequestDefaultTypeInternal _UpdateIntentRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::BatchDeleteIntentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchDeleteIntentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchUpdateIntentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchUpdateIntentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchUpdateIntentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchUpdateIntentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateIntentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteIntentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetIntentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent>(Arena*);
template<> ::google::cloud::dialogflow::v2::IntentBatch* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::IntentBatch>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BasicCard>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Card* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Card>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Card_Button>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Image* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_ListSelect>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_MediaContent>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_QuickReplies>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Suggestion>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Suggestions>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_TableCard* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_TableCard>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_TableCardCell>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_TableCardRow>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Message_Text* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Text>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_Parameter* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Parameter>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_TrainingPhrase>(Arena*);
template<> ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListIntentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListIntentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListIntentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListIntentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateIntentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Intent_TrainingPhrase_Type : int {
  Intent_TrainingPhrase_Type_TYPE_UNSPECIFIED = 0,
  Intent_TrainingPhrase_Type_EXAMPLE = 1,
  Intent_TrainingPhrase_Type_TEMPLATE PROTOBUF_DEPRECATED_ENUM = 2,
  Intent_TrainingPhrase_Type_Intent_TrainingPhrase_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_TrainingPhrase_Type_Intent_TrainingPhrase_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_TrainingPhrase_Type_IsValid(int value);
constexpr Intent_TrainingPhrase_Type Intent_TrainingPhrase_Type_Type_MIN = Intent_TrainingPhrase_Type_TYPE_UNSPECIFIED;
constexpr Intent_TrainingPhrase_Type Intent_TrainingPhrase_Type_Type_MAX = Intent_TrainingPhrase_Type_TEMPLATE;
constexpr int Intent_TrainingPhrase_Type_Type_ARRAYSIZE = Intent_TrainingPhrase_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_TrainingPhrase_Type_descriptor();
template<typename T>
inline const std::string& Intent_TrainingPhrase_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_TrainingPhrase_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_TrainingPhrase_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_TrainingPhrase_Type_descriptor(), enum_t_value);
}
inline bool Intent_TrainingPhrase_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_TrainingPhrase_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_TrainingPhrase_Type>(
    Intent_TrainingPhrase_Type_descriptor(), name, value);
}
enum Intent_Message_MediaContent_ResponseMediaType : int {
  Intent_Message_MediaContent_ResponseMediaType_RESPONSE_MEDIA_TYPE_UNSPECIFIED = 0,
  Intent_Message_MediaContent_ResponseMediaType_AUDIO = 1,
  Intent_Message_MediaContent_ResponseMediaType_Intent_Message_MediaContent_ResponseMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_Message_MediaContent_ResponseMediaType_Intent_Message_MediaContent_ResponseMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_Message_MediaContent_ResponseMediaType_IsValid(int value);
constexpr Intent_Message_MediaContent_ResponseMediaType Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_MIN = Intent_Message_MediaContent_ResponseMediaType_RESPONSE_MEDIA_TYPE_UNSPECIFIED;
constexpr Intent_Message_MediaContent_ResponseMediaType Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_MAX = Intent_Message_MediaContent_ResponseMediaType_AUDIO;
constexpr int Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_ARRAYSIZE = Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Message_MediaContent_ResponseMediaType_descriptor();
template<typename T>
inline const std::string& Intent_Message_MediaContent_ResponseMediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Message_MediaContent_ResponseMediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Message_MediaContent_ResponseMediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Message_MediaContent_ResponseMediaType_descriptor(), enum_t_value);
}
inline bool Intent_Message_MediaContent_ResponseMediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Message_MediaContent_ResponseMediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Message_MediaContent_ResponseMediaType>(
    Intent_Message_MediaContent_ResponseMediaType_descriptor(), name, value);
}
enum Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint : int {
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_URL_TYPE_HINT_UNSPECIFIED = 0,
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_AMP_ACTION = 1,
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_AMP_CONTENT = 2,
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_IsValid(int value);
constexpr Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_MIN = Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_URL_TYPE_HINT_UNSPECIFIED;
constexpr Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_MAX = Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_AMP_CONTENT;
constexpr int Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_ARRAYSIZE = Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_descriptor();
template<typename T>
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_descriptor(), enum_t_value);
}
inline bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint>(
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_descriptor(), name, value);
}
enum Intent_Message_BrowseCarouselCard_ImageDisplayOptions : int {
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_IMAGE_DISPLAY_OPTIONS_UNSPECIFIED = 0,
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_GRAY = 1,
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_WHITE = 2,
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_CROPPED = 3,
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_BLURRED_BACKGROUND = 4,
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Intent_Message_BrowseCarouselCard_ImageDisplayOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Intent_Message_BrowseCarouselCard_ImageDisplayOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_Message_BrowseCarouselCard_ImageDisplayOptions_IsValid(int value);
constexpr Intent_Message_BrowseCarouselCard_ImageDisplayOptions Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_MIN = Intent_Message_BrowseCarouselCard_ImageDisplayOptions_IMAGE_DISPLAY_OPTIONS_UNSPECIFIED;
constexpr Intent_Message_BrowseCarouselCard_ImageDisplayOptions Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_MAX = Intent_Message_BrowseCarouselCard_ImageDisplayOptions_BLURRED_BACKGROUND;
constexpr int Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_ARRAYSIZE = Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Message_BrowseCarouselCard_ImageDisplayOptions_descriptor();
template<typename T>
inline const std::string& Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Message_BrowseCarouselCard_ImageDisplayOptions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_descriptor(), enum_t_value);
}
inline bool Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Message_BrowseCarouselCard_ImageDisplayOptions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Message_BrowseCarouselCard_ImageDisplayOptions>(
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_descriptor(), name, value);
}
enum Intent_Message_ColumnProperties_HorizontalAlignment : int {
  Intent_Message_ColumnProperties_HorizontalAlignment_HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0,
  Intent_Message_ColumnProperties_HorizontalAlignment_LEADING = 1,
  Intent_Message_ColumnProperties_HorizontalAlignment_CENTER = 2,
  Intent_Message_ColumnProperties_HorizontalAlignment_TRAILING = 3,
  Intent_Message_ColumnProperties_HorizontalAlignment_Intent_Message_ColumnProperties_HorizontalAlignment_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_Message_ColumnProperties_HorizontalAlignment_Intent_Message_ColumnProperties_HorizontalAlignment_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_Message_ColumnProperties_HorizontalAlignment_IsValid(int value);
constexpr Intent_Message_ColumnProperties_HorizontalAlignment Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_MIN = Intent_Message_ColumnProperties_HorizontalAlignment_HORIZONTAL_ALIGNMENT_UNSPECIFIED;
constexpr Intent_Message_ColumnProperties_HorizontalAlignment Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_MAX = Intent_Message_ColumnProperties_HorizontalAlignment_TRAILING;
constexpr int Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_ARRAYSIZE = Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Message_ColumnProperties_HorizontalAlignment_descriptor();
template<typename T>
inline const std::string& Intent_Message_ColumnProperties_HorizontalAlignment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Message_ColumnProperties_HorizontalAlignment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Message_ColumnProperties_HorizontalAlignment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Message_ColumnProperties_HorizontalAlignment_descriptor(), enum_t_value);
}
inline bool Intent_Message_ColumnProperties_HorizontalAlignment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Message_ColumnProperties_HorizontalAlignment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Message_ColumnProperties_HorizontalAlignment>(
    Intent_Message_ColumnProperties_HorizontalAlignment_descriptor(), name, value);
}
enum Intent_Message_Platform : int {
  Intent_Message_Platform_PLATFORM_UNSPECIFIED = 0,
  Intent_Message_Platform_FACEBOOK = 1,
  Intent_Message_Platform_SLACK = 2,
  Intent_Message_Platform_TELEGRAM = 3,
  Intent_Message_Platform_KIK = 4,
  Intent_Message_Platform_SKYPE = 5,
  Intent_Message_Platform_LINE = 6,
  Intent_Message_Platform_VIBER = 7,
  Intent_Message_Platform_ACTIONS_ON_GOOGLE = 8,
  Intent_Message_Platform_GOOGLE_HANGOUTS = 11,
  Intent_Message_Platform_Intent_Message_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_Message_Platform_Intent_Message_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_Message_Platform_IsValid(int value);
constexpr Intent_Message_Platform Intent_Message_Platform_Platform_MIN = Intent_Message_Platform_PLATFORM_UNSPECIFIED;
constexpr Intent_Message_Platform Intent_Message_Platform_Platform_MAX = Intent_Message_Platform_GOOGLE_HANGOUTS;
constexpr int Intent_Message_Platform_Platform_ARRAYSIZE = Intent_Message_Platform_Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Message_Platform_descriptor();
template<typename T>
inline const std::string& Intent_Message_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Message_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Message_Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Message_Platform_descriptor(), enum_t_value);
}
inline bool Intent_Message_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Message_Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Message_Platform>(
    Intent_Message_Platform_descriptor(), name, value);
}
enum Intent_WebhookState : int {
  Intent_WebhookState_WEBHOOK_STATE_UNSPECIFIED = 0,
  Intent_WebhookState_WEBHOOK_STATE_ENABLED = 1,
  Intent_WebhookState_WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = 2,
  Intent_WebhookState_Intent_WebhookState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Intent_WebhookState_Intent_WebhookState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Intent_WebhookState_IsValid(int value);
constexpr Intent_WebhookState Intent_WebhookState_WebhookState_MIN = Intent_WebhookState_WEBHOOK_STATE_UNSPECIFIED;
constexpr Intent_WebhookState Intent_WebhookState_WebhookState_MAX = Intent_WebhookState_WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING;
constexpr int Intent_WebhookState_WebhookState_ARRAYSIZE = Intent_WebhookState_WebhookState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_WebhookState_descriptor();
template<typename T>
inline const std::string& Intent_WebhookState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_WebhookState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_WebhookState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_WebhookState_descriptor(), enum_t_value);
}
inline bool Intent_WebhookState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_WebhookState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_WebhookState>(
    Intent_WebhookState_descriptor(), name, value);
}
enum IntentView : int {
  INTENT_VIEW_UNSPECIFIED = 0,
  INTENT_VIEW_FULL = 1,
  IntentView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IntentView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IntentView_IsValid(int value);
constexpr IntentView IntentView_MIN = INTENT_VIEW_UNSPECIFIED;
constexpr IntentView IntentView_MAX = INTENT_VIEW_FULL;
constexpr int IntentView_ARRAYSIZE = IntentView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntentView_descriptor();
template<typename T>
inline const std::string& IntentView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntentView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntentView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntentView_descriptor(), enum_t_value);
}
inline bool IntentView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntentView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntentView>(
    IntentView_descriptor(), name, value);
}
// ===================================================================

class Intent_TrainingPhrase_Part final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part) */ {
 public:
  inline Intent_TrainingPhrase_Part() : Intent_TrainingPhrase_Part(nullptr) {}
  ~Intent_TrainingPhrase_Part() override;
  explicit PROTOBUF_CONSTEXPR Intent_TrainingPhrase_Part(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_TrainingPhrase_Part(const Intent_TrainingPhrase_Part& from);
  Intent_TrainingPhrase_Part(Intent_TrainingPhrase_Part&& from) noexcept
    : Intent_TrainingPhrase_Part() {
    *this = ::std::move(from);
  }

  inline Intent_TrainingPhrase_Part& operator=(const Intent_TrainingPhrase_Part& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_TrainingPhrase_Part& operator=(Intent_TrainingPhrase_Part&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_TrainingPhrase_Part& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_TrainingPhrase_Part* internal_default_instance() {
    return reinterpret_cast<const Intent_TrainingPhrase_Part*>(
               &_Intent_TrainingPhrase_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Intent_TrainingPhrase_Part& a, Intent_TrainingPhrase_Part& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_TrainingPhrase_Part* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_TrainingPhrase_Part* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_TrainingPhrase_Part* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_TrainingPhrase_Part>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_TrainingPhrase_Part& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_TrainingPhrase_Part& from) {
    Intent_TrainingPhrase_Part::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_TrainingPhrase_Part* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part";
  }
  protected:
  explicit Intent_TrainingPhrase_Part(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kEntityTypeFieldNumber = 2,
    kAliasFieldNumber = 3,
    kUserDefinedFieldNumber = 4,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string entity_type = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_entity_type();
  const std::string& entity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_type();
  PROTOBUF_NODISCARD std::string* release_entity_type();
  void set_allocated_entity_type(std::string* entity_type);
  private:
  const std::string& _internal_entity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_type(const std::string& value);
  std::string* _internal_mutable_entity_type();
  public:

  // string alias = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // bool user_defined = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_user_defined();
  bool user_defined() const;
  void set_user_defined(bool value);
  private:
  bool _internal_user_defined() const;
  void _internal_set_user_defined(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    bool user_defined_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_TrainingPhrase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.TrainingPhrase) */ {
 public:
  inline Intent_TrainingPhrase() : Intent_TrainingPhrase(nullptr) {}
  ~Intent_TrainingPhrase() override;
  explicit PROTOBUF_CONSTEXPR Intent_TrainingPhrase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_TrainingPhrase(const Intent_TrainingPhrase& from);
  Intent_TrainingPhrase(Intent_TrainingPhrase&& from) noexcept
    : Intent_TrainingPhrase() {
    *this = ::std::move(from);
  }

  inline Intent_TrainingPhrase& operator=(const Intent_TrainingPhrase& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_TrainingPhrase& operator=(Intent_TrainingPhrase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_TrainingPhrase& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_TrainingPhrase* internal_default_instance() {
    return reinterpret_cast<const Intent_TrainingPhrase*>(
               &_Intent_TrainingPhrase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Intent_TrainingPhrase& a, Intent_TrainingPhrase& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_TrainingPhrase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_TrainingPhrase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_TrainingPhrase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_TrainingPhrase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_TrainingPhrase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_TrainingPhrase& from) {
    Intent_TrainingPhrase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_TrainingPhrase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.TrainingPhrase";
  }
  protected:
  explicit Intent_TrainingPhrase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_TrainingPhrase_Part Part;

  typedef Intent_TrainingPhrase_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Intent_TrainingPhrase_Type_TYPE_UNSPECIFIED;
  static constexpr Type EXAMPLE =
    Intent_TrainingPhrase_Type_EXAMPLE;
  PROTOBUF_DEPRECATED_ENUM static constexpr Type TEMPLATE =
    Intent_TrainingPhrase_Type_TEMPLATE;
  static inline bool Type_IsValid(int value) {
    return Intent_TrainingPhrase_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Intent_TrainingPhrase_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Intent_TrainingPhrase_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Intent_TrainingPhrase_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Intent_TrainingPhrase_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Intent_TrainingPhrase_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Intent_TrainingPhrase_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimesAddedCountFieldNumber = 4,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part parts = 3 [(.google.api.field_behavior) = REQUIRED];
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part >*
      mutable_parts();
  private:
  const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part& _internal_parts(int index) const;
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* _internal_add_parts();
  public:
  const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part& parts(int index) const;
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part >&
      parts() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.dialogflow.v2.Intent.TrainingPhrase.Type type = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_type();
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type type() const;
  void set_type(::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type value);
  private:
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type _internal_type() const;
  void _internal_set_type(::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type value);
  public:

  // int32 times_added_count = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_times_added_count();
  int32_t times_added_count() const;
  void set_times_added_count(int32_t value);
  private:
  int32_t _internal_times_added_count() const;
  void _internal_set_times_added_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.TrainingPhrase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part > parts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    int32_t times_added_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Parameter) */ {
 public:
  inline Intent_Parameter() : Intent_Parameter(nullptr) {}
  ~Intent_Parameter() override;
  explicit PROTOBUF_CONSTEXPR Intent_Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Parameter(const Intent_Parameter& from);
  Intent_Parameter(Intent_Parameter&& from) noexcept
    : Intent_Parameter() {
    *this = ::std::move(from);
  }

  inline Intent_Parameter& operator=(const Intent_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Parameter& operator=(Intent_Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Parameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Parameter* internal_default_instance() {
    return reinterpret_cast<const Intent_Parameter*>(
               &_Intent_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Intent_Parameter& a, Intent_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Parameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Parameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Parameter& from) {
    Intent_Parameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Parameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Parameter";
  }
  protected:
  explicit Intent_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromptsFieldNumber = 7,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kValueFieldNumber = 3,
    kDefaultValueFieldNumber = 4,
    kEntityTypeDisplayNameFieldNumber = 5,
    kMandatoryFieldNumber = 6,
    kIsListFieldNumber = 8,
  };
  // repeated string prompts = 7 [(.google.api.field_behavior) = OPTIONAL];
  int prompts_size() const;
  private:
  int _internal_prompts_size() const;
  public:
  void clear_prompts();
  const std::string& prompts(int index) const;
  std::string* mutable_prompts(int index);
  void set_prompts(int index, const std::string& value);
  void set_prompts(int index, std::string&& value);
  void set_prompts(int index, const char* value);
  void set_prompts(int index, const char* value, size_t size);
  std::string* add_prompts();
  void add_prompts(const std::string& value);
  void add_prompts(std::string&& value);
  void add_prompts(const char* value);
  void add_prompts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prompts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prompts();
  private:
  const std::string& _internal_prompts(int index) const;
  std::string* _internal_add_prompts();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string value = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string default_value = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_default_value();
  const std::string& default_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_value();
  PROTOBUF_NODISCARD std::string* release_default_value();
  void set_allocated_default_value(std::string* default_value);
  private:
  const std::string& _internal_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_value(const std::string& value);
  std::string* _internal_mutable_default_value();
  public:

  // string entity_type_display_name = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_entity_type_display_name();
  const std::string& entity_type_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_type_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_type_display_name();
  PROTOBUF_NODISCARD std::string* release_entity_type_display_name();
  void set_allocated_entity_type_display_name(std::string* entity_type_display_name);
  private:
  const std::string& _internal_entity_type_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_type_display_name(const std::string& value);
  std::string* _internal_mutable_entity_type_display_name();
  public:

  // bool mandatory = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_mandatory();
  bool mandatory() const;
  void set_mandatory(bool value);
  private:
  bool _internal_mandatory() const;
  void _internal_set_mandatory(bool value);
  public:

  // bool is_list = 8 [(.google.api.field_behavior) = OPTIONAL];
  void clear_is_list();
  bool is_list() const;
  void set_is_list(bool value);
  private:
  bool _internal_is_list() const;
  void _internal_set_is_list(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Parameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prompts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_type_display_name_;
    bool mandatory_;
    bool is_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Text final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Text) */ {
 public:
  inline Intent_Message_Text() : Intent_Message_Text(nullptr) {}
  ~Intent_Message_Text() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Text(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Text(const Intent_Message_Text& from);
  Intent_Message_Text(Intent_Message_Text&& from) noexcept
    : Intent_Message_Text() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Text& operator=(const Intent_Message_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Text& operator=(Intent_Message_Text&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Text& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Text* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Text*>(
               &_Intent_Message_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Intent_Message_Text& a, Intent_Message_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Text* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Text>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Text& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Text& from) {
    Intent_Message_Text::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Text* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Text";
  }
  protected:
  explicit Intent_Message_Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // repeated string text = 1 [(.google.api.field_behavior) = OPTIONAL];
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Image) */ {
 public:
  inline Intent_Message_Image() : Intent_Message_Image(nullptr) {}
  ~Intent_Message_Image() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Image(const Intent_Message_Image& from);
  Intent_Message_Image(Intent_Message_Image&& from) noexcept
    : Intent_Message_Image() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Image& operator=(const Intent_Message_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Image& operator=(Intent_Message_Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Image* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Image*>(
               &_Intent_Message_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Intent_Message_Image& a, Intent_Message_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Image& from) {
    Intent_Message_Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Image";
  }
  protected:
  explicit Intent_Message_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageUriFieldNumber = 1,
    kAccessibilityTextFieldNumber = 2,
  };
  // string image_uri = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_image_uri();
  const std::string& image_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_uri();
  PROTOBUF_NODISCARD std::string* release_image_uri();
  void set_allocated_image_uri(std::string* image_uri);
  private:
  const std::string& _internal_image_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_uri(const std::string& value);
  std::string* _internal_mutable_image_uri();
  public:

  // string accessibility_text = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_accessibility_text();
  const std::string& accessibility_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_text();
  PROTOBUF_NODISCARD std::string* release_accessibility_text();
  void set_allocated_accessibility_text(std::string* accessibility_text);
  private:
  const std::string& _internal_accessibility_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_text(const std::string& value);
  std::string* _internal_mutable_accessibility_text();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_QuickReplies final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.QuickReplies) */ {
 public:
  inline Intent_Message_QuickReplies() : Intent_Message_QuickReplies(nullptr) {}
  ~Intent_Message_QuickReplies() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_QuickReplies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_QuickReplies(const Intent_Message_QuickReplies& from);
  Intent_Message_QuickReplies(Intent_Message_QuickReplies&& from) noexcept
    : Intent_Message_QuickReplies() {
    *this = ::std::move(from);
  }

  inline Intent_Message_QuickReplies& operator=(const Intent_Message_QuickReplies& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_QuickReplies& operator=(Intent_Message_QuickReplies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_QuickReplies& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_QuickReplies* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_QuickReplies*>(
               &_Intent_Message_QuickReplies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Intent_Message_QuickReplies& a, Intent_Message_QuickReplies& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_QuickReplies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_QuickReplies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_QuickReplies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_QuickReplies>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_QuickReplies& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_QuickReplies& from) {
    Intent_Message_QuickReplies::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_QuickReplies* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.QuickReplies";
  }
  protected:
  explicit Intent_Message_QuickReplies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuickRepliesFieldNumber = 2,
    kTitleFieldNumber = 1,
  };
  // repeated string quick_replies = 2 [(.google.api.field_behavior) = OPTIONAL];
  int quick_replies_size() const;
  private:
  int _internal_quick_replies_size() const;
  public:
  void clear_quick_replies();
  const std::string& quick_replies(int index) const;
  std::string* mutable_quick_replies(int index);
  void set_quick_replies(int index, const std::string& value);
  void set_quick_replies(int index, std::string&& value);
  void set_quick_replies(int index, const char* value);
  void set_quick_replies(int index, const char* value, size_t size);
  std::string* add_quick_replies();
  void add_quick_replies(const std::string& value);
  void add_quick_replies(std::string&& value);
  void add_quick_replies(const char* value);
  void add_quick_replies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& quick_replies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_quick_replies();
  private:
  const std::string& _internal_quick_replies(int index) const;
  std::string* _internal_add_quick_replies();
  public:

  // string title = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.QuickReplies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> quick_replies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Card_Button final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Card.Button) */ {
 public:
  inline Intent_Message_Card_Button() : Intent_Message_Card_Button(nullptr) {}
  ~Intent_Message_Card_Button() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Card_Button(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Card_Button(const Intent_Message_Card_Button& from);
  Intent_Message_Card_Button(Intent_Message_Card_Button&& from) noexcept
    : Intent_Message_Card_Button() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Card_Button& operator=(const Intent_Message_Card_Button& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Card_Button& operator=(Intent_Message_Card_Button&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Card_Button& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Card_Button* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Card_Button*>(
               &_Intent_Message_Card_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Intent_Message_Card_Button& a, Intent_Message_Card_Button& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Card_Button* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Card_Button* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Card_Button* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Card_Button>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Card_Button& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Card_Button& from) {
    Intent_Message_Card_Button::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Card_Button* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Card.Button";
  }
  protected:
  explicit Intent_Message_Card_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kPostbackFieldNumber = 2,
  };
  // string text = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string postback = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_postback();
  const std::string& postback() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postback(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postback();
  PROTOBUF_NODISCARD std::string* release_postback();
  void set_allocated_postback(std::string* postback);
  private:
  const std::string& _internal_postback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postback(const std::string& value);
  std::string* _internal_mutable_postback();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Card.Button)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Card final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Card) */ {
 public:
  inline Intent_Message_Card() : Intent_Message_Card(nullptr) {}
  ~Intent_Message_Card() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Card(const Intent_Message_Card& from);
  Intent_Message_Card(Intent_Message_Card&& from) noexcept
    : Intent_Message_Card() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Card& operator=(const Intent_Message_Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Card& operator=(Intent_Message_Card&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Card* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Card*>(
               &_Intent_Message_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Intent_Message_Card& a, Intent_Message_Card& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Card* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Card>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Card& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Card& from) {
    Intent_Message_Card::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Card* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Card";
  }
  protected:
  explicit Intent_Message_Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_Card_Button Button;

  // accessors -------------------------------------------------------

  enum : int {
    kButtonsFieldNumber = 4,
    kTitleFieldNumber = 1,
    kSubtitleFieldNumber = 2,
    kImageUriFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.Card.Button buttons = 4 [(.google.api.field_behavior) = OPTIONAL];
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* mutable_buttons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Card_Button >*
      mutable_buttons();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Card_Button& _internal_buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* _internal_add_buttons();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_Card_Button& buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* add_buttons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Card_Button >&
      buttons() const;

  // string title = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string image_uri = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_image_uri();
  const std::string& image_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_uri();
  PROTOBUF_NODISCARD std::string* release_image_uri();
  void set_allocated_image_uri(std::string* image_uri);
  private:
  const std::string& _internal_image_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_uri(const std::string& value);
  std::string* _internal_mutable_image_uri();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Card_Button > buttons_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_SimpleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse) */ {
 public:
  inline Intent_Message_SimpleResponse() : Intent_Message_SimpleResponse(nullptr) {}
  ~Intent_Message_SimpleResponse() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_SimpleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_SimpleResponse(const Intent_Message_SimpleResponse& from);
  Intent_Message_SimpleResponse(Intent_Message_SimpleResponse&& from) noexcept
    : Intent_Message_SimpleResponse() {
    *this = ::std::move(from);
  }

  inline Intent_Message_SimpleResponse& operator=(const Intent_Message_SimpleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_SimpleResponse& operator=(Intent_Message_SimpleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_SimpleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_SimpleResponse* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_SimpleResponse*>(
               &_Intent_Message_SimpleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Intent_Message_SimpleResponse& a, Intent_Message_SimpleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_SimpleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_SimpleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_SimpleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_SimpleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_SimpleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_SimpleResponse& from) {
    Intent_Message_SimpleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_SimpleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.SimpleResponse";
  }
  protected:
  explicit Intent_Message_SimpleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextToSpeechFieldNumber = 1,
    kSsmlFieldNumber = 2,
    kDisplayTextFieldNumber = 3,
  };
  // string text_to_speech = 1;
  void clear_text_to_speech();
  const std::string& text_to_speech() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_to_speech(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_to_speech();
  PROTOBUF_NODISCARD std::string* release_text_to_speech();
  void set_allocated_text_to_speech(std::string* text_to_speech);
  private:
  const std::string& _internal_text_to_speech() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_to_speech(const std::string& value);
  std::string* _internal_mutable_text_to_speech();
  public:

  // string ssml = 2;
  void clear_ssml();
  const std::string& ssml() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssml(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssml();
  PROTOBUF_NODISCARD std::string* release_ssml();
  void set_allocated_ssml(std::string* ssml);
  private:
  const std::string& _internal_ssml() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssml(const std::string& value);
  std::string* _internal_mutable_ssml();
  public:

  // string display_text = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_display_text();
  const std::string& display_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_text();
  PROTOBUF_NODISCARD std::string* release_display_text();
  void set_allocated_display_text(std::string* display_text);
  private:
  const std::string& _internal_display_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_text(const std::string& value);
  std::string* _internal_mutable_display_text();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_to_speech_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssml_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_SimpleResponses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses) */ {
 public:
  inline Intent_Message_SimpleResponses() : Intent_Message_SimpleResponses(nullptr) {}
  ~Intent_Message_SimpleResponses() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_SimpleResponses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_SimpleResponses(const Intent_Message_SimpleResponses& from);
  Intent_Message_SimpleResponses(Intent_Message_SimpleResponses&& from) noexcept
    : Intent_Message_SimpleResponses() {
    *this = ::std::move(from);
  }

  inline Intent_Message_SimpleResponses& operator=(const Intent_Message_SimpleResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_SimpleResponses& operator=(Intent_Message_SimpleResponses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_SimpleResponses& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_SimpleResponses* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_SimpleResponses*>(
               &_Intent_Message_SimpleResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Intent_Message_SimpleResponses& a, Intent_Message_SimpleResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_SimpleResponses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_SimpleResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_SimpleResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_SimpleResponses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_SimpleResponses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_SimpleResponses& from) {
    Intent_Message_SimpleResponses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_SimpleResponses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.SimpleResponses";
  }
  protected:
  explicit Intent_Message_SimpleResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleResponsesFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.SimpleResponse simple_responses = 1 [(.google.api.field_behavior) = REQUIRED];
  int simple_responses_size() const;
  private:
  int _internal_simple_responses_size() const;
  public:
  void clear_simple_responses();
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* mutable_simple_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse >*
      mutable_simple_responses();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse& _internal_simple_responses(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* _internal_add_simple_responses();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse& simple_responses(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* add_simple_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse >&
      simple_responses() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse > simple_responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BasicCard_Button_OpenUriAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction) */ {
 public:
  inline Intent_Message_BasicCard_Button_OpenUriAction() : Intent_Message_BasicCard_Button_OpenUriAction(nullptr) {}
  ~Intent_Message_BasicCard_Button_OpenUriAction() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BasicCard_Button_OpenUriAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BasicCard_Button_OpenUriAction(const Intent_Message_BasicCard_Button_OpenUriAction& from);
  Intent_Message_BasicCard_Button_OpenUriAction(Intent_Message_BasicCard_Button_OpenUriAction&& from) noexcept
    : Intent_Message_BasicCard_Button_OpenUriAction() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BasicCard_Button_OpenUriAction& operator=(const Intent_Message_BasicCard_Button_OpenUriAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BasicCard_Button_OpenUriAction& operator=(Intent_Message_BasicCard_Button_OpenUriAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BasicCard_Button_OpenUriAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BasicCard_Button_OpenUriAction* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BasicCard_Button_OpenUriAction*>(
               &_Intent_Message_BasicCard_Button_OpenUriAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Intent_Message_BasicCard_Button_OpenUriAction& a, Intent_Message_BasicCard_Button_OpenUriAction& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BasicCard_Button_OpenUriAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BasicCard_Button_OpenUriAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BasicCard_Button_OpenUriAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BasicCard_Button_OpenUriAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BasicCard_Button_OpenUriAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BasicCard_Button_OpenUriAction& from) {
    Intent_Message_BasicCard_Button_OpenUriAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BasicCard_Button_OpenUriAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction";
  }
  protected:
  explicit Intent_Message_BasicCard_Button_OpenUriAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BasicCard_Button final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button) */ {
 public:
  inline Intent_Message_BasicCard_Button() : Intent_Message_BasicCard_Button(nullptr) {}
  ~Intent_Message_BasicCard_Button() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BasicCard_Button(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BasicCard_Button(const Intent_Message_BasicCard_Button& from);
  Intent_Message_BasicCard_Button(Intent_Message_BasicCard_Button&& from) noexcept
    : Intent_Message_BasicCard_Button() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BasicCard_Button& operator=(const Intent_Message_BasicCard_Button& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BasicCard_Button& operator=(Intent_Message_BasicCard_Button&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BasicCard_Button& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BasicCard_Button* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BasicCard_Button*>(
               &_Intent_Message_BasicCard_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Intent_Message_BasicCard_Button& a, Intent_Message_BasicCard_Button& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BasicCard_Button* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BasicCard_Button* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BasicCard_Button* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BasicCard_Button>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BasicCard_Button& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BasicCard_Button& from) {
    Intent_Message_BasicCard_Button::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BasicCard_Button* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button";
  }
  protected:
  explicit Intent_Message_BasicCard_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_BasicCard_Button_OpenUriAction OpenUriAction;

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kOpenUriActionFieldNumber = 2,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction open_uri_action = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_open_uri_action() const;
  private:
  bool _internal_has_open_uri_action() const;
  public:
  void clear_open_uri_action();
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction& open_uri_action() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* release_open_uri_action();
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* mutable_open_uri_action();
  void set_allocated_open_uri_action(::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* open_uri_action);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction& _internal_open_uri_action() const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* _internal_mutable_open_uri_action();
  public:
  void unsafe_arena_set_allocated_open_uri_action(
      ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* open_uri_action);
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* unsafe_arena_release_open_uri_action();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* open_uri_action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BasicCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BasicCard) */ {
 public:
  inline Intent_Message_BasicCard() : Intent_Message_BasicCard(nullptr) {}
  ~Intent_Message_BasicCard() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BasicCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BasicCard(const Intent_Message_BasicCard& from);
  Intent_Message_BasicCard(Intent_Message_BasicCard&& from) noexcept
    : Intent_Message_BasicCard() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BasicCard& operator=(const Intent_Message_BasicCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BasicCard& operator=(Intent_Message_BasicCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BasicCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BasicCard* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BasicCard*>(
               &_Intent_Message_BasicCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Intent_Message_BasicCard& a, Intent_Message_BasicCard& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BasicCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BasicCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BasicCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BasicCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BasicCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BasicCard& from) {
    Intent_Message_BasicCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BasicCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BasicCard";
  }
  protected:
  explicit Intent_Message_BasicCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_BasicCard_Button Button;

  // accessors -------------------------------------------------------

  enum : int {
    kButtonsFieldNumber = 5,
    kTitleFieldNumber = 1,
    kSubtitleFieldNumber = 2,
    kFormattedTextFieldNumber = 3,
    kImageFieldNumber = 4,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button buttons = 5 [(.google.api.field_behavior) = OPTIONAL];
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* mutable_buttons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >*
      mutable_buttons();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& _internal_buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* _internal_add_buttons();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* add_buttons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >&
      buttons() const;

  // string title = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string formatted_text = 3;
  void clear_formatted_text();
  const std::string& formatted_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formatted_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formatted_text();
  PROTOBUF_NODISCARD std::string* release_formatted_text();
  void set_allocated_formatted_text(std::string* formatted_text);
  private:
  const std::string& _internal_formatted_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formatted_text(const std::string& value);
  std::string* _internal_mutable_formatted_text();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BasicCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button > buttons_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_text_;
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Suggestion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Suggestion) */ {
 public:
  inline Intent_Message_Suggestion() : Intent_Message_Suggestion(nullptr) {}
  ~Intent_Message_Suggestion() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Suggestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Suggestion(const Intent_Message_Suggestion& from);
  Intent_Message_Suggestion(Intent_Message_Suggestion&& from) noexcept
    : Intent_Message_Suggestion() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Suggestion& operator=(const Intent_Message_Suggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Suggestion& operator=(Intent_Message_Suggestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Suggestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Suggestion* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Suggestion*>(
               &_Intent_Message_Suggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Intent_Message_Suggestion& a, Intent_Message_Suggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Suggestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Suggestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Suggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Suggestion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Suggestion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Suggestion& from) {
    Intent_Message_Suggestion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Suggestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Suggestion";
  }
  protected:
  explicit Intent_Message_Suggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
  };
  // string title = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Suggestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_Suggestions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.Suggestions) */ {
 public:
  inline Intent_Message_Suggestions() : Intent_Message_Suggestions(nullptr) {}
  ~Intent_Message_Suggestions() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_Suggestions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_Suggestions(const Intent_Message_Suggestions& from);
  Intent_Message_Suggestions(Intent_Message_Suggestions&& from) noexcept
    : Intent_Message_Suggestions() {
    *this = ::std::move(from);
  }

  inline Intent_Message_Suggestions& operator=(const Intent_Message_Suggestions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_Suggestions& operator=(Intent_Message_Suggestions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_Suggestions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_Suggestions* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_Suggestions*>(
               &_Intent_Message_Suggestions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Intent_Message_Suggestions& a, Intent_Message_Suggestions& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_Suggestions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_Suggestions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_Suggestions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_Suggestions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_Suggestions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_Suggestions& from) {
    Intent_Message_Suggestions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_Suggestions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.Suggestions";
  }
  protected:
  explicit Intent_Message_Suggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionsFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.Suggestion suggestions = 1 [(.google.api.field_behavior) = REQUIRED];
  int suggestions_size() const;
  private:
  int _internal_suggestions_size() const;
  public:
  void clear_suggestions();
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* mutable_suggestions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Suggestion >*
      mutable_suggestions();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Suggestion& _internal_suggestions(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* _internal_add_suggestions();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_Suggestion& suggestions(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* add_suggestions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Suggestion >&
      suggestions() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.Suggestions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Suggestion > suggestions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_LinkOutSuggestion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion) */ {
 public:
  inline Intent_Message_LinkOutSuggestion() : Intent_Message_LinkOutSuggestion(nullptr) {}
  ~Intent_Message_LinkOutSuggestion() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_LinkOutSuggestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_LinkOutSuggestion(const Intent_Message_LinkOutSuggestion& from);
  Intent_Message_LinkOutSuggestion(Intent_Message_LinkOutSuggestion&& from) noexcept
    : Intent_Message_LinkOutSuggestion() {
    *this = ::std::move(from);
  }

  inline Intent_Message_LinkOutSuggestion& operator=(const Intent_Message_LinkOutSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_LinkOutSuggestion& operator=(Intent_Message_LinkOutSuggestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_LinkOutSuggestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_LinkOutSuggestion* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_LinkOutSuggestion*>(
               &_Intent_Message_LinkOutSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Intent_Message_LinkOutSuggestion& a, Intent_Message_LinkOutSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_LinkOutSuggestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_LinkOutSuggestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_LinkOutSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_LinkOutSuggestion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_LinkOutSuggestion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_LinkOutSuggestion& from) {
    Intent_Message_LinkOutSuggestion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_LinkOutSuggestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion";
  }
  protected:
  explicit Intent_Message_LinkOutSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationNameFieldNumber = 1,
    kUriFieldNumber = 2,
  };
  // string destination_name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_destination_name();
  const std::string& destination_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_name();
  PROTOBUF_NODISCARD std::string* release_destination_name();
  void set_allocated_destination_name(std::string* destination_name);
  private:
  const std::string& _internal_destination_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_name(const std::string& value);
  std::string* _internal_mutable_destination_name();
  public:

  // string uri = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_ListSelect_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item) */ {
 public:
  inline Intent_Message_ListSelect_Item() : Intent_Message_ListSelect_Item(nullptr) {}
  ~Intent_Message_ListSelect_Item() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_ListSelect_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_ListSelect_Item(const Intent_Message_ListSelect_Item& from);
  Intent_Message_ListSelect_Item(Intent_Message_ListSelect_Item&& from) noexcept
    : Intent_Message_ListSelect_Item() {
    *this = ::std::move(from);
  }

  inline Intent_Message_ListSelect_Item& operator=(const Intent_Message_ListSelect_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_ListSelect_Item& operator=(Intent_Message_ListSelect_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_ListSelect_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_ListSelect_Item* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_ListSelect_Item*>(
               &_Intent_Message_ListSelect_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Intent_Message_ListSelect_Item& a, Intent_Message_ListSelect_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_ListSelect_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_ListSelect_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_ListSelect_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_ListSelect_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_ListSelect_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_ListSelect_Item& from) {
    Intent_Message_ListSelect_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_ListSelect_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item";
  }
  protected:
  explicit Intent_Message_ListSelect_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kInfoFieldNumber = 1,
    kImageFieldNumber = 4,
  };
  // string title = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo info = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& info() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* release_info();
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* mutable_info();
  void set_allocated_info(::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& _internal_info() const;
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info);
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* unsafe_arena_release_info();

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info_;
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_ListSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.ListSelect) */ {
 public:
  inline Intent_Message_ListSelect() : Intent_Message_ListSelect(nullptr) {}
  ~Intent_Message_ListSelect() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_ListSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_ListSelect(const Intent_Message_ListSelect& from);
  Intent_Message_ListSelect(Intent_Message_ListSelect&& from) noexcept
    : Intent_Message_ListSelect() {
    *this = ::std::move(from);
  }

  inline Intent_Message_ListSelect& operator=(const Intent_Message_ListSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_ListSelect& operator=(Intent_Message_ListSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_ListSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_ListSelect* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_ListSelect*>(
               &_Intent_Message_ListSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Intent_Message_ListSelect& a, Intent_Message_ListSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_ListSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_ListSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_ListSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_ListSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_ListSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_ListSelect& from) {
    Intent_Message_ListSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_ListSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.ListSelect";
  }
  protected:
  explicit Intent_Message_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_ListSelect_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kTitleFieldNumber = 1,
    kSubtitleFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item items = 2 [(.google.api.field_behavior) = REQUIRED];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item >*
      mutable_items();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item& _internal_items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* _internal_add_items();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item& items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item >&
      items() const;

  // string title = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.ListSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_CarouselSelect_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item) */ {
 public:
  inline Intent_Message_CarouselSelect_Item() : Intent_Message_CarouselSelect_Item(nullptr) {}
  ~Intent_Message_CarouselSelect_Item() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_CarouselSelect_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_CarouselSelect_Item(const Intent_Message_CarouselSelect_Item& from);
  Intent_Message_CarouselSelect_Item(Intent_Message_CarouselSelect_Item&& from) noexcept
    : Intent_Message_CarouselSelect_Item() {
    *this = ::std::move(from);
  }

  inline Intent_Message_CarouselSelect_Item& operator=(const Intent_Message_CarouselSelect_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_CarouselSelect_Item& operator=(Intent_Message_CarouselSelect_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_CarouselSelect_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_CarouselSelect_Item* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_CarouselSelect_Item*>(
               &_Intent_Message_CarouselSelect_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Intent_Message_CarouselSelect_Item& a, Intent_Message_CarouselSelect_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_CarouselSelect_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_CarouselSelect_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_CarouselSelect_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_CarouselSelect_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_CarouselSelect_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_CarouselSelect_Item& from) {
    Intent_Message_CarouselSelect_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_CarouselSelect_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item";
  }
  protected:
  explicit Intent_Message_CarouselSelect_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kInfoFieldNumber = 1,
    kImageFieldNumber = 4,
  };
  // string title = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo info = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& info() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* release_info();
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* mutable_info();
  void set_allocated_info(::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& _internal_info() const;
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info);
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* unsafe_arena_release_info();

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info_;
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_CarouselSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect) */ {
 public:
  inline Intent_Message_CarouselSelect() : Intent_Message_CarouselSelect(nullptr) {}
  ~Intent_Message_CarouselSelect() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_CarouselSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_CarouselSelect(const Intent_Message_CarouselSelect& from);
  Intent_Message_CarouselSelect(Intent_Message_CarouselSelect&& from) noexcept
    : Intent_Message_CarouselSelect() {
    *this = ::std::move(from);
  }

  inline Intent_Message_CarouselSelect& operator=(const Intent_Message_CarouselSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_CarouselSelect& operator=(Intent_Message_CarouselSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_CarouselSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_CarouselSelect* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_CarouselSelect*>(
               &_Intent_Message_CarouselSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Intent_Message_CarouselSelect& a, Intent_Message_CarouselSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_CarouselSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_CarouselSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_CarouselSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_CarouselSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_CarouselSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_CarouselSelect& from) {
    Intent_Message_CarouselSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_CarouselSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.CarouselSelect";
  }
  protected:
  explicit Intent_Message_CarouselSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_CarouselSelect_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item items = 1 [(.google.api.field_behavior) = REQUIRED];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item >*
      mutable_items();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item& _internal_items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* _internal_add_items();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item& items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_SelectItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo) */ {
 public:
  inline Intent_Message_SelectItemInfo() : Intent_Message_SelectItemInfo(nullptr) {}
  ~Intent_Message_SelectItemInfo() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_SelectItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_SelectItemInfo(const Intent_Message_SelectItemInfo& from);
  Intent_Message_SelectItemInfo(Intent_Message_SelectItemInfo&& from) noexcept
    : Intent_Message_SelectItemInfo() {
    *this = ::std::move(from);
  }

  inline Intent_Message_SelectItemInfo& operator=(const Intent_Message_SelectItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_SelectItemInfo& operator=(Intent_Message_SelectItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_SelectItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_SelectItemInfo* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_SelectItemInfo*>(
               &_Intent_Message_SelectItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Intent_Message_SelectItemInfo& a, Intent_Message_SelectItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_SelectItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_SelectItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_SelectItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_SelectItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_SelectItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_SelectItemInfo& from) {
    Intent_Message_SelectItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_SelectItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo";
  }
  protected:
  explicit Intent_Message_SelectItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynonymsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string synonyms = 2 [(.google.api.field_behavior) = OPTIONAL];
  int synonyms_size() const;
  private:
  int _internal_synonyms_size() const;
  public:
  void clear_synonyms();
  const std::string& synonyms(int index) const;
  std::string* mutable_synonyms(int index);
  void set_synonyms(int index, const std::string& value);
  void set_synonyms(int index, std::string&& value);
  void set_synonyms(int index, const char* value);
  void set_synonyms(int index, const char* value, size_t size);
  std::string* add_synonyms();
  void add_synonyms(const std::string& value);
  void add_synonyms(std::string&& value);
  void add_synonyms(const char* value);
  void add_synonyms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& synonyms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_synonyms();
  private:
  const std::string& _internal_synonyms(int index) const;
  std::string* _internal_add_synonyms();
  public:

  // string key = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> synonyms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_MediaContent_ResponseMediaObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject) */ {
 public:
  inline Intent_Message_MediaContent_ResponseMediaObject() : Intent_Message_MediaContent_ResponseMediaObject(nullptr) {}
  ~Intent_Message_MediaContent_ResponseMediaObject() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_MediaContent_ResponseMediaObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_MediaContent_ResponseMediaObject(const Intent_Message_MediaContent_ResponseMediaObject& from);
  Intent_Message_MediaContent_ResponseMediaObject(Intent_Message_MediaContent_ResponseMediaObject&& from) noexcept
    : Intent_Message_MediaContent_ResponseMediaObject() {
    *this = ::std::move(from);
  }

  inline Intent_Message_MediaContent_ResponseMediaObject& operator=(const Intent_Message_MediaContent_ResponseMediaObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_MediaContent_ResponseMediaObject& operator=(Intent_Message_MediaContent_ResponseMediaObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_MediaContent_ResponseMediaObject& default_instance() {
    return *internal_default_instance();
  }
  enum ImageCase {
    kLargeImage = 3,
    kIcon = 4,
    IMAGE_NOT_SET = 0,
  };

  static inline const Intent_Message_MediaContent_ResponseMediaObject* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_MediaContent_ResponseMediaObject*>(
               &_Intent_Message_MediaContent_ResponseMediaObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Intent_Message_MediaContent_ResponseMediaObject& a, Intent_Message_MediaContent_ResponseMediaObject& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_MediaContent_ResponseMediaObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_MediaContent_ResponseMediaObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_MediaContent_ResponseMediaObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_MediaContent_ResponseMediaObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_MediaContent_ResponseMediaObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_MediaContent_ResponseMediaObject& from) {
    Intent_Message_MediaContent_ResponseMediaObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_MediaContent_ResponseMediaObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject";
  }
  protected:
  explicit Intent_Message_MediaContent_ResponseMediaObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kContentUrlFieldNumber = 5,
    kLargeImageFieldNumber = 3,
    kIconFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string content_url = 5;
  void clear_content_url();
  const std::string& content_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_url();
  PROTOBUF_NODISCARD std::string* release_content_url();
  void set_allocated_content_url(std::string* content_url);
  private:
  const std::string& _internal_content_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_url(const std::string& value);
  std::string* _internal_mutable_content_url();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.Image large_image = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_large_image() const;
  private:
  bool _internal_has_large_image() const;
  public:
  void clear_large_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& large_image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_large_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_large_image();
  void set_allocated_large_image(::google::cloud::dialogflow::v2::Intent_Message_Image* large_image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_large_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_large_image();
  public:
  void unsafe_arena_set_allocated_large_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* large_image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_large_image();

  // .google.cloud.dialogflow.v2.Intent.Message.Image icon = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& icon() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_icon();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_icon();
  void set_allocated_icon(::google::cloud::dialogflow::v2::Intent_Message_Image* icon);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_icon() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_icon();
  public:
  void unsafe_arena_set_allocated_icon(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* icon);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_icon();

  void clear_image();
  ImageCase image_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject)
 private:
  class _Internal;
  void set_has_large_image();
  void set_has_icon();

  inline bool has_image() const;
  inline void clear_has_image();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_url_;
    union ImageUnion {
      constexpr ImageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::Intent_Message_Image* large_image_;
      ::google::cloud::dialogflow::v2::Intent_Message_Image* icon_;
    } image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_MediaContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.MediaContent) */ {
 public:
  inline Intent_Message_MediaContent() : Intent_Message_MediaContent(nullptr) {}
  ~Intent_Message_MediaContent() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_MediaContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_MediaContent(const Intent_Message_MediaContent& from);
  Intent_Message_MediaContent(Intent_Message_MediaContent&& from) noexcept
    : Intent_Message_MediaContent() {
    *this = ::std::move(from);
  }

  inline Intent_Message_MediaContent& operator=(const Intent_Message_MediaContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_MediaContent& operator=(Intent_Message_MediaContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_MediaContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_MediaContent* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_MediaContent*>(
               &_Intent_Message_MediaContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Intent_Message_MediaContent& a, Intent_Message_MediaContent& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_MediaContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_MediaContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_MediaContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_MediaContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_MediaContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_MediaContent& from) {
    Intent_Message_MediaContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_MediaContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.MediaContent";
  }
  protected:
  explicit Intent_Message_MediaContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_MediaContent_ResponseMediaObject ResponseMediaObject;

  typedef Intent_Message_MediaContent_ResponseMediaType ResponseMediaType;
  static constexpr ResponseMediaType RESPONSE_MEDIA_TYPE_UNSPECIFIED =
    Intent_Message_MediaContent_ResponseMediaType_RESPONSE_MEDIA_TYPE_UNSPECIFIED;
  static constexpr ResponseMediaType AUDIO =
    Intent_Message_MediaContent_ResponseMediaType_AUDIO;
  static inline bool ResponseMediaType_IsValid(int value) {
    return Intent_Message_MediaContent_ResponseMediaType_IsValid(value);
  }
  static constexpr ResponseMediaType ResponseMediaType_MIN =
    Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_MIN;
  static constexpr ResponseMediaType ResponseMediaType_MAX =
    Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_MAX;
  static constexpr int ResponseMediaType_ARRAYSIZE =
    Intent_Message_MediaContent_ResponseMediaType_ResponseMediaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseMediaType_descriptor() {
    return Intent_Message_MediaContent_ResponseMediaType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseMediaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseMediaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseMediaType_Name.");
    return Intent_Message_MediaContent_ResponseMediaType_Name(enum_t_value);
  }
  static inline bool ResponseMediaType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseMediaType* value) {
    return Intent_Message_MediaContent_ResponseMediaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMediaObjectsFieldNumber = 2,
    kMediaTypeFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject media_objects = 2;
  int media_objects_size() const;
  private:
  int _internal_media_objects_size() const;
  public:
  void clear_media_objects();
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* mutable_media_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject >*
      mutable_media_objects();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject& _internal_media_objects(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* _internal_add_media_objects();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject& media_objects(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* add_media_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject >&
      media_objects() const;

  // .google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaType media_type = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_media_type();
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType media_type() const;
  void set_media_type(::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType value);
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType _internal_media_type() const;
  void _internal_set_media_type(::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.MediaContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject > media_objects_;
    int media_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction) */ {
 public:
  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction() : Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(nullptr) {}
  ~Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& from);
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction&& from) noexcept
    : Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& operator=(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& operator=(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction*>(
               &_Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& a, Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& from) {
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction";
  }
  protected:
  explicit Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint UrlTypeHint;
  static constexpr UrlTypeHint URL_TYPE_HINT_UNSPECIFIED =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_URL_TYPE_HINT_UNSPECIFIED;
  static constexpr UrlTypeHint AMP_ACTION =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_AMP_ACTION;
  static constexpr UrlTypeHint AMP_CONTENT =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_AMP_CONTENT;
  static inline bool UrlTypeHint_IsValid(int value) {
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_IsValid(value);
  }
  static constexpr UrlTypeHint UrlTypeHint_MIN =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_MIN;
  static constexpr UrlTypeHint UrlTypeHint_MAX =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_MAX;
  static constexpr int UrlTypeHint_ARRAYSIZE =
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_UrlTypeHint_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UrlTypeHint_descriptor() {
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_descriptor();
  }
  template<typename T>
  static inline const std::string& UrlTypeHint_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UrlTypeHint>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UrlTypeHint_Name.");
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Name(enum_t_value);
  }
  static inline bool UrlTypeHint_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UrlTypeHint* value) {
    return Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kUrlTypeHintFieldNumber = 3,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint url_type_hint = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_url_type_hint();
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint url_type_hint() const;
  void set_url_type_hint(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint value);
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint _internal_url_type_hint() const;
  void _internal_set_url_type_hint(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    int url_type_hint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem) */ {
 public:
  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem() : Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem(nullptr) {}
  ~Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& from);
  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem&& from) noexcept
    : Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& operator=(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& operator=(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem*>(
               &_Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& a, Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& from) {
    Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem";
  }
  protected:
  explicit Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction OpenUrlAction;

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kFooterFieldNumber = 5,
    kOpenUriActionFieldNumber = 1,
    kImageFieldNumber = 4,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string footer = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_footer();
  const std::string& footer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_footer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_footer();
  PROTOBUF_NODISCARD std::string* release_footer();
  void set_allocated_footer(std::string* footer);
  private:
  const std::string& _internal_footer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_footer(const std::string& value);
  std::string* _internal_mutable_footer();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction open_uri_action = 1;
  bool has_open_uri_action() const;
  private:
  bool _internal_has_open_uri_action() const;
  public:
  void clear_open_uri_action();
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& open_uri_action() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* release_open_uri_action();
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* mutable_open_uri_action();
  void set_allocated_open_uri_action(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* open_uri_action);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& _internal_open_uri_action() const;
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* _internal_mutable_open_uri_action();
  public:
  void unsafe_arena_set_allocated_open_uri_action(
      ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* open_uri_action);
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* unsafe_arena_release_open_uri_action();

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr footer_;
    ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* open_uri_action_;
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_BrowseCarouselCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard) */ {
 public:
  inline Intent_Message_BrowseCarouselCard() : Intent_Message_BrowseCarouselCard(nullptr) {}
  ~Intent_Message_BrowseCarouselCard() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_BrowseCarouselCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_BrowseCarouselCard(const Intent_Message_BrowseCarouselCard& from);
  Intent_Message_BrowseCarouselCard(Intent_Message_BrowseCarouselCard&& from) noexcept
    : Intent_Message_BrowseCarouselCard() {
    *this = ::std::move(from);
  }

  inline Intent_Message_BrowseCarouselCard& operator=(const Intent_Message_BrowseCarouselCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_BrowseCarouselCard& operator=(Intent_Message_BrowseCarouselCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_BrowseCarouselCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_BrowseCarouselCard* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_BrowseCarouselCard*>(
               &_Intent_Message_BrowseCarouselCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Intent_Message_BrowseCarouselCard& a, Intent_Message_BrowseCarouselCard& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_BrowseCarouselCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_BrowseCarouselCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_BrowseCarouselCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_BrowseCarouselCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_BrowseCarouselCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_BrowseCarouselCard& from) {
    Intent_Message_BrowseCarouselCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_BrowseCarouselCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard";
  }
  protected:
  explicit Intent_Message_BrowseCarouselCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem BrowseCarouselCardItem;

  typedef Intent_Message_BrowseCarouselCard_ImageDisplayOptions ImageDisplayOptions;
  static constexpr ImageDisplayOptions IMAGE_DISPLAY_OPTIONS_UNSPECIFIED =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_IMAGE_DISPLAY_OPTIONS_UNSPECIFIED;
  static constexpr ImageDisplayOptions GRAY =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_GRAY;
  static constexpr ImageDisplayOptions WHITE =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_WHITE;
  static constexpr ImageDisplayOptions CROPPED =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_CROPPED;
  static constexpr ImageDisplayOptions BLURRED_BACKGROUND =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_BLURRED_BACKGROUND;
  static inline bool ImageDisplayOptions_IsValid(int value) {
    return Intent_Message_BrowseCarouselCard_ImageDisplayOptions_IsValid(value);
  }
  static constexpr ImageDisplayOptions ImageDisplayOptions_MIN =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_MIN;
  static constexpr ImageDisplayOptions ImageDisplayOptions_MAX =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_MAX;
  static constexpr int ImageDisplayOptions_ARRAYSIZE =
    Intent_Message_BrowseCarouselCard_ImageDisplayOptions_ImageDisplayOptions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageDisplayOptions_descriptor() {
    return Intent_Message_BrowseCarouselCard_ImageDisplayOptions_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageDisplayOptions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageDisplayOptions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageDisplayOptions_Name.");
    return Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Name(enum_t_value);
  }
  static inline bool ImageDisplayOptions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageDisplayOptions* value) {
    return Intent_Message_BrowseCarouselCard_ImageDisplayOptions_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kImageDisplayOptionsFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem >*
      mutable_items();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& _internal_items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* _internal_add_items();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& items(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem >&
      items() const;

  // .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.ImageDisplayOptions image_display_options = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_image_display_options();
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions image_display_options() const;
  void set_image_display_options(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions value);
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions _internal_image_display_options() const;
  void _internal_set_image_display_options(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem > items_;
    int image_display_options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_TableCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.TableCard) */ {
 public:
  inline Intent_Message_TableCard() : Intent_Message_TableCard(nullptr) {}
  ~Intent_Message_TableCard() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_TableCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_TableCard(const Intent_Message_TableCard& from);
  Intent_Message_TableCard(Intent_Message_TableCard&& from) noexcept
    : Intent_Message_TableCard() {
    *this = ::std::move(from);
  }

  inline Intent_Message_TableCard& operator=(const Intent_Message_TableCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_TableCard& operator=(Intent_Message_TableCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_TableCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_TableCard* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_TableCard*>(
               &_Intent_Message_TableCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Intent_Message_TableCard& a, Intent_Message_TableCard& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_TableCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_TableCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_TableCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_TableCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_TableCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_TableCard& from) {
    Intent_Message_TableCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_TableCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.TableCard";
  }
  protected:
  explicit Intent_Message_TableCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnPropertiesFieldNumber = 4,
    kRowsFieldNumber = 5,
    kButtonsFieldNumber = 6,
    kTitleFieldNumber = 1,
    kSubtitleFieldNumber = 2,
    kImageFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.ColumnProperties column_properties = 4 [(.google.api.field_behavior) = OPTIONAL];
  int column_properties_size() const;
  private:
  int _internal_column_properties_size() const;
  public:
  void clear_column_properties();
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* mutable_column_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties >*
      mutable_column_properties();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties& _internal_column_properties(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* _internal_add_column_properties();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties& column_properties(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* add_column_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties >&
      column_properties() const;

  // repeated .google.cloud.dialogflow.v2.Intent.Message.TableCardRow rows = 5 [(.google.api.field_behavior) = OPTIONAL];
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow >*
      mutable_rows();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow& _internal_rows(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* _internal_add_rows();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow& rows(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow >&
      rows() const;

  // repeated .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button buttons = 6 [(.google.api.field_behavior) = OPTIONAL];
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* mutable_buttons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >*
      mutable_buttons();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& _internal_buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* _internal_add_buttons();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& buttons(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* add_buttons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >&
      buttons() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.TableCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties > column_properties_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow > rows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button > buttons_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_ColumnProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties) */ {
 public:
  inline Intent_Message_ColumnProperties() : Intent_Message_ColumnProperties(nullptr) {}
  ~Intent_Message_ColumnProperties() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_ColumnProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_ColumnProperties(const Intent_Message_ColumnProperties& from);
  Intent_Message_ColumnProperties(Intent_Message_ColumnProperties&& from) noexcept
    : Intent_Message_ColumnProperties() {
    *this = ::std::move(from);
  }

  inline Intent_Message_ColumnProperties& operator=(const Intent_Message_ColumnProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_ColumnProperties& operator=(Intent_Message_ColumnProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_ColumnProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_ColumnProperties* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_ColumnProperties*>(
               &_Intent_Message_ColumnProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Intent_Message_ColumnProperties& a, Intent_Message_ColumnProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_ColumnProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_ColumnProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_ColumnProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_ColumnProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_ColumnProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_ColumnProperties& from) {
    Intent_Message_ColumnProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_ColumnProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.ColumnProperties";
  }
  protected:
  explicit Intent_Message_ColumnProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_ColumnProperties_HorizontalAlignment HorizontalAlignment;
  static constexpr HorizontalAlignment HORIZONTAL_ALIGNMENT_UNSPECIFIED =
    Intent_Message_ColumnProperties_HorizontalAlignment_HORIZONTAL_ALIGNMENT_UNSPECIFIED;
  static constexpr HorizontalAlignment LEADING =
    Intent_Message_ColumnProperties_HorizontalAlignment_LEADING;
  static constexpr HorizontalAlignment CENTER =
    Intent_Message_ColumnProperties_HorizontalAlignment_CENTER;
  static constexpr HorizontalAlignment TRAILING =
    Intent_Message_ColumnProperties_HorizontalAlignment_TRAILING;
  static inline bool HorizontalAlignment_IsValid(int value) {
    return Intent_Message_ColumnProperties_HorizontalAlignment_IsValid(value);
  }
  static constexpr HorizontalAlignment HorizontalAlignment_MIN =
    Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_MIN;
  static constexpr HorizontalAlignment HorizontalAlignment_MAX =
    Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_MAX;
  static constexpr int HorizontalAlignment_ARRAYSIZE =
    Intent_Message_ColumnProperties_HorizontalAlignment_HorizontalAlignment_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HorizontalAlignment_descriptor() {
    return Intent_Message_ColumnProperties_HorizontalAlignment_descriptor();
  }
  template<typename T>
  static inline const std::string& HorizontalAlignment_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HorizontalAlignment>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HorizontalAlignment_Name.");
    return Intent_Message_ColumnProperties_HorizontalAlignment_Name(enum_t_value);
  }
  static inline bool HorizontalAlignment_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HorizontalAlignment* value) {
    return Intent_Message_ColumnProperties_HorizontalAlignment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kHorizontalAlignmentFieldNumber = 2,
  };
  // string header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.HorizontalAlignment horizontal_alignment = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_horizontal_alignment();
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment value);
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
    int horizontal_alignment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_TableCardRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.TableCardRow) */ {
 public:
  inline Intent_Message_TableCardRow() : Intent_Message_TableCardRow(nullptr) {}
  ~Intent_Message_TableCardRow() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_TableCardRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_TableCardRow(const Intent_Message_TableCardRow& from);
  Intent_Message_TableCardRow(Intent_Message_TableCardRow&& from) noexcept
    : Intent_Message_TableCardRow() {
    *this = ::std::move(from);
  }

  inline Intent_Message_TableCardRow& operator=(const Intent_Message_TableCardRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_TableCardRow& operator=(Intent_Message_TableCardRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_TableCardRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_TableCardRow* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_TableCardRow*>(
               &_Intent_Message_TableCardRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Intent_Message_TableCardRow& a, Intent_Message_TableCardRow& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_TableCardRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_TableCardRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_TableCardRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_TableCardRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_TableCardRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_TableCardRow& from) {
    Intent_Message_TableCardRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_TableCardRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.TableCardRow";
  }
  protected:
  explicit Intent_Message_TableCardRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
    kDividerAfterFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message.TableCardCell cells = 1 [(.google.api.field_behavior) = OPTIONAL];
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell >*
      mutable_cells();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell& _internal_cells(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* _internal_add_cells();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell& cells(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell >&
      cells() const;

  // bool divider_after = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_divider_after();
  bool divider_after() const;
  void set_divider_after(bool value);
  private:
  bool _internal_divider_after() const;
  void _internal_set_divider_after(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.TableCardRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell > cells_;
    bool divider_after_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message_TableCardCell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message.TableCardCell) */ {
 public:
  inline Intent_Message_TableCardCell() : Intent_Message_TableCardCell(nullptr) {}
  ~Intent_Message_TableCardCell() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message_TableCardCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message_TableCardCell(const Intent_Message_TableCardCell& from);
  Intent_Message_TableCardCell(Intent_Message_TableCardCell&& from) noexcept
    : Intent_Message_TableCardCell() {
    *this = ::std::move(from);
  }

  inline Intent_Message_TableCardCell& operator=(const Intent_Message_TableCardCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message_TableCardCell& operator=(Intent_Message_TableCardCell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message_TableCardCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_Message_TableCardCell* internal_default_instance() {
    return reinterpret_cast<const Intent_Message_TableCardCell*>(
               &_Intent_Message_TableCardCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Intent_Message_TableCardCell& a, Intent_Message_TableCardCell& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message_TableCardCell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message_TableCardCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message_TableCardCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message_TableCardCell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message_TableCardCell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message_TableCardCell& from) {
    Intent_Message_TableCardCell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message_TableCardCell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message.TableCardCell";
  }
  protected:
  explicit Intent_Message_TableCardCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message.TableCardCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.Message) */ {
 public:
  inline Intent_Message() : Intent_Message(nullptr) {}
  ~Intent_Message() override;
  explicit PROTOBUF_CONSTEXPR Intent_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_Message(const Intent_Message& from);
  Intent_Message(Intent_Message&& from) noexcept
    : Intent_Message() {
    *this = ::std::move(from);
  }

  inline Intent_Message& operator=(const Intent_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_Message& operator=(Intent_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kText = 1,
    kImage = 2,
    kQuickReplies = 3,
    kCard = 4,
    kPayload = 5,
    kSimpleResponses = 7,
    kBasicCard = 8,
    kSuggestions = 9,
    kLinkOutSuggestion = 10,
    kListSelect = 11,
    kCarouselSelect = 12,
    kBrowseCarouselCard = 22,
    kTableCard = 23,
    kMediaContent = 24,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Intent_Message* internal_default_instance() {
    return reinterpret_cast<const Intent_Message*>(
               &_Intent_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Intent_Message& a, Intent_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_Message& from) {
    Intent_Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.Message";
  }
  protected:
  explicit Intent_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Message_Text Text;
  typedef Intent_Message_Image Image;
  typedef Intent_Message_QuickReplies QuickReplies;
  typedef Intent_Message_Card Card;
  typedef Intent_Message_SimpleResponse SimpleResponse;
  typedef Intent_Message_SimpleResponses SimpleResponses;
  typedef Intent_Message_BasicCard BasicCard;
  typedef Intent_Message_Suggestion Suggestion;
  typedef Intent_Message_Suggestions Suggestions;
  typedef Intent_Message_LinkOutSuggestion LinkOutSuggestion;
  typedef Intent_Message_ListSelect ListSelect;
  typedef Intent_Message_CarouselSelect CarouselSelect;
  typedef Intent_Message_SelectItemInfo SelectItemInfo;
  typedef Intent_Message_MediaContent MediaContent;
  typedef Intent_Message_BrowseCarouselCard BrowseCarouselCard;
  typedef Intent_Message_TableCard TableCard;
  typedef Intent_Message_ColumnProperties ColumnProperties;
  typedef Intent_Message_TableCardRow TableCardRow;
  typedef Intent_Message_TableCardCell TableCardCell;

  typedef Intent_Message_Platform Platform;
  static constexpr Platform PLATFORM_UNSPECIFIED =
    Intent_Message_Platform_PLATFORM_UNSPECIFIED;
  static constexpr Platform FACEBOOK =
    Intent_Message_Platform_FACEBOOK;
  static constexpr Platform SLACK =
    Intent_Message_Platform_SLACK;
  static constexpr Platform TELEGRAM =
    Intent_Message_Platform_TELEGRAM;
  static constexpr Platform KIK =
    Intent_Message_Platform_KIK;
  static constexpr Platform SKYPE =
    Intent_Message_Platform_SKYPE;
  static constexpr Platform LINE =
    Intent_Message_Platform_LINE;
  static constexpr Platform VIBER =
    Intent_Message_Platform_VIBER;
  static constexpr Platform ACTIONS_ON_GOOGLE =
    Intent_Message_Platform_ACTIONS_ON_GOOGLE;
  static constexpr Platform GOOGLE_HANGOUTS =
    Intent_Message_Platform_GOOGLE_HANGOUTS;
  static inline bool Platform_IsValid(int value) {
    return Intent_Message_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    Intent_Message_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    Intent_Message_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    Intent_Message_Platform_Platform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Platform_descriptor() {
    return Intent_Message_Platform_descriptor();
  }
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return Intent_Message_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return Intent_Message_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 6,
    kTextFieldNumber = 1,
    kImageFieldNumber = 2,
    kQuickRepliesFieldNumber = 3,
    kCardFieldNumber = 4,
    kPayloadFieldNumber = 5,
    kSimpleResponsesFieldNumber = 7,
    kBasicCardFieldNumber = 8,
    kSuggestionsFieldNumber = 9,
    kLinkOutSuggestionFieldNumber = 10,
    kListSelectFieldNumber = 11,
    kCarouselSelectFieldNumber = 12,
    kBrowseCarouselCardFieldNumber = 22,
    kTableCardFieldNumber = 23,
    kMediaContentFieldNumber = 24,
  };
  // .google.cloud.dialogflow.v2.Intent.Message.Platform platform = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_platform();
  ::google::cloud::dialogflow::v2::Intent_Message_Platform platform() const;
  void set_platform(::google::cloud::dialogflow::v2::Intent_Message_Platform value);
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_Platform _internal_platform() const;
  void _internal_set_platform(::google::cloud::dialogflow::v2::Intent_Message_Platform value);
  public:

  // .google.cloud.dialogflow.v2.Intent.Message.Text text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::google::cloud::dialogflow::v2::Intent_Message_Text& text() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Text* release_text();
  ::google::cloud::dialogflow::v2::Intent_Message_Text* mutable_text();
  void set_allocated_text(::google::cloud::dialogflow::v2::Intent_Message_Text* text);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Text& _internal_text() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::google::cloud::dialogflow::v2::Intent_Message_Text* text);
  ::google::cloud::dialogflow::v2::Intent_Message_Text* unsafe_arena_release_text();

  // .google.cloud.dialogflow.v2.Intent.Message.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& image() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Image* release_image();
  ::google::cloud::dialogflow::v2::Intent_Message_Image* mutable_image();
  void set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Image& _internal_image() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image);
  ::google::cloud::dialogflow::v2::Intent_Message_Image* unsafe_arena_release_image();

  // .google.cloud.dialogflow.v2.Intent.Message.QuickReplies quick_replies = 3;
  bool has_quick_replies() const;
  private:
  bool _internal_has_quick_replies() const;
  public:
  void clear_quick_replies();
  const ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies& quick_replies() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* release_quick_replies();
  ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* mutable_quick_replies();
  void set_allocated_quick_replies(::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* quick_replies);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies& _internal_quick_replies() const;
  ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* _internal_mutable_quick_replies();
  public:
  void unsafe_arena_set_allocated_quick_replies(
      ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* quick_replies);
  ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* unsafe_arena_release_quick_replies();

  // .google.cloud.dialogflow.v2.Intent.Message.Card card = 4;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::google::cloud::dialogflow::v2::Intent_Message_Card& card() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Card* release_card();
  ::google::cloud::dialogflow::v2::Intent_Message_Card* mutable_card();
  void set_allocated_card(::google::cloud::dialogflow::v2::Intent_Message_Card* card);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Card& _internal_card() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Card* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::google::cloud::dialogflow::v2::Intent_Message_Card* card);
  ::google::cloud::dialogflow::v2::Intent_Message_Card* unsafe_arena_release_card();

  // .google.protobuf.Struct payload = 5;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::PROTOBUF_NAMESPACE_ID::Struct& payload() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_payload();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_payload();
  void set_allocated_payload(::PROTOBUF_NAMESPACE_ID::Struct* payload);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_payload() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::PROTOBUF_NAMESPACE_ID::Struct* payload);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_payload();

  // .google.cloud.dialogflow.v2.Intent.Message.SimpleResponses simple_responses = 7;
  bool has_simple_responses() const;
  private:
  bool _internal_has_simple_responses() const;
  public:
  void clear_simple_responses();
  const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses& simple_responses() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* release_simple_responses();
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* mutable_simple_responses();
  void set_allocated_simple_responses(::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* simple_responses);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses& _internal_simple_responses() const;
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* _internal_mutable_simple_responses();
  public:
  void unsafe_arena_set_allocated_simple_responses(
      ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* simple_responses);
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* unsafe_arena_release_simple_responses();

  // .google.cloud.dialogflow.v2.Intent.Message.BasicCard basic_card = 8;
  bool has_basic_card() const;
  private:
  bool _internal_has_basic_card() const;
  public:
  void clear_basic_card();
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard& basic_card() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* release_basic_card();
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* mutable_basic_card();
  void set_allocated_basic_card(::google::cloud::dialogflow::v2::Intent_Message_BasicCard* basic_card);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard& _internal_basic_card() const;
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* _internal_mutable_basic_card();
  public:
  void unsafe_arena_set_allocated_basic_card(
      ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* basic_card);
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* unsafe_arena_release_basic_card();

  // .google.cloud.dialogflow.v2.Intent.Message.Suggestions suggestions = 9;
  bool has_suggestions() const;
  private:
  bool _internal_has_suggestions() const;
  public:
  void clear_suggestions();
  const ::google::cloud::dialogflow::v2::Intent_Message_Suggestions& suggestions() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* release_suggestions();
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* mutable_suggestions();
  void set_allocated_suggestions(::google::cloud::dialogflow::v2::Intent_Message_Suggestions* suggestions);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_Suggestions& _internal_suggestions() const;
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* _internal_mutable_suggestions();
  public:
  void unsafe_arena_set_allocated_suggestions(
      ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* suggestions);
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* unsafe_arena_release_suggestions();

  // .google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion link_out_suggestion = 10;
  bool has_link_out_suggestion() const;
  private:
  bool _internal_has_link_out_suggestion() const;
  public:
  void clear_link_out_suggestion();
  const ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion& link_out_suggestion() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* release_link_out_suggestion();
  ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* mutable_link_out_suggestion();
  void set_allocated_link_out_suggestion(::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* link_out_suggestion);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion& _internal_link_out_suggestion() const;
  ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* _internal_mutable_link_out_suggestion();
  public:
  void unsafe_arena_set_allocated_link_out_suggestion(
      ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* link_out_suggestion);
  ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* unsafe_arena_release_link_out_suggestion();

  // .google.cloud.dialogflow.v2.Intent.Message.ListSelect list_select = 11;
  bool has_list_select() const;
  private:
  bool _internal_has_list_select() const;
  public:
  void clear_list_select();
  const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect& list_select() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* release_list_select();
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* mutable_list_select();
  void set_allocated_list_select(::google::cloud::dialogflow::v2::Intent_Message_ListSelect* list_select);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect& _internal_list_select() const;
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* _internal_mutable_list_select();
  public:
  void unsafe_arena_set_allocated_list_select(
      ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* list_select);
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* unsafe_arena_release_list_select();

  // .google.cloud.dialogflow.v2.Intent.Message.CarouselSelect carousel_select = 12;
  bool has_carousel_select() const;
  private:
  bool _internal_has_carousel_select() const;
  public:
  void clear_carousel_select();
  const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect& carousel_select() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* release_carousel_select();
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* mutable_carousel_select();
  void set_allocated_carousel_select(::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* carousel_select);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect& _internal_carousel_select() const;
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* _internal_mutable_carousel_select();
  public:
  void unsafe_arena_set_allocated_carousel_select(
      ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* carousel_select);
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* unsafe_arena_release_carousel_select();

  // .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard browse_carousel_card = 22;
  bool has_browse_carousel_card() const;
  private:
  bool _internal_has_browse_carousel_card() const;
  public:
  void clear_browse_carousel_card();
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard& browse_carousel_card() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* release_browse_carousel_card();
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* mutable_browse_carousel_card();
  void set_allocated_browse_carousel_card(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* browse_carousel_card);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard& _internal_browse_carousel_card() const;
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* _internal_mutable_browse_carousel_card();
  public:
  void unsafe_arena_set_allocated_browse_carousel_card(
      ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* browse_carousel_card);
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* unsafe_arena_release_browse_carousel_card();

  // .google.cloud.dialogflow.v2.Intent.Message.TableCard table_card = 23;
  bool has_table_card() const;
  private:
  bool _internal_has_table_card() const;
  public:
  void clear_table_card();
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCard& table_card() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_TableCard* release_table_card();
  ::google::cloud::dialogflow::v2::Intent_Message_TableCard* mutable_table_card();
  void set_allocated_table_card(::google::cloud::dialogflow::v2::Intent_Message_TableCard* table_card);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_TableCard& _internal_table_card() const;
  ::google::cloud::dialogflow::v2::Intent_Message_TableCard* _internal_mutable_table_card();
  public:
  void unsafe_arena_set_allocated_table_card(
      ::google::cloud::dialogflow::v2::Intent_Message_TableCard* table_card);
  ::google::cloud::dialogflow::v2::Intent_Message_TableCard* unsafe_arena_release_table_card();

  // .google.cloud.dialogflow.v2.Intent.Message.MediaContent media_content = 24;
  bool has_media_content() const;
  private:
  bool _internal_has_media_content() const;
  public:
  void clear_media_content();
  const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent& media_content() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* release_media_content();
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* mutable_media_content();
  void set_allocated_media_content(::google::cloud::dialogflow::v2::Intent_Message_MediaContent* media_content);
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent& _internal_media_content() const;
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* _internal_mutable_media_content();
  public:
  void unsafe_arena_set_allocated_media_content(
      ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* media_content);
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* unsafe_arena_release_media_content();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.Message)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image();
  void set_has_quick_replies();
  void set_has_card();
  void set_has_payload();
  void set_has_simple_responses();
  void set_has_basic_card();
  void set_has_suggestions();
  void set_has_link_out_suggestion();
  void set_has_list_select();
  void set_has_carousel_select();
  void set_has_browse_carousel_card();
  void set_has_table_card();
  void set_has_media_content();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int platform_;
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::Intent_Message_Text* text_;
      ::google::cloud::dialogflow::v2::Intent_Message_Image* image_;
      ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* quick_replies_;
      ::google::cloud::dialogflow::v2::Intent_Message_Card* card_;
      ::PROTOBUF_NAMESPACE_ID::Struct* payload_;
      ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* simple_responses_;
      ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* basic_card_;
      ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* suggestions_;
      ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* link_out_suggestion_;
      ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* list_select_;
      ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* carousel_select_;
      ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* browse_carousel_card_;
      ::google::cloud::dialogflow::v2::Intent_Message_TableCard* table_card_;
      ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* media_content_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent_FollowupIntentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo) */ {
 public:
  inline Intent_FollowupIntentInfo() : Intent_FollowupIntentInfo(nullptr) {}
  ~Intent_FollowupIntentInfo() override;
  explicit PROTOBUF_CONSTEXPR Intent_FollowupIntentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent_FollowupIntentInfo(const Intent_FollowupIntentInfo& from);
  Intent_FollowupIntentInfo(Intent_FollowupIntentInfo&& from) noexcept
    : Intent_FollowupIntentInfo() {
    *this = ::std::move(from);
  }

  inline Intent_FollowupIntentInfo& operator=(const Intent_FollowupIntentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent_FollowupIntentInfo& operator=(Intent_FollowupIntentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent_FollowupIntentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent_FollowupIntentInfo* internal_default_instance() {
    return reinterpret_cast<const Intent_FollowupIntentInfo*>(
               &_Intent_FollowupIntentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Intent_FollowupIntentInfo& a, Intent_FollowupIntentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent_FollowupIntentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent_FollowupIntentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent_FollowupIntentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent_FollowupIntentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent_FollowupIntentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent_FollowupIntentInfo& from) {
    Intent_FollowupIntentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent_FollowupIntentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent.FollowupIntentInfo";
  }
  protected:
  explicit Intent_FollowupIntentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowupIntentNameFieldNumber = 1,
    kParentFollowupIntentNameFieldNumber = 2,
  };
  // string followup_intent_name = 1;
  void clear_followup_intent_name();
  const std::string& followup_intent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_followup_intent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_followup_intent_name();
  PROTOBUF_NODISCARD std::string* release_followup_intent_name();
  void set_allocated_followup_intent_name(std::string* followup_intent_name);
  private:
  const std::string& _internal_followup_intent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_followup_intent_name(const std::string& value);
  std::string* _internal_mutable_followup_intent_name();
  public:

  // string parent_followup_intent_name = 2;
  void clear_parent_followup_intent_name();
  const std::string& parent_followup_intent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_followup_intent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_followup_intent_name();
  PROTOBUF_NODISCARD std::string* release_parent_followup_intent_name();
  void set_allocated_parent_followup_intent_name(std::string* parent_followup_intent_name);
  private:
  const std::string& _internal_parent_followup_intent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_followup_intent_name(const std::string& value);
  std::string* _internal_mutable_parent_followup_intent_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr followup_intent_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_followup_intent_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class Intent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Intent) */ {
 public:
  inline Intent() : Intent(nullptr) {}
  ~Intent() override;
  explicit PROTOBUF_CONSTEXPR Intent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent(const Intent& from);
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent& operator=(Intent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Intent& from) {
    Intent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Intent";
  }
  protected:
  explicit Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_TrainingPhrase TrainingPhrase;
  typedef Intent_Parameter Parameter;
  typedef Intent_Message Message;
  typedef Intent_FollowupIntentInfo FollowupIntentInfo;

  typedef Intent_WebhookState WebhookState;
  static constexpr WebhookState WEBHOOK_STATE_UNSPECIFIED =
    Intent_WebhookState_WEBHOOK_STATE_UNSPECIFIED;
  static constexpr WebhookState WEBHOOK_STATE_ENABLED =
    Intent_WebhookState_WEBHOOK_STATE_ENABLED;
  static constexpr WebhookState WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING =
    Intent_WebhookState_WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING;
  static inline bool WebhookState_IsValid(int value) {
    return Intent_WebhookState_IsValid(value);
  }
  static constexpr WebhookState WebhookState_MIN =
    Intent_WebhookState_WebhookState_MIN;
  static constexpr WebhookState WebhookState_MAX =
    Intent_WebhookState_WebhookState_MAX;
  static constexpr int WebhookState_ARRAYSIZE =
    Intent_WebhookState_WebhookState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WebhookState_descriptor() {
    return Intent_WebhookState_descriptor();
  }
  template<typename T>
  static inline const std::string& WebhookState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WebhookState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WebhookState_Name.");
    return Intent_WebhookState_Name(enum_t_value);
  }
  static inline bool WebhookState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WebhookState* value) {
    return Intent_WebhookState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputContextNamesFieldNumber = 7,
    kEventsFieldNumber = 8,
    kTrainingPhrasesFieldNumber = 9,
    kOutputContextsFieldNumber = 11,
    kParametersFieldNumber = 13,
    kMessagesFieldNumber = 14,
    kDefaultResponsePlatformsFieldNumber = 15,
    kFollowupIntentInfoFieldNumber = 18,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kActionFieldNumber = 10,
    kRootFollowupIntentNameFieldNumber = 16,
    kParentFollowupIntentNameFieldNumber = 17,
    kPriorityFieldNumber = 3,
    kWebhookStateFieldNumber = 6,
    kResetContextsFieldNumber = 12,
    kIsFallbackFieldNumber = 4,
    kMlDisabledFieldNumber = 19,
    kLiveAgentHandoffFieldNumber = 20,
    kEndInteractionFieldNumber = 21,
  };
  // repeated string input_context_names = 7 [(.google.api.field_behavior) = OPTIONAL];
  int input_context_names_size() const;
  private:
  int _internal_input_context_names_size() const;
  public:
  void clear_input_context_names();
  const std::string& input_context_names(int index) const;
  std::string* mutable_input_context_names(int index);
  void set_input_context_names(int index, const std::string& value);
  void set_input_context_names(int index, std::string&& value);
  void set_input_context_names(int index, const char* value);
  void set_input_context_names(int index, const char* value, size_t size);
  std::string* add_input_context_names();
  void add_input_context_names(const std::string& value);
  void add_input_context_names(std::string&& value);
  void add_input_context_names(const char* value);
  void add_input_context_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_context_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_context_names();
  private:
  const std::string& _internal_input_context_names(int index) const;
  std::string* _internal_add_input_context_names();
  public:

  // repeated string events = 8 [(.google.api.field_behavior) = OPTIONAL];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const char* value, size_t size);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();
  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  public:

  // repeated .google.cloud.dialogflow.v2.Intent.TrainingPhrase training_phrases = 9 [(.google.api.field_behavior) = OPTIONAL];
  int training_phrases_size() const;
  private:
  int _internal_training_phrases_size() const;
  public:
  void clear_training_phrases();
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* mutable_training_phrases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase >*
      mutable_training_phrases();
  private:
  const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase& _internal_training_phrases(int index) const;
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* _internal_add_training_phrases();
  public:
  const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase& training_phrases(int index) const;
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* add_training_phrases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase >&
      training_phrases() const;

  // repeated .google.cloud.dialogflow.v2.Context output_contexts = 11 [(.google.api.field_behavior) = OPTIONAL];
  int output_contexts_size() const;
  private:
  int _internal_output_contexts_size() const;
  public:
  void clear_output_contexts();
  ::google::cloud::dialogflow::v2::Context* mutable_output_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
      mutable_output_contexts();
  private:
  const ::google::cloud::dialogflow::v2::Context& _internal_output_contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* _internal_add_output_contexts();
  public:
  const ::google::cloud::dialogflow::v2::Context& output_contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* add_output_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
      output_contexts() const;

  // repeated .google.cloud.dialogflow.v2.Intent.Parameter parameters = 13 [(.google.api.field_behavior) = OPTIONAL];
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::google::cloud::dialogflow::v2::Intent_Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Parameter >*
      mutable_parameters();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Parameter& _internal_parameters(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Parameter* _internal_add_parameters();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Parameter& parameters(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Parameter >&
      parameters() const;

  // repeated .google.cloud.dialogflow.v2.Intent.Message messages = 14 [(.google.api.field_behavior) = OPTIONAL];
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::google::cloud::dialogflow::v2::Intent_Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >*
      mutable_messages();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message& _internal_messages(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message* _internal_add_messages();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message& messages(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >&
      messages() const;

  // repeated .google.cloud.dialogflow.v2.Intent.Message.Platform default_response_platforms = 15 [(.google.api.field_behavior) = OPTIONAL];
  int default_response_platforms_size() const;
  private:
  int _internal_default_response_platforms_size() const;
  public:
  void clear_default_response_platforms();
  private:
  ::google::cloud::dialogflow::v2::Intent_Message_Platform _internal_default_response_platforms(int index) const;
  void _internal_add_default_response_platforms(::google::cloud::dialogflow::v2::Intent_Message_Platform value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_default_response_platforms();
  public:
  ::google::cloud::dialogflow::v2::Intent_Message_Platform default_response_platforms(int index) const;
  void set_default_response_platforms(int index, ::google::cloud::dialogflow::v2::Intent_Message_Platform value);
  void add_default_response_platforms(::google::cloud::dialogflow::v2::Intent_Message_Platform value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& default_response_platforms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_default_response_platforms();

  // repeated .google.cloud.dialogflow.v2.Intent.FollowupIntentInfo followup_intent_info = 18 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int followup_intent_info_size() const;
  private:
  int _internal_followup_intent_info_size() const;
  public:
  void clear_followup_intent_info();
  ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* mutable_followup_intent_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo >*
      mutable_followup_intent_info();
  private:
  const ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo& _internal_followup_intent_info(int index) const;
  ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* _internal_add_followup_intent_info();
  public:
  const ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo& followup_intent_info(int index) const;
  ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* add_followup_intent_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo >&
      followup_intent_info() const;

  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string action = 10 [(.google.api.field_behavior) = OPTIONAL];
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string root_followup_intent_name = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_root_followup_intent_name();
  const std::string& root_followup_intent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_followup_intent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_followup_intent_name();
  PROTOBUF_NODISCARD std::string* release_root_followup_intent_name();
  void set_allocated_root_followup_intent_name(std::string* root_followup_intent_name);
  private:
  const std::string& _internal_root_followup_intent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_followup_intent_name(const std::string& value);
  std::string* _internal_mutable_root_followup_intent_name();
  public:

  // string parent_followup_intent_name = 17;
  void clear_parent_followup_intent_name();
  const std::string& parent_followup_intent_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_followup_intent_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_followup_intent_name();
  PROTOBUF_NODISCARD std::string* release_parent_followup_intent_name();
  void set_allocated_parent_followup_intent_name(std::string* parent_followup_intent_name);
  private:
  const std::string& _internal_parent_followup_intent_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_followup_intent_name(const std::string& value);
  std::string* _internal_mutable_parent_followup_intent_name();
  public:

  // int32 priority = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .google.cloud.dialogflow.v2.Intent.WebhookState webhook_state = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_webhook_state();
  ::google::cloud::dialogflow::v2::Intent_WebhookState webhook_state() const;
  void set_webhook_state(::google::cloud::dialogflow::v2::Intent_WebhookState value);
  private:
  ::google::cloud::dialogflow::v2::Intent_WebhookState _internal_webhook_state() const;
  void _internal_set_webhook_state(::google::cloud::dialogflow::v2::Intent_WebhookState value);
  public:

  // bool reset_contexts = 12 [(.google.api.field_behavior) = OPTIONAL];
  void clear_reset_contexts();
  bool reset_contexts() const;
  void set_reset_contexts(bool value);
  private:
  bool _internal_reset_contexts() const;
  void _internal_set_reset_contexts(bool value);
  public:

  // bool is_fallback = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_is_fallback();
  bool is_fallback() const;
  void set_is_fallback(bool value);
  private:
  bool _internal_is_fallback() const;
  void _internal_set_is_fallback(bool value);
  public:

  // bool ml_disabled = 19 [(.google.api.field_behavior) = OPTIONAL];
  void clear_ml_disabled();
  bool ml_disabled() const;
  void set_ml_disabled(bool value);
  private:
  bool _internal_ml_disabled() const;
  void _internal_set_ml_disabled(bool value);
  public:

  // bool live_agent_handoff = 20 [(.google.api.field_behavior) = OPTIONAL];
  void clear_live_agent_handoff();
  bool live_agent_handoff() const;
  void set_live_agent_handoff(bool value);
  private:
  bool _internal_live_agent_handoff() const;
  void _internal_set_live_agent_handoff(bool value);
  public:

  // bool end_interaction = 21 [(.google.api.field_behavior) = OPTIONAL];
  void clear_end_interaction();
  bool end_interaction() const;
  void set_end_interaction(bool value);
  private:
  bool _internal_end_interaction() const;
  void _internal_set_end_interaction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Intent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_context_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase > training_phrases_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context > output_contexts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Parameter > parameters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message > messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> default_response_platforms_;
    mutable std::atomic<int> _default_response_platforms_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo > followup_intent_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_followup_intent_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_followup_intent_name_;
    int32_t priority_;
    int webhook_state_;
    bool reset_contexts_;
    bool is_fallback_;
    bool ml_disabled_;
    bool live_agent_handoff_;
    bool end_interaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class ListIntentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListIntentsRequest) */ {
 public:
  inline ListIntentsRequest() : ListIntentsRequest(nullptr) {}
  ~ListIntentsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListIntentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListIntentsRequest(const ListIntentsRequest& from);
  ListIntentsRequest(ListIntentsRequest&& from) noexcept
    : ListIntentsRequest() {
    *this = ::std::move(from);
  }

  inline ListIntentsRequest& operator=(const ListIntentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIntentsRequest& operator=(ListIntentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListIntentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListIntentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListIntentsRequest*>(
               &_ListIntentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ListIntentsRequest& a, ListIntentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIntentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIntentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListIntentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListIntentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListIntentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListIntentsRequest& from) {
    ListIntentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIntentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListIntentsRequest";
  }
  protected:
  explicit ListIntentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kPageTokenFieldNumber = 5,
    kIntentViewFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string page_token = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .google.cloud.dialogflow.v2.IntentView intent_view = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_intent_view();
  ::google::cloud::dialogflow::v2::IntentView intent_view() const;
  void set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  private:
  ::google::cloud::dialogflow::v2::IntentView _internal_intent_view() const;
  void _internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  public:

  // int32 page_size = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListIntentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int intent_view_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class ListIntentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListIntentsResponse) */ {
 public:
  inline ListIntentsResponse() : ListIntentsResponse(nullptr) {}
  ~ListIntentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListIntentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListIntentsResponse(const ListIntentsResponse& from);
  ListIntentsResponse(ListIntentsResponse&& from) noexcept
    : ListIntentsResponse() {
    *this = ::std::move(from);
  }

  inline ListIntentsResponse& operator=(const ListIntentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIntentsResponse& operator=(ListIntentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListIntentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListIntentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListIntentsResponse*>(
               &_ListIntentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ListIntentsResponse& a, ListIntentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIntentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIntentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListIntentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListIntentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListIntentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListIntentsResponse& from) {
    ListIntentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIntentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListIntentsResponse";
  }
  protected:
  explicit ListIntentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Intent intents = 1;
  int intents_size() const;
  private:
  int _internal_intents_size() const;
  public:
  void clear_intents();
  ::google::cloud::dialogflow::v2::Intent* mutable_intents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
      mutable_intents();
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* _internal_add_intents();
  public:
  const ::google::cloud::dialogflow::v2::Intent& intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* add_intents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
      intents() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListIntentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent > intents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class GetIntentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetIntentRequest) */ {
 public:
  inline GetIntentRequest() : GetIntentRequest(nullptr) {}
  ~GetIntentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIntentRequest(const GetIntentRequest& from);
  GetIntentRequest(GetIntentRequest&& from) noexcept
    : GetIntentRequest() {
    *this = ::std::move(from);
  }

  inline GetIntentRequest& operator=(const GetIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIntentRequest& operator=(GetIntentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIntentRequest* internal_default_instance() {
    return reinterpret_cast<const GetIntentRequest*>(
               &_GetIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetIntentRequest& a, GetIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIntentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIntentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIntentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIntentRequest& from) {
    GetIntentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIntentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetIntentRequest";
  }
  protected:
  explicit GetIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kIntentViewFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.cloud.dialogflow.v2.IntentView intent_view = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_intent_view();
  ::google::cloud::dialogflow::v2::IntentView intent_view() const;
  void set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  private:
  ::google::cloud::dialogflow::v2::IntentView _internal_intent_view() const;
  void _internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    int intent_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class CreateIntentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateIntentRequest) */ {
 public:
  inline CreateIntentRequest() : CreateIntentRequest(nullptr) {}
  ~CreateIntentRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIntentRequest(const CreateIntentRequest& from);
  CreateIntentRequest(CreateIntentRequest&& from) noexcept
    : CreateIntentRequest() {
    *this = ::std::move(from);
  }

  inline CreateIntentRequest& operator=(const CreateIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIntentRequest& operator=(CreateIntentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIntentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIntentRequest*>(
               &_CreateIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CreateIntentRequest& a, CreateIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIntentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateIntentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIntentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateIntentRequest& from) {
    CreateIntentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIntentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateIntentRequest";
  }
  protected:
  explicit CreateIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
    kIntentFieldNumber = 2,
    kIntentViewFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.cloud.dialogflow.v2.Intent intent = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::google::cloud::dialogflow::v2::Intent& intent() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent* release_intent();
  ::google::cloud::dialogflow::v2::Intent* mutable_intent();
  void set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent);
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intent() const;
  ::google::cloud::dialogflow::v2::Intent* _internal_mutable_intent();
  public:
  void unsafe_arena_set_allocated_intent(
      ::google::cloud::dialogflow::v2::Intent* intent);
  ::google::cloud::dialogflow::v2::Intent* unsafe_arena_release_intent();

  // .google.cloud.dialogflow.v2.IntentView intent_view = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_intent_view();
  ::google::cloud::dialogflow::v2::IntentView intent_view() const;
  void set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  private:
  ::google::cloud::dialogflow::v2::IntentView _internal_intent_view() const;
  void _internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::google::cloud::dialogflow::v2::Intent* intent_;
    int intent_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class UpdateIntentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateIntentRequest) */ {
 public:
  inline UpdateIntentRequest() : UpdateIntentRequest(nullptr) {}
  ~UpdateIntentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateIntentRequest(const UpdateIntentRequest& from);
  UpdateIntentRequest(UpdateIntentRequest&& from) noexcept
    : UpdateIntentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIntentRequest& operator=(const UpdateIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIntentRequest& operator=(UpdateIntentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateIntentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIntentRequest*>(
               &_UpdateIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UpdateIntentRequest& a, UpdateIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIntentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateIntentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateIntentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateIntentRequest& from) {
    UpdateIntentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIntentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateIntentRequest";
  }
  protected:
  explicit UpdateIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 2,
    kIntentFieldNumber = 1,
    kUpdateMaskFieldNumber = 3,
    kIntentViewFieldNumber = 4,
  };
  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.cloud.dialogflow.v2.Intent intent = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::google::cloud::dialogflow::v2::Intent& intent() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Intent* release_intent();
  ::google::cloud::dialogflow::v2::Intent* mutable_intent();
  void set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent);
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intent() const;
  ::google::cloud::dialogflow::v2::Intent* _internal_mutable_intent();
  public:
  void unsafe_arena_set_allocated_intent(
      ::google::cloud::dialogflow::v2::Intent* intent);
  ::google::cloud::dialogflow::v2::Intent* unsafe_arena_release_intent();

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.cloud.dialogflow.v2.IntentView intent_view = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_intent_view();
  ::google::cloud::dialogflow::v2::IntentView intent_view() const;
  void set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  private:
  ::google::cloud::dialogflow::v2::IntentView _internal_intent_view() const;
  void _internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::google::cloud::dialogflow::v2::Intent* intent_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    int intent_view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class DeleteIntentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteIntentRequest) */ {
 public:
  inline DeleteIntentRequest() : DeleteIntentRequest(nullptr) {}
  ~DeleteIntentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteIntentRequest(const DeleteIntentRequest& from);
  DeleteIntentRequest(DeleteIntentRequest&& from) noexcept
    : DeleteIntentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIntentRequest& operator=(const DeleteIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIntentRequest& operator=(DeleteIntentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteIntentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIntentRequest*>(
               &_DeleteIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteIntentRequest& a, DeleteIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIntentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteIntentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteIntentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteIntentRequest& from) {
    DeleteIntentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIntentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteIntentRequest";
  }
  protected:
  explicit DeleteIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateIntentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest) */ {
 public:
  inline BatchUpdateIntentsRequest() : BatchUpdateIntentsRequest(nullptr) {}
  ~BatchUpdateIntentsRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateIntentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateIntentsRequest(const BatchUpdateIntentsRequest& from);
  BatchUpdateIntentsRequest(BatchUpdateIntentsRequest&& from) noexcept
    : BatchUpdateIntentsRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateIntentsRequest& operator=(const BatchUpdateIntentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateIntentsRequest& operator=(BatchUpdateIntentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateIntentsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IntentBatchCase {
    kIntentBatchUri = 2,
    kIntentBatchInline = 3,
    INTENT_BATCH_NOT_SET = 0,
  };

  static inline const BatchUpdateIntentsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateIntentsRequest*>(
               &_BatchUpdateIntentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(BatchUpdateIntentsRequest& a, BatchUpdateIntentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateIntentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateIntentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateIntentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateIntentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateIntentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateIntentsRequest& from) {
    BatchUpdateIntentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateIntentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchUpdateIntentsRequest";
  }
  protected:
  explicit BatchUpdateIntentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 4,
    kUpdateMaskFieldNumber = 5,
    kIntentViewFieldNumber = 6,
    kIntentBatchUriFieldNumber = 2,
    kIntentBatchInlineFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // .google.cloud.dialogflow.v2.IntentView intent_view = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_intent_view();
  ::google::cloud::dialogflow::v2::IntentView intent_view() const;
  void set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  private:
  ::google::cloud::dialogflow::v2::IntentView _internal_intent_view() const;
  void _internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value);
  public:

  // string intent_batch_uri = 2;
  bool has_intent_batch_uri() const;
  private:
  bool _internal_has_intent_batch_uri() const;
  public:
  void clear_intent_batch_uri();
  const std::string& intent_batch_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intent_batch_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intent_batch_uri();
  PROTOBUF_NODISCARD std::string* release_intent_batch_uri();
  void set_allocated_intent_batch_uri(std::string* intent_batch_uri);
  private:
  const std::string& _internal_intent_batch_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intent_batch_uri(const std::string& value);
  std::string* _internal_mutable_intent_batch_uri();
  public:

  // .google.cloud.dialogflow.v2.IntentBatch intent_batch_inline = 3;
  bool has_intent_batch_inline() const;
  private:
  bool _internal_has_intent_batch_inline() const;
  public:
  void clear_intent_batch_inline();
  const ::google::cloud::dialogflow::v2::IntentBatch& intent_batch_inline() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::IntentBatch* release_intent_batch_inline();
  ::google::cloud::dialogflow::v2::IntentBatch* mutable_intent_batch_inline();
  void set_allocated_intent_batch_inline(::google::cloud::dialogflow::v2::IntentBatch* intent_batch_inline);
  private:
  const ::google::cloud::dialogflow::v2::IntentBatch& _internal_intent_batch_inline() const;
  ::google::cloud::dialogflow::v2::IntentBatch* _internal_mutable_intent_batch_inline();
  public:
  void unsafe_arena_set_allocated_intent_batch_inline(
      ::google::cloud::dialogflow::v2::IntentBatch* intent_batch_inline);
  ::google::cloud::dialogflow::v2::IntentBatch* unsafe_arena_release_intent_batch_inline();

  void clear_intent_batch();
  IntentBatchCase intent_batch_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest)
 private:
  class _Internal;
  void set_has_intent_batch_uri();
  void set_has_intent_batch_inline();

  inline bool has_intent_batch() const;
  inline void clear_has_intent_batch();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    int intent_view_;
    union IntentBatchUnion {
      constexpr IntentBatchUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_batch_uri_;
      ::google::cloud::dialogflow::v2::IntentBatch* intent_batch_inline_;
    } intent_batch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateIntentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse) */ {
 public:
  inline BatchUpdateIntentsResponse() : BatchUpdateIntentsResponse(nullptr) {}
  ~BatchUpdateIntentsResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateIntentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateIntentsResponse(const BatchUpdateIntentsResponse& from);
  BatchUpdateIntentsResponse(BatchUpdateIntentsResponse&& from) noexcept
    : BatchUpdateIntentsResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateIntentsResponse& operator=(const BatchUpdateIntentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateIntentsResponse& operator=(BatchUpdateIntentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateIntentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateIntentsResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateIntentsResponse*>(
               &_BatchUpdateIntentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(BatchUpdateIntentsResponse& a, BatchUpdateIntentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateIntentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateIntentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateIntentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateIntentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateIntentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateIntentsResponse& from) {
    BatchUpdateIntentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateIntentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchUpdateIntentsResponse";
  }
  protected:
  explicit BatchUpdateIntentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent intents = 1;
  int intents_size() const;
  private:
  int _internal_intents_size() const;
  public:
  void clear_intents();
  ::google::cloud::dialogflow::v2::Intent* mutable_intents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
      mutable_intents();
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* _internal_add_intents();
  public:
  const ::google::cloud::dialogflow::v2::Intent& intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* add_intents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
      intents() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent > intents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class BatchDeleteIntentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest) */ {
 public:
  inline BatchDeleteIntentsRequest() : BatchDeleteIntentsRequest(nullptr) {}
  ~BatchDeleteIntentsRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchDeleteIntentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeleteIntentsRequest(const BatchDeleteIntentsRequest& from);
  BatchDeleteIntentsRequest(BatchDeleteIntentsRequest&& from) noexcept
    : BatchDeleteIntentsRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeleteIntentsRequest& operator=(const BatchDeleteIntentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeleteIntentsRequest& operator=(BatchDeleteIntentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeleteIntentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeleteIntentsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeleteIntentsRequest*>(
               &_BatchDeleteIntentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(BatchDeleteIntentsRequest& a, BatchDeleteIntentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeleteIntentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeleteIntentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeleteIntentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeleteIntentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchDeleteIntentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchDeleteIntentsRequest& from) {
    BatchDeleteIntentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchDeleteIntentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchDeleteIntentsRequest";
  }
  protected:
  explicit BatchDeleteIntentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent intents = 2 [(.google.api.field_behavior) = REQUIRED];
  int intents_size() const;
  private:
  int _internal_intents_size() const;
  public:
  void clear_intents();
  ::google::cloud::dialogflow::v2::Intent* mutable_intents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
      mutable_intents();
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* _internal_add_intents();
  public:
  const ::google::cloud::dialogflow::v2::Intent& intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* add_intents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
      intents() const;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent > intents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// -------------------------------------------------------------------

class IntentBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.IntentBatch) */ {
 public:
  inline IntentBatch() : IntentBatch(nullptr) {}
  ~IntentBatch() override;
  explicit PROTOBUF_CONSTEXPR IntentBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntentBatch(const IntentBatch& from);
  IntentBatch(IntentBatch&& from) noexcept
    : IntentBatch() {
    *this = ::std::move(from);
  }

  inline IntentBatch& operator=(const IntentBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentBatch& operator=(IntentBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntentBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntentBatch* internal_default_instance() {
    return reinterpret_cast<const IntentBatch*>(
               &_IntentBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(IntentBatch& a, IntentBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntentBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntentBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntentBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntentBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntentBatch& from) {
    IntentBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntentBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.IntentBatch";
  }
  protected:
  explicit IntentBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Intent intents = 1;
  int intents_size() const;
  private:
  int _internal_intents_size() const;
  public:
  void clear_intents();
  ::google::cloud::dialogflow::v2::Intent* mutable_intents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
      mutable_intents();
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* _internal_add_intents();
  public:
  const ::google::cloud::dialogflow::v2::Intent& intents(int index) const;
  ::google::cloud::dialogflow::v2::Intent* add_intents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
      intents() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.IntentBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent > intents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Intent_TrainingPhrase_Part

// string text = 1;
inline void Intent_TrainingPhrase_Part::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Intent_TrainingPhrase_Part::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_TrainingPhrase_Part::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text)
}
inline std::string* Intent_TrainingPhrase_Part::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text)
  return _s;
}
inline const std::string& Intent_TrainingPhrase_Part::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Intent_TrainingPhrase_Part::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text)
  return _impl_.text_.Release();
}
inline void Intent_TrainingPhrase_Part::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text)
}

// string entity_type = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_TrainingPhrase_Part::clear_entity_type() {
  _impl_.entity_type_.ClearToEmpty();
}
inline const std::string& Intent_TrainingPhrase_Part::entity_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.entity_type)
  return _internal_entity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_TrainingPhrase_Part::set_entity_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.entity_type)
}
inline std::string* Intent_TrainingPhrase_Part::mutable_entity_type() {
  std::string* _s = _internal_mutable_entity_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.entity_type)
  return _s;
}
inline const std::string& Intent_TrainingPhrase_Part::_internal_entity_type() const {
  return _impl_.entity_type_.Get();
}
inline void Intent_TrainingPhrase_Part::_internal_set_entity_type(const std::string& value) {
  
  _impl_.entity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::_internal_mutable_entity_type() {
  
  return _impl_.entity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::release_entity_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.entity_type)
  return _impl_.entity_type_.Release();
}
inline void Intent_TrainingPhrase_Part::set_allocated_entity_type(std::string* entity_type) {
  if (entity_type != nullptr) {
    
  } else {
    
  }
  _impl_.entity_type_.SetAllocated(entity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_type_.IsDefault()) {
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.entity_type)
}

// string alias = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_TrainingPhrase_Part::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& Intent_TrainingPhrase_Part::alias() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_TrainingPhrase_Part::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.alias)
}
inline std::string* Intent_TrainingPhrase_Part::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.alias)
  return _s;
}
inline const std::string& Intent_TrainingPhrase_Part::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void Intent_TrainingPhrase_Part::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase_Part::release_alias() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.alias)
  return _impl_.alias_.Release();
}
inline void Intent_TrainingPhrase_Part::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.alias)
}

// bool user_defined = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_TrainingPhrase_Part::clear_user_defined() {
  _impl_.user_defined_ = false;
}
inline bool Intent_TrainingPhrase_Part::_internal_user_defined() const {
  return _impl_.user_defined_;
}
inline bool Intent_TrainingPhrase_Part::user_defined() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.user_defined)
  return _internal_user_defined();
}
inline void Intent_TrainingPhrase_Part::_internal_set_user_defined(bool value) {
  
  _impl_.user_defined_ = value;
}
inline void Intent_TrainingPhrase_Part::set_user_defined(bool value) {
  _internal_set_user_defined(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.user_defined)
}

// -------------------------------------------------------------------

// Intent_TrainingPhrase

// string name = 1;
inline void Intent_TrainingPhrase::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Intent_TrainingPhrase::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_TrainingPhrase::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.name)
}
inline std::string* Intent_TrainingPhrase::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.TrainingPhrase.name)
  return _s;
}
inline const std::string& Intent_TrainingPhrase::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Intent_TrainingPhrase::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_TrainingPhrase::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.TrainingPhrase.name)
  return _impl_.name_.Release();
}
inline void Intent_TrainingPhrase::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.TrainingPhrase.name)
}

// .google.cloud.dialogflow.v2.Intent.TrainingPhrase.Type type = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_TrainingPhrase::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type Intent_TrainingPhrase::_internal_type() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type >(_impl_.type_);
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type Intent_TrainingPhrase::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.type)
  return _internal_type();
}
inline void Intent_TrainingPhrase::_internal_set_type(::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type value) {
  
  _impl_.type_ = value;
}
inline void Intent_TrainingPhrase::set_type(::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.type)
}

// repeated .google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part parts = 3 [(.google.api.field_behavior) = REQUIRED];
inline int Intent_TrainingPhrase::_internal_parts_size() const {
  return _impl_.parts_.size();
}
inline int Intent_TrainingPhrase::parts_size() const {
  return _internal_parts_size();
}
inline void Intent_TrainingPhrase::clear_parts() {
  _impl_.parts_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* Intent_TrainingPhrase::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.TrainingPhrase.parts)
  return _impl_.parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part >*
Intent_TrainingPhrase::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.TrainingPhrase.parts)
  return &_impl_.parts_;
}
inline const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part& Intent_TrainingPhrase::_internal_parts(int index) const {
  return _impl_.parts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part& Intent_TrainingPhrase::parts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.parts)
  return _internal_parts(index);
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* Intent_TrainingPhrase::_internal_add_parts() {
  return _impl_.parts_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* Intent_TrainingPhrase::add_parts() {
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part* _add = _internal_add_parts();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.TrainingPhrase.parts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Part >&
Intent_TrainingPhrase::parts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.TrainingPhrase.parts)
  return _impl_.parts_;
}

// int32 times_added_count = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_TrainingPhrase::clear_times_added_count() {
  _impl_.times_added_count_ = 0;
}
inline int32_t Intent_TrainingPhrase::_internal_times_added_count() const {
  return _impl_.times_added_count_;
}
inline int32_t Intent_TrainingPhrase::times_added_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.TrainingPhrase.times_added_count)
  return _internal_times_added_count();
}
inline void Intent_TrainingPhrase::_internal_set_times_added_count(int32_t value) {
  
  _impl_.times_added_count_ = value;
}
inline void Intent_TrainingPhrase::set_times_added_count(int32_t value) {
  _internal_set_times_added_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.TrainingPhrase.times_added_count)
}

// -------------------------------------------------------------------

// Intent_Parameter

// string name = 1;
inline void Intent_Parameter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Intent_Parameter::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Parameter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.name)
}
inline std::string* Intent_Parameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.name)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Intent_Parameter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Parameter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Parameter.name)
  return _impl_.name_.Release();
}
inline void Intent_Parameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Parameter.name)
}

// string display_name = 2;
inline void Intent_Parameter::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Intent_Parameter::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Parameter::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.display_name)
}
inline std::string* Intent_Parameter::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.display_name)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Intent_Parameter::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Parameter::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Parameter::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Parameter.display_name)
  return _impl_.display_name_.Release();
}
inline void Intent_Parameter::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Parameter.display_name)
}

// string value = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Parameter::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Intent_Parameter::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Parameter::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.value)
}
inline std::string* Intent_Parameter::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.value)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Intent_Parameter::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Parameter::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Parameter::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Parameter.value)
  return _impl_.value_.Release();
}
inline void Intent_Parameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Parameter.value)
}

// string default_value = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Parameter::clear_default_value() {
  _impl_.default_value_.ClearToEmpty();
}
inline const std::string& Intent_Parameter::default_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.default_value)
  return _internal_default_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Parameter::set_default_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.default_value)
}
inline std::string* Intent_Parameter::mutable_default_value() {
  std::string* _s = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.default_value)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_default_value() const {
  return _impl_.default_value_.Get();
}
inline void Intent_Parameter::_internal_set_default_value(const std::string& value) {
  
  _impl_.default_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Parameter::_internal_mutable_default_value() {
  
  return _impl_.default_value_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Parameter::release_default_value() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Parameter.default_value)
  return _impl_.default_value_.Release();
}
inline void Intent_Parameter::set_allocated_default_value(std::string* default_value) {
  if (default_value != nullptr) {
    
  } else {
    
  }
  _impl_.default_value_.SetAllocated(default_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_value_.IsDefault()) {
    _impl_.default_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Parameter.default_value)
}

// string entity_type_display_name = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Parameter::clear_entity_type_display_name() {
  _impl_.entity_type_display_name_.ClearToEmpty();
}
inline const std::string& Intent_Parameter::entity_type_display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.entity_type_display_name)
  return _internal_entity_type_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Parameter::set_entity_type_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_type_display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.entity_type_display_name)
}
inline std::string* Intent_Parameter::mutable_entity_type_display_name() {
  std::string* _s = _internal_mutable_entity_type_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.entity_type_display_name)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_entity_type_display_name() const {
  return _impl_.entity_type_display_name_.Get();
}
inline void Intent_Parameter::_internal_set_entity_type_display_name(const std::string& value) {
  
  _impl_.entity_type_display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Parameter::_internal_mutable_entity_type_display_name() {
  
  return _impl_.entity_type_display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Parameter::release_entity_type_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Parameter.entity_type_display_name)
  return _impl_.entity_type_display_name_.Release();
}
inline void Intent_Parameter::set_allocated_entity_type_display_name(std::string* entity_type_display_name) {
  if (entity_type_display_name != nullptr) {
    
  } else {
    
  }
  _impl_.entity_type_display_name_.SetAllocated(entity_type_display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_type_display_name_.IsDefault()) {
    _impl_.entity_type_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Parameter.entity_type_display_name)
}

// bool mandatory = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Parameter::clear_mandatory() {
  _impl_.mandatory_ = false;
}
inline bool Intent_Parameter::_internal_mandatory() const {
  return _impl_.mandatory_;
}
inline bool Intent_Parameter::mandatory() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.mandatory)
  return _internal_mandatory();
}
inline void Intent_Parameter::_internal_set_mandatory(bool value) {
  
  _impl_.mandatory_ = value;
}
inline void Intent_Parameter::set_mandatory(bool value) {
  _internal_set_mandatory(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.mandatory)
}

// repeated string prompts = 7 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Parameter::_internal_prompts_size() const {
  return _impl_.prompts_.size();
}
inline int Intent_Parameter::prompts_size() const {
  return _internal_prompts_size();
}
inline void Intent_Parameter::clear_prompts() {
  _impl_.prompts_.Clear();
}
inline std::string* Intent_Parameter::add_prompts() {
  std::string* _s = _internal_add_prompts();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
  return _s;
}
inline const std::string& Intent_Parameter::_internal_prompts(int index) const {
  return _impl_.prompts_.Get(index);
}
inline const std::string& Intent_Parameter::prompts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
  return _internal_prompts(index);
}
inline std::string* Intent_Parameter::mutable_prompts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
  return _impl_.prompts_.Mutable(index);
}
inline void Intent_Parameter::set_prompts(int index, const std::string& value) {
  _impl_.prompts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::set_prompts(int index, std::string&& value) {
  _impl_.prompts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::set_prompts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prompts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::set_prompts(int index, const char* value, size_t size) {
  _impl_.prompts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline std::string* Intent_Parameter::_internal_add_prompts() {
  return _impl_.prompts_.Add();
}
inline void Intent_Parameter::add_prompts(const std::string& value) {
  _impl_.prompts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::add_prompts(std::string&& value) {
  _impl_.prompts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::add_prompts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prompts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline void Intent_Parameter::add_prompts(const char* value, size_t size) {
  _impl_.prompts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent_Parameter::prompts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
  return _impl_.prompts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent_Parameter::mutable_prompts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Parameter.prompts)
  return &_impl_.prompts_;
}

// bool is_list = 8 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Parameter::clear_is_list() {
  _impl_.is_list_ = false;
}
inline bool Intent_Parameter::_internal_is_list() const {
  return _impl_.is_list_;
}
inline bool Intent_Parameter::is_list() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Parameter.is_list)
  return _internal_is_list();
}
inline void Intent_Parameter::_internal_set_is_list(bool value) {
  
  _impl_.is_list_ = value;
}
inline void Intent_Parameter::set_is_list(bool value) {
  _internal_set_is_list(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Parameter.is_list)
}

// -------------------------------------------------------------------

// Intent_Message_Text

// repeated string text = 1 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_Text::_internal_text_size() const {
  return _impl_.text_.size();
}
inline int Intent_Message_Text::text_size() const {
  return _internal_text_size();
}
inline void Intent_Message_Text::clear_text() {
  _impl_.text_.Clear();
}
inline std::string* Intent_Message_Text::add_text() {
  std::string* _s = _internal_add_text();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.Message.Text.text)
  return _s;
}
inline const std::string& Intent_Message_Text::_internal_text(int index) const {
  return _impl_.text_.Get(index);
}
inline const std::string& Intent_Message_Text::text(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Text.text)
  return _internal_text(index);
}
inline std::string* Intent_Message_Text::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Text.text)
  return _impl_.text_.Mutable(index);
}
inline void Intent_Message_Text::set_text(int index, const std::string& value) {
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::set_text(int index, std::string&& value) {
  _impl_.text_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::set_text(int index, const char* value, size_t size) {
  _impl_.text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline std::string* Intent_Message_Text::_internal_add_text() {
  return _impl_.text_.Add();
}
inline void Intent_Message_Text::add_text(const std::string& value) {
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::add_text(std::string&& value) {
  _impl_.text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline void Intent_Message_Text::add_text(const char* value, size_t size) {
  _impl_.text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.Message.Text.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent_Message_Text::text() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.Text.text)
  return _impl_.text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent_Message_Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.Text.text)
  return &_impl_.text_;
}

// -------------------------------------------------------------------

// Intent_Message_Image

// string image_uri = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Image::clear_image_uri() {
  _impl_.image_uri_.ClearToEmpty();
}
inline const std::string& Intent_Message_Image::image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Image.image_uri)
  return _internal_image_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Image::set_image_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Image.image_uri)
}
inline std::string* Intent_Message_Image::mutable_image_uri() {
  std::string* _s = _internal_mutable_image_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Image.image_uri)
  return _s;
}
inline const std::string& Intent_Message_Image::_internal_image_uri() const {
  return _impl_.image_uri_.Get();
}
inline void Intent_Message_Image::_internal_set_image_uri(const std::string& value) {
  
  _impl_.image_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Image::_internal_mutable_image_uri() {
  
  return _impl_.image_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Image::release_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Image.image_uri)
  return _impl_.image_uri_.Release();
}
inline void Intent_Message_Image::set_allocated_image_uri(std::string* image_uri) {
  if (image_uri != nullptr) {
    
  } else {
    
  }
  _impl_.image_uri_.SetAllocated(image_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_uri_.IsDefault()) {
    _impl_.image_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Image.image_uri)
}

// string accessibility_text = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Image::clear_accessibility_text() {
  _impl_.accessibility_text_.ClearToEmpty();
}
inline const std::string& Intent_Message_Image::accessibility_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Image.accessibility_text)
  return _internal_accessibility_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Image::set_accessibility_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accessibility_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Image.accessibility_text)
}
inline std::string* Intent_Message_Image::mutable_accessibility_text() {
  std::string* _s = _internal_mutable_accessibility_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Image.accessibility_text)
  return _s;
}
inline const std::string& Intent_Message_Image::_internal_accessibility_text() const {
  return _impl_.accessibility_text_.Get();
}
inline void Intent_Message_Image::_internal_set_accessibility_text(const std::string& value) {
  
  _impl_.accessibility_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Image::_internal_mutable_accessibility_text() {
  
  return _impl_.accessibility_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Image::release_accessibility_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Image.accessibility_text)
  return _impl_.accessibility_text_.Release();
}
inline void Intent_Message_Image::set_allocated_accessibility_text(std::string* accessibility_text) {
  if (accessibility_text != nullptr) {
    
  } else {
    
  }
  _impl_.accessibility_text_.SetAllocated(accessibility_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_text_.IsDefault()) {
    _impl_.accessibility_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Image.accessibility_text)
}

// -------------------------------------------------------------------

// Intent_Message_QuickReplies

// string title = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_QuickReplies::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_QuickReplies::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_QuickReplies::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.title)
}
inline std::string* Intent_Message_QuickReplies::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.title)
  return _s;
}
inline const std::string& Intent_Message_QuickReplies::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_QuickReplies::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_QuickReplies::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_QuickReplies::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_QuickReplies::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.title)
}

// repeated string quick_replies = 2 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_QuickReplies::_internal_quick_replies_size() const {
  return _impl_.quick_replies_.size();
}
inline int Intent_Message_QuickReplies::quick_replies_size() const {
  return _internal_quick_replies_size();
}
inline void Intent_Message_QuickReplies::clear_quick_replies() {
  _impl_.quick_replies_.Clear();
}
inline std::string* Intent_Message_QuickReplies::add_quick_replies() {
  std::string* _s = _internal_add_quick_replies();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
  return _s;
}
inline const std::string& Intent_Message_QuickReplies::_internal_quick_replies(int index) const {
  return _impl_.quick_replies_.Get(index);
}
inline const std::string& Intent_Message_QuickReplies::quick_replies(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
  return _internal_quick_replies(index);
}
inline std::string* Intent_Message_QuickReplies::mutable_quick_replies(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
  return _impl_.quick_replies_.Mutable(index);
}
inline void Intent_Message_QuickReplies::set_quick_replies(int index, const std::string& value) {
  _impl_.quick_replies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::set_quick_replies(int index, std::string&& value) {
  _impl_.quick_replies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::set_quick_replies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.quick_replies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::set_quick_replies(int index, const char* value, size_t size) {
  _impl_.quick_replies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline std::string* Intent_Message_QuickReplies::_internal_add_quick_replies() {
  return _impl_.quick_replies_.Add();
}
inline void Intent_Message_QuickReplies::add_quick_replies(const std::string& value) {
  _impl_.quick_replies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::add_quick_replies(std::string&& value) {
  _impl_.quick_replies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::add_quick_replies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.quick_replies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline void Intent_Message_QuickReplies::add_quick_replies(const char* value, size_t size) {
  _impl_.quick_replies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent_Message_QuickReplies::quick_replies() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
  return _impl_.quick_replies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent_Message_QuickReplies::mutable_quick_replies() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.QuickReplies.quick_replies)
  return &_impl_.quick_replies_;
}

// -------------------------------------------------------------------

// Intent_Message_Card_Button

// string text = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Card_Button::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Intent_Message_Card_Button::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.Button.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Card_Button::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Card.Button.text)
}
inline std::string* Intent_Message_Card_Button::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.Button.text)
  return _s;
}
inline const std::string& Intent_Message_Card_Button::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Intent_Message_Card_Button::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Card_Button::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Card_Button::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Card.Button.text)
  return _impl_.text_.Release();
}
inline void Intent_Message_Card_Button::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Card.Button.text)
}

// string postback = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Card_Button::clear_postback() {
  _impl_.postback_.ClearToEmpty();
}
inline const std::string& Intent_Message_Card_Button::postback() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.Button.postback)
  return _internal_postback();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Card_Button::set_postback(ArgT0&& arg0, ArgT... args) {
 
 _impl_.postback_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Card.Button.postback)
}
inline std::string* Intent_Message_Card_Button::mutable_postback() {
  std::string* _s = _internal_mutable_postback();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.Button.postback)
  return _s;
}
inline const std::string& Intent_Message_Card_Button::_internal_postback() const {
  return _impl_.postback_.Get();
}
inline void Intent_Message_Card_Button::_internal_set_postback(const std::string& value) {
  
  _impl_.postback_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Card_Button::_internal_mutable_postback() {
  
  return _impl_.postback_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Card_Button::release_postback() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Card.Button.postback)
  return _impl_.postback_.Release();
}
inline void Intent_Message_Card_Button::set_allocated_postback(std::string* postback) {
  if (postback != nullptr) {
    
  } else {
    
  }
  _impl_.postback_.SetAllocated(postback, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postback_.IsDefault()) {
    _impl_.postback_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Card.Button.postback)
}

// -------------------------------------------------------------------

// Intent_Message_Card

// string title = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Card::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_Card::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Card::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Card.title)
}
inline std::string* Intent_Message_Card::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.title)
  return _s;
}
inline const std::string& Intent_Message_Card::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_Card::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Card.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_Card::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Card.title)
}

// string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Card::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& Intent_Message_Card::subtitle() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Card::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Card.subtitle)
}
inline std::string* Intent_Message_Card::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.subtitle)
  return _s;
}
inline const std::string& Intent_Message_Card::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void Intent_Message_Card::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::release_subtitle() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Card.subtitle)
  return _impl_.subtitle_.Release();
}
inline void Intent_Message_Card::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Card.subtitle)
}

// string image_uri = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_Card::clear_image_uri() {
  _impl_.image_uri_.ClearToEmpty();
}
inline const std::string& Intent_Message_Card::image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.image_uri)
  return _internal_image_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Card::set_image_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Card.image_uri)
}
inline std::string* Intent_Message_Card::mutable_image_uri() {
  std::string* _s = _internal_mutable_image_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.image_uri)
  return _s;
}
inline const std::string& Intent_Message_Card::_internal_image_uri() const {
  return _impl_.image_uri_.Get();
}
inline void Intent_Message_Card::_internal_set_image_uri(const std::string& value) {
  
  _impl_.image_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::_internal_mutable_image_uri() {
  
  return _impl_.image_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Card::release_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Card.image_uri)
  return _impl_.image_uri_.Release();
}
inline void Intent_Message_Card::set_allocated_image_uri(std::string* image_uri) {
  if (image_uri != nullptr) {
    
  } else {
    
  }
  _impl_.image_uri_.SetAllocated(image_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_uri_.IsDefault()) {
    _impl_.image_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Card.image_uri)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.Card.Button buttons = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_Card::_internal_buttons_size() const {
  return _impl_.buttons_.size();
}
inline int Intent_Message_Card::buttons_size() const {
  return _internal_buttons_size();
}
inline void Intent_Message_Card::clear_buttons() {
  _impl_.buttons_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* Intent_Message_Card::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Card.buttons)
  return _impl_.buttons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Card_Button >*
Intent_Message_Card::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.Card.buttons)
  return &_impl_.buttons_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Card_Button& Intent_Message_Card::_internal_buttons(int index) const {
  return _impl_.buttons_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Card_Button& Intent_Message_Card::buttons(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Card.buttons)
  return _internal_buttons(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* Intent_Message_Card::_internal_add_buttons() {
  return _impl_.buttons_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* Intent_Message_Card::add_buttons() {
  ::google::cloud::dialogflow::v2::Intent_Message_Card_Button* _add = _internal_add_buttons();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.Card.buttons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Card_Button >&
Intent_Message_Card::buttons() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.Card.buttons)
  return _impl_.buttons_;
}

// -------------------------------------------------------------------

// Intent_Message_SimpleResponse

// string text_to_speech = 1;
inline void Intent_Message_SimpleResponse::clear_text_to_speech() {
  _impl_.text_to_speech_.ClearToEmpty();
}
inline const std::string& Intent_Message_SimpleResponse::text_to_speech() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.text_to_speech)
  return _internal_text_to_speech();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_SimpleResponse::set_text_to_speech(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_to_speech_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.text_to_speech)
}
inline std::string* Intent_Message_SimpleResponse::mutable_text_to_speech() {
  std::string* _s = _internal_mutable_text_to_speech();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.text_to_speech)
  return _s;
}
inline const std::string& Intent_Message_SimpleResponse::_internal_text_to_speech() const {
  return _impl_.text_to_speech_.Get();
}
inline void Intent_Message_SimpleResponse::_internal_set_text_to_speech(const std::string& value) {
  
  _impl_.text_to_speech_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::_internal_mutable_text_to_speech() {
  
  return _impl_.text_to_speech_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::release_text_to_speech() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.text_to_speech)
  return _impl_.text_to_speech_.Release();
}
inline void Intent_Message_SimpleResponse::set_allocated_text_to_speech(std::string* text_to_speech) {
  if (text_to_speech != nullptr) {
    
  } else {
    
  }
  _impl_.text_to_speech_.SetAllocated(text_to_speech, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_to_speech_.IsDefault()) {
    _impl_.text_to_speech_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.text_to_speech)
}

// string ssml = 2;
inline void Intent_Message_SimpleResponse::clear_ssml() {
  _impl_.ssml_.ClearToEmpty();
}
inline const std::string& Intent_Message_SimpleResponse::ssml() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.ssml)
  return _internal_ssml();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_SimpleResponse::set_ssml(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ssml_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.ssml)
}
inline std::string* Intent_Message_SimpleResponse::mutable_ssml() {
  std::string* _s = _internal_mutable_ssml();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.ssml)
  return _s;
}
inline const std::string& Intent_Message_SimpleResponse::_internal_ssml() const {
  return _impl_.ssml_.Get();
}
inline void Intent_Message_SimpleResponse::_internal_set_ssml(const std::string& value) {
  
  _impl_.ssml_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::_internal_mutable_ssml() {
  
  return _impl_.ssml_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::release_ssml() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.ssml)
  return _impl_.ssml_.Release();
}
inline void Intent_Message_SimpleResponse::set_allocated_ssml(std::string* ssml) {
  if (ssml != nullptr) {
    
  } else {
    
  }
  _impl_.ssml_.SetAllocated(ssml, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssml_.IsDefault()) {
    _impl_.ssml_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.ssml)
}

// string display_text = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_SimpleResponse::clear_display_text() {
  _impl_.display_text_.ClearToEmpty();
}
inline const std::string& Intent_Message_SimpleResponse::display_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.display_text)
  return _internal_display_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_SimpleResponse::set_display_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.display_text)
}
inline std::string* Intent_Message_SimpleResponse::mutable_display_text() {
  std::string* _s = _internal_mutable_display_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.display_text)
  return _s;
}
inline const std::string& Intent_Message_SimpleResponse::_internal_display_text() const {
  return _impl_.display_text_.Get();
}
inline void Intent_Message_SimpleResponse::_internal_set_display_text(const std::string& value) {
  
  _impl_.display_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::_internal_mutable_display_text() {
  
  return _impl_.display_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_SimpleResponse::release_display_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.display_text)
  return _impl_.display_text_.Release();
}
inline void Intent_Message_SimpleResponse::set_allocated_display_text(std::string* display_text) {
  if (display_text != nullptr) {
    
  } else {
    
  }
  _impl_.display_text_.SetAllocated(display_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_text_.IsDefault()) {
    _impl_.display_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.SimpleResponse.display_text)
}

// -------------------------------------------------------------------

// Intent_Message_SimpleResponses

// repeated .google.cloud.dialogflow.v2.Intent.Message.SimpleResponse simple_responses = 1 [(.google.api.field_behavior) = REQUIRED];
inline int Intent_Message_SimpleResponses::_internal_simple_responses_size() const {
  return _impl_.simple_responses_.size();
}
inline int Intent_Message_SimpleResponses::simple_responses_size() const {
  return _internal_simple_responses_size();
}
inline void Intent_Message_SimpleResponses::clear_simple_responses() {
  _impl_.simple_responses_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* Intent_Message_SimpleResponses::mutable_simple_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses.simple_responses)
  return _impl_.simple_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse >*
Intent_Message_SimpleResponses::mutable_simple_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses.simple_responses)
  return &_impl_.simple_responses_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse& Intent_Message_SimpleResponses::_internal_simple_responses(int index) const {
  return _impl_.simple_responses_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse& Intent_Message_SimpleResponses::simple_responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses.simple_responses)
  return _internal_simple_responses(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* Intent_Message_SimpleResponses::_internal_add_simple_responses() {
  return _impl_.simple_responses_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* Intent_Message_SimpleResponses::add_simple_responses() {
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse* _add = _internal_add_simple_responses();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses.simple_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponse >&
Intent_Message_SimpleResponses::simple_responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.SimpleResponses.simple_responses)
  return _impl_.simple_responses_;
}

// -------------------------------------------------------------------

// Intent_Message_BasicCard_Button_OpenUriAction

// string uri = 1;
inline void Intent_Message_BasicCard_Button_OpenUriAction::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Intent_Message_BasicCard_Button_OpenUriAction::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BasicCard_Button_OpenUriAction::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction.uri)
}
inline std::string* Intent_Message_BasicCard_Button_OpenUriAction::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction.uri)
  return _s;
}
inline const std::string& Intent_Message_BasicCard_Button_OpenUriAction::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void Intent_Message_BasicCard_Button_OpenUriAction::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard_Button_OpenUriAction::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard_Button_OpenUriAction::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction.uri)
  return _impl_.uri_.Release();
}
inline void Intent_Message_BasicCard_Button_OpenUriAction::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction.uri)
}

// -------------------------------------------------------------------

// Intent_Message_BasicCard_Button

// string title = 1;
inline void Intent_Message_BasicCard_Button::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_BasicCard_Button::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BasicCard_Button::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.title)
}
inline std::string* Intent_Message_BasicCard_Button::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.title)
  return _s;
}
inline const std::string& Intent_Message_BasicCard_Button::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_BasicCard_Button::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard_Button::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard_Button::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_BasicCard_Button::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.title)
}

// .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction open_uri_action = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool Intent_Message_BasicCard_Button::_internal_has_open_uri_action() const {
  return this != internal_default_instance() && _impl_.open_uri_action_ != nullptr;
}
inline bool Intent_Message_BasicCard_Button::has_open_uri_action() const {
  return _internal_has_open_uri_action();
}
inline void Intent_Message_BasicCard_Button::clear_open_uri_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_uri_action_ != nullptr) {
    delete _impl_.open_uri_action_;
  }
  _impl_.open_uri_action_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction& Intent_Message_BasicCard_Button::_internal_open_uri_action() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* p = _impl_.open_uri_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_BasicCard_Button_OpenUriAction_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction& Intent_Message_BasicCard_Button::open_uri_action() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.open_uri_action)
  return _internal_open_uri_action();
}
inline void Intent_Message_BasicCard_Button::unsafe_arena_set_allocated_open_uri_action(
    ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* open_uri_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_uri_action_);
  }
  _impl_.open_uri_action_ = open_uri_action;
  if (open_uri_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.open_uri_action)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* Intent_Message_BasicCard_Button::release_open_uri_action() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* temp = _impl_.open_uri_action_;
  _impl_.open_uri_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* Intent_Message_BasicCard_Button::unsafe_arena_release_open_uri_action() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.open_uri_action)
  
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* temp = _impl_.open_uri_action_;
  _impl_.open_uri_action_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* Intent_Message_BasicCard_Button::_internal_mutable_open_uri_action() {
  
  if (_impl_.open_uri_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction>(GetArenaForAllocation());
    _impl_.open_uri_action_ = p;
  }
  return _impl_.open_uri_action_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* Intent_Message_BasicCard_Button::mutable_open_uri_action() {
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* _msg = _internal_mutable_open_uri_action();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.open_uri_action)
  return _msg;
}
inline void Intent_Message_BasicCard_Button::set_allocated_open_uri_action(::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button_OpenUriAction* open_uri_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.open_uri_action_;
  }
  if (open_uri_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(open_uri_action);
    if (message_arena != submessage_arena) {
      open_uri_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_uri_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.open_uri_action_ = open_uri_action;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.open_uri_action)
}

// -------------------------------------------------------------------

// Intent_Message_BasicCard

// string title = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BasicCard::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_BasicCard::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BasicCard::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BasicCard.title)
}
inline std::string* Intent_Message_BasicCard::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.title)
  return _s;
}
inline const std::string& Intent_Message_BasicCard::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_BasicCard::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_BasicCard::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.title)
}

// string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BasicCard::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& Intent_Message_BasicCard::subtitle() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BasicCard::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BasicCard.subtitle)
}
inline std::string* Intent_Message_BasicCard::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.subtitle)
  return _s;
}
inline const std::string& Intent_Message_BasicCard::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void Intent_Message_BasicCard::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::release_subtitle() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.subtitle)
  return _impl_.subtitle_.Release();
}
inline void Intent_Message_BasicCard::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.subtitle)
}

// string formatted_text = 3;
inline void Intent_Message_BasicCard::clear_formatted_text() {
  _impl_.formatted_text_.ClearToEmpty();
}
inline const std::string& Intent_Message_BasicCard::formatted_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.formatted_text)
  return _internal_formatted_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BasicCard::set_formatted_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.formatted_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BasicCard.formatted_text)
}
inline std::string* Intent_Message_BasicCard::mutable_formatted_text() {
  std::string* _s = _internal_mutable_formatted_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.formatted_text)
  return _s;
}
inline const std::string& Intent_Message_BasicCard::_internal_formatted_text() const {
  return _impl_.formatted_text_.Get();
}
inline void Intent_Message_BasicCard::_internal_set_formatted_text(const std::string& value) {
  
  _impl_.formatted_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::_internal_mutable_formatted_text() {
  
  return _impl_.formatted_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BasicCard::release_formatted_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.formatted_text)
  return _impl_.formatted_text_.Release();
}
inline void Intent_Message_BasicCard::set_allocated_formatted_text(std::string* formatted_text) {
  if (formatted_text != nullptr) {
    
  } else {
    
  }
  _impl_.formatted_text_.SetAllocated(formatted_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.formatted_text_.IsDefault()) {
    _impl_.formatted_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.formatted_text)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_BasicCard::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Intent_Message_BasicCard::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message_BasicCard::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_BasicCard::_internal_image() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_Image&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_BasicCard::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.image)
  return _internal_image();
}
inline void Intent_Message_BasicCard::unsafe_arena_set_allocated_image(
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BasicCard::release_image() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BasicCard::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BasicCard.image)
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BasicCard::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BasicCard::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.image)
  return _msg;
}
inline void Intent_Message_BasicCard::set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BasicCard.image)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button buttons = 5 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_BasicCard::_internal_buttons_size() const {
  return _impl_.buttons_.size();
}
inline int Intent_Message_BasicCard::buttons_size() const {
  return _internal_buttons_size();
}
inline void Intent_Message_BasicCard::clear_buttons() {
  _impl_.buttons_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_BasicCard::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BasicCard.buttons)
  return _impl_.buttons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >*
Intent_Message_BasicCard::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.BasicCard.buttons)
  return &_impl_.buttons_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& Intent_Message_BasicCard::_internal_buttons(int index) const {
  return _impl_.buttons_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& Intent_Message_BasicCard::buttons(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BasicCard.buttons)
  return _internal_buttons(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_BasicCard::_internal_add_buttons() {
  return _impl_.buttons_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_BasicCard::add_buttons() {
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* _add = _internal_add_buttons();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.BasicCard.buttons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >&
Intent_Message_BasicCard::buttons() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.BasicCard.buttons)
  return _impl_.buttons_;
}

// -------------------------------------------------------------------

// Intent_Message_Suggestion

// string title = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_Suggestion::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_Suggestion::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Suggestion.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_Suggestion::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.Suggestion.title)
}
inline std::string* Intent_Message_Suggestion::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Suggestion.title)
  return _s;
}
inline const std::string& Intent_Message_Suggestion::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_Suggestion::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_Suggestion::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_Suggestion::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.Suggestion.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_Suggestion::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.Suggestion.title)
}

// -------------------------------------------------------------------

// Intent_Message_Suggestions

// repeated .google.cloud.dialogflow.v2.Intent.Message.Suggestion suggestions = 1 [(.google.api.field_behavior) = REQUIRED];
inline int Intent_Message_Suggestions::_internal_suggestions_size() const {
  return _impl_.suggestions_.size();
}
inline int Intent_Message_Suggestions::suggestions_size() const {
  return _internal_suggestions_size();
}
inline void Intent_Message_Suggestions::clear_suggestions() {
  _impl_.suggestions_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* Intent_Message_Suggestions::mutable_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.Suggestions.suggestions)
  return _impl_.suggestions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Suggestion >*
Intent_Message_Suggestions::mutable_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.Suggestions.suggestions)
  return &_impl_.suggestions_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Suggestion& Intent_Message_Suggestions::_internal_suggestions(int index) const {
  return _impl_.suggestions_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Suggestion& Intent_Message_Suggestions::suggestions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.Suggestions.suggestions)
  return _internal_suggestions(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* Intent_Message_Suggestions::_internal_add_suggestions() {
  return _impl_.suggestions_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* Intent_Message_Suggestions::add_suggestions() {
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestion* _add = _internal_add_suggestions();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.Suggestions.suggestions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_Suggestion >&
Intent_Message_Suggestions::suggestions() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.Suggestions.suggestions)
  return _impl_.suggestions_;
}

// -------------------------------------------------------------------

// Intent_Message_LinkOutSuggestion

// string destination_name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_LinkOutSuggestion::clear_destination_name() {
  _impl_.destination_name_.ClearToEmpty();
}
inline const std::string& Intent_Message_LinkOutSuggestion::destination_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.destination_name)
  return _internal_destination_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_LinkOutSuggestion::set_destination_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.destination_name)
}
inline std::string* Intent_Message_LinkOutSuggestion::mutable_destination_name() {
  std::string* _s = _internal_mutable_destination_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.destination_name)
  return _s;
}
inline const std::string& Intent_Message_LinkOutSuggestion::_internal_destination_name() const {
  return _impl_.destination_name_.Get();
}
inline void Intent_Message_LinkOutSuggestion::_internal_set_destination_name(const std::string& value) {
  
  _impl_.destination_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_LinkOutSuggestion::_internal_mutable_destination_name() {
  
  return _impl_.destination_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_LinkOutSuggestion::release_destination_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.destination_name)
  return _impl_.destination_name_.Release();
}
inline void Intent_Message_LinkOutSuggestion::set_allocated_destination_name(std::string* destination_name) {
  if (destination_name != nullptr) {
    
  } else {
    
  }
  _impl_.destination_name_.SetAllocated(destination_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_name_.IsDefault()) {
    _impl_.destination_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.destination_name)
}

// string uri = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_LinkOutSuggestion::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Intent_Message_LinkOutSuggestion::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_LinkOutSuggestion::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.uri)
}
inline std::string* Intent_Message_LinkOutSuggestion::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.uri)
  return _s;
}
inline const std::string& Intent_Message_LinkOutSuggestion::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void Intent_Message_LinkOutSuggestion::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_LinkOutSuggestion::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_LinkOutSuggestion::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.uri)
  return _impl_.uri_.Release();
}
inline void Intent_Message_LinkOutSuggestion::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion.uri)
}

// -------------------------------------------------------------------

// Intent_Message_ListSelect_Item

// .google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo info = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool Intent_Message_ListSelect_Item::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool Intent_Message_ListSelect_Item::has_info() const {
  return _internal_has_info();
}
inline void Intent_Message_ListSelect_Item::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& Intent_Message_ListSelect_Item::_internal_info() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_SelectItemInfo_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& Intent_Message_ListSelect_Item::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.info)
  return _internal_info();
}
inline void Intent_Message_ListSelect_Item::unsafe_arena_set_allocated_info(
    ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.info)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_ListSelect_Item::release_info() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_ListSelect_Item::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.info)
  
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_ListSelect_Item::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_ListSelect_Item::mutable_info() {
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.info)
  return _msg;
}
inline void Intent_Message_ListSelect_Item::set_allocated_info(::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.info)
}

// string title = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_ListSelect_Item::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_ListSelect_Item::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_ListSelect_Item::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.title)
}
inline std::string* Intent_Message_ListSelect_Item::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.title)
  return _s;
}
inline const std::string& Intent_Message_ListSelect_Item::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_ListSelect_Item::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect_Item::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect_Item::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_ListSelect_Item::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.title)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_ListSelect_Item::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Intent_Message_ListSelect_Item::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_ListSelect_Item::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.description)
}
inline std::string* Intent_Message_ListSelect_Item::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.description)
  return _s;
}
inline const std::string& Intent_Message_ListSelect_Item::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Intent_Message_ListSelect_Item::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect_Item::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect_Item::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.description)
  return _impl_.description_.Release();
}
inline void Intent_Message_ListSelect_Item::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.description)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_ListSelect_Item::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Intent_Message_ListSelect_Item::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message_ListSelect_Item::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_ListSelect_Item::_internal_image() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_Image&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_ListSelect_Item::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.image)
  return _internal_image();
}
inline void Intent_Message_ListSelect_Item::unsafe_arena_set_allocated_image(
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_ListSelect_Item::release_image() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_ListSelect_Item::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.image)
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_ListSelect_Item::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_ListSelect_Item::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.image)
  return _msg;
}
inline void Intent_Message_ListSelect_Item::set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item.image)
}

// -------------------------------------------------------------------

// Intent_Message_ListSelect

// string title = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_ListSelect::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_ListSelect::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_ListSelect::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ListSelect.title)
}
inline std::string* Intent_Message_ListSelect::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.title)
  return _s;
}
inline const std::string& Intent_Message_ListSelect::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_ListSelect::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_ListSelect::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.title)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item items = 2 [(.google.api.field_behavior) = REQUIRED];
inline int Intent_Message_ListSelect::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Intent_Message_ListSelect::items_size() const {
  return _internal_items_size();
}
inline void Intent_Message_ListSelect::clear_items() {
  _impl_.items_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* Intent_Message_ListSelect::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item >*
Intent_Message_ListSelect::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.ListSelect.items)
  return &_impl_.items_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item& Intent_Message_ListSelect::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item& Intent_Message_ListSelect::items(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.items)
  return _internal_items(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* Intent_Message_ListSelect::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* Intent_Message_ListSelect::add_items() {
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.ListSelect.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect_Item >&
Intent_Message_ListSelect::items() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.ListSelect.items)
  return _impl_.items_;
}

// string subtitle = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_ListSelect::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& Intent_Message_ListSelect::subtitle() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ListSelect.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_ListSelect::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ListSelect.subtitle)
}
inline std::string* Intent_Message_ListSelect::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ListSelect.subtitle)
  return _s;
}
inline const std::string& Intent_Message_ListSelect::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void Intent_Message_ListSelect::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_ListSelect::release_subtitle() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ListSelect.subtitle)
  return _impl_.subtitle_.Release();
}
inline void Intent_Message_ListSelect::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ListSelect.subtitle)
}

// -------------------------------------------------------------------

// Intent_Message_CarouselSelect_Item

// .google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo info = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool Intent_Message_CarouselSelect_Item::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool Intent_Message_CarouselSelect_Item::has_info() const {
  return _internal_has_info();
}
inline void Intent_Message_CarouselSelect_Item::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& Intent_Message_CarouselSelect_Item::_internal_info() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_SelectItemInfo_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo& Intent_Message_CarouselSelect_Item::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.info)
  return _internal_info();
}
inline void Intent_Message_CarouselSelect_Item::unsafe_arena_set_allocated_info(
    ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.info)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_CarouselSelect_Item::release_info() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_CarouselSelect_Item::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.info)
  
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_CarouselSelect_Item::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* Intent_Message_CarouselSelect_Item::mutable_info() {
  ::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.info)
  return _msg;
}
inline void Intent_Message_CarouselSelect_Item::set_allocated_info(::google::cloud::dialogflow::v2::Intent_Message_SelectItemInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.info)
}

// string title = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_CarouselSelect_Item::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_CarouselSelect_Item::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_CarouselSelect_Item::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.title)
}
inline std::string* Intent_Message_CarouselSelect_Item::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.title)
  return _s;
}
inline const std::string& Intent_Message_CarouselSelect_Item::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_CarouselSelect_Item::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_CarouselSelect_Item::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_CarouselSelect_Item::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_CarouselSelect_Item::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.title)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_CarouselSelect_Item::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Intent_Message_CarouselSelect_Item::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_CarouselSelect_Item::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.description)
}
inline std::string* Intent_Message_CarouselSelect_Item::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.description)
  return _s;
}
inline const std::string& Intent_Message_CarouselSelect_Item::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Intent_Message_CarouselSelect_Item::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_CarouselSelect_Item::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_CarouselSelect_Item::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.description)
  return _impl_.description_.Release();
}
inline void Intent_Message_CarouselSelect_Item::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.description)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_CarouselSelect_Item::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Intent_Message_CarouselSelect_Item::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message_CarouselSelect_Item::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_CarouselSelect_Item::_internal_image() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_Image&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_CarouselSelect_Item::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.image)
  return _internal_image();
}
inline void Intent_Message_CarouselSelect_Item::unsafe_arena_set_allocated_image(
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_CarouselSelect_Item::release_image() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_CarouselSelect_Item::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.image)
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_CarouselSelect_Item::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_CarouselSelect_Item::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.image)
  return _msg;
}
inline void Intent_Message_CarouselSelect_Item::set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item.image)
}

// -------------------------------------------------------------------

// Intent_Message_CarouselSelect

// repeated .google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item items = 1 [(.google.api.field_behavior) = REQUIRED];
inline int Intent_Message_CarouselSelect::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Intent_Message_CarouselSelect::items_size() const {
  return _internal_items_size();
}
inline void Intent_Message_CarouselSelect::clear_items() {
  _impl_.items_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* Intent_Message_CarouselSelect::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item >*
Intent_Message_CarouselSelect::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.items)
  return &_impl_.items_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item& Intent_Message_CarouselSelect::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item& Intent_Message_CarouselSelect::items(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.items)
  return _internal_items(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* Intent_Message_CarouselSelect::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* Intent_Message_CarouselSelect::add_items() {
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect_Item >&
Intent_Message_CarouselSelect::items() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// Intent_Message_SelectItemInfo

// string key = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Intent_Message_SelectItemInfo::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Intent_Message_SelectItemInfo::key() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_SelectItemInfo::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.key)
}
inline std::string* Intent_Message_SelectItemInfo::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.key)
  return _s;
}
inline const std::string& Intent_Message_SelectItemInfo::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Intent_Message_SelectItemInfo::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_SelectItemInfo::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_SelectItemInfo::release_key() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.key)
  return _impl_.key_.Release();
}
inline void Intent_Message_SelectItemInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.key)
}

// repeated string synonyms = 2 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_SelectItemInfo::_internal_synonyms_size() const {
  return _impl_.synonyms_.size();
}
inline int Intent_Message_SelectItemInfo::synonyms_size() const {
  return _internal_synonyms_size();
}
inline void Intent_Message_SelectItemInfo::clear_synonyms() {
  _impl_.synonyms_.Clear();
}
inline std::string* Intent_Message_SelectItemInfo::add_synonyms() {
  std::string* _s = _internal_add_synonyms();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
  return _s;
}
inline const std::string& Intent_Message_SelectItemInfo::_internal_synonyms(int index) const {
  return _impl_.synonyms_.Get(index);
}
inline const std::string& Intent_Message_SelectItemInfo::synonyms(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
  return _internal_synonyms(index);
}
inline std::string* Intent_Message_SelectItemInfo::mutable_synonyms(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
  return _impl_.synonyms_.Mutable(index);
}
inline void Intent_Message_SelectItemInfo::set_synonyms(int index, const std::string& value) {
  _impl_.synonyms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::set_synonyms(int index, std::string&& value) {
  _impl_.synonyms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::set_synonyms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.synonyms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::set_synonyms(int index, const char* value, size_t size) {
  _impl_.synonyms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline std::string* Intent_Message_SelectItemInfo::_internal_add_synonyms() {
  return _impl_.synonyms_.Add();
}
inline void Intent_Message_SelectItemInfo::add_synonyms(const std::string& value) {
  _impl_.synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::add_synonyms(std::string&& value) {
  _impl_.synonyms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::add_synonyms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline void Intent_Message_SelectItemInfo::add_synonyms(const char* value, size_t size) {
  _impl_.synonyms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent_Message_SelectItemInfo::synonyms() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
  return _impl_.synonyms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent_Message_SelectItemInfo::mutable_synonyms() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo.synonyms)
  return &_impl_.synonyms_;
}

// -------------------------------------------------------------------

// Intent_Message_MediaContent_ResponseMediaObject

// string name = 1;
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_MediaContent_ResponseMediaObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.name)
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.name)
  return _s;
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.name)
  return _impl_.name_.Release();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.name)
}

// string description = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_MediaContent_ResponseMediaObject::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.description)
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.description)
  return _s;
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.description)
  return _impl_.description_.Release();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.description)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image large_image = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_MediaContent_ResponseMediaObject::_internal_has_large_image() const {
  return image_case() == kLargeImage;
}
inline bool Intent_Message_MediaContent_ResponseMediaObject::has_large_image() const {
  return _internal_has_large_image();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::set_has_large_image() {
  _impl_._oneof_case_[0] = kLargeImage;
}
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_large_image() {
  if (_internal_has_large_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.image_.large_image_;
    }
    clear_has_image();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::release_large_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.large_image)
  if (_internal_has_large_image()) {
    clear_has_image();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_.large_image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.image_.large_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_MediaContent_ResponseMediaObject::_internal_large_image() const {
  return _internal_has_large_image()
      ? *_impl_.image_.large_image_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Image&>(::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_MediaContent_ResponseMediaObject::large_image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.large_image)
  return _internal_large_image();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::unsafe_arena_release_large_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.large_image)
  if (_internal_has_large_image()) {
    clear_has_image();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_.large_image_;
    _impl_.image_.large_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message_MediaContent_ResponseMediaObject::unsafe_arena_set_allocated_large_image(::google::cloud::dialogflow::v2::Intent_Message_Image* large_image) {
  clear_image();
  if (large_image) {
    set_has_large_image();
    _impl_.image_.large_image_ = large_image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.large_image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::_internal_mutable_large_image() {
  if (!_internal_has_large_image()) {
    clear_image();
    set_has_large_image();
    _impl_.image_.large_image_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Image >(GetArenaForAllocation());
  }
  return _impl_.image_.large_image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::mutable_large_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_large_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.large_image)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.Image icon = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_MediaContent_ResponseMediaObject::_internal_has_icon() const {
  return image_case() == kIcon;
}
inline bool Intent_Message_MediaContent_ResponseMediaObject::has_icon() const {
  return _internal_has_icon();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::set_has_icon() {
  _impl_._oneof_case_[0] = kIcon;
}
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_icon() {
  if (_internal_has_icon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.image_.icon_;
    }
    clear_has_image();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::release_icon() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.icon)
  if (_internal_has_icon()) {
    clear_has_image();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_.icon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.image_.icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_MediaContent_ResponseMediaObject::_internal_icon() const {
  return _internal_has_icon()
      ? *_impl_.image_.icon_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Image&>(::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_MediaContent_ResponseMediaObject::icon() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.icon)
  return _internal_icon();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::unsafe_arena_release_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.icon)
  if (_internal_has_icon()) {
    clear_has_image();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_.icon_;
    _impl_.image_.icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message_MediaContent_ResponseMediaObject::unsafe_arena_set_allocated_icon(::google::cloud::dialogflow::v2::Intent_Message_Image* icon) {
  clear_image();
  if (icon) {
    set_has_icon();
    _impl_.image_.icon_ = icon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.icon)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::_internal_mutable_icon() {
  if (!_internal_has_icon()) {
    clear_image();
    set_has_icon();
    _impl_.image_.icon_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Image >(GetArenaForAllocation());
  }
  return _impl_.image_.icon_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_MediaContent_ResponseMediaObject::mutable_icon() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.icon)
  return _msg;
}

// string content_url = 5;
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_content_url() {
  _impl_.content_url_.ClearToEmpty();
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::content_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.content_url)
  return _internal_content_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_MediaContent_ResponseMediaObject::set_content_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.content_url)
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::mutable_content_url() {
  std::string* _s = _internal_mutable_content_url();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.content_url)
  return _s;
}
inline const std::string& Intent_Message_MediaContent_ResponseMediaObject::_internal_content_url() const {
  return _impl_.content_url_.Get();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::_internal_set_content_url(const std::string& value) {
  
  _impl_.content_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::_internal_mutable_content_url() {
  
  return _impl_.content_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_MediaContent_ResponseMediaObject::release_content_url() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.content_url)
  return _impl_.content_url_.Release();
}
inline void Intent_Message_MediaContent_ResponseMediaObject::set_allocated_content_url(std::string* content_url) {
  if (content_url != nullptr) {
    
  } else {
    
  }
  _impl_.content_url_.SetAllocated(content_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_url_.IsDefault()) {
    _impl_.content_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject.content_url)
}

inline bool Intent_Message_MediaContent_ResponseMediaObject::has_image() const {
  return image_case() != IMAGE_NOT_SET;
}
inline void Intent_Message_MediaContent_ResponseMediaObject::clear_has_image() {
  _impl_._oneof_case_[0] = IMAGE_NOT_SET;
}
inline Intent_Message_MediaContent_ResponseMediaObject::ImageCase Intent_Message_MediaContent_ResponseMediaObject::image_case() const {
  return Intent_Message_MediaContent_ResponseMediaObject::ImageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Intent_Message_MediaContent

// .google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaType media_type = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_MediaContent::clear_media_type() {
  _impl_.media_type_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType Intent_Message_MediaContent::_internal_media_type() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType >(_impl_.media_type_);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType Intent_Message_MediaContent::media_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_type)
  return _internal_media_type();
}
inline void Intent_Message_MediaContent::_internal_set_media_type(::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType value) {
  
  _impl_.media_type_ = value;
}
inline void Intent_Message_MediaContent::set_media_type(::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_type)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject media_objects = 2;
inline int Intent_Message_MediaContent::_internal_media_objects_size() const {
  return _impl_.media_objects_.size();
}
inline int Intent_Message_MediaContent::media_objects_size() const {
  return _internal_media_objects_size();
}
inline void Intent_Message_MediaContent::clear_media_objects() {
  _impl_.media_objects_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* Intent_Message_MediaContent::mutable_media_objects(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_objects)
  return _impl_.media_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject >*
Intent_Message_MediaContent::mutable_media_objects() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_objects)
  return &_impl_.media_objects_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject& Intent_Message_MediaContent::_internal_media_objects(int index) const {
  return _impl_.media_objects_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject& Intent_Message_MediaContent::media_objects(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_objects)
  return _internal_media_objects(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* Intent_Message_MediaContent::_internal_add_media_objects() {
  return _impl_.media_objects_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* Intent_Message_MediaContent::add_media_objects() {
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject* _add = _internal_add_media_objects();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaObject >&
Intent_Message_MediaContent::media_objects() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.MediaContent.media_objects)
  return _impl_.media_objects_;
}

// -------------------------------------------------------------------

// Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction

// string url = 1;
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::url() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url)
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url)
  return _s;
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::release_url() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url)
  return _impl_.url_.Release();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url)
}

// .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint url_type_hint = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::clear_url_type_hint() {
  _impl_.url_type_hint_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::_internal_url_type_hint() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint >(_impl_.url_type_hint_);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::url_type_hint() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url_type_hint)
  return _internal_url_type_hint();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::_internal_set_url_type_hint(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint value) {
  
  _impl_.url_type_hint_ = value;
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction::set_url_type_hint(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint value) {
  _internal_set_url_type_hint(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.url_type_hint)
}

// -------------------------------------------------------------------

// Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem

// .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction open_uri_action = 1;
inline bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_has_open_uri_action() const {
  return this != internal_default_instance() && _impl_.open_uri_action_ != nullptr;
}
inline bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::has_open_uri_action() const {
  return _internal_has_open_uri_action();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::clear_open_uri_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_uri_action_ != nullptr) {
    delete _impl_.open_uri_action_;
  }
  _impl_.open_uri_action_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_open_uri_action() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* p = _impl_.open_uri_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::open_uri_action() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.open_uri_action)
  return _internal_open_uri_action();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::unsafe_arena_set_allocated_open_uri_action(
    ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* open_uri_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_uri_action_);
  }
  _impl_.open_uri_action_ = open_uri_action;
  if (open_uri_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.open_uri_action)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::release_open_uri_action() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* temp = _impl_.open_uri_action_;
  _impl_.open_uri_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::unsafe_arena_release_open_uri_action() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.open_uri_action)
  
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* temp = _impl_.open_uri_action_;
  _impl_.open_uri_action_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_mutable_open_uri_action() {
  
  if (_impl_.open_uri_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction>(GetArenaForAllocation());
    _impl_.open_uri_action_ = p;
  }
  return _impl_.open_uri_action_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::mutable_open_uri_action() {
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* _msg = _internal_mutable_open_uri_action();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.open_uri_action)
  return _msg;
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_allocated_open_uri_action(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction* open_uri_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.open_uri_action_;
  }
  if (open_uri_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(open_uri_action);
    if (message_arena != submessage_arena) {
      open_uri_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_uri_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.open_uri_action_ = open_uri_action;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.open_uri_action)
}

// string title = 2;
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.title)
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.title)
  return _s;
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.title)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.description)
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.description)
  return _s;
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.description)
  return _impl_.description_.Release();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.description)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_image() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_Image&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.image)
  return _internal_image();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::unsafe_arena_set_allocated_image(
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::release_image() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.image)
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.image)
  return _msg;
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.image)
}

// string footer = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::clear_footer() {
  _impl_.footer_.ClearToEmpty();
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::footer() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.footer)
  return _internal_footer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_footer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.footer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.footer)
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::mutable_footer() {
  std::string* _s = _internal_mutable_footer();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.footer)
  return _s;
}
inline const std::string& Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_footer() const {
  return _impl_.footer_.Get();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_set_footer(const std::string& value) {
  
  _impl_.footer_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::_internal_mutable_footer() {
  
  return _impl_.footer_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::release_footer() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.footer)
  return _impl_.footer_.Release();
}
inline void Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem::set_allocated_footer(std::string* footer) {
  if (footer != nullptr) {
    
  } else {
    
  }
  _impl_.footer_.SetAllocated(footer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.footer_.IsDefault()) {
    _impl_.footer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.footer)
}

// -------------------------------------------------------------------

// Intent_Message_BrowseCarouselCard

// repeated .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem items = 1;
inline int Intent_Message_BrowseCarouselCard::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Intent_Message_BrowseCarouselCard::items_size() const {
  return _internal_items_size();
}
inline void Intent_Message_BrowseCarouselCard::clear_items() {
  _impl_.items_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* Intent_Message_BrowseCarouselCard::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem >*
Intent_Message_BrowseCarouselCard::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items)
  return &_impl_.items_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& Intent_Message_BrowseCarouselCard::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem& Intent_Message_BrowseCarouselCard::items(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items)
  return _internal_items(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* Intent_Message_BrowseCarouselCard::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* Intent_Message_BrowseCarouselCard::add_items() {
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem >&
Intent_Message_BrowseCarouselCard::items() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items)
  return _impl_.items_;
}

// .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.ImageDisplayOptions image_display_options = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_BrowseCarouselCard::clear_image_display_options() {
  _impl_.image_display_options_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions Intent_Message_BrowseCarouselCard::_internal_image_display_options() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions >(_impl_.image_display_options_);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions Intent_Message_BrowseCarouselCard::image_display_options() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.image_display_options)
  return _internal_image_display_options();
}
inline void Intent_Message_BrowseCarouselCard::_internal_set_image_display_options(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions value) {
  
  _impl_.image_display_options_ = value;
}
inline void Intent_Message_BrowseCarouselCard::set_image_display_options(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions value) {
  _internal_set_image_display_options(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.image_display_options)
}

// -------------------------------------------------------------------

// Intent_Message_TableCard

// string title = 1;
inline void Intent_Message_TableCard::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Intent_Message_TableCard::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_TableCard::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.TableCard.title)
}
inline std::string* Intent_Message_TableCard::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.title)
  return _s;
}
inline const std::string& Intent_Message_TableCard::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Intent_Message_TableCard::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCard::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCard::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.TableCard.title)
  return _impl_.title_.Release();
}
inline void Intent_Message_TableCard::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.TableCard.title)
}

// string subtitle = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_TableCard::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& Intent_Message_TableCard::subtitle() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_TableCard::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.TableCard.subtitle)
}
inline std::string* Intent_Message_TableCard::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.subtitle)
  return _s;
}
inline const std::string& Intent_Message_TableCard::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void Intent_Message_TableCard::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCard::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCard::release_subtitle() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.TableCard.subtitle)
  return _impl_.subtitle_.Release();
}
inline void Intent_Message_TableCard::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.TableCard.subtitle)
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool Intent_Message_TableCard::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Intent_Message_TableCard::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message_TableCard::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_TableCard::_internal_image() const {
  const ::google::cloud::dialogflow::v2::Intent_Message_Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent_Message_Image&>(
      ::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message_TableCard::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.image)
  return _internal_image();
}
inline void Intent_Message_TableCard::unsafe_arena_set_allocated_image(
    ::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.TableCard.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_TableCard::release_image() {
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_TableCard::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.TableCard.image)
  
  ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_TableCard::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent_Message_Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message_TableCard::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.image)
  return _msg;
}
inline void Intent_Message_TableCard::set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.TableCard.image)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.ColumnProperties column_properties = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_TableCard::_internal_column_properties_size() const {
  return _impl_.column_properties_.size();
}
inline int Intent_Message_TableCard::column_properties_size() const {
  return _internal_column_properties_size();
}
inline void Intent_Message_TableCard::clear_column_properties() {
  _impl_.column_properties_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* Intent_Message_TableCard::mutable_column_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.column_properties)
  return _impl_.column_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties >*
Intent_Message_TableCard::mutable_column_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.column_properties)
  return &_impl_.column_properties_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties& Intent_Message_TableCard::_internal_column_properties(int index) const {
  return _impl_.column_properties_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties& Intent_Message_TableCard::column_properties(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.column_properties)
  return _internal_column_properties(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* Intent_Message_TableCard::_internal_add_column_properties() {
  return _impl_.column_properties_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* Intent_Message_TableCard::add_column_properties() {
  ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties* _add = _internal_add_column_properties();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.TableCard.column_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties >&
Intent_Message_TableCard::column_properties() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.column_properties)
  return _impl_.column_properties_;
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.TableCardRow rows = 5 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_TableCard::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int Intent_Message_TableCard::rows_size() const {
  return _internal_rows_size();
}
inline void Intent_Message_TableCard::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* Intent_Message_TableCard::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow >*
Intent_Message_TableCard::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.rows)
  return &_impl_.rows_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow& Intent_Message_TableCard::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow& Intent_Message_TableCard::rows(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.rows)
  return _internal_rows(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* Intent_Message_TableCard::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* Intent_Message_TableCard::add_rows() {
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.TableCard.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardRow >&
Intent_Message_TableCard::rows() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.rows)
  return _impl_.rows_;
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button buttons = 6 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_TableCard::_internal_buttons_size() const {
  return _impl_.buttons_.size();
}
inline int Intent_Message_TableCard::buttons_size() const {
  return _internal_buttons_size();
}
inline void Intent_Message_TableCard::clear_buttons() {
  _impl_.buttons_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_TableCard::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCard.buttons)
  return _impl_.buttons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >*
Intent_Message_TableCard::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.buttons)
  return &_impl_.buttons_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& Intent_Message_TableCard::_internal_buttons(int index) const {
  return _impl_.buttons_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button& Intent_Message_TableCard::buttons(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCard.buttons)
  return _internal_buttons(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_TableCard::_internal_add_buttons() {
  return _impl_.buttons_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* Intent_Message_TableCard::add_buttons() {
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button* _add = _internal_add_buttons();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.TableCard.buttons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard_Button >&
Intent_Message_TableCard::buttons() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.TableCard.buttons)
  return _impl_.buttons_;
}

// -------------------------------------------------------------------

// Intent_Message_ColumnProperties

// string header = 1;
inline void Intent_Message_ColumnProperties::clear_header() {
  _impl_.header_.ClearToEmpty();
}
inline const std::string& Intent_Message_ColumnProperties::header() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_ColumnProperties::set_header(ArgT0&& arg0, ArgT... args) {
 
 _impl_.header_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.header)
}
inline std::string* Intent_Message_ColumnProperties::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.header)
  return _s;
}
inline const std::string& Intent_Message_ColumnProperties::_internal_header() const {
  return _impl_.header_.Get();
}
inline void Intent_Message_ColumnProperties::_internal_set_header(const std::string& value) {
  
  _impl_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_ColumnProperties::_internal_mutable_header() {
  
  return _impl_.header_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_ColumnProperties::release_header() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.header)
  return _impl_.header_.Release();
}
inline void Intent_Message_ColumnProperties::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  _impl_.header_.SetAllocated(header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.header_.IsDefault()) {
    _impl_.header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.header)
}

// .google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.HorizontalAlignment horizontal_alignment = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_ColumnProperties::clear_horizontal_alignment() {
  _impl_.horizontal_alignment_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment Intent_Message_ColumnProperties::_internal_horizontal_alignment() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment >(_impl_.horizontal_alignment_);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment Intent_Message_ColumnProperties::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void Intent_Message_ColumnProperties::_internal_set_horizontal_alignment(::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment value) {
  
  _impl_.horizontal_alignment_ = value;
}
inline void Intent_Message_ColumnProperties::set_horizontal_alignment(::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.horizontal_alignment)
}

// -------------------------------------------------------------------

// Intent_Message_TableCardRow

// repeated .google.cloud.dialogflow.v2.Intent.Message.TableCardCell cells = 1 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent_Message_TableCardRow::_internal_cells_size() const {
  return _impl_.cells_.size();
}
inline int Intent_Message_TableCardRow::cells_size() const {
  return _internal_cells_size();
}
inline void Intent_Message_TableCardRow::clear_cells() {
  _impl_.cells_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* Intent_Message_TableCardRow::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.cells)
  return _impl_.cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell >*
Intent_Message_TableCardRow::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.cells)
  return &_impl_.cells_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell& Intent_Message_TableCardRow::_internal_cells(int index) const {
  return _impl_.cells_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell& Intent_Message_TableCardRow::cells(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.cells)
  return _internal_cells(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* Intent_Message_TableCardRow::_internal_add_cells() {
  return _impl_.cells_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* Intent_Message_TableCardRow::add_cells() {
  ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message_TableCardCell >&
Intent_Message_TableCardRow::cells() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.cells)
  return _impl_.cells_;
}

// bool divider_after = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message_TableCardRow::clear_divider_after() {
  _impl_.divider_after_ = false;
}
inline bool Intent_Message_TableCardRow::_internal_divider_after() const {
  return _impl_.divider_after_;
}
inline bool Intent_Message_TableCardRow::divider_after() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.divider_after)
  return _internal_divider_after();
}
inline void Intent_Message_TableCardRow::_internal_set_divider_after(bool value) {
  
  _impl_.divider_after_ = value;
}
inline void Intent_Message_TableCardRow::set_divider_after(bool value) {
  _internal_set_divider_after(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.TableCardRow.divider_after)
}

// -------------------------------------------------------------------

// Intent_Message_TableCardCell

// string text = 1;
inline void Intent_Message_TableCardCell::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Intent_Message_TableCardCell::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.TableCardCell.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_Message_TableCardCell::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.TableCardCell.text)
}
inline std::string* Intent_Message_TableCardCell::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.TableCardCell.text)
  return _s;
}
inline const std::string& Intent_Message_TableCardCell::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Intent_Message_TableCardCell::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCardCell::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_Message_TableCardCell::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.TableCardCell.text)
  return _impl_.text_.Release();
}
inline void Intent_Message_TableCardCell::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.Message.TableCardCell.text)
}

// -------------------------------------------------------------------

// Intent_Message

// .google.cloud.dialogflow.v2.Intent.Message.Text text = 1;
inline bool Intent_Message::_internal_has_text() const {
  return message_case() == kText;
}
inline bool Intent_Message::has_text() const {
  return _internal_has_text();
}
inline void Intent_Message::set_has_text() {
  _impl_._oneof_case_[0] = kText;
}
inline void Intent_Message::clear_text() {
  if (_internal_has_text()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.text_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Text* Intent_Message::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.text)
  if (_internal_has_text()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Text* temp = _impl_.message_.text_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Text& Intent_Message::_internal_text() const {
  return _internal_has_text()
      ? *_impl_.message_.text_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Text&>(::google::cloud::dialogflow::v2::_Intent_Message_Text_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Text& Intent_Message::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.text)
  return _internal_text();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Text* Intent_Message::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.text)
  if (_internal_has_text()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Text* temp = _impl_.message_.text_;
    _impl_.message_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_text(::google::cloud::dialogflow::v2::Intent_Message_Text* text) {
  clear_message();
  if (text) {
    set_has_text();
    _impl_.message_.text_ = text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.text)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Text* Intent_Message::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_message();
    set_has_text();
    _impl_.message_.text_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Text >(GetArenaForAllocation());
  }
  return _impl_.message_.text_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Text* Intent_Message::mutable_text() {
  ::google::cloud::dialogflow::v2::Intent_Message_Text* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.text)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.Image image = 2;
inline bool Intent_Message::_internal_has_image() const {
  return message_case() == kImage;
}
inline bool Intent_Message::has_image() const {
  return _internal_has_image();
}
inline void Intent_Message::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void Intent_Message::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.image_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message::release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.image)
  if (_internal_has_image()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.message_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message::_internal_image() const {
  return _internal_has_image()
      ? *_impl_.message_.image_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Image&>(::google::cloud::dialogflow::v2::_Intent_Message_Image_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Image& Intent_Message::image() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.image)
  return _internal_image();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.image)
  if (_internal_has_image()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Image* temp = _impl_.message_.image_;
    _impl_.message_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_image(::google::cloud::dialogflow::v2::Intent_Message_Image* image) {
  clear_message();
  if (image) {
    set_has_image();
    _impl_.message_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.image)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_message();
    set_has_image();
    _impl_.message_.image_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Image >(GetArenaForAllocation());
  }
  return _impl_.message_.image_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Image* Intent_Message::mutable_image() {
  ::google::cloud::dialogflow::v2::Intent_Message_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.image)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.QuickReplies quick_replies = 3;
inline bool Intent_Message::_internal_has_quick_replies() const {
  return message_case() == kQuickReplies;
}
inline bool Intent_Message::has_quick_replies() const {
  return _internal_has_quick_replies();
}
inline void Intent_Message::set_has_quick_replies() {
  _impl_._oneof_case_[0] = kQuickReplies;
}
inline void Intent_Message::clear_quick_replies() {
  if (_internal_has_quick_replies()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.quick_replies_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* Intent_Message::release_quick_replies() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.quick_replies)
  if (_internal_has_quick_replies()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* temp = _impl_.message_.quick_replies_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.quick_replies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies& Intent_Message::_internal_quick_replies() const {
  return _internal_has_quick_replies()
      ? *_impl_.message_.quick_replies_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies&>(::google::cloud::dialogflow::v2::_Intent_Message_QuickReplies_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies& Intent_Message::quick_replies() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.quick_replies)
  return _internal_quick_replies();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* Intent_Message::unsafe_arena_release_quick_replies() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.quick_replies)
  if (_internal_has_quick_replies()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* temp = _impl_.message_.quick_replies_;
    _impl_.message_.quick_replies_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_quick_replies(::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* quick_replies) {
  clear_message();
  if (quick_replies) {
    set_has_quick_replies();
    _impl_.message_.quick_replies_ = quick_replies;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.quick_replies)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* Intent_Message::_internal_mutable_quick_replies() {
  if (!_internal_has_quick_replies()) {
    clear_message();
    set_has_quick_replies();
    _impl_.message_.quick_replies_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies >(GetArenaForAllocation());
  }
  return _impl_.message_.quick_replies_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* Intent_Message::mutable_quick_replies() {
  ::google::cloud::dialogflow::v2::Intent_Message_QuickReplies* _msg = _internal_mutable_quick_replies();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.quick_replies)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.Card card = 4;
inline bool Intent_Message::_internal_has_card() const {
  return message_case() == kCard;
}
inline bool Intent_Message::has_card() const {
  return _internal_has_card();
}
inline void Intent_Message::set_has_card() {
  _impl_._oneof_case_[0] = kCard;
}
inline void Intent_Message::clear_card() {
  if (_internal_has_card()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.card_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card* Intent_Message::release_card() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.card)
  if (_internal_has_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Card* temp = _impl_.message_.card_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Card& Intent_Message::_internal_card() const {
  return _internal_has_card()
      ? *_impl_.message_.card_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Card&>(::google::cloud::dialogflow::v2::_Intent_Message_Card_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Card& Intent_Message::card() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.card)
  return _internal_card();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card* Intent_Message::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.card)
  if (_internal_has_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Card* temp = _impl_.message_.card_;
    _impl_.message_.card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_card(::google::cloud::dialogflow::v2::Intent_Message_Card* card) {
  clear_message();
  if (card) {
    set_has_card();
    _impl_.message_.card_ = card;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.card)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card* Intent_Message::_internal_mutable_card() {
  if (!_internal_has_card()) {
    clear_message();
    set_has_card();
    _impl_.message_.card_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Card >(GetArenaForAllocation());
  }
  return _impl_.message_.card_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Card* Intent_Message::mutable_card() {
  ::google::cloud::dialogflow::v2::Intent_Message_Card* _msg = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.card)
  return _msg;
}

// .google.protobuf.Struct payload = 5;
inline bool Intent_Message::_internal_has_payload() const {
  return message_case() == kPayload;
}
inline bool Intent_Message::has_payload() const {
  return _internal_has_payload();
}
inline void Intent_Message::set_has_payload() {
  _impl_._oneof_case_[0] = kPayload;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Intent_Message::release_payload() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.payload)
  if (_internal_has_payload()) {
    clear_has_message();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.message_.payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Intent_Message::_internal_payload() const {
  return _internal_has_payload()
      ? *_impl_.message_.payload_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Struct&>(::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Intent_Message::payload() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.payload)
  return _internal_payload();
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Intent_Message::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.payload)
  if (_internal_has_payload()) {
    clear_has_message();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.message_.payload_;
    _impl_.message_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_payload(::PROTOBUF_NAMESPACE_ID::Struct* payload) {
  clear_message();
  if (payload) {
    set_has_payload();
    _impl_.message_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.payload)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Intent_Message::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_message();
    set_has_payload();
    _impl_.message_.payload_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Struct >(GetArenaForAllocation());
  }
  return _impl_.message_.payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Intent_Message::mutable_payload() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.payload)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.SimpleResponses simple_responses = 7;
inline bool Intent_Message::_internal_has_simple_responses() const {
  return message_case() == kSimpleResponses;
}
inline bool Intent_Message::has_simple_responses() const {
  return _internal_has_simple_responses();
}
inline void Intent_Message::set_has_simple_responses() {
  _impl_._oneof_case_[0] = kSimpleResponses;
}
inline void Intent_Message::clear_simple_responses() {
  if (_internal_has_simple_responses()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.simple_responses_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* Intent_Message::release_simple_responses() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.simple_responses)
  if (_internal_has_simple_responses()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* temp = _impl_.message_.simple_responses_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.simple_responses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses& Intent_Message::_internal_simple_responses() const {
  return _internal_has_simple_responses()
      ? *_impl_.message_.simple_responses_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses&>(::google::cloud::dialogflow::v2::_Intent_Message_SimpleResponses_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses& Intent_Message::simple_responses() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.simple_responses)
  return _internal_simple_responses();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* Intent_Message::unsafe_arena_release_simple_responses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.simple_responses)
  if (_internal_has_simple_responses()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* temp = _impl_.message_.simple_responses_;
    _impl_.message_.simple_responses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_simple_responses(::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* simple_responses) {
  clear_message();
  if (simple_responses) {
    set_has_simple_responses();
    _impl_.message_.simple_responses_ = simple_responses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.simple_responses)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* Intent_Message::_internal_mutable_simple_responses() {
  if (!_internal_has_simple_responses()) {
    clear_message();
    set_has_simple_responses();
    _impl_.message_.simple_responses_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses >(GetArenaForAllocation());
  }
  return _impl_.message_.simple_responses_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* Intent_Message::mutable_simple_responses() {
  ::google::cloud::dialogflow::v2::Intent_Message_SimpleResponses* _msg = _internal_mutable_simple_responses();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.simple_responses)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.BasicCard basic_card = 8;
inline bool Intent_Message::_internal_has_basic_card() const {
  return message_case() == kBasicCard;
}
inline bool Intent_Message::has_basic_card() const {
  return _internal_has_basic_card();
}
inline void Intent_Message::set_has_basic_card() {
  _impl_._oneof_case_[0] = kBasicCard;
}
inline void Intent_Message::clear_basic_card() {
  if (_internal_has_basic_card()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.basic_card_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* Intent_Message::release_basic_card() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.basic_card)
  if (_internal_has_basic_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* temp = _impl_.message_.basic_card_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.basic_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard& Intent_Message::_internal_basic_card() const {
  return _internal_has_basic_card()
      ? *_impl_.message_.basic_card_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard&>(::google::cloud::dialogflow::v2::_Intent_Message_BasicCard_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BasicCard& Intent_Message::basic_card() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.basic_card)
  return _internal_basic_card();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* Intent_Message::unsafe_arena_release_basic_card() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.basic_card)
  if (_internal_has_basic_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* temp = _impl_.message_.basic_card_;
    _impl_.message_.basic_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_basic_card(::google::cloud::dialogflow::v2::Intent_Message_BasicCard* basic_card) {
  clear_message();
  if (basic_card) {
    set_has_basic_card();
    _impl_.message_.basic_card_ = basic_card;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.basic_card)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* Intent_Message::_internal_mutable_basic_card() {
  if (!_internal_has_basic_card()) {
    clear_message();
    set_has_basic_card();
    _impl_.message_.basic_card_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_BasicCard >(GetArenaForAllocation());
  }
  return _impl_.message_.basic_card_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* Intent_Message::mutable_basic_card() {
  ::google::cloud::dialogflow::v2::Intent_Message_BasicCard* _msg = _internal_mutable_basic_card();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.basic_card)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.Suggestions suggestions = 9;
inline bool Intent_Message::_internal_has_suggestions() const {
  return message_case() == kSuggestions;
}
inline bool Intent_Message::has_suggestions() const {
  return _internal_has_suggestions();
}
inline void Intent_Message::set_has_suggestions() {
  _impl_._oneof_case_[0] = kSuggestions;
}
inline void Intent_Message::clear_suggestions() {
  if (_internal_has_suggestions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.suggestions_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* Intent_Message::release_suggestions() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.suggestions)
  if (_internal_has_suggestions()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* temp = _impl_.message_.suggestions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.suggestions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Suggestions& Intent_Message::_internal_suggestions() const {
  return _internal_has_suggestions()
      ? *_impl_.message_.suggestions_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_Suggestions&>(::google::cloud::dialogflow::v2::_Intent_Message_Suggestions_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_Suggestions& Intent_Message::suggestions() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.suggestions)
  return _internal_suggestions();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* Intent_Message::unsafe_arena_release_suggestions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.suggestions)
  if (_internal_has_suggestions()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* temp = _impl_.message_.suggestions_;
    _impl_.message_.suggestions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_suggestions(::google::cloud::dialogflow::v2::Intent_Message_Suggestions* suggestions) {
  clear_message();
  if (suggestions) {
    set_has_suggestions();
    _impl_.message_.suggestions_ = suggestions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.suggestions)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* Intent_Message::_internal_mutable_suggestions() {
  if (!_internal_has_suggestions()) {
    clear_message();
    set_has_suggestions();
    _impl_.message_.suggestions_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_Suggestions >(GetArenaForAllocation());
  }
  return _impl_.message_.suggestions_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* Intent_Message::mutable_suggestions() {
  ::google::cloud::dialogflow::v2::Intent_Message_Suggestions* _msg = _internal_mutable_suggestions();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.suggestions)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion link_out_suggestion = 10;
inline bool Intent_Message::_internal_has_link_out_suggestion() const {
  return message_case() == kLinkOutSuggestion;
}
inline bool Intent_Message::has_link_out_suggestion() const {
  return _internal_has_link_out_suggestion();
}
inline void Intent_Message::set_has_link_out_suggestion() {
  _impl_._oneof_case_[0] = kLinkOutSuggestion;
}
inline void Intent_Message::clear_link_out_suggestion() {
  if (_internal_has_link_out_suggestion()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.link_out_suggestion_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* Intent_Message::release_link_out_suggestion() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.link_out_suggestion)
  if (_internal_has_link_out_suggestion()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* temp = _impl_.message_.link_out_suggestion_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.link_out_suggestion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion& Intent_Message::_internal_link_out_suggestion() const {
  return _internal_has_link_out_suggestion()
      ? *_impl_.message_.link_out_suggestion_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion&>(::google::cloud::dialogflow::v2::_Intent_Message_LinkOutSuggestion_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion& Intent_Message::link_out_suggestion() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.link_out_suggestion)
  return _internal_link_out_suggestion();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* Intent_Message::unsafe_arena_release_link_out_suggestion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.link_out_suggestion)
  if (_internal_has_link_out_suggestion()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* temp = _impl_.message_.link_out_suggestion_;
    _impl_.message_.link_out_suggestion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_link_out_suggestion(::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* link_out_suggestion) {
  clear_message();
  if (link_out_suggestion) {
    set_has_link_out_suggestion();
    _impl_.message_.link_out_suggestion_ = link_out_suggestion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.link_out_suggestion)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* Intent_Message::_internal_mutable_link_out_suggestion() {
  if (!_internal_has_link_out_suggestion()) {
    clear_message();
    set_has_link_out_suggestion();
    _impl_.message_.link_out_suggestion_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion >(GetArenaForAllocation());
  }
  return _impl_.message_.link_out_suggestion_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* Intent_Message::mutable_link_out_suggestion() {
  ::google::cloud::dialogflow::v2::Intent_Message_LinkOutSuggestion* _msg = _internal_mutable_link_out_suggestion();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.link_out_suggestion)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.ListSelect list_select = 11;
inline bool Intent_Message::_internal_has_list_select() const {
  return message_case() == kListSelect;
}
inline bool Intent_Message::has_list_select() const {
  return _internal_has_list_select();
}
inline void Intent_Message::set_has_list_select() {
  _impl_._oneof_case_[0] = kListSelect;
}
inline void Intent_Message::clear_list_select() {
  if (_internal_has_list_select()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.list_select_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* Intent_Message::release_list_select() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.list_select)
  if (_internal_has_list_select()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* temp = _impl_.message_.list_select_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.list_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect& Intent_Message::_internal_list_select() const {
  return _internal_has_list_select()
      ? *_impl_.message_.list_select_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect&>(::google::cloud::dialogflow::v2::_Intent_Message_ListSelect_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_ListSelect& Intent_Message::list_select() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.list_select)
  return _internal_list_select();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* Intent_Message::unsafe_arena_release_list_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.list_select)
  if (_internal_has_list_select()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* temp = _impl_.message_.list_select_;
    _impl_.message_.list_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_list_select(::google::cloud::dialogflow::v2::Intent_Message_ListSelect* list_select) {
  clear_message();
  if (list_select) {
    set_has_list_select();
    _impl_.message_.list_select_ = list_select;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.list_select)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* Intent_Message::_internal_mutable_list_select() {
  if (!_internal_has_list_select()) {
    clear_message();
    set_has_list_select();
    _impl_.message_.list_select_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_ListSelect >(GetArenaForAllocation());
  }
  return _impl_.message_.list_select_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* Intent_Message::mutable_list_select() {
  ::google::cloud::dialogflow::v2::Intent_Message_ListSelect* _msg = _internal_mutable_list_select();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.list_select)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.CarouselSelect carousel_select = 12;
inline bool Intent_Message::_internal_has_carousel_select() const {
  return message_case() == kCarouselSelect;
}
inline bool Intent_Message::has_carousel_select() const {
  return _internal_has_carousel_select();
}
inline void Intent_Message::set_has_carousel_select() {
  _impl_._oneof_case_[0] = kCarouselSelect;
}
inline void Intent_Message::clear_carousel_select() {
  if (_internal_has_carousel_select()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.carousel_select_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* Intent_Message::release_carousel_select() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.carousel_select)
  if (_internal_has_carousel_select()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* temp = _impl_.message_.carousel_select_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.carousel_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect& Intent_Message::_internal_carousel_select() const {
  return _internal_has_carousel_select()
      ? *_impl_.message_.carousel_select_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect&>(::google::cloud::dialogflow::v2::_Intent_Message_CarouselSelect_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect& Intent_Message::carousel_select() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.carousel_select)
  return _internal_carousel_select();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* Intent_Message::unsafe_arena_release_carousel_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.carousel_select)
  if (_internal_has_carousel_select()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* temp = _impl_.message_.carousel_select_;
    _impl_.message_.carousel_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_carousel_select(::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* carousel_select) {
  clear_message();
  if (carousel_select) {
    set_has_carousel_select();
    _impl_.message_.carousel_select_ = carousel_select;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.carousel_select)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* Intent_Message::_internal_mutable_carousel_select() {
  if (!_internal_has_carousel_select()) {
    clear_message();
    set_has_carousel_select();
    _impl_.message_.carousel_select_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect >(GetArenaForAllocation());
  }
  return _impl_.message_.carousel_select_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* Intent_Message::mutable_carousel_select() {
  ::google::cloud::dialogflow::v2::Intent_Message_CarouselSelect* _msg = _internal_mutable_carousel_select();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.carousel_select)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard browse_carousel_card = 22;
inline bool Intent_Message::_internal_has_browse_carousel_card() const {
  return message_case() == kBrowseCarouselCard;
}
inline bool Intent_Message::has_browse_carousel_card() const {
  return _internal_has_browse_carousel_card();
}
inline void Intent_Message::set_has_browse_carousel_card() {
  _impl_._oneof_case_[0] = kBrowseCarouselCard;
}
inline void Intent_Message::clear_browse_carousel_card() {
  if (_internal_has_browse_carousel_card()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.browse_carousel_card_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* Intent_Message::release_browse_carousel_card() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.browse_carousel_card)
  if (_internal_has_browse_carousel_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* temp = _impl_.message_.browse_carousel_card_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.browse_carousel_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard& Intent_Message::_internal_browse_carousel_card() const {
  return _internal_has_browse_carousel_card()
      ? *_impl_.message_.browse_carousel_card_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard&>(::google::cloud::dialogflow::v2::_Intent_Message_BrowseCarouselCard_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard& Intent_Message::browse_carousel_card() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.browse_carousel_card)
  return _internal_browse_carousel_card();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* Intent_Message::unsafe_arena_release_browse_carousel_card() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.browse_carousel_card)
  if (_internal_has_browse_carousel_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* temp = _impl_.message_.browse_carousel_card_;
    _impl_.message_.browse_carousel_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_browse_carousel_card(::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* browse_carousel_card) {
  clear_message();
  if (browse_carousel_card) {
    set_has_browse_carousel_card();
    _impl_.message_.browse_carousel_card_ = browse_carousel_card;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.browse_carousel_card)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* Intent_Message::_internal_mutable_browse_carousel_card() {
  if (!_internal_has_browse_carousel_card()) {
    clear_message();
    set_has_browse_carousel_card();
    _impl_.message_.browse_carousel_card_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard >(GetArenaForAllocation());
  }
  return _impl_.message_.browse_carousel_card_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* Intent_Message::mutable_browse_carousel_card() {
  ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard* _msg = _internal_mutable_browse_carousel_card();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.browse_carousel_card)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.TableCard table_card = 23;
inline bool Intent_Message::_internal_has_table_card() const {
  return message_case() == kTableCard;
}
inline bool Intent_Message::has_table_card() const {
  return _internal_has_table_card();
}
inline void Intent_Message::set_has_table_card() {
  _impl_._oneof_case_[0] = kTableCard;
}
inline void Intent_Message::clear_table_card() {
  if (_internal_has_table_card()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.table_card_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCard* Intent_Message::release_table_card() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.table_card)
  if (_internal_has_table_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_TableCard* temp = _impl_.message_.table_card_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.table_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCard& Intent_Message::_internal_table_card() const {
  return _internal_has_table_card()
      ? *_impl_.message_.table_card_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_TableCard&>(::google::cloud::dialogflow::v2::_Intent_Message_TableCard_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_TableCard& Intent_Message::table_card() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.table_card)
  return _internal_table_card();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCard* Intent_Message::unsafe_arena_release_table_card() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.table_card)
  if (_internal_has_table_card()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_TableCard* temp = _impl_.message_.table_card_;
    _impl_.message_.table_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_table_card(::google::cloud::dialogflow::v2::Intent_Message_TableCard* table_card) {
  clear_message();
  if (table_card) {
    set_has_table_card();
    _impl_.message_.table_card_ = table_card;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.table_card)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCard* Intent_Message::_internal_mutable_table_card() {
  if (!_internal_has_table_card()) {
    clear_message();
    set_has_table_card();
    _impl_.message_.table_card_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_TableCard >(GetArenaForAllocation());
  }
  return _impl_.message_.table_card_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_TableCard* Intent_Message::mutable_table_card() {
  ::google::cloud::dialogflow::v2::Intent_Message_TableCard* _msg = _internal_mutable_table_card();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.table_card)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.MediaContent media_content = 24;
inline bool Intent_Message::_internal_has_media_content() const {
  return message_case() == kMediaContent;
}
inline bool Intent_Message::has_media_content() const {
  return _internal_has_media_content();
}
inline void Intent_Message::set_has_media_content() {
  _impl_._oneof_case_[0] = kMediaContent;
}
inline void Intent_Message::clear_media_content() {
  if (_internal_has_media_content()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.media_content_;
    }
    clear_has_message();
  }
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* Intent_Message::release_media_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.Message.media_content)
  if (_internal_has_media_content()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* temp = _impl_.message_.media_content_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.media_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent& Intent_Message::_internal_media_content() const {
  return _internal_has_media_content()
      ? *_impl_.message_.media_content_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent&>(::google::cloud::dialogflow::v2::_Intent_Message_MediaContent_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message_MediaContent& Intent_Message::media_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.media_content)
  return _internal_media_content();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* Intent_Message::unsafe_arena_release_media_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Intent.Message.media_content)
  if (_internal_has_media_content()) {
    clear_has_message();
    ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* temp = _impl_.message_.media_content_;
    _impl_.message_.media_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intent_Message::unsafe_arena_set_allocated_media_content(::google::cloud::dialogflow::v2::Intent_Message_MediaContent* media_content) {
  clear_message();
  if (media_content) {
    set_has_media_content();
    _impl_.message_.media_content_ = media_content;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Intent.Message.media_content)
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* Intent_Message::_internal_mutable_media_content() {
  if (!_internal_has_media_content()) {
    clear_message();
    set_has_media_content();
    _impl_.message_.media_content_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent >(GetArenaForAllocation());
  }
  return _impl_.message_.media_content_;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* Intent_Message::mutable_media_content() {
  ::google::cloud::dialogflow::v2::Intent_Message_MediaContent* _msg = _internal_mutable_media_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.Message.media_content)
  return _msg;
}

// .google.cloud.dialogflow.v2.Intent.Message.Platform platform = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent_Message::clear_platform() {
  _impl_.platform_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Platform Intent_Message::_internal_platform() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_Platform >(_impl_.platform_);
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Platform Intent_Message::platform() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.Message.platform)
  return _internal_platform();
}
inline void Intent_Message::_internal_set_platform(::google::cloud::dialogflow::v2::Intent_Message_Platform value) {
  
  _impl_.platform_ = value;
}
inline void Intent_Message::set_platform(::google::cloud::dialogflow::v2::Intent_Message_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.Message.platform)
}

inline bool Intent_Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Intent_Message::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Intent_Message::MessageCase Intent_Message::message_case() const {
  return Intent_Message::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Intent_FollowupIntentInfo

// string followup_intent_name = 1;
inline void Intent_FollowupIntentInfo::clear_followup_intent_name() {
  _impl_.followup_intent_name_.ClearToEmpty();
}
inline const std::string& Intent_FollowupIntentInfo::followup_intent_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.followup_intent_name)
  return _internal_followup_intent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_FollowupIntentInfo::set_followup_intent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.followup_intent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.followup_intent_name)
}
inline std::string* Intent_FollowupIntentInfo::mutable_followup_intent_name() {
  std::string* _s = _internal_mutable_followup_intent_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.followup_intent_name)
  return _s;
}
inline const std::string& Intent_FollowupIntentInfo::_internal_followup_intent_name() const {
  return _impl_.followup_intent_name_.Get();
}
inline void Intent_FollowupIntentInfo::_internal_set_followup_intent_name(const std::string& value) {
  
  _impl_.followup_intent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_FollowupIntentInfo::_internal_mutable_followup_intent_name() {
  
  return _impl_.followup_intent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_FollowupIntentInfo::release_followup_intent_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.followup_intent_name)
  return _impl_.followup_intent_name_.Release();
}
inline void Intent_FollowupIntentInfo::set_allocated_followup_intent_name(std::string* followup_intent_name) {
  if (followup_intent_name != nullptr) {
    
  } else {
    
  }
  _impl_.followup_intent_name_.SetAllocated(followup_intent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.followup_intent_name_.IsDefault()) {
    _impl_.followup_intent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.followup_intent_name)
}

// string parent_followup_intent_name = 2;
inline void Intent_FollowupIntentInfo::clear_parent_followup_intent_name() {
  _impl_.parent_followup_intent_name_.ClearToEmpty();
}
inline const std::string& Intent_FollowupIntentInfo::parent_followup_intent_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.parent_followup_intent_name)
  return _internal_parent_followup_intent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent_FollowupIntentInfo::set_parent_followup_intent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_followup_intent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.parent_followup_intent_name)
}
inline std::string* Intent_FollowupIntentInfo::mutable_parent_followup_intent_name() {
  std::string* _s = _internal_mutable_parent_followup_intent_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.parent_followup_intent_name)
  return _s;
}
inline const std::string& Intent_FollowupIntentInfo::_internal_parent_followup_intent_name() const {
  return _impl_.parent_followup_intent_name_.Get();
}
inline void Intent_FollowupIntentInfo::_internal_set_parent_followup_intent_name(const std::string& value) {
  
  _impl_.parent_followup_intent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent_FollowupIntentInfo::_internal_mutable_parent_followup_intent_name() {
  
  return _impl_.parent_followup_intent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent_FollowupIntentInfo::release_parent_followup_intent_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.parent_followup_intent_name)
  return _impl_.parent_followup_intent_name_.Release();
}
inline void Intent_FollowupIntentInfo::set_allocated_parent_followup_intent_name(std::string* parent_followup_intent_name) {
  if (parent_followup_intent_name != nullptr) {
    
  } else {
    
  }
  _impl_.parent_followup_intent_name_.SetAllocated(parent_followup_intent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_followup_intent_name_.IsDefault()) {
    _impl_.parent_followup_intent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.FollowupIntentInfo.parent_followup_intent_name)
}

// -------------------------------------------------------------------

// Intent

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Intent::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.name)
}
inline std::string* Intent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.name)
  return _s;
}
inline const std::string& Intent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Intent::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.name)
  return _impl_.name_.Release();
}
inline void Intent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Intent::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Intent::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.display_name)
}
inline std::string* Intent::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.display_name)
  return _s;
}
inline const std::string& Intent::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Intent::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.display_name)
  return _impl_.display_name_.Release();
}
inline void Intent::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.display_name)
}

// .google.cloud.dialogflow.v2.Intent.WebhookState webhook_state = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_webhook_state() {
  _impl_.webhook_state_ = 0;
}
inline ::google::cloud::dialogflow::v2::Intent_WebhookState Intent::_internal_webhook_state() const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_WebhookState >(_impl_.webhook_state_);
}
inline ::google::cloud::dialogflow::v2::Intent_WebhookState Intent::webhook_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.webhook_state)
  return _internal_webhook_state();
}
inline void Intent::_internal_set_webhook_state(::google::cloud::dialogflow::v2::Intent_WebhookState value) {
  
  _impl_.webhook_state_ = value;
}
inline void Intent::set_webhook_state(::google::cloud::dialogflow::v2::Intent_WebhookState value) {
  _internal_set_webhook_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.webhook_state)
}

// int32 priority = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t Intent::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t Intent::priority() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.priority)
  return _internal_priority();
}
inline void Intent::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void Intent::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.priority)
}

// bool is_fallback = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_is_fallback() {
  _impl_.is_fallback_ = false;
}
inline bool Intent::_internal_is_fallback() const {
  return _impl_.is_fallback_;
}
inline bool Intent::is_fallback() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.is_fallback)
  return _internal_is_fallback();
}
inline void Intent::_internal_set_is_fallback(bool value) {
  
  _impl_.is_fallback_ = value;
}
inline void Intent::set_is_fallback(bool value) {
  _internal_set_is_fallback(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.is_fallback)
}

// bool ml_disabled = 19 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_ml_disabled() {
  _impl_.ml_disabled_ = false;
}
inline bool Intent::_internal_ml_disabled() const {
  return _impl_.ml_disabled_;
}
inline bool Intent::ml_disabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.ml_disabled)
  return _internal_ml_disabled();
}
inline void Intent::_internal_set_ml_disabled(bool value) {
  
  _impl_.ml_disabled_ = value;
}
inline void Intent::set_ml_disabled(bool value) {
  _internal_set_ml_disabled(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.ml_disabled)
}

// bool live_agent_handoff = 20 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_live_agent_handoff() {
  _impl_.live_agent_handoff_ = false;
}
inline bool Intent::_internal_live_agent_handoff() const {
  return _impl_.live_agent_handoff_;
}
inline bool Intent::live_agent_handoff() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.live_agent_handoff)
  return _internal_live_agent_handoff();
}
inline void Intent::_internal_set_live_agent_handoff(bool value) {
  
  _impl_.live_agent_handoff_ = value;
}
inline void Intent::set_live_agent_handoff(bool value) {
  _internal_set_live_agent_handoff(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.live_agent_handoff)
}

// bool end_interaction = 21 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_end_interaction() {
  _impl_.end_interaction_ = false;
}
inline bool Intent::_internal_end_interaction() const {
  return _impl_.end_interaction_;
}
inline bool Intent::end_interaction() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.end_interaction)
  return _internal_end_interaction();
}
inline void Intent::_internal_set_end_interaction(bool value) {
  
  _impl_.end_interaction_ = value;
}
inline void Intent::set_end_interaction(bool value) {
  _internal_set_end_interaction(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.end_interaction)
}

// repeated string input_context_names = 7 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_input_context_names_size() const {
  return _impl_.input_context_names_.size();
}
inline int Intent::input_context_names_size() const {
  return _internal_input_context_names_size();
}
inline void Intent::clear_input_context_names() {
  _impl_.input_context_names_.Clear();
}
inline std::string* Intent::add_input_context_names() {
  std::string* _s = _internal_add_input_context_names();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.input_context_names)
  return _s;
}
inline const std::string& Intent::_internal_input_context_names(int index) const {
  return _impl_.input_context_names_.Get(index);
}
inline const std::string& Intent::input_context_names(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.input_context_names)
  return _internal_input_context_names(index);
}
inline std::string* Intent::mutable_input_context_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.input_context_names)
  return _impl_.input_context_names_.Mutable(index);
}
inline void Intent::set_input_context_names(int index, const std::string& value) {
  _impl_.input_context_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::set_input_context_names(int index, std::string&& value) {
  _impl_.input_context_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::set_input_context_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_context_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::set_input_context_names(int index, const char* value, size_t size) {
  _impl_.input_context_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline std::string* Intent::_internal_add_input_context_names() {
  return _impl_.input_context_names_.Add();
}
inline void Intent::add_input_context_names(const std::string& value) {
  _impl_.input_context_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::add_input_context_names(std::string&& value) {
  _impl_.input_context_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::add_input_context_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_context_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline void Intent::add_input_context_names(const char* value, size_t size) {
  _impl_.input_context_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.input_context_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent::input_context_names() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.input_context_names)
  return _impl_.input_context_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent::mutable_input_context_names() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.input_context_names)
  return &_impl_.input_context_names_;
}

// repeated string events = 8 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int Intent::events_size() const {
  return _internal_events_size();
}
inline void Intent::clear_events() {
  _impl_.events_.Clear();
}
inline std::string* Intent::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.Intent.events)
  return _s;
}
inline const std::string& Intent::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const std::string& Intent::events(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.events)
  return _internal_events(index);
}
inline std::string* Intent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.events)
  return _impl_.events_.Mutable(index);
}
inline void Intent::set_events(int index, const std::string& value) {
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::set_events(int index, std::string&& value) {
  _impl_.events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::set_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::set_events(int index, const char* value, size_t size) {
  _impl_.events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Intent.events)
}
inline std::string* Intent::_internal_add_events() {
  return _impl_.events_.Add();
}
inline void Intent::add_events(const std::string& value) {
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::add_events(std::string&& value) {
  _impl_.events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::add_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.Intent.events)
}
inline void Intent::add_events(const char* value, size_t size) {
  _impl_.events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.Intent.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Intent::events() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.events)
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Intent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.events)
  return &_impl_.events_;
}

// repeated .google.cloud.dialogflow.v2.Intent.TrainingPhrase training_phrases = 9 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_training_phrases_size() const {
  return _impl_.training_phrases_.size();
}
inline int Intent::training_phrases_size() const {
  return _internal_training_phrases_size();
}
inline void Intent::clear_training_phrases() {
  _impl_.training_phrases_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* Intent::mutable_training_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.training_phrases)
  return _impl_.training_phrases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase >*
Intent::mutable_training_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.training_phrases)
  return &_impl_.training_phrases_;
}
inline const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase& Intent::_internal_training_phrases(int index) const {
  return _impl_.training_phrases_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_TrainingPhrase& Intent::training_phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.training_phrases)
  return _internal_training_phrases(index);
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* Intent::_internal_add_training_phrases() {
  return _impl_.training_phrases_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* Intent::add_training_phrases() {
  ::google::cloud::dialogflow::v2::Intent_TrainingPhrase* _add = _internal_add_training_phrases();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.training_phrases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase >&
Intent::training_phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.training_phrases)
  return _impl_.training_phrases_;
}

// string action = 10 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& Intent::action() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.action)
}
inline std::string* Intent::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.action)
  return _s;
}
inline const std::string& Intent::_internal_action() const {
  return _impl_.action_.Get();
}
inline void Intent::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent::release_action() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.action)
  return _impl_.action_.Release();
}
inline void Intent::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.action)
}

// repeated .google.cloud.dialogflow.v2.Context output_contexts = 11 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_output_contexts_size() const {
  return _impl_.output_contexts_.size();
}
inline int Intent::output_contexts_size() const {
  return _internal_output_contexts_size();
}
inline ::google::cloud::dialogflow::v2::Context* Intent::mutable_output_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.output_contexts)
  return _impl_.output_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
Intent::mutable_output_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.output_contexts)
  return &_impl_.output_contexts_;
}
inline const ::google::cloud::dialogflow::v2::Context& Intent::_internal_output_contexts(int index) const {
  return _impl_.output_contexts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Context& Intent::output_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.output_contexts)
  return _internal_output_contexts(index);
}
inline ::google::cloud::dialogflow::v2::Context* Intent::_internal_add_output_contexts() {
  return _impl_.output_contexts_.Add();
}
inline ::google::cloud::dialogflow::v2::Context* Intent::add_output_contexts() {
  ::google::cloud::dialogflow::v2::Context* _add = _internal_add_output_contexts();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.output_contexts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
Intent::output_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.output_contexts)
  return _impl_.output_contexts_;
}

// bool reset_contexts = 12 [(.google.api.field_behavior) = OPTIONAL];
inline void Intent::clear_reset_contexts() {
  _impl_.reset_contexts_ = false;
}
inline bool Intent::_internal_reset_contexts() const {
  return _impl_.reset_contexts_;
}
inline bool Intent::reset_contexts() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.reset_contexts)
  return _internal_reset_contexts();
}
inline void Intent::_internal_set_reset_contexts(bool value) {
  
  _impl_.reset_contexts_ = value;
}
inline void Intent::set_reset_contexts(bool value) {
  _internal_set_reset_contexts(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.reset_contexts)
}

// repeated .google.cloud.dialogflow.v2.Intent.Parameter parameters = 13 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int Intent::parameters_size() const {
  return _internal_parameters_size();
}
inline void Intent::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Parameter* Intent::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Parameter >*
Intent::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.parameters)
  return &_impl_.parameters_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Parameter& Intent::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Parameter& Intent::parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.parameters)
  return _internal_parameters(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Parameter* Intent::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Parameter* Intent::add_parameters() {
  ::google::cloud::dialogflow::v2::Intent_Parameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Parameter >&
Intent::parameters() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.parameters)
  return _impl_.parameters_;
}

// repeated .google.cloud.dialogflow.v2.Intent.Message messages = 14 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int Intent::messages_size() const {
  return _internal_messages_size();
}
inline void Intent::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message* Intent::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >*
Intent::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.messages)
  return &_impl_.messages_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message& Intent::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message& Intent::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.messages)
  return _internal_messages(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message* Intent::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message* Intent::add_messages() {
  ::google::cloud::dialogflow::v2::Intent_Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >&
Intent::messages() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.messages)
  return _impl_.messages_;
}

// repeated .google.cloud.dialogflow.v2.Intent.Message.Platform default_response_platforms = 15 [(.google.api.field_behavior) = OPTIONAL];
inline int Intent::_internal_default_response_platforms_size() const {
  return _impl_.default_response_platforms_.size();
}
inline int Intent::default_response_platforms_size() const {
  return _internal_default_response_platforms_size();
}
inline void Intent::clear_default_response_platforms() {
  _impl_.default_response_platforms_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Platform Intent::_internal_default_response_platforms(int index) const {
  return static_cast< ::google::cloud::dialogflow::v2::Intent_Message_Platform >(_impl_.default_response_platforms_.Get(index));
}
inline ::google::cloud::dialogflow::v2::Intent_Message_Platform Intent::default_response_platforms(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.default_response_platforms)
  return _internal_default_response_platforms(index);
}
inline void Intent::set_default_response_platforms(int index, ::google::cloud::dialogflow::v2::Intent_Message_Platform value) {
  _impl_.default_response_platforms_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.default_response_platforms)
}
inline void Intent::_internal_add_default_response_platforms(::google::cloud::dialogflow::v2::Intent_Message_Platform value) {
  _impl_.default_response_platforms_.Add(value);
}
inline void Intent::add_default_response_platforms(::google::cloud::dialogflow::v2::Intent_Message_Platform value) {
  _internal_add_default_response_platforms(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.default_response_platforms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Intent::default_response_platforms() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.default_response_platforms)
  return _impl_.default_response_platforms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Intent::_internal_mutable_default_response_platforms() {
  return &_impl_.default_response_platforms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Intent::mutable_default_response_platforms() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.default_response_platforms)
  return _internal_mutable_default_response_platforms();
}

// string root_followup_intent_name = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Intent::clear_root_followup_intent_name() {
  _impl_.root_followup_intent_name_.ClearToEmpty();
}
inline const std::string& Intent::root_followup_intent_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.root_followup_intent_name)
  return _internal_root_followup_intent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent::set_root_followup_intent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_followup_intent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.root_followup_intent_name)
}
inline std::string* Intent::mutable_root_followup_intent_name() {
  std::string* _s = _internal_mutable_root_followup_intent_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.root_followup_intent_name)
  return _s;
}
inline const std::string& Intent::_internal_root_followup_intent_name() const {
  return _impl_.root_followup_intent_name_.Get();
}
inline void Intent::_internal_set_root_followup_intent_name(const std::string& value) {
  
  _impl_.root_followup_intent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_root_followup_intent_name() {
  
  return _impl_.root_followup_intent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent::release_root_followup_intent_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.root_followup_intent_name)
  return _impl_.root_followup_intent_name_.Release();
}
inline void Intent::set_allocated_root_followup_intent_name(std::string* root_followup_intent_name) {
  if (root_followup_intent_name != nullptr) {
    
  } else {
    
  }
  _impl_.root_followup_intent_name_.SetAllocated(root_followup_intent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_followup_intent_name_.IsDefault()) {
    _impl_.root_followup_intent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.root_followup_intent_name)
}

// string parent_followup_intent_name = 17;
inline void Intent::clear_parent_followup_intent_name() {
  _impl_.parent_followup_intent_name_.ClearToEmpty();
}
inline const std::string& Intent::parent_followup_intent_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.parent_followup_intent_name)
  return _internal_parent_followup_intent_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Intent::set_parent_followup_intent_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_followup_intent_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Intent.parent_followup_intent_name)
}
inline std::string* Intent::mutable_parent_followup_intent_name() {
  std::string* _s = _internal_mutable_parent_followup_intent_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.parent_followup_intent_name)
  return _s;
}
inline const std::string& Intent::_internal_parent_followup_intent_name() const {
  return _impl_.parent_followup_intent_name_.Get();
}
inline void Intent::_internal_set_parent_followup_intent_name(const std::string& value) {
  
  _impl_.parent_followup_intent_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Intent::_internal_mutable_parent_followup_intent_name() {
  
  return _impl_.parent_followup_intent_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Intent::release_parent_followup_intent_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Intent.parent_followup_intent_name)
  return _impl_.parent_followup_intent_name_.Release();
}
inline void Intent::set_allocated_parent_followup_intent_name(std::string* parent_followup_intent_name) {
  if (parent_followup_intent_name != nullptr) {
    
  } else {
    
  }
  _impl_.parent_followup_intent_name_.SetAllocated(parent_followup_intent_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_followup_intent_name_.IsDefault()) {
    _impl_.parent_followup_intent_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Intent.parent_followup_intent_name)
}

// repeated .google.cloud.dialogflow.v2.Intent.FollowupIntentInfo followup_intent_info = 18 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int Intent::_internal_followup_intent_info_size() const {
  return _impl_.followup_intent_info_.size();
}
inline int Intent::followup_intent_info_size() const {
  return _internal_followup_intent_info_size();
}
inline void Intent::clear_followup_intent_info() {
  _impl_.followup_intent_info_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* Intent::mutable_followup_intent_info(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Intent.followup_intent_info)
  return _impl_.followup_intent_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo >*
Intent::mutable_followup_intent_info() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Intent.followup_intent_info)
  return &_impl_.followup_intent_info_;
}
inline const ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo& Intent::_internal_followup_intent_info(int index) const {
  return _impl_.followup_intent_info_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo& Intent::followup_intent_info(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Intent.followup_intent_info)
  return _internal_followup_intent_info(index);
}
inline ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* Intent::_internal_add_followup_intent_info() {
  return _impl_.followup_intent_info_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* Intent::add_followup_intent_info() {
  ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo* _add = _internal_add_followup_intent_info();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Intent.followup_intent_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_FollowupIntentInfo >&
Intent::followup_intent_info() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Intent.followup_intent_info)
  return _impl_.followup_intent_info_;
}

// -------------------------------------------------------------------

// ListIntentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListIntentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListIntentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIntentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsRequest.parent)
}
inline std::string* ListIntentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListIntentsRequest.parent)
  return _s;
}
inline const std::string& ListIntentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListIntentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListIntentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListIntentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListIntentsRequest.parent)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListIntentsRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& ListIntentsRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIntentsRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsRequest.language_code)
}
inline std::string* ListIntentsRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListIntentsRequest.language_code)
  return _s;
}
inline const std::string& ListIntentsRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void ListIntentsRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListIntentsRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void ListIntentsRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListIntentsRequest.language_code)
}

// .google.cloud.dialogflow.v2.IntentView intent_view = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListIntentsRequest::clear_intent_view() {
  _impl_.intent_view_ = 0;
}
inline ::google::cloud::dialogflow::v2::IntentView ListIntentsRequest::_internal_intent_view() const {
  return static_cast< ::google::cloud::dialogflow::v2::IntentView >(_impl_.intent_view_);
}
inline ::google::cloud::dialogflow::v2::IntentView ListIntentsRequest::intent_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsRequest.intent_view)
  return _internal_intent_view();
}
inline void ListIntentsRequest::_internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  
  _impl_.intent_view_ = value;
}
inline void ListIntentsRequest::set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  _internal_set_intent_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsRequest.intent_view)
}

// int32 page_size = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListIntentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListIntentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListIntentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsRequest.page_size)
  return _internal_page_size();
}
inline void ListIntentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListIntentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsRequest.page_size)
}

// string page_token = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void ListIntentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListIntentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIntentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsRequest.page_token)
}
inline std::string* ListIntentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListIntentsRequest.page_token)
  return _s;
}
inline const std::string& ListIntentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListIntentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListIntentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListIntentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListIntentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListIntentsRequest.page_token)
}

// -------------------------------------------------------------------

// ListIntentsResponse

// repeated .google.cloud.dialogflow.v2.Intent intents = 1;
inline int ListIntentsResponse::_internal_intents_size() const {
  return _impl_.intents_.size();
}
inline int ListIntentsResponse::intents_size() const {
  return _internal_intents_size();
}
inline void ListIntentsResponse::clear_intents() {
  _impl_.intents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent* ListIntentsResponse::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListIntentsResponse.intents)
  return _impl_.intents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
ListIntentsResponse::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListIntentsResponse.intents)
  return &_impl_.intents_;
}
inline const ::google::cloud::dialogflow::v2::Intent& ListIntentsResponse::_internal_intents(int index) const {
  return _impl_.intents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent& ListIntentsResponse::intents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsResponse.intents)
  return _internal_intents(index);
}
inline ::google::cloud::dialogflow::v2::Intent* ListIntentsResponse::_internal_add_intents() {
  return _impl_.intents_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent* ListIntentsResponse::add_intents() {
  ::google::cloud::dialogflow::v2::Intent* _add = _internal_add_intents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListIntentsResponse.intents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
ListIntentsResponse::intents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListIntentsResponse.intents)
  return _impl_.intents_;
}

// string next_page_token = 2;
inline void ListIntentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListIntentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListIntentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIntentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListIntentsResponse.next_page_token)
}
inline std::string* ListIntentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListIntentsResponse.next_page_token)
  return _s;
}
inline const std::string& ListIntentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListIntentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListIntentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListIntentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListIntentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListIntentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListIntentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetIntentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetIntentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetIntentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetIntentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIntentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetIntentRequest.name)
}
inline std::string* GetIntentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetIntentRequest.name)
  return _s;
}
inline const std::string& GetIntentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetIntentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIntentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIntentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetIntentRequest.name)
  return _impl_.name_.Release();
}
inline void GetIntentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetIntentRequest.name)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void GetIntentRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& GetIntentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetIntentRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIntentRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetIntentRequest.language_code)
}
inline std::string* GetIntentRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetIntentRequest.language_code)
  return _s;
}
inline const std::string& GetIntentRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void GetIntentRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIntentRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIntentRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetIntentRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void GetIntentRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetIntentRequest.language_code)
}

// .google.cloud.dialogflow.v2.IntentView intent_view = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void GetIntentRequest::clear_intent_view() {
  _impl_.intent_view_ = 0;
}
inline ::google::cloud::dialogflow::v2::IntentView GetIntentRequest::_internal_intent_view() const {
  return static_cast< ::google::cloud::dialogflow::v2::IntentView >(_impl_.intent_view_);
}
inline ::google::cloud::dialogflow::v2::IntentView GetIntentRequest::intent_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetIntentRequest.intent_view)
  return _internal_intent_view();
}
inline void GetIntentRequest::_internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  
  _impl_.intent_view_ = value;
}
inline void GetIntentRequest::set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  _internal_set_intent_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetIntentRequest.intent_view)
}

// -------------------------------------------------------------------

// CreateIntentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateIntentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateIntentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateIntentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIntentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateIntentRequest.parent)
}
inline std::string* CreateIntentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateIntentRequest.parent)
  return _s;
}
inline const std::string& CreateIntentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateIntentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIntentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIntentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateIntentRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateIntentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateIntentRequest.parent)
}

// .google.cloud.dialogflow.v2.Intent intent = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateIntentRequest::_internal_has_intent() const {
  return this != internal_default_instance() && _impl_.intent_ != nullptr;
}
inline bool CreateIntentRequest::has_intent() const {
  return _internal_has_intent();
}
inline void CreateIntentRequest::clear_intent() {
  if (GetArenaForAllocation() == nullptr && _impl_.intent_ != nullptr) {
    delete _impl_.intent_;
  }
  _impl_.intent_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent& CreateIntentRequest::_internal_intent() const {
  const ::google::cloud::dialogflow::v2::Intent* p = _impl_.intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent&>(
      ::google::cloud::dialogflow::v2::_Intent_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent& CreateIntentRequest::intent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateIntentRequest.intent)
  return _internal_intent();
}
inline void CreateIntentRequest::unsafe_arena_set_allocated_intent(
    ::google::cloud::dialogflow::v2::Intent* intent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intent_);
  }
  _impl_.intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateIntentRequest.intent)
}
inline ::google::cloud::dialogflow::v2::Intent* CreateIntentRequest::release_intent() {
  
  ::google::cloud::dialogflow::v2::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* CreateIntentRequest::unsafe_arena_release_intent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateIntentRequest.intent)
  
  ::google::cloud::dialogflow::v2::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* CreateIntentRequest::_internal_mutable_intent() {
  
  if (_impl_.intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent>(GetArenaForAllocation());
    _impl_.intent_ = p;
  }
  return _impl_.intent_;
}
inline ::google::cloud::dialogflow::v2::Intent* CreateIntentRequest::mutable_intent() {
  ::google::cloud::dialogflow::v2::Intent* _msg = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateIntentRequest.intent)
  return _msg;
}
inline void CreateIntentRequest::set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intent_;
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intent);
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateIntentRequest.intent)
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateIntentRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& CreateIntentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateIntentRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIntentRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateIntentRequest.language_code)
}
inline std::string* CreateIntentRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateIntentRequest.language_code)
  return _s;
}
inline const std::string& CreateIntentRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void CreateIntentRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIntentRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateIntentRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateIntentRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void CreateIntentRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateIntentRequest.language_code)
}

// .google.cloud.dialogflow.v2.IntentView intent_view = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateIntentRequest::clear_intent_view() {
  _impl_.intent_view_ = 0;
}
inline ::google::cloud::dialogflow::v2::IntentView CreateIntentRequest::_internal_intent_view() const {
  return static_cast< ::google::cloud::dialogflow::v2::IntentView >(_impl_.intent_view_);
}
inline ::google::cloud::dialogflow::v2::IntentView CreateIntentRequest::intent_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateIntentRequest.intent_view)
  return _internal_intent_view();
}
inline void CreateIntentRequest::_internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  
  _impl_.intent_view_ = value;
}
inline void CreateIntentRequest::set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  _internal_set_intent_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateIntentRequest.intent_view)
}

// -------------------------------------------------------------------

// UpdateIntentRequest

// .google.cloud.dialogflow.v2.Intent intent = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateIntentRequest::_internal_has_intent() const {
  return this != internal_default_instance() && _impl_.intent_ != nullptr;
}
inline bool UpdateIntentRequest::has_intent() const {
  return _internal_has_intent();
}
inline void UpdateIntentRequest::clear_intent() {
  if (GetArenaForAllocation() == nullptr && _impl_.intent_ != nullptr) {
    delete _impl_.intent_;
  }
  _impl_.intent_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Intent& UpdateIntentRequest::_internal_intent() const {
  const ::google::cloud::dialogflow::v2::Intent* p = _impl_.intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent&>(
      ::google::cloud::dialogflow::v2::_Intent_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent& UpdateIntentRequest::intent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateIntentRequest.intent)
  return _internal_intent();
}
inline void UpdateIntentRequest::unsafe_arena_set_allocated_intent(
    ::google::cloud::dialogflow::v2::Intent* intent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intent_);
  }
  _impl_.intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateIntentRequest.intent)
}
inline ::google::cloud::dialogflow::v2::Intent* UpdateIntentRequest::release_intent() {
  
  ::google::cloud::dialogflow::v2::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* UpdateIntentRequest::unsafe_arena_release_intent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateIntentRequest.intent)
  
  ::google::cloud::dialogflow::v2::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* UpdateIntentRequest::_internal_mutable_intent() {
  
  if (_impl_.intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent>(GetArenaForAllocation());
    _impl_.intent_ = p;
  }
  return _impl_.intent_;
}
inline ::google::cloud::dialogflow::v2::Intent* UpdateIntentRequest::mutable_intent() {
  ::google::cloud::dialogflow::v2::Intent* _msg = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateIntentRequest.intent)
  return _msg;
}
inline void UpdateIntentRequest::set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intent_;
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intent);
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateIntentRequest.intent)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateIntentRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& UpdateIntentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateIntentRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateIntentRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.UpdateIntentRequest.language_code)
}
inline std::string* UpdateIntentRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateIntentRequest.language_code)
  return _s;
}
inline const std::string& UpdateIntentRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void UpdateIntentRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateIntentRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateIntentRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateIntentRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void UpdateIntentRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateIntentRequest.language_code)
}

// .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateIntentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateIntentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateIntentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateIntentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateIntentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateIntentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateIntentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateIntentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateIntentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateIntentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateIntentRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateIntentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateIntentRequest.update_mask)
  return _msg;
}
inline void UpdateIntentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateIntentRequest.update_mask)
}

// .google.cloud.dialogflow.v2.IntentView intent_view = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateIntentRequest::clear_intent_view() {
  _impl_.intent_view_ = 0;
}
inline ::google::cloud::dialogflow::v2::IntentView UpdateIntentRequest::_internal_intent_view() const {
  return static_cast< ::google::cloud::dialogflow::v2::IntentView >(_impl_.intent_view_);
}
inline ::google::cloud::dialogflow::v2::IntentView UpdateIntentRequest::intent_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateIntentRequest.intent_view)
  return _internal_intent_view();
}
inline void UpdateIntentRequest::_internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  
  _impl_.intent_view_ = value;
}
inline void UpdateIntentRequest::set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  _internal_set_intent_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.UpdateIntentRequest.intent_view)
}

// -------------------------------------------------------------------

// DeleteIntentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteIntentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteIntentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteIntentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteIntentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteIntentRequest.name)
}
inline std::string* DeleteIntentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteIntentRequest.name)
  return _s;
}
inline const std::string& DeleteIntentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteIntentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteIntentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteIntentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteIntentRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteIntentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteIntentRequest.name)
}

// -------------------------------------------------------------------

// BatchUpdateIntentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchUpdateIntentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchUpdateIntentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateIntentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.parent)
}
inline std::string* BatchUpdateIntentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.parent)
  return _s;
}
inline const std::string& BatchUpdateIntentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchUpdateIntentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchUpdateIntentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.parent)
}

// string intent_batch_uri = 2;
inline bool BatchUpdateIntentsRequest::_internal_has_intent_batch_uri() const {
  return intent_batch_case() == kIntentBatchUri;
}
inline bool BatchUpdateIntentsRequest::has_intent_batch_uri() const {
  return _internal_has_intent_batch_uri();
}
inline void BatchUpdateIntentsRequest::set_has_intent_batch_uri() {
  _impl_._oneof_case_[0] = kIntentBatchUri;
}
inline void BatchUpdateIntentsRequest::clear_intent_batch_uri() {
  if (_internal_has_intent_batch_uri()) {
    _impl_.intent_batch_.intent_batch_uri_.Destroy();
    clear_has_intent_batch();
  }
}
inline const std::string& BatchUpdateIntentsRequest::intent_batch_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_uri)
  return _internal_intent_batch_uri();
}
template <typename ArgT0, typename... ArgT>
inline void BatchUpdateIntentsRequest::set_intent_batch_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_intent_batch_uri()) {
    clear_intent_batch();
    set_has_intent_batch_uri();
    _impl_.intent_batch_.intent_batch_uri_.InitDefault();
  }
  _impl_.intent_batch_.intent_batch_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_uri)
}
inline std::string* BatchUpdateIntentsRequest::mutable_intent_batch_uri() {
  std::string* _s = _internal_mutable_intent_batch_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_uri)
  return _s;
}
inline const std::string& BatchUpdateIntentsRequest::_internal_intent_batch_uri() const {
  if (_internal_has_intent_batch_uri()) {
    return _impl_.intent_batch_.intent_batch_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BatchUpdateIntentsRequest::_internal_set_intent_batch_uri(const std::string& value) {
  if (!_internal_has_intent_batch_uri()) {
    clear_intent_batch();
    set_has_intent_batch_uri();
    _impl_.intent_batch_.intent_batch_uri_.InitDefault();
  }
  _impl_.intent_batch_.intent_batch_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::_internal_mutable_intent_batch_uri() {
  if (!_internal_has_intent_batch_uri()) {
    clear_intent_batch();
    set_has_intent_batch_uri();
    _impl_.intent_batch_.intent_batch_uri_.InitDefault();
  }
  return _impl_.intent_batch_.intent_batch_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::release_intent_batch_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_uri)
  if (_internal_has_intent_batch_uri()) {
    clear_has_intent_batch();
    return _impl_.intent_batch_.intent_batch_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void BatchUpdateIntentsRequest::set_allocated_intent_batch_uri(std::string* intent_batch_uri) {
  if (has_intent_batch()) {
    clear_intent_batch();
  }
  if (intent_batch_uri != nullptr) {
    set_has_intent_batch_uri();
    _impl_.intent_batch_.intent_batch_uri_.InitAllocated(intent_batch_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_uri)
}

// .google.cloud.dialogflow.v2.IntentBatch intent_batch_inline = 3;
inline bool BatchUpdateIntentsRequest::_internal_has_intent_batch_inline() const {
  return intent_batch_case() == kIntentBatchInline;
}
inline bool BatchUpdateIntentsRequest::has_intent_batch_inline() const {
  return _internal_has_intent_batch_inline();
}
inline void BatchUpdateIntentsRequest::set_has_intent_batch_inline() {
  _impl_._oneof_case_[0] = kIntentBatchInline;
}
inline void BatchUpdateIntentsRequest::clear_intent_batch_inline() {
  if (_internal_has_intent_batch_inline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.intent_batch_.intent_batch_inline_;
    }
    clear_has_intent_batch();
  }
}
inline ::google::cloud::dialogflow::v2::IntentBatch* BatchUpdateIntentsRequest::release_intent_batch_inline() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_inline)
  if (_internal_has_intent_batch_inline()) {
    clear_has_intent_batch();
    ::google::cloud::dialogflow::v2::IntentBatch* temp = _impl_.intent_batch_.intent_batch_inline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intent_batch_.intent_batch_inline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::IntentBatch& BatchUpdateIntentsRequest::_internal_intent_batch_inline() const {
  return _internal_has_intent_batch_inline()
      ? *_impl_.intent_batch_.intent_batch_inline_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::IntentBatch&>(::google::cloud::dialogflow::v2::_IntentBatch_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::IntentBatch& BatchUpdateIntentsRequest::intent_batch_inline() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_inline)
  return _internal_intent_batch_inline();
}
inline ::google::cloud::dialogflow::v2::IntentBatch* BatchUpdateIntentsRequest::unsafe_arena_release_intent_batch_inline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_inline)
  if (_internal_has_intent_batch_inline()) {
    clear_has_intent_batch();
    ::google::cloud::dialogflow::v2::IntentBatch* temp = _impl_.intent_batch_.intent_batch_inline_;
    _impl_.intent_batch_.intent_batch_inline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchUpdateIntentsRequest::unsafe_arena_set_allocated_intent_batch_inline(::google::cloud::dialogflow::v2::IntentBatch* intent_batch_inline) {
  clear_intent_batch();
  if (intent_batch_inline) {
    set_has_intent_batch_inline();
    _impl_.intent_batch_.intent_batch_inline_ = intent_batch_inline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_inline)
}
inline ::google::cloud::dialogflow::v2::IntentBatch* BatchUpdateIntentsRequest::_internal_mutable_intent_batch_inline() {
  if (!_internal_has_intent_batch_inline()) {
    clear_intent_batch();
    set_has_intent_batch_inline();
    _impl_.intent_batch_.intent_batch_inline_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::IntentBatch >(GetArenaForAllocation());
  }
  return _impl_.intent_batch_.intent_batch_inline_;
}
inline ::google::cloud::dialogflow::v2::IntentBatch* BatchUpdateIntentsRequest::mutable_intent_batch_inline() {
  ::google::cloud::dialogflow::v2::IntentBatch* _msg = _internal_mutable_intent_batch_inline();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_batch_inline)
  return _msg;
}

// string language_code = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchUpdateIntentsRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& BatchUpdateIntentsRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateIntentsRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.language_code)
}
inline std::string* BatchUpdateIntentsRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.language_code)
  return _s;
}
inline const std::string& BatchUpdateIntentsRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void BatchUpdateIntentsRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateIntentsRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void BatchUpdateIntentsRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.language_code)
}

// .google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = OPTIONAL];
inline bool BatchUpdateIntentsRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool BatchUpdateIntentsRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateIntentsRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateIntentsRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.update_mask)
  return _internal_update_mask();
}
inline void BatchUpdateIntentsRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateIntentsRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateIntentsRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateIntentsRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateIntentsRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.update_mask)
  return _msg;
}
inline void BatchUpdateIntentsRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.update_mask)
}

// .google.cloud.dialogflow.v2.IntentView intent_view = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchUpdateIntentsRequest::clear_intent_view() {
  _impl_.intent_view_ = 0;
}
inline ::google::cloud::dialogflow::v2::IntentView BatchUpdateIntentsRequest::_internal_intent_view() const {
  return static_cast< ::google::cloud::dialogflow::v2::IntentView >(_impl_.intent_view_);
}
inline ::google::cloud::dialogflow::v2::IntentView BatchUpdateIntentsRequest::intent_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_view)
  return _internal_intent_view();
}
inline void BatchUpdateIntentsRequest::_internal_set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  
  _impl_.intent_view_ = value;
}
inline void BatchUpdateIntentsRequest::set_intent_view(::google::cloud::dialogflow::v2::IntentView value) {
  _internal_set_intent_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateIntentsRequest.intent_view)
}

inline bool BatchUpdateIntentsRequest::has_intent_batch() const {
  return intent_batch_case() != INTENT_BATCH_NOT_SET;
}
inline void BatchUpdateIntentsRequest::clear_has_intent_batch() {
  _impl_._oneof_case_[0] = INTENT_BATCH_NOT_SET;
}
inline BatchUpdateIntentsRequest::IntentBatchCase BatchUpdateIntentsRequest::intent_batch_case() const {
  return BatchUpdateIntentsRequest::IntentBatchCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchUpdateIntentsResponse

// repeated .google.cloud.dialogflow.v2.Intent intents = 1;
inline int BatchUpdateIntentsResponse::_internal_intents_size() const {
  return _impl_.intents_.size();
}
inline int BatchUpdateIntentsResponse::intents_size() const {
  return _internal_intents_size();
}
inline void BatchUpdateIntentsResponse::clear_intents() {
  _impl_.intents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent* BatchUpdateIntentsResponse::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse.intents)
  return _impl_.intents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
BatchUpdateIntentsResponse::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse.intents)
  return &_impl_.intents_;
}
inline const ::google::cloud::dialogflow::v2::Intent& BatchUpdateIntentsResponse::_internal_intents(int index) const {
  return _impl_.intents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent& BatchUpdateIntentsResponse::intents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse.intents)
  return _internal_intents(index);
}
inline ::google::cloud::dialogflow::v2::Intent* BatchUpdateIntentsResponse::_internal_add_intents() {
  return _impl_.intents_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent* BatchUpdateIntentsResponse::add_intents() {
  ::google::cloud::dialogflow::v2::Intent* _add = _internal_add_intents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse.intents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
BatchUpdateIntentsResponse::intents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchUpdateIntentsResponse.intents)
  return _impl_.intents_;
}

// -------------------------------------------------------------------

// BatchDeleteIntentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchDeleteIntentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchDeleteIntentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchDeleteIntentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.parent)
}
inline std::string* BatchDeleteIntentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.parent)
  return _s;
}
inline const std::string& BatchDeleteIntentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchDeleteIntentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchDeleteIntentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchDeleteIntentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchDeleteIntentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.parent)
}

// repeated .google.cloud.dialogflow.v2.Intent intents = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchDeleteIntentsRequest::_internal_intents_size() const {
  return _impl_.intents_.size();
}
inline int BatchDeleteIntentsRequest::intents_size() const {
  return _internal_intents_size();
}
inline void BatchDeleteIntentsRequest::clear_intents() {
  _impl_.intents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent* BatchDeleteIntentsRequest::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.intents)
  return _impl_.intents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
BatchDeleteIntentsRequest::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.intents)
  return &_impl_.intents_;
}
inline const ::google::cloud::dialogflow::v2::Intent& BatchDeleteIntentsRequest::_internal_intents(int index) const {
  return _impl_.intents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent& BatchDeleteIntentsRequest::intents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.intents)
  return _internal_intents(index);
}
inline ::google::cloud::dialogflow::v2::Intent* BatchDeleteIntentsRequest::_internal_add_intents() {
  return _impl_.intents_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent* BatchDeleteIntentsRequest::add_intents() {
  ::google::cloud::dialogflow::v2::Intent* _add = _internal_add_intents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.intents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
BatchDeleteIntentsRequest::intents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchDeleteIntentsRequest.intents)
  return _impl_.intents_;
}

// -------------------------------------------------------------------

// IntentBatch

// repeated .google.cloud.dialogflow.v2.Intent intents = 1;
inline int IntentBatch::_internal_intents_size() const {
  return _impl_.intents_.size();
}
inline int IntentBatch::intents_size() const {
  return _internal_intents_size();
}
inline void IntentBatch::clear_intents() {
  _impl_.intents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Intent* IntentBatch::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.IntentBatch.intents)
  return _impl_.intents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >*
IntentBatch::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.IntentBatch.intents)
  return &_impl_.intents_;
}
inline const ::google::cloud::dialogflow::v2::Intent& IntentBatch::_internal_intents(int index) const {
  return _impl_.intents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent& IntentBatch::intents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.IntentBatch.intents)
  return _internal_intents(index);
}
inline ::google::cloud::dialogflow::v2::Intent* IntentBatch::_internal_add_intents() {
  return _impl_.intents_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent* IntentBatch::add_intents() {
  ::google::cloud::dialogflow::v2::Intent* _add = _internal_add_intents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.IntentBatch.intents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent >&
IntentBatch::intents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.IntentBatch.intents)
  return _impl_.intents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type>() {
  return ::google::cloud::dialogflow::v2::Intent_TrainingPhrase_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType>() {
  return ::google::cloud::dialogflow::v2::Intent_Message_MediaContent_ResponseMediaType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint>() {
  return ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_BrowseCarouselCardItem_OpenUrlAction_UrlTypeHint_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions>() {
  return ::google::cloud::dialogflow::v2::Intent_Message_BrowseCarouselCard_ImageDisplayOptions_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment>() {
  return ::google::cloud::dialogflow::v2::Intent_Message_ColumnProperties_HorizontalAlignment_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_Message_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_Message_Platform>() {
  return ::google::cloud::dialogflow::v2::Intent_Message_Platform_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Intent_WebhookState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Intent_WebhookState>() {
  return ::google::cloud::dialogflow::v2::Intent_WebhookState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::IntentView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::IntentView>() {
  return ::google::cloud::dialogflow::v2::IntentView_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fintent_2eproto
