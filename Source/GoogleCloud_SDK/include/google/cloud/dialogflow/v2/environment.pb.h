// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/audio_config.pb.h"
#include "google/cloud/dialogflow/v2/fulfillment.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class CreateEnvironmentRequest;
struct CreateEnvironmentRequestDefaultTypeInternal;
extern CreateEnvironmentRequestDefaultTypeInternal _CreateEnvironmentRequest_default_instance_;
class DeleteEnvironmentRequest;
struct DeleteEnvironmentRequestDefaultTypeInternal;
extern DeleteEnvironmentRequestDefaultTypeInternal _DeleteEnvironmentRequest_default_instance_;
class Environment;
struct EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class EnvironmentHistory;
struct EnvironmentHistoryDefaultTypeInternal;
extern EnvironmentHistoryDefaultTypeInternal _EnvironmentHistory_default_instance_;
class EnvironmentHistory_Entry;
struct EnvironmentHistory_EntryDefaultTypeInternal;
extern EnvironmentHistory_EntryDefaultTypeInternal _EnvironmentHistory_Entry_default_instance_;
class GetEnvironmentHistoryRequest;
struct GetEnvironmentHistoryRequestDefaultTypeInternal;
extern GetEnvironmentHistoryRequestDefaultTypeInternal _GetEnvironmentHistoryRequest_default_instance_;
class GetEnvironmentRequest;
struct GetEnvironmentRequestDefaultTypeInternal;
extern GetEnvironmentRequestDefaultTypeInternal _GetEnvironmentRequest_default_instance_;
class ListEnvironmentsRequest;
struct ListEnvironmentsRequestDefaultTypeInternal;
extern ListEnvironmentsRequestDefaultTypeInternal _ListEnvironmentsRequest_default_instance_;
class ListEnvironmentsResponse;
struct ListEnvironmentsResponseDefaultTypeInternal;
extern ListEnvironmentsResponseDefaultTypeInternal _ListEnvironmentsResponse_default_instance_;
class TextToSpeechSettings;
struct TextToSpeechSettingsDefaultTypeInternal;
extern TextToSpeechSettingsDefaultTypeInternal _TextToSpeechSettings_default_instance_;
class TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse;
struct TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUseDefaultTypeInternal;
extern TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUseDefaultTypeInternal _TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse_default_instance_;
class UpdateEnvironmentRequest;
struct UpdateEnvironmentRequestDefaultTypeInternal;
extern UpdateEnvironmentRequestDefaultTypeInternal _UpdateEnvironmentRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::CreateEnvironmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateEnvironmentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteEnvironmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteEnvironmentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::Environment* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Environment>(Arena*);
template<> ::google::cloud::dialogflow::v2::EnvironmentHistory* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EnvironmentHistory>(Arena*);
template<> ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EnvironmentHistory_Entry>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetEnvironmentHistoryRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetEnvironmentHistoryRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetEnvironmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetEnvironmentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListEnvironmentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListEnvironmentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListEnvironmentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListEnvironmentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::TextToSpeechSettings* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::TextToSpeechSettings>(Arena*);
template<> ::google::cloud::dialogflow::v2::TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateEnvironmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateEnvironmentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Environment_State : int {
  Environment_State_STATE_UNSPECIFIED = 0,
  Environment_State_STOPPED = 1,
  Environment_State_LOADING = 2,
  Environment_State_RUNNING = 3,
  Environment_State_Environment_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Environment_State_Environment_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Environment_State_IsValid(int value);
constexpr Environment_State Environment_State_State_MIN = Environment_State_STATE_UNSPECIFIED;
constexpr Environment_State Environment_State_State_MAX = Environment_State_RUNNING;
constexpr int Environment_State_State_ARRAYSIZE = Environment_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Environment_State_descriptor();
template<typename T>
inline const std::string& Environment_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Environment_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Environment_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Environment_State_descriptor(), enum_t_value);
}
inline bool Environment_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Environment_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Environment_State>(
    Environment_State_descriptor(), name, value);
}
// ===================================================================

class Environment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {}
  ~Environment() override;
  explicit PROTOBUF_CONSTEXPR Environment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Environment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Environment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Environment& from) {
    Environment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Environment_State State;
  static constexpr State STATE_UNSPECIFIED =
    Environment_State_STATE_UNSPECIFIED;
  static constexpr State STOPPED =
    Environment_State_STOPPED;
  static constexpr State LOADING =
    Environment_State_LOADING;
  static constexpr State RUNNING =
    Environment_State_RUNNING;
  static inline bool State_IsValid(int value) {
    return Environment_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Environment_State_State_MIN;
  static constexpr State State_MAX =
    Environment_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Environment_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Environment_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Environment_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Environment_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kAgentVersionFieldNumber = 3,
    kUpdateTimeFieldNumber = 5,
    kTextToSpeechSettingsFieldNumber = 7,
    kFulfillmentFieldNumber = 8,
    kStateFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string agent_version = 3 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_agent_version();
  const std::string& agent_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_version();
  PROTOBUF_NODISCARD std::string* release_agent_version();
  void set_allocated_agent_version(std::string* agent_version);
  private:
  const std::string& _internal_agent_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_version(const std::string& value);
  std::string* _internal_mutable_agent_version();
  public:

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.cloud.dialogflow.v2.TextToSpeechSettings text_to_speech_settings = 7 [(.google.api.field_behavior) = OPTIONAL];
  bool has_text_to_speech_settings() const;
  private:
  bool _internal_has_text_to_speech_settings() const;
  public:
  void clear_text_to_speech_settings();
  const ::google::cloud::dialogflow::v2::TextToSpeechSettings& text_to_speech_settings() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::TextToSpeechSettings* release_text_to_speech_settings();
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* mutable_text_to_speech_settings();
  void set_allocated_text_to_speech_settings(::google::cloud::dialogflow::v2::TextToSpeechSettings* text_to_speech_settings);
  private:
  const ::google::cloud::dialogflow::v2::TextToSpeechSettings& _internal_text_to_speech_settings() const;
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* _internal_mutable_text_to_speech_settings();
  public:
  void unsafe_arena_set_allocated_text_to_speech_settings(
      ::google::cloud::dialogflow::v2::TextToSpeechSettings* text_to_speech_settings);
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* unsafe_arena_release_text_to_speech_settings();

  // .google.cloud.dialogflow.v2.Fulfillment fulfillment = 8 [(.google.api.field_behavior) = OPTIONAL];
  bool has_fulfillment() const;
  private:
  bool _internal_has_fulfillment() const;
  public:
  void clear_fulfillment();
  const ::google::cloud::dialogflow::v2::Fulfillment& fulfillment() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Fulfillment* release_fulfillment();
  ::google::cloud::dialogflow::v2::Fulfillment* mutable_fulfillment();
  void set_allocated_fulfillment(::google::cloud::dialogflow::v2::Fulfillment* fulfillment);
  private:
  const ::google::cloud::dialogflow::v2::Fulfillment& _internal_fulfillment() const;
  ::google::cloud::dialogflow::v2::Fulfillment* _internal_mutable_fulfillment();
  public:
  void unsafe_arena_set_allocated_fulfillment(
      ::google::cloud::dialogflow::v2::Fulfillment* fulfillment);
  ::google::cloud::dialogflow::v2::Fulfillment* unsafe_arena_release_fulfillment();

  // .google.cloud.dialogflow.v2.Environment.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::dialogflow::v2::Environment_State state() const;
  void set_state(::google::cloud::dialogflow::v2::Environment_State value);
  private:
  ::google::cloud::dialogflow::v2::Environment_State _internal_state() const;
  void _internal_set_state(::google::cloud::dialogflow::v2::Environment_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::google::cloud::dialogflow::v2::TextToSpeechSettings* text_to_speech_settings_;
    ::google::cloud::dialogflow::v2::Fulfillment* fulfillment_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse, 
    std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse, 
    std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse& other);
  static const TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse*>(&_TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.TextToSpeechSettings.SynthesizeSpeechConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};

// -------------------------------------------------------------------

class TextToSpeechSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.TextToSpeechSettings) */ {
 public:
  inline TextToSpeechSettings() : TextToSpeechSettings(nullptr) {}
  ~TextToSpeechSettings() override;
  explicit PROTOBUF_CONSTEXPR TextToSpeechSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextToSpeechSettings(const TextToSpeechSettings& from);
  TextToSpeechSettings(TextToSpeechSettings&& from) noexcept
    : TextToSpeechSettings() {
    *this = ::std::move(from);
  }

  inline TextToSpeechSettings& operator=(const TextToSpeechSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextToSpeechSettings& operator=(TextToSpeechSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextToSpeechSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextToSpeechSettings* internal_default_instance() {
    return reinterpret_cast<const TextToSpeechSettings*>(
               &_TextToSpeechSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextToSpeechSettings& a, TextToSpeechSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TextToSpeechSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextToSpeechSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextToSpeechSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextToSpeechSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextToSpeechSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextToSpeechSettings& from) {
    TextToSpeechSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextToSpeechSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.TextToSpeechSettings";
  }
  protected:
  explicit TextToSpeechSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSynthesizeSpeechConfigsFieldNumber = 4,
    kEnableTextToSpeechFieldNumber = 1,
    kOutputAudioEncodingFieldNumber = 2,
    kSampleRateHertzFieldNumber = 3,
  };
  // map<string, .google.cloud.dialogflow.v2.SynthesizeSpeechConfig> synthesize_speech_configs = 4 [(.google.api.field_behavior) = OPTIONAL];
  int synthesize_speech_configs_size() const;
  private:
  int _internal_synthesize_speech_configs_size() const;
  public:
  void clear_synthesize_speech_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >&
      _internal_synthesize_speech_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >*
      _internal_mutable_synthesize_speech_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >&
      synthesize_speech_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >*
      mutable_synthesize_speech_configs();

  // bool enable_text_to_speech = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enable_text_to_speech();
  bool enable_text_to_speech() const;
  void set_enable_text_to_speech(bool value);
  private:
  bool _internal_enable_text_to_speech() const;
  void _internal_set_enable_text_to_speech(bool value);
  public:

  // .google.cloud.dialogflow.v2.OutputAudioEncoding output_audio_encoding = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_output_audio_encoding();
  ::google::cloud::dialogflow::v2::OutputAudioEncoding output_audio_encoding() const;
  void set_output_audio_encoding(::google::cloud::dialogflow::v2::OutputAudioEncoding value);
  private:
  ::google::cloud::dialogflow::v2::OutputAudioEncoding _internal_output_audio_encoding() const;
  void _internal_set_output_audio_encoding(::google::cloud::dialogflow::v2::OutputAudioEncoding value);
  public:

  // int32 sample_rate_hertz = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_sample_rate_hertz();
  int32_t sample_rate_hertz() const;
  void set_sample_rate_hertz(int32_t value);
  private:
  int32_t _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.TextToSpeechSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TextToSpeechSettings_SynthesizeSpeechConfigsEntry_DoNotUse,
        std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> synthesize_speech_configs_;
    bool enable_text_to_speech_;
    int output_audio_encoding_;
    int32_t sample_rate_hertz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class ListEnvironmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListEnvironmentsRequest) */ {
 public:
  inline ListEnvironmentsRequest() : ListEnvironmentsRequest(nullptr) {}
  ~ListEnvironmentsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListEnvironmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEnvironmentsRequest(const ListEnvironmentsRequest& from);
  ListEnvironmentsRequest(ListEnvironmentsRequest&& from) noexcept
    : ListEnvironmentsRequest() {
    *this = ::std::move(from);
  }

  inline ListEnvironmentsRequest& operator=(const ListEnvironmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEnvironmentsRequest& operator=(ListEnvironmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEnvironmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEnvironmentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListEnvironmentsRequest*>(
               &_ListEnvironmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListEnvironmentsRequest& a, ListEnvironmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEnvironmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEnvironmentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEnvironmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEnvironmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEnvironmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListEnvironmentsRequest& from) {
    ListEnvironmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEnvironmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListEnvironmentsRequest";
  }
  protected:
  explicit ListEnvironmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListEnvironmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class ListEnvironmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListEnvironmentsResponse) */ {
 public:
  inline ListEnvironmentsResponse() : ListEnvironmentsResponse(nullptr) {}
  ~ListEnvironmentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListEnvironmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEnvironmentsResponse(const ListEnvironmentsResponse& from);
  ListEnvironmentsResponse(ListEnvironmentsResponse&& from) noexcept
    : ListEnvironmentsResponse() {
    *this = ::std::move(from);
  }

  inline ListEnvironmentsResponse& operator=(const ListEnvironmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEnvironmentsResponse& operator=(ListEnvironmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEnvironmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEnvironmentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListEnvironmentsResponse*>(
               &_ListEnvironmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListEnvironmentsResponse& a, ListEnvironmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEnvironmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEnvironmentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEnvironmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEnvironmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEnvironmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListEnvironmentsResponse& from) {
    ListEnvironmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEnvironmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListEnvironmentsResponse";
  }
  protected:
  explicit ListEnvironmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Environment environments = 1;
  int environments_size() const;
  private:
  int _internal_environments_size() const;
  public:
  void clear_environments();
  ::google::cloud::dialogflow::v2::Environment* mutable_environments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Environment >*
      mutable_environments();
  private:
  const ::google::cloud::dialogflow::v2::Environment& _internal_environments(int index) const;
  ::google::cloud::dialogflow::v2::Environment* _internal_add_environments();
  public:
  const ::google::cloud::dialogflow::v2::Environment& environments(int index) const;
  ::google::cloud::dialogflow::v2::Environment* add_environments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Environment >&
      environments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListEnvironmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Environment > environments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class GetEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetEnvironmentRequest) */ {
 public:
  inline GetEnvironmentRequest() : GetEnvironmentRequest(nullptr) {}
  ~GetEnvironmentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEnvironmentRequest(const GetEnvironmentRequest& from);
  GetEnvironmentRequest(GetEnvironmentRequest&& from) noexcept
    : GetEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline GetEnvironmentRequest& operator=(const GetEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEnvironmentRequest& operator=(GetEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetEnvironmentRequest*>(
               &_GetEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEnvironmentRequest& a, GetEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEnvironmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEnvironmentRequest& from) {
    GetEnvironmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEnvironmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetEnvironmentRequest";
  }
  protected:
  explicit GetEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class CreateEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateEnvironmentRequest) */ {
 public:
  inline CreateEnvironmentRequest() : CreateEnvironmentRequest(nullptr) {}
  ~CreateEnvironmentRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEnvironmentRequest(const CreateEnvironmentRequest& from);
  CreateEnvironmentRequest(CreateEnvironmentRequest&& from) noexcept
    : CreateEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline CreateEnvironmentRequest& operator=(const CreateEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEnvironmentRequest& operator=(CreateEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEnvironmentRequest*>(
               &_CreateEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateEnvironmentRequest& a, CreateEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEnvironmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateEnvironmentRequest& from) {
    CreateEnvironmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEnvironmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateEnvironmentRequest";
  }
  protected:
  explicit CreateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kEnvironmentIdFieldNumber = 3,
    kEnvironmentFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string environment_id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_NODISCARD std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // .google.cloud.dialogflow.v2.Environment environment = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::google::cloud::dialogflow::v2::Environment& environment() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Environment* release_environment();
  ::google::cloud::dialogflow::v2::Environment* mutable_environment();
  void set_allocated_environment(::google::cloud::dialogflow::v2::Environment* environment);
  private:
  const ::google::cloud::dialogflow::v2::Environment& _internal_environment() const;
  ::google::cloud::dialogflow::v2::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::google::cloud::dialogflow::v2::Environment* environment);
  ::google::cloud::dialogflow::v2::Environment* unsafe_arena_release_environment();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
    ::google::cloud::dialogflow::v2::Environment* environment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class UpdateEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateEnvironmentRequest) */ {
 public:
  inline UpdateEnvironmentRequest() : UpdateEnvironmentRequest(nullptr) {}
  ~UpdateEnvironmentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEnvironmentRequest(const UpdateEnvironmentRequest& from);
  UpdateEnvironmentRequest(UpdateEnvironmentRequest&& from) noexcept
    : UpdateEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEnvironmentRequest& operator=(const UpdateEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEnvironmentRequest& operator=(UpdateEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEnvironmentRequest*>(
               &_UpdateEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateEnvironmentRequest& a, UpdateEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEnvironmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateEnvironmentRequest& from) {
    UpdateEnvironmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEnvironmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateEnvironmentRequest";
  }
  protected:
  explicit UpdateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kAllowLoadToDraftAndDiscardChangesFieldNumber = 3,
  };
  // .google.cloud.dialogflow.v2.Environment environment = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::google::cloud::dialogflow::v2::Environment& environment() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Environment* release_environment();
  ::google::cloud::dialogflow::v2::Environment* mutable_environment();
  void set_allocated_environment(::google::cloud::dialogflow::v2::Environment* environment);
  private:
  const ::google::cloud::dialogflow::v2::Environment& _internal_environment() const;
  ::google::cloud::dialogflow::v2::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::google::cloud::dialogflow::v2::Environment* environment);
  ::google::cloud::dialogflow::v2::Environment* unsafe_arena_release_environment();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool allow_load_to_draft_and_discard_changes = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_allow_load_to_draft_and_discard_changes();
  bool allow_load_to_draft_and_discard_changes() const;
  void set_allow_load_to_draft_and_discard_changes(bool value);
  private:
  bool _internal_allow_load_to_draft_and_discard_changes() const;
  void _internal_set_allow_load_to_draft_and_discard_changes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::Environment* environment_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool allow_load_to_draft_and_discard_changes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class DeleteEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteEnvironmentRequest) */ {
 public:
  inline DeleteEnvironmentRequest() : DeleteEnvironmentRequest(nullptr) {}
  ~DeleteEnvironmentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEnvironmentRequest(const DeleteEnvironmentRequest& from);
  DeleteEnvironmentRequest(DeleteEnvironmentRequest&& from) noexcept
    : DeleteEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEnvironmentRequest& operator=(const DeleteEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEnvironmentRequest& operator=(DeleteEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEnvironmentRequest*>(
               &_DeleteEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteEnvironmentRequest& a, DeleteEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEnvironmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteEnvironmentRequest& from) {
    DeleteEnvironmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEnvironmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteEnvironmentRequest";
  }
  protected:
  explicit DeleteEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class GetEnvironmentHistoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest) */ {
 public:
  inline GetEnvironmentHistoryRequest() : GetEnvironmentHistoryRequest(nullptr) {}
  ~GetEnvironmentHistoryRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEnvironmentHistoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEnvironmentHistoryRequest(const GetEnvironmentHistoryRequest& from);
  GetEnvironmentHistoryRequest(GetEnvironmentHistoryRequest&& from) noexcept
    : GetEnvironmentHistoryRequest() {
    *this = ::std::move(from);
  }

  inline GetEnvironmentHistoryRequest& operator=(const GetEnvironmentHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEnvironmentHistoryRequest& operator=(GetEnvironmentHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEnvironmentHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEnvironmentHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetEnvironmentHistoryRequest*>(
               &_GetEnvironmentHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetEnvironmentHistoryRequest& a, GetEnvironmentHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEnvironmentHistoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEnvironmentHistoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEnvironmentHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEnvironmentHistoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEnvironmentHistoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEnvironmentHistoryRequest& from) {
    GetEnvironmentHistoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEnvironmentHistoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest";
  }
  protected:
  explicit GetEnvironmentHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentHistory_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EnvironmentHistory.Entry) */ {
 public:
  inline EnvironmentHistory_Entry() : EnvironmentHistory_Entry(nullptr) {}
  ~EnvironmentHistory_Entry() override;
  explicit PROTOBUF_CONSTEXPR EnvironmentHistory_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvironmentHistory_Entry(const EnvironmentHistory_Entry& from);
  EnvironmentHistory_Entry(EnvironmentHistory_Entry&& from) noexcept
    : EnvironmentHistory_Entry() {
    *this = ::std::move(from);
  }

  inline EnvironmentHistory_Entry& operator=(const EnvironmentHistory_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentHistory_Entry& operator=(EnvironmentHistory_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvironmentHistory_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvironmentHistory_Entry* internal_default_instance() {
    return reinterpret_cast<const EnvironmentHistory_Entry*>(
               &_EnvironmentHistory_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EnvironmentHistory_Entry& a, EnvironmentHistory_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentHistory_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentHistory_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvironmentHistory_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvironmentHistory_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvironmentHistory_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvironmentHistory_Entry& from) {
    EnvironmentHistory_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentHistory_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EnvironmentHistory.Entry";
  }
  protected:
  explicit EnvironmentHistory_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kCreateTimeFieldNumber = 3,
  };
  // string agent_version = 1;
  void clear_agent_version();
  const std::string& agent_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_version();
  PROTOBUF_NODISCARD std::string* release_agent_version();
  void set_allocated_agent_version(std::string* agent_version);
  private:
  const std::string& _internal_agent_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_version(const std::string& value);
  std::string* _internal_mutable_agent_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EnvironmentHistory.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EnvironmentHistory) */ {
 public:
  inline EnvironmentHistory() : EnvironmentHistory(nullptr) {}
  ~EnvironmentHistory() override;
  explicit PROTOBUF_CONSTEXPR EnvironmentHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvironmentHistory(const EnvironmentHistory& from);
  EnvironmentHistory(EnvironmentHistory&& from) noexcept
    : EnvironmentHistory() {
    *this = ::std::move(from);
  }

  inline EnvironmentHistory& operator=(const EnvironmentHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentHistory& operator=(EnvironmentHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvironmentHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvironmentHistory* internal_default_instance() {
    return reinterpret_cast<const EnvironmentHistory*>(
               &_EnvironmentHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EnvironmentHistory& a, EnvironmentHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvironmentHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvironmentHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvironmentHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvironmentHistory& from) {
    EnvironmentHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EnvironmentHistory";
  }
  protected:
  explicit EnvironmentHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnvironmentHistory_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kParentFieldNumber = 1,
    kNextPageTokenFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.EnvironmentHistory.Entry entries = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry >*
      mutable_entries();
  private:
  const ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry& _internal_entries(int index) const;
  ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* _internal_add_entries();
  public:
  const ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry& entries(int index) const;
  ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry >&
      entries() const;

  // string parent = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string next_page_token = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EnvironmentHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Environment

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Environment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Environment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Environment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Environment.name)
}
inline std::string* Environment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.name)
  return _s;
}
inline const std::string& Environment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Environment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Environment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Environment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.name)
  return _impl_.name_.Release();
}
inline void Environment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.name)
}

// string description = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Environment::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Environment::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Environment::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Environment.description)
}
inline std::string* Environment::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.description)
  return _s;
}
inline const std::string& Environment::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Environment::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Environment::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Environment::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.description)
  return _impl_.description_.Release();
}
inline void Environment::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.description)
}

// string agent_version = 3 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void Environment::clear_agent_version() {
  _impl_.agent_version_.ClearToEmpty();
}
inline const std::string& Environment::agent_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.agent_version)
  return _internal_agent_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Environment::set_agent_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Environment.agent_version)
}
inline std::string* Environment::mutable_agent_version() {
  std::string* _s = _internal_mutable_agent_version();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.agent_version)
  return _s;
}
inline const std::string& Environment::_internal_agent_version() const {
  return _impl_.agent_version_.Get();
}
inline void Environment::_internal_set_agent_version(const std::string& value) {
  
  _impl_.agent_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Environment::_internal_mutable_agent_version() {
  
  return _impl_.agent_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Environment::release_agent_version() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.agent_version)
  return _impl_.agent_version_.Release();
}
inline void Environment::set_allocated_agent_version(std::string* agent_version) {
  if (agent_version != nullptr) {
    
  } else {
    
  }
  _impl_.agent_version_.SetAllocated(agent_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_version_.IsDefault()) {
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.agent_version)
}

// .google.cloud.dialogflow.v2.Environment.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Environment::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::dialogflow::v2::Environment_State Environment::_internal_state() const {
  return static_cast< ::google::cloud::dialogflow::v2::Environment_State >(_impl_.state_);
}
inline ::google::cloud::dialogflow::v2::Environment_State Environment::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.state)
  return _internal_state();
}
inline void Environment::_internal_set_state(::google::cloud::dialogflow::v2::Environment_State value) {
  
  _impl_.state_ = value;
}
inline void Environment::set_state(::google::cloud::dialogflow::v2::Environment_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Environment.state)
}

// .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Environment::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Environment::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Environment::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Environment::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.update_time)
  return _internal_update_time();
}
inline void Environment::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Environment.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Environment::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Environment::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Environment::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Environment::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.update_time)
  return _msg;
}
inline void Environment::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.update_time)
}

// .google.cloud.dialogflow.v2.TextToSpeechSettings text_to_speech_settings = 7 [(.google.api.field_behavior) = OPTIONAL];
inline bool Environment::_internal_has_text_to_speech_settings() const {
  return this != internal_default_instance() && _impl_.text_to_speech_settings_ != nullptr;
}
inline bool Environment::has_text_to_speech_settings() const {
  return _internal_has_text_to_speech_settings();
}
inline void Environment::clear_text_to_speech_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.text_to_speech_settings_ != nullptr) {
    delete _impl_.text_to_speech_settings_;
  }
  _impl_.text_to_speech_settings_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::TextToSpeechSettings& Environment::_internal_text_to_speech_settings() const {
  const ::google::cloud::dialogflow::v2::TextToSpeechSettings* p = _impl_.text_to_speech_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::TextToSpeechSettings&>(
      ::google::cloud::dialogflow::v2::_TextToSpeechSettings_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::TextToSpeechSettings& Environment::text_to_speech_settings() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.text_to_speech_settings)
  return _internal_text_to_speech_settings();
}
inline void Environment::unsafe_arena_set_allocated_text_to_speech_settings(
    ::google::cloud::dialogflow::v2::TextToSpeechSettings* text_to_speech_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_to_speech_settings_);
  }
  _impl_.text_to_speech_settings_ = text_to_speech_settings;
  if (text_to_speech_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Environment.text_to_speech_settings)
}
inline ::google::cloud::dialogflow::v2::TextToSpeechSettings* Environment::release_text_to_speech_settings() {
  
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* temp = _impl_.text_to_speech_settings_;
  _impl_.text_to_speech_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::TextToSpeechSettings* Environment::unsafe_arena_release_text_to_speech_settings() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.text_to_speech_settings)
  
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* temp = _impl_.text_to_speech_settings_;
  _impl_.text_to_speech_settings_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::TextToSpeechSettings* Environment::_internal_mutable_text_to_speech_settings() {
  
  if (_impl_.text_to_speech_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::TextToSpeechSettings>(GetArenaForAllocation());
    _impl_.text_to_speech_settings_ = p;
  }
  return _impl_.text_to_speech_settings_;
}
inline ::google::cloud::dialogflow::v2::TextToSpeechSettings* Environment::mutable_text_to_speech_settings() {
  ::google::cloud::dialogflow::v2::TextToSpeechSettings* _msg = _internal_mutable_text_to_speech_settings();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.text_to_speech_settings)
  return _msg;
}
inline void Environment::set_allocated_text_to_speech_settings(::google::cloud::dialogflow::v2::TextToSpeechSettings* text_to_speech_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.text_to_speech_settings_;
  }
  if (text_to_speech_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text_to_speech_settings);
    if (message_arena != submessage_arena) {
      text_to_speech_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_to_speech_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.text_to_speech_settings_ = text_to_speech_settings;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.text_to_speech_settings)
}

// .google.cloud.dialogflow.v2.Fulfillment fulfillment = 8 [(.google.api.field_behavior) = OPTIONAL];
inline bool Environment::_internal_has_fulfillment() const {
  return this != internal_default_instance() && _impl_.fulfillment_ != nullptr;
}
inline bool Environment::has_fulfillment() const {
  return _internal_has_fulfillment();
}
inline const ::google::cloud::dialogflow::v2::Fulfillment& Environment::_internal_fulfillment() const {
  const ::google::cloud::dialogflow::v2::Fulfillment* p = _impl_.fulfillment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Fulfillment&>(
      ::google::cloud::dialogflow::v2::_Fulfillment_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Fulfillment& Environment::fulfillment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Environment.fulfillment)
  return _internal_fulfillment();
}
inline void Environment::unsafe_arena_set_allocated_fulfillment(
    ::google::cloud::dialogflow::v2::Fulfillment* fulfillment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fulfillment_);
  }
  _impl_.fulfillment_ = fulfillment;
  if (fulfillment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Environment.fulfillment)
}
inline ::google::cloud::dialogflow::v2::Fulfillment* Environment::release_fulfillment() {
  
  ::google::cloud::dialogflow::v2::Fulfillment* temp = _impl_.fulfillment_;
  _impl_.fulfillment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* Environment::unsafe_arena_release_fulfillment() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Environment.fulfillment)
  
  ::google::cloud::dialogflow::v2::Fulfillment* temp = _impl_.fulfillment_;
  _impl_.fulfillment_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* Environment::_internal_mutable_fulfillment() {
  
  if (_impl_.fulfillment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment>(GetArenaForAllocation());
    _impl_.fulfillment_ = p;
  }
  return _impl_.fulfillment_;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* Environment::mutable_fulfillment() {
  ::google::cloud::dialogflow::v2::Fulfillment* _msg = _internal_mutable_fulfillment();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Environment.fulfillment)
  return _msg;
}
inline void Environment::set_allocated_fulfillment(::google::cloud::dialogflow::v2::Fulfillment* fulfillment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fulfillment_);
  }
  if (fulfillment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fulfillment));
    if (message_arena != submessage_arena) {
      fulfillment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fulfillment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fulfillment_ = fulfillment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Environment.fulfillment)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TextToSpeechSettings

// bool enable_text_to_speech = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void TextToSpeechSettings::clear_enable_text_to_speech() {
  _impl_.enable_text_to_speech_ = false;
}
inline bool TextToSpeechSettings::_internal_enable_text_to_speech() const {
  return _impl_.enable_text_to_speech_;
}
inline bool TextToSpeechSettings::enable_text_to_speech() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TextToSpeechSettings.enable_text_to_speech)
  return _internal_enable_text_to_speech();
}
inline void TextToSpeechSettings::_internal_set_enable_text_to_speech(bool value) {
  
  _impl_.enable_text_to_speech_ = value;
}
inline void TextToSpeechSettings::set_enable_text_to_speech(bool value) {
  _internal_set_enable_text_to_speech(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TextToSpeechSettings.enable_text_to_speech)
}

// .google.cloud.dialogflow.v2.OutputAudioEncoding output_audio_encoding = 2 [(.google.api.field_behavior) = REQUIRED];
inline void TextToSpeechSettings::clear_output_audio_encoding() {
  _impl_.output_audio_encoding_ = 0;
}
inline ::google::cloud::dialogflow::v2::OutputAudioEncoding TextToSpeechSettings::_internal_output_audio_encoding() const {
  return static_cast< ::google::cloud::dialogflow::v2::OutputAudioEncoding >(_impl_.output_audio_encoding_);
}
inline ::google::cloud::dialogflow::v2::OutputAudioEncoding TextToSpeechSettings::output_audio_encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TextToSpeechSettings.output_audio_encoding)
  return _internal_output_audio_encoding();
}
inline void TextToSpeechSettings::_internal_set_output_audio_encoding(::google::cloud::dialogflow::v2::OutputAudioEncoding value) {
  
  _impl_.output_audio_encoding_ = value;
}
inline void TextToSpeechSettings::set_output_audio_encoding(::google::cloud::dialogflow::v2::OutputAudioEncoding value) {
  _internal_set_output_audio_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TextToSpeechSettings.output_audio_encoding)
}

// int32 sample_rate_hertz = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void TextToSpeechSettings::clear_sample_rate_hertz() {
  _impl_.sample_rate_hertz_ = 0;
}
inline int32_t TextToSpeechSettings::_internal_sample_rate_hertz() const {
  return _impl_.sample_rate_hertz_;
}
inline int32_t TextToSpeechSettings::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TextToSpeechSettings.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void TextToSpeechSettings::_internal_set_sample_rate_hertz(int32_t value) {
  
  _impl_.sample_rate_hertz_ = value;
}
inline void TextToSpeechSettings::set_sample_rate_hertz(int32_t value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TextToSpeechSettings.sample_rate_hertz)
}

// map<string, .google.cloud.dialogflow.v2.SynthesizeSpeechConfig> synthesize_speech_configs = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int TextToSpeechSettings::_internal_synthesize_speech_configs_size() const {
  return _impl_.synthesize_speech_configs_.size();
}
inline int TextToSpeechSettings::synthesize_speech_configs_size() const {
  return _internal_synthesize_speech_configs_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >&
TextToSpeechSettings::_internal_synthesize_speech_configs() const {
  return _impl_.synthesize_speech_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >&
TextToSpeechSettings::synthesize_speech_configs() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.TextToSpeechSettings.synthesize_speech_configs)
  return _internal_synthesize_speech_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >*
TextToSpeechSettings::_internal_mutable_synthesize_speech_configs() {
  return _impl_.synthesize_speech_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::dialogflow::v2::SynthesizeSpeechConfig >*
TextToSpeechSettings::mutable_synthesize_speech_configs() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.TextToSpeechSettings.synthesize_speech_configs)
  return _internal_mutable_synthesize_speech_configs();
}

// -------------------------------------------------------------------

// ListEnvironmentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListEnvironmentsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListEnvironmentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEnvironmentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEnvironmentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEnvironmentsRequest.parent)
}
inline std::string* ListEnvironmentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEnvironmentsRequest.parent)
  return _s;
}
inline const std::string& ListEnvironmentsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListEnvironmentsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEnvironmentsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEnvironmentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEnvironmentsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListEnvironmentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEnvironmentsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListEnvironmentsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListEnvironmentsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListEnvironmentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_size)
  return _internal_page_size();
}
inline void ListEnvironmentsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListEnvironmentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListEnvironmentsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListEnvironmentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEnvironmentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_token)
}
inline std::string* ListEnvironmentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_token)
  return _s;
}
inline const std::string& ListEnvironmentsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListEnvironmentsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEnvironmentsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEnvironmentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListEnvironmentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEnvironmentsRequest.page_token)
}

// -------------------------------------------------------------------

// ListEnvironmentsResponse

// repeated .google.cloud.dialogflow.v2.Environment environments = 1;
inline int ListEnvironmentsResponse::_internal_environments_size() const {
  return _impl_.environments_.size();
}
inline int ListEnvironmentsResponse::environments_size() const {
  return _internal_environments_size();
}
inline void ListEnvironmentsResponse::clear_environments() {
  _impl_.environments_.Clear();
}
inline ::google::cloud::dialogflow::v2::Environment* ListEnvironmentsResponse::mutable_environments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEnvironmentsResponse.environments)
  return _impl_.environments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Environment >*
ListEnvironmentsResponse::mutable_environments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListEnvironmentsResponse.environments)
  return &_impl_.environments_;
}
inline const ::google::cloud::dialogflow::v2::Environment& ListEnvironmentsResponse::_internal_environments(int index) const {
  return _impl_.environments_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Environment& ListEnvironmentsResponse::environments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEnvironmentsResponse.environments)
  return _internal_environments(index);
}
inline ::google::cloud::dialogflow::v2::Environment* ListEnvironmentsResponse::_internal_add_environments() {
  return _impl_.environments_.Add();
}
inline ::google::cloud::dialogflow::v2::Environment* ListEnvironmentsResponse::add_environments() {
  ::google::cloud::dialogflow::v2::Environment* _add = _internal_add_environments();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListEnvironmentsResponse.environments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Environment >&
ListEnvironmentsResponse::environments() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListEnvironmentsResponse.environments)
  return _impl_.environments_;
}

// string next_page_token = 2;
inline void ListEnvironmentsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListEnvironmentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEnvironmentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEnvironmentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEnvironmentsResponse.next_page_token)
}
inline std::string* ListEnvironmentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEnvironmentsResponse.next_page_token)
  return _s;
}
inline const std::string& ListEnvironmentsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListEnvironmentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEnvironmentsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEnvironmentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEnvironmentsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListEnvironmentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEnvironmentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetEnvironmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetEnvironmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetEnvironmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEnvironmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEnvironmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEnvironmentRequest.name)
}
inline std::string* GetEnvironmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetEnvironmentRequest.name)
  return _s;
}
inline const std::string& GetEnvironmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetEnvironmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEnvironmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEnvironmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetEnvironmentRequest.name)
  return _impl_.name_.Release();
}
inline void GetEnvironmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetEnvironmentRequest.name)
}

// -------------------------------------------------------------------

// CreateEnvironmentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateEnvironmentRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateEnvironmentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEnvironmentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEnvironmentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateEnvironmentRequest.parent)
}
inline std::string* CreateEnvironmentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEnvironmentRequest.parent)
  return _s;
}
inline const std::string& CreateEnvironmentRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateEnvironmentRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateEnvironmentRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateEnvironmentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEnvironmentRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateEnvironmentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEnvironmentRequest.parent)
}

// .google.cloud.dialogflow.v2.Environment environment = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateEnvironmentRequest::_internal_has_environment() const {
  return this != internal_default_instance() && _impl_.environment_ != nullptr;
}
inline bool CreateEnvironmentRequest::has_environment() const {
  return _internal_has_environment();
}
inline void CreateEnvironmentRequest::clear_environment() {
  if (GetArenaForAllocation() == nullptr && _impl_.environment_ != nullptr) {
    delete _impl_.environment_;
  }
  _impl_.environment_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Environment& CreateEnvironmentRequest::_internal_environment() const {
  const ::google::cloud::dialogflow::v2::Environment* p = _impl_.environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Environment&>(
      ::google::cloud::dialogflow::v2::_Environment_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Environment& CreateEnvironmentRequest::environment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment)
  return _internal_environment();
}
inline void CreateEnvironmentRequest::unsafe_arena_set_allocated_environment(
    ::google::cloud::dialogflow::v2::Environment* environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.environment_);
  }
  _impl_.environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment)
}
inline ::google::cloud::dialogflow::v2::Environment* CreateEnvironmentRequest::release_environment() {
  
  ::google::cloud::dialogflow::v2::Environment* temp = _impl_.environment_;
  _impl_.environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Environment* CreateEnvironmentRequest::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment)
  
  ::google::cloud::dialogflow::v2::Environment* temp = _impl_.environment_;
  _impl_.environment_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Environment* CreateEnvironmentRequest::_internal_mutable_environment() {
  
  if (_impl_.environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Environment>(GetArenaForAllocation());
    _impl_.environment_ = p;
  }
  return _impl_.environment_;
}
inline ::google::cloud::dialogflow::v2::Environment* CreateEnvironmentRequest::mutable_environment() {
  ::google::cloud::dialogflow::v2::Environment* _msg = _internal_mutable_environment();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment)
  return _msg;
}
inline void CreateEnvironmentRequest::set_allocated_environment(::google::cloud::dialogflow::v2::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment)
}

// string environment_id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void CreateEnvironmentRequest::clear_environment_id() {
  _impl_.environment_id_.ClearToEmpty();
}
inline const std::string& CreateEnvironmentRequest::environment_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEnvironmentRequest::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.environment_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment_id)
}
inline std::string* CreateEnvironmentRequest::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment_id)
  return _s;
}
inline const std::string& CreateEnvironmentRequest::_internal_environment_id() const {
  return _impl_.environment_id_.Get();
}
inline void CreateEnvironmentRequest::_internal_set_environment_id(const std::string& value) {
  
  _impl_.environment_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateEnvironmentRequest::_internal_mutable_environment_id() {
  
  return _impl_.environment_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateEnvironmentRequest::release_environment_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment_id)
  return _impl_.environment_id_.Release();
}
inline void CreateEnvironmentRequest::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  _impl_.environment_id_.SetAllocated(environment_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.environment_id_.IsDefault()) {
    _impl_.environment_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEnvironmentRequest.environment_id)
}

// -------------------------------------------------------------------

// UpdateEnvironmentRequest

// .google.cloud.dialogflow.v2.Environment environment = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateEnvironmentRequest::_internal_has_environment() const {
  return this != internal_default_instance() && _impl_.environment_ != nullptr;
}
inline bool UpdateEnvironmentRequest::has_environment() const {
  return _internal_has_environment();
}
inline void UpdateEnvironmentRequest::clear_environment() {
  if (GetArenaForAllocation() == nullptr && _impl_.environment_ != nullptr) {
    delete _impl_.environment_;
  }
  _impl_.environment_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Environment& UpdateEnvironmentRequest::_internal_environment() const {
  const ::google::cloud::dialogflow::v2::Environment* p = _impl_.environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Environment&>(
      ::google::cloud::dialogflow::v2::_Environment_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Environment& UpdateEnvironmentRequest::environment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.environment)
  return _internal_environment();
}
inline void UpdateEnvironmentRequest::unsafe_arena_set_allocated_environment(
    ::google::cloud::dialogflow::v2::Environment* environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.environment_);
  }
  _impl_.environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.environment)
}
inline ::google::cloud::dialogflow::v2::Environment* UpdateEnvironmentRequest::release_environment() {
  
  ::google::cloud::dialogflow::v2::Environment* temp = _impl_.environment_;
  _impl_.environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Environment* UpdateEnvironmentRequest::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.environment)
  
  ::google::cloud::dialogflow::v2::Environment* temp = _impl_.environment_;
  _impl_.environment_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Environment* UpdateEnvironmentRequest::_internal_mutable_environment() {
  
  if (_impl_.environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Environment>(GetArenaForAllocation());
    _impl_.environment_ = p;
  }
  return _impl_.environment_;
}
inline ::google::cloud::dialogflow::v2::Environment* UpdateEnvironmentRequest::mutable_environment() {
  ::google::cloud::dialogflow::v2::Environment* _msg = _internal_mutable_environment();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.environment)
  return _msg;
}
inline void UpdateEnvironmentRequest::set_allocated_environment(::google::cloud::dialogflow::v2::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.environment)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateEnvironmentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateEnvironmentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEnvironmentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEnvironmentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateEnvironmentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEnvironmentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEnvironmentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEnvironmentRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEnvironmentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.update_mask)
  return _msg;
}
inline void UpdateEnvironmentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.update_mask)
}

// bool allow_load_to_draft_and_discard_changes = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateEnvironmentRequest::clear_allow_load_to_draft_and_discard_changes() {
  _impl_.allow_load_to_draft_and_discard_changes_ = false;
}
inline bool UpdateEnvironmentRequest::_internal_allow_load_to_draft_and_discard_changes() const {
  return _impl_.allow_load_to_draft_and_discard_changes_;
}
inline bool UpdateEnvironmentRequest::allow_load_to_draft_and_discard_changes() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.allow_load_to_draft_and_discard_changes)
  return _internal_allow_load_to_draft_and_discard_changes();
}
inline void UpdateEnvironmentRequest::_internal_set_allow_load_to_draft_and_discard_changes(bool value) {
  
  _impl_.allow_load_to_draft_and_discard_changes_ = value;
}
inline void UpdateEnvironmentRequest::set_allow_load_to_draft_and_discard_changes(bool value) {
  _internal_set_allow_load_to_draft_and_discard_changes(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.UpdateEnvironmentRequest.allow_load_to_draft_and_discard_changes)
}

// -------------------------------------------------------------------

// DeleteEnvironmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteEnvironmentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteEnvironmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteEnvironmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteEnvironmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteEnvironmentRequest.name)
}
inline std::string* DeleteEnvironmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteEnvironmentRequest.name)
  return _s;
}
inline const std::string& DeleteEnvironmentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteEnvironmentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteEnvironmentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteEnvironmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteEnvironmentRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteEnvironmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteEnvironmentRequest.name)
}

// -------------------------------------------------------------------

// GetEnvironmentHistoryRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetEnvironmentHistoryRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GetEnvironmentHistoryRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEnvironmentHistoryRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.parent)
}
inline std::string* GetEnvironmentHistoryRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.parent)
  return _s;
}
inline const std::string& GetEnvironmentHistoryRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void GetEnvironmentHistoryRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEnvironmentHistoryRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEnvironmentHistoryRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.parent)
  return _impl_.parent_.Release();
}
inline void GetEnvironmentHistoryRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void GetEnvironmentHistoryRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t GetEnvironmentHistoryRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t GetEnvironmentHistoryRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_size)
  return _internal_page_size();
}
inline void GetEnvironmentHistoryRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void GetEnvironmentHistoryRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void GetEnvironmentHistoryRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& GetEnvironmentHistoryRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEnvironmentHistoryRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_token)
}
inline std::string* GetEnvironmentHistoryRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_token)
  return _s;
}
inline const std::string& GetEnvironmentHistoryRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void GetEnvironmentHistoryRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEnvironmentHistoryRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEnvironmentHistoryRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void GetEnvironmentHistoryRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest.page_token)
}

// -------------------------------------------------------------------

// EnvironmentHistory_Entry

// string agent_version = 1;
inline void EnvironmentHistory_Entry::clear_agent_version() {
  _impl_.agent_version_.ClearToEmpty();
}
inline const std::string& EnvironmentHistory_Entry::agent_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.agent_version)
  return _internal_agent_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvironmentHistory_Entry::set_agent_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agent_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.agent_version)
}
inline std::string* EnvironmentHistory_Entry::mutable_agent_version() {
  std::string* _s = _internal_mutable_agent_version();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.agent_version)
  return _s;
}
inline const std::string& EnvironmentHistory_Entry::_internal_agent_version() const {
  return _impl_.agent_version_.Get();
}
inline void EnvironmentHistory_Entry::_internal_set_agent_version(const std::string& value) {
  
  _impl_.agent_version_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvironmentHistory_Entry::_internal_mutable_agent_version() {
  
  return _impl_.agent_version_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvironmentHistory_Entry::release_agent_version() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.agent_version)
  return _impl_.agent_version_.Release();
}
inline void EnvironmentHistory_Entry::set_allocated_agent_version(std::string* agent_version) {
  if (agent_version != nullptr) {
    
  } else {
    
  }
  _impl_.agent_version_.SetAllocated(agent_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_version_.IsDefault()) {
    _impl_.agent_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.agent_version)
}

// string description = 2;
inline void EnvironmentHistory_Entry::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& EnvironmentHistory_Entry::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvironmentHistory_Entry::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.description)
}
inline std::string* EnvironmentHistory_Entry::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.description)
  return _s;
}
inline const std::string& EnvironmentHistory_Entry::_internal_description() const {
  return _impl_.description_.Get();
}
inline void EnvironmentHistory_Entry::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvironmentHistory_Entry::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvironmentHistory_Entry::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.description)
  return _impl_.description_.Release();
}
inline void EnvironmentHistory_Entry::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.description)
}

// .google.protobuf.Timestamp create_time = 3;
inline bool EnvironmentHistory_Entry::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool EnvironmentHistory_Entry::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EnvironmentHistory_Entry::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EnvironmentHistory_Entry::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.create_time)
  return _internal_create_time();
}
inline void EnvironmentHistory_Entry::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EnvironmentHistory_Entry::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EnvironmentHistory_Entry::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EnvironmentHistory_Entry::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EnvironmentHistory_Entry::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.create_time)
  return _msg;
}
inline void EnvironmentHistory_Entry::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.Entry.create_time)
}

// -------------------------------------------------------------------

// EnvironmentHistory

// string parent = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EnvironmentHistory::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& EnvironmentHistory::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvironmentHistory::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EnvironmentHistory.parent)
}
inline std::string* EnvironmentHistory::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.parent)
  return _s;
}
inline const std::string& EnvironmentHistory::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void EnvironmentHistory::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvironmentHistory::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvironmentHistory::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EnvironmentHistory.parent)
  return _impl_.parent_.Release();
}
inline void EnvironmentHistory::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.parent)
}

// repeated .google.cloud.dialogflow.v2.EnvironmentHistory.Entry entries = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int EnvironmentHistory::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int EnvironmentHistory::entries_size() const {
  return _internal_entries_size();
}
inline void EnvironmentHistory::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* EnvironmentHistory::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry >*
EnvironmentHistory::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.EnvironmentHistory.entries)
  return &_impl_.entries_;
}
inline const ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry& EnvironmentHistory::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry& EnvironmentHistory::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.entries)
  return _internal_entries(index);
}
inline ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* EnvironmentHistory::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* EnvironmentHistory::add_entries() {
  ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.EnvironmentHistory.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EnvironmentHistory_Entry >&
EnvironmentHistory::entries() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.EnvironmentHistory.entries)
  return _impl_.entries_;
}

// string next_page_token = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EnvironmentHistory::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& EnvironmentHistory::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EnvironmentHistory.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvironmentHistory::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EnvironmentHistory.next_page_token)
}
inline std::string* EnvironmentHistory::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EnvironmentHistory.next_page_token)
  return _s;
}
inline const std::string& EnvironmentHistory::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void EnvironmentHistory::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvironmentHistory::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvironmentHistory::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EnvironmentHistory.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void EnvironmentHistory::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EnvironmentHistory.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Environment_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Environment_State>() {
  return ::google::cloud::dialogflow::v2::Environment_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fenvironment_2eproto
