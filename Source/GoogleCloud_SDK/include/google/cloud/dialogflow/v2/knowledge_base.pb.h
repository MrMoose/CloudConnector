// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/knowledge_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class CreateKnowledgeBaseRequest;
struct CreateKnowledgeBaseRequestDefaultTypeInternal;
extern CreateKnowledgeBaseRequestDefaultTypeInternal _CreateKnowledgeBaseRequest_default_instance_;
class DeleteKnowledgeBaseRequest;
struct DeleteKnowledgeBaseRequestDefaultTypeInternal;
extern DeleteKnowledgeBaseRequestDefaultTypeInternal _DeleteKnowledgeBaseRequest_default_instance_;
class GetKnowledgeBaseRequest;
struct GetKnowledgeBaseRequestDefaultTypeInternal;
extern GetKnowledgeBaseRequestDefaultTypeInternal _GetKnowledgeBaseRequest_default_instance_;
class KnowledgeBase;
struct KnowledgeBaseDefaultTypeInternal;
extern KnowledgeBaseDefaultTypeInternal _KnowledgeBase_default_instance_;
class ListKnowledgeBasesRequest;
struct ListKnowledgeBasesRequestDefaultTypeInternal;
extern ListKnowledgeBasesRequestDefaultTypeInternal _ListKnowledgeBasesRequest_default_instance_;
class ListKnowledgeBasesResponse;
struct ListKnowledgeBasesResponseDefaultTypeInternal;
extern ListKnowledgeBasesResponseDefaultTypeInternal _ListKnowledgeBasesResponse_default_instance_;
class UpdateKnowledgeBaseRequest;
struct UpdateKnowledgeBaseRequestDefaultTypeInternal;
extern UpdateKnowledgeBaseRequestDefaultTypeInternal _UpdateKnowledgeBaseRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::CreateKnowledgeBaseRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateKnowledgeBaseRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteKnowledgeBaseRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteKnowledgeBaseRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetKnowledgeBaseRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetKnowledgeBaseRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::KnowledgeBase* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::KnowledgeBase>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListKnowledgeBasesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListKnowledgeBasesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListKnowledgeBasesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListKnowledgeBasesResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateKnowledgeBaseRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateKnowledgeBaseRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

// ===================================================================

class KnowledgeBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.KnowledgeBase) */ {
 public:
  inline KnowledgeBase() : KnowledgeBase(nullptr) {}
  ~KnowledgeBase() override;
  explicit PROTOBUF_CONSTEXPR KnowledgeBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KnowledgeBase(const KnowledgeBase& from);
  KnowledgeBase(KnowledgeBase&& from) noexcept
    : KnowledgeBase() {
    *this = ::std::move(from);
  }

  inline KnowledgeBase& operator=(const KnowledgeBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeBase& operator=(KnowledgeBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KnowledgeBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const KnowledgeBase* internal_default_instance() {
    return reinterpret_cast<const KnowledgeBase*>(
               &_KnowledgeBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KnowledgeBase& a, KnowledgeBase& b) {
    a.Swap(&b);
  }
  inline void Swap(KnowledgeBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnowledgeBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KnowledgeBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KnowledgeBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KnowledgeBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KnowledgeBase& from) {
    KnowledgeBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnowledgeBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.KnowledgeBase";
  }
  protected:
  explicit KnowledgeBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kLanguageCodeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string language_code = 4;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.KnowledgeBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ListKnowledgeBasesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest) */ {
 public:
  inline ListKnowledgeBasesRequest() : ListKnowledgeBasesRequest(nullptr) {}
  ~ListKnowledgeBasesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListKnowledgeBasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKnowledgeBasesRequest(const ListKnowledgeBasesRequest& from);
  ListKnowledgeBasesRequest(ListKnowledgeBasesRequest&& from) noexcept
    : ListKnowledgeBasesRequest() {
    *this = ::std::move(from);
  }

  inline ListKnowledgeBasesRequest& operator=(const ListKnowledgeBasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKnowledgeBasesRequest& operator=(ListKnowledgeBasesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKnowledgeBasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKnowledgeBasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListKnowledgeBasesRequest*>(
               &_ListKnowledgeBasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListKnowledgeBasesRequest& a, ListKnowledgeBasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKnowledgeBasesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKnowledgeBasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKnowledgeBasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKnowledgeBasesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKnowledgeBasesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListKnowledgeBasesRequest& from) {
    ListKnowledgeBasesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKnowledgeBasesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListKnowledgeBasesRequest";
  }
  protected:
  explicit ListKnowledgeBasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ListKnowledgeBasesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse) */ {
 public:
  inline ListKnowledgeBasesResponse() : ListKnowledgeBasesResponse(nullptr) {}
  ~ListKnowledgeBasesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListKnowledgeBasesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKnowledgeBasesResponse(const ListKnowledgeBasesResponse& from);
  ListKnowledgeBasesResponse(ListKnowledgeBasesResponse&& from) noexcept
    : ListKnowledgeBasesResponse() {
    *this = ::std::move(from);
  }

  inline ListKnowledgeBasesResponse& operator=(const ListKnowledgeBasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKnowledgeBasesResponse& operator=(ListKnowledgeBasesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKnowledgeBasesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKnowledgeBasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListKnowledgeBasesResponse*>(
               &_ListKnowledgeBasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListKnowledgeBasesResponse& a, ListKnowledgeBasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKnowledgeBasesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKnowledgeBasesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKnowledgeBasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKnowledgeBasesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKnowledgeBasesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListKnowledgeBasesResponse& from) {
    ListKnowledgeBasesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKnowledgeBasesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListKnowledgeBasesResponse";
  }
  protected:
  explicit ListKnowledgeBasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeBasesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.KnowledgeBase knowledge_bases = 1;
  int knowledge_bases_size() const;
  private:
  int _internal_knowledge_bases_size() const;
  public:
  void clear_knowledge_bases();
  ::google::cloud::dialogflow::v2::KnowledgeBase* mutable_knowledge_bases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::KnowledgeBase >*
      mutable_knowledge_bases();
  private:
  const ::google::cloud::dialogflow::v2::KnowledgeBase& _internal_knowledge_bases(int index) const;
  ::google::cloud::dialogflow::v2::KnowledgeBase* _internal_add_knowledge_bases();
  public:
  const ::google::cloud::dialogflow::v2::KnowledgeBase& knowledge_bases(int index) const;
  ::google::cloud::dialogflow::v2::KnowledgeBase* add_knowledge_bases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::KnowledgeBase >&
      knowledge_bases() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::KnowledgeBase > knowledge_bases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class GetKnowledgeBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest) */ {
 public:
  inline GetKnowledgeBaseRequest() : GetKnowledgeBaseRequest(nullptr) {}
  ~GetKnowledgeBaseRequest() override;
  explicit PROTOBUF_CONSTEXPR GetKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKnowledgeBaseRequest(const GetKnowledgeBaseRequest& from);
  GetKnowledgeBaseRequest(GetKnowledgeBaseRequest&& from) noexcept
    : GetKnowledgeBaseRequest() {
    *this = ::std::move(from);
  }

  inline GetKnowledgeBaseRequest& operator=(const GetKnowledgeBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKnowledgeBaseRequest& operator=(GetKnowledgeBaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKnowledgeBaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKnowledgeBaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetKnowledgeBaseRequest*>(
               &_GetKnowledgeBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetKnowledgeBaseRequest& a, GetKnowledgeBaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKnowledgeBaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKnowledgeBaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKnowledgeBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKnowledgeBaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKnowledgeBaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKnowledgeBaseRequest& from) {
    GetKnowledgeBaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKnowledgeBaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetKnowledgeBaseRequest";
  }
  protected:
  explicit GetKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CreateKnowledgeBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest) */ {
 public:
  inline CreateKnowledgeBaseRequest() : CreateKnowledgeBaseRequest(nullptr) {}
  ~CreateKnowledgeBaseRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateKnowledgeBaseRequest(const CreateKnowledgeBaseRequest& from);
  CreateKnowledgeBaseRequest(CreateKnowledgeBaseRequest&& from) noexcept
    : CreateKnowledgeBaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateKnowledgeBaseRequest& operator=(const CreateKnowledgeBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateKnowledgeBaseRequest& operator=(CreateKnowledgeBaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateKnowledgeBaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateKnowledgeBaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateKnowledgeBaseRequest*>(
               &_CreateKnowledgeBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateKnowledgeBaseRequest& a, CreateKnowledgeBaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateKnowledgeBaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateKnowledgeBaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateKnowledgeBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateKnowledgeBaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateKnowledgeBaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateKnowledgeBaseRequest& from) {
    CreateKnowledgeBaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateKnowledgeBaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest";
  }
  protected:
  explicit CreateKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kKnowledgeBaseFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.dialogflow.v2.KnowledgeBase knowledge_base = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_knowledge_base() const;
  private:
  bool _internal_has_knowledge_base() const;
  public:
  void clear_knowledge_base();
  const ::google::cloud::dialogflow::v2::KnowledgeBase& knowledge_base() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::KnowledgeBase* release_knowledge_base();
  ::google::cloud::dialogflow::v2::KnowledgeBase* mutable_knowledge_base();
  void set_allocated_knowledge_base(::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base);
  private:
  const ::google::cloud::dialogflow::v2::KnowledgeBase& _internal_knowledge_base() const;
  ::google::cloud::dialogflow::v2::KnowledgeBase* _internal_mutable_knowledge_base();
  public:
  void unsafe_arena_set_allocated_knowledge_base(
      ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base);
  ::google::cloud::dialogflow::v2::KnowledgeBase* unsafe_arena_release_knowledge_base();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class DeleteKnowledgeBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest) */ {
 public:
  inline DeleteKnowledgeBaseRequest() : DeleteKnowledgeBaseRequest(nullptr) {}
  ~DeleteKnowledgeBaseRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteKnowledgeBaseRequest(const DeleteKnowledgeBaseRequest& from);
  DeleteKnowledgeBaseRequest(DeleteKnowledgeBaseRequest&& from) noexcept
    : DeleteKnowledgeBaseRequest() {
    *this = ::std::move(from);
  }

  inline DeleteKnowledgeBaseRequest& operator=(const DeleteKnowledgeBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteKnowledgeBaseRequest& operator=(DeleteKnowledgeBaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteKnowledgeBaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteKnowledgeBaseRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteKnowledgeBaseRequest*>(
               &_DeleteKnowledgeBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteKnowledgeBaseRequest& a, DeleteKnowledgeBaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteKnowledgeBaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteKnowledgeBaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteKnowledgeBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteKnowledgeBaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteKnowledgeBaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteKnowledgeBaseRequest& from) {
    DeleteKnowledgeBaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKnowledgeBaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest";
  }
  protected:
  explicit DeleteKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// -------------------------------------------------------------------

class UpdateKnowledgeBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest) */ {
 public:
  inline UpdateKnowledgeBaseRequest() : UpdateKnowledgeBaseRequest(nullptr) {}
  ~UpdateKnowledgeBaseRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateKnowledgeBaseRequest(const UpdateKnowledgeBaseRequest& from);
  UpdateKnowledgeBaseRequest(UpdateKnowledgeBaseRequest&& from) noexcept
    : UpdateKnowledgeBaseRequest() {
    *this = ::std::move(from);
  }

  inline UpdateKnowledgeBaseRequest& operator=(const UpdateKnowledgeBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateKnowledgeBaseRequest& operator=(UpdateKnowledgeBaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateKnowledgeBaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateKnowledgeBaseRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateKnowledgeBaseRequest*>(
               &_UpdateKnowledgeBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateKnowledgeBaseRequest& a, UpdateKnowledgeBaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateKnowledgeBaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateKnowledgeBaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateKnowledgeBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateKnowledgeBaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateKnowledgeBaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateKnowledgeBaseRequest& from) {
    UpdateKnowledgeBaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateKnowledgeBaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest";
  }
  protected:
  explicit UpdateKnowledgeBaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeBaseFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.KnowledgeBase knowledge_base = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_knowledge_base() const;
  private:
  bool _internal_has_knowledge_base() const;
  public:
  void clear_knowledge_base();
  const ::google::cloud::dialogflow::v2::KnowledgeBase& knowledge_base() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::KnowledgeBase* release_knowledge_base();
  ::google::cloud::dialogflow::v2::KnowledgeBase* mutable_knowledge_base();
  void set_allocated_knowledge_base(::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base);
  private:
  const ::google::cloud::dialogflow::v2::KnowledgeBase& _internal_knowledge_base() const;
  ::google::cloud::dialogflow::v2::KnowledgeBase* _internal_mutable_knowledge_base();
  public:
  void unsafe_arena_set_allocated_knowledge_base(
      ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base);
  ::google::cloud::dialogflow::v2::KnowledgeBase* unsafe_arena_release_knowledge_base();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KnowledgeBase

// string name = 1;
inline void KnowledgeBase::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& KnowledgeBase::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.KnowledgeBase.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KnowledgeBase::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.KnowledgeBase.name)
}
inline std::string* KnowledgeBase::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.KnowledgeBase.name)
  return _s;
}
inline const std::string& KnowledgeBase::_internal_name() const {
  return _impl_.name_.Get();
}
inline void KnowledgeBase::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KnowledgeBase::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* KnowledgeBase::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.KnowledgeBase.name)
  return _impl_.name_.Release();
}
inline void KnowledgeBase::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.KnowledgeBase.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void KnowledgeBase::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& KnowledgeBase::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.KnowledgeBase.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KnowledgeBase::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.KnowledgeBase.display_name)
}
inline std::string* KnowledgeBase::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.KnowledgeBase.display_name)
  return _s;
}
inline const std::string& KnowledgeBase::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void KnowledgeBase::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* KnowledgeBase::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* KnowledgeBase::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.KnowledgeBase.display_name)
  return _impl_.display_name_.Release();
}
inline void KnowledgeBase::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.KnowledgeBase.display_name)
}

// string language_code = 4;
inline void KnowledgeBase::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& KnowledgeBase::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.KnowledgeBase.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KnowledgeBase::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.KnowledgeBase.language_code)
}
inline std::string* KnowledgeBase::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.KnowledgeBase.language_code)
  return _s;
}
inline const std::string& KnowledgeBase::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void KnowledgeBase::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* KnowledgeBase::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* KnowledgeBase::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.KnowledgeBase.language_code)
  return _impl_.language_code_.Release();
}
inline void KnowledgeBase::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.KnowledgeBase.language_code)
}

// -------------------------------------------------------------------

// ListKnowledgeBasesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListKnowledgeBasesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListKnowledgeBasesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKnowledgeBasesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.parent)
}
inline std::string* ListKnowledgeBasesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.parent)
  return _s;
}
inline const std::string& ListKnowledgeBasesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListKnowledgeBasesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListKnowledgeBasesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.parent)
}

// int32 page_size = 2;
inline void ListKnowledgeBasesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListKnowledgeBasesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListKnowledgeBasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_size)
  return _internal_page_size();
}
inline void ListKnowledgeBasesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListKnowledgeBasesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_size)
}

// string page_token = 3;
inline void ListKnowledgeBasesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListKnowledgeBasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKnowledgeBasesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_token)
}
inline std::string* ListKnowledgeBasesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_token)
  return _s;
}
inline const std::string& ListKnowledgeBasesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListKnowledgeBasesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListKnowledgeBasesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.page_token)
}

// string filter = 4;
inline void ListKnowledgeBasesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListKnowledgeBasesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKnowledgeBasesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.filter)
}
inline std::string* ListKnowledgeBasesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.filter)
  return _s;
}
inline const std::string& ListKnowledgeBasesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListKnowledgeBasesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListKnowledgeBasesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListKnowledgeBasesRequest.filter)
}

// -------------------------------------------------------------------

// ListKnowledgeBasesResponse

// repeated .google.cloud.dialogflow.v2.KnowledgeBase knowledge_bases = 1;
inline int ListKnowledgeBasesResponse::_internal_knowledge_bases_size() const {
  return _impl_.knowledge_bases_.size();
}
inline int ListKnowledgeBasesResponse::knowledge_bases_size() const {
  return _internal_knowledge_bases_size();
}
inline void ListKnowledgeBasesResponse::clear_knowledge_bases() {
  _impl_.knowledge_bases_.Clear();
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* ListKnowledgeBasesResponse::mutable_knowledge_bases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.knowledge_bases)
  return _impl_.knowledge_bases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::KnowledgeBase >*
ListKnowledgeBasesResponse::mutable_knowledge_bases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.knowledge_bases)
  return &_impl_.knowledge_bases_;
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& ListKnowledgeBasesResponse::_internal_knowledge_bases(int index) const {
  return _impl_.knowledge_bases_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& ListKnowledgeBasesResponse::knowledge_bases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.knowledge_bases)
  return _internal_knowledge_bases(index);
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* ListKnowledgeBasesResponse::_internal_add_knowledge_bases() {
  return _impl_.knowledge_bases_.Add();
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* ListKnowledgeBasesResponse::add_knowledge_bases() {
  ::google::cloud::dialogflow::v2::KnowledgeBase* _add = _internal_add_knowledge_bases();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.knowledge_bases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::KnowledgeBase >&
ListKnowledgeBasesResponse::knowledge_bases() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.knowledge_bases)
  return _impl_.knowledge_bases_;
}

// string next_page_token = 2;
inline void ListKnowledgeBasesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListKnowledgeBasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKnowledgeBasesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.next_page_token)
}
inline std::string* ListKnowledgeBasesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.next_page_token)
  return _s;
}
inline const std::string& ListKnowledgeBasesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListKnowledgeBasesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKnowledgeBasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListKnowledgeBasesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListKnowledgeBasesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetKnowledgeBaseRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetKnowledgeBaseRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetKnowledgeBaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKnowledgeBaseRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest.name)
}
inline std::string* GetKnowledgeBaseRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest.name)
  return _s;
}
inline const std::string& GetKnowledgeBaseRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetKnowledgeBaseRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKnowledgeBaseRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKnowledgeBaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest.name)
  return _impl_.name_.Release();
}
inline void GetKnowledgeBaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetKnowledgeBaseRequest.name)
}

// -------------------------------------------------------------------

// CreateKnowledgeBaseRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateKnowledgeBaseRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateKnowledgeBaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateKnowledgeBaseRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.parent)
}
inline std::string* CreateKnowledgeBaseRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.parent)
  return _s;
}
inline const std::string& CreateKnowledgeBaseRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateKnowledgeBaseRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateKnowledgeBaseRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateKnowledgeBaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateKnowledgeBaseRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.parent)
}

// .google.cloud.dialogflow.v2.KnowledgeBase knowledge_base = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateKnowledgeBaseRequest::_internal_has_knowledge_base() const {
  return this != internal_default_instance() && _impl_.knowledge_base_ != nullptr;
}
inline bool CreateKnowledgeBaseRequest::has_knowledge_base() const {
  return _internal_has_knowledge_base();
}
inline void CreateKnowledgeBaseRequest::clear_knowledge_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.knowledge_base_ != nullptr) {
    delete _impl_.knowledge_base_;
  }
  _impl_.knowledge_base_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& CreateKnowledgeBaseRequest::_internal_knowledge_base() const {
  const ::google::cloud::dialogflow::v2::KnowledgeBase* p = _impl_.knowledge_base_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::KnowledgeBase&>(
      ::google::cloud::dialogflow::v2::_KnowledgeBase_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& CreateKnowledgeBaseRequest::knowledge_base() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.knowledge_base)
  return _internal_knowledge_base();
}
inline void CreateKnowledgeBaseRequest::unsafe_arena_set_allocated_knowledge_base(
    ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.knowledge_base_);
  }
  _impl_.knowledge_base_ = knowledge_base;
  if (knowledge_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.knowledge_base)
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* CreateKnowledgeBaseRequest::release_knowledge_base() {
  
  ::google::cloud::dialogflow::v2::KnowledgeBase* temp = _impl_.knowledge_base_;
  _impl_.knowledge_base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* CreateKnowledgeBaseRequest::unsafe_arena_release_knowledge_base() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.knowledge_base)
  
  ::google::cloud::dialogflow::v2::KnowledgeBase* temp = _impl_.knowledge_base_;
  _impl_.knowledge_base_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* CreateKnowledgeBaseRequest::_internal_mutable_knowledge_base() {
  
  if (_impl_.knowledge_base_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::KnowledgeBase>(GetArenaForAllocation());
    _impl_.knowledge_base_ = p;
  }
  return _impl_.knowledge_base_;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* CreateKnowledgeBaseRequest::mutable_knowledge_base() {
  ::google::cloud::dialogflow::v2::KnowledgeBase* _msg = _internal_mutable_knowledge_base();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.knowledge_base)
  return _msg;
}
inline void CreateKnowledgeBaseRequest::set_allocated_knowledge_base(::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.knowledge_base_;
  }
  if (knowledge_base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(knowledge_base);
    if (message_arena != submessage_arena) {
      knowledge_base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knowledge_base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.knowledge_base_ = knowledge_base;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest.knowledge_base)
}

// -------------------------------------------------------------------

// DeleteKnowledgeBaseRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteKnowledgeBaseRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteKnowledgeBaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteKnowledgeBaseRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.name)
}
inline std::string* DeleteKnowledgeBaseRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.name)
  return _s;
}
inline const std::string& DeleteKnowledgeBaseRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteKnowledgeBaseRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteKnowledgeBaseRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteKnowledgeBaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteKnowledgeBaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.name)
}

// bool force = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteKnowledgeBaseRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool DeleteKnowledgeBaseRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool DeleteKnowledgeBaseRequest::force() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.force)
  return _internal_force();
}
inline void DeleteKnowledgeBaseRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void DeleteKnowledgeBaseRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest.force)
}

// -------------------------------------------------------------------

// UpdateKnowledgeBaseRequest

// .google.cloud.dialogflow.v2.KnowledgeBase knowledge_base = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateKnowledgeBaseRequest::_internal_has_knowledge_base() const {
  return this != internal_default_instance() && _impl_.knowledge_base_ != nullptr;
}
inline bool UpdateKnowledgeBaseRequest::has_knowledge_base() const {
  return _internal_has_knowledge_base();
}
inline void UpdateKnowledgeBaseRequest::clear_knowledge_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.knowledge_base_ != nullptr) {
    delete _impl_.knowledge_base_;
  }
  _impl_.knowledge_base_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& UpdateKnowledgeBaseRequest::_internal_knowledge_base() const {
  const ::google::cloud::dialogflow::v2::KnowledgeBase* p = _impl_.knowledge_base_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::KnowledgeBase&>(
      ::google::cloud::dialogflow::v2::_KnowledgeBase_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::KnowledgeBase& UpdateKnowledgeBaseRequest::knowledge_base() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.knowledge_base)
  return _internal_knowledge_base();
}
inline void UpdateKnowledgeBaseRequest::unsafe_arena_set_allocated_knowledge_base(
    ::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.knowledge_base_);
  }
  _impl_.knowledge_base_ = knowledge_base;
  if (knowledge_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.knowledge_base)
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* UpdateKnowledgeBaseRequest::release_knowledge_base() {
  
  ::google::cloud::dialogflow::v2::KnowledgeBase* temp = _impl_.knowledge_base_;
  _impl_.knowledge_base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* UpdateKnowledgeBaseRequest::unsafe_arena_release_knowledge_base() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.knowledge_base)
  
  ::google::cloud::dialogflow::v2::KnowledgeBase* temp = _impl_.knowledge_base_;
  _impl_.knowledge_base_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* UpdateKnowledgeBaseRequest::_internal_mutable_knowledge_base() {
  
  if (_impl_.knowledge_base_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::KnowledgeBase>(GetArenaForAllocation());
    _impl_.knowledge_base_ = p;
  }
  return _impl_.knowledge_base_;
}
inline ::google::cloud::dialogflow::v2::KnowledgeBase* UpdateKnowledgeBaseRequest::mutable_knowledge_base() {
  ::google::cloud::dialogflow::v2::KnowledgeBase* _msg = _internal_mutable_knowledge_base();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.knowledge_base)
  return _msg;
}
inline void UpdateKnowledgeBaseRequest::set_allocated_knowledge_base(::google::cloud::dialogflow::v2::KnowledgeBase* knowledge_base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.knowledge_base_;
  }
  if (knowledge_base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(knowledge_base);
    if (message_arena != submessage_arena) {
      knowledge_base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knowledge_base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.knowledge_base_ = knowledge_base;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.knowledge_base)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateKnowledgeBaseRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateKnowledgeBaseRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateKnowledgeBaseRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateKnowledgeBaseRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateKnowledgeBaseRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKnowledgeBaseRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKnowledgeBaseRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKnowledgeBaseRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKnowledgeBaseRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.update_mask)
  return _msg;
}
inline void UpdateKnowledgeBaseRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fknowledge_5fbase_2eproto
