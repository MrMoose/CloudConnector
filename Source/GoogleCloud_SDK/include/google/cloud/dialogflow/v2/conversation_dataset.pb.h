// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/conversation_dataset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/gcs.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class ConversationDataset;
struct ConversationDatasetDefaultTypeInternal;
extern ConversationDatasetDefaultTypeInternal _ConversationDataset_default_instance_;
class ConversationInfo;
struct ConversationInfoDefaultTypeInternal;
extern ConversationInfoDefaultTypeInternal _ConversationInfo_default_instance_;
class CreateConversationDatasetOperationMetadata;
struct CreateConversationDatasetOperationMetadataDefaultTypeInternal;
extern CreateConversationDatasetOperationMetadataDefaultTypeInternal _CreateConversationDatasetOperationMetadata_default_instance_;
class CreateConversationDatasetRequest;
struct CreateConversationDatasetRequestDefaultTypeInternal;
extern CreateConversationDatasetRequestDefaultTypeInternal _CreateConversationDatasetRequest_default_instance_;
class DeleteConversationDatasetOperationMetadata;
struct DeleteConversationDatasetOperationMetadataDefaultTypeInternal;
extern DeleteConversationDatasetOperationMetadataDefaultTypeInternal _DeleteConversationDatasetOperationMetadata_default_instance_;
class DeleteConversationDatasetRequest;
struct DeleteConversationDatasetRequestDefaultTypeInternal;
extern DeleteConversationDatasetRequestDefaultTypeInternal _DeleteConversationDatasetRequest_default_instance_;
class GetConversationDatasetRequest;
struct GetConversationDatasetRequestDefaultTypeInternal;
extern GetConversationDatasetRequestDefaultTypeInternal _GetConversationDatasetRequest_default_instance_;
class ImportConversationDataOperationMetadata;
struct ImportConversationDataOperationMetadataDefaultTypeInternal;
extern ImportConversationDataOperationMetadataDefaultTypeInternal _ImportConversationDataOperationMetadata_default_instance_;
class ImportConversationDataOperationResponse;
struct ImportConversationDataOperationResponseDefaultTypeInternal;
extern ImportConversationDataOperationResponseDefaultTypeInternal _ImportConversationDataOperationResponse_default_instance_;
class ImportConversationDataRequest;
struct ImportConversationDataRequestDefaultTypeInternal;
extern ImportConversationDataRequestDefaultTypeInternal _ImportConversationDataRequest_default_instance_;
class InputConfig;
struct InputConfigDefaultTypeInternal;
extern InputConfigDefaultTypeInternal _InputConfig_default_instance_;
class ListConversationDatasetsRequest;
struct ListConversationDatasetsRequestDefaultTypeInternal;
extern ListConversationDatasetsRequestDefaultTypeInternal _ListConversationDatasetsRequest_default_instance_;
class ListConversationDatasetsResponse;
struct ListConversationDatasetsResponseDefaultTypeInternal;
extern ListConversationDatasetsResponseDefaultTypeInternal _ListConversationDatasetsResponse_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::ConversationDataset* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationDataset>(Arena*);
template<> ::google::cloud::dialogflow::v2::ConversationInfo* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationInfo>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateConversationDatasetOperationMetadata* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateConversationDatasetOperationMetadata>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateConversationDatasetRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateConversationDatasetRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteConversationDatasetOperationMetadata* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteConversationDatasetOperationMetadata>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteConversationDatasetRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteConversationDatasetRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetConversationDatasetRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetConversationDatasetRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportConversationDataOperationMetadata* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportConversationDataOperationMetadata>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportConversationDataOperationResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportConversationDataOperationResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportConversationDataRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportConversationDataRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::InputConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::InputConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListConversationDatasetsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListConversationDatasetsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListConversationDatasetsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListConversationDatasetsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

// ===================================================================

class ConversationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ConversationInfo) */ {
 public:
  inline ConversationInfo() : ConversationInfo(nullptr) {}
  ~ConversationInfo() override;
  explicit PROTOBUF_CONSTEXPR ConversationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConversationInfo(const ConversationInfo& from);
  ConversationInfo(ConversationInfo&& from) noexcept
    : ConversationInfo() {
    *this = ::std::move(from);
  }

  inline ConversationInfo& operator=(const ConversationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationInfo& operator=(ConversationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConversationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConversationInfo* internal_default_instance() {
    return reinterpret_cast<const ConversationInfo*>(
               &_ConversationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConversationInfo& a, ConversationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConversationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConversationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConversationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConversationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConversationInfo& from) {
    ConversationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ConversationInfo";
  }
  protected:
  explicit ConversationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
  };
  // string language_code = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ConversationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class InputConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.InputConfig) */ {
 public:
  inline InputConfig() : InputConfig(nullptr) {}
  ~InputConfig() override;
  explicit PROTOBUF_CONSTEXPR InputConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputConfig(const InputConfig& from);
  InputConfig(InputConfig&& from) noexcept
    : InputConfig() {
    *this = ::std::move(from);
  }

  inline InputConfig& operator=(const InputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputConfig& operator=(InputConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputConfig& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kGcsSource = 1,
    SOURCE_NOT_SET = 0,
  };

  static inline const InputConfig* internal_default_instance() {
    return reinterpret_cast<const InputConfig*>(
               &_InputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputConfig& a, InputConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InputConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputConfig& from) {
    InputConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.InputConfig";
  }
  protected:
  explicit InputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGcsSourceFieldNumber = 1,
  };
  // .google.cloud.dialogflow.v2.GcsSources gcs_source = 1;
  bool has_gcs_source() const;
  private:
  bool _internal_has_gcs_source() const;
  public:
  void clear_gcs_source();
  const ::google::cloud::dialogflow::v2::GcsSources& gcs_source() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::GcsSources* release_gcs_source();
  ::google::cloud::dialogflow::v2::GcsSources* mutable_gcs_source();
  void set_allocated_gcs_source(::google::cloud::dialogflow::v2::GcsSources* gcs_source);
  private:
  const ::google::cloud::dialogflow::v2::GcsSources& _internal_gcs_source() const;
  ::google::cloud::dialogflow::v2::GcsSources* _internal_mutable_gcs_source();
  public:
  void unsafe_arena_set_allocated_gcs_source(
      ::google::cloud::dialogflow::v2::GcsSources* gcs_source);
  ::google::cloud::dialogflow::v2::GcsSources* unsafe_arena_release_gcs_source();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.InputConfig)
 private:
  class _Internal;
  void set_has_gcs_source();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::GcsSources* gcs_source_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ConversationDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ConversationDataset) */ {
 public:
  inline ConversationDataset() : ConversationDataset(nullptr) {}
  ~ConversationDataset() override;
  explicit PROTOBUF_CONSTEXPR ConversationDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConversationDataset(const ConversationDataset& from);
  ConversationDataset(ConversationDataset&& from) noexcept
    : ConversationDataset() {
    *this = ::std::move(from);
  }

  inline ConversationDataset& operator=(const ConversationDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationDataset& operator=(ConversationDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConversationDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConversationDataset* internal_default_instance() {
    return reinterpret_cast<const ConversationDataset*>(
               &_ConversationDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConversationDataset& a, ConversationDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationDataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConversationDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConversationDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConversationDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConversationDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConversationDataset& from) {
    ConversationDataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationDataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ConversationDataset";
  }
  protected:
  explicit ConversationDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
    kInputConfigFieldNumber = 5,
    kConversationInfoFieldNumber = 6,
    kConversationCountFieldNumber = 7,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string description = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.cloud.dialogflow.v2.InputConfig input_config = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_input_config() const;
  private:
  bool _internal_has_input_config() const;
  public:
  void clear_input_config();
  const ::google::cloud::dialogflow::v2::InputConfig& input_config() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::InputConfig* release_input_config();
  ::google::cloud::dialogflow::v2::InputConfig* mutable_input_config();
  void set_allocated_input_config(::google::cloud::dialogflow::v2::InputConfig* input_config);
  private:
  const ::google::cloud::dialogflow::v2::InputConfig& _internal_input_config() const;
  ::google::cloud::dialogflow::v2::InputConfig* _internal_mutable_input_config();
  public:
  void unsafe_arena_set_allocated_input_config(
      ::google::cloud::dialogflow::v2::InputConfig* input_config);
  ::google::cloud::dialogflow::v2::InputConfig* unsafe_arena_release_input_config();

  // .google.cloud.dialogflow.v2.ConversationInfo conversation_info = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_conversation_info() const;
  private:
  bool _internal_has_conversation_info() const;
  public:
  void clear_conversation_info();
  const ::google::cloud::dialogflow::v2::ConversationInfo& conversation_info() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::ConversationInfo* release_conversation_info();
  ::google::cloud::dialogflow::v2::ConversationInfo* mutable_conversation_info();
  void set_allocated_conversation_info(::google::cloud::dialogflow::v2::ConversationInfo* conversation_info);
  private:
  const ::google::cloud::dialogflow::v2::ConversationInfo& _internal_conversation_info() const;
  ::google::cloud::dialogflow::v2::ConversationInfo* _internal_mutable_conversation_info();
  public:
  void unsafe_arena_set_allocated_conversation_info(
      ::google::cloud::dialogflow::v2::ConversationInfo* conversation_info);
  ::google::cloud::dialogflow::v2::ConversationInfo* unsafe_arena_release_conversation_info();

  // int64 conversation_count = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_conversation_count();
  int64_t conversation_count() const;
  void set_conversation_count(int64_t value);
  private:
  int64_t _internal_conversation_count() const;
  void _internal_set_conversation_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ConversationDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::google::cloud::dialogflow::v2::InputConfig* input_config_;
    ::google::cloud::dialogflow::v2::ConversationInfo* conversation_info_;
    int64_t conversation_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class CreateConversationDatasetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateConversationDatasetRequest) */ {
 public:
  inline CreateConversationDatasetRequest() : CreateConversationDatasetRequest(nullptr) {}
  ~CreateConversationDatasetRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateConversationDatasetRequest(const CreateConversationDatasetRequest& from);
  CreateConversationDatasetRequest(CreateConversationDatasetRequest&& from) noexcept
    : CreateConversationDatasetRequest() {
    *this = ::std::move(from);
  }

  inline CreateConversationDatasetRequest& operator=(const CreateConversationDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConversationDatasetRequest& operator=(CreateConversationDatasetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateConversationDatasetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateConversationDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConversationDatasetRequest*>(
               &_CreateConversationDatasetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateConversationDatasetRequest& a, CreateConversationDatasetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConversationDatasetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConversationDatasetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateConversationDatasetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateConversationDatasetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateConversationDatasetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateConversationDatasetRequest& from) {
    CreateConversationDatasetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConversationDatasetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateConversationDatasetRequest";
  }
  protected:
  explicit CreateConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kConversationDatasetFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.dialogflow.v2.ConversationDataset conversation_dataset = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_conversation_dataset() const;
  private:
  bool _internal_has_conversation_dataset() const;
  public:
  void clear_conversation_dataset();
  const ::google::cloud::dialogflow::v2::ConversationDataset& conversation_dataset() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::ConversationDataset* release_conversation_dataset();
  ::google::cloud::dialogflow::v2::ConversationDataset* mutable_conversation_dataset();
  void set_allocated_conversation_dataset(::google::cloud::dialogflow::v2::ConversationDataset* conversation_dataset);
  private:
  const ::google::cloud::dialogflow::v2::ConversationDataset& _internal_conversation_dataset() const;
  ::google::cloud::dialogflow::v2::ConversationDataset* _internal_mutable_conversation_dataset();
  public:
  void unsafe_arena_set_allocated_conversation_dataset(
      ::google::cloud::dialogflow::v2::ConversationDataset* conversation_dataset);
  ::google::cloud::dialogflow::v2::ConversationDataset* unsafe_arena_release_conversation_dataset();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateConversationDatasetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::dialogflow::v2::ConversationDataset* conversation_dataset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class GetConversationDatasetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetConversationDatasetRequest) */ {
 public:
  inline GetConversationDatasetRequest() : GetConversationDatasetRequest(nullptr) {}
  ~GetConversationDatasetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConversationDatasetRequest(const GetConversationDatasetRequest& from);
  GetConversationDatasetRequest(GetConversationDatasetRequest&& from) noexcept
    : GetConversationDatasetRequest() {
    *this = ::std::move(from);
  }

  inline GetConversationDatasetRequest& operator=(const GetConversationDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConversationDatasetRequest& operator=(GetConversationDatasetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConversationDatasetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConversationDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const GetConversationDatasetRequest*>(
               &_GetConversationDatasetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetConversationDatasetRequest& a, GetConversationDatasetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConversationDatasetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConversationDatasetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConversationDatasetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConversationDatasetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConversationDatasetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConversationDatasetRequest& from) {
    GetConversationDatasetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConversationDatasetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetConversationDatasetRequest";
  }
  protected:
  explicit GetConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetConversationDatasetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ListConversationDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListConversationDatasetsRequest) */ {
 public:
  inline ListConversationDatasetsRequest() : ListConversationDatasetsRequest(nullptr) {}
  ~ListConversationDatasetsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListConversationDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConversationDatasetsRequest(const ListConversationDatasetsRequest& from);
  ListConversationDatasetsRequest(ListConversationDatasetsRequest&& from) noexcept
    : ListConversationDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline ListConversationDatasetsRequest& operator=(const ListConversationDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConversationDatasetsRequest& operator=(ListConversationDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConversationDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConversationDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConversationDatasetsRequest*>(
               &_ListConversationDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListConversationDatasetsRequest& a, ListConversationDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConversationDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConversationDatasetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConversationDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConversationDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConversationDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConversationDatasetsRequest& from) {
    ListConversationDatasetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConversationDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListConversationDatasetsRequest";
  }
  protected:
  explicit ListConversationDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListConversationDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ListConversationDatasetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListConversationDatasetsResponse) */ {
 public:
  inline ListConversationDatasetsResponse() : ListConversationDatasetsResponse(nullptr) {}
  ~ListConversationDatasetsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListConversationDatasetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConversationDatasetsResponse(const ListConversationDatasetsResponse& from);
  ListConversationDatasetsResponse(ListConversationDatasetsResponse&& from) noexcept
    : ListConversationDatasetsResponse() {
    *this = ::std::move(from);
  }

  inline ListConversationDatasetsResponse& operator=(const ListConversationDatasetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConversationDatasetsResponse& operator=(ListConversationDatasetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConversationDatasetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConversationDatasetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListConversationDatasetsResponse*>(
               &_ListConversationDatasetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListConversationDatasetsResponse& a, ListConversationDatasetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConversationDatasetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConversationDatasetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConversationDatasetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConversationDatasetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConversationDatasetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConversationDatasetsResponse& from) {
    ListConversationDatasetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConversationDatasetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListConversationDatasetsResponse";
  }
  protected:
  explicit ListConversationDatasetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationDatasetsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.ConversationDataset conversation_datasets = 1;
  int conversation_datasets_size() const;
  private:
  int _internal_conversation_datasets_size() const;
  public:
  void clear_conversation_datasets();
  ::google::cloud::dialogflow::v2::ConversationDataset* mutable_conversation_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ConversationDataset >*
      mutable_conversation_datasets();
  private:
  const ::google::cloud::dialogflow::v2::ConversationDataset& _internal_conversation_datasets(int index) const;
  ::google::cloud::dialogflow::v2::ConversationDataset* _internal_add_conversation_datasets();
  public:
  const ::google::cloud::dialogflow::v2::ConversationDataset& conversation_datasets(int index) const;
  ::google::cloud::dialogflow::v2::ConversationDataset* add_conversation_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ConversationDataset >&
      conversation_datasets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListConversationDatasetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ConversationDataset > conversation_datasets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class DeleteConversationDatasetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest) */ {
 public:
  inline DeleteConversationDatasetRequest() : DeleteConversationDatasetRequest(nullptr) {}
  ~DeleteConversationDatasetRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteConversationDatasetRequest(const DeleteConversationDatasetRequest& from);
  DeleteConversationDatasetRequest(DeleteConversationDatasetRequest&& from) noexcept
    : DeleteConversationDatasetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConversationDatasetRequest& operator=(const DeleteConversationDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConversationDatasetRequest& operator=(DeleteConversationDatasetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteConversationDatasetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteConversationDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConversationDatasetRequest*>(
               &_DeleteConversationDatasetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteConversationDatasetRequest& a, DeleteConversationDatasetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConversationDatasetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConversationDatasetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteConversationDatasetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteConversationDatasetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteConversationDatasetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteConversationDatasetRequest& from) {
    DeleteConversationDatasetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConversationDatasetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteConversationDatasetRequest";
  }
  protected:
  explicit DeleteConversationDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ImportConversationDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportConversationDataRequest) */ {
 public:
  inline ImportConversationDataRequest() : ImportConversationDataRequest(nullptr) {}
  ~ImportConversationDataRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportConversationDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConversationDataRequest(const ImportConversationDataRequest& from);
  ImportConversationDataRequest(ImportConversationDataRequest&& from) noexcept
    : ImportConversationDataRequest() {
    *this = ::std::move(from);
  }

  inline ImportConversationDataRequest& operator=(const ImportConversationDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConversationDataRequest& operator=(ImportConversationDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConversationDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportConversationDataRequest* internal_default_instance() {
    return reinterpret_cast<const ImportConversationDataRequest*>(
               &_ImportConversationDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ImportConversationDataRequest& a, ImportConversationDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConversationDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConversationDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConversationDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConversationDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportConversationDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportConversationDataRequest& from) {
    ImportConversationDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConversationDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportConversationDataRequest";
  }
  protected:
  explicit ImportConversationDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInputConfigFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.dialogflow.v2.InputConfig input_config = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_input_config() const;
  private:
  bool _internal_has_input_config() const;
  public:
  void clear_input_config();
  const ::google::cloud::dialogflow::v2::InputConfig& input_config() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::InputConfig* release_input_config();
  ::google::cloud::dialogflow::v2::InputConfig* mutable_input_config();
  void set_allocated_input_config(::google::cloud::dialogflow::v2::InputConfig* input_config);
  private:
  const ::google::cloud::dialogflow::v2::InputConfig& _internal_input_config() const;
  ::google::cloud::dialogflow::v2::InputConfig* _internal_mutable_input_config();
  public:
  void unsafe_arena_set_allocated_input_config(
      ::google::cloud::dialogflow::v2::InputConfig* input_config);
  ::google::cloud::dialogflow::v2::InputConfig* unsafe_arena_release_input_config();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportConversationDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::cloud::dialogflow::v2::InputConfig* input_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ImportConversationDataOperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata) */ {
 public:
  inline ImportConversationDataOperationMetadata() : ImportConversationDataOperationMetadata(nullptr) {}
  ~ImportConversationDataOperationMetadata() override;
  explicit PROTOBUF_CONSTEXPR ImportConversationDataOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConversationDataOperationMetadata(const ImportConversationDataOperationMetadata& from);
  ImportConversationDataOperationMetadata(ImportConversationDataOperationMetadata&& from) noexcept
    : ImportConversationDataOperationMetadata() {
    *this = ::std::move(from);
  }

  inline ImportConversationDataOperationMetadata& operator=(const ImportConversationDataOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConversationDataOperationMetadata& operator=(ImportConversationDataOperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConversationDataOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportConversationDataOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const ImportConversationDataOperationMetadata*>(
               &_ImportConversationDataOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImportConversationDataOperationMetadata& a, ImportConversationDataOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConversationDataOperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConversationDataOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConversationDataOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConversationDataOperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportConversationDataOperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportConversationDataOperationMetadata& from) {
    ImportConversationDataOperationMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConversationDataOperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata";
  }
  protected:
  explicit ImportConversationDataOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialFailuresFieldNumber = 2,
    kConversationDatasetFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
  };
  // repeated .google.rpc.Status partial_failures = 2;
  int partial_failures_size() const;
  private:
  int _internal_partial_failures_size() const;
  public:
  void clear_partial_failures();
  ::google::rpc::Status* mutable_partial_failures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
      mutable_partial_failures();
  private:
  const ::google::rpc::Status& _internal_partial_failures(int index) const;
  ::google::rpc::Status* _internal_add_partial_failures();
  public:
  const ::google::rpc::Status& partial_failures(int index) const;
  ::google::rpc::Status* add_partial_failures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
      partial_failures() const;

  // string conversation_dataset = 1 [(.google.api.resource_reference) = {
  void clear_conversation_dataset();
  const std::string& conversation_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_dataset();
  PROTOBUF_NODISCARD std::string* release_conversation_dataset();
  void set_allocated_conversation_dataset(std::string* conversation_dataset);
  private:
  const std::string& _internal_conversation_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_dataset(const std::string& value);
  std::string* _internal_mutable_conversation_dataset();
  public:

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status > partial_failures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_dataset_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class ImportConversationDataOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse) */ {
 public:
  inline ImportConversationDataOperationResponse() : ImportConversationDataOperationResponse(nullptr) {}
  ~ImportConversationDataOperationResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportConversationDataOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConversationDataOperationResponse(const ImportConversationDataOperationResponse& from);
  ImportConversationDataOperationResponse(ImportConversationDataOperationResponse&& from) noexcept
    : ImportConversationDataOperationResponse() {
    *this = ::std::move(from);
  }

  inline ImportConversationDataOperationResponse& operator=(const ImportConversationDataOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConversationDataOperationResponse& operator=(ImportConversationDataOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConversationDataOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportConversationDataOperationResponse* internal_default_instance() {
    return reinterpret_cast<const ImportConversationDataOperationResponse*>(
               &_ImportConversationDataOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ImportConversationDataOperationResponse& a, ImportConversationDataOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConversationDataOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConversationDataOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConversationDataOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConversationDataOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportConversationDataOperationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportConversationDataOperationResponse& from) {
    ImportConversationDataOperationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConversationDataOperationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportConversationDataOperationResponse";
  }
  protected:
  explicit ImportConversationDataOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationDatasetFieldNumber = 1,
    kImportCountFieldNumber = 3,
  };
  // string conversation_dataset = 1 [(.google.api.resource_reference) = {
  void clear_conversation_dataset();
  const std::string& conversation_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_dataset();
  PROTOBUF_NODISCARD std::string* release_conversation_dataset();
  void set_allocated_conversation_dataset(std::string* conversation_dataset);
  private:
  const std::string& _internal_conversation_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_dataset(const std::string& value);
  std::string* _internal_mutable_conversation_dataset();
  public:

  // int32 import_count = 3;
  void clear_import_count();
  int32_t import_count() const;
  void set_import_count(int32_t value);
  private:
  int32_t _internal_import_count() const;
  void _internal_set_import_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_dataset_;
    int32_t import_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class CreateConversationDatasetOperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata) */ {
 public:
  inline CreateConversationDatasetOperationMetadata() : CreateConversationDatasetOperationMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CreateConversationDatasetOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateConversationDatasetOperationMetadata(const CreateConversationDatasetOperationMetadata& from);
  CreateConversationDatasetOperationMetadata(CreateConversationDatasetOperationMetadata&& from) noexcept
    : CreateConversationDatasetOperationMetadata() {
    *this = ::std::move(from);
  }

  inline CreateConversationDatasetOperationMetadata& operator=(const CreateConversationDatasetOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConversationDatasetOperationMetadata& operator=(CreateConversationDatasetOperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateConversationDatasetOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateConversationDatasetOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateConversationDatasetOperationMetadata*>(
               &_CreateConversationDatasetOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateConversationDatasetOperationMetadata& a, CreateConversationDatasetOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConversationDatasetOperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConversationDatasetOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateConversationDatasetOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateConversationDatasetOperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateConversationDatasetOperationMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateConversationDatasetOperationMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata";
  }
  protected:
  explicit CreateConversationDatasetOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// -------------------------------------------------------------------

class DeleteConversationDatasetOperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata) */ {
 public:
  inline DeleteConversationDatasetOperationMetadata() : DeleteConversationDatasetOperationMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteConversationDatasetOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteConversationDatasetOperationMetadata(const DeleteConversationDatasetOperationMetadata& from);
  DeleteConversationDatasetOperationMetadata(DeleteConversationDatasetOperationMetadata&& from) noexcept
    : DeleteConversationDatasetOperationMetadata() {
    *this = ::std::move(from);
  }

  inline DeleteConversationDatasetOperationMetadata& operator=(const DeleteConversationDatasetOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConversationDatasetOperationMetadata& operator=(DeleteConversationDatasetOperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteConversationDatasetOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteConversationDatasetOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const DeleteConversationDatasetOperationMetadata*>(
               &_DeleteConversationDatasetOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteConversationDatasetOperationMetadata& a, DeleteConversationDatasetOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConversationDatasetOperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConversationDatasetOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteConversationDatasetOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteConversationDatasetOperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteConversationDatasetOperationMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteConversationDatasetOperationMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata";
  }
  protected:
  explicit DeleteConversationDatasetOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConversationInfo

// string language_code = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void ConversationInfo::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& ConversationInfo::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationInfo.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConversationInfo::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationInfo.language_code)
}
inline std::string* ConversationInfo::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationInfo.language_code)
  return _s;
}
inline const std::string& ConversationInfo::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void ConversationInfo::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ConversationInfo::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ConversationInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationInfo.language_code)
  return _impl_.language_code_.Release();
}
inline void ConversationInfo::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationInfo.language_code)
}

// -------------------------------------------------------------------

// InputConfig

// .google.cloud.dialogflow.v2.GcsSources gcs_source = 1;
inline bool InputConfig::_internal_has_gcs_source() const {
  return source_case() == kGcsSource;
}
inline bool InputConfig::has_gcs_source() const {
  return _internal_has_gcs_source();
}
inline void InputConfig::set_has_gcs_source() {
  _impl_._oneof_case_[0] = kGcsSource;
}
inline ::google::cloud::dialogflow::v2::GcsSources* InputConfig::release_gcs_source() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.InputConfig.gcs_source)
  if (_internal_has_gcs_source()) {
    clear_has_source();
    ::google::cloud::dialogflow::v2::GcsSources* temp = _impl_.source_.gcs_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.gcs_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::GcsSources& InputConfig::_internal_gcs_source() const {
  return _internal_has_gcs_source()
      ? *_impl_.source_.gcs_source_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::GcsSources&>(::google::cloud::dialogflow::v2::_GcsSources_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::GcsSources& InputConfig::gcs_source() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.InputConfig.gcs_source)
  return _internal_gcs_source();
}
inline ::google::cloud::dialogflow::v2::GcsSources* InputConfig::unsafe_arena_release_gcs_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.InputConfig.gcs_source)
  if (_internal_has_gcs_source()) {
    clear_has_source();
    ::google::cloud::dialogflow::v2::GcsSources* temp = _impl_.source_.gcs_source_;
    _impl_.source_.gcs_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputConfig::unsafe_arena_set_allocated_gcs_source(::google::cloud::dialogflow::v2::GcsSources* gcs_source) {
  clear_source();
  if (gcs_source) {
    set_has_gcs_source();
    _impl_.source_.gcs_source_ = gcs_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.InputConfig.gcs_source)
}
inline ::google::cloud::dialogflow::v2::GcsSources* InputConfig::_internal_mutable_gcs_source() {
  if (!_internal_has_gcs_source()) {
    clear_source();
    set_has_gcs_source();
    _impl_.source_.gcs_source_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::GcsSources >(GetArenaForAllocation());
  }
  return _impl_.source_.gcs_source_;
}
inline ::google::cloud::dialogflow::v2::GcsSources* InputConfig::mutable_gcs_source() {
  ::google::cloud::dialogflow::v2::GcsSources* _msg = _internal_mutable_gcs_source();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.InputConfig.gcs_source)
  return _msg;
}

inline bool InputConfig::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void InputConfig::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline InputConfig::SourceCase InputConfig::source_case() const {
  return InputConfig::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConversationDataset

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ConversationDataset::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ConversationDataset::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConversationDataset::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationDataset.name)
}
inline std::string* ConversationDataset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.name)
  return _s;
}
inline const std::string& ConversationDataset::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConversationDataset::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConversationDataset::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConversationDataset::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.name)
  return _impl_.name_.Release();
}
inline void ConversationDataset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void ConversationDataset::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& ConversationDataset::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConversationDataset::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationDataset.display_name)
}
inline std::string* ConversationDataset::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.display_name)
  return _s;
}
inline const std::string& ConversationDataset::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void ConversationDataset::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConversationDataset::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConversationDataset::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.display_name)
  return _impl_.display_name_.Release();
}
inline void ConversationDataset::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.display_name)
}

// string description = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ConversationDataset::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ConversationDataset::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConversationDataset::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationDataset.description)
}
inline std::string* ConversationDataset::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.description)
  return _s;
}
inline const std::string& ConversationDataset::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ConversationDataset::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ConversationDataset::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* ConversationDataset::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.description)
  return _impl_.description_.Release();
}
inline void ConversationDataset::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.description)
}

// .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ConversationDataset::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool ConversationDataset::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConversationDataset::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConversationDataset::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.create_time)
  return _internal_create_time();
}
inline void ConversationDataset::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConversationDataset::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConversationDataset::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConversationDataset::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConversationDataset::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.create_time)
  return _msg;
}
inline void ConversationDataset::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.create_time)
}

// .google.cloud.dialogflow.v2.InputConfig input_config = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ConversationDataset::_internal_has_input_config() const {
  return this != internal_default_instance() && _impl_.input_config_ != nullptr;
}
inline bool ConversationDataset::has_input_config() const {
  return _internal_has_input_config();
}
inline void ConversationDataset::clear_input_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_config_ != nullptr) {
    delete _impl_.input_config_;
  }
  _impl_.input_config_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::InputConfig& ConversationDataset::_internal_input_config() const {
  const ::google::cloud::dialogflow::v2::InputConfig* p = _impl_.input_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::InputConfig&>(
      ::google::cloud::dialogflow::v2::_InputConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::InputConfig& ConversationDataset::input_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.input_config)
  return _internal_input_config();
}
inline void ConversationDataset::unsafe_arena_set_allocated_input_config(
    ::google::cloud::dialogflow::v2::InputConfig* input_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_config_);
  }
  _impl_.input_config_ = input_config;
  if (input_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.input_config)
}
inline ::google::cloud::dialogflow::v2::InputConfig* ConversationDataset::release_input_config() {
  
  ::google::cloud::dialogflow::v2::InputConfig* temp = _impl_.input_config_;
  _impl_.input_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ConversationDataset::unsafe_arena_release_input_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.input_config)
  
  ::google::cloud::dialogflow::v2::InputConfig* temp = _impl_.input_config_;
  _impl_.input_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ConversationDataset::_internal_mutable_input_config() {
  
  if (_impl_.input_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::InputConfig>(GetArenaForAllocation());
    _impl_.input_config_ = p;
  }
  return _impl_.input_config_;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ConversationDataset::mutable_input_config() {
  ::google::cloud::dialogflow::v2::InputConfig* _msg = _internal_mutable_input_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.input_config)
  return _msg;
}
inline void ConversationDataset::set_allocated_input_config(::google::cloud::dialogflow::v2::InputConfig* input_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_config_;
  }
  if (input_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input_config);
    if (message_arena != submessage_arena) {
      input_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_config_ = input_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.input_config)
}

// .google.cloud.dialogflow.v2.ConversationInfo conversation_info = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ConversationDataset::_internal_has_conversation_info() const {
  return this != internal_default_instance() && _impl_.conversation_info_ != nullptr;
}
inline bool ConversationDataset::has_conversation_info() const {
  return _internal_has_conversation_info();
}
inline void ConversationDataset::clear_conversation_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.conversation_info_ != nullptr) {
    delete _impl_.conversation_info_;
  }
  _impl_.conversation_info_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::ConversationInfo& ConversationDataset::_internal_conversation_info() const {
  const ::google::cloud::dialogflow::v2::ConversationInfo* p = _impl_.conversation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::ConversationInfo&>(
      ::google::cloud::dialogflow::v2::_ConversationInfo_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::ConversationInfo& ConversationDataset::conversation_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.conversation_info)
  return _internal_conversation_info();
}
inline void ConversationDataset::unsafe_arena_set_allocated_conversation_info(
    ::google::cloud::dialogflow::v2::ConversationInfo* conversation_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conversation_info_);
  }
  _impl_.conversation_info_ = conversation_info;
  if (conversation_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.conversation_info)
}
inline ::google::cloud::dialogflow::v2::ConversationInfo* ConversationDataset::release_conversation_info() {
  
  ::google::cloud::dialogflow::v2::ConversationInfo* temp = _impl_.conversation_info_;
  _impl_.conversation_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationInfo* ConversationDataset::unsafe_arena_release_conversation_info() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationDataset.conversation_info)
  
  ::google::cloud::dialogflow::v2::ConversationInfo* temp = _impl_.conversation_info_;
  _impl_.conversation_info_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationInfo* ConversationDataset::_internal_mutable_conversation_info() {
  
  if (_impl_.conversation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationInfo>(GetArenaForAllocation());
    _impl_.conversation_info_ = p;
  }
  return _impl_.conversation_info_;
}
inline ::google::cloud::dialogflow::v2::ConversationInfo* ConversationDataset::mutable_conversation_info() {
  ::google::cloud::dialogflow::v2::ConversationInfo* _msg = _internal_mutable_conversation_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationDataset.conversation_info)
  return _msg;
}
inline void ConversationDataset::set_allocated_conversation_info(::google::cloud::dialogflow::v2::ConversationInfo* conversation_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conversation_info_;
  }
  if (conversation_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conversation_info);
    if (message_arena != submessage_arena) {
      conversation_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conversation_info_ = conversation_info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationDataset.conversation_info)
}

// int64 conversation_count = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ConversationDataset::clear_conversation_count() {
  _impl_.conversation_count_ = int64_t{0};
}
inline int64_t ConversationDataset::_internal_conversation_count() const {
  return _impl_.conversation_count_;
}
inline int64_t ConversationDataset::conversation_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationDataset.conversation_count)
  return _internal_conversation_count();
}
inline void ConversationDataset::_internal_set_conversation_count(int64_t value) {
  
  _impl_.conversation_count_ = value;
}
inline void ConversationDataset::set_conversation_count(int64_t value) {
  _internal_set_conversation_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationDataset.conversation_count)
}

// -------------------------------------------------------------------

// CreateConversationDatasetRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CreateConversationDatasetRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateConversationDatasetRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateConversationDatasetRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.parent)
}
inline std::string* CreateConversationDatasetRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.parent)
  return _s;
}
inline const std::string& CreateConversationDatasetRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateConversationDatasetRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateConversationDatasetRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateConversationDatasetRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateConversationDatasetRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.parent)
}

// .google.cloud.dialogflow.v2.ConversationDataset conversation_dataset = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateConversationDatasetRequest::_internal_has_conversation_dataset() const {
  return this != internal_default_instance() && _impl_.conversation_dataset_ != nullptr;
}
inline bool CreateConversationDatasetRequest::has_conversation_dataset() const {
  return _internal_has_conversation_dataset();
}
inline void CreateConversationDatasetRequest::clear_conversation_dataset() {
  if (GetArenaForAllocation() == nullptr && _impl_.conversation_dataset_ != nullptr) {
    delete _impl_.conversation_dataset_;
  }
  _impl_.conversation_dataset_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::ConversationDataset& CreateConversationDatasetRequest::_internal_conversation_dataset() const {
  const ::google::cloud::dialogflow::v2::ConversationDataset* p = _impl_.conversation_dataset_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::ConversationDataset&>(
      ::google::cloud::dialogflow::v2::_ConversationDataset_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::ConversationDataset& CreateConversationDatasetRequest::conversation_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.conversation_dataset)
  return _internal_conversation_dataset();
}
inline void CreateConversationDatasetRequest::unsafe_arena_set_allocated_conversation_dataset(
    ::google::cloud::dialogflow::v2::ConversationDataset* conversation_dataset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conversation_dataset_);
  }
  _impl_.conversation_dataset_ = conversation_dataset;
  if (conversation_dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.conversation_dataset)
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* CreateConversationDatasetRequest::release_conversation_dataset() {
  
  ::google::cloud::dialogflow::v2::ConversationDataset* temp = _impl_.conversation_dataset_;
  _impl_.conversation_dataset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* CreateConversationDatasetRequest::unsafe_arena_release_conversation_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.conversation_dataset)
  
  ::google::cloud::dialogflow::v2::ConversationDataset* temp = _impl_.conversation_dataset_;
  _impl_.conversation_dataset_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* CreateConversationDatasetRequest::_internal_mutable_conversation_dataset() {
  
  if (_impl_.conversation_dataset_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationDataset>(GetArenaForAllocation());
    _impl_.conversation_dataset_ = p;
  }
  return _impl_.conversation_dataset_;
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* CreateConversationDatasetRequest::mutable_conversation_dataset() {
  ::google::cloud::dialogflow::v2::ConversationDataset* _msg = _internal_mutable_conversation_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.conversation_dataset)
  return _msg;
}
inline void CreateConversationDatasetRequest::set_allocated_conversation_dataset(::google::cloud::dialogflow::v2::ConversationDataset* conversation_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conversation_dataset_;
  }
  if (conversation_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conversation_dataset);
    if (message_arena != submessage_arena) {
      conversation_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_dataset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conversation_dataset_ = conversation_dataset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateConversationDatasetRequest.conversation_dataset)
}

// -------------------------------------------------------------------

// GetConversationDatasetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetConversationDatasetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetConversationDatasetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetConversationDatasetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConversationDatasetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetConversationDatasetRequest.name)
}
inline std::string* GetConversationDatasetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetConversationDatasetRequest.name)
  return _s;
}
inline const std::string& GetConversationDatasetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetConversationDatasetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConversationDatasetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConversationDatasetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetConversationDatasetRequest.name)
  return _impl_.name_.Release();
}
inline void GetConversationDatasetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetConversationDatasetRequest.name)
}

// -------------------------------------------------------------------

// ListConversationDatasetsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListConversationDatasetsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListConversationDatasetsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConversationDatasetsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.parent)
}
inline std::string* ListConversationDatasetsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.parent)
  return _s;
}
inline const std::string& ListConversationDatasetsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListConversationDatasetsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListConversationDatasetsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListConversationDatasetsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListConversationDatasetsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListConversationDatasetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_size)
  return _internal_page_size();
}
inline void ListConversationDatasetsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListConversationDatasetsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListConversationDatasetsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListConversationDatasetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConversationDatasetsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_token)
}
inline std::string* ListConversationDatasetsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_token)
  return _s;
}
inline const std::string& ListConversationDatasetsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListConversationDatasetsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListConversationDatasetsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationDatasetsRequest.page_token)
}

// -------------------------------------------------------------------

// ListConversationDatasetsResponse

// repeated .google.cloud.dialogflow.v2.ConversationDataset conversation_datasets = 1;
inline int ListConversationDatasetsResponse::_internal_conversation_datasets_size() const {
  return _impl_.conversation_datasets_.size();
}
inline int ListConversationDatasetsResponse::conversation_datasets_size() const {
  return _internal_conversation_datasets_size();
}
inline void ListConversationDatasetsResponse::clear_conversation_datasets() {
  _impl_.conversation_datasets_.Clear();
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* ListConversationDatasetsResponse::mutable_conversation_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.conversation_datasets)
  return _impl_.conversation_datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ConversationDataset >*
ListConversationDatasetsResponse::mutable_conversation_datasets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.conversation_datasets)
  return &_impl_.conversation_datasets_;
}
inline const ::google::cloud::dialogflow::v2::ConversationDataset& ListConversationDatasetsResponse::_internal_conversation_datasets(int index) const {
  return _impl_.conversation_datasets_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::ConversationDataset& ListConversationDatasetsResponse::conversation_datasets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.conversation_datasets)
  return _internal_conversation_datasets(index);
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* ListConversationDatasetsResponse::_internal_add_conversation_datasets() {
  return _impl_.conversation_datasets_.Add();
}
inline ::google::cloud::dialogflow::v2::ConversationDataset* ListConversationDatasetsResponse::add_conversation_datasets() {
  ::google::cloud::dialogflow::v2::ConversationDataset* _add = _internal_add_conversation_datasets();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.conversation_datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ConversationDataset >&
ListConversationDatasetsResponse::conversation_datasets() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.conversation_datasets)
  return _impl_.conversation_datasets_;
}

// string next_page_token = 2;
inline void ListConversationDatasetsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListConversationDatasetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConversationDatasetsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.next_page_token)
}
inline std::string* ListConversationDatasetsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.next_page_token)
  return _s;
}
inline const std::string& ListConversationDatasetsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListConversationDatasetsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConversationDatasetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListConversationDatasetsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationDatasetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteConversationDatasetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteConversationDatasetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteConversationDatasetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteConversationDatasetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest.name)
}
inline std::string* DeleteConversationDatasetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest.name)
  return _s;
}
inline const std::string& DeleteConversationDatasetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteConversationDatasetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteConversationDatasetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteConversationDatasetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteConversationDatasetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteConversationDatasetRequest.name)
}

// -------------------------------------------------------------------

// ImportConversationDataRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ImportConversationDataRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ImportConversationDataRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportConversationDataRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportConversationDataRequest.name)
}
inline std::string* ImportConversationDataRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataRequest.name)
  return _s;
}
inline const std::string& ImportConversationDataRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ImportConversationDataRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportConversationDataRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportConversationDataRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportConversationDataRequest.name)
  return _impl_.name_.Release();
}
inline void ImportConversationDataRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataRequest.name)
}

// .google.cloud.dialogflow.v2.InputConfig input_config = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool ImportConversationDataRequest::_internal_has_input_config() const {
  return this != internal_default_instance() && _impl_.input_config_ != nullptr;
}
inline bool ImportConversationDataRequest::has_input_config() const {
  return _internal_has_input_config();
}
inline void ImportConversationDataRequest::clear_input_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_config_ != nullptr) {
    delete _impl_.input_config_;
  }
  _impl_.input_config_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::InputConfig& ImportConversationDataRequest::_internal_input_config() const {
  const ::google::cloud::dialogflow::v2::InputConfig* p = _impl_.input_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::InputConfig&>(
      ::google::cloud::dialogflow::v2::_InputConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::InputConfig& ImportConversationDataRequest::input_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataRequest.input_config)
  return _internal_input_config();
}
inline void ImportConversationDataRequest::unsafe_arena_set_allocated_input_config(
    ::google::cloud::dialogflow::v2::InputConfig* input_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_config_);
  }
  _impl_.input_config_ = input_config;
  if (input_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataRequest.input_config)
}
inline ::google::cloud::dialogflow::v2::InputConfig* ImportConversationDataRequest::release_input_config() {
  
  ::google::cloud::dialogflow::v2::InputConfig* temp = _impl_.input_config_;
  _impl_.input_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ImportConversationDataRequest::unsafe_arena_release_input_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportConversationDataRequest.input_config)
  
  ::google::cloud::dialogflow::v2::InputConfig* temp = _impl_.input_config_;
  _impl_.input_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ImportConversationDataRequest::_internal_mutable_input_config() {
  
  if (_impl_.input_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::InputConfig>(GetArenaForAllocation());
    _impl_.input_config_ = p;
  }
  return _impl_.input_config_;
}
inline ::google::cloud::dialogflow::v2::InputConfig* ImportConversationDataRequest::mutable_input_config() {
  ::google::cloud::dialogflow::v2::InputConfig* _msg = _internal_mutable_input_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataRequest.input_config)
  return _msg;
}
inline void ImportConversationDataRequest::set_allocated_input_config(::google::cloud::dialogflow::v2::InputConfig* input_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_config_;
  }
  if (input_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input_config);
    if (message_arena != submessage_arena) {
      input_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_config_ = input_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataRequest.input_config)
}

// -------------------------------------------------------------------

// ImportConversationDataOperationMetadata

// string conversation_dataset = 1 [(.google.api.resource_reference) = {
inline void ImportConversationDataOperationMetadata::clear_conversation_dataset() {
  _impl_.conversation_dataset_.ClearToEmpty();
}
inline const std::string& ImportConversationDataOperationMetadata::conversation_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.conversation_dataset)
  return _internal_conversation_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportConversationDataOperationMetadata::set_conversation_dataset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.conversation_dataset)
}
inline std::string* ImportConversationDataOperationMetadata::mutable_conversation_dataset() {
  std::string* _s = _internal_mutable_conversation_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.conversation_dataset)
  return _s;
}
inline const std::string& ImportConversationDataOperationMetadata::_internal_conversation_dataset() const {
  return _impl_.conversation_dataset_.Get();
}
inline void ImportConversationDataOperationMetadata::_internal_set_conversation_dataset(const std::string& value) {
  
  _impl_.conversation_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportConversationDataOperationMetadata::_internal_mutable_conversation_dataset() {
  
  return _impl_.conversation_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportConversationDataOperationMetadata::release_conversation_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.conversation_dataset)
  return _impl_.conversation_dataset_.Release();
}
inline void ImportConversationDataOperationMetadata::set_allocated_conversation_dataset(std::string* conversation_dataset) {
  if (conversation_dataset != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_dataset_.SetAllocated(conversation_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_dataset_.IsDefault()) {
    _impl_.conversation_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.conversation_dataset)
}

// repeated .google.rpc.Status partial_failures = 2;
inline int ImportConversationDataOperationMetadata::_internal_partial_failures_size() const {
  return _impl_.partial_failures_.size();
}
inline int ImportConversationDataOperationMetadata::partial_failures_size() const {
  return _internal_partial_failures_size();
}
inline ::google::rpc::Status* ImportConversationDataOperationMetadata::mutable_partial_failures(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.partial_failures)
  return _impl_.partial_failures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
ImportConversationDataOperationMetadata::mutable_partial_failures() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.partial_failures)
  return &_impl_.partial_failures_;
}
inline const ::google::rpc::Status& ImportConversationDataOperationMetadata::_internal_partial_failures(int index) const {
  return _impl_.partial_failures_.Get(index);
}
inline const ::google::rpc::Status& ImportConversationDataOperationMetadata::partial_failures(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.partial_failures)
  return _internal_partial_failures(index);
}
inline ::google::rpc::Status* ImportConversationDataOperationMetadata::_internal_add_partial_failures() {
  return _impl_.partial_failures_.Add();
}
inline ::google::rpc::Status* ImportConversationDataOperationMetadata::add_partial_failures() {
  ::google::rpc::Status* _add = _internal_add_partial_failures();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.partial_failures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
ImportConversationDataOperationMetadata::partial_failures() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.partial_failures)
  return _impl_.partial_failures_;
}

// .google.protobuf.Timestamp create_time = 3;
inline bool ImportConversationDataOperationMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool ImportConversationDataOperationMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ImportConversationDataOperationMetadata::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ImportConversationDataOperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.create_time)
  return _internal_create_time();
}
inline void ImportConversationDataOperationMetadata::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImportConversationDataOperationMetadata::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImportConversationDataOperationMetadata::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImportConversationDataOperationMetadata::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImportConversationDataOperationMetadata::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.create_time)
  return _msg;
}
inline void ImportConversationDataOperationMetadata::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata.create_time)
}

// -------------------------------------------------------------------

// ImportConversationDataOperationResponse

// string conversation_dataset = 1 [(.google.api.resource_reference) = {
inline void ImportConversationDataOperationResponse::clear_conversation_dataset() {
  _impl_.conversation_dataset_.ClearToEmpty();
}
inline const std::string& ImportConversationDataOperationResponse::conversation_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.conversation_dataset)
  return _internal_conversation_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportConversationDataOperationResponse::set_conversation_dataset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.conversation_dataset)
}
inline std::string* ImportConversationDataOperationResponse::mutable_conversation_dataset() {
  std::string* _s = _internal_mutable_conversation_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.conversation_dataset)
  return _s;
}
inline const std::string& ImportConversationDataOperationResponse::_internal_conversation_dataset() const {
  return _impl_.conversation_dataset_.Get();
}
inline void ImportConversationDataOperationResponse::_internal_set_conversation_dataset(const std::string& value) {
  
  _impl_.conversation_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportConversationDataOperationResponse::_internal_mutable_conversation_dataset() {
  
  return _impl_.conversation_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportConversationDataOperationResponse::release_conversation_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.conversation_dataset)
  return _impl_.conversation_dataset_.Release();
}
inline void ImportConversationDataOperationResponse::set_allocated_conversation_dataset(std::string* conversation_dataset) {
  if (conversation_dataset != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_dataset_.SetAllocated(conversation_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_dataset_.IsDefault()) {
    _impl_.conversation_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.conversation_dataset)
}

// int32 import_count = 3;
inline void ImportConversationDataOperationResponse::clear_import_count() {
  _impl_.import_count_ = 0;
}
inline int32_t ImportConversationDataOperationResponse::_internal_import_count() const {
  return _impl_.import_count_;
}
inline int32_t ImportConversationDataOperationResponse::import_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.import_count)
  return _internal_import_count();
}
inline void ImportConversationDataOperationResponse::_internal_set_import_count(int32_t value) {
  
  _impl_.import_count_ = value;
}
inline void ImportConversationDataOperationResponse::set_import_count(int32_t value) {
  _internal_set_import_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportConversationDataOperationResponse.import_count)
}

// -------------------------------------------------------------------

// CreateConversationDatasetOperationMetadata

// -------------------------------------------------------------------

// DeleteConversationDatasetOperationMetadata

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_5fdataset_2eproto
