// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/participant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/audio_config.pb.h"
#include "google/cloud/dialogflow/v2/session.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class AnalyzeContentRequest;
struct AnalyzeContentRequestDefaultTypeInternal;
extern AnalyzeContentRequestDefaultTypeInternal _AnalyzeContentRequest_default_instance_;
class AnalyzeContentResponse;
struct AnalyzeContentResponseDefaultTypeInternal;
extern AnalyzeContentResponseDefaultTypeInternal _AnalyzeContentResponse_default_instance_;
class AnnotatedMessagePart;
struct AnnotatedMessagePartDefaultTypeInternal;
extern AnnotatedMessagePartDefaultTypeInternal _AnnotatedMessagePart_default_instance_;
class ArticleAnswer;
struct ArticleAnswerDefaultTypeInternal;
extern ArticleAnswerDefaultTypeInternal _ArticleAnswer_default_instance_;
class ArticleAnswer_MetadataEntry_DoNotUse;
struct ArticleAnswer_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ArticleAnswer_MetadataEntry_DoNotUseDefaultTypeInternal _ArticleAnswer_MetadataEntry_DoNotUse_default_instance_;
class AssistQueryParameters;
struct AssistQueryParametersDefaultTypeInternal;
extern AssistQueryParametersDefaultTypeInternal _AssistQueryParameters_default_instance_;
class AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse;
struct AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUseDefaultTypeInternal;
extern AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUseDefaultTypeInternal _AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse_default_instance_;
class AutomatedAgentReply;
struct AutomatedAgentReplyDefaultTypeInternal;
extern AutomatedAgentReplyDefaultTypeInternal _AutomatedAgentReply_default_instance_;
class CreateParticipantRequest;
struct CreateParticipantRequestDefaultTypeInternal;
extern CreateParticipantRequestDefaultTypeInternal _CreateParticipantRequest_default_instance_;
class DtmfParameters;
struct DtmfParametersDefaultTypeInternal;
extern DtmfParametersDefaultTypeInternal _DtmfParameters_default_instance_;
class FaqAnswer;
struct FaqAnswerDefaultTypeInternal;
extern FaqAnswerDefaultTypeInternal _FaqAnswer_default_instance_;
class FaqAnswer_MetadataEntry_DoNotUse;
struct FaqAnswer_MetadataEntry_DoNotUseDefaultTypeInternal;
extern FaqAnswer_MetadataEntry_DoNotUseDefaultTypeInternal _FaqAnswer_MetadataEntry_DoNotUse_default_instance_;
class GetParticipantRequest;
struct GetParticipantRequestDefaultTypeInternal;
extern GetParticipantRequestDefaultTypeInternal _GetParticipantRequest_default_instance_;
class ListParticipantsRequest;
struct ListParticipantsRequestDefaultTypeInternal;
extern ListParticipantsRequestDefaultTypeInternal _ListParticipantsRequest_default_instance_;
class ListParticipantsResponse;
struct ListParticipantsResponseDefaultTypeInternal;
extern ListParticipantsResponseDefaultTypeInternal _ListParticipantsResponse_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageAnnotation;
struct MessageAnnotationDefaultTypeInternal;
extern MessageAnnotationDefaultTypeInternal _MessageAnnotation_default_instance_;
class OutputAudio;
struct OutputAudioDefaultTypeInternal;
extern OutputAudioDefaultTypeInternal _OutputAudio_default_instance_;
class Participant;
struct ParticipantDefaultTypeInternal;
extern ParticipantDefaultTypeInternal _Participant_default_instance_;
class Participant_DocumentsMetadataFiltersEntry_DoNotUse;
struct Participant_DocumentsMetadataFiltersEntry_DoNotUseDefaultTypeInternal;
extern Participant_DocumentsMetadataFiltersEntry_DoNotUseDefaultTypeInternal _Participant_DocumentsMetadataFiltersEntry_DoNotUse_default_instance_;
class SmartReplyAnswer;
struct SmartReplyAnswerDefaultTypeInternal;
extern SmartReplyAnswerDefaultTypeInternal _SmartReplyAnswer_default_instance_;
class SuggestArticlesRequest;
struct SuggestArticlesRequestDefaultTypeInternal;
extern SuggestArticlesRequestDefaultTypeInternal _SuggestArticlesRequest_default_instance_;
class SuggestArticlesResponse;
struct SuggestArticlesResponseDefaultTypeInternal;
extern SuggestArticlesResponseDefaultTypeInternal _SuggestArticlesResponse_default_instance_;
class SuggestFaqAnswersRequest;
struct SuggestFaqAnswersRequestDefaultTypeInternal;
extern SuggestFaqAnswersRequestDefaultTypeInternal _SuggestFaqAnswersRequest_default_instance_;
class SuggestFaqAnswersResponse;
struct SuggestFaqAnswersResponseDefaultTypeInternal;
extern SuggestFaqAnswersResponseDefaultTypeInternal _SuggestFaqAnswersResponse_default_instance_;
class SuggestSmartRepliesRequest;
struct SuggestSmartRepliesRequestDefaultTypeInternal;
extern SuggestSmartRepliesRequestDefaultTypeInternal _SuggestSmartRepliesRequest_default_instance_;
class SuggestSmartRepliesResponse;
struct SuggestSmartRepliesResponseDefaultTypeInternal;
extern SuggestSmartRepliesResponseDefaultTypeInternal _SuggestSmartRepliesResponse_default_instance_;
class SuggestionResult;
struct SuggestionResultDefaultTypeInternal;
extern SuggestionResultDefaultTypeInternal _SuggestionResult_default_instance_;
class UpdateParticipantRequest;
struct UpdateParticipantRequestDefaultTypeInternal;
extern UpdateParticipantRequestDefaultTypeInternal _UpdateParticipantRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::AnalyzeContentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AnalyzeContentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::AnalyzeContentResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AnalyzeContentResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::AnnotatedMessagePart* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AnnotatedMessagePart>(Arena*);
template<> ::google::cloud::dialogflow::v2::ArticleAnswer* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ArticleAnswer>(Arena*);
template<> ::google::cloud::dialogflow::v2::ArticleAnswer_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ArticleAnswer_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::AssistQueryParameters* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AssistQueryParameters>(Arena*);
template<> ::google::cloud::dialogflow::v2::AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::AutomatedAgentReply* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AutomatedAgentReply>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateParticipantRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateParticipantRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DtmfParameters* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DtmfParameters>(Arena*);
template<> ::google::cloud::dialogflow::v2::FaqAnswer* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::FaqAnswer>(Arena*);
template<> ::google::cloud::dialogflow::v2::FaqAnswer_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::FaqAnswer_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetParticipantRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetParticipantRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListParticipantsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListParticipantsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListParticipantsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListParticipantsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::Message* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Message>(Arena*);
template<> ::google::cloud::dialogflow::v2::MessageAnnotation* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::MessageAnnotation>(Arena*);
template<> ::google::cloud::dialogflow::v2::OutputAudio* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudio>(Arena*);
template<> ::google::cloud::dialogflow::v2::Participant* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Participant>(Arena*);
template<> ::google::cloud::dialogflow::v2::Participant_DocumentsMetadataFiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Participant_DocumentsMetadataFiltersEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::SmartReplyAnswer* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SmartReplyAnswer>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestArticlesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestArticlesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestArticlesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestArticlesResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestFaqAnswersRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestFaqAnswersRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestSmartRepliesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestSmartRepliesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::SuggestionResult* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SuggestionResult>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateParticipantRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateParticipantRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Participant_Role : int {
  Participant_Role_ROLE_UNSPECIFIED = 0,
  Participant_Role_HUMAN_AGENT = 1,
  Participant_Role_AUTOMATED_AGENT = 2,
  Participant_Role_END_USER = 3,
  Participant_Role_Participant_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Participant_Role_Participant_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Participant_Role_IsValid(int value);
constexpr Participant_Role Participant_Role_Role_MIN = Participant_Role_ROLE_UNSPECIFIED;
constexpr Participant_Role Participant_Role_Role_MAX = Participant_Role_END_USER;
constexpr int Participant_Role_Role_ARRAYSIZE = Participant_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Participant_Role_descriptor();
template<typename T>
inline const std::string& Participant_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Participant_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Participant_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Participant_Role_descriptor(), enum_t_value);
}
inline bool Participant_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Participant_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Participant_Role>(
    Participant_Role_descriptor(), name, value);
}
enum AutomatedAgentReply_AutomatedAgentReplyType : int {
  AutomatedAgentReply_AutomatedAgentReplyType_AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED = 0,
  AutomatedAgentReply_AutomatedAgentReplyType_PARTIAL = 1,
  AutomatedAgentReply_AutomatedAgentReplyType_FINAL = 2,
  AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReply_AutomatedAgentReplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReply_AutomatedAgentReplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AutomatedAgentReply_AutomatedAgentReplyType_IsValid(int value);
constexpr AutomatedAgentReply_AutomatedAgentReplyType AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_MIN = AutomatedAgentReply_AutomatedAgentReplyType_AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED;
constexpr AutomatedAgentReply_AutomatedAgentReplyType AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_MAX = AutomatedAgentReply_AutomatedAgentReplyType_FINAL;
constexpr int AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_ARRAYSIZE = AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutomatedAgentReply_AutomatedAgentReplyType_descriptor();
template<typename T>
inline const std::string& AutomatedAgentReply_AutomatedAgentReplyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutomatedAgentReply_AutomatedAgentReplyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutomatedAgentReply_AutomatedAgentReplyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutomatedAgentReply_AutomatedAgentReplyType_descriptor(), enum_t_value);
}
inline bool AutomatedAgentReply_AutomatedAgentReplyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutomatedAgentReply_AutomatedAgentReplyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutomatedAgentReply_AutomatedAgentReplyType>(
    AutomatedAgentReply_AutomatedAgentReplyType_descriptor(), name, value);
}
// ===================================================================

class Participant_DocumentsMetadataFiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Participant_DocumentsMetadataFiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Participant_DocumentsMetadataFiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Participant_DocumentsMetadataFiltersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Participant_DocumentsMetadataFiltersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Participant_DocumentsMetadataFiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Participant_DocumentsMetadataFiltersEntry_DoNotUse& other);
  static const Participant_DocumentsMetadataFiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Participant_DocumentsMetadataFiltersEntry_DoNotUse*>(&_Participant_DocumentsMetadataFiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Participant.DocumentsMetadataFiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Participant.DocumentsMetadataFiltersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};

// -------------------------------------------------------------------

class Participant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Participant) */ {
 public:
  inline Participant() : Participant(nullptr) {}
  ~Participant() override;
  explicit PROTOBUF_CONSTEXPR Participant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Participant(const Participant& from);
  Participant(Participant&& from) noexcept
    : Participant() {
    *this = ::std::move(from);
  }

  inline Participant& operator=(const Participant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Participant& operator=(Participant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Participant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Participant* internal_default_instance() {
    return reinterpret_cast<const Participant*>(
               &_Participant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Participant& a, Participant& b) {
    a.Swap(&b);
  }
  inline void Swap(Participant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Participant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Participant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Participant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Participant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Participant& from) {
    Participant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Participant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Participant";
  }
  protected:
  explicit Participant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Participant_Role Role;
  static constexpr Role ROLE_UNSPECIFIED =
    Participant_Role_ROLE_UNSPECIFIED;
  static constexpr Role HUMAN_AGENT =
    Participant_Role_HUMAN_AGENT;
  static constexpr Role AUTOMATED_AGENT =
    Participant_Role_AUTOMATED_AGENT;
  static constexpr Role END_USER =
    Participant_Role_END_USER;
  static inline bool Role_IsValid(int value) {
    return Participant_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    Participant_Role_Role_MIN;
  static constexpr Role Role_MAX =
    Participant_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    Participant_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return Participant_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return Participant_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Role* value) {
    return Participant_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsMetadataFiltersFieldNumber = 8,
    kNameFieldNumber = 1,
    kSipRecordingMediaLabelFieldNumber = 6,
    kRoleFieldNumber = 2,
  };
  // map<string, string> documents_metadata_filters = 8 [(.google.api.field_behavior) = OPTIONAL];
  int documents_metadata_filters_size() const;
  private:
  int _internal_documents_metadata_filters_size() const;
  public:
  void clear_documents_metadata_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_documents_metadata_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_documents_metadata_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      documents_metadata_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_documents_metadata_filters();

  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sip_recording_media_label = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_sip_recording_media_label();
  const std::string& sip_recording_media_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sip_recording_media_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sip_recording_media_label();
  PROTOBUF_NODISCARD std::string* release_sip_recording_media_label();
  void set_allocated_sip_recording_media_label(std::string* sip_recording_media_label);
  private:
  const std::string& _internal_sip_recording_media_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sip_recording_media_label(const std::string& value);
  std::string* _internal_mutable_sip_recording_media_label();
  public:

  // .google.cloud.dialogflow.v2.Participant.Role role = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_role();
  ::google::cloud::dialogflow::v2::Participant_Role role() const;
  void set_role(::google::cloud::dialogflow::v2::Participant_Role value);
  private:
  ::google::cloud::dialogflow::v2::Participant_Role _internal_role() const;
  void _internal_set_role(::google::cloud::dialogflow::v2::Participant_Role value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Participant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Participant_DocumentsMetadataFiltersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> documents_metadata_filters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_recording_media_label_;
    int role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kLanguageCodeFieldNumber = 3,
    kParticipantFieldNumber = 4,
    kCreateTimeFieldNumber = 6,
    kMessageAnnotationFieldNumber = 7,
    kSentimentAnalysisFieldNumber = 8,
    kSendTimeFieldNumber = 9,
    kParticipantRoleFieldNumber = 5,
  };
  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string participant = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_participant();
  const std::string& participant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* participant);
  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(const std::string& value);
  std::string* _internal_mutable_participant();
  public:

  // .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.cloud.dialogflow.v2.MessageAnnotation message_annotation = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_message_annotation() const;
  private:
  bool _internal_has_message_annotation() const;
  public:
  void clear_message_annotation();
  const ::google::cloud::dialogflow::v2::MessageAnnotation& message_annotation() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::MessageAnnotation* release_message_annotation();
  ::google::cloud::dialogflow::v2::MessageAnnotation* mutable_message_annotation();
  void set_allocated_message_annotation(::google::cloud::dialogflow::v2::MessageAnnotation* message_annotation);
  private:
  const ::google::cloud::dialogflow::v2::MessageAnnotation& _internal_message_annotation() const;
  ::google::cloud::dialogflow::v2::MessageAnnotation* _internal_mutable_message_annotation();
  public:
  void unsafe_arena_set_allocated_message_annotation(
      ::google::cloud::dialogflow::v2::MessageAnnotation* message_annotation);
  ::google::cloud::dialogflow::v2::MessageAnnotation* unsafe_arena_release_message_annotation();

  // .google.cloud.dialogflow.v2.SentimentAnalysisResult sentiment_analysis = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_sentiment_analysis() const;
  private:
  bool _internal_has_sentiment_analysis() const;
  public:
  void clear_sentiment_analysis();
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& sentiment_analysis() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::SentimentAnalysisResult* release_sentiment_analysis();
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* mutable_sentiment_analysis();
  void set_allocated_sentiment_analysis(::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis);
  private:
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& _internal_sentiment_analysis() const;
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* _internal_mutable_sentiment_analysis();
  public:
  void unsafe_arena_set_allocated_sentiment_analysis(
      ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis);
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* unsafe_arena_release_sentiment_analysis();

  // .google.protobuf.Timestamp send_time = 9 [(.google.api.field_behavior) = OPTIONAL];
  bool has_send_time() const;
  private:
  bool _internal_has_send_time() const;
  public:
  void clear_send_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& send_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_send_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_send_time();
  void set_allocated_send_time(::PROTOBUF_NAMESPACE_ID::Timestamp* send_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_send_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_send_time();
  public:
  void unsafe_arena_set_allocated_send_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* send_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_send_time();

  // .google.cloud.dialogflow.v2.Participant.Role participant_role = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_participant_role();
  ::google::cloud::dialogflow::v2::Participant_Role participant_role() const;
  void set_participant_role(::google::cloud::dialogflow::v2::Participant_Role value);
  private:
  ::google::cloud::dialogflow::v2::Participant_Role _internal_participant_role() const;
  void _internal_set_participant_role(::google::cloud::dialogflow::v2::Participant_Role value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::google::cloud::dialogflow::v2::MessageAnnotation* message_annotation_;
    ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* send_time_;
    int participant_role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class CreateParticipantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateParticipantRequest) */ {
 public:
  inline CreateParticipantRequest() : CreateParticipantRequest(nullptr) {}
  ~CreateParticipantRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateParticipantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateParticipantRequest(const CreateParticipantRequest& from);
  CreateParticipantRequest(CreateParticipantRequest&& from) noexcept
    : CreateParticipantRequest() {
    *this = ::std::move(from);
  }

  inline CreateParticipantRequest& operator=(const CreateParticipantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateParticipantRequest& operator=(CreateParticipantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateParticipantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateParticipantRequest* internal_default_instance() {
    return reinterpret_cast<const CreateParticipantRequest*>(
               &_CreateParticipantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateParticipantRequest& a, CreateParticipantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateParticipantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateParticipantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateParticipantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateParticipantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateParticipantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateParticipantRequest& from) {
    CreateParticipantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateParticipantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateParticipantRequest";
  }
  protected:
  explicit CreateParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kParticipantFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.dialogflow.v2.Participant participant = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_participant() const;
  private:
  bool _internal_has_participant() const;
  public:
  void clear_participant();
  const ::google::cloud::dialogflow::v2::Participant& participant() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Participant* release_participant();
  ::google::cloud::dialogflow::v2::Participant* mutable_participant();
  void set_allocated_participant(::google::cloud::dialogflow::v2::Participant* participant);
  private:
  const ::google::cloud::dialogflow::v2::Participant& _internal_participant() const;
  ::google::cloud::dialogflow::v2::Participant* _internal_mutable_participant();
  public:
  void unsafe_arena_set_allocated_participant(
      ::google::cloud::dialogflow::v2::Participant* participant);
  ::google::cloud::dialogflow::v2::Participant* unsafe_arena_release_participant();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateParticipantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::dialogflow::v2::Participant* participant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class GetParticipantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetParticipantRequest) */ {
 public:
  inline GetParticipantRequest() : GetParticipantRequest(nullptr) {}
  ~GetParticipantRequest() override;
  explicit PROTOBUF_CONSTEXPR GetParticipantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetParticipantRequest(const GetParticipantRequest& from);
  GetParticipantRequest(GetParticipantRequest&& from) noexcept
    : GetParticipantRequest() {
    *this = ::std::move(from);
  }

  inline GetParticipantRequest& operator=(const GetParticipantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParticipantRequest& operator=(GetParticipantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetParticipantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetParticipantRequest* internal_default_instance() {
    return reinterpret_cast<const GetParticipantRequest*>(
               &_GetParticipantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetParticipantRequest& a, GetParticipantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParticipantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParticipantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetParticipantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetParticipantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetParticipantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetParticipantRequest& from) {
    GetParticipantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParticipantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetParticipantRequest";
  }
  protected:
  explicit GetParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetParticipantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class ListParticipantsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListParticipantsRequest) */ {
 public:
  inline ListParticipantsRequest() : ListParticipantsRequest(nullptr) {}
  ~ListParticipantsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListParticipantsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListParticipantsRequest(const ListParticipantsRequest& from);
  ListParticipantsRequest(ListParticipantsRequest&& from) noexcept
    : ListParticipantsRequest() {
    *this = ::std::move(from);
  }

  inline ListParticipantsRequest& operator=(const ListParticipantsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListParticipantsRequest& operator=(ListParticipantsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListParticipantsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListParticipantsRequest* internal_default_instance() {
    return reinterpret_cast<const ListParticipantsRequest*>(
               &_ListParticipantsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListParticipantsRequest& a, ListParticipantsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListParticipantsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListParticipantsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListParticipantsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListParticipantsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListParticipantsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListParticipantsRequest& from) {
    ListParticipantsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListParticipantsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListParticipantsRequest";
  }
  protected:
  explicit ListParticipantsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListParticipantsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class ListParticipantsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListParticipantsResponse) */ {
 public:
  inline ListParticipantsResponse() : ListParticipantsResponse(nullptr) {}
  ~ListParticipantsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListParticipantsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListParticipantsResponse(const ListParticipantsResponse& from);
  ListParticipantsResponse(ListParticipantsResponse&& from) noexcept
    : ListParticipantsResponse() {
    *this = ::std::move(from);
  }

  inline ListParticipantsResponse& operator=(const ListParticipantsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListParticipantsResponse& operator=(ListParticipantsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListParticipantsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListParticipantsResponse* internal_default_instance() {
    return reinterpret_cast<const ListParticipantsResponse*>(
               &_ListParticipantsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListParticipantsResponse& a, ListParticipantsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListParticipantsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListParticipantsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListParticipantsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListParticipantsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListParticipantsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListParticipantsResponse& from) {
    ListParticipantsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListParticipantsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListParticipantsResponse";
  }
  protected:
  explicit ListParticipantsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Participant participants = 1;
  int participants_size() const;
  private:
  int _internal_participants_size() const;
  public:
  void clear_participants();
  ::google::cloud::dialogflow::v2::Participant* mutable_participants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Participant >*
      mutable_participants();
  private:
  const ::google::cloud::dialogflow::v2::Participant& _internal_participants(int index) const;
  ::google::cloud::dialogflow::v2::Participant* _internal_add_participants();
  public:
  const ::google::cloud::dialogflow::v2::Participant& participants(int index) const;
  ::google::cloud::dialogflow::v2::Participant* add_participants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Participant >&
      participants() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListParticipantsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Participant > participants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class UpdateParticipantRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateParticipantRequest) */ {
 public:
  inline UpdateParticipantRequest() : UpdateParticipantRequest(nullptr) {}
  ~UpdateParticipantRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateParticipantRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateParticipantRequest(const UpdateParticipantRequest& from);
  UpdateParticipantRequest(UpdateParticipantRequest&& from) noexcept
    : UpdateParticipantRequest() {
    *this = ::std::move(from);
  }

  inline UpdateParticipantRequest& operator=(const UpdateParticipantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateParticipantRequest& operator=(UpdateParticipantRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateParticipantRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateParticipantRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateParticipantRequest*>(
               &_UpdateParticipantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateParticipantRequest& a, UpdateParticipantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateParticipantRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateParticipantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateParticipantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateParticipantRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateParticipantRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateParticipantRequest& from) {
    UpdateParticipantRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateParticipantRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateParticipantRequest";
  }
  protected:
  explicit UpdateParticipantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.Participant participant = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_participant() const;
  private:
  bool _internal_has_participant() const;
  public:
  void clear_participant();
  const ::google::cloud::dialogflow::v2::Participant& participant() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Participant* release_participant();
  ::google::cloud::dialogflow::v2::Participant* mutable_participant();
  void set_allocated_participant(::google::cloud::dialogflow::v2::Participant* participant);
  private:
  const ::google::cloud::dialogflow::v2::Participant& _internal_participant() const;
  ::google::cloud::dialogflow::v2::Participant* _internal_mutable_participant();
  public:
  void unsafe_arena_set_allocated_participant(
      ::google::cloud::dialogflow::v2::Participant* participant);
  ::google::cloud::dialogflow::v2::Participant* unsafe_arena_release_participant();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateParticipantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::Participant* participant_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class AnalyzeContentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AnalyzeContentRequest) */ {
 public:
  inline AnalyzeContentRequest() : AnalyzeContentRequest(nullptr) {}
  ~AnalyzeContentRequest() override;
  explicit PROTOBUF_CONSTEXPR AnalyzeContentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalyzeContentRequest(const AnalyzeContentRequest& from);
  AnalyzeContentRequest(AnalyzeContentRequest&& from) noexcept
    : AnalyzeContentRequest() {
    *this = ::std::move(from);
  }

  inline AnalyzeContentRequest& operator=(const AnalyzeContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyzeContentRequest& operator=(AnalyzeContentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyzeContentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum InputCase {
    kTextInput = 6,
    kEventInput = 8,
    INPUT_NOT_SET = 0,
  };

  static inline const AnalyzeContentRequest* internal_default_instance() {
    return reinterpret_cast<const AnalyzeContentRequest*>(
               &_AnalyzeContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnalyzeContentRequest& a, AnalyzeContentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalyzeContentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyzeContentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyzeContentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalyzeContentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalyzeContentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalyzeContentRequest& from) {
    AnalyzeContentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeContentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AnalyzeContentRequest";
  }
  protected:
  explicit AnalyzeContentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 1,
    kRequestIdFieldNumber = 11,
    kReplyAudioConfigFieldNumber = 5,
    kQueryParamsFieldNumber = 9,
    kAssistQueryParamsFieldNumber = 14,
    kCxParametersFieldNumber = 18,
    kTextInputFieldNumber = 6,
    kEventInputFieldNumber = 8,
  };
  // string participant = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_participant();
  const std::string& participant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant();
  PROTOBUF_NODISCARD std::string* release_participant();
  void set_allocated_participant(std::string* participant);
  private:
  const std::string& _internal_participant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant(const std::string& value);
  std::string* _internal_mutable_participant();
  public:

  // string request_id = 11;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .google.cloud.dialogflow.v2.OutputAudioConfig reply_audio_config = 5;
  bool has_reply_audio_config() const;
  private:
  bool _internal_has_reply_audio_config() const;
  public:
  void clear_reply_audio_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& reply_audio_config() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::OutputAudioConfig* release_reply_audio_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_reply_audio_config();
  void set_allocated_reply_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* reply_audio_config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_reply_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_reply_audio_config();
  public:
  void unsafe_arena_set_allocated_reply_audio_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* reply_audio_config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_reply_audio_config();

  // .google.cloud.dialogflow.v2.QueryParameters query_params = 9;
  bool has_query_params() const;
  private:
  bool _internal_has_query_params() const;
  public:
  void clear_query_params();
  const ::google::cloud::dialogflow::v2::QueryParameters& query_params() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::QueryParameters* release_query_params();
  ::google::cloud::dialogflow::v2::QueryParameters* mutable_query_params();
  void set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params);
  private:
  const ::google::cloud::dialogflow::v2::QueryParameters& _internal_query_params() const;
  ::google::cloud::dialogflow::v2::QueryParameters* _internal_mutable_query_params();
  public:
  void unsafe_arena_set_allocated_query_params(
      ::google::cloud::dialogflow::v2::QueryParameters* query_params);
  ::google::cloud::dialogflow::v2::QueryParameters* unsafe_arena_release_query_params();

  // .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 14;
  bool has_assist_query_params() const;
  private:
  bool _internal_has_assist_query_params() const;
  public:
  void clear_assist_query_params();
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& assist_query_params() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AssistQueryParameters* release_assist_query_params();
  ::google::cloud::dialogflow::v2::AssistQueryParameters* mutable_assist_query_params();
  void set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  private:
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& _internal_assist_query_params() const;
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _internal_mutable_assist_query_params();
  public:
  void unsafe_arena_set_allocated_assist_query_params(
      ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  ::google::cloud::dialogflow::v2::AssistQueryParameters* unsafe_arena_release_assist_query_params();

  // .google.protobuf.Struct cx_parameters = 18;
  bool has_cx_parameters() const;
  private:
  bool _internal_has_cx_parameters() const;
  public:
  void clear_cx_parameters();
  const ::PROTOBUF_NAMESPACE_ID::Struct& cx_parameters() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_cx_parameters();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_cx_parameters();
  void set_allocated_cx_parameters(::PROTOBUF_NAMESPACE_ID::Struct* cx_parameters);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_cx_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_cx_parameters();
  public:
  void unsafe_arena_set_allocated_cx_parameters(
      ::PROTOBUF_NAMESPACE_ID::Struct* cx_parameters);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_cx_parameters();

  // .google.cloud.dialogflow.v2.TextInput text_input = 6;
  bool has_text_input() const;
  private:
  bool _internal_has_text_input() const;
  public:
  void clear_text_input();
  const ::google::cloud::dialogflow::v2::TextInput& text_input() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::TextInput* release_text_input();
  ::google::cloud::dialogflow::v2::TextInput* mutable_text_input();
  void set_allocated_text_input(::google::cloud::dialogflow::v2::TextInput* text_input);
  private:
  const ::google::cloud::dialogflow::v2::TextInput& _internal_text_input() const;
  ::google::cloud::dialogflow::v2::TextInput* _internal_mutable_text_input();
  public:
  void unsafe_arena_set_allocated_text_input(
      ::google::cloud::dialogflow::v2::TextInput* text_input);
  ::google::cloud::dialogflow::v2::TextInput* unsafe_arena_release_text_input();

  // .google.cloud.dialogflow.v2.EventInput event_input = 8;
  bool has_event_input() const;
  private:
  bool _internal_has_event_input() const;
  public:
  void clear_event_input();
  const ::google::cloud::dialogflow::v2::EventInput& event_input() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::EventInput* release_event_input();
  ::google::cloud::dialogflow::v2::EventInput* mutable_event_input();
  void set_allocated_event_input(::google::cloud::dialogflow::v2::EventInput* event_input);
  private:
  const ::google::cloud::dialogflow::v2::EventInput& _internal_event_input() const;
  ::google::cloud::dialogflow::v2::EventInput* _internal_mutable_event_input();
  public:
  void unsafe_arena_set_allocated_event_input(
      ::google::cloud::dialogflow::v2::EventInput* event_input);
  ::google::cloud::dialogflow::v2::EventInput* unsafe_arena_release_event_input();

  void clear_input();
  InputCase input_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AnalyzeContentRequest)
 private:
  class _Internal;
  void set_has_text_input();
  void set_has_event_input();

  inline bool has_input() const;
  inline void clear_has_input();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::google::cloud::dialogflow::v2::OutputAudioConfig* reply_audio_config_;
    ::google::cloud::dialogflow::v2::QueryParameters* query_params_;
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params_;
    ::PROTOBUF_NAMESPACE_ID::Struct* cx_parameters_;
    union InputUnion {
      constexpr InputUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::TextInput* text_input_;
      ::google::cloud::dialogflow::v2::EventInput* event_input_;
    } input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class DtmfParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DtmfParameters) */ {
 public:
  inline DtmfParameters() : DtmfParameters(nullptr) {}
  ~DtmfParameters() override;
  explicit PROTOBUF_CONSTEXPR DtmfParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtmfParameters(const DtmfParameters& from);
  DtmfParameters(DtmfParameters&& from) noexcept
    : DtmfParameters() {
    *this = ::std::move(from);
  }

  inline DtmfParameters& operator=(const DtmfParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtmfParameters& operator=(DtmfParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtmfParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtmfParameters* internal_default_instance() {
    return reinterpret_cast<const DtmfParameters*>(
               &_DtmfParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DtmfParameters& a, DtmfParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(DtmfParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtmfParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtmfParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtmfParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtmfParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtmfParameters& from) {
    DtmfParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtmfParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DtmfParameters";
  }
  protected:
  explicit DtmfParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptsDtmfInputFieldNumber = 1,
  };
  // bool accepts_dtmf_input = 1;
  void clear_accepts_dtmf_input();
  bool accepts_dtmf_input() const;
  void set_accepts_dtmf_input(bool value);
  private:
  bool _internal_accepts_dtmf_input() const;
  void _internal_set_accepts_dtmf_input(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DtmfParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool accepts_dtmf_input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class AnalyzeContentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AnalyzeContentResponse) */ {
 public:
  inline AnalyzeContentResponse() : AnalyzeContentResponse(nullptr) {}
  ~AnalyzeContentResponse() override;
  explicit PROTOBUF_CONSTEXPR AnalyzeContentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalyzeContentResponse(const AnalyzeContentResponse& from);
  AnalyzeContentResponse(AnalyzeContentResponse&& from) noexcept
    : AnalyzeContentResponse() {
    *this = ::std::move(from);
  }

  inline AnalyzeContentResponse& operator=(const AnalyzeContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyzeContentResponse& operator=(AnalyzeContentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyzeContentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyzeContentResponse* internal_default_instance() {
    return reinterpret_cast<const AnalyzeContentResponse*>(
               &_AnalyzeContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AnalyzeContentResponse& a, AnalyzeContentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalyzeContentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyzeContentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyzeContentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalyzeContentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalyzeContentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalyzeContentResponse& from) {
    AnalyzeContentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeContentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AnalyzeContentResponse";
  }
  protected:
  explicit AnalyzeContentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHumanAgentSuggestionResultsFieldNumber = 6,
    kEndUserSuggestionResultsFieldNumber = 7,
    kReplyTextFieldNumber = 1,
    kReplyAudioFieldNumber = 2,
    kAutomatedAgentReplyFieldNumber = 3,
    kMessageFieldNumber = 5,
    kDtmfParametersFieldNumber = 9,
  };
  // repeated .google.cloud.dialogflow.v2.SuggestionResult human_agent_suggestion_results = 6;
  int human_agent_suggestion_results_size() const;
  private:
  int _internal_human_agent_suggestion_results_size() const;
  public:
  void clear_human_agent_suggestion_results();
  ::google::cloud::dialogflow::v2::SuggestionResult* mutable_human_agent_suggestion_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >*
      mutable_human_agent_suggestion_results();
  private:
  const ::google::cloud::dialogflow::v2::SuggestionResult& _internal_human_agent_suggestion_results(int index) const;
  ::google::cloud::dialogflow::v2::SuggestionResult* _internal_add_human_agent_suggestion_results();
  public:
  const ::google::cloud::dialogflow::v2::SuggestionResult& human_agent_suggestion_results(int index) const;
  ::google::cloud::dialogflow::v2::SuggestionResult* add_human_agent_suggestion_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >&
      human_agent_suggestion_results() const;

  // repeated .google.cloud.dialogflow.v2.SuggestionResult end_user_suggestion_results = 7;
  int end_user_suggestion_results_size() const;
  private:
  int _internal_end_user_suggestion_results_size() const;
  public:
  void clear_end_user_suggestion_results();
  ::google::cloud::dialogflow::v2::SuggestionResult* mutable_end_user_suggestion_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >*
      mutable_end_user_suggestion_results();
  private:
  const ::google::cloud::dialogflow::v2::SuggestionResult& _internal_end_user_suggestion_results(int index) const;
  ::google::cloud::dialogflow::v2::SuggestionResult* _internal_add_end_user_suggestion_results();
  public:
  const ::google::cloud::dialogflow::v2::SuggestionResult& end_user_suggestion_results(int index) const;
  ::google::cloud::dialogflow::v2::SuggestionResult* add_end_user_suggestion_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >&
      end_user_suggestion_results() const;

  // string reply_text = 1;
  void clear_reply_text();
  const std::string& reply_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_text();
  PROTOBUF_NODISCARD std::string* release_reply_text();
  void set_allocated_reply_text(std::string* reply_text);
  private:
  const std::string& _internal_reply_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_text(const std::string& value);
  std::string* _internal_mutable_reply_text();
  public:

  // .google.cloud.dialogflow.v2.OutputAudio reply_audio = 2;
  bool has_reply_audio() const;
  private:
  bool _internal_has_reply_audio() const;
  public:
  void clear_reply_audio();
  const ::google::cloud::dialogflow::v2::OutputAudio& reply_audio() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::OutputAudio* release_reply_audio();
  ::google::cloud::dialogflow::v2::OutputAudio* mutable_reply_audio();
  void set_allocated_reply_audio(::google::cloud::dialogflow::v2::OutputAudio* reply_audio);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudio& _internal_reply_audio() const;
  ::google::cloud::dialogflow::v2::OutputAudio* _internal_mutable_reply_audio();
  public:
  void unsafe_arena_set_allocated_reply_audio(
      ::google::cloud::dialogflow::v2::OutputAudio* reply_audio);
  ::google::cloud::dialogflow::v2::OutputAudio* unsafe_arena_release_reply_audio();

  // .google.cloud.dialogflow.v2.AutomatedAgentReply automated_agent_reply = 3;
  bool has_automated_agent_reply() const;
  private:
  bool _internal_has_automated_agent_reply() const;
  public:
  void clear_automated_agent_reply();
  const ::google::cloud::dialogflow::v2::AutomatedAgentReply& automated_agent_reply() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AutomatedAgentReply* release_automated_agent_reply();
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* mutable_automated_agent_reply();
  void set_allocated_automated_agent_reply(::google::cloud::dialogflow::v2::AutomatedAgentReply* automated_agent_reply);
  private:
  const ::google::cloud::dialogflow::v2::AutomatedAgentReply& _internal_automated_agent_reply() const;
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* _internal_mutable_automated_agent_reply();
  public:
  void unsafe_arena_set_allocated_automated_agent_reply(
      ::google::cloud::dialogflow::v2::AutomatedAgentReply* automated_agent_reply);
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* unsafe_arena_release_automated_agent_reply();

  // .google.cloud.dialogflow.v2.Message message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::google::cloud::dialogflow::v2::Message& message() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Message* release_message();
  ::google::cloud::dialogflow::v2::Message* mutable_message();
  void set_allocated_message(::google::cloud::dialogflow::v2::Message* message);
  private:
  const ::google::cloud::dialogflow::v2::Message& _internal_message() const;
  ::google::cloud::dialogflow::v2::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::google::cloud::dialogflow::v2::Message* message);
  ::google::cloud::dialogflow::v2::Message* unsafe_arena_release_message();

  // .google.cloud.dialogflow.v2.DtmfParameters dtmf_parameters = 9;
  bool has_dtmf_parameters() const;
  private:
  bool _internal_has_dtmf_parameters() const;
  public:
  void clear_dtmf_parameters();
  const ::google::cloud::dialogflow::v2::DtmfParameters& dtmf_parameters() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::DtmfParameters* release_dtmf_parameters();
  ::google::cloud::dialogflow::v2::DtmfParameters* mutable_dtmf_parameters();
  void set_allocated_dtmf_parameters(::google::cloud::dialogflow::v2::DtmfParameters* dtmf_parameters);
  private:
  const ::google::cloud::dialogflow::v2::DtmfParameters& _internal_dtmf_parameters() const;
  ::google::cloud::dialogflow::v2::DtmfParameters* _internal_mutable_dtmf_parameters();
  public:
  void unsafe_arena_set_allocated_dtmf_parameters(
      ::google::cloud::dialogflow::v2::DtmfParameters* dtmf_parameters);
  ::google::cloud::dialogflow::v2::DtmfParameters* unsafe_arena_release_dtmf_parameters();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AnalyzeContentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult > human_agent_suggestion_results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult > end_user_suggestion_results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_text_;
    ::google::cloud::dialogflow::v2::OutputAudio* reply_audio_;
    ::google::cloud::dialogflow::v2::AutomatedAgentReply* automated_agent_reply_;
    ::google::cloud::dialogflow::v2::Message* message_;
    ::google::cloud::dialogflow::v2::DtmfParameters* dtmf_parameters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestArticlesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestArticlesRequest) */ {
 public:
  inline SuggestArticlesRequest() : SuggestArticlesRequest(nullptr) {}
  ~SuggestArticlesRequest() override;
  explicit PROTOBUF_CONSTEXPR SuggestArticlesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestArticlesRequest(const SuggestArticlesRequest& from);
  SuggestArticlesRequest(SuggestArticlesRequest&& from) noexcept
    : SuggestArticlesRequest() {
    *this = ::std::move(from);
  }

  inline SuggestArticlesRequest& operator=(const SuggestArticlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestArticlesRequest& operator=(SuggestArticlesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestArticlesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestArticlesRequest* internal_default_instance() {
    return reinterpret_cast<const SuggestArticlesRequest*>(
               &_SuggestArticlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SuggestArticlesRequest& a, SuggestArticlesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestArticlesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestArticlesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestArticlesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestArticlesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestArticlesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestArticlesRequest& from) {
    SuggestArticlesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestArticlesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestArticlesRequest";
  }
  protected:
  explicit SuggestArticlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kAssistQueryParamsFieldNumber = 4,
    kContextSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string latest_message = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 4;
  bool has_assist_query_params() const;
  private:
  bool _internal_has_assist_query_params() const;
  public:
  void clear_assist_query_params();
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& assist_query_params() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AssistQueryParameters* release_assist_query_params();
  ::google::cloud::dialogflow::v2::AssistQueryParameters* mutable_assist_query_params();
  void set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  private:
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& _internal_assist_query_params() const;
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _internal_mutable_assist_query_params();
  public:
  void unsafe_arena_set_allocated_assist_query_params(
      ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  ::google::cloud::dialogflow::v2::AssistQueryParameters* unsafe_arena_release_assist_query_params();

  // int32 context_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestArticlesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestArticlesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestArticlesResponse) */ {
 public:
  inline SuggestArticlesResponse() : SuggestArticlesResponse(nullptr) {}
  ~SuggestArticlesResponse() override;
  explicit PROTOBUF_CONSTEXPR SuggestArticlesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestArticlesResponse(const SuggestArticlesResponse& from);
  SuggestArticlesResponse(SuggestArticlesResponse&& from) noexcept
    : SuggestArticlesResponse() {
    *this = ::std::move(from);
  }

  inline SuggestArticlesResponse& operator=(const SuggestArticlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestArticlesResponse& operator=(SuggestArticlesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestArticlesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestArticlesResponse* internal_default_instance() {
    return reinterpret_cast<const SuggestArticlesResponse*>(
               &_SuggestArticlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SuggestArticlesResponse& a, SuggestArticlesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestArticlesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestArticlesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestArticlesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestArticlesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestArticlesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestArticlesResponse& from) {
    SuggestArticlesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestArticlesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestArticlesResponse";
  }
  protected:
  explicit SuggestArticlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticleAnswersFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kContextSizeFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.ArticleAnswer article_answers = 1;
  int article_answers_size() const;
  private:
  int _internal_article_answers_size() const;
  public:
  void clear_article_answers();
  ::google::cloud::dialogflow::v2::ArticleAnswer* mutable_article_answers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ArticleAnswer >*
      mutable_article_answers();
  private:
  const ::google::cloud::dialogflow::v2::ArticleAnswer& _internal_article_answers(int index) const;
  ::google::cloud::dialogflow::v2::ArticleAnswer* _internal_add_article_answers();
  public:
  const ::google::cloud::dialogflow::v2::ArticleAnswer& article_answers(int index) const;
  ::google::cloud::dialogflow::v2::ArticleAnswer* add_article_answers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ArticleAnswer >&
      article_answers() const;

  // string latest_message = 2;
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // int32 context_size = 3;
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestArticlesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ArticleAnswer > article_answers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestFaqAnswersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest) */ {
 public:
  inline SuggestFaqAnswersRequest() : SuggestFaqAnswersRequest(nullptr) {}
  ~SuggestFaqAnswersRequest() override;
  explicit PROTOBUF_CONSTEXPR SuggestFaqAnswersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestFaqAnswersRequest(const SuggestFaqAnswersRequest& from);
  SuggestFaqAnswersRequest(SuggestFaqAnswersRequest&& from) noexcept
    : SuggestFaqAnswersRequest() {
    *this = ::std::move(from);
  }

  inline SuggestFaqAnswersRequest& operator=(const SuggestFaqAnswersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestFaqAnswersRequest& operator=(SuggestFaqAnswersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestFaqAnswersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestFaqAnswersRequest* internal_default_instance() {
    return reinterpret_cast<const SuggestFaqAnswersRequest*>(
               &_SuggestFaqAnswersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SuggestFaqAnswersRequest& a, SuggestFaqAnswersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestFaqAnswersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestFaqAnswersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestFaqAnswersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestFaqAnswersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestFaqAnswersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestFaqAnswersRequest& from) {
    SuggestFaqAnswersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestFaqAnswersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestFaqAnswersRequest";
  }
  protected:
  explicit SuggestFaqAnswersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kAssistQueryParamsFieldNumber = 4,
    kContextSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string latest_message = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 4;
  bool has_assist_query_params() const;
  private:
  bool _internal_has_assist_query_params() const;
  public:
  void clear_assist_query_params();
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& assist_query_params() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AssistQueryParameters* release_assist_query_params();
  ::google::cloud::dialogflow::v2::AssistQueryParameters* mutable_assist_query_params();
  void set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  private:
  const ::google::cloud::dialogflow::v2::AssistQueryParameters& _internal_assist_query_params() const;
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _internal_mutable_assist_query_params();
  public:
  void unsafe_arena_set_allocated_assist_query_params(
      ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params);
  ::google::cloud::dialogflow::v2::AssistQueryParameters* unsafe_arena_release_assist_query_params();

  // int32 context_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestFaqAnswersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse) */ {
 public:
  inline SuggestFaqAnswersResponse() : SuggestFaqAnswersResponse(nullptr) {}
  ~SuggestFaqAnswersResponse() override;
  explicit PROTOBUF_CONSTEXPR SuggestFaqAnswersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestFaqAnswersResponse(const SuggestFaqAnswersResponse& from);
  SuggestFaqAnswersResponse(SuggestFaqAnswersResponse&& from) noexcept
    : SuggestFaqAnswersResponse() {
    *this = ::std::move(from);
  }

  inline SuggestFaqAnswersResponse& operator=(const SuggestFaqAnswersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestFaqAnswersResponse& operator=(SuggestFaqAnswersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestFaqAnswersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestFaqAnswersResponse* internal_default_instance() {
    return reinterpret_cast<const SuggestFaqAnswersResponse*>(
               &_SuggestFaqAnswersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SuggestFaqAnswersResponse& a, SuggestFaqAnswersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestFaqAnswersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestFaqAnswersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestFaqAnswersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestFaqAnswersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestFaqAnswersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestFaqAnswersResponse& from) {
    SuggestFaqAnswersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestFaqAnswersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestFaqAnswersResponse";
  }
  protected:
  explicit SuggestFaqAnswersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaqAnswersFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kContextSizeFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.FaqAnswer faq_answers = 1;
  int faq_answers_size() const;
  private:
  int _internal_faq_answers_size() const;
  public:
  void clear_faq_answers();
  ::google::cloud::dialogflow::v2::FaqAnswer* mutable_faq_answers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::FaqAnswer >*
      mutable_faq_answers();
  private:
  const ::google::cloud::dialogflow::v2::FaqAnswer& _internal_faq_answers(int index) const;
  ::google::cloud::dialogflow::v2::FaqAnswer* _internal_add_faq_answers();
  public:
  const ::google::cloud::dialogflow::v2::FaqAnswer& faq_answers(int index) const;
  ::google::cloud::dialogflow::v2::FaqAnswer* add_faq_answers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::FaqAnswer >&
      faq_answers() const;

  // string latest_message = 2;
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // int32 context_size = 3;
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::FaqAnswer > faq_answers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestSmartRepliesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest) */ {
 public:
  inline SuggestSmartRepliesRequest() : SuggestSmartRepliesRequest(nullptr) {}
  ~SuggestSmartRepliesRequest() override;
  explicit PROTOBUF_CONSTEXPR SuggestSmartRepliesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestSmartRepliesRequest(const SuggestSmartRepliesRequest& from);
  SuggestSmartRepliesRequest(SuggestSmartRepliesRequest&& from) noexcept
    : SuggestSmartRepliesRequest() {
    *this = ::std::move(from);
  }

  inline SuggestSmartRepliesRequest& operator=(const SuggestSmartRepliesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestSmartRepliesRequest& operator=(SuggestSmartRepliesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestSmartRepliesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestSmartRepliesRequest* internal_default_instance() {
    return reinterpret_cast<const SuggestSmartRepliesRequest*>(
               &_SuggestSmartRepliesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SuggestSmartRepliesRequest& a, SuggestSmartRepliesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestSmartRepliesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestSmartRepliesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestSmartRepliesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestSmartRepliesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestSmartRepliesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestSmartRepliesRequest& from) {
    SuggestSmartRepliesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestSmartRepliesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestSmartRepliesRequest";
  }
  protected:
  explicit SuggestSmartRepliesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kCurrentTextInputFieldNumber = 4,
    kContextSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string latest_message = 2 [(.google.api.resource_reference) = {
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // .google.cloud.dialogflow.v2.TextInput current_text_input = 4;
  bool has_current_text_input() const;
  private:
  bool _internal_has_current_text_input() const;
  public:
  void clear_current_text_input();
  const ::google::cloud::dialogflow::v2::TextInput& current_text_input() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::TextInput* release_current_text_input();
  ::google::cloud::dialogflow::v2::TextInput* mutable_current_text_input();
  void set_allocated_current_text_input(::google::cloud::dialogflow::v2::TextInput* current_text_input);
  private:
  const ::google::cloud::dialogflow::v2::TextInput& _internal_current_text_input() const;
  ::google::cloud::dialogflow::v2::TextInput* _internal_mutable_current_text_input();
  public:
  void unsafe_arena_set_allocated_current_text_input(
      ::google::cloud::dialogflow::v2::TextInput* current_text_input);
  ::google::cloud::dialogflow::v2::TextInput* unsafe_arena_release_current_text_input();

  // int32 context_size = 3;
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    ::google::cloud::dialogflow::v2::TextInput* current_text_input_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestSmartRepliesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse) */ {
 public:
  inline SuggestSmartRepliesResponse() : SuggestSmartRepliesResponse(nullptr) {}
  ~SuggestSmartRepliesResponse() override;
  explicit PROTOBUF_CONSTEXPR SuggestSmartRepliesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestSmartRepliesResponse(const SuggestSmartRepliesResponse& from);
  SuggestSmartRepliesResponse(SuggestSmartRepliesResponse&& from) noexcept
    : SuggestSmartRepliesResponse() {
    *this = ::std::move(from);
  }

  inline SuggestSmartRepliesResponse& operator=(const SuggestSmartRepliesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestSmartRepliesResponse& operator=(SuggestSmartRepliesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestSmartRepliesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuggestSmartRepliesResponse* internal_default_instance() {
    return reinterpret_cast<const SuggestSmartRepliesResponse*>(
               &_SuggestSmartRepliesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SuggestSmartRepliesResponse& a, SuggestSmartRepliesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestSmartRepliesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestSmartRepliesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestSmartRepliesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestSmartRepliesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestSmartRepliesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestSmartRepliesResponse& from) {
    SuggestSmartRepliesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestSmartRepliesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestSmartRepliesResponse";
  }
  protected:
  explicit SuggestSmartRepliesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmartReplyAnswersFieldNumber = 1,
    kLatestMessageFieldNumber = 2,
    kContextSizeFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.SmartReplyAnswer smart_reply_answers = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int smart_reply_answers_size() const;
  private:
  int _internal_smart_reply_answers_size() const;
  public:
  void clear_smart_reply_answers();
  ::google::cloud::dialogflow::v2::SmartReplyAnswer* mutable_smart_reply_answers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SmartReplyAnswer >*
      mutable_smart_reply_answers();
  private:
  const ::google::cloud::dialogflow::v2::SmartReplyAnswer& _internal_smart_reply_answers(int index) const;
  ::google::cloud::dialogflow::v2::SmartReplyAnswer* _internal_add_smart_reply_answers();
  public:
  const ::google::cloud::dialogflow::v2::SmartReplyAnswer& smart_reply_answers(int index) const;
  ::google::cloud::dialogflow::v2::SmartReplyAnswer* add_smart_reply_answers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SmartReplyAnswer >&
      smart_reply_answers() const;

  // string latest_message = 2 [(.google.api.resource_reference) = {
  void clear_latest_message();
  const std::string& latest_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_message();
  PROTOBUF_NODISCARD std::string* release_latest_message();
  void set_allocated_latest_message(std::string* latest_message);
  private:
  const std::string& _internal_latest_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_message(const std::string& value);
  std::string* _internal_mutable_latest_message();
  public:

  // int32 context_size = 3;
  void clear_context_size();
  int32_t context_size() const;
  void set_context_size(int32_t value);
  private:
  int32_t _internal_context_size() const;
  void _internal_set_context_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SmartReplyAnswer > smart_reply_answers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_message_;
    int32_t context_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class OutputAudio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.OutputAudio) */ {
 public:
  inline OutputAudio() : OutputAudio(nullptr) {}
  ~OutputAudio() override;
  explicit PROTOBUF_CONSTEXPR OutputAudio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputAudio(const OutputAudio& from);
  OutputAudio(OutputAudio&& from) noexcept
    : OutputAudio() {
    *this = ::std::move(from);
  }

  inline OutputAudio& operator=(const OutputAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputAudio& operator=(OutputAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputAudio* internal_default_instance() {
    return reinterpret_cast<const OutputAudio*>(
               &_OutputAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OutputAudio& a, OutputAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputAudio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputAudio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputAudio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputAudio& from) {
    OutputAudio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputAudio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.OutputAudio";
  }
  protected:
  explicit OutputAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // bytes audio = 2;
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // .google.cloud.dialogflow.v2.OutputAudioConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::OutputAudioConfig* release_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_config();
  void set_allocated_config(::google::cloud::dialogflow::v2::OutputAudioConfig* config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.OutputAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
    ::google::cloud::dialogflow::v2::OutputAudioConfig* config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class AutomatedAgentReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AutomatedAgentReply) */ {
 public:
  inline AutomatedAgentReply() : AutomatedAgentReply(nullptr) {}
  ~AutomatedAgentReply() override;
  explicit PROTOBUF_CONSTEXPR AutomatedAgentReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutomatedAgentReply(const AutomatedAgentReply& from);
  AutomatedAgentReply(AutomatedAgentReply&& from) noexcept
    : AutomatedAgentReply() {
    *this = ::std::move(from);
  }

  inline AutomatedAgentReply& operator=(const AutomatedAgentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutomatedAgentReply& operator=(AutomatedAgentReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutomatedAgentReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutomatedAgentReply* internal_default_instance() {
    return reinterpret_cast<const AutomatedAgentReply*>(
               &_AutomatedAgentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AutomatedAgentReply& a, AutomatedAgentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AutomatedAgentReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutomatedAgentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutomatedAgentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutomatedAgentReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutomatedAgentReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutomatedAgentReply& from) {
    AutomatedAgentReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutomatedAgentReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AutomatedAgentReply";
  }
  protected:
  explicit AutomatedAgentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AutomatedAgentReply_AutomatedAgentReplyType AutomatedAgentReplyType;
  static constexpr AutomatedAgentReplyType AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED =
    AutomatedAgentReply_AutomatedAgentReplyType_AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED;
  static constexpr AutomatedAgentReplyType PARTIAL =
    AutomatedAgentReply_AutomatedAgentReplyType_PARTIAL;
  static constexpr AutomatedAgentReplyType FINAL =
    AutomatedAgentReply_AutomatedAgentReplyType_FINAL;
  static inline bool AutomatedAgentReplyType_IsValid(int value) {
    return AutomatedAgentReply_AutomatedAgentReplyType_IsValid(value);
  }
  static constexpr AutomatedAgentReplyType AutomatedAgentReplyType_MIN =
    AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_MIN;
  static constexpr AutomatedAgentReplyType AutomatedAgentReplyType_MAX =
    AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_MAX;
  static constexpr int AutomatedAgentReplyType_ARRAYSIZE =
    AutomatedAgentReply_AutomatedAgentReplyType_AutomatedAgentReplyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AutomatedAgentReplyType_descriptor() {
    return AutomatedAgentReply_AutomatedAgentReplyType_descriptor();
  }
  template<typename T>
  static inline const std::string& AutomatedAgentReplyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutomatedAgentReplyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutomatedAgentReplyType_Name.");
    return AutomatedAgentReply_AutomatedAgentReplyType_Name(enum_t_value);
  }
  static inline bool AutomatedAgentReplyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AutomatedAgentReplyType* value) {
    return AutomatedAgentReply_AutomatedAgentReplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetectIntentResponseFieldNumber = 1,
    kAutomatedAgentReplyTypeFieldNumber = 7,
    kAllowCancellationFieldNumber = 8,
  };
  // .google.cloud.dialogflow.v2.DetectIntentResponse detect_intent_response = 1;
  bool has_detect_intent_response() const;
  private:
  bool _internal_has_detect_intent_response() const;
  public:
  void clear_detect_intent_response();
  const ::google::cloud::dialogflow::v2::DetectIntentResponse& detect_intent_response() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::DetectIntentResponse* release_detect_intent_response();
  ::google::cloud::dialogflow::v2::DetectIntentResponse* mutable_detect_intent_response();
  void set_allocated_detect_intent_response(::google::cloud::dialogflow::v2::DetectIntentResponse* detect_intent_response);
  private:
  const ::google::cloud::dialogflow::v2::DetectIntentResponse& _internal_detect_intent_response() const;
  ::google::cloud::dialogflow::v2::DetectIntentResponse* _internal_mutable_detect_intent_response();
  public:
  void unsafe_arena_set_allocated_detect_intent_response(
      ::google::cloud::dialogflow::v2::DetectIntentResponse* detect_intent_response);
  ::google::cloud::dialogflow::v2::DetectIntentResponse* unsafe_arena_release_detect_intent_response();

  // .google.cloud.dialogflow.v2.AutomatedAgentReply.AutomatedAgentReplyType automated_agent_reply_type = 7;
  void clear_automated_agent_reply_type();
  ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType automated_agent_reply_type() const;
  void set_automated_agent_reply_type(::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType value);
  private:
  ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType _internal_automated_agent_reply_type() const;
  void _internal_set_automated_agent_reply_type(::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType value);
  public:

  // bool allow_cancellation = 8;
  void clear_allow_cancellation();
  bool allow_cancellation() const;
  void set_allow_cancellation(bool value);
  private:
  bool _internal_allow_cancellation() const;
  void _internal_set_allow_cancellation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AutomatedAgentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::DetectIntentResponse* detect_intent_response_;
    int automated_agent_reply_type_;
    bool allow_cancellation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class ArticleAnswer_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ArticleAnswer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ArticleAnswer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ArticleAnswer_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ArticleAnswer_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ArticleAnswer_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ArticleAnswer_MetadataEntry_DoNotUse& other);
  static const ArticleAnswer_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ArticleAnswer_MetadataEntry_DoNotUse*>(&_ArticleAnswer_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.ArticleAnswer.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.ArticleAnswer.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};

// -------------------------------------------------------------------

class ArticleAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ArticleAnswer) */ {
 public:
  inline ArticleAnswer() : ArticleAnswer(nullptr) {}
  ~ArticleAnswer() override;
  explicit PROTOBUF_CONSTEXPR ArticleAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleAnswer(const ArticleAnswer& from);
  ArticleAnswer(ArticleAnswer&& from) noexcept
    : ArticleAnswer() {
    *this = ::std::move(from);
  }

  inline ArticleAnswer& operator=(const ArticleAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleAnswer& operator=(ArticleAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleAnswer* internal_default_instance() {
    return reinterpret_cast<const ArticleAnswer*>(
               &_ArticleAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ArticleAnswer& a, ArticleAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleAnswer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleAnswer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleAnswer& from) {
    ArticleAnswer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleAnswer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ArticleAnswer";
  }
  protected:
  explicit ArticleAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSnippetsFieldNumber = 3,
    kMetadataFieldNumber = 5,
    kTitleFieldNumber = 1,
    kUriFieldNumber = 2,
    kAnswerRecordFieldNumber = 6,
    kConfidenceFieldNumber = 4,
  };
  // repeated string snippets = 3;
  int snippets_size() const;
  private:
  int _internal_snippets_size() const;
  public:
  void clear_snippets();
  const std::string& snippets(int index) const;
  std::string* mutable_snippets(int index);
  void set_snippets(int index, const std::string& value);
  void set_snippets(int index, std::string&& value);
  void set_snippets(int index, const char* value);
  void set_snippets(int index, const char* value, size_t size);
  std::string* add_snippets();
  void add_snippets(const std::string& value);
  void add_snippets(std::string&& value);
  void add_snippets(const char* value);
  void add_snippets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snippets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snippets();
  private:
  const std::string& _internal_snippets(int index) const;
  std::string* _internal_add_snippets();
  public:

  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string uri = 2;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string answer_record = 6;
  void clear_answer_record();
  const std::string& answer_record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer_record();
  PROTOBUF_NODISCARD std::string* release_answer_record();
  void set_allocated_answer_record(std::string* answer_record);
  private:
  const std::string& _internal_answer_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer_record(const std::string& value);
  std::string* _internal_mutable_answer_record();
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ArticleAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snippets_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ArticleAnswer_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_record_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class FaqAnswer_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaqAnswer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaqAnswer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  FaqAnswer_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FaqAnswer_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FaqAnswer_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaqAnswer_MetadataEntry_DoNotUse& other);
  static const FaqAnswer_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaqAnswer_MetadataEntry_DoNotUse*>(&_FaqAnswer_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.FaqAnswer.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.FaqAnswer.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};

// -------------------------------------------------------------------

class FaqAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.FaqAnswer) */ {
 public:
  inline FaqAnswer() : FaqAnswer(nullptr) {}
  ~FaqAnswer() override;
  explicit PROTOBUF_CONSTEXPR FaqAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaqAnswer(const FaqAnswer& from);
  FaqAnswer(FaqAnswer&& from) noexcept
    : FaqAnswer() {
    *this = ::std::move(from);
  }

  inline FaqAnswer& operator=(const FaqAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaqAnswer& operator=(FaqAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaqAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaqAnswer* internal_default_instance() {
    return reinterpret_cast<const FaqAnswer*>(
               &_FaqAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FaqAnswer& a, FaqAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(FaqAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaqAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaqAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaqAnswer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaqAnswer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FaqAnswer& from) {
    FaqAnswer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaqAnswer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.FaqAnswer";
  }
  protected:
  explicit FaqAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kAnswerFieldNumber = 1,
    kQuestionFieldNumber = 3,
    kSourceFieldNumber = 4,
    kAnswerRecordFieldNumber = 6,
    kConfidenceFieldNumber = 2,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // string question = 3;
  void clear_question();
  const std::string& question() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // string source = 4;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string answer_record = 6;
  void clear_answer_record();
  const std::string& answer_record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer_record();
  PROTOBUF_NODISCARD std::string* release_answer_record();
  void set_allocated_answer_record(std::string* answer_record);
  private:
  const std::string& _internal_answer_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer_record(const std::string& value);
  std::string* _internal_mutable_answer_record();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.FaqAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FaqAnswer_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_record_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SmartReplyAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SmartReplyAnswer) */ {
 public:
  inline SmartReplyAnswer() : SmartReplyAnswer(nullptr) {}
  ~SmartReplyAnswer() override;
  explicit PROTOBUF_CONSTEXPR SmartReplyAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartReplyAnswer(const SmartReplyAnswer& from);
  SmartReplyAnswer(SmartReplyAnswer&& from) noexcept
    : SmartReplyAnswer() {
    *this = ::std::move(from);
  }

  inline SmartReplyAnswer& operator=(const SmartReplyAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartReplyAnswer& operator=(SmartReplyAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmartReplyAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartReplyAnswer* internal_default_instance() {
    return reinterpret_cast<const SmartReplyAnswer*>(
               &_SmartReplyAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SmartReplyAnswer& a, SmartReplyAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartReplyAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartReplyAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmartReplyAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmartReplyAnswer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmartReplyAnswer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmartReplyAnswer& from) {
    SmartReplyAnswer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartReplyAnswer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SmartReplyAnswer";
  }
  protected:
  explicit SmartReplyAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kAnswerRecordFieldNumber = 3,
    kConfidenceFieldNumber = 2,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply();
  PROTOBUF_NODISCARD std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // string answer_record = 3 [(.google.api.resource_reference) = {
  void clear_answer_record();
  const std::string& answer_record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer_record();
  PROTOBUF_NODISCARD std::string* release_answer_record();
  void set_allocated_answer_record(std::string* answer_record);
  private:
  const std::string& _internal_answer_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer_record(const std::string& value);
  std::string* _internal_mutable_answer_record();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SmartReplyAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_record_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class SuggestionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SuggestionResult) */ {
 public:
  inline SuggestionResult() : SuggestionResult(nullptr) {}
  ~SuggestionResult() override;
  explicit PROTOBUF_CONSTEXPR SuggestionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuggestionResult(const SuggestionResult& from);
  SuggestionResult(SuggestionResult&& from) noexcept
    : SuggestionResult() {
    *this = ::std::move(from);
  }

  inline SuggestionResult& operator=(const SuggestionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestionResult& operator=(SuggestionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuggestionResult& default_instance() {
    return *internal_default_instance();
  }
  enum SuggestionResponseCase {
    kError = 1,
    kSuggestArticlesResponse = 2,
    kSuggestFaqAnswersResponse = 3,
    kSuggestSmartRepliesResponse = 4,
    SUGGESTION_RESPONSE_NOT_SET = 0,
  };

  static inline const SuggestionResult* internal_default_instance() {
    return reinterpret_cast<const SuggestionResult*>(
               &_SuggestionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SuggestionResult& a, SuggestionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuggestionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuggestionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuggestionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuggestionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuggestionResult& from) {
    SuggestionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SuggestionResult";
  }
  protected:
  explicit SuggestionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSuggestArticlesResponseFieldNumber = 2,
    kSuggestFaqAnswersResponseFieldNumber = 3,
    kSuggestSmartRepliesResponseFieldNumber = 4,
  };
  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .google.cloud.dialogflow.v2.SuggestArticlesResponse suggest_articles_response = 2;
  bool has_suggest_articles_response() const;
  private:
  bool _internal_has_suggest_articles_response() const;
  public:
  void clear_suggest_articles_response();
  const ::google::cloud::dialogflow::v2::SuggestArticlesResponse& suggest_articles_response() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::SuggestArticlesResponse* release_suggest_articles_response();
  ::google::cloud::dialogflow::v2::SuggestArticlesResponse* mutable_suggest_articles_response();
  void set_allocated_suggest_articles_response(::google::cloud::dialogflow::v2::SuggestArticlesResponse* suggest_articles_response);
  private:
  const ::google::cloud::dialogflow::v2::SuggestArticlesResponse& _internal_suggest_articles_response() const;
  ::google::cloud::dialogflow::v2::SuggestArticlesResponse* _internal_mutable_suggest_articles_response();
  public:
  void unsafe_arena_set_allocated_suggest_articles_response(
      ::google::cloud::dialogflow::v2::SuggestArticlesResponse* suggest_articles_response);
  ::google::cloud::dialogflow::v2::SuggestArticlesResponse* unsafe_arena_release_suggest_articles_response();

  // .google.cloud.dialogflow.v2.SuggestFaqAnswersResponse suggest_faq_answers_response = 3;
  bool has_suggest_faq_answers_response() const;
  private:
  bool _internal_has_suggest_faq_answers_response() const;
  public:
  void clear_suggest_faq_answers_response();
  const ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse& suggest_faq_answers_response() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* release_suggest_faq_answers_response();
  ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* mutable_suggest_faq_answers_response();
  void set_allocated_suggest_faq_answers_response(::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* suggest_faq_answers_response);
  private:
  const ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse& _internal_suggest_faq_answers_response() const;
  ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* _internal_mutable_suggest_faq_answers_response();
  public:
  void unsafe_arena_set_allocated_suggest_faq_answers_response(
      ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* suggest_faq_answers_response);
  ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* unsafe_arena_release_suggest_faq_answers_response();

  // .google.cloud.dialogflow.v2.SuggestSmartRepliesResponse suggest_smart_replies_response = 4;
  bool has_suggest_smart_replies_response() const;
  private:
  bool _internal_has_suggest_smart_replies_response() const;
  public:
  void clear_suggest_smart_replies_response();
  const ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse& suggest_smart_replies_response() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* release_suggest_smart_replies_response();
  ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* mutable_suggest_smart_replies_response();
  void set_allocated_suggest_smart_replies_response(::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* suggest_smart_replies_response);
  private:
  const ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse& _internal_suggest_smart_replies_response() const;
  ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* _internal_mutable_suggest_smart_replies_response();
  public:
  void unsafe_arena_set_allocated_suggest_smart_replies_response(
      ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* suggest_smart_replies_response);
  ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* unsafe_arena_release_suggest_smart_replies_response();

  void clear_suggestion_response();
  SuggestionResponseCase suggestion_response_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SuggestionResult)
 private:
  class _Internal;
  void set_has_error();
  void set_has_suggest_articles_response();
  void set_has_suggest_faq_answers_response();
  void set_has_suggest_smart_replies_response();

  inline bool has_suggestion_response() const;
  inline void clear_has_suggestion_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SuggestionResponseUnion {
      constexpr SuggestionResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::rpc::Status* error_;
      ::google::cloud::dialogflow::v2::SuggestArticlesResponse* suggest_articles_response_;
      ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* suggest_faq_answers_response_;
      ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* suggest_smart_replies_response_;
    } suggestion_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class AnnotatedMessagePart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AnnotatedMessagePart) */ {
 public:
  inline AnnotatedMessagePart() : AnnotatedMessagePart(nullptr) {}
  ~AnnotatedMessagePart() override;
  explicit PROTOBUF_CONSTEXPR AnnotatedMessagePart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotatedMessagePart(const AnnotatedMessagePart& from);
  AnnotatedMessagePart(AnnotatedMessagePart&& from) noexcept
    : AnnotatedMessagePart() {
    *this = ::std::move(from);
  }

  inline AnnotatedMessagePart& operator=(const AnnotatedMessagePart& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotatedMessagePart& operator=(AnnotatedMessagePart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotatedMessagePart& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotatedMessagePart* internal_default_instance() {
    return reinterpret_cast<const AnnotatedMessagePart*>(
               &_AnnotatedMessagePart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AnnotatedMessagePart& a, AnnotatedMessagePart& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotatedMessagePart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotatedMessagePart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnotatedMessagePart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnotatedMessagePart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnotatedMessagePart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnnotatedMessagePart& from) {
    AnnotatedMessagePart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotatedMessagePart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AnnotatedMessagePart";
  }
  protected:
  explicit AnnotatedMessagePart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kEntityTypeFieldNumber = 2,
    kFormattedValueFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string entity_type = 2;
  void clear_entity_type();
  const std::string& entity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_type();
  PROTOBUF_NODISCARD std::string* release_entity_type();
  void set_allocated_entity_type(std::string* entity_type);
  private:
  const std::string& _internal_entity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_type(const std::string& value);
  std::string* _internal_mutable_entity_type();
  public:

  // .google.protobuf.Value formatted_value = 3;
  bool has_formatted_value() const;
  private:
  bool _internal_has_formatted_value() const;
  public:
  void clear_formatted_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& formatted_value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_formatted_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_formatted_value();
  void set_allocated_formatted_value(::PROTOBUF_NAMESPACE_ID::Value* formatted_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_formatted_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_formatted_value();
  public:
  void unsafe_arena_set_allocated_formatted_value(
      ::PROTOBUF_NAMESPACE_ID::Value* formatted_value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_formatted_value();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AnnotatedMessagePart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_type_;
    ::PROTOBUF_NAMESPACE_ID::Value* formatted_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class MessageAnnotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.MessageAnnotation) */ {
 public:
  inline MessageAnnotation() : MessageAnnotation(nullptr) {}
  ~MessageAnnotation() override;
  explicit PROTOBUF_CONSTEXPR MessageAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageAnnotation(const MessageAnnotation& from);
  MessageAnnotation(MessageAnnotation&& from) noexcept
    : MessageAnnotation() {
    *this = ::std::move(from);
  }

  inline MessageAnnotation& operator=(const MessageAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAnnotation& operator=(MessageAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageAnnotation* internal_default_instance() {
    return reinterpret_cast<const MessageAnnotation*>(
               &_MessageAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MessageAnnotation& a, MessageAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageAnnotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageAnnotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageAnnotation& from) {
    MessageAnnotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAnnotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.MessageAnnotation";
  }
  protected:
  explicit MessageAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 1,
    kContainEntitiesFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.AnnotatedMessagePart parts = 1;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::google::cloud::dialogflow::v2::AnnotatedMessagePart* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnnotatedMessagePart >*
      mutable_parts();
  private:
  const ::google::cloud::dialogflow::v2::AnnotatedMessagePart& _internal_parts(int index) const;
  ::google::cloud::dialogflow::v2::AnnotatedMessagePart* _internal_add_parts();
  public:
  const ::google::cloud::dialogflow::v2::AnnotatedMessagePart& parts(int index) const;
  ::google::cloud::dialogflow::v2::AnnotatedMessagePart* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnnotatedMessagePart >&
      parts() const;

  // bool contain_entities = 2;
  void clear_contain_entities();
  bool contain_entities() const;
  void set_contain_entities(bool value);
  private:
  bool _internal_contain_entities() const;
  void _internal_set_contain_entities(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.MessageAnnotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnnotatedMessagePart > parts_;
    bool contain_entities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// -------------------------------------------------------------------

class AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse& other);
  static const AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse*>(&_AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.AssistQueryParameters.DocumentsMetadataFiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.AssistQueryParameters.DocumentsMetadataFiltersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};

// -------------------------------------------------------------------

class AssistQueryParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AssistQueryParameters) */ {
 public:
  inline AssistQueryParameters() : AssistQueryParameters(nullptr) {}
  ~AssistQueryParameters() override;
  explicit PROTOBUF_CONSTEXPR AssistQueryParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssistQueryParameters(const AssistQueryParameters& from);
  AssistQueryParameters(AssistQueryParameters&& from) noexcept
    : AssistQueryParameters() {
    *this = ::std::move(from);
  }

  inline AssistQueryParameters& operator=(const AssistQueryParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssistQueryParameters& operator=(AssistQueryParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssistQueryParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssistQueryParameters* internal_default_instance() {
    return reinterpret_cast<const AssistQueryParameters*>(
               &_AssistQueryParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AssistQueryParameters& a, AssistQueryParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(AssistQueryParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssistQueryParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssistQueryParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssistQueryParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssistQueryParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssistQueryParameters& from) {
    AssistQueryParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistQueryParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AssistQueryParameters";
  }
  protected:
  explicit AssistQueryParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsMetadataFiltersFieldNumber = 1,
  };
  // map<string, string> documents_metadata_filters = 1;
  int documents_metadata_filters_size() const;
  private:
  int _internal_documents_metadata_filters_size() const;
  public:
  void clear_documents_metadata_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_documents_metadata_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_documents_metadata_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      documents_metadata_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_documents_metadata_filters();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AssistQueryParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AssistQueryParameters_DocumentsMetadataFiltersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> documents_metadata_filters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Participant

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Participant::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Participant::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Participant.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Participant::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Participant.name)
}
inline std::string* Participant::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Participant.name)
  return _s;
}
inline const std::string& Participant::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Participant::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Participant::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Participant::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Participant.name)
  return _impl_.name_.Release();
}
inline void Participant::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Participant.name)
}

// .google.cloud.dialogflow.v2.Participant.Role role = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void Participant::clear_role() {
  _impl_.role_ = 0;
}
inline ::google::cloud::dialogflow::v2::Participant_Role Participant::_internal_role() const {
  return static_cast< ::google::cloud::dialogflow::v2::Participant_Role >(_impl_.role_);
}
inline ::google::cloud::dialogflow::v2::Participant_Role Participant::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Participant.role)
  return _internal_role();
}
inline void Participant::_internal_set_role(::google::cloud::dialogflow::v2::Participant_Role value) {
  
  _impl_.role_ = value;
}
inline void Participant::set_role(::google::cloud::dialogflow::v2::Participant_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Participant.role)
}

// string sip_recording_media_label = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void Participant::clear_sip_recording_media_label() {
  _impl_.sip_recording_media_label_.ClearToEmpty();
}
inline const std::string& Participant::sip_recording_media_label() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Participant.sip_recording_media_label)
  return _internal_sip_recording_media_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Participant::set_sip_recording_media_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sip_recording_media_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Participant.sip_recording_media_label)
}
inline std::string* Participant::mutable_sip_recording_media_label() {
  std::string* _s = _internal_mutable_sip_recording_media_label();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Participant.sip_recording_media_label)
  return _s;
}
inline const std::string& Participant::_internal_sip_recording_media_label() const {
  return _impl_.sip_recording_media_label_.Get();
}
inline void Participant::_internal_set_sip_recording_media_label(const std::string& value) {
  
  _impl_.sip_recording_media_label_.Set(value, GetArenaForAllocation());
}
inline std::string* Participant::_internal_mutable_sip_recording_media_label() {
  
  return _impl_.sip_recording_media_label_.Mutable(GetArenaForAllocation());
}
inline std::string* Participant::release_sip_recording_media_label() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Participant.sip_recording_media_label)
  return _impl_.sip_recording_media_label_.Release();
}
inline void Participant::set_allocated_sip_recording_media_label(std::string* sip_recording_media_label) {
  if (sip_recording_media_label != nullptr) {
    
  } else {
    
  }
  _impl_.sip_recording_media_label_.SetAllocated(sip_recording_media_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sip_recording_media_label_.IsDefault()) {
    _impl_.sip_recording_media_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Participant.sip_recording_media_label)
}

// map<string, string> documents_metadata_filters = 8 [(.google.api.field_behavior) = OPTIONAL];
inline int Participant::_internal_documents_metadata_filters_size() const {
  return _impl_.documents_metadata_filters_.size();
}
inline int Participant::documents_metadata_filters_size() const {
  return _internal_documents_metadata_filters_size();
}
inline void Participant::clear_documents_metadata_filters() {
  _impl_.documents_metadata_filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Participant::_internal_documents_metadata_filters() const {
  return _impl_.documents_metadata_filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Participant::documents_metadata_filters() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.Participant.documents_metadata_filters)
  return _internal_documents_metadata_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Participant::_internal_mutable_documents_metadata_filters() {
  return _impl_.documents_metadata_filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Participant::mutable_documents_metadata_filters() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.Participant.documents_metadata_filters)
  return _internal_mutable_documents_metadata_filters();
}

// -------------------------------------------------------------------

// Message

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Message::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Message::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Message.name)
}
inline std::string* Message::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.name)
  return _s;
}
inline const std::string& Message::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Message::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.name)
  return _impl_.name_.Release();
}
inline void Message::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.name)
}

// string content = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Message::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Message.content)
}
inline std::string* Message::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.content)
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Message::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Message::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Message.language_code)
}
inline std::string* Message::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.language_code)
  return _s;
}
inline const std::string& Message::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void Message::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.language_code)
  return _impl_.language_code_.Release();
}
inline void Message::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.language_code)
}

// string participant = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Message::clear_participant() {
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& Message::participant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.participant)
  return _internal_participant();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_participant(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Message.participant)
}
inline std::string* Message::mutable_participant() {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.participant)
  return _s;
}
inline const std::string& Message::_internal_participant() const {
  return _impl_.participant_.Get();
}
inline void Message::_internal_set_participant(const std::string& value) {
  
  _impl_.participant_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_participant() {
  
  return _impl_.participant_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_participant() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.participant)
  return _impl_.participant_.Release();
}
inline void Message::set_allocated_participant(std::string* participant) {
  if (participant != nullptr) {
    
  } else {
    
  }
  _impl_.participant_.SetAllocated(participant, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_.IsDefault()) {
    _impl_.participant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.participant)
}

// .google.cloud.dialogflow.v2.Participant.Role participant_role = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Message::clear_participant_role() {
  _impl_.participant_role_ = 0;
}
inline ::google::cloud::dialogflow::v2::Participant_Role Message::_internal_participant_role() const {
  return static_cast< ::google::cloud::dialogflow::v2::Participant_Role >(_impl_.participant_role_);
}
inline ::google::cloud::dialogflow::v2::Participant_Role Message::participant_role() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.participant_role)
  return _internal_participant_role();
}
inline void Message::_internal_set_participant_role(::google::cloud::dialogflow::v2::Participant_Role value) {
  
  _impl_.participant_role_ = value;
}
inline void Message::set_participant_role(::google::cloud::dialogflow::v2::Participant_Role value) {
  _internal_set_participant_role(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Message.participant_role)
}

// .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Message::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Message::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.create_time)
  return _internal_create_time();
}
inline void Message::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Message.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.create_time)
  return _msg;
}
inline void Message::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.create_time)
}

// .google.protobuf.Timestamp send_time = 9 [(.google.api.field_behavior) = OPTIONAL];
inline bool Message::_internal_has_send_time() const {
  return this != internal_default_instance() && _impl_.send_time_ != nullptr;
}
inline bool Message::has_send_time() const {
  return _internal_has_send_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_send_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.send_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::send_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.send_time)
  return _internal_send_time();
}
inline void Message::unsafe_arena_set_allocated_send_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* send_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.send_time_);
  }
  _impl_.send_time_ = send_time;
  if (send_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Message.send_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_send_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.send_time_;
  _impl_.send_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_send_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.send_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.send_time_;
  _impl_.send_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_send_time() {
  
  if (_impl_.send_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.send_time_ = p;
  }
  return _impl_.send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_send_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_send_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.send_time)
  return _msg;
}
inline void Message::set_allocated_send_time(::PROTOBUF_NAMESPACE_ID::Timestamp* send_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.send_time_);
  }
  if (send_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_time));
    if (message_arena != submessage_arena) {
      send_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.send_time_ = send_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.send_time)
}

// .google.cloud.dialogflow.v2.MessageAnnotation message_annotation = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Message::_internal_has_message_annotation() const {
  return this != internal_default_instance() && _impl_.message_annotation_ != nullptr;
}
inline bool Message::has_message_annotation() const {
  return _internal_has_message_annotation();
}
inline void Message::clear_message_annotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_annotation_ != nullptr) {
    delete _impl_.message_annotation_;
  }
  _impl_.message_annotation_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::MessageAnnotation& Message::_internal_message_annotation() const {
  const ::google::cloud::dialogflow::v2::MessageAnnotation* p = _impl_.message_annotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::MessageAnnotation&>(
      ::google::cloud::dialogflow::v2::_MessageAnnotation_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::MessageAnnotation& Message::message_annotation() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.message_annotation)
  return _internal_message_annotation();
}
inline void Message::unsafe_arena_set_allocated_message_annotation(
    ::google::cloud::dialogflow::v2::MessageAnnotation* message_annotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_annotation_);
  }
  _impl_.message_annotation_ = message_annotation;
  if (message_annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Message.message_annotation)
}
inline ::google::cloud::dialogflow::v2::MessageAnnotation* Message::release_message_annotation() {
  
  ::google::cloud::dialogflow::v2::MessageAnnotation* temp = _impl_.message_annotation_;
  _impl_.message_annotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::MessageAnnotation* Message::unsafe_arena_release_message_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.message_annotation)
  
  ::google::cloud::dialogflow::v2::MessageAnnotation* temp = _impl_.message_annotation_;
  _impl_.message_annotation_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::MessageAnnotation* Message::_internal_mutable_message_annotation() {
  
  if (_impl_.message_annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::MessageAnnotation>(GetArenaForAllocation());
    _impl_.message_annotation_ = p;
  }
  return _impl_.message_annotation_;
}
inline ::google::cloud::dialogflow::v2::MessageAnnotation* Message::mutable_message_annotation() {
  ::google::cloud::dialogflow::v2::MessageAnnotation* _msg = _internal_mutable_message_annotation();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.message_annotation)
  return _msg;
}
inline void Message::set_allocated_message_annotation(::google::cloud::dialogflow::v2::MessageAnnotation* message_annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_annotation_;
  }
  if (message_annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_annotation);
    if (message_arena != submessage_arena) {
      message_annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_annotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_annotation_ = message_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.message_annotation)
}

// .google.cloud.dialogflow.v2.SentimentAnalysisResult sentiment_analysis = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Message::_internal_has_sentiment_analysis() const {
  return this != internal_default_instance() && _impl_.sentiment_analysis_ != nullptr;
}
inline bool Message::has_sentiment_analysis() const {
  return _internal_has_sentiment_analysis();
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& Message::_internal_sentiment_analysis() const {
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult* p = _impl_.sentiment_analysis_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::SentimentAnalysisResult&>(
      ::google::cloud::dialogflow::v2::_SentimentAnalysisResult_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& Message::sentiment_analysis() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Message.sentiment_analysis)
  return _internal_sentiment_analysis();
}
inline void Message::unsafe_arena_set_allocated_sentiment_analysis(
    ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sentiment_analysis_);
  }
  _impl_.sentiment_analysis_ = sentiment_analysis;
  if (sentiment_analysis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Message.sentiment_analysis)
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* Message::release_sentiment_analysis() {
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* temp = _impl_.sentiment_analysis_;
  _impl_.sentiment_analysis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* Message::unsafe_arena_release_sentiment_analysis() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Message.sentiment_analysis)
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* temp = _impl_.sentiment_analysis_;
  _impl_.sentiment_analysis_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* Message::_internal_mutable_sentiment_analysis() {
  
  if (_impl_.sentiment_analysis_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::SentimentAnalysisResult>(GetArenaForAllocation());
    _impl_.sentiment_analysis_ = p;
  }
  return _impl_.sentiment_analysis_;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* Message::mutable_sentiment_analysis() {
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* _msg = _internal_mutable_sentiment_analysis();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Message.sentiment_analysis)
  return _msg;
}
inline void Message::set_allocated_sentiment_analysis(::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sentiment_analysis_);
  }
  if (sentiment_analysis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sentiment_analysis));
    if (message_arena != submessage_arena) {
      sentiment_analysis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentiment_analysis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sentiment_analysis_ = sentiment_analysis;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Message.sentiment_analysis)
}

// -------------------------------------------------------------------

// CreateParticipantRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateParticipantRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateParticipantRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateParticipantRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateParticipantRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateParticipantRequest.parent)
}
inline std::string* CreateParticipantRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateParticipantRequest.parent)
  return _s;
}
inline const std::string& CreateParticipantRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateParticipantRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateParticipantRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateParticipantRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateParticipantRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateParticipantRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateParticipantRequest.parent)
}

// .google.cloud.dialogflow.v2.Participant participant = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateParticipantRequest::_internal_has_participant() const {
  return this != internal_default_instance() && _impl_.participant_ != nullptr;
}
inline bool CreateParticipantRequest::has_participant() const {
  return _internal_has_participant();
}
inline void CreateParticipantRequest::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Participant& CreateParticipantRequest::_internal_participant() const {
  const ::google::cloud::dialogflow::v2::Participant* p = _impl_.participant_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Participant&>(
      ::google::cloud::dialogflow::v2::_Participant_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Participant& CreateParticipantRequest::participant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateParticipantRequest.participant)
  return _internal_participant();
}
inline void CreateParticipantRequest::unsafe_arena_set_allocated_participant(
    ::google::cloud::dialogflow::v2::Participant* participant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.participant_);
  }
  _impl_.participant_ = participant;
  if (participant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateParticipantRequest.participant)
}
inline ::google::cloud::dialogflow::v2::Participant* CreateParticipantRequest::release_participant() {
  
  ::google::cloud::dialogflow::v2::Participant* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Participant* CreateParticipantRequest::unsafe_arena_release_participant() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateParticipantRequest.participant)
  
  ::google::cloud::dialogflow::v2::Participant* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Participant* CreateParticipantRequest::_internal_mutable_participant() {
  
  if (_impl_.participant_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Participant>(GetArenaForAllocation());
    _impl_.participant_ = p;
  }
  return _impl_.participant_;
}
inline ::google::cloud::dialogflow::v2::Participant* CreateParticipantRequest::mutable_participant() {
  ::google::cloud::dialogflow::v2::Participant* _msg = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateParticipantRequest.participant)
  return _msg;
}
inline void CreateParticipantRequest::set_allocated_participant(::google::cloud::dialogflow::v2::Participant* participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.participant_;
  }
  if (participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant);
    if (message_arena != submessage_arena) {
      participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.participant_ = participant;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateParticipantRequest.participant)
}

// -------------------------------------------------------------------

// GetParticipantRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetParticipantRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetParticipantRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetParticipantRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetParticipantRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetParticipantRequest.name)
}
inline std::string* GetParticipantRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetParticipantRequest.name)
  return _s;
}
inline const std::string& GetParticipantRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetParticipantRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetParticipantRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetParticipantRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetParticipantRequest.name)
  return _impl_.name_.Release();
}
inline void GetParticipantRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetParticipantRequest.name)
}

// -------------------------------------------------------------------

// ListParticipantsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListParticipantsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListParticipantsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListParticipantsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListParticipantsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListParticipantsRequest.parent)
}
inline std::string* ListParticipantsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListParticipantsRequest.parent)
  return _s;
}
inline const std::string& ListParticipantsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListParticipantsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListParticipantsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListParticipantsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListParticipantsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListParticipantsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListParticipantsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListParticipantsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListParticipantsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListParticipantsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListParticipantsRequest.page_size)
  return _internal_page_size();
}
inline void ListParticipantsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListParticipantsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListParticipantsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListParticipantsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListParticipantsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListParticipantsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListParticipantsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListParticipantsRequest.page_token)
}
inline std::string* ListParticipantsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListParticipantsRequest.page_token)
  return _s;
}
inline const std::string& ListParticipantsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListParticipantsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListParticipantsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListParticipantsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListParticipantsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListParticipantsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListParticipantsRequest.page_token)
}

// -------------------------------------------------------------------

// ListParticipantsResponse

// repeated .google.cloud.dialogflow.v2.Participant participants = 1;
inline int ListParticipantsResponse::_internal_participants_size() const {
  return _impl_.participants_.size();
}
inline int ListParticipantsResponse::participants_size() const {
  return _internal_participants_size();
}
inline void ListParticipantsResponse::clear_participants() {
  _impl_.participants_.Clear();
}
inline ::google::cloud::dialogflow::v2::Participant* ListParticipantsResponse::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListParticipantsResponse.participants)
  return _impl_.participants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Participant >*
ListParticipantsResponse::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListParticipantsResponse.participants)
  return &_impl_.participants_;
}
inline const ::google::cloud::dialogflow::v2::Participant& ListParticipantsResponse::_internal_participants(int index) const {
  return _impl_.participants_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Participant& ListParticipantsResponse::participants(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListParticipantsResponse.participants)
  return _internal_participants(index);
}
inline ::google::cloud::dialogflow::v2::Participant* ListParticipantsResponse::_internal_add_participants() {
  return _impl_.participants_.Add();
}
inline ::google::cloud::dialogflow::v2::Participant* ListParticipantsResponse::add_participants() {
  ::google::cloud::dialogflow::v2::Participant* _add = _internal_add_participants();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListParticipantsResponse.participants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Participant >&
ListParticipantsResponse::participants() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListParticipantsResponse.participants)
  return _impl_.participants_;
}

// string next_page_token = 2;
inline void ListParticipantsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListParticipantsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListParticipantsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListParticipantsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListParticipantsResponse.next_page_token)
}
inline std::string* ListParticipantsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListParticipantsResponse.next_page_token)
  return _s;
}
inline const std::string& ListParticipantsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListParticipantsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListParticipantsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListParticipantsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListParticipantsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListParticipantsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListParticipantsResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateParticipantRequest

// .google.cloud.dialogflow.v2.Participant participant = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateParticipantRequest::_internal_has_participant() const {
  return this != internal_default_instance() && _impl_.participant_ != nullptr;
}
inline bool UpdateParticipantRequest::has_participant() const {
  return _internal_has_participant();
}
inline void UpdateParticipantRequest::clear_participant() {
  if (GetArenaForAllocation() == nullptr && _impl_.participant_ != nullptr) {
    delete _impl_.participant_;
  }
  _impl_.participant_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Participant& UpdateParticipantRequest::_internal_participant() const {
  const ::google::cloud::dialogflow::v2::Participant* p = _impl_.participant_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Participant&>(
      ::google::cloud::dialogflow::v2::_Participant_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Participant& UpdateParticipantRequest::participant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateParticipantRequest.participant)
  return _internal_participant();
}
inline void UpdateParticipantRequest::unsafe_arena_set_allocated_participant(
    ::google::cloud::dialogflow::v2::Participant* participant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.participant_);
  }
  _impl_.participant_ = participant;
  if (participant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateParticipantRequest.participant)
}
inline ::google::cloud::dialogflow::v2::Participant* UpdateParticipantRequest::release_participant() {
  
  ::google::cloud::dialogflow::v2::Participant* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Participant* UpdateParticipantRequest::unsafe_arena_release_participant() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateParticipantRequest.participant)
  
  ::google::cloud::dialogflow::v2::Participant* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Participant* UpdateParticipantRequest::_internal_mutable_participant() {
  
  if (_impl_.participant_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Participant>(GetArenaForAllocation());
    _impl_.participant_ = p;
  }
  return _impl_.participant_;
}
inline ::google::cloud::dialogflow::v2::Participant* UpdateParticipantRequest::mutable_participant() {
  ::google::cloud::dialogflow::v2::Participant* _msg = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateParticipantRequest.participant)
  return _msg;
}
inline void UpdateParticipantRequest::set_allocated_participant(::google::cloud::dialogflow::v2::Participant* participant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.participant_;
  }
  if (participant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(participant);
    if (message_arena != submessage_arena) {
      participant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.participant_ = participant;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateParticipantRequest.participant)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateParticipantRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateParticipantRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateParticipantRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateParticipantRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateParticipantRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateParticipantRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateParticipantRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateParticipantRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateParticipantRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateParticipantRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateParticipantRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateParticipantRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateParticipantRequest.update_mask)
  return _msg;
}
inline void UpdateParticipantRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateParticipantRequest.update_mask)
}

// -------------------------------------------------------------------

// AnalyzeContentRequest

// string participant = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AnalyzeContentRequest::clear_participant() {
  _impl_.participant_.ClearToEmpty();
}
inline const std::string& AnalyzeContentRequest::participant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.participant)
  return _internal_participant();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzeContentRequest::set_participant(ArgT0&& arg0, ArgT... args) {
 
 _impl_.participant_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnalyzeContentRequest.participant)
}
inline std::string* AnalyzeContentRequest::mutable_participant() {
  std::string* _s = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.participant)
  return _s;
}
inline const std::string& AnalyzeContentRequest::_internal_participant() const {
  return _impl_.participant_.Get();
}
inline void AnalyzeContentRequest::_internal_set_participant(const std::string& value) {
  
  _impl_.participant_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzeContentRequest::_internal_mutable_participant() {
  
  return _impl_.participant_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzeContentRequest::release_participant() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.participant)
  return _impl_.participant_.Release();
}
inline void AnalyzeContentRequest::set_allocated_participant(std::string* participant) {
  if (participant != nullptr) {
    
  } else {
    
  }
  _impl_.participant_.SetAllocated(participant, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.participant_.IsDefault()) {
    _impl_.participant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.participant)
}

// .google.cloud.dialogflow.v2.TextInput text_input = 6;
inline bool AnalyzeContentRequest::_internal_has_text_input() const {
  return input_case() == kTextInput;
}
inline bool AnalyzeContentRequest::has_text_input() const {
  return _internal_has_text_input();
}
inline void AnalyzeContentRequest::set_has_text_input() {
  _impl_._oneof_case_[0] = kTextInput;
}
inline ::google::cloud::dialogflow::v2::TextInput* AnalyzeContentRequest::release_text_input() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.text_input)
  if (_internal_has_text_input()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::TextInput* temp = _impl_.input_.text_input_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.input_.text_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::TextInput& AnalyzeContentRequest::_internal_text_input() const {
  return _internal_has_text_input()
      ? *_impl_.input_.text_input_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::TextInput&>(::google::cloud::dialogflow::v2::_TextInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::TextInput& AnalyzeContentRequest::text_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.text_input)
  return _internal_text_input();
}
inline ::google::cloud::dialogflow::v2::TextInput* AnalyzeContentRequest::unsafe_arena_release_text_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.text_input)
  if (_internal_has_text_input()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::TextInput* temp = _impl_.input_.text_input_;
    _impl_.input_.text_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_text_input(::google::cloud::dialogflow::v2::TextInput* text_input) {
  clear_input();
  if (text_input) {
    set_has_text_input();
    _impl_.input_.text_input_ = text_input;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.text_input)
}
inline ::google::cloud::dialogflow::v2::TextInput* AnalyzeContentRequest::_internal_mutable_text_input() {
  if (!_internal_has_text_input()) {
    clear_input();
    set_has_text_input();
    _impl_.input_.text_input_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::TextInput >(GetArenaForAllocation());
  }
  return _impl_.input_.text_input_;
}
inline ::google::cloud::dialogflow::v2::TextInput* AnalyzeContentRequest::mutable_text_input() {
  ::google::cloud::dialogflow::v2::TextInput* _msg = _internal_mutable_text_input();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.text_input)
  return _msg;
}

// .google.cloud.dialogflow.v2.EventInput event_input = 8;
inline bool AnalyzeContentRequest::_internal_has_event_input() const {
  return input_case() == kEventInput;
}
inline bool AnalyzeContentRequest::has_event_input() const {
  return _internal_has_event_input();
}
inline void AnalyzeContentRequest::set_has_event_input() {
  _impl_._oneof_case_[0] = kEventInput;
}
inline ::google::cloud::dialogflow::v2::EventInput* AnalyzeContentRequest::release_event_input() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.event_input)
  if (_internal_has_event_input()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::EventInput* temp = _impl_.input_.event_input_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.input_.event_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::EventInput& AnalyzeContentRequest::_internal_event_input() const {
  return _internal_has_event_input()
      ? *_impl_.input_.event_input_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::EventInput&>(::google::cloud::dialogflow::v2::_EventInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::EventInput& AnalyzeContentRequest::event_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.event_input)
  return _internal_event_input();
}
inline ::google::cloud::dialogflow::v2::EventInput* AnalyzeContentRequest::unsafe_arena_release_event_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.event_input)
  if (_internal_has_event_input()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::EventInput* temp = _impl_.input_.event_input_;
    _impl_.input_.event_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_event_input(::google::cloud::dialogflow::v2::EventInput* event_input) {
  clear_input();
  if (event_input) {
    set_has_event_input();
    _impl_.input_.event_input_ = event_input;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.event_input)
}
inline ::google::cloud::dialogflow::v2::EventInput* AnalyzeContentRequest::_internal_mutable_event_input() {
  if (!_internal_has_event_input()) {
    clear_input();
    set_has_event_input();
    _impl_.input_.event_input_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::EventInput >(GetArenaForAllocation());
  }
  return _impl_.input_.event_input_;
}
inline ::google::cloud::dialogflow::v2::EventInput* AnalyzeContentRequest::mutable_event_input() {
  ::google::cloud::dialogflow::v2::EventInput* _msg = _internal_mutable_event_input();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.event_input)
  return _msg;
}

// .google.cloud.dialogflow.v2.OutputAudioConfig reply_audio_config = 5;
inline bool AnalyzeContentRequest::_internal_has_reply_audio_config() const {
  return this != internal_default_instance() && _impl_.reply_audio_config_ != nullptr;
}
inline bool AnalyzeContentRequest::has_reply_audio_config() const {
  return _internal_has_reply_audio_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& AnalyzeContentRequest::_internal_reply_audio_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = _impl_.reply_audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& AnalyzeContentRequest::reply_audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.reply_audio_config)
  return _internal_reply_audio_config();
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_reply_audio_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* reply_audio_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reply_audio_config_);
  }
  _impl_.reply_audio_config_ = reply_audio_config;
  if (reply_audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.reply_audio_config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* AnalyzeContentRequest::release_reply_audio_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = _impl_.reply_audio_config_;
  _impl_.reply_audio_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* AnalyzeContentRequest::unsafe_arena_release_reply_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.reply_audio_config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = _impl_.reply_audio_config_;
  _impl_.reply_audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* AnalyzeContentRequest::_internal_mutable_reply_audio_config() {
  
  if (_impl_.reply_audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArenaForAllocation());
    _impl_.reply_audio_config_ = p;
  }
  return _impl_.reply_audio_config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* AnalyzeContentRequest::mutable_reply_audio_config() {
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _msg = _internal_mutable_reply_audio_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.reply_audio_config)
  return _msg;
}
inline void AnalyzeContentRequest::set_allocated_reply_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* reply_audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reply_audio_config_);
  }
  if (reply_audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_audio_config));
    if (message_arena != submessage_arena) {
      reply_audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_audio_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reply_audio_config_ = reply_audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.reply_audio_config)
}

// .google.cloud.dialogflow.v2.QueryParameters query_params = 9;
inline bool AnalyzeContentRequest::_internal_has_query_params() const {
  return this != internal_default_instance() && _impl_.query_params_ != nullptr;
}
inline bool AnalyzeContentRequest::has_query_params() const {
  return _internal_has_query_params();
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& AnalyzeContentRequest::_internal_query_params() const {
  const ::google::cloud::dialogflow::v2::QueryParameters* p = _impl_.query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryParameters&>(
      ::google::cloud::dialogflow::v2::_QueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& AnalyzeContentRequest::query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.query_params)
  return _internal_query_params();
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_query_params(
    ::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_params_);
  }
  _impl_.query_params_ = query_params;
  if (query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.query_params)
}
inline ::google::cloud::dialogflow::v2::QueryParameters* AnalyzeContentRequest::release_query_params() {
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = _impl_.query_params_;
  _impl_.query_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* AnalyzeContentRequest::unsafe_arena_release_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.query_params)
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = _impl_.query_params_;
  _impl_.query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* AnalyzeContentRequest::_internal_mutable_query_params() {
  
  if (_impl_.query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryParameters>(GetArenaForAllocation());
    _impl_.query_params_ = p;
  }
  return _impl_.query_params_;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* AnalyzeContentRequest::mutable_query_params() {
  ::google::cloud::dialogflow::v2::QueryParameters* _msg = _internal_mutable_query_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.query_params)
  return _msg;
}
inline void AnalyzeContentRequest::set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_params_);
  }
  if (query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_params));
    if (message_arena != submessage_arena) {
      query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_params_ = query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.query_params)
}

// .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 14;
inline bool AnalyzeContentRequest::_internal_has_assist_query_params() const {
  return this != internal_default_instance() && _impl_.assist_query_params_ != nullptr;
}
inline bool AnalyzeContentRequest::has_assist_query_params() const {
  return _internal_has_assist_query_params();
}
inline void AnalyzeContentRequest::clear_assist_query_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.assist_query_params_ != nullptr) {
    delete _impl_.assist_query_params_;
  }
  _impl_.assist_query_params_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& AnalyzeContentRequest::_internal_assist_query_params() const {
  const ::google::cloud::dialogflow::v2::AssistQueryParameters* p = _impl_.assist_query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AssistQueryParameters&>(
      ::google::cloud::dialogflow::v2::_AssistQueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& AnalyzeContentRequest::assist_query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.assist_query_params)
  return _internal_assist_query_params();
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_assist_query_params(
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assist_query_params_);
  }
  _impl_.assist_query_params_ = assist_query_params;
  if (assist_query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.assist_query_params)
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* AnalyzeContentRequest::release_assist_query_params() {
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* AnalyzeContentRequest::unsafe_arena_release_assist_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.assist_query_params)
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* AnalyzeContentRequest::_internal_mutable_assist_query_params() {
  
  if (_impl_.assist_query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AssistQueryParameters>(GetArenaForAllocation());
    _impl_.assist_query_params_ = p;
  }
  return _impl_.assist_query_params_;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* AnalyzeContentRequest::mutable_assist_query_params() {
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _msg = _internal_mutable_assist_query_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.assist_query_params)
  return _msg;
}
inline void AnalyzeContentRequest::set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assist_query_params_;
  }
  if (assist_query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assist_query_params);
    if (message_arena != submessage_arena) {
      assist_query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assist_query_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assist_query_params_ = assist_query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.assist_query_params)
}

// .google.protobuf.Struct cx_parameters = 18;
inline bool AnalyzeContentRequest::_internal_has_cx_parameters() const {
  return this != internal_default_instance() && _impl_.cx_parameters_ != nullptr;
}
inline bool AnalyzeContentRequest::has_cx_parameters() const {
  return _internal_has_cx_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& AnalyzeContentRequest::_internal_cx_parameters() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.cx_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& AnalyzeContentRequest::cx_parameters() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.cx_parameters)
  return _internal_cx_parameters();
}
inline void AnalyzeContentRequest::unsafe_arena_set_allocated_cx_parameters(
    ::PROTOBUF_NAMESPACE_ID::Struct* cx_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cx_parameters_);
  }
  _impl_.cx_parameters_ = cx_parameters;
  if (cx_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.cx_parameters)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AnalyzeContentRequest::release_cx_parameters() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.cx_parameters_;
  _impl_.cx_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AnalyzeContentRequest::unsafe_arena_release_cx_parameters() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.cx_parameters)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.cx_parameters_;
  _impl_.cx_parameters_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AnalyzeContentRequest::_internal_mutable_cx_parameters() {
  
  if (_impl_.cx_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.cx_parameters_ = p;
  }
  return _impl_.cx_parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* AnalyzeContentRequest::mutable_cx_parameters() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_cx_parameters();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.cx_parameters)
  return _msg;
}
inline void AnalyzeContentRequest::set_allocated_cx_parameters(::PROTOBUF_NAMESPACE_ID::Struct* cx_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cx_parameters_);
  }
  if (cx_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cx_parameters));
    if (message_arena != submessage_arena) {
      cx_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cx_parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cx_parameters_ = cx_parameters;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.cx_parameters)
}

// string request_id = 11;
inline void AnalyzeContentRequest::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& AnalyzeContentRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzeContentRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnalyzeContentRequest.request_id)
}
inline std::string* AnalyzeContentRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentRequest.request_id)
  return _s;
}
inline const std::string& AnalyzeContentRequest::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void AnalyzeContentRequest::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzeContentRequest::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzeContentRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void AnalyzeContentRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentRequest.request_id)
}

inline bool AnalyzeContentRequest::has_input() const {
  return input_case() != INPUT_NOT_SET;
}
inline void AnalyzeContentRequest::clear_has_input() {
  _impl_._oneof_case_[0] = INPUT_NOT_SET;
}
inline AnalyzeContentRequest::InputCase AnalyzeContentRequest::input_case() const {
  return AnalyzeContentRequest::InputCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DtmfParameters

// bool accepts_dtmf_input = 1;
inline void DtmfParameters::clear_accepts_dtmf_input() {
  _impl_.accepts_dtmf_input_ = false;
}
inline bool DtmfParameters::_internal_accepts_dtmf_input() const {
  return _impl_.accepts_dtmf_input_;
}
inline bool DtmfParameters::accepts_dtmf_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DtmfParameters.accepts_dtmf_input)
  return _internal_accepts_dtmf_input();
}
inline void DtmfParameters::_internal_set_accepts_dtmf_input(bool value) {
  
  _impl_.accepts_dtmf_input_ = value;
}
inline void DtmfParameters::set_accepts_dtmf_input(bool value) {
  _internal_set_accepts_dtmf_input(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DtmfParameters.accepts_dtmf_input)
}

// -------------------------------------------------------------------

// AnalyzeContentResponse

// string reply_text = 1;
inline void AnalyzeContentResponse::clear_reply_text() {
  _impl_.reply_text_.ClearToEmpty();
}
inline const std::string& AnalyzeContentResponse::reply_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_text)
  return _internal_reply_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzeContentResponse::set_reply_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_text)
}
inline std::string* AnalyzeContentResponse::mutable_reply_text() {
  std::string* _s = _internal_mutable_reply_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_text)
  return _s;
}
inline const std::string& AnalyzeContentResponse::_internal_reply_text() const {
  return _impl_.reply_text_.Get();
}
inline void AnalyzeContentResponse::_internal_set_reply_text(const std::string& value) {
  
  _impl_.reply_text_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzeContentResponse::_internal_mutable_reply_text() {
  
  return _impl_.reply_text_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzeContentResponse::release_reply_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_text)
  return _impl_.reply_text_.Release();
}
inline void AnalyzeContentResponse::set_allocated_reply_text(std::string* reply_text) {
  if (reply_text != nullptr) {
    
  } else {
    
  }
  _impl_.reply_text_.SetAllocated(reply_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_text_.IsDefault()) {
    _impl_.reply_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_text)
}

// .google.cloud.dialogflow.v2.OutputAudio reply_audio = 2;
inline bool AnalyzeContentResponse::_internal_has_reply_audio() const {
  return this != internal_default_instance() && _impl_.reply_audio_ != nullptr;
}
inline bool AnalyzeContentResponse::has_reply_audio() const {
  return _internal_has_reply_audio();
}
inline void AnalyzeContentResponse::clear_reply_audio() {
  if (GetArenaForAllocation() == nullptr && _impl_.reply_audio_ != nullptr) {
    delete _impl_.reply_audio_;
  }
  _impl_.reply_audio_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::OutputAudio& AnalyzeContentResponse::_internal_reply_audio() const {
  const ::google::cloud::dialogflow::v2::OutputAudio* p = _impl_.reply_audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudio&>(
      ::google::cloud::dialogflow::v2::_OutputAudio_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudio& AnalyzeContentResponse::reply_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio)
  return _internal_reply_audio();
}
inline void AnalyzeContentResponse::unsafe_arena_set_allocated_reply_audio(
    ::google::cloud::dialogflow::v2::OutputAudio* reply_audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reply_audio_);
  }
  _impl_.reply_audio_ = reply_audio;
  if (reply_audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio)
}
inline ::google::cloud::dialogflow::v2::OutputAudio* AnalyzeContentResponse::release_reply_audio() {
  
  ::google::cloud::dialogflow::v2::OutputAudio* temp = _impl_.reply_audio_;
  _impl_.reply_audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudio* AnalyzeContentResponse::unsafe_arena_release_reply_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio)
  
  ::google::cloud::dialogflow::v2::OutputAudio* temp = _impl_.reply_audio_;
  _impl_.reply_audio_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudio* AnalyzeContentResponse::_internal_mutable_reply_audio() {
  
  if (_impl_.reply_audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudio>(GetArenaForAllocation());
    _impl_.reply_audio_ = p;
  }
  return _impl_.reply_audio_;
}
inline ::google::cloud::dialogflow::v2::OutputAudio* AnalyzeContentResponse::mutable_reply_audio() {
  ::google::cloud::dialogflow::v2::OutputAudio* _msg = _internal_mutable_reply_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio)
  return _msg;
}
inline void AnalyzeContentResponse::set_allocated_reply_audio(::google::cloud::dialogflow::v2::OutputAudio* reply_audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reply_audio_;
  }
  if (reply_audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reply_audio);
    if (message_arena != submessage_arena) {
      reply_audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_audio, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reply_audio_ = reply_audio;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio)
}

// .google.cloud.dialogflow.v2.AutomatedAgentReply automated_agent_reply = 3;
inline bool AnalyzeContentResponse::_internal_has_automated_agent_reply() const {
  return this != internal_default_instance() && _impl_.automated_agent_reply_ != nullptr;
}
inline bool AnalyzeContentResponse::has_automated_agent_reply() const {
  return _internal_has_automated_agent_reply();
}
inline void AnalyzeContentResponse::clear_automated_agent_reply() {
  if (GetArenaForAllocation() == nullptr && _impl_.automated_agent_reply_ != nullptr) {
    delete _impl_.automated_agent_reply_;
  }
  _impl_.automated_agent_reply_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AutomatedAgentReply& AnalyzeContentResponse::_internal_automated_agent_reply() const {
  const ::google::cloud::dialogflow::v2::AutomatedAgentReply* p = _impl_.automated_agent_reply_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AutomatedAgentReply&>(
      ::google::cloud::dialogflow::v2::_AutomatedAgentReply_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AutomatedAgentReply& AnalyzeContentResponse::automated_agent_reply() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.automated_agent_reply)
  return _internal_automated_agent_reply();
}
inline void AnalyzeContentResponse::unsafe_arena_set_allocated_automated_agent_reply(
    ::google::cloud::dialogflow::v2::AutomatedAgentReply* automated_agent_reply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.automated_agent_reply_);
  }
  _impl_.automated_agent_reply_ = automated_agent_reply;
  if (automated_agent_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.automated_agent_reply)
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply* AnalyzeContentResponse::release_automated_agent_reply() {
  
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* temp = _impl_.automated_agent_reply_;
  _impl_.automated_agent_reply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply* AnalyzeContentResponse::unsafe_arena_release_automated_agent_reply() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentResponse.automated_agent_reply)
  
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* temp = _impl_.automated_agent_reply_;
  _impl_.automated_agent_reply_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply* AnalyzeContentResponse::_internal_mutable_automated_agent_reply() {
  
  if (_impl_.automated_agent_reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AutomatedAgentReply>(GetArenaForAllocation());
    _impl_.automated_agent_reply_ = p;
  }
  return _impl_.automated_agent_reply_;
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply* AnalyzeContentResponse::mutable_automated_agent_reply() {
  ::google::cloud::dialogflow::v2::AutomatedAgentReply* _msg = _internal_mutable_automated_agent_reply();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.automated_agent_reply)
  return _msg;
}
inline void AnalyzeContentResponse::set_allocated_automated_agent_reply(::google::cloud::dialogflow::v2::AutomatedAgentReply* automated_agent_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.automated_agent_reply_;
  }
  if (automated_agent_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(automated_agent_reply);
    if (message_arena != submessage_arena) {
      automated_agent_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, automated_agent_reply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.automated_agent_reply_ = automated_agent_reply;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.automated_agent_reply)
}

// .google.cloud.dialogflow.v2.Message message = 5;
inline bool AnalyzeContentResponse::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool AnalyzeContentResponse::has_message() const {
  return _internal_has_message();
}
inline void AnalyzeContentResponse::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Message& AnalyzeContentResponse::_internal_message() const {
  const ::google::cloud::dialogflow::v2::Message* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Message&>(
      ::google::cloud::dialogflow::v2::_Message_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Message& AnalyzeContentResponse::message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.message)
  return _internal_message();
}
inline void AnalyzeContentResponse::unsafe_arena_set_allocated_message(
    ::google::cloud::dialogflow::v2::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.message)
}
inline ::google::cloud::dialogflow::v2::Message* AnalyzeContentResponse::release_message() {
  
  ::google::cloud::dialogflow::v2::Message* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Message* AnalyzeContentResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentResponse.message)
  
  ::google::cloud::dialogflow::v2::Message* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Message* AnalyzeContentResponse::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Message>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::google::cloud::dialogflow::v2::Message* AnalyzeContentResponse::mutable_message() {
  ::google::cloud::dialogflow::v2::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.message)
  return _msg;
}
inline void AnalyzeContentResponse::set_allocated_message(::google::cloud::dialogflow::v2::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.message)
}

// repeated .google.cloud.dialogflow.v2.SuggestionResult human_agent_suggestion_results = 6;
inline int AnalyzeContentResponse::_internal_human_agent_suggestion_results_size() const {
  return _impl_.human_agent_suggestion_results_.size();
}
inline int AnalyzeContentResponse::human_agent_suggestion_results_size() const {
  return _internal_human_agent_suggestion_results_size();
}
inline void AnalyzeContentResponse::clear_human_agent_suggestion_results() {
  _impl_.human_agent_suggestion_results_.Clear();
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::mutable_human_agent_suggestion_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.human_agent_suggestion_results)
  return _impl_.human_agent_suggestion_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >*
AnalyzeContentResponse::mutable_human_agent_suggestion_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.AnalyzeContentResponse.human_agent_suggestion_results)
  return &_impl_.human_agent_suggestion_results_;
}
inline const ::google::cloud::dialogflow::v2::SuggestionResult& AnalyzeContentResponse::_internal_human_agent_suggestion_results(int index) const {
  return _impl_.human_agent_suggestion_results_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::SuggestionResult& AnalyzeContentResponse::human_agent_suggestion_results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.human_agent_suggestion_results)
  return _internal_human_agent_suggestion_results(index);
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::_internal_add_human_agent_suggestion_results() {
  return _impl_.human_agent_suggestion_results_.Add();
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::add_human_agent_suggestion_results() {
  ::google::cloud::dialogflow::v2::SuggestionResult* _add = _internal_add_human_agent_suggestion_results();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.AnalyzeContentResponse.human_agent_suggestion_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >&
AnalyzeContentResponse::human_agent_suggestion_results() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.AnalyzeContentResponse.human_agent_suggestion_results)
  return _impl_.human_agent_suggestion_results_;
}

// repeated .google.cloud.dialogflow.v2.SuggestionResult end_user_suggestion_results = 7;
inline int AnalyzeContentResponse::_internal_end_user_suggestion_results_size() const {
  return _impl_.end_user_suggestion_results_.size();
}
inline int AnalyzeContentResponse::end_user_suggestion_results_size() const {
  return _internal_end_user_suggestion_results_size();
}
inline void AnalyzeContentResponse::clear_end_user_suggestion_results() {
  _impl_.end_user_suggestion_results_.Clear();
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::mutable_end_user_suggestion_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.end_user_suggestion_results)
  return _impl_.end_user_suggestion_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >*
AnalyzeContentResponse::mutable_end_user_suggestion_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.AnalyzeContentResponse.end_user_suggestion_results)
  return &_impl_.end_user_suggestion_results_;
}
inline const ::google::cloud::dialogflow::v2::SuggestionResult& AnalyzeContentResponse::_internal_end_user_suggestion_results(int index) const {
  return _impl_.end_user_suggestion_results_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::SuggestionResult& AnalyzeContentResponse::end_user_suggestion_results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.end_user_suggestion_results)
  return _internal_end_user_suggestion_results(index);
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::_internal_add_end_user_suggestion_results() {
  return _impl_.end_user_suggestion_results_.Add();
}
inline ::google::cloud::dialogflow::v2::SuggestionResult* AnalyzeContentResponse::add_end_user_suggestion_results() {
  ::google::cloud::dialogflow::v2::SuggestionResult* _add = _internal_add_end_user_suggestion_results();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.AnalyzeContentResponse.end_user_suggestion_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SuggestionResult >&
AnalyzeContentResponse::end_user_suggestion_results() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.AnalyzeContentResponse.end_user_suggestion_results)
  return _impl_.end_user_suggestion_results_;
}

// .google.cloud.dialogflow.v2.DtmfParameters dtmf_parameters = 9;
inline bool AnalyzeContentResponse::_internal_has_dtmf_parameters() const {
  return this != internal_default_instance() && _impl_.dtmf_parameters_ != nullptr;
}
inline bool AnalyzeContentResponse::has_dtmf_parameters() const {
  return _internal_has_dtmf_parameters();
}
inline void AnalyzeContentResponse::clear_dtmf_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.dtmf_parameters_ != nullptr) {
    delete _impl_.dtmf_parameters_;
  }
  _impl_.dtmf_parameters_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::DtmfParameters& AnalyzeContentResponse::_internal_dtmf_parameters() const {
  const ::google::cloud::dialogflow::v2::DtmfParameters* p = _impl_.dtmf_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::DtmfParameters&>(
      ::google::cloud::dialogflow::v2::_DtmfParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::DtmfParameters& AnalyzeContentResponse::dtmf_parameters() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnalyzeContentResponse.dtmf_parameters)
  return _internal_dtmf_parameters();
}
inline void AnalyzeContentResponse::unsafe_arena_set_allocated_dtmf_parameters(
    ::google::cloud::dialogflow::v2::DtmfParameters* dtmf_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dtmf_parameters_);
  }
  _impl_.dtmf_parameters_ = dtmf_parameters;
  if (dtmf_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.dtmf_parameters)
}
inline ::google::cloud::dialogflow::v2::DtmfParameters* AnalyzeContentResponse::release_dtmf_parameters() {
  
  ::google::cloud::dialogflow::v2::DtmfParameters* temp = _impl_.dtmf_parameters_;
  _impl_.dtmf_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::DtmfParameters* AnalyzeContentResponse::unsafe_arena_release_dtmf_parameters() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnalyzeContentResponse.dtmf_parameters)
  
  ::google::cloud::dialogflow::v2::DtmfParameters* temp = _impl_.dtmf_parameters_;
  _impl_.dtmf_parameters_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::DtmfParameters* AnalyzeContentResponse::_internal_mutable_dtmf_parameters() {
  
  if (_impl_.dtmf_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::DtmfParameters>(GetArenaForAllocation());
    _impl_.dtmf_parameters_ = p;
  }
  return _impl_.dtmf_parameters_;
}
inline ::google::cloud::dialogflow::v2::DtmfParameters* AnalyzeContentResponse::mutable_dtmf_parameters() {
  ::google::cloud::dialogflow::v2::DtmfParameters* _msg = _internal_mutable_dtmf_parameters();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnalyzeContentResponse.dtmf_parameters)
  return _msg;
}
inline void AnalyzeContentResponse::set_allocated_dtmf_parameters(::google::cloud::dialogflow::v2::DtmfParameters* dtmf_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dtmf_parameters_;
  }
  if (dtmf_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dtmf_parameters);
    if (message_arena != submessage_arena) {
      dtmf_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dtmf_parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dtmf_parameters_ = dtmf_parameters;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnalyzeContentResponse.dtmf_parameters)
}

// -------------------------------------------------------------------

// SuggestArticlesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SuggestArticlesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SuggestArticlesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestArticlesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestArticlesRequest.parent)
}
inline std::string* SuggestArticlesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestArticlesRequest.parent)
  return _s;
}
inline const std::string& SuggestArticlesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SuggestArticlesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestArticlesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestArticlesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestArticlesRequest.parent)
  return _impl_.parent_.Release();
}
inline void SuggestArticlesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestArticlesRequest.parent)
}

// string latest_message = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void SuggestArticlesRequest::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestArticlesRequest::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestArticlesRequest::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message)
}
inline std::string* SuggestArticlesRequest::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message)
  return _s;
}
inline const std::string& SuggestArticlesRequest::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestArticlesRequest::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestArticlesRequest::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestArticlesRequest::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestArticlesRequest::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message)
}

// int32 context_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void SuggestArticlesRequest::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestArticlesRequest::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestArticlesRequest::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesRequest.context_size)
  return _internal_context_size();
}
inline void SuggestArticlesRequest::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestArticlesRequest::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestArticlesRequest.context_size)
}

// .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 4;
inline bool SuggestArticlesRequest::_internal_has_assist_query_params() const {
  return this != internal_default_instance() && _impl_.assist_query_params_ != nullptr;
}
inline bool SuggestArticlesRequest::has_assist_query_params() const {
  return _internal_has_assist_query_params();
}
inline void SuggestArticlesRequest::clear_assist_query_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.assist_query_params_ != nullptr) {
    delete _impl_.assist_query_params_;
  }
  _impl_.assist_query_params_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& SuggestArticlesRequest::_internal_assist_query_params() const {
  const ::google::cloud::dialogflow::v2::AssistQueryParameters* p = _impl_.assist_query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AssistQueryParameters&>(
      ::google::cloud::dialogflow::v2::_AssistQueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& SuggestArticlesRequest::assist_query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesRequest.assist_query_params)
  return _internal_assist_query_params();
}
inline void SuggestArticlesRequest::unsafe_arena_set_allocated_assist_query_params(
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assist_query_params_);
  }
  _impl_.assist_query_params_ = assist_query_params;
  if (assist_query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestArticlesRequest.assist_query_params)
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestArticlesRequest::release_assist_query_params() {
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestArticlesRequest::unsafe_arena_release_assist_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestArticlesRequest.assist_query_params)
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestArticlesRequest::_internal_mutable_assist_query_params() {
  
  if (_impl_.assist_query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AssistQueryParameters>(GetArenaForAllocation());
    _impl_.assist_query_params_ = p;
  }
  return _impl_.assist_query_params_;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestArticlesRequest::mutable_assist_query_params() {
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _msg = _internal_mutable_assist_query_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestArticlesRequest.assist_query_params)
  return _msg;
}
inline void SuggestArticlesRequest::set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assist_query_params_;
  }
  if (assist_query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assist_query_params);
    if (message_arena != submessage_arena) {
      assist_query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assist_query_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assist_query_params_ = assist_query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestArticlesRequest.assist_query_params)
}

// -------------------------------------------------------------------

// SuggestArticlesResponse

// repeated .google.cloud.dialogflow.v2.ArticleAnswer article_answers = 1;
inline int SuggestArticlesResponse::_internal_article_answers_size() const {
  return _impl_.article_answers_.size();
}
inline int SuggestArticlesResponse::article_answers_size() const {
  return _internal_article_answers_size();
}
inline void SuggestArticlesResponse::clear_article_answers() {
  _impl_.article_answers_.Clear();
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* SuggestArticlesResponse::mutable_article_answers(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestArticlesResponse.article_answers)
  return _impl_.article_answers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ArticleAnswer >*
SuggestArticlesResponse::mutable_article_answers() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.SuggestArticlesResponse.article_answers)
  return &_impl_.article_answers_;
}
inline const ::google::cloud::dialogflow::v2::ArticleAnswer& SuggestArticlesResponse::_internal_article_answers(int index) const {
  return _impl_.article_answers_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::ArticleAnswer& SuggestArticlesResponse::article_answers(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesResponse.article_answers)
  return _internal_article_answers(index);
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* SuggestArticlesResponse::_internal_add_article_answers() {
  return _impl_.article_answers_.Add();
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* SuggestArticlesResponse::add_article_answers() {
  ::google::cloud::dialogflow::v2::ArticleAnswer* _add = _internal_add_article_answers();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.SuggestArticlesResponse.article_answers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::ArticleAnswer >&
SuggestArticlesResponse::article_answers() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.SuggestArticlesResponse.article_answers)
  return _impl_.article_answers_;
}

// string latest_message = 2;
inline void SuggestArticlesResponse::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestArticlesResponse::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestArticlesResponse::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message)
}
inline std::string* SuggestArticlesResponse::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message)
  return _s;
}
inline const std::string& SuggestArticlesResponse::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestArticlesResponse::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestArticlesResponse::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestArticlesResponse::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestArticlesResponse::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message)
}

// int32 context_size = 3;
inline void SuggestArticlesResponse::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestArticlesResponse::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestArticlesResponse::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestArticlesResponse.context_size)
  return _internal_context_size();
}
inline void SuggestArticlesResponse::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestArticlesResponse::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestArticlesResponse.context_size)
}

// -------------------------------------------------------------------

// SuggestFaqAnswersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SuggestFaqAnswersRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SuggestFaqAnswersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestFaqAnswersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.parent)
}
inline std::string* SuggestFaqAnswersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.parent)
  return _s;
}
inline const std::string& SuggestFaqAnswersRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SuggestFaqAnswersRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.parent)
  return _impl_.parent_.Release();
}
inline void SuggestFaqAnswersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.parent)
}

// string latest_message = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void SuggestFaqAnswersRequest::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestFaqAnswersRequest::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestFaqAnswersRequest::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.latest_message)
}
inline std::string* SuggestFaqAnswersRequest::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.latest_message)
  return _s;
}
inline const std::string& SuggestFaqAnswersRequest::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestFaqAnswersRequest::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersRequest::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersRequest::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestFaqAnswersRequest::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.latest_message)
}

// int32 context_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void SuggestFaqAnswersRequest::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestFaqAnswersRequest::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestFaqAnswersRequest::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.context_size)
  return _internal_context_size();
}
inline void SuggestFaqAnswersRequest::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestFaqAnswersRequest::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.context_size)
}

// .google.cloud.dialogflow.v2.AssistQueryParameters assist_query_params = 4;
inline bool SuggestFaqAnswersRequest::_internal_has_assist_query_params() const {
  return this != internal_default_instance() && _impl_.assist_query_params_ != nullptr;
}
inline bool SuggestFaqAnswersRequest::has_assist_query_params() const {
  return _internal_has_assist_query_params();
}
inline void SuggestFaqAnswersRequest::clear_assist_query_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.assist_query_params_ != nullptr) {
    delete _impl_.assist_query_params_;
  }
  _impl_.assist_query_params_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& SuggestFaqAnswersRequest::_internal_assist_query_params() const {
  const ::google::cloud::dialogflow::v2::AssistQueryParameters* p = _impl_.assist_query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AssistQueryParameters&>(
      ::google::cloud::dialogflow::v2::_AssistQueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AssistQueryParameters& SuggestFaqAnswersRequest::assist_query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.assist_query_params)
  return _internal_assist_query_params();
}
inline void SuggestFaqAnswersRequest::unsafe_arena_set_allocated_assist_query_params(
    ::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assist_query_params_);
  }
  _impl_.assist_query_params_ = assist_query_params;
  if (assist_query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.assist_query_params)
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestFaqAnswersRequest::release_assist_query_params() {
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestFaqAnswersRequest::unsafe_arena_release_assist_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.assist_query_params)
  
  ::google::cloud::dialogflow::v2::AssistQueryParameters* temp = _impl_.assist_query_params_;
  _impl_.assist_query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestFaqAnswersRequest::_internal_mutable_assist_query_params() {
  
  if (_impl_.assist_query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AssistQueryParameters>(GetArenaForAllocation());
    _impl_.assist_query_params_ = p;
  }
  return _impl_.assist_query_params_;
}
inline ::google::cloud::dialogflow::v2::AssistQueryParameters* SuggestFaqAnswersRequest::mutable_assist_query_params() {
  ::google::cloud::dialogflow::v2::AssistQueryParameters* _msg = _internal_mutable_assist_query_params();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.assist_query_params)
  return _msg;
}
inline void SuggestFaqAnswersRequest::set_allocated_assist_query_params(::google::cloud::dialogflow::v2::AssistQueryParameters* assist_query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assist_query_params_;
  }
  if (assist_query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assist_query_params);
    if (message_arena != submessage_arena) {
      assist_query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assist_query_params, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assist_query_params_ = assist_query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.assist_query_params)
}

// -------------------------------------------------------------------

// SuggestFaqAnswersResponse

// repeated .google.cloud.dialogflow.v2.FaqAnswer faq_answers = 1;
inline int SuggestFaqAnswersResponse::_internal_faq_answers_size() const {
  return _impl_.faq_answers_.size();
}
inline int SuggestFaqAnswersResponse::faq_answers_size() const {
  return _internal_faq_answers_size();
}
inline void SuggestFaqAnswersResponse::clear_faq_answers() {
  _impl_.faq_answers_.Clear();
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* SuggestFaqAnswersResponse::mutable_faq_answers(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.faq_answers)
  return _impl_.faq_answers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::FaqAnswer >*
SuggestFaqAnswersResponse::mutable_faq_answers() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.faq_answers)
  return &_impl_.faq_answers_;
}
inline const ::google::cloud::dialogflow::v2::FaqAnswer& SuggestFaqAnswersResponse::_internal_faq_answers(int index) const {
  return _impl_.faq_answers_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::FaqAnswer& SuggestFaqAnswersResponse::faq_answers(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.faq_answers)
  return _internal_faq_answers(index);
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* SuggestFaqAnswersResponse::_internal_add_faq_answers() {
  return _impl_.faq_answers_.Add();
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* SuggestFaqAnswersResponse::add_faq_answers() {
  ::google::cloud::dialogflow::v2::FaqAnswer* _add = _internal_add_faq_answers();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.faq_answers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::FaqAnswer >&
SuggestFaqAnswersResponse::faq_answers() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.faq_answers)
  return _impl_.faq_answers_;
}

// string latest_message = 2;
inline void SuggestFaqAnswersResponse::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestFaqAnswersResponse::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestFaqAnswersResponse::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message)
}
inline std::string* SuggestFaqAnswersResponse::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message)
  return _s;
}
inline const std::string& SuggestFaqAnswersResponse::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestFaqAnswersResponse::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersResponse::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestFaqAnswersResponse::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestFaqAnswersResponse::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message)
}

// int32 context_size = 3;
inline void SuggestFaqAnswersResponse::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestFaqAnswersResponse::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestFaqAnswersResponse::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.context_size)
  return _internal_context_size();
}
inline void SuggestFaqAnswersResponse::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestFaqAnswersResponse::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.context_size)
}

// -------------------------------------------------------------------

// SuggestSmartRepliesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SuggestSmartRepliesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SuggestSmartRepliesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestSmartRepliesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.parent)
}
inline std::string* SuggestSmartRepliesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.parent)
  return _s;
}
inline const std::string& SuggestSmartRepliesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SuggestSmartRepliesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.parent)
  return _impl_.parent_.Release();
}
inline void SuggestSmartRepliesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.parent)
}

// .google.cloud.dialogflow.v2.TextInput current_text_input = 4;
inline bool SuggestSmartRepliesRequest::_internal_has_current_text_input() const {
  return this != internal_default_instance() && _impl_.current_text_input_ != nullptr;
}
inline bool SuggestSmartRepliesRequest::has_current_text_input() const {
  return _internal_has_current_text_input();
}
inline const ::google::cloud::dialogflow::v2::TextInput& SuggestSmartRepliesRequest::_internal_current_text_input() const {
  const ::google::cloud::dialogflow::v2::TextInput* p = _impl_.current_text_input_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::TextInput&>(
      ::google::cloud::dialogflow::v2::_TextInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::TextInput& SuggestSmartRepliesRequest::current_text_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.current_text_input)
  return _internal_current_text_input();
}
inline void SuggestSmartRepliesRequest::unsafe_arena_set_allocated_current_text_input(
    ::google::cloud::dialogflow::v2::TextInput* current_text_input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_text_input_);
  }
  _impl_.current_text_input_ = current_text_input;
  if (current_text_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.current_text_input)
}
inline ::google::cloud::dialogflow::v2::TextInput* SuggestSmartRepliesRequest::release_current_text_input() {
  
  ::google::cloud::dialogflow::v2::TextInput* temp = _impl_.current_text_input_;
  _impl_.current_text_input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::TextInput* SuggestSmartRepliesRequest::unsafe_arena_release_current_text_input() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.current_text_input)
  
  ::google::cloud::dialogflow::v2::TextInput* temp = _impl_.current_text_input_;
  _impl_.current_text_input_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::TextInput* SuggestSmartRepliesRequest::_internal_mutable_current_text_input() {
  
  if (_impl_.current_text_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::TextInput>(GetArenaForAllocation());
    _impl_.current_text_input_ = p;
  }
  return _impl_.current_text_input_;
}
inline ::google::cloud::dialogflow::v2::TextInput* SuggestSmartRepliesRequest::mutable_current_text_input() {
  ::google::cloud::dialogflow::v2::TextInput* _msg = _internal_mutable_current_text_input();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.current_text_input)
  return _msg;
}
inline void SuggestSmartRepliesRequest::set_allocated_current_text_input(::google::cloud::dialogflow::v2::TextInput* current_text_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_text_input_);
  }
  if (current_text_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_text_input));
    if (message_arena != submessage_arena) {
      current_text_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_text_input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_text_input_ = current_text_input;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.current_text_input)
}

// string latest_message = 2 [(.google.api.resource_reference) = {
inline void SuggestSmartRepliesRequest::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestSmartRepliesRequest::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestSmartRepliesRequest::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.latest_message)
}
inline std::string* SuggestSmartRepliesRequest::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.latest_message)
  return _s;
}
inline const std::string& SuggestSmartRepliesRequest::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestSmartRepliesRequest::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesRequest::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesRequest::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestSmartRepliesRequest::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.latest_message)
}

// int32 context_size = 3;
inline void SuggestSmartRepliesRequest::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestSmartRepliesRequest::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestSmartRepliesRequest::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.context_size)
  return _internal_context_size();
}
inline void SuggestSmartRepliesRequest::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestSmartRepliesRequest::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.context_size)
}

// -------------------------------------------------------------------

// SuggestSmartRepliesResponse

// repeated .google.cloud.dialogflow.v2.SmartReplyAnswer smart_reply_answers = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int SuggestSmartRepliesResponse::_internal_smart_reply_answers_size() const {
  return _impl_.smart_reply_answers_.size();
}
inline int SuggestSmartRepliesResponse::smart_reply_answers_size() const {
  return _internal_smart_reply_answers_size();
}
inline void SuggestSmartRepliesResponse::clear_smart_reply_answers() {
  _impl_.smart_reply_answers_.Clear();
}
inline ::google::cloud::dialogflow::v2::SmartReplyAnswer* SuggestSmartRepliesResponse::mutable_smart_reply_answers(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.smart_reply_answers)
  return _impl_.smart_reply_answers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SmartReplyAnswer >*
SuggestSmartRepliesResponse::mutable_smart_reply_answers() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.smart_reply_answers)
  return &_impl_.smart_reply_answers_;
}
inline const ::google::cloud::dialogflow::v2::SmartReplyAnswer& SuggestSmartRepliesResponse::_internal_smart_reply_answers(int index) const {
  return _impl_.smart_reply_answers_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::SmartReplyAnswer& SuggestSmartRepliesResponse::smart_reply_answers(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.smart_reply_answers)
  return _internal_smart_reply_answers(index);
}
inline ::google::cloud::dialogflow::v2::SmartReplyAnswer* SuggestSmartRepliesResponse::_internal_add_smart_reply_answers() {
  return _impl_.smart_reply_answers_.Add();
}
inline ::google::cloud::dialogflow::v2::SmartReplyAnswer* SuggestSmartRepliesResponse::add_smart_reply_answers() {
  ::google::cloud::dialogflow::v2::SmartReplyAnswer* _add = _internal_add_smart_reply_answers();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.smart_reply_answers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SmartReplyAnswer >&
SuggestSmartRepliesResponse::smart_reply_answers() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.smart_reply_answers)
  return _impl_.smart_reply_answers_;
}

// string latest_message = 2 [(.google.api.resource_reference) = {
inline void SuggestSmartRepliesResponse::clear_latest_message() {
  _impl_.latest_message_.ClearToEmpty();
}
inline const std::string& SuggestSmartRepliesResponse::latest_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message)
  return _internal_latest_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuggestSmartRepliesResponse::set_latest_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latest_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message)
}
inline std::string* SuggestSmartRepliesResponse::mutable_latest_message() {
  std::string* _s = _internal_mutable_latest_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message)
  return _s;
}
inline const std::string& SuggestSmartRepliesResponse::_internal_latest_message() const {
  return _impl_.latest_message_.Get();
}
inline void SuggestSmartRepliesResponse::_internal_set_latest_message(const std::string& value) {
  
  _impl_.latest_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesResponse::_internal_mutable_latest_message() {
  
  return _impl_.latest_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SuggestSmartRepliesResponse::release_latest_message() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message)
  return _impl_.latest_message_.Release();
}
inline void SuggestSmartRepliesResponse::set_allocated_latest_message(std::string* latest_message) {
  if (latest_message != nullptr) {
    
  } else {
    
  }
  _impl_.latest_message_.SetAllocated(latest_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latest_message_.IsDefault()) {
    _impl_.latest_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message)
}

// int32 context_size = 3;
inline void SuggestSmartRepliesResponse::clear_context_size() {
  _impl_.context_size_ = 0;
}
inline int32_t SuggestSmartRepliesResponse::_internal_context_size() const {
  return _impl_.context_size_;
}
inline int32_t SuggestSmartRepliesResponse::context_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.context_size)
  return _internal_context_size();
}
inline void SuggestSmartRepliesResponse::_internal_set_context_size(int32_t value) {
  
  _impl_.context_size_ = value;
}
inline void SuggestSmartRepliesResponse::set_context_size(int32_t value) {
  _internal_set_context_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.context_size)
}

// -------------------------------------------------------------------

// OutputAudio

// .google.cloud.dialogflow.v2.OutputAudioConfig config = 1;
inline bool OutputAudio::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool OutputAudio::has_config() const {
  return _internal_has_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& OutputAudio::_internal_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& OutputAudio::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.OutputAudio.config)
  return _internal_config();
}
inline void OutputAudio::unsafe_arena_set_allocated_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.OutputAudio.config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* OutputAudio::release_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* OutputAudio::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.OutputAudio.config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* OutputAudio::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* OutputAudio::mutable_config() {
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.OutputAudio.config)
  return _msg;
}
inline void OutputAudio::set_allocated_config(::google::cloud::dialogflow::v2::OutputAudioConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.OutputAudio.config)
}

// bytes audio = 2;
inline void OutputAudio::clear_audio() {
  _impl_.audio_.ClearToEmpty();
}
inline const std::string& OutputAudio::audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.OutputAudio.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputAudio::set_audio(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.OutputAudio.audio)
}
inline std::string* OutputAudio::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.OutputAudio.audio)
  return _s;
}
inline const std::string& OutputAudio::_internal_audio() const {
  return _impl_.audio_.Get();
}
inline void OutputAudio::_internal_set_audio(const std::string& value) {
  
  _impl_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* OutputAudio::_internal_mutable_audio() {
  
  return _impl_.audio_.Mutable(GetArenaForAllocation());
}
inline std::string* OutputAudio::release_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.OutputAudio.audio)
  return _impl_.audio_.Release();
}
inline void OutputAudio::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  _impl_.audio_.SetAllocated(audio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_.IsDefault()) {
    _impl_.audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.OutputAudio.audio)
}

// -------------------------------------------------------------------

// AutomatedAgentReply

// .google.cloud.dialogflow.v2.DetectIntentResponse detect_intent_response = 1;
inline bool AutomatedAgentReply::_internal_has_detect_intent_response() const {
  return this != internal_default_instance() && _impl_.detect_intent_response_ != nullptr;
}
inline bool AutomatedAgentReply::has_detect_intent_response() const {
  return _internal_has_detect_intent_response();
}
inline const ::google::cloud::dialogflow::v2::DetectIntentResponse& AutomatedAgentReply::_internal_detect_intent_response() const {
  const ::google::cloud::dialogflow::v2::DetectIntentResponse* p = _impl_.detect_intent_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::DetectIntentResponse&>(
      ::google::cloud::dialogflow::v2::_DetectIntentResponse_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::DetectIntentResponse& AutomatedAgentReply::detect_intent_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AutomatedAgentReply.detect_intent_response)
  return _internal_detect_intent_response();
}
inline void AutomatedAgentReply::unsafe_arena_set_allocated_detect_intent_response(
    ::google::cloud::dialogflow::v2::DetectIntentResponse* detect_intent_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detect_intent_response_);
  }
  _impl_.detect_intent_response_ = detect_intent_response;
  if (detect_intent_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AutomatedAgentReply.detect_intent_response)
}
inline ::google::cloud::dialogflow::v2::DetectIntentResponse* AutomatedAgentReply::release_detect_intent_response() {
  
  ::google::cloud::dialogflow::v2::DetectIntentResponse* temp = _impl_.detect_intent_response_;
  _impl_.detect_intent_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::DetectIntentResponse* AutomatedAgentReply::unsafe_arena_release_detect_intent_response() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AutomatedAgentReply.detect_intent_response)
  
  ::google::cloud::dialogflow::v2::DetectIntentResponse* temp = _impl_.detect_intent_response_;
  _impl_.detect_intent_response_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::DetectIntentResponse* AutomatedAgentReply::_internal_mutable_detect_intent_response() {
  
  if (_impl_.detect_intent_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::DetectIntentResponse>(GetArenaForAllocation());
    _impl_.detect_intent_response_ = p;
  }
  return _impl_.detect_intent_response_;
}
inline ::google::cloud::dialogflow::v2::DetectIntentResponse* AutomatedAgentReply::mutable_detect_intent_response() {
  ::google::cloud::dialogflow::v2::DetectIntentResponse* _msg = _internal_mutable_detect_intent_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AutomatedAgentReply.detect_intent_response)
  return _msg;
}
inline void AutomatedAgentReply::set_allocated_detect_intent_response(::google::cloud::dialogflow::v2::DetectIntentResponse* detect_intent_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detect_intent_response_);
  }
  if (detect_intent_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detect_intent_response));
    if (message_arena != submessage_arena) {
      detect_intent_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_intent_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.detect_intent_response_ = detect_intent_response;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AutomatedAgentReply.detect_intent_response)
}

// .google.cloud.dialogflow.v2.AutomatedAgentReply.AutomatedAgentReplyType automated_agent_reply_type = 7;
inline void AutomatedAgentReply::clear_automated_agent_reply_type() {
  _impl_.automated_agent_reply_type_ = 0;
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType AutomatedAgentReply::_internal_automated_agent_reply_type() const {
  return static_cast< ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType >(_impl_.automated_agent_reply_type_);
}
inline ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType AutomatedAgentReply::automated_agent_reply_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AutomatedAgentReply.automated_agent_reply_type)
  return _internal_automated_agent_reply_type();
}
inline void AutomatedAgentReply::_internal_set_automated_agent_reply_type(::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType value) {
  
  _impl_.automated_agent_reply_type_ = value;
}
inline void AutomatedAgentReply::set_automated_agent_reply_type(::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType value) {
  _internal_set_automated_agent_reply_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AutomatedAgentReply.automated_agent_reply_type)
}

// bool allow_cancellation = 8;
inline void AutomatedAgentReply::clear_allow_cancellation() {
  _impl_.allow_cancellation_ = false;
}
inline bool AutomatedAgentReply::_internal_allow_cancellation() const {
  return _impl_.allow_cancellation_;
}
inline bool AutomatedAgentReply::allow_cancellation() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AutomatedAgentReply.allow_cancellation)
  return _internal_allow_cancellation();
}
inline void AutomatedAgentReply::_internal_set_allow_cancellation(bool value) {
  
  _impl_.allow_cancellation_ = value;
}
inline void AutomatedAgentReply::set_allow_cancellation(bool value) {
  _internal_set_allow_cancellation(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AutomatedAgentReply.allow_cancellation)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ArticleAnswer

// string title = 1;
inline void ArticleAnswer::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ArticleAnswer::title() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ArticleAnswer.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArticleAnswer::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.title)
}
inline std::string* ArticleAnswer::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ArticleAnswer.title)
  return _s;
}
inline const std::string& ArticleAnswer::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ArticleAnswer::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ArticleAnswer::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ArticleAnswer::release_title() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ArticleAnswer.title)
  return _impl_.title_.Release();
}
inline void ArticleAnswer::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ArticleAnswer.title)
}

// string uri = 2;
inline void ArticleAnswer::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& ArticleAnswer::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ArticleAnswer.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArticleAnswer::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.uri)
}
inline std::string* ArticleAnswer::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ArticleAnswer.uri)
  return _s;
}
inline const std::string& ArticleAnswer::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void ArticleAnswer::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ArticleAnswer::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* ArticleAnswer::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ArticleAnswer.uri)
  return _impl_.uri_.Release();
}
inline void ArticleAnswer::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ArticleAnswer.uri)
}

// repeated string snippets = 3;
inline int ArticleAnswer::_internal_snippets_size() const {
  return _impl_.snippets_.size();
}
inline int ArticleAnswer::snippets_size() const {
  return _internal_snippets_size();
}
inline void ArticleAnswer::clear_snippets() {
  _impl_.snippets_.Clear();
}
inline std::string* ArticleAnswer::add_snippets() {
  std::string* _s = _internal_add_snippets();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
  return _s;
}
inline const std::string& ArticleAnswer::_internal_snippets(int index) const {
  return _impl_.snippets_.Get(index);
}
inline const std::string& ArticleAnswer::snippets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
  return _internal_snippets(index);
}
inline std::string* ArticleAnswer::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
  return _impl_.snippets_.Mutable(index);
}
inline void ArticleAnswer::set_snippets(int index, const std::string& value) {
  _impl_.snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::set_snippets(int index, std::string&& value) {
  _impl_.snippets_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::set_snippets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::set_snippets(int index, const char* value, size_t size) {
  _impl_.snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline std::string* ArticleAnswer::_internal_add_snippets() {
  return _impl_.snippets_.Add();
}
inline void ArticleAnswer::add_snippets(const std::string& value) {
  _impl_.snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::add_snippets(std::string&& value) {
  _impl_.snippets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::add_snippets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline void ArticleAnswer::add_snippets(const char* value, size_t size) {
  _impl_.snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArticleAnswer::snippets() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
  return _impl_.snippets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArticleAnswer::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ArticleAnswer.snippets)
  return &_impl_.snippets_;
}

// float confidence = 4;
inline void ArticleAnswer::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float ArticleAnswer::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float ArticleAnswer::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ArticleAnswer.confidence)
  return _internal_confidence();
}
inline void ArticleAnswer::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void ArticleAnswer::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.confidence)
}

// map<string, string> metadata = 5;
inline int ArticleAnswer::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int ArticleAnswer::metadata_size() const {
  return _internal_metadata_size();
}
inline void ArticleAnswer::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ArticleAnswer::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ArticleAnswer::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.ArticleAnswer.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ArticleAnswer::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ArticleAnswer::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.ArticleAnswer.metadata)
  return _internal_mutable_metadata();
}

// string answer_record = 6;
inline void ArticleAnswer::clear_answer_record() {
  _impl_.answer_record_.ClearToEmpty();
}
inline const std::string& ArticleAnswer::answer_record() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ArticleAnswer.answer_record)
  return _internal_answer_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArticleAnswer::set_answer_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ArticleAnswer.answer_record)
}
inline std::string* ArticleAnswer::mutable_answer_record() {
  std::string* _s = _internal_mutable_answer_record();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ArticleAnswer.answer_record)
  return _s;
}
inline const std::string& ArticleAnswer::_internal_answer_record() const {
  return _impl_.answer_record_.Get();
}
inline void ArticleAnswer::_internal_set_answer_record(const std::string& value) {
  
  _impl_.answer_record_.Set(value, GetArenaForAllocation());
}
inline std::string* ArticleAnswer::_internal_mutable_answer_record() {
  
  return _impl_.answer_record_.Mutable(GetArenaForAllocation());
}
inline std::string* ArticleAnswer::release_answer_record() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ArticleAnswer.answer_record)
  return _impl_.answer_record_.Release();
}
inline void ArticleAnswer::set_allocated_answer_record(std::string* answer_record) {
  if (answer_record != nullptr) {
    
  } else {
    
  }
  _impl_.answer_record_.SetAllocated(answer_record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_record_.IsDefault()) {
    _impl_.answer_record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ArticleAnswer.answer_record)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FaqAnswer

// string answer = 1;
inline void FaqAnswer::clear_answer() {
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& FaqAnswer::answer() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.FaqAnswer.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaqAnswer::set_answer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.FaqAnswer.answer)
}
inline std::string* FaqAnswer::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.FaqAnswer.answer)
  return _s;
}
inline const std::string& FaqAnswer::_internal_answer() const {
  return _impl_.answer_.Get();
}
inline void FaqAnswer::_internal_set_answer(const std::string& value) {
  
  _impl_.answer_.Set(value, GetArenaForAllocation());
}
inline std::string* FaqAnswer::_internal_mutable_answer() {
  
  return _impl_.answer_.Mutable(GetArenaForAllocation());
}
inline std::string* FaqAnswer::release_answer() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.FaqAnswer.answer)
  return _impl_.answer_.Release();
}
inline void FaqAnswer::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  _impl_.answer_.SetAllocated(answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_.IsDefault()) {
    _impl_.answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.FaqAnswer.answer)
}

// float confidence = 2;
inline void FaqAnswer::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float FaqAnswer::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float FaqAnswer::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.FaqAnswer.confidence)
  return _internal_confidence();
}
inline void FaqAnswer::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void FaqAnswer::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.FaqAnswer.confidence)
}

// string question = 3;
inline void FaqAnswer::clear_question() {
  _impl_.question_.ClearToEmpty();
}
inline const std::string& FaqAnswer::question() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.FaqAnswer.question)
  return _internal_question();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaqAnswer::set_question(ArgT0&& arg0, ArgT... args) {
 
 _impl_.question_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.FaqAnswer.question)
}
inline std::string* FaqAnswer::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.FaqAnswer.question)
  return _s;
}
inline const std::string& FaqAnswer::_internal_question() const {
  return _impl_.question_.Get();
}
inline void FaqAnswer::_internal_set_question(const std::string& value) {
  
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* FaqAnswer::_internal_mutable_question() {
  
  return _impl_.question_.Mutable(GetArenaForAllocation());
}
inline std::string* FaqAnswer::release_question() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.FaqAnswer.question)
  return _impl_.question_.Release();
}
inline void FaqAnswer::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    
  } else {
    
  }
  _impl_.question_.SetAllocated(question, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.FaqAnswer.question)
}

// string source = 4;
inline void FaqAnswer::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& FaqAnswer::source() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.FaqAnswer.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaqAnswer::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.FaqAnswer.source)
}
inline std::string* FaqAnswer::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.FaqAnswer.source)
  return _s;
}
inline const std::string& FaqAnswer::_internal_source() const {
  return _impl_.source_.Get();
}
inline void FaqAnswer::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* FaqAnswer::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* FaqAnswer::release_source() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.FaqAnswer.source)
  return _impl_.source_.Release();
}
inline void FaqAnswer::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.FaqAnswer.source)
}

// map<string, string> metadata = 5;
inline int FaqAnswer::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int FaqAnswer::metadata_size() const {
  return _internal_metadata_size();
}
inline void FaqAnswer::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaqAnswer::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaqAnswer::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.FaqAnswer.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaqAnswer::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaqAnswer::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.FaqAnswer.metadata)
  return _internal_mutable_metadata();
}

// string answer_record = 6;
inline void FaqAnswer::clear_answer_record() {
  _impl_.answer_record_.ClearToEmpty();
}
inline const std::string& FaqAnswer::answer_record() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.FaqAnswer.answer_record)
  return _internal_answer_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaqAnswer::set_answer_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.FaqAnswer.answer_record)
}
inline std::string* FaqAnswer::mutable_answer_record() {
  std::string* _s = _internal_mutable_answer_record();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.FaqAnswer.answer_record)
  return _s;
}
inline const std::string& FaqAnswer::_internal_answer_record() const {
  return _impl_.answer_record_.Get();
}
inline void FaqAnswer::_internal_set_answer_record(const std::string& value) {
  
  _impl_.answer_record_.Set(value, GetArenaForAllocation());
}
inline std::string* FaqAnswer::_internal_mutable_answer_record() {
  
  return _impl_.answer_record_.Mutable(GetArenaForAllocation());
}
inline std::string* FaqAnswer::release_answer_record() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.FaqAnswer.answer_record)
  return _impl_.answer_record_.Release();
}
inline void FaqAnswer::set_allocated_answer_record(std::string* answer_record) {
  if (answer_record != nullptr) {
    
  } else {
    
  }
  _impl_.answer_record_.SetAllocated(answer_record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_record_.IsDefault()) {
    _impl_.answer_record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.FaqAnswer.answer_record)
}

// -------------------------------------------------------------------

// SmartReplyAnswer

// string reply = 1;
inline void SmartReplyAnswer::clear_reply() {
  _impl_.reply_.ClearToEmpty();
}
inline const std::string& SmartReplyAnswer::reply() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SmartReplyAnswer.reply)
  return _internal_reply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmartReplyAnswer::set_reply(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SmartReplyAnswer.reply)
}
inline std::string* SmartReplyAnswer::mutable_reply() {
  std::string* _s = _internal_mutable_reply();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SmartReplyAnswer.reply)
  return _s;
}
inline const std::string& SmartReplyAnswer::_internal_reply() const {
  return _impl_.reply_.Get();
}
inline void SmartReplyAnswer::_internal_set_reply(const std::string& value) {
  
  _impl_.reply_.Set(value, GetArenaForAllocation());
}
inline std::string* SmartReplyAnswer::_internal_mutable_reply() {
  
  return _impl_.reply_.Mutable(GetArenaForAllocation());
}
inline std::string* SmartReplyAnswer::release_reply() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SmartReplyAnswer.reply)
  return _impl_.reply_.Release();
}
inline void SmartReplyAnswer::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  _impl_.reply_.SetAllocated(reply, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_.IsDefault()) {
    _impl_.reply_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SmartReplyAnswer.reply)
}

// float confidence = 2;
inline void SmartReplyAnswer::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float SmartReplyAnswer::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float SmartReplyAnswer::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SmartReplyAnswer.confidence)
  return _internal_confidence();
}
inline void SmartReplyAnswer::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void SmartReplyAnswer::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SmartReplyAnswer.confidence)
}

// string answer_record = 3 [(.google.api.resource_reference) = {
inline void SmartReplyAnswer::clear_answer_record() {
  _impl_.answer_record_.ClearToEmpty();
}
inline const std::string& SmartReplyAnswer::answer_record() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SmartReplyAnswer.answer_record)
  return _internal_answer_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmartReplyAnswer::set_answer_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SmartReplyAnswer.answer_record)
}
inline std::string* SmartReplyAnswer::mutable_answer_record() {
  std::string* _s = _internal_mutable_answer_record();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SmartReplyAnswer.answer_record)
  return _s;
}
inline const std::string& SmartReplyAnswer::_internal_answer_record() const {
  return _impl_.answer_record_.Get();
}
inline void SmartReplyAnswer::_internal_set_answer_record(const std::string& value) {
  
  _impl_.answer_record_.Set(value, GetArenaForAllocation());
}
inline std::string* SmartReplyAnswer::_internal_mutable_answer_record() {
  
  return _impl_.answer_record_.Mutable(GetArenaForAllocation());
}
inline std::string* SmartReplyAnswer::release_answer_record() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SmartReplyAnswer.answer_record)
  return _impl_.answer_record_.Release();
}
inline void SmartReplyAnswer::set_allocated_answer_record(std::string* answer_record) {
  if (answer_record != nullptr) {
    
  } else {
    
  }
  _impl_.answer_record_.SetAllocated(answer_record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_record_.IsDefault()) {
    _impl_.answer_record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SmartReplyAnswer.answer_record)
}

// -------------------------------------------------------------------

// SuggestionResult

// .google.rpc.Status error = 1;
inline bool SuggestionResult::_internal_has_error() const {
  return suggestion_response_case() == kError;
}
inline bool SuggestionResult::has_error() const {
  return _internal_has_error();
}
inline void SuggestionResult::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::google::rpc::Status* SuggestionResult::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestionResult.error)
  if (_internal_has_error()) {
    clear_has_suggestion_response();
    ::google::rpc::Status* temp = _impl_.suggestion_response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.suggestion_response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::rpc::Status& SuggestionResult::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.suggestion_response_.error_
      : reinterpret_cast< ::google::rpc::Status&>(::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& SuggestionResult::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestionResult.error)
  return _internal_error();
}
inline ::google::rpc::Status* SuggestionResult::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.SuggestionResult.error)
  if (_internal_has_error()) {
    clear_has_suggestion_response();
    ::google::rpc::Status* temp = _impl_.suggestion_response_.error_;
    _impl_.suggestion_response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SuggestionResult::unsafe_arena_set_allocated_error(::google::rpc::Status* error) {
  clear_suggestion_response();
  if (error) {
    set_has_error();
    _impl_.suggestion_response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestionResult.error)
}
inline ::google::rpc::Status* SuggestionResult::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_suggestion_response();
    set_has_error();
    _impl_.suggestion_response_.error_ = CreateMaybeMessage< ::google::rpc::Status >(GetArenaForAllocation());
  }
  return _impl_.suggestion_response_.error_;
}
inline ::google::rpc::Status* SuggestionResult::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestionResult.error)
  return _msg;
}

// .google.cloud.dialogflow.v2.SuggestArticlesResponse suggest_articles_response = 2;
inline bool SuggestionResult::_internal_has_suggest_articles_response() const {
  return suggestion_response_case() == kSuggestArticlesResponse;
}
inline bool SuggestionResult::has_suggest_articles_response() const {
  return _internal_has_suggest_articles_response();
}
inline void SuggestionResult::set_has_suggest_articles_response() {
  _impl_._oneof_case_[0] = kSuggestArticlesResponse;
}
inline void SuggestionResult::clear_suggest_articles_response() {
  if (_internal_has_suggest_articles_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.suggestion_response_.suggest_articles_response_;
    }
    clear_has_suggestion_response();
  }
}
inline ::google::cloud::dialogflow::v2::SuggestArticlesResponse* SuggestionResult::release_suggest_articles_response() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_articles_response)
  if (_internal_has_suggest_articles_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestArticlesResponse* temp = _impl_.suggestion_response_.suggest_articles_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.suggestion_response_.suggest_articles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::SuggestArticlesResponse& SuggestionResult::_internal_suggest_articles_response() const {
  return _internal_has_suggest_articles_response()
      ? *_impl_.suggestion_response_.suggest_articles_response_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::SuggestArticlesResponse&>(::google::cloud::dialogflow::v2::_SuggestArticlesResponse_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SuggestArticlesResponse& SuggestionResult::suggest_articles_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestionResult.suggest_articles_response)
  return _internal_suggest_articles_response();
}
inline ::google::cloud::dialogflow::v2::SuggestArticlesResponse* SuggestionResult::unsafe_arena_release_suggest_articles_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_articles_response)
  if (_internal_has_suggest_articles_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestArticlesResponse* temp = _impl_.suggestion_response_.suggest_articles_response_;
    _impl_.suggestion_response_.suggest_articles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SuggestionResult::unsafe_arena_set_allocated_suggest_articles_response(::google::cloud::dialogflow::v2::SuggestArticlesResponse* suggest_articles_response) {
  clear_suggestion_response();
  if (suggest_articles_response) {
    set_has_suggest_articles_response();
    _impl_.suggestion_response_.suggest_articles_response_ = suggest_articles_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestionResult.suggest_articles_response)
}
inline ::google::cloud::dialogflow::v2::SuggestArticlesResponse* SuggestionResult::_internal_mutable_suggest_articles_response() {
  if (!_internal_has_suggest_articles_response()) {
    clear_suggestion_response();
    set_has_suggest_articles_response();
    _impl_.suggestion_response_.suggest_articles_response_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::SuggestArticlesResponse >(GetArenaForAllocation());
  }
  return _impl_.suggestion_response_.suggest_articles_response_;
}
inline ::google::cloud::dialogflow::v2::SuggestArticlesResponse* SuggestionResult::mutable_suggest_articles_response() {
  ::google::cloud::dialogflow::v2::SuggestArticlesResponse* _msg = _internal_mutable_suggest_articles_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestionResult.suggest_articles_response)
  return _msg;
}

// .google.cloud.dialogflow.v2.SuggestFaqAnswersResponse suggest_faq_answers_response = 3;
inline bool SuggestionResult::_internal_has_suggest_faq_answers_response() const {
  return suggestion_response_case() == kSuggestFaqAnswersResponse;
}
inline bool SuggestionResult::has_suggest_faq_answers_response() const {
  return _internal_has_suggest_faq_answers_response();
}
inline void SuggestionResult::set_has_suggest_faq_answers_response() {
  _impl_._oneof_case_[0] = kSuggestFaqAnswersResponse;
}
inline void SuggestionResult::clear_suggest_faq_answers_response() {
  if (_internal_has_suggest_faq_answers_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.suggestion_response_.suggest_faq_answers_response_;
    }
    clear_has_suggestion_response();
  }
}
inline ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* SuggestionResult::release_suggest_faq_answers_response() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_faq_answers_response)
  if (_internal_has_suggest_faq_answers_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* temp = _impl_.suggestion_response_.suggest_faq_answers_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.suggestion_response_.suggest_faq_answers_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse& SuggestionResult::_internal_suggest_faq_answers_response() const {
  return _internal_has_suggest_faq_answers_response()
      ? *_impl_.suggestion_response_.suggest_faq_answers_response_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse&>(::google::cloud::dialogflow::v2::_SuggestFaqAnswersResponse_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse& SuggestionResult::suggest_faq_answers_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestionResult.suggest_faq_answers_response)
  return _internal_suggest_faq_answers_response();
}
inline ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* SuggestionResult::unsafe_arena_release_suggest_faq_answers_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_faq_answers_response)
  if (_internal_has_suggest_faq_answers_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* temp = _impl_.suggestion_response_.suggest_faq_answers_response_;
    _impl_.suggestion_response_.suggest_faq_answers_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SuggestionResult::unsafe_arena_set_allocated_suggest_faq_answers_response(::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* suggest_faq_answers_response) {
  clear_suggestion_response();
  if (suggest_faq_answers_response) {
    set_has_suggest_faq_answers_response();
    _impl_.suggestion_response_.suggest_faq_answers_response_ = suggest_faq_answers_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestionResult.suggest_faq_answers_response)
}
inline ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* SuggestionResult::_internal_mutable_suggest_faq_answers_response() {
  if (!_internal_has_suggest_faq_answers_response()) {
    clear_suggestion_response();
    set_has_suggest_faq_answers_response();
    _impl_.suggestion_response_.suggest_faq_answers_response_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse >(GetArenaForAllocation());
  }
  return _impl_.suggestion_response_.suggest_faq_answers_response_;
}
inline ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* SuggestionResult::mutable_suggest_faq_answers_response() {
  ::google::cloud::dialogflow::v2::SuggestFaqAnswersResponse* _msg = _internal_mutable_suggest_faq_answers_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestionResult.suggest_faq_answers_response)
  return _msg;
}

// .google.cloud.dialogflow.v2.SuggestSmartRepliesResponse suggest_smart_replies_response = 4;
inline bool SuggestionResult::_internal_has_suggest_smart_replies_response() const {
  return suggestion_response_case() == kSuggestSmartRepliesResponse;
}
inline bool SuggestionResult::has_suggest_smart_replies_response() const {
  return _internal_has_suggest_smart_replies_response();
}
inline void SuggestionResult::set_has_suggest_smart_replies_response() {
  _impl_._oneof_case_[0] = kSuggestSmartRepliesResponse;
}
inline void SuggestionResult::clear_suggest_smart_replies_response() {
  if (_internal_has_suggest_smart_replies_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.suggestion_response_.suggest_smart_replies_response_;
    }
    clear_has_suggestion_response();
  }
}
inline ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* SuggestionResult::release_suggest_smart_replies_response() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_smart_replies_response)
  if (_internal_has_suggest_smart_replies_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* temp = _impl_.suggestion_response_.suggest_smart_replies_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.suggestion_response_.suggest_smart_replies_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse& SuggestionResult::_internal_suggest_smart_replies_response() const {
  return _internal_has_suggest_smart_replies_response()
      ? *_impl_.suggestion_response_.suggest_smart_replies_response_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse&>(::google::cloud::dialogflow::v2::_SuggestSmartRepliesResponse_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse& SuggestionResult::suggest_smart_replies_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SuggestionResult.suggest_smart_replies_response)
  return _internal_suggest_smart_replies_response();
}
inline ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* SuggestionResult::unsafe_arena_release_suggest_smart_replies_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.SuggestionResult.suggest_smart_replies_response)
  if (_internal_has_suggest_smart_replies_response()) {
    clear_has_suggestion_response();
    ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* temp = _impl_.suggestion_response_.suggest_smart_replies_response_;
    _impl_.suggestion_response_.suggest_smart_replies_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SuggestionResult::unsafe_arena_set_allocated_suggest_smart_replies_response(::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* suggest_smart_replies_response) {
  clear_suggestion_response();
  if (suggest_smart_replies_response) {
    set_has_suggest_smart_replies_response();
    _impl_.suggestion_response_.suggest_smart_replies_response_ = suggest_smart_replies_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SuggestionResult.suggest_smart_replies_response)
}
inline ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* SuggestionResult::_internal_mutable_suggest_smart_replies_response() {
  if (!_internal_has_suggest_smart_replies_response()) {
    clear_suggestion_response();
    set_has_suggest_smart_replies_response();
    _impl_.suggestion_response_.suggest_smart_replies_response_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse >(GetArenaForAllocation());
  }
  return _impl_.suggestion_response_.suggest_smart_replies_response_;
}
inline ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* SuggestionResult::mutable_suggest_smart_replies_response() {
  ::google::cloud::dialogflow::v2::SuggestSmartRepliesResponse* _msg = _internal_mutable_suggest_smart_replies_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SuggestionResult.suggest_smart_replies_response)
  return _msg;
}

inline bool SuggestionResult::has_suggestion_response() const {
  return suggestion_response_case() != SUGGESTION_RESPONSE_NOT_SET;
}
inline void SuggestionResult::clear_has_suggestion_response() {
  _impl_._oneof_case_[0] = SUGGESTION_RESPONSE_NOT_SET;
}
inline SuggestionResult::SuggestionResponseCase SuggestionResult::suggestion_response_case() const {
  return SuggestionResult::SuggestionResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnnotatedMessagePart

// string text = 1;
inline void AnnotatedMessagePart::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& AnnotatedMessagePart::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnnotatedMessagePart.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnnotatedMessagePart::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnnotatedMessagePart.text)
}
inline std::string* AnnotatedMessagePart::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnnotatedMessagePart.text)
  return _s;
}
inline const std::string& AnnotatedMessagePart::_internal_text() const {
  return _impl_.text_.Get();
}
inline void AnnotatedMessagePart::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* AnnotatedMessagePart::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* AnnotatedMessagePart::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnnotatedMessagePart.text)
  return _impl_.text_.Release();
}
inline void AnnotatedMessagePart::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnnotatedMessagePart.text)
}

// string entity_type = 2;
inline void AnnotatedMessagePart::clear_entity_type() {
  _impl_.entity_type_.ClearToEmpty();
}
inline const std::string& AnnotatedMessagePart::entity_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnnotatedMessagePart.entity_type)
  return _internal_entity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnnotatedMessagePart::set_entity_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnnotatedMessagePart.entity_type)
}
inline std::string* AnnotatedMessagePart::mutable_entity_type() {
  std::string* _s = _internal_mutable_entity_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnnotatedMessagePart.entity_type)
  return _s;
}
inline const std::string& AnnotatedMessagePart::_internal_entity_type() const {
  return _impl_.entity_type_.Get();
}
inline void AnnotatedMessagePart::_internal_set_entity_type(const std::string& value) {
  
  _impl_.entity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AnnotatedMessagePart::_internal_mutable_entity_type() {
  
  return _impl_.entity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* AnnotatedMessagePart::release_entity_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnnotatedMessagePart.entity_type)
  return _impl_.entity_type_.Release();
}
inline void AnnotatedMessagePart::set_allocated_entity_type(std::string* entity_type) {
  if (entity_type != nullptr) {
    
  } else {
    
  }
  _impl_.entity_type_.SetAllocated(entity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_type_.IsDefault()) {
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnnotatedMessagePart.entity_type)
}

// .google.protobuf.Value formatted_value = 3;
inline bool AnnotatedMessagePart::_internal_has_formatted_value() const {
  return this != internal_default_instance() && _impl_.formatted_value_ != nullptr;
}
inline bool AnnotatedMessagePart::has_formatted_value() const {
  return _internal_has_formatted_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& AnnotatedMessagePart::_internal_formatted_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.formatted_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& AnnotatedMessagePart::formatted_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnnotatedMessagePart.formatted_value)
  return _internal_formatted_value();
}
inline void AnnotatedMessagePart::unsafe_arena_set_allocated_formatted_value(
    ::PROTOBUF_NAMESPACE_ID::Value* formatted_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formatted_value_);
  }
  _impl_.formatted_value_ = formatted_value;
  if (formatted_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnnotatedMessagePart.formatted_value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* AnnotatedMessagePart::release_formatted_value() {
  
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.formatted_value_;
  _impl_.formatted_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* AnnotatedMessagePart::unsafe_arena_release_formatted_value() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnnotatedMessagePart.formatted_value)
  
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.formatted_value_;
  _impl_.formatted_value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* AnnotatedMessagePart::_internal_mutable_formatted_value() {
  
  if (_impl_.formatted_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.formatted_value_ = p;
  }
  return _impl_.formatted_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* AnnotatedMessagePart::mutable_formatted_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_formatted_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnnotatedMessagePart.formatted_value)
  return _msg;
}
inline void AnnotatedMessagePart::set_allocated_formatted_value(::PROTOBUF_NAMESPACE_ID::Value* formatted_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formatted_value_);
  }
  if (formatted_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formatted_value));
    if (message_arena != submessage_arena) {
      formatted_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formatted_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.formatted_value_ = formatted_value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnnotatedMessagePart.formatted_value)
}

// -------------------------------------------------------------------

// MessageAnnotation

// repeated .google.cloud.dialogflow.v2.AnnotatedMessagePart parts = 1;
inline int MessageAnnotation::_internal_parts_size() const {
  return _impl_.parts_.size();
}
inline int MessageAnnotation::parts_size() const {
  return _internal_parts_size();
}
inline void MessageAnnotation::clear_parts() {
  _impl_.parts_.Clear();
}
inline ::google::cloud::dialogflow::v2::AnnotatedMessagePart* MessageAnnotation::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.MessageAnnotation.parts)
  return _impl_.parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnnotatedMessagePart >*
MessageAnnotation::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.MessageAnnotation.parts)
  return &_impl_.parts_;
}
inline const ::google::cloud::dialogflow::v2::AnnotatedMessagePart& MessageAnnotation::_internal_parts(int index) const {
  return _impl_.parts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::AnnotatedMessagePart& MessageAnnotation::parts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.MessageAnnotation.parts)
  return _internal_parts(index);
}
inline ::google::cloud::dialogflow::v2::AnnotatedMessagePart* MessageAnnotation::_internal_add_parts() {
  return _impl_.parts_.Add();
}
inline ::google::cloud::dialogflow::v2::AnnotatedMessagePart* MessageAnnotation::add_parts() {
  ::google::cloud::dialogflow::v2::AnnotatedMessagePart* _add = _internal_add_parts();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.MessageAnnotation.parts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnnotatedMessagePart >&
MessageAnnotation::parts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.MessageAnnotation.parts)
  return _impl_.parts_;
}

// bool contain_entities = 2;
inline void MessageAnnotation::clear_contain_entities() {
  _impl_.contain_entities_ = false;
}
inline bool MessageAnnotation::_internal_contain_entities() const {
  return _impl_.contain_entities_;
}
inline bool MessageAnnotation::contain_entities() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.MessageAnnotation.contain_entities)
  return _internal_contain_entities();
}
inline void MessageAnnotation::_internal_set_contain_entities(bool value) {
  
  _impl_.contain_entities_ = value;
}
inline void MessageAnnotation::set_contain_entities(bool value) {
  _internal_set_contain_entities(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.MessageAnnotation.contain_entities)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AssistQueryParameters

// map<string, string> documents_metadata_filters = 1;
inline int AssistQueryParameters::_internal_documents_metadata_filters_size() const {
  return _impl_.documents_metadata_filters_.size();
}
inline int AssistQueryParameters::documents_metadata_filters_size() const {
  return _internal_documents_metadata_filters_size();
}
inline void AssistQueryParameters::clear_documents_metadata_filters() {
  _impl_.documents_metadata_filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AssistQueryParameters::_internal_documents_metadata_filters() const {
  return _impl_.documents_metadata_filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AssistQueryParameters::documents_metadata_filters() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.AssistQueryParameters.documents_metadata_filters)
  return _internal_documents_metadata_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AssistQueryParameters::_internal_mutable_documents_metadata_filters() {
  return _impl_.documents_metadata_filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AssistQueryParameters::mutable_documents_metadata_filters() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.AssistQueryParameters.documents_metadata_filters)
  return _internal_mutable_documents_metadata_filters();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Participant_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Participant_Role>() {
  return ::google::cloud::dialogflow::v2::Participant_Role_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType>() {
  return ::google::cloud::dialogflow::v2::AutomatedAgentReply_AutomatedAgentReplyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fparticipant_2eproto
