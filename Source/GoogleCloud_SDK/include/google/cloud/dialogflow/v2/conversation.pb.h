// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/conversation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/audio_config.pb.h"
#include "google/cloud/dialogflow/v2/conversation_profile.pb.h"
#include "google/cloud/dialogflow/v2/participant.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class CompleteConversationRequest;
struct CompleteConversationRequestDefaultTypeInternal;
extern CompleteConversationRequestDefaultTypeInternal _CompleteConversationRequest_default_instance_;
class Conversation;
struct ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class ConversationPhoneNumber;
struct ConversationPhoneNumberDefaultTypeInternal;
extern ConversationPhoneNumberDefaultTypeInternal _ConversationPhoneNumber_default_instance_;
class CreateConversationRequest;
struct CreateConversationRequestDefaultTypeInternal;
extern CreateConversationRequestDefaultTypeInternal _CreateConversationRequest_default_instance_;
class GetConversationRequest;
struct GetConversationRequestDefaultTypeInternal;
extern GetConversationRequestDefaultTypeInternal _GetConversationRequest_default_instance_;
class ListConversationsRequest;
struct ListConversationsRequestDefaultTypeInternal;
extern ListConversationsRequestDefaultTypeInternal _ListConversationsRequest_default_instance_;
class ListConversationsResponse;
struct ListConversationsResponseDefaultTypeInternal;
extern ListConversationsResponseDefaultTypeInternal _ListConversationsResponse_default_instance_;
class ListMessagesRequest;
struct ListMessagesRequestDefaultTypeInternal;
extern ListMessagesRequestDefaultTypeInternal _ListMessagesRequest_default_instance_;
class ListMessagesResponse;
struct ListMessagesResponseDefaultTypeInternal;
extern ListMessagesResponseDefaultTypeInternal _ListMessagesResponse_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::CompleteConversationRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CompleteConversationRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::Conversation* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Conversation>(Arena*);
template<> ::google::cloud::dialogflow::v2::ConversationPhoneNumber* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationPhoneNumber>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateConversationRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateConversationRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetConversationRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetConversationRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListConversationsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListConversationsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListConversationsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListConversationsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListMessagesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListMessagesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListMessagesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListMessagesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Conversation_LifecycleState : int {
  Conversation_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED = 0,
  Conversation_LifecycleState_IN_PROGRESS = 1,
  Conversation_LifecycleState_COMPLETED = 2,
  Conversation_LifecycleState_Conversation_LifecycleState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Conversation_LifecycleState_Conversation_LifecycleState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Conversation_LifecycleState_IsValid(int value);
constexpr Conversation_LifecycleState Conversation_LifecycleState_LifecycleState_MIN = Conversation_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED;
constexpr Conversation_LifecycleState Conversation_LifecycleState_LifecycleState_MAX = Conversation_LifecycleState_COMPLETED;
constexpr int Conversation_LifecycleState_LifecycleState_ARRAYSIZE = Conversation_LifecycleState_LifecycleState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conversation_LifecycleState_descriptor();
template<typename T>
inline const std::string& Conversation_LifecycleState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Conversation_LifecycleState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Conversation_LifecycleState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Conversation_LifecycleState_descriptor(), enum_t_value);
}
inline bool Conversation_LifecycleState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Conversation_LifecycleState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Conversation_LifecycleState>(
    Conversation_LifecycleState_descriptor(), name, value);
}
enum Conversation_ConversationStage : int {
  Conversation_ConversationStage_CONVERSATION_STAGE_UNSPECIFIED = 0,
  Conversation_ConversationStage_VIRTUAL_AGENT_STAGE = 1,
  Conversation_ConversationStage_HUMAN_ASSIST_STAGE = 2,
  Conversation_ConversationStage_Conversation_ConversationStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Conversation_ConversationStage_Conversation_ConversationStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Conversation_ConversationStage_IsValid(int value);
constexpr Conversation_ConversationStage Conversation_ConversationStage_ConversationStage_MIN = Conversation_ConversationStage_CONVERSATION_STAGE_UNSPECIFIED;
constexpr Conversation_ConversationStage Conversation_ConversationStage_ConversationStage_MAX = Conversation_ConversationStage_HUMAN_ASSIST_STAGE;
constexpr int Conversation_ConversationStage_ConversationStage_ARRAYSIZE = Conversation_ConversationStage_ConversationStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conversation_ConversationStage_descriptor();
template<typename T>
inline const std::string& Conversation_ConversationStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Conversation_ConversationStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Conversation_ConversationStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Conversation_ConversationStage_descriptor(), enum_t_value);
}
inline bool Conversation_ConversationStage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Conversation_ConversationStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Conversation_ConversationStage>(
    Conversation_ConversationStage_descriptor(), name, value);
}
// ===================================================================

class Conversation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Conversation) */ {
 public:
  inline Conversation() : Conversation(nullptr) {}
  virtual ~Conversation();
  explicit constexpr Conversation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conversation(const Conversation& from);
  Conversation(Conversation&& from) noexcept
    : Conversation() {
    *this = ::std::move(from);
  }

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversation& operator=(Conversation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conversation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Conversation& a, Conversation& b) {
    a.Swap(&b);
  }
  inline void Swap(Conversation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conversation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conversation* New() const final {
    return CreateMaybeMessage<Conversation>(nullptr);
  }

  Conversation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conversation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Conversation";
  }
  protected:
  explicit Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Conversation_LifecycleState LifecycleState;
  static constexpr LifecycleState LIFECYCLE_STATE_UNSPECIFIED =
    Conversation_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED;
  static constexpr LifecycleState IN_PROGRESS =
    Conversation_LifecycleState_IN_PROGRESS;
  static constexpr LifecycleState COMPLETED =
    Conversation_LifecycleState_COMPLETED;
  static inline bool LifecycleState_IsValid(int value) {
    return Conversation_LifecycleState_IsValid(value);
  }
  static constexpr LifecycleState LifecycleState_MIN =
    Conversation_LifecycleState_LifecycleState_MIN;
  static constexpr LifecycleState LifecycleState_MAX =
    Conversation_LifecycleState_LifecycleState_MAX;
  static constexpr int LifecycleState_ARRAYSIZE =
    Conversation_LifecycleState_LifecycleState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LifecycleState_descriptor() {
    return Conversation_LifecycleState_descriptor();
  }
  template<typename T>
  static inline const std::string& LifecycleState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LifecycleState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LifecycleState_Name.");
    return Conversation_LifecycleState_Name(enum_t_value);
  }
  static inline bool LifecycleState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LifecycleState* value) {
    return Conversation_LifecycleState_Parse(name, value);
  }

  typedef Conversation_ConversationStage ConversationStage;
  static constexpr ConversationStage CONVERSATION_STAGE_UNSPECIFIED =
    Conversation_ConversationStage_CONVERSATION_STAGE_UNSPECIFIED;
  static constexpr ConversationStage VIRTUAL_AGENT_STAGE =
    Conversation_ConversationStage_VIRTUAL_AGENT_STAGE;
  static constexpr ConversationStage HUMAN_ASSIST_STAGE =
    Conversation_ConversationStage_HUMAN_ASSIST_STAGE;
  static inline bool ConversationStage_IsValid(int value) {
    return Conversation_ConversationStage_IsValid(value);
  }
  static constexpr ConversationStage ConversationStage_MIN =
    Conversation_ConversationStage_ConversationStage_MIN;
  static constexpr ConversationStage ConversationStage_MAX =
    Conversation_ConversationStage_ConversationStage_MAX;
  static constexpr int ConversationStage_ARRAYSIZE =
    Conversation_ConversationStage_ConversationStage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConversationStage_descriptor() {
    return Conversation_ConversationStage_descriptor();
  }
  template<typename T>
  static inline const std::string& ConversationStage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConversationStage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConversationStage_Name.");
    return Conversation_ConversationStage_Name(enum_t_value);
  }
  static inline bool ConversationStage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConversationStage* value) {
    return Conversation_ConversationStage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConversationProfileFieldNumber = 3,
    kPhoneNumberFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kLifecycleStateFieldNumber = 2,
    kConversationStageFieldNumber = 7,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string conversation_profile = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_conversation_profile();
  const std::string& conversation_profile() const;
  void set_conversation_profile(const std::string& value);
  void set_conversation_profile(std::string&& value);
  void set_conversation_profile(const char* value);
  void set_conversation_profile(const char* value, size_t size);
  std::string* mutable_conversation_profile();
  std::string* release_conversation_profile();
  void set_allocated_conversation_profile(std::string* conversation_profile);
  private:
  const std::string& _internal_conversation_profile() const;
  void _internal_set_conversation_profile(const std::string& value);
  std::string* _internal_mutable_conversation_profile();
  public:

  // .google.cloud.dialogflow.v2.ConversationPhoneNumber phone_number = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_phone_number() const;
  private:
  bool _internal_has_phone_number() const;
  public:
  void clear_phone_number();
  const ::google::cloud::dialogflow::v2::ConversationPhoneNumber& phone_number() const;
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* release_phone_number();
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* mutable_phone_number();
  void set_allocated_phone_number(::google::cloud::dialogflow::v2::ConversationPhoneNumber* phone_number);
  private:
  const ::google::cloud::dialogflow::v2::ConversationPhoneNumber& _internal_phone_number() const;
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* _internal_mutable_phone_number();
  public:
  void unsafe_arena_set_allocated_phone_number(
      ::google::cloud::dialogflow::v2::ConversationPhoneNumber* phone_number);
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* unsafe_arena_release_phone_number();

  // .google.protobuf.Timestamp start_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.cloud.dialogflow.v2.Conversation.LifecycleState lifecycle_state = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_lifecycle_state();
  ::google::cloud::dialogflow::v2::Conversation_LifecycleState lifecycle_state() const;
  void set_lifecycle_state(::google::cloud::dialogflow::v2::Conversation_LifecycleState value);
  private:
  ::google::cloud::dialogflow::v2::Conversation_LifecycleState _internal_lifecycle_state() const;
  void _internal_set_lifecycle_state(::google::cloud::dialogflow::v2::Conversation_LifecycleState value);
  public:

  // .google.cloud.dialogflow.v2.Conversation.ConversationStage conversation_stage = 7;
  void clear_conversation_stage();
  ::google::cloud::dialogflow::v2::Conversation_ConversationStage conversation_stage() const;
  void set_conversation_stage(::google::cloud::dialogflow::v2::Conversation_ConversationStage value);
  private:
  ::google::cloud::dialogflow::v2::Conversation_ConversationStage _internal_conversation_stage() const;
  void _internal_set_conversation_stage(::google::cloud::dialogflow::v2::Conversation_ConversationStage value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Conversation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_profile_;
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* phone_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  int lifecycle_state_;
  int conversation_stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class CreateConversationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateConversationRequest) */ {
 public:
  inline CreateConversationRequest() : CreateConversationRequest(nullptr) {}
  virtual ~CreateConversationRequest();
  explicit constexpr CreateConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateConversationRequest(const CreateConversationRequest& from);
  CreateConversationRequest(CreateConversationRequest&& from) noexcept
    : CreateConversationRequest() {
    *this = ::std::move(from);
  }

  inline CreateConversationRequest& operator=(const CreateConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConversationRequest& operator=(CreateConversationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateConversationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConversationRequest*>(
               &_CreateConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateConversationRequest& a, CreateConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConversationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConversationRequest* New() const final {
    return CreateMaybeMessage<CreateConversationRequest>(nullptr);
  }

  CreateConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConversationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConversationRequest& from);
  void MergeFrom(const CreateConversationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConversationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateConversationRequest";
  }
  protected:
  explicit CreateConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kConversationIdFieldNumber = 3,
    kConversationFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string conversation_id = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_conversation_id();
  const std::string& conversation_id() const;
  void set_conversation_id(const std::string& value);
  void set_conversation_id(std::string&& value);
  void set_conversation_id(const char* value);
  void set_conversation_id(const char* value, size_t size);
  std::string* mutable_conversation_id();
  std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // .google.cloud.dialogflow.v2.Conversation conversation = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_conversation() const;
  private:
  bool _internal_has_conversation() const;
  public:
  void clear_conversation();
  const ::google::cloud::dialogflow::v2::Conversation& conversation() const;
  ::google::cloud::dialogflow::v2::Conversation* release_conversation();
  ::google::cloud::dialogflow::v2::Conversation* mutable_conversation();
  void set_allocated_conversation(::google::cloud::dialogflow::v2::Conversation* conversation);
  private:
  const ::google::cloud::dialogflow::v2::Conversation& _internal_conversation() const;
  ::google::cloud::dialogflow::v2::Conversation* _internal_mutable_conversation();
  public:
  void unsafe_arena_set_allocated_conversation(
      ::google::cloud::dialogflow::v2::Conversation* conversation);
  ::google::cloud::dialogflow::v2::Conversation* unsafe_arena_release_conversation();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
  ::google::cloud::dialogflow::v2::Conversation* conversation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class ListConversationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListConversationsRequest) */ {
 public:
  inline ListConversationsRequest() : ListConversationsRequest(nullptr) {}
  virtual ~ListConversationsRequest();
  explicit constexpr ListConversationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConversationsRequest(const ListConversationsRequest& from);
  ListConversationsRequest(ListConversationsRequest&& from) noexcept
    : ListConversationsRequest() {
    *this = ::std::move(from);
  }

  inline ListConversationsRequest& operator=(const ListConversationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConversationsRequest& operator=(ListConversationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConversationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConversationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConversationsRequest*>(
               &_ListConversationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListConversationsRequest& a, ListConversationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConversationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConversationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConversationsRequest* New() const final {
    return CreateMaybeMessage<ListConversationsRequest>(nullptr);
  }

  ListConversationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConversationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConversationsRequest& from);
  void MergeFrom(const ListConversationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConversationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListConversationsRequest";
  }
  protected:
  explicit ListConversationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListConversationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class ListConversationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListConversationsResponse) */ {
 public:
  inline ListConversationsResponse() : ListConversationsResponse(nullptr) {}
  virtual ~ListConversationsResponse();
  explicit constexpr ListConversationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConversationsResponse(const ListConversationsResponse& from);
  ListConversationsResponse(ListConversationsResponse&& from) noexcept
    : ListConversationsResponse() {
    *this = ::std::move(from);
  }

  inline ListConversationsResponse& operator=(const ListConversationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConversationsResponse& operator=(ListConversationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConversationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConversationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListConversationsResponse*>(
               &_ListConversationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListConversationsResponse& a, ListConversationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConversationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConversationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConversationsResponse* New() const final {
    return CreateMaybeMessage<ListConversationsResponse>(nullptr);
  }

  ListConversationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConversationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConversationsResponse& from);
  void MergeFrom(const ListConversationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConversationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListConversationsResponse";
  }
  protected:
  explicit ListConversationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Conversation conversations = 1;
  int conversations_size() const;
  private:
  int _internal_conversations_size() const;
  public:
  void clear_conversations();
  ::google::cloud::dialogflow::v2::Conversation* mutable_conversations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Conversation >*
      mutable_conversations();
  private:
  const ::google::cloud::dialogflow::v2::Conversation& _internal_conversations(int index) const;
  ::google::cloud::dialogflow::v2::Conversation* _internal_add_conversations();
  public:
  const ::google::cloud::dialogflow::v2::Conversation& conversations(int index) const;
  ::google::cloud::dialogflow::v2::Conversation* add_conversations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Conversation >&
      conversations() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListConversationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Conversation > conversations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class GetConversationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetConversationRequest) */ {
 public:
  inline GetConversationRequest() : GetConversationRequest(nullptr) {}
  virtual ~GetConversationRequest();
  explicit constexpr GetConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConversationRequest(const GetConversationRequest& from);
  GetConversationRequest(GetConversationRequest&& from) noexcept
    : GetConversationRequest() {
    *this = ::std::move(from);
  }

  inline GetConversationRequest& operator=(const GetConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConversationRequest& operator=(GetConversationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConversationRequest* internal_default_instance() {
    return reinterpret_cast<const GetConversationRequest*>(
               &_GetConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetConversationRequest& a, GetConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConversationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConversationRequest* New() const final {
    return CreateMaybeMessage<GetConversationRequest>(nullptr);
  }

  GetConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConversationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConversationRequest& from);
  void MergeFrom(const GetConversationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConversationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetConversationRequest";
  }
  protected:
  explicit GetConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class CompleteConversationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CompleteConversationRequest) */ {
 public:
  inline CompleteConversationRequest() : CompleteConversationRequest(nullptr) {}
  virtual ~CompleteConversationRequest();
  explicit constexpr CompleteConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteConversationRequest(const CompleteConversationRequest& from);
  CompleteConversationRequest(CompleteConversationRequest&& from) noexcept
    : CompleteConversationRequest() {
    *this = ::std::move(from);
  }

  inline CompleteConversationRequest& operator=(const CompleteConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteConversationRequest& operator=(CompleteConversationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteConversationRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteConversationRequest*>(
               &_CompleteConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompleteConversationRequest& a, CompleteConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteConversationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteConversationRequest* New() const final {
    return CreateMaybeMessage<CompleteConversationRequest>(nullptr);
  }

  CompleteConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteConversationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteConversationRequest& from);
  void MergeFrom(const CompleteConversationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteConversationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CompleteConversationRequest";
  }
  protected:
  explicit CompleteConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CompleteConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class ListMessagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListMessagesRequest) */ {
 public:
  inline ListMessagesRequest() : ListMessagesRequest(nullptr) {}
  virtual ~ListMessagesRequest();
  explicit constexpr ListMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMessagesRequest(const ListMessagesRequest& from);
  ListMessagesRequest(ListMessagesRequest&& from) noexcept
    : ListMessagesRequest() {
    *this = ::std::move(from);
  }

  inline ListMessagesRequest& operator=(const ListMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMessagesRequest& operator=(ListMessagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListMessagesRequest*>(
               &_ListMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListMessagesRequest& a, ListMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMessagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMessagesRequest* New() const final {
    return CreateMaybeMessage<ListMessagesRequest>(nullptr);
  }

  ListMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMessagesRequest& from);
  void MergeFrom(const ListMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListMessagesRequest";
  }
  protected:
  explicit ListMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class ListMessagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListMessagesResponse) */ {
 public:
  inline ListMessagesResponse() : ListMessagesResponse(nullptr) {}
  virtual ~ListMessagesResponse();
  explicit constexpr ListMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMessagesResponse(const ListMessagesResponse& from);
  ListMessagesResponse(ListMessagesResponse&& from) noexcept
    : ListMessagesResponse() {
    *this = ::std::move(from);
  }

  inline ListMessagesResponse& operator=(const ListMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMessagesResponse& operator=(ListMessagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListMessagesResponse*>(
               &_ListMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListMessagesResponse& a, ListMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMessagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMessagesResponse* New() const final {
    return CreateMaybeMessage<ListMessagesResponse>(nullptr);
  }

  ListMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMessagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMessagesResponse& from);
  void MergeFrom(const ListMessagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListMessagesResponse";
  }
  protected:
  explicit ListMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::google::cloud::dialogflow::v2::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Message >*
      mutable_messages();
  private:
  const ::google::cloud::dialogflow::v2::Message& _internal_messages(int index) const;
  ::google::cloud::dialogflow::v2::Message* _internal_add_messages();
  public:
  const ::google::cloud::dialogflow::v2::Message& messages(int index) const;
  ::google::cloud::dialogflow::v2::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Message >&
      messages() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Message > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// -------------------------------------------------------------------

class ConversationPhoneNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ConversationPhoneNumber) */ {
 public:
  inline ConversationPhoneNumber() : ConversationPhoneNumber(nullptr) {}
  virtual ~ConversationPhoneNumber();
  explicit constexpr ConversationPhoneNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConversationPhoneNumber(const ConversationPhoneNumber& from);
  ConversationPhoneNumber(ConversationPhoneNumber&& from) noexcept
    : ConversationPhoneNumber() {
    *this = ::std::move(from);
  }

  inline ConversationPhoneNumber& operator=(const ConversationPhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationPhoneNumber& operator=(ConversationPhoneNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConversationPhoneNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConversationPhoneNumber* internal_default_instance() {
    return reinterpret_cast<const ConversationPhoneNumber*>(
               &_ConversationPhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConversationPhoneNumber& a, ConversationPhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationPhoneNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConversationPhoneNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConversationPhoneNumber* New() const final {
    return CreateMaybeMessage<ConversationPhoneNumber>(nullptr);
  }

  ConversationPhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConversationPhoneNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConversationPhoneNumber& from);
  void MergeFrom(const ConversationPhoneNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationPhoneNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ConversationPhoneNumber";
  }
  protected:
  explicit ConversationPhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 3,
  };
  // string phone_number = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ConversationPhoneNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Conversation

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Conversation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Conversation::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.name)
  return _internal_name();
}
inline void Conversation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Conversation.name)
}
inline std::string* Conversation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Conversation.name)
  return _internal_mutable_name();
}
inline const std::string& Conversation::_internal_name() const {
  return name_.Get();
}
inline void Conversation::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Conversation::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Conversation.name)
}
inline void Conversation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Conversation.name)
}
inline void Conversation::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Conversation.name)
}
inline std::string* Conversation::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Conversation::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Conversation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conversation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Conversation.name)
}

// .google.cloud.dialogflow.v2.Conversation.LifecycleState lifecycle_state = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Conversation::clear_lifecycle_state() {
  lifecycle_state_ = 0;
}
inline ::google::cloud::dialogflow::v2::Conversation_LifecycleState Conversation::_internal_lifecycle_state() const {
  return static_cast< ::google::cloud::dialogflow::v2::Conversation_LifecycleState >(lifecycle_state_);
}
inline ::google::cloud::dialogflow::v2::Conversation_LifecycleState Conversation::lifecycle_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.lifecycle_state)
  return _internal_lifecycle_state();
}
inline void Conversation::_internal_set_lifecycle_state(::google::cloud::dialogflow::v2::Conversation_LifecycleState value) {
  
  lifecycle_state_ = value;
}
inline void Conversation::set_lifecycle_state(::google::cloud::dialogflow::v2::Conversation_LifecycleState value) {
  _internal_set_lifecycle_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Conversation.lifecycle_state)
}

// string conversation_profile = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Conversation::clear_conversation_profile() {
  conversation_profile_.ClearToEmpty();
}
inline const std::string& Conversation::conversation_profile() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.conversation_profile)
  return _internal_conversation_profile();
}
inline void Conversation::set_conversation_profile(const std::string& value) {
  _internal_set_conversation_profile(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Conversation.conversation_profile)
}
inline std::string* Conversation::mutable_conversation_profile() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Conversation.conversation_profile)
  return _internal_mutable_conversation_profile();
}
inline const std::string& Conversation::_internal_conversation_profile() const {
  return conversation_profile_.Get();
}
inline void Conversation::_internal_set_conversation_profile(const std::string& value) {
  
  conversation_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Conversation::set_conversation_profile(std::string&& value) {
  
  conversation_profile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Conversation.conversation_profile)
}
inline void Conversation::set_conversation_profile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conversation_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Conversation.conversation_profile)
}
inline void Conversation::set_conversation_profile(const char* value,
    size_t size) {
  
  conversation_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Conversation.conversation_profile)
}
inline std::string* Conversation::_internal_mutable_conversation_profile() {
  
  return conversation_profile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Conversation::release_conversation_profile() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Conversation.conversation_profile)
  return conversation_profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conversation::set_allocated_conversation_profile(std::string* conversation_profile) {
  if (conversation_profile != nullptr) {
    
  } else {
    
  }
  conversation_profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_profile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Conversation.conversation_profile)
}

// .google.cloud.dialogflow.v2.ConversationPhoneNumber phone_number = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Conversation::_internal_has_phone_number() const {
  return this != internal_default_instance() && phone_number_ != nullptr;
}
inline bool Conversation::has_phone_number() const {
  return _internal_has_phone_number();
}
inline void Conversation::clear_phone_number() {
  if (GetArena() == nullptr && phone_number_ != nullptr) {
    delete phone_number_;
  }
  phone_number_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::ConversationPhoneNumber& Conversation::_internal_phone_number() const {
  const ::google::cloud::dialogflow::v2::ConversationPhoneNumber* p = phone_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::ConversationPhoneNumber&>(
      ::google::cloud::dialogflow::v2::_ConversationPhoneNumber_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::ConversationPhoneNumber& Conversation::phone_number() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.phone_number)
  return _internal_phone_number();
}
inline void Conversation::unsafe_arena_set_allocated_phone_number(
    ::google::cloud::dialogflow::v2::ConversationPhoneNumber* phone_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_number_);
  }
  phone_number_ = phone_number;
  if (phone_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Conversation.phone_number)
}
inline ::google::cloud::dialogflow::v2::ConversationPhoneNumber* Conversation::release_phone_number() {
  
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* temp = phone_number_;
  phone_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationPhoneNumber* Conversation::unsafe_arena_release_phone_number() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Conversation.phone_number)
  
  ::google::cloud::dialogflow::v2::ConversationPhoneNumber* temp = phone_number_;
  phone_number_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::ConversationPhoneNumber* Conversation::_internal_mutable_phone_number() {
  
  if (phone_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::ConversationPhoneNumber>(GetArena());
    phone_number_ = p;
  }
  return phone_number_;
}
inline ::google::cloud::dialogflow::v2::ConversationPhoneNumber* Conversation::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Conversation.phone_number)
  return _internal_mutable_phone_number();
}
inline void Conversation::set_allocated_phone_number(::google::cloud::dialogflow::v2::ConversationPhoneNumber* phone_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phone_number_;
  }
  if (phone_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phone_number);
    if (message_arena != submessage_arena) {
      phone_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone_number, submessage_arena);
    }
    
  } else {
    
  }
  phone_number_ = phone_number;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Conversation.phone_number)
}

// .google.protobuf.Timestamp start_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Conversation::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool Conversation::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Conversation::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Conversation::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.start_time)
  return _internal_start_time();
}
inline void Conversation::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Conversation.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Conversation.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Conversation.start_time)
  return _internal_mutable_start_time();
}
inline void Conversation::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Conversation.start_time)
}

// .google.protobuf.Timestamp end_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Conversation::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool Conversation::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Conversation::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Conversation::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.end_time)
  return _internal_end_time();
}
inline void Conversation::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Conversation.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Conversation.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Conversation::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Conversation.end_time)
  return _internal_mutable_end_time();
}
inline void Conversation::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Conversation.end_time)
}

// .google.cloud.dialogflow.v2.Conversation.ConversationStage conversation_stage = 7;
inline void Conversation::clear_conversation_stage() {
  conversation_stage_ = 0;
}
inline ::google::cloud::dialogflow::v2::Conversation_ConversationStage Conversation::_internal_conversation_stage() const {
  return static_cast< ::google::cloud::dialogflow::v2::Conversation_ConversationStage >(conversation_stage_);
}
inline ::google::cloud::dialogflow::v2::Conversation_ConversationStage Conversation::conversation_stage() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Conversation.conversation_stage)
  return _internal_conversation_stage();
}
inline void Conversation::_internal_set_conversation_stage(::google::cloud::dialogflow::v2::Conversation_ConversationStage value) {
  
  conversation_stage_ = value;
}
inline void Conversation::set_conversation_stage(::google::cloud::dialogflow::v2::Conversation_ConversationStage value) {
  _internal_set_conversation_stage(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Conversation.conversation_stage)
}

// -------------------------------------------------------------------

// CreateConversationRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateConversationRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateConversationRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
  return _internal_parent();
}
inline void CreateConversationRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
}
inline std::string* CreateConversationRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateConversationRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateConversationRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateConversationRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
}
inline void CreateConversationRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
}
inline void CreateConversationRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
}
inline std::string* CreateConversationRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateConversationRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConversationRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateConversationRequest.parent)
}

// .google.cloud.dialogflow.v2.Conversation conversation = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateConversationRequest::_internal_has_conversation() const {
  return this != internal_default_instance() && conversation_ != nullptr;
}
inline bool CreateConversationRequest::has_conversation() const {
  return _internal_has_conversation();
}
inline void CreateConversationRequest::clear_conversation() {
  if (GetArena() == nullptr && conversation_ != nullptr) {
    delete conversation_;
  }
  conversation_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Conversation& CreateConversationRequest::_internal_conversation() const {
  const ::google::cloud::dialogflow::v2::Conversation* p = conversation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Conversation&>(
      ::google::cloud::dialogflow::v2::_Conversation_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Conversation& CreateConversationRequest::conversation() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateConversationRequest.conversation)
  return _internal_conversation();
}
inline void CreateConversationRequest::unsafe_arena_set_allocated_conversation(
    ::google::cloud::dialogflow::v2::Conversation* conversation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conversation_);
  }
  conversation_ = conversation;
  if (conversation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateConversationRequest.conversation)
}
inline ::google::cloud::dialogflow::v2::Conversation* CreateConversationRequest::release_conversation() {
  
  ::google::cloud::dialogflow::v2::Conversation* temp = conversation_;
  conversation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::Conversation* CreateConversationRequest::unsafe_arena_release_conversation() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateConversationRequest.conversation)
  
  ::google::cloud::dialogflow::v2::Conversation* temp = conversation_;
  conversation_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Conversation* CreateConversationRequest::_internal_mutable_conversation() {
  
  if (conversation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Conversation>(GetArena());
    conversation_ = p;
  }
  return conversation_;
}
inline ::google::cloud::dialogflow::v2::Conversation* CreateConversationRequest::mutable_conversation() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateConversationRequest.conversation)
  return _internal_mutable_conversation();
}
inline void CreateConversationRequest::set_allocated_conversation(::google::cloud::dialogflow::v2::Conversation* conversation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conversation_;
  }
  if (conversation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation);
    if (message_arena != submessage_arena) {
      conversation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation, submessage_arena);
    }
    
  } else {
    
  }
  conversation_ = conversation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateConversationRequest.conversation)
}

// string conversation_id = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateConversationRequest::clear_conversation_id() {
  conversation_id_.ClearToEmpty();
}
inline const std::string& CreateConversationRequest::conversation_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
  return _internal_conversation_id();
}
inline void CreateConversationRequest::set_conversation_id(const std::string& value) {
  _internal_set_conversation_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
}
inline std::string* CreateConversationRequest::mutable_conversation_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
  return _internal_mutable_conversation_id();
}
inline const std::string& CreateConversationRequest::_internal_conversation_id() const {
  return conversation_id_.Get();
}
inline void CreateConversationRequest::_internal_set_conversation_id(const std::string& value) {
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateConversationRequest::set_conversation_id(std::string&& value) {
  
  conversation_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
}
inline void CreateConversationRequest::set_conversation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
}
inline void CreateConversationRequest::set_conversation_id(const char* value,
    size_t size) {
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
}
inline std::string* CreateConversationRequest::_internal_mutable_conversation_id() {
  
  return conversation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateConversationRequest::release_conversation_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
  return conversation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateConversationRequest::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateConversationRequest.conversation_id)
}

// -------------------------------------------------------------------

// ListConversationsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListConversationsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListConversationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
  return _internal_parent();
}
inline void ListConversationsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
}
inline std::string* ListConversationsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListConversationsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListConversationsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConversationsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
}
inline void ListConversationsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
}
inline void ListConversationsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
}
inline std::string* ListConversationsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConversationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConversationsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationsRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListConversationsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListConversationsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListConversationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsRequest.page_size)
  return _internal_page_size();
}
inline void ListConversationsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListConversationsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationsRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListConversationsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListConversationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
  return _internal_page_token();
}
inline void ListConversationsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
}
inline std::string* ListConversationsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListConversationsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListConversationsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConversationsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
}
inline void ListConversationsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
}
inline void ListConversationsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
}
inline std::string* ListConversationsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConversationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConversationsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationsRequest.page_token)
}

// string filter = 4;
inline void ListConversationsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListConversationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
  return _internal_filter();
}
inline void ListConversationsRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
}
inline std::string* ListConversationsRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListConversationsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListConversationsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConversationsRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
}
inline void ListConversationsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
}
inline void ListConversationsRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
}
inline std::string* ListConversationsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConversationsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConversationsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationsRequest.filter)
}

// -------------------------------------------------------------------

// ListConversationsResponse

// repeated .google.cloud.dialogflow.v2.Conversation conversations = 1;
inline int ListConversationsResponse::_internal_conversations_size() const {
  return conversations_.size();
}
inline int ListConversationsResponse::conversations_size() const {
  return _internal_conversations_size();
}
inline void ListConversationsResponse::clear_conversations() {
  conversations_.Clear();
}
inline ::google::cloud::dialogflow::v2::Conversation* ListConversationsResponse::mutable_conversations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationsResponse.conversations)
  return conversations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Conversation >*
ListConversationsResponse::mutable_conversations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListConversationsResponse.conversations)
  return &conversations_;
}
inline const ::google::cloud::dialogflow::v2::Conversation& ListConversationsResponse::_internal_conversations(int index) const {
  return conversations_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Conversation& ListConversationsResponse::conversations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsResponse.conversations)
  return _internal_conversations(index);
}
inline ::google::cloud::dialogflow::v2::Conversation* ListConversationsResponse::_internal_add_conversations() {
  return conversations_.Add();
}
inline ::google::cloud::dialogflow::v2::Conversation* ListConversationsResponse::add_conversations() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListConversationsResponse.conversations)
  return _internal_add_conversations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Conversation >&
ListConversationsResponse::conversations() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListConversationsResponse.conversations)
  return conversations_;
}

// string next_page_token = 2;
inline void ListConversationsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListConversationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListConversationsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
}
inline std::string* ListConversationsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListConversationsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListConversationsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListConversationsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
}
inline void ListConversationsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
}
inline void ListConversationsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
}
inline std::string* ListConversationsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListConversationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListConversationsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListConversationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetConversationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetConversationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetConversationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetConversationRequest.name)
  return _internal_name();
}
inline void GetConversationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetConversationRequest.name)
}
inline std::string* GetConversationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetConversationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetConversationRequest::_internal_name() const {
  return name_.Get();
}
inline void GetConversationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetConversationRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.GetConversationRequest.name)
}
inline void GetConversationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.GetConversationRequest.name)
}
inline void GetConversationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.GetConversationRequest.name)
}
inline std::string* GetConversationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetConversationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetConversationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConversationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetConversationRequest.name)
}

// -------------------------------------------------------------------

// CompleteConversationRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CompleteConversationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompleteConversationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
  return _internal_name();
}
inline void CompleteConversationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
}
inline std::string* CompleteConversationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CompleteConversationRequest::_internal_name() const {
  return name_.Get();
}
inline void CompleteConversationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteConversationRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
}
inline void CompleteConversationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
}
inline void CompleteConversationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
}
inline std::string* CompleteConversationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteConversationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteConversationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CompleteConversationRequest.name)
}

// -------------------------------------------------------------------

// ListMessagesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMessagesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListMessagesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
  return _internal_parent();
}
inline void ListMessagesRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
}
inline std::string* ListMessagesRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListMessagesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListMessagesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMessagesRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
}
inline void ListMessagesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
}
inline void ListMessagesRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
}
inline std::string* ListMessagesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMessagesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMessagesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListMessagesRequest.parent)
}

// string filter = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMessagesRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListMessagesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
  return _internal_filter();
}
inline void ListMessagesRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
}
inline std::string* ListMessagesRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListMessagesRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListMessagesRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMessagesRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
}
inline void ListMessagesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
}
inline void ListMessagesRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
}
inline std::string* ListMessagesRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMessagesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMessagesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListMessagesRequest.filter)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMessagesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMessagesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMessagesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesRequest.page_size)
  return _internal_page_size();
}
inline void ListMessagesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListMessagesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListMessagesRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMessagesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListMessagesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
  return _internal_page_token();
}
inline void ListMessagesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
}
inline std::string* ListMessagesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListMessagesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListMessagesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMessagesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
}
inline void ListMessagesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
}
inline void ListMessagesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
}
inline std::string* ListMessagesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMessagesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMessagesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListMessagesRequest.page_token)
}

// -------------------------------------------------------------------

// ListMessagesResponse

// repeated .google.cloud.dialogflow.v2.Message messages = 1;
inline int ListMessagesResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int ListMessagesResponse::messages_size() const {
  return _internal_messages_size();
}
inline ::google::cloud::dialogflow::v2::Message* ListMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListMessagesResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Message >*
ListMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListMessagesResponse.messages)
  return &messages_;
}
inline const ::google::cloud::dialogflow::v2::Message& ListMessagesResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Message& ListMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesResponse.messages)
  return _internal_messages(index);
}
inline ::google::cloud::dialogflow::v2::Message* ListMessagesResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::google::cloud::dialogflow::v2::Message* ListMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListMessagesResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Message >&
ListMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListMessagesResponse.messages)
  return messages_;
}

// string next_page_token = 2;
inline void ListMessagesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListMessagesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListMessagesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
}
inline std::string* ListMessagesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListMessagesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListMessagesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMessagesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
}
inline void ListMessagesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
}
inline void ListMessagesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
}
inline std::string* ListMessagesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMessagesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMessagesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListMessagesResponse.next_page_token)
}

// -------------------------------------------------------------------

// ConversationPhoneNumber

// string phone_number = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ConversationPhoneNumber::clear_phone_number() {
  phone_number_.ClearToEmpty();
}
inline const std::string& ConversationPhoneNumber::phone_number() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
  return _internal_phone_number();
}
inline void ConversationPhoneNumber::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
}
inline std::string* ConversationPhoneNumber::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& ConversationPhoneNumber::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void ConversationPhoneNumber::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConversationPhoneNumber::set_phone_number(std::string&& value) {
  
  phone_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
}
inline void ConversationPhoneNumber::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
}
inline void ConversationPhoneNumber::set_phone_number(const char* value,
    size_t size) {
  
  phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
}
inline std::string* ConversationPhoneNumber::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConversationPhoneNumber::release_phone_number() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConversationPhoneNumber::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ConversationPhoneNumber.phone_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Conversation_LifecycleState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Conversation_LifecycleState>() {
  return ::google::cloud::dialogflow::v2::Conversation_LifecycleState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Conversation_ConversationStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Conversation_ConversationStage>() {
  return ::google::cloud::dialogflow::v2::Conversation_ConversationStage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fconversation_2eproto
