// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/document.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/gcs.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class CreateDocumentRequest;
struct CreateDocumentRequestDefaultTypeInternal;
extern CreateDocumentRequestDefaultTypeInternal _CreateDocumentRequest_default_instance_;
class DeleteDocumentRequest;
struct DeleteDocumentRequestDefaultTypeInternal;
extern DeleteDocumentRequestDefaultTypeInternal _DeleteDocumentRequest_default_instance_;
class Document;
struct DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_MetadataEntry_DoNotUse;
struct Document_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Document_MetadataEntry_DoNotUseDefaultTypeInternal _Document_MetadataEntry_DoNotUse_default_instance_;
class Document_ReloadStatus;
struct Document_ReloadStatusDefaultTypeInternal;
extern Document_ReloadStatusDefaultTypeInternal _Document_ReloadStatus_default_instance_;
class ExportDocumentRequest;
struct ExportDocumentRequestDefaultTypeInternal;
extern ExportDocumentRequestDefaultTypeInternal _ExportDocumentRequest_default_instance_;
class GetDocumentRequest;
struct GetDocumentRequestDefaultTypeInternal;
extern GetDocumentRequestDefaultTypeInternal _GetDocumentRequest_default_instance_;
class ImportDocumentTemplate;
struct ImportDocumentTemplateDefaultTypeInternal;
extern ImportDocumentTemplateDefaultTypeInternal _ImportDocumentTemplate_default_instance_;
class ImportDocumentTemplate_MetadataEntry_DoNotUse;
struct ImportDocumentTemplate_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ImportDocumentTemplate_MetadataEntry_DoNotUseDefaultTypeInternal _ImportDocumentTemplate_MetadataEntry_DoNotUse_default_instance_;
class ImportDocumentsRequest;
struct ImportDocumentsRequestDefaultTypeInternal;
extern ImportDocumentsRequestDefaultTypeInternal _ImportDocumentsRequest_default_instance_;
class ImportDocumentsResponse;
struct ImportDocumentsResponseDefaultTypeInternal;
extern ImportDocumentsResponseDefaultTypeInternal _ImportDocumentsResponse_default_instance_;
class KnowledgeOperationMetadata;
struct KnowledgeOperationMetadataDefaultTypeInternal;
extern KnowledgeOperationMetadataDefaultTypeInternal _KnowledgeOperationMetadata_default_instance_;
class ListDocumentsRequest;
struct ListDocumentsRequestDefaultTypeInternal;
extern ListDocumentsRequestDefaultTypeInternal _ListDocumentsRequest_default_instance_;
class ListDocumentsResponse;
struct ListDocumentsResponseDefaultTypeInternal;
extern ListDocumentsResponseDefaultTypeInternal _ListDocumentsResponse_default_instance_;
class ReloadDocumentRequest;
struct ReloadDocumentRequestDefaultTypeInternal;
extern ReloadDocumentRequestDefaultTypeInternal _ReloadDocumentRequest_default_instance_;
class UpdateDocumentRequest;
struct UpdateDocumentRequestDefaultTypeInternal;
extern UpdateDocumentRequestDefaultTypeInternal _UpdateDocumentRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::CreateDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateDocumentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteDocumentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::Document* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Document>(Arena*);
template<> ::google::cloud::dialogflow::v2::Document_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Document_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::Document_ReloadStatus* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Document_ReloadStatus>(Arena*);
template<> ::google::cloud::dialogflow::v2::ExportDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ExportDocumentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetDocumentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportDocumentTemplate* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportDocumentTemplate>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportDocumentTemplate_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportDocumentTemplate_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportDocumentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportDocumentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ImportDocumentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportDocumentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::KnowledgeOperationMetadata>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListDocumentsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListDocumentsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListDocumentsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListDocumentsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::ReloadDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ReloadDocumentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateDocumentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateDocumentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Document_KnowledgeType : int {
  Document_KnowledgeType_KNOWLEDGE_TYPE_UNSPECIFIED = 0,
  Document_KnowledgeType_FAQ = 1,
  Document_KnowledgeType_EXTRACTIVE_QA = 2,
  Document_KnowledgeType_ARTICLE_SUGGESTION = 3,
  Document_KnowledgeType_Document_KnowledgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Document_KnowledgeType_Document_KnowledgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Document_KnowledgeType_IsValid(int value);
constexpr Document_KnowledgeType Document_KnowledgeType_KnowledgeType_MIN = Document_KnowledgeType_KNOWLEDGE_TYPE_UNSPECIFIED;
constexpr Document_KnowledgeType Document_KnowledgeType_KnowledgeType_MAX = Document_KnowledgeType_ARTICLE_SUGGESTION;
constexpr int Document_KnowledgeType_KnowledgeType_ARRAYSIZE = Document_KnowledgeType_KnowledgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Document_KnowledgeType_descriptor();
template<typename T>
inline const std::string& Document_KnowledgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Document_KnowledgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Document_KnowledgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Document_KnowledgeType_descriptor(), enum_t_value);
}
inline bool Document_KnowledgeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Document_KnowledgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Document_KnowledgeType>(
    Document_KnowledgeType_descriptor(), name, value);
}
enum KnowledgeOperationMetadata_State : int {
  KnowledgeOperationMetadata_State_STATE_UNSPECIFIED = 0,
  KnowledgeOperationMetadata_State_PENDING = 1,
  KnowledgeOperationMetadata_State_RUNNING = 2,
  KnowledgeOperationMetadata_State_DONE = 3,
  KnowledgeOperationMetadata_State_KnowledgeOperationMetadata_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KnowledgeOperationMetadata_State_KnowledgeOperationMetadata_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KnowledgeOperationMetadata_State_IsValid(int value);
constexpr KnowledgeOperationMetadata_State KnowledgeOperationMetadata_State_State_MIN = KnowledgeOperationMetadata_State_STATE_UNSPECIFIED;
constexpr KnowledgeOperationMetadata_State KnowledgeOperationMetadata_State_State_MAX = KnowledgeOperationMetadata_State_DONE;
constexpr int KnowledgeOperationMetadata_State_State_ARRAYSIZE = KnowledgeOperationMetadata_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KnowledgeOperationMetadata_State_descriptor();
template<typename T>
inline const std::string& KnowledgeOperationMetadata_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KnowledgeOperationMetadata_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KnowledgeOperationMetadata_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KnowledgeOperationMetadata_State_descriptor(), enum_t_value);
}
inline bool KnowledgeOperationMetadata_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KnowledgeOperationMetadata_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KnowledgeOperationMetadata_State>(
    KnowledgeOperationMetadata_State_descriptor(), name, value);
}
// ===================================================================

class Document_ReloadStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Document.ReloadStatus) */ {
 public:
  inline Document_ReloadStatus() : Document_ReloadStatus(nullptr) {}
  ~Document_ReloadStatus() override;
  explicit constexpr Document_ReloadStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Document_ReloadStatus(const Document_ReloadStatus& from);
  Document_ReloadStatus(Document_ReloadStatus&& from) noexcept
    : Document_ReloadStatus() {
    *this = ::std::move(from);
  }

  inline Document_ReloadStatus& operator=(const Document_ReloadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document_ReloadStatus& operator=(Document_ReloadStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document_ReloadStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Document_ReloadStatus* internal_default_instance() {
    return reinterpret_cast<const Document_ReloadStatus*>(
               &_Document_ReloadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Document_ReloadStatus& a, Document_ReloadStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(Document_ReloadStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document_ReloadStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Document_ReloadStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Document_ReloadStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Document_ReloadStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Document_ReloadStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document_ReloadStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Document.ReloadStatus";
  }
  protected:
  explicit Document_ReloadStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .google.rpc.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Document.ReloadStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::google::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class Document_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Document_MetadataEntry_DoNotUse();
  explicit constexpr Document_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Document_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_MetadataEntry_DoNotUse& other);
  static const Document_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_MetadataEntry_DoNotUse*>(&_Document_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Document.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Document.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Document final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Document) */ {
 public:
  inline Document() : Document(nullptr) {}
  ~Document() override;
  explicit constexpr Document(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kContentUri = 5,
    kRawContent = 9,
    SOURCE_NOT_SET = 0,
  };

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Document& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Document& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Document";
  }
  protected:
  explicit Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Document_ReloadStatus ReloadStatus;

  typedef Document_KnowledgeType KnowledgeType;
  static constexpr KnowledgeType KNOWLEDGE_TYPE_UNSPECIFIED =
    Document_KnowledgeType_KNOWLEDGE_TYPE_UNSPECIFIED;
  static constexpr KnowledgeType FAQ =
    Document_KnowledgeType_FAQ;
  static constexpr KnowledgeType EXTRACTIVE_QA =
    Document_KnowledgeType_EXTRACTIVE_QA;
  static constexpr KnowledgeType ARTICLE_SUGGESTION =
    Document_KnowledgeType_ARTICLE_SUGGESTION;
  static inline bool KnowledgeType_IsValid(int value) {
    return Document_KnowledgeType_IsValid(value);
  }
  static constexpr KnowledgeType KnowledgeType_MIN =
    Document_KnowledgeType_KnowledgeType_MIN;
  static constexpr KnowledgeType KnowledgeType_MAX =
    Document_KnowledgeType_KnowledgeType_MAX;
  static constexpr int KnowledgeType_ARRAYSIZE =
    Document_KnowledgeType_KnowledgeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KnowledgeType_descriptor() {
    return Document_KnowledgeType_descriptor();
  }
  template<typename T>
  static inline const std::string& KnowledgeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KnowledgeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KnowledgeType_Name.");
    return Document_KnowledgeType_Name(enum_t_value);
  }
  static inline bool KnowledgeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KnowledgeType* value) {
    return Document_KnowledgeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeTypesFieldNumber = 4,
    kMetadataFieldNumber = 7,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kLatestReloadStatusFieldNumber = 12,
    kEnableAutoReloadFieldNumber = 11,
    kContentUriFieldNumber = 5,
    kRawContentFieldNumber = 9,
  };
  // repeated .google.cloud.dialogflow.v2.Document.KnowledgeType knowledge_types = 4 [(.google.api.field_behavior) = REQUIRED];
  int knowledge_types_size() const;
  private:
  int _internal_knowledge_types_size() const;
  public:
  void clear_knowledge_types();
  private:
  ::google::cloud::dialogflow::v2::Document_KnowledgeType _internal_knowledge_types(int index) const;
  void _internal_add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_knowledge_types();
  public:
  ::google::cloud::dialogflow::v2::Document_KnowledgeType knowledge_types(int index) const;
  void set_knowledge_types(int index, ::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  void add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& knowledge_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_knowledge_types();

  // map<string, string> metadata = 7 [(.google.api.field_behavior) = OPTIONAL];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string mime_type = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // .google.cloud.dialogflow.v2.Document.ReloadStatus latest_reload_status = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_latest_reload_status() const;
  private:
  bool _internal_has_latest_reload_status() const;
  public:
  void clear_latest_reload_status();
  const ::google::cloud::dialogflow::v2::Document_ReloadStatus& latest_reload_status() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Document_ReloadStatus* release_latest_reload_status();
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* mutable_latest_reload_status();
  void set_allocated_latest_reload_status(::google::cloud::dialogflow::v2::Document_ReloadStatus* latest_reload_status);
  private:
  const ::google::cloud::dialogflow::v2::Document_ReloadStatus& _internal_latest_reload_status() const;
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* _internal_mutable_latest_reload_status();
  public:
  void unsafe_arena_set_allocated_latest_reload_status(
      ::google::cloud::dialogflow::v2::Document_ReloadStatus* latest_reload_status);
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* unsafe_arena_release_latest_reload_status();

  // bool enable_auto_reload = 11 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enable_auto_reload();
  bool enable_auto_reload() const;
  void set_enable_auto_reload(bool value);
  private:
  bool _internal_enable_auto_reload() const;
  void _internal_set_enable_auto_reload(bool value);
  public:

  // string content_uri = 5;
  bool has_content_uri() const;
  private:
  bool _internal_has_content_uri() const;
  public:
  void clear_content_uri();
  const std::string& content_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_uri();
  PROTOBUF_NODISCARD std::string* release_content_uri();
  void set_allocated_content_uri(std::string* content_uri);
  private:
  const std::string& _internal_content_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_uri(const std::string& value);
  std::string* _internal_mutable_content_uri();
  public:

  // bytes raw_content = 9;
  bool has_raw_content() const;
  private:
  bool _internal_has_raw_content() const;
  public:
  void clear_raw_content();
  const std::string& raw_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_content();
  PROTOBUF_NODISCARD std::string* release_raw_content();
  void set_allocated_raw_content(std::string* raw_content);
  private:
  const std::string& _internal_raw_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_content(const std::string& value);
  std::string* _internal_mutable_raw_content();
  public:

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Document)
 private:
  class _Internal;
  void set_has_content_uri();
  void set_has_raw_content();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> knowledge_types_;
  mutable std::atomic<int> _knowledge_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* latest_reload_status_;
  bool enable_auto_reload_;
  union SourceUnion {
    constexpr SourceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_content_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class GetDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetDocumentRequest) */ {
 public:
  inline GetDocumentRequest() : GetDocumentRequest(nullptr) {}
  ~GetDocumentRequest() override;
  explicit constexpr GetDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDocumentRequest(const GetDocumentRequest& from);
  GetDocumentRequest(GetDocumentRequest&& from) noexcept
    : GetDocumentRequest() {
    *this = ::std::move(from);
  }

  inline GetDocumentRequest& operator=(const GetDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDocumentRequest& operator=(GetDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const GetDocumentRequest*>(
               &_GetDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDocumentRequest& a, GetDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetDocumentRequest";
  }
  protected:
  explicit GetDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ListDocumentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListDocumentsRequest) */ {
 public:
  inline ListDocumentsRequest() : ListDocumentsRequest(nullptr) {}
  ~ListDocumentsRequest() override;
  explicit constexpr ListDocumentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDocumentsRequest(const ListDocumentsRequest& from);
  ListDocumentsRequest(ListDocumentsRequest&& from) noexcept
    : ListDocumentsRequest() {
    *this = ::std::move(from);
  }

  inline ListDocumentsRequest& operator=(const ListDocumentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDocumentsRequest& operator=(ListDocumentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDocumentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDocumentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDocumentsRequest*>(
               &_ListDocumentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListDocumentsRequest& a, ListDocumentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDocumentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDocumentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDocumentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDocumentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDocumentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDocumentsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDocumentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListDocumentsRequest";
  }
  protected:
  explicit ListDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListDocumentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ListDocumentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListDocumentsResponse) */ {
 public:
  inline ListDocumentsResponse() : ListDocumentsResponse(nullptr) {}
  ~ListDocumentsResponse() override;
  explicit constexpr ListDocumentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDocumentsResponse(const ListDocumentsResponse& from);
  ListDocumentsResponse(ListDocumentsResponse&& from) noexcept
    : ListDocumentsResponse() {
    *this = ::std::move(from);
  }

  inline ListDocumentsResponse& operator=(const ListDocumentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDocumentsResponse& operator=(ListDocumentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDocumentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDocumentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDocumentsResponse*>(
               &_ListDocumentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListDocumentsResponse& a, ListDocumentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDocumentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDocumentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDocumentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDocumentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDocumentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDocumentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDocumentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListDocumentsResponse";
  }
  protected:
  explicit ListDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.Document documents = 1;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  ::google::cloud::dialogflow::v2::Document* mutable_documents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Document >*
      mutable_documents();
  private:
  const ::google::cloud::dialogflow::v2::Document& _internal_documents(int index) const;
  ::google::cloud::dialogflow::v2::Document* _internal_add_documents();
  public:
  const ::google::cloud::dialogflow::v2::Document& documents(int index) const;
  ::google::cloud::dialogflow::v2::Document* add_documents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Document >&
      documents() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListDocumentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Document > documents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class CreateDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateDocumentRequest) */ {
 public:
  inline CreateDocumentRequest() : CreateDocumentRequest(nullptr) {}
  ~CreateDocumentRequest() override;
  explicit constexpr CreateDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDocumentRequest(const CreateDocumentRequest& from);
  CreateDocumentRequest(CreateDocumentRequest&& from) noexcept
    : CreateDocumentRequest() {
    *this = ::std::move(from);
  }

  inline CreateDocumentRequest& operator=(const CreateDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDocumentRequest& operator=(CreateDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDocumentRequest*>(
               &_CreateDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateDocumentRequest& a, CreateDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateDocumentRequest";
  }
  protected:
  explicit CreateDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDocumentFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.dialogflow.v2.Document document = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::google::cloud::dialogflow::v2::Document& document() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Document* release_document();
  ::google::cloud::dialogflow::v2::Document* mutable_document();
  void set_allocated_document(::google::cloud::dialogflow::v2::Document* document);
  private:
  const ::google::cloud::dialogflow::v2::Document& _internal_document() const;
  ::google::cloud::dialogflow::v2::Document* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::google::cloud::dialogflow::v2::Document* document);
  ::google::cloud::dialogflow::v2::Document* unsafe_arena_release_document();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::cloud::dialogflow::v2::Document* document_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ImportDocumentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportDocumentsRequest) */ {
 public:
  inline ImportDocumentsRequest() : ImportDocumentsRequest(nullptr) {}
  ~ImportDocumentsRequest() override;
  explicit constexpr ImportDocumentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDocumentsRequest(const ImportDocumentsRequest& from);
  ImportDocumentsRequest(ImportDocumentsRequest&& from) noexcept
    : ImportDocumentsRequest() {
    *this = ::std::move(from);
  }

  inline ImportDocumentsRequest& operator=(const ImportDocumentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDocumentsRequest& operator=(ImportDocumentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportDocumentsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kGcsSource = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const ImportDocumentsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportDocumentsRequest*>(
               &_ImportDocumentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ImportDocumentsRequest& a, ImportDocumentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDocumentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDocumentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportDocumentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportDocumentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportDocumentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImportDocumentsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDocumentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportDocumentsRequest";
  }
  protected:
  explicit ImportDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDocumentTemplateFieldNumber = 3,
    kImportGcsCustomMetadataFieldNumber = 4,
    kGcsSourceFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.dialogflow.v2.ImportDocumentTemplate document_template = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_document_template() const;
  private:
  bool _internal_has_document_template() const;
  public:
  void clear_document_template();
  const ::google::cloud::dialogflow::v2::ImportDocumentTemplate& document_template() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::ImportDocumentTemplate* release_document_template();
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* mutable_document_template();
  void set_allocated_document_template(::google::cloud::dialogflow::v2::ImportDocumentTemplate* document_template);
  private:
  const ::google::cloud::dialogflow::v2::ImportDocumentTemplate& _internal_document_template() const;
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* _internal_mutable_document_template();
  public:
  void unsafe_arena_set_allocated_document_template(
      ::google::cloud::dialogflow::v2::ImportDocumentTemplate* document_template);
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* unsafe_arena_release_document_template();

  // bool import_gcs_custom_metadata = 4;
  void clear_import_gcs_custom_metadata();
  bool import_gcs_custom_metadata() const;
  void set_import_gcs_custom_metadata(bool value);
  private:
  bool _internal_import_gcs_custom_metadata() const;
  void _internal_set_import_gcs_custom_metadata(bool value);
  public:

  // .google.cloud.dialogflow.v2.GcsSources gcs_source = 2;
  bool has_gcs_source() const;
  private:
  bool _internal_has_gcs_source() const;
  public:
  void clear_gcs_source();
  const ::google::cloud::dialogflow::v2::GcsSources& gcs_source() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::GcsSources* release_gcs_source();
  ::google::cloud::dialogflow::v2::GcsSources* mutable_gcs_source();
  void set_allocated_gcs_source(::google::cloud::dialogflow::v2::GcsSources* gcs_source);
  private:
  const ::google::cloud::dialogflow::v2::GcsSources& _internal_gcs_source() const;
  ::google::cloud::dialogflow::v2::GcsSources* _internal_mutable_gcs_source();
  public:
  void unsafe_arena_set_allocated_gcs_source(
      ::google::cloud::dialogflow::v2::GcsSources* gcs_source);
  ::google::cloud::dialogflow::v2::GcsSources* unsafe_arena_release_gcs_source();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportDocumentsRequest)
 private:
  class _Internal;
  void set_has_gcs_source();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* document_template_;
  bool import_gcs_custom_metadata_;
  union SourceUnion {
    constexpr SourceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::dialogflow::v2::GcsSources* gcs_source_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ImportDocumentTemplate_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImportDocumentTemplate_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImportDocumentTemplate_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ImportDocumentTemplate_MetadataEntry_DoNotUse();
  explicit constexpr ImportDocumentTemplate_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ImportDocumentTemplate_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ImportDocumentTemplate_MetadataEntry_DoNotUse& other);
  static const ImportDocumentTemplate_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImportDocumentTemplate_MetadataEntry_DoNotUse*>(&_ImportDocumentTemplate_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.ImportDocumentTemplate.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.ImportDocumentTemplate.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ImportDocumentTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportDocumentTemplate) */ {
 public:
  inline ImportDocumentTemplate() : ImportDocumentTemplate(nullptr) {}
  ~ImportDocumentTemplate() override;
  explicit constexpr ImportDocumentTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDocumentTemplate(const ImportDocumentTemplate& from);
  ImportDocumentTemplate(ImportDocumentTemplate&& from) noexcept
    : ImportDocumentTemplate() {
    *this = ::std::move(from);
  }

  inline ImportDocumentTemplate& operator=(const ImportDocumentTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDocumentTemplate& operator=(ImportDocumentTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportDocumentTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDocumentTemplate* internal_default_instance() {
    return reinterpret_cast<const ImportDocumentTemplate*>(
               &_ImportDocumentTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImportDocumentTemplate& a, ImportDocumentTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDocumentTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDocumentTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportDocumentTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportDocumentTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportDocumentTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImportDocumentTemplate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDocumentTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportDocumentTemplate";
  }
  protected:
  explicit ImportDocumentTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeTypesFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kMimeTypeFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.Document.KnowledgeType knowledge_types = 2 [(.google.api.field_behavior) = REQUIRED];
  int knowledge_types_size() const;
  private:
  int _internal_knowledge_types_size() const;
  public:
  void clear_knowledge_types();
  private:
  ::google::cloud::dialogflow::v2::Document_KnowledgeType _internal_knowledge_types(int index) const;
  void _internal_add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_knowledge_types();
  public:
  ::google::cloud::dialogflow::v2::Document_KnowledgeType knowledge_types(int index) const;
  void set_knowledge_types(int index, ::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  void add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& knowledge_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_knowledge_types();

  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string mime_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportDocumentTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> knowledge_types_;
  mutable std::atomic<int> _knowledge_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ImportDocumentTemplate_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ImportDocumentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ImportDocumentsResponse) */ {
 public:
  inline ImportDocumentsResponse() : ImportDocumentsResponse(nullptr) {}
  ~ImportDocumentsResponse() override;
  explicit constexpr ImportDocumentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDocumentsResponse(const ImportDocumentsResponse& from);
  ImportDocumentsResponse(ImportDocumentsResponse&& from) noexcept
    : ImportDocumentsResponse() {
    *this = ::std::move(from);
  }

  inline ImportDocumentsResponse& operator=(const ImportDocumentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDocumentsResponse& operator=(ImportDocumentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportDocumentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDocumentsResponse* internal_default_instance() {
    return reinterpret_cast<const ImportDocumentsResponse*>(
               &_ImportDocumentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ImportDocumentsResponse& a, ImportDocumentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDocumentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDocumentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportDocumentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportDocumentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportDocumentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImportDocumentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDocumentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ImportDocumentsResponse";
  }
  protected:
  explicit ImportDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 1,
  };
  // repeated .google.rpc.Status warnings = 1;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  ::google::rpc::Status* mutable_warnings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
      mutable_warnings();
  private:
  const ::google::rpc::Status& _internal_warnings(int index) const;
  ::google::rpc::Status* _internal_add_warnings();
  public:
  const ::google::rpc::Status& warnings(int index) const;
  ::google::rpc::Status* add_warnings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
      warnings() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ImportDocumentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status > warnings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class DeleteDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteDocumentRequest) */ {
 public:
  inline DeleteDocumentRequest() : DeleteDocumentRequest(nullptr) {}
  ~DeleteDocumentRequest() override;
  explicit constexpr DeleteDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDocumentRequest(const DeleteDocumentRequest& from);
  DeleteDocumentRequest(DeleteDocumentRequest&& from) noexcept
    : DeleteDocumentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDocumentRequest& operator=(const DeleteDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDocumentRequest& operator=(DeleteDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDocumentRequest*>(
               &_DeleteDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteDocumentRequest& a, DeleteDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteDocumentRequest";
  }
  protected:
  explicit DeleteDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class UpdateDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateDocumentRequest) */ {
 public:
  inline UpdateDocumentRequest() : UpdateDocumentRequest(nullptr) {}
  ~UpdateDocumentRequest() override;
  explicit constexpr UpdateDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDocumentRequest(const UpdateDocumentRequest& from);
  UpdateDocumentRequest(UpdateDocumentRequest&& from) noexcept
    : UpdateDocumentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDocumentRequest& operator=(const UpdateDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDocumentRequest& operator=(UpdateDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDocumentRequest*>(
               &_UpdateDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateDocumentRequest& a, UpdateDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateDocumentRequest";
  }
  protected:
  explicit UpdateDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.Document document = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::google::cloud::dialogflow::v2::Document& document() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::Document* release_document();
  ::google::cloud::dialogflow::v2::Document* mutable_document();
  void set_allocated_document(::google::cloud::dialogflow::v2::Document* document);
  private:
  const ::google::cloud::dialogflow::v2::Document& _internal_document() const;
  ::google::cloud::dialogflow::v2::Document* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::google::cloud::dialogflow::v2::Document* document);
  ::google::cloud::dialogflow::v2::Document* unsafe_arena_release_document();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateDocumentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::dialogflow::v2::Document* document_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ReloadDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ReloadDocumentRequest) */ {
 public:
  inline ReloadDocumentRequest() : ReloadDocumentRequest(nullptr) {}
  ~ReloadDocumentRequest() override;
  explicit constexpr ReloadDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadDocumentRequest(const ReloadDocumentRequest& from);
  ReloadDocumentRequest(ReloadDocumentRequest&& from) noexcept
    : ReloadDocumentRequest() {
    *this = ::std::move(from);
  }

  inline ReloadDocumentRequest& operator=(const ReloadDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadDocumentRequest& operator=(ReloadDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kContentUri = 3,
    SOURCE_NOT_SET = 0,
  };

  static inline const ReloadDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const ReloadDocumentRequest*>(
               &_ReloadDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReloadDocumentRequest& a, ReloadDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReloadDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReloadDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReloadDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReloadDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ReloadDocumentRequest";
  }
  protected:
  explicit ReloadDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImportGcsCustomMetadataFieldNumber = 4,
    kSmartMessagingPartialUpdateFieldNumber = 5,
    kContentUriFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool import_gcs_custom_metadata = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_import_gcs_custom_metadata();
  bool import_gcs_custom_metadata() const;
  void set_import_gcs_custom_metadata(bool value);
  private:
  bool _internal_import_gcs_custom_metadata() const;
  void _internal_set_import_gcs_custom_metadata(bool value);
  public:

  // bool smart_messaging_partial_update = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_smart_messaging_partial_update();
  bool smart_messaging_partial_update() const;
  void set_smart_messaging_partial_update(bool value);
  private:
  bool _internal_smart_messaging_partial_update() const;
  void _internal_set_smart_messaging_partial_update(bool value);
  public:

  // string content_uri = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_content_uri() const;
  private:
  bool _internal_has_content_uri() const;
  public:
  void clear_content_uri();
  const std::string& content_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_uri();
  PROTOBUF_NODISCARD std::string* release_content_uri();
  void set_allocated_content_uri(std::string* content_uri);
  private:
  const std::string& _internal_content_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_uri(const std::string& value);
  std::string* _internal_mutable_content_uri();
  public:

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ReloadDocumentRequest)
 private:
  class _Internal;
  void set_has_content_uri();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool import_gcs_custom_metadata_;
  bool smart_messaging_partial_update_;
  union SourceUnion {
    constexpr SourceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_uri_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ExportDocumentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ExportDocumentRequest) */ {
 public:
  inline ExportDocumentRequest() : ExportDocumentRequest(nullptr) {}
  ~ExportDocumentRequest() override;
  explicit constexpr ExportDocumentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportDocumentRequest(const ExportDocumentRequest& from);
  ExportDocumentRequest(ExportDocumentRequest&& from) noexcept
    : ExportDocumentRequest() {
    *this = ::std::move(from);
  }

  inline ExportDocumentRequest& operator=(const ExportDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportDocumentRequest& operator=(ExportDocumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportDocumentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DestinationCase {
    kGcsDestination = 2,
    DESTINATION_NOT_SET = 0,
  };

  static inline const ExportDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const ExportDocumentRequest*>(
               &_ExportDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ExportDocumentRequest& a, ExportDocumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportDocumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportDocumentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportDocumentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportDocumentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportDocumentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExportDocumentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportDocumentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ExportDocumentRequest";
  }
  protected:
  explicit ExportDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExportFullContentFieldNumber = 3,
    kSmartMessagingPartialUpdateFieldNumber = 5,
    kGcsDestinationFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool export_full_content = 3;
  void clear_export_full_content();
  bool export_full_content() const;
  void set_export_full_content(bool value);
  private:
  bool _internal_export_full_content() const;
  void _internal_set_export_full_content(bool value);
  public:

  // bool smart_messaging_partial_update = 5;
  void clear_smart_messaging_partial_update();
  bool smart_messaging_partial_update() const;
  void set_smart_messaging_partial_update(bool value);
  private:
  bool _internal_smart_messaging_partial_update() const;
  void _internal_set_smart_messaging_partial_update(bool value);
  public:

  // .google.cloud.dialogflow.v2.GcsDestination gcs_destination = 2;
  bool has_gcs_destination() const;
  private:
  bool _internal_has_gcs_destination() const;
  public:
  void clear_gcs_destination();
  const ::google::cloud::dialogflow::v2::GcsDestination& gcs_destination() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::GcsDestination* release_gcs_destination();
  ::google::cloud::dialogflow::v2::GcsDestination* mutable_gcs_destination();
  void set_allocated_gcs_destination(::google::cloud::dialogflow::v2::GcsDestination* gcs_destination);
  private:
  const ::google::cloud::dialogflow::v2::GcsDestination& _internal_gcs_destination() const;
  ::google::cloud::dialogflow::v2::GcsDestination* _internal_mutable_gcs_destination();
  public:
  void unsafe_arena_set_allocated_gcs_destination(
      ::google::cloud::dialogflow::v2::GcsDestination* gcs_destination);
  ::google::cloud::dialogflow::v2::GcsDestination* unsafe_arena_release_gcs_destination();

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ExportDocumentRequest)
 private:
  class _Internal;
  void set_has_gcs_destination();

  inline bool has_destination() const;
  inline void clear_has_destination();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool export_full_content_;
  bool smart_messaging_partial_update_;
  union DestinationUnion {
    constexpr DestinationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::dialogflow::v2::GcsDestination* gcs_destination_;
  } destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class KnowledgeOperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.KnowledgeOperationMetadata) */ {
 public:
  inline KnowledgeOperationMetadata() : KnowledgeOperationMetadata(nullptr) {}
  ~KnowledgeOperationMetadata() override;
  explicit constexpr KnowledgeOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KnowledgeOperationMetadata(const KnowledgeOperationMetadata& from);
  KnowledgeOperationMetadata(KnowledgeOperationMetadata&& from) noexcept
    : KnowledgeOperationMetadata() {
    *this = ::std::move(from);
  }

  inline KnowledgeOperationMetadata& operator=(const KnowledgeOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeOperationMetadata& operator=(KnowledgeOperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KnowledgeOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const KnowledgeOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const KnowledgeOperationMetadata*>(
               &_KnowledgeOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KnowledgeOperationMetadata& a, KnowledgeOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(KnowledgeOperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnowledgeOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KnowledgeOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KnowledgeOperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KnowledgeOperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KnowledgeOperationMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnowledgeOperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.KnowledgeOperationMetadata";
  }
  protected:
  explicit KnowledgeOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KnowledgeOperationMetadata_State State;
  static constexpr State STATE_UNSPECIFIED =
    KnowledgeOperationMetadata_State_STATE_UNSPECIFIED;
  static constexpr State PENDING =
    KnowledgeOperationMetadata_State_PENDING;
  static constexpr State RUNNING =
    KnowledgeOperationMetadata_State_RUNNING;
  static constexpr State DONE =
    KnowledgeOperationMetadata_State_DONE;
  static inline bool State_IsValid(int value) {
    return KnowledgeOperationMetadata_State_IsValid(value);
  }
  static constexpr State State_MIN =
    KnowledgeOperationMetadata_State_State_MIN;
  static constexpr State State_MAX =
    KnowledgeOperationMetadata_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    KnowledgeOperationMetadata_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return KnowledgeOperationMetadata_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return KnowledgeOperationMetadata_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return KnowledgeOperationMetadata_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeBaseFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // string knowledge_base = 3;
  void clear_knowledge_base();
  const std::string& knowledge_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_knowledge_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_knowledge_base();
  PROTOBUF_NODISCARD std::string* release_knowledge_base();
  void set_allocated_knowledge_base(std::string* knowledge_base);
  private:
  const std::string& _internal_knowledge_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_knowledge_base(const std::string& value);
  std::string* _internal_mutable_knowledge_base();
  public:

  // .google.cloud.dialogflow.v2.KnowledgeOperationMetadata.State state = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State state() const;
  void set_state(::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State value);
  private:
  ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State _internal_state() const;
  void _internal_set_state(::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.KnowledgeOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_base_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Document_ReloadStatus

// .google.protobuf.Timestamp time = 1;
inline bool Document_ReloadStatus::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Document_ReloadStatus::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Document_ReloadStatus::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Document_ReloadStatus::time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.ReloadStatus.time)
  return _internal_time();
}
inline void Document_ReloadStatus::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Document.ReloadStatus.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Document_ReloadStatus::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Document_ReloadStatus::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.ReloadStatus.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Document_ReloadStatus::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Document_ReloadStatus::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.ReloadStatus.time)
  return _msg;
}
inline void Document_ReloadStatus::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.ReloadStatus.time)
}

// .google.rpc.Status status = 2;
inline bool Document_ReloadStatus::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Document_ReloadStatus::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& Document_ReloadStatus::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& Document_ReloadStatus::status() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.ReloadStatus.status)
  return _internal_status();
}
inline void Document_ReloadStatus::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Document.ReloadStatus.status)
}
inline ::google::rpc::Status* Document_ReloadStatus::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* Document_ReloadStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.ReloadStatus.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* Document_ReloadStatus::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* Document_ReloadStatus::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.ReloadStatus.status)
  return _msg;
}
inline void Document_ReloadStatus::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.ReloadStatus.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Document

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void Document::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Document::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Document::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.name)
}
inline std::string* Document::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.name)
  return _s;
}
inline const std::string& Document::_internal_name() const {
  return name_.Get();
}
inline void Document::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Document::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Document::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Document::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& Document::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Document::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.display_name)
}
inline std::string* Document::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.display_name)
  return _s;
}
inline const std::string& Document::_internal_display_name() const {
  return display_name_.Get();
}
inline void Document::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Document::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Document::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.display_name)
}

// string mime_type = 3 [(.google.api.field_behavior) = REQUIRED];
inline void Document::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& Document::mime_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Document::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.mime_type)
}
inline std::string* Document::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.mime_type)
  return _s;
}
inline const std::string& Document::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void Document::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Document::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.mime_type)
  return mime_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Document::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.mime_type)
}

// repeated .google.cloud.dialogflow.v2.Document.KnowledgeType knowledge_types = 4 [(.google.api.field_behavior) = REQUIRED];
inline int Document::_internal_knowledge_types_size() const {
  return knowledge_types_.size();
}
inline int Document::knowledge_types_size() const {
  return _internal_knowledge_types_size();
}
inline void Document::clear_knowledge_types() {
  knowledge_types_.Clear();
}
inline ::google::cloud::dialogflow::v2::Document_KnowledgeType Document::_internal_knowledge_types(int index) const {
  return static_cast< ::google::cloud::dialogflow::v2::Document_KnowledgeType >(knowledge_types_.Get(index));
}
inline ::google::cloud::dialogflow::v2::Document_KnowledgeType Document::knowledge_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.knowledge_types)
  return _internal_knowledge_types(index);
}
inline void Document::set_knowledge_types(int index, ::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  knowledge_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.knowledge_types)
}
inline void Document::_internal_add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  knowledge_types_.Add(value);
}
inline void Document::add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  _internal_add_knowledge_types(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Document.knowledge_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Document::knowledge_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Document.knowledge_types)
  return knowledge_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Document::_internal_mutable_knowledge_types() {
  return &knowledge_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Document::mutable_knowledge_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Document.knowledge_types)
  return _internal_mutable_knowledge_types();
}

// string content_uri = 5;
inline bool Document::_internal_has_content_uri() const {
  return source_case() == kContentUri;
}
inline bool Document::has_content_uri() const {
  return _internal_has_content_uri();
}
inline void Document::set_has_content_uri() {
  _oneof_case_[0] = kContentUri;
}
inline void Document::clear_content_uri() {
  if (_internal_has_content_uri()) {
    source_.content_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_source();
  }
}
inline const std::string& Document::content_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.content_uri)
  return _internal_content_uri();
}
template <typename ArgT0, typename... ArgT>
inline void Document::set_content_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.content_uri)
}
inline std::string* Document::mutable_content_uri() {
  std::string* _s = _internal_mutable_content_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.content_uri)
  return _s;
}
inline const std::string& Document::_internal_content_uri() const {
  if (_internal_has_content_uri()) {
    return source_.content_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Document::_internal_set_content_uri(const std::string& value) {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_content_uri() {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.content_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Document::release_content_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.content_uri)
  if (_internal_has_content_uri()) {
    clear_has_source();
    return source_.content_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Document::set_allocated_content_uri(std::string* content_uri) {
  if (has_source()) {
    clear_source();
  }
  if (content_uri != nullptr) {
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(content_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(content_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.content_uri)
}

// bytes raw_content = 9;
inline bool Document::_internal_has_raw_content() const {
  return source_case() == kRawContent;
}
inline bool Document::has_raw_content() const {
  return _internal_has_raw_content();
}
inline void Document::set_has_raw_content() {
  _oneof_case_[0] = kRawContent;
}
inline void Document::clear_raw_content() {
  if (_internal_has_raw_content()) {
    source_.raw_content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_source();
  }
}
inline const std::string& Document::raw_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.raw_content)
  return _internal_raw_content();
}
template <typename ArgT0, typename... ArgT>
inline void Document::set_raw_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw_content()) {
    clear_source();
    set_has_raw_content();
    source_.raw_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.raw_content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.raw_content)
}
inline std::string* Document::mutable_raw_content() {
  std::string* _s = _internal_mutable_raw_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.raw_content)
  return _s;
}
inline const std::string& Document::_internal_raw_content() const {
  if (_internal_has_raw_content()) {
    return source_.raw_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Document::_internal_set_raw_content(const std::string& value) {
  if (!_internal_has_raw_content()) {
    clear_source();
    set_has_raw_content();
    source_.raw_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.raw_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_raw_content() {
  if (!_internal_has_raw_content()) {
    clear_source();
    set_has_raw_content();
    source_.raw_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.raw_content_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Document::release_raw_content() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.raw_content)
  if (_internal_has_raw_content()) {
    clear_has_source();
    return source_.raw_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Document::set_allocated_raw_content(std::string* raw_content) {
  if (has_source()) {
    clear_source();
  }
  if (raw_content != nullptr) {
    set_has_raw_content();
    source_.raw_content_.UnsafeSetDefault(raw_content);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(raw_content);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.raw_content)
}

// bool enable_auto_reload = 11 [(.google.api.field_behavior) = OPTIONAL];
inline void Document::clear_enable_auto_reload() {
  enable_auto_reload_ = false;
}
inline bool Document::_internal_enable_auto_reload() const {
  return enable_auto_reload_;
}
inline bool Document::enable_auto_reload() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.enable_auto_reload)
  return _internal_enable_auto_reload();
}
inline void Document::_internal_set_enable_auto_reload(bool value) {
  
  enable_auto_reload_ = value;
}
inline void Document::set_enable_auto_reload(bool value) {
  _internal_set_enable_auto_reload(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Document.enable_auto_reload)
}

// .google.cloud.dialogflow.v2.Document.ReloadStatus latest_reload_status = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Document::_internal_has_latest_reload_status() const {
  return this != internal_default_instance() && latest_reload_status_ != nullptr;
}
inline bool Document::has_latest_reload_status() const {
  return _internal_has_latest_reload_status();
}
inline void Document::clear_latest_reload_status() {
  if (GetArenaForAllocation() == nullptr && latest_reload_status_ != nullptr) {
    delete latest_reload_status_;
  }
  latest_reload_status_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Document_ReloadStatus& Document::_internal_latest_reload_status() const {
  const ::google::cloud::dialogflow::v2::Document_ReloadStatus* p = latest_reload_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Document_ReloadStatus&>(
      ::google::cloud::dialogflow::v2::_Document_ReloadStatus_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Document_ReloadStatus& Document::latest_reload_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Document.latest_reload_status)
  return _internal_latest_reload_status();
}
inline void Document::unsafe_arena_set_allocated_latest_reload_status(
    ::google::cloud::dialogflow::v2::Document_ReloadStatus* latest_reload_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_reload_status_);
  }
  latest_reload_status_ = latest_reload_status;
  if (latest_reload_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Document.latest_reload_status)
}
inline ::google::cloud::dialogflow::v2::Document_ReloadStatus* Document::release_latest_reload_status() {
  
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* temp = latest_reload_status_;
  latest_reload_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document_ReloadStatus* Document::unsafe_arena_release_latest_reload_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Document.latest_reload_status)
  
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* temp = latest_reload_status_;
  latest_reload_status_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document_ReloadStatus* Document::_internal_mutable_latest_reload_status() {
  
  if (latest_reload_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Document_ReloadStatus>(GetArenaForAllocation());
    latest_reload_status_ = p;
  }
  return latest_reload_status_;
}
inline ::google::cloud::dialogflow::v2::Document_ReloadStatus* Document::mutable_latest_reload_status() {
  ::google::cloud::dialogflow::v2::Document_ReloadStatus* _msg = _internal_mutable_latest_reload_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Document.latest_reload_status)
  return _msg;
}
inline void Document::set_allocated_latest_reload_status(::google::cloud::dialogflow::v2::Document_ReloadStatus* latest_reload_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete latest_reload_status_;
  }
  if (latest_reload_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::cloud::dialogflow::v2::Document_ReloadStatus>::GetOwningArena(latest_reload_status);
    if (message_arena != submessage_arena) {
      latest_reload_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_reload_status, submessage_arena);
    }
    
  } else {
    
  }
  latest_reload_status_ = latest_reload_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Document.latest_reload_status)
}

// map<string, string> metadata = 7 [(.google.api.field_behavior) = OPTIONAL];
inline int Document::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Document::metadata_size() const {
  return _internal_metadata_size();
}
inline void Document::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Document::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Document::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.Document.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Document::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Document::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.Document.metadata)
  return _internal_mutable_metadata();
}

inline bool Document::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Document::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Document::SourceCase Document::source_case() const {
  return Document::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDocumentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDocumentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDocumentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetDocumentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDocumentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetDocumentRequest.name)
}
inline std::string* GetDocumentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetDocumentRequest.name)
  return _s;
}
inline const std::string& GetDocumentRequest::_internal_name() const {
  return name_.Get();
}
inline void GetDocumentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDocumentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDocumentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetDocumentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDocumentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetDocumentRequest.name)
}

// -------------------------------------------------------------------

// ListDocumentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDocumentsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListDocumentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDocumentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListDocumentsRequest.parent)
}
inline std::string* ListDocumentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListDocumentsRequest.parent)
  return _s;
}
inline const std::string& ListDocumentsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListDocumentsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListDocumentsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDocumentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListDocumentsRequest.parent)
}

// int32 page_size = 2;
inline void ListDocumentsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListDocumentsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListDocumentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsRequest.page_size)
  return _internal_page_size();
}
inline void ListDocumentsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListDocumentsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListDocumentsRequest.page_size)
}

// string page_token = 3;
inline void ListDocumentsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListDocumentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDocumentsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListDocumentsRequest.page_token)
}
inline std::string* ListDocumentsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListDocumentsRequest.page_token)
  return _s;
}
inline const std::string& ListDocumentsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDocumentsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListDocumentsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDocumentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListDocumentsRequest.page_token)
}

// string filter = 4;
inline void ListDocumentsRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListDocumentsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDocumentsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListDocumentsRequest.filter)
}
inline std::string* ListDocumentsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListDocumentsRequest.filter)
  return _s;
}
inline const std::string& ListDocumentsRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListDocumentsRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDocumentsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListDocumentsRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDocumentsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListDocumentsRequest.filter)
}

// -------------------------------------------------------------------

// ListDocumentsResponse

// repeated .google.cloud.dialogflow.v2.Document documents = 1;
inline int ListDocumentsResponse::_internal_documents_size() const {
  return documents_.size();
}
inline int ListDocumentsResponse::documents_size() const {
  return _internal_documents_size();
}
inline void ListDocumentsResponse::clear_documents() {
  documents_.Clear();
}
inline ::google::cloud::dialogflow::v2::Document* ListDocumentsResponse::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListDocumentsResponse.documents)
  return documents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Document >*
ListDocumentsResponse::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListDocumentsResponse.documents)
  return &documents_;
}
inline const ::google::cloud::dialogflow::v2::Document& ListDocumentsResponse::_internal_documents(int index) const {
  return documents_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Document& ListDocumentsResponse::documents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsResponse.documents)
  return _internal_documents(index);
}
inline ::google::cloud::dialogflow::v2::Document* ListDocumentsResponse::_internal_add_documents() {
  return documents_.Add();
}
inline ::google::cloud::dialogflow::v2::Document* ListDocumentsResponse::add_documents() {
  ::google::cloud::dialogflow::v2::Document* _add = _internal_add_documents();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListDocumentsResponse.documents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Document >&
ListDocumentsResponse::documents() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListDocumentsResponse.documents)
  return documents_;
}

// string next_page_token = 2;
inline void ListDocumentsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListDocumentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListDocumentsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDocumentsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListDocumentsResponse.next_page_token)
}
inline std::string* ListDocumentsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListDocumentsResponse.next_page_token)
  return _s;
}
inline const std::string& ListDocumentsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDocumentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDocumentsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDocumentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListDocumentsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDocumentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListDocumentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateDocumentRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateDocumentRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateDocumentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateDocumentRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDocumentRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateDocumentRequest.parent)
}
inline std::string* CreateDocumentRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateDocumentRequest.parent)
  return _s;
}
inline const std::string& CreateDocumentRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateDocumentRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateDocumentRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateDocumentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateDocumentRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateDocumentRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateDocumentRequest.parent)
}

// .google.cloud.dialogflow.v2.Document document = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateDocumentRequest::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool CreateDocumentRequest::has_document() const {
  return _internal_has_document();
}
inline void CreateDocumentRequest::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Document& CreateDocumentRequest::_internal_document() const {
  const ::google::cloud::dialogflow::v2::Document* p = document_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Document&>(
      ::google::cloud::dialogflow::v2::_Document_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Document& CreateDocumentRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateDocumentRequest.document)
  return _internal_document();
}
inline void CreateDocumentRequest::unsafe_arena_set_allocated_document(
    ::google::cloud::dialogflow::v2::Document* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateDocumentRequest.document)
}
inline ::google::cloud::dialogflow::v2::Document* CreateDocumentRequest::release_document() {
  
  ::google::cloud::dialogflow::v2::Document* temp = document_;
  document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document* CreateDocumentRequest::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateDocumentRequest.document)
  
  ::google::cloud::dialogflow::v2::Document* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document* CreateDocumentRequest::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Document>(GetArenaForAllocation());
    document_ = p;
  }
  return document_;
}
inline ::google::cloud::dialogflow::v2::Document* CreateDocumentRequest::mutable_document() {
  ::google::cloud::dialogflow::v2::Document* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateDocumentRequest.document)
  return _msg;
}
inline void CreateDocumentRequest::set_allocated_document(::google::cloud::dialogflow::v2::Document* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete document_;
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::cloud::dialogflow::v2::Document>::GetOwningArena(document);
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateDocumentRequest.document)
}

// -------------------------------------------------------------------

// ImportDocumentsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ImportDocumentsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ImportDocumentsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportDocumentsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportDocumentsRequest.parent)
}
inline std::string* ImportDocumentsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportDocumentsRequest.parent)
  return _s;
}
inline const std::string& ImportDocumentsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ImportDocumentsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImportDocumentsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImportDocumentsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportDocumentsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImportDocumentsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportDocumentsRequest.parent)
}

// .google.cloud.dialogflow.v2.GcsSources gcs_source = 2;
inline bool ImportDocumentsRequest::_internal_has_gcs_source() const {
  return source_case() == kGcsSource;
}
inline bool ImportDocumentsRequest::has_gcs_source() const {
  return _internal_has_gcs_source();
}
inline void ImportDocumentsRequest::set_has_gcs_source() {
  _oneof_case_[0] = kGcsSource;
}
inline ::google::cloud::dialogflow::v2::GcsSources* ImportDocumentsRequest::release_gcs_source() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportDocumentsRequest.gcs_source)
  if (_internal_has_gcs_source()) {
    clear_has_source();
      ::google::cloud::dialogflow::v2::GcsSources* temp = source_.gcs_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.gcs_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::GcsSources& ImportDocumentsRequest::_internal_gcs_source() const {
  return _internal_has_gcs_source()
      ? *source_.gcs_source_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::GcsSources&>(::google::cloud::dialogflow::v2::_GcsSources_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::GcsSources& ImportDocumentsRequest::gcs_source() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentsRequest.gcs_source)
  return _internal_gcs_source();
}
inline ::google::cloud::dialogflow::v2::GcsSources* ImportDocumentsRequest::unsafe_arena_release_gcs_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.ImportDocumentsRequest.gcs_source)
  if (_internal_has_gcs_source()) {
    clear_has_source();
    ::google::cloud::dialogflow::v2::GcsSources* temp = source_.gcs_source_;
    source_.gcs_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImportDocumentsRequest::unsafe_arena_set_allocated_gcs_source(::google::cloud::dialogflow::v2::GcsSources* gcs_source) {
  clear_source();
  if (gcs_source) {
    set_has_gcs_source();
    source_.gcs_source_ = gcs_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ImportDocumentsRequest.gcs_source)
}
inline ::google::cloud::dialogflow::v2::GcsSources* ImportDocumentsRequest::_internal_mutable_gcs_source() {
  if (!_internal_has_gcs_source()) {
    clear_source();
    set_has_gcs_source();
    source_.gcs_source_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::GcsSources >(GetArenaForAllocation());
  }
  return source_.gcs_source_;
}
inline ::google::cloud::dialogflow::v2::GcsSources* ImportDocumentsRequest::mutable_gcs_source() {
  ::google::cloud::dialogflow::v2::GcsSources* _msg = _internal_mutable_gcs_source();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportDocumentsRequest.gcs_source)
  return _msg;
}

// .google.cloud.dialogflow.v2.ImportDocumentTemplate document_template = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool ImportDocumentsRequest::_internal_has_document_template() const {
  return this != internal_default_instance() && document_template_ != nullptr;
}
inline bool ImportDocumentsRequest::has_document_template() const {
  return _internal_has_document_template();
}
inline void ImportDocumentsRequest::clear_document_template() {
  if (GetArenaForAllocation() == nullptr && document_template_ != nullptr) {
    delete document_template_;
  }
  document_template_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::ImportDocumentTemplate& ImportDocumentsRequest::_internal_document_template() const {
  const ::google::cloud::dialogflow::v2::ImportDocumentTemplate* p = document_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::ImportDocumentTemplate&>(
      ::google::cloud::dialogflow::v2::_ImportDocumentTemplate_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::ImportDocumentTemplate& ImportDocumentsRequest::document_template() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentsRequest.document_template)
  return _internal_document_template();
}
inline void ImportDocumentsRequest::unsafe_arena_set_allocated_document_template(
    ::google::cloud::dialogflow::v2::ImportDocumentTemplate* document_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_template_);
  }
  document_template_ = document_template;
  if (document_template) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ImportDocumentsRequest.document_template)
}
inline ::google::cloud::dialogflow::v2::ImportDocumentTemplate* ImportDocumentsRequest::release_document_template() {
  
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* temp = document_template_;
  document_template_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::ImportDocumentTemplate* ImportDocumentsRequest::unsafe_arena_release_document_template() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportDocumentsRequest.document_template)
  
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* temp = document_template_;
  document_template_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::ImportDocumentTemplate* ImportDocumentsRequest::_internal_mutable_document_template() {
  
  if (document_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::ImportDocumentTemplate>(GetArenaForAllocation());
    document_template_ = p;
  }
  return document_template_;
}
inline ::google::cloud::dialogflow::v2::ImportDocumentTemplate* ImportDocumentsRequest::mutable_document_template() {
  ::google::cloud::dialogflow::v2::ImportDocumentTemplate* _msg = _internal_mutable_document_template();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportDocumentsRequest.document_template)
  return _msg;
}
inline void ImportDocumentsRequest::set_allocated_document_template(::google::cloud::dialogflow::v2::ImportDocumentTemplate* document_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete document_template_;
  }
  if (document_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::cloud::dialogflow::v2::ImportDocumentTemplate>::GetOwningArena(document_template);
    if (message_arena != submessage_arena) {
      document_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_template, submessage_arena);
    }
    
  } else {
    
  }
  document_template_ = document_template;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportDocumentsRequest.document_template)
}

// bool import_gcs_custom_metadata = 4;
inline void ImportDocumentsRequest::clear_import_gcs_custom_metadata() {
  import_gcs_custom_metadata_ = false;
}
inline bool ImportDocumentsRequest::_internal_import_gcs_custom_metadata() const {
  return import_gcs_custom_metadata_;
}
inline bool ImportDocumentsRequest::import_gcs_custom_metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentsRequest.import_gcs_custom_metadata)
  return _internal_import_gcs_custom_metadata();
}
inline void ImportDocumentsRequest::_internal_set_import_gcs_custom_metadata(bool value) {
  
  import_gcs_custom_metadata_ = value;
}
inline void ImportDocumentsRequest::set_import_gcs_custom_metadata(bool value) {
  _internal_set_import_gcs_custom_metadata(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportDocumentsRequest.import_gcs_custom_metadata)
}

inline bool ImportDocumentsRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ImportDocumentsRequest::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline ImportDocumentsRequest::SourceCase ImportDocumentsRequest::source_case() const {
  return ImportDocumentsRequest::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImportDocumentTemplate

// string mime_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ImportDocumentTemplate::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& ImportDocumentTemplate::mime_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentTemplate.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportDocumentTemplate::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportDocumentTemplate.mime_type)
}
inline std::string* ImportDocumentTemplate::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportDocumentTemplate.mime_type)
  return _s;
}
inline const std::string& ImportDocumentTemplate::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void ImportDocumentTemplate::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImportDocumentTemplate::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImportDocumentTemplate::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ImportDocumentTemplate.mime_type)
  return mime_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImportDocumentTemplate::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ImportDocumentTemplate.mime_type)
}

// repeated .google.cloud.dialogflow.v2.Document.KnowledgeType knowledge_types = 2 [(.google.api.field_behavior) = REQUIRED];
inline int ImportDocumentTemplate::_internal_knowledge_types_size() const {
  return knowledge_types_.size();
}
inline int ImportDocumentTemplate::knowledge_types_size() const {
  return _internal_knowledge_types_size();
}
inline void ImportDocumentTemplate::clear_knowledge_types() {
  knowledge_types_.Clear();
}
inline ::google::cloud::dialogflow::v2::Document_KnowledgeType ImportDocumentTemplate::_internal_knowledge_types(int index) const {
  return static_cast< ::google::cloud::dialogflow::v2::Document_KnowledgeType >(knowledge_types_.Get(index));
}
inline ::google::cloud::dialogflow::v2::Document_KnowledgeType ImportDocumentTemplate::knowledge_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentTemplate.knowledge_types)
  return _internal_knowledge_types(index);
}
inline void ImportDocumentTemplate::set_knowledge_types(int index, ::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  knowledge_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ImportDocumentTemplate.knowledge_types)
}
inline void ImportDocumentTemplate::_internal_add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  knowledge_types_.Add(value);
}
inline void ImportDocumentTemplate::add_knowledge_types(::google::cloud::dialogflow::v2::Document_KnowledgeType value) {
  _internal_add_knowledge_types(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ImportDocumentTemplate.knowledge_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ImportDocumentTemplate::knowledge_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ImportDocumentTemplate.knowledge_types)
  return knowledge_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportDocumentTemplate::_internal_mutable_knowledge_types() {
  return &knowledge_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportDocumentTemplate::mutable_knowledge_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ImportDocumentTemplate.knowledge_types)
  return _internal_mutable_knowledge_types();
}

// map<string, string> metadata = 3;
inline int ImportDocumentTemplate::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ImportDocumentTemplate::metadata_size() const {
  return _internal_metadata_size();
}
inline void ImportDocumentTemplate::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImportDocumentTemplate::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ImportDocumentTemplate::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.ImportDocumentTemplate.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImportDocumentTemplate::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ImportDocumentTemplate::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.ImportDocumentTemplate.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// ImportDocumentsResponse

// repeated .google.rpc.Status warnings = 1;
inline int ImportDocumentsResponse::_internal_warnings_size() const {
  return warnings_.size();
}
inline int ImportDocumentsResponse::warnings_size() const {
  return _internal_warnings_size();
}
inline ::google::rpc::Status* ImportDocumentsResponse::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ImportDocumentsResponse.warnings)
  return warnings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
ImportDocumentsResponse::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ImportDocumentsResponse.warnings)
  return &warnings_;
}
inline const ::google::rpc::Status& ImportDocumentsResponse::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const ::google::rpc::Status& ImportDocumentsResponse::warnings(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ImportDocumentsResponse.warnings)
  return _internal_warnings(index);
}
inline ::google::rpc::Status* ImportDocumentsResponse::_internal_add_warnings() {
  return warnings_.Add();
}
inline ::google::rpc::Status* ImportDocumentsResponse::add_warnings() {
  ::google::rpc::Status* _add = _internal_add_warnings();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ImportDocumentsResponse.warnings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
ImportDocumentsResponse::warnings() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ImportDocumentsResponse.warnings)
  return warnings_;
}

// -------------------------------------------------------------------

// DeleteDocumentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteDocumentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteDocumentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteDocumentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDocumentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteDocumentRequest.name)
}
inline std::string* DeleteDocumentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteDocumentRequest.name)
  return _s;
}
inline const std::string& DeleteDocumentRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteDocumentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteDocumentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteDocumentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteDocumentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteDocumentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteDocumentRequest.name)
}

// -------------------------------------------------------------------

// UpdateDocumentRequest

// .google.cloud.dialogflow.v2.Document document = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDocumentRequest::_internal_has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline bool UpdateDocumentRequest::has_document() const {
  return _internal_has_document();
}
inline void UpdateDocumentRequest::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Document& UpdateDocumentRequest::_internal_document() const {
  const ::google::cloud::dialogflow::v2::Document* p = document_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Document&>(
      ::google::cloud::dialogflow::v2::_Document_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Document& UpdateDocumentRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateDocumentRequest.document)
  return _internal_document();
}
inline void UpdateDocumentRequest::unsafe_arena_set_allocated_document(
    ::google::cloud::dialogflow::v2::Document* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_);
  }
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateDocumentRequest.document)
}
inline ::google::cloud::dialogflow::v2::Document* UpdateDocumentRequest::release_document() {
  
  ::google::cloud::dialogflow::v2::Document* temp = document_;
  document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document* UpdateDocumentRequest::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateDocumentRequest.document)
  
  ::google::cloud::dialogflow::v2::Document* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Document* UpdateDocumentRequest::_internal_mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Document>(GetArenaForAllocation());
    document_ = p;
  }
  return document_;
}
inline ::google::cloud::dialogflow::v2::Document* UpdateDocumentRequest::mutable_document() {
  ::google::cloud::dialogflow::v2::Document* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateDocumentRequest.document)
  return _msg;
}
inline void UpdateDocumentRequest::set_allocated_document(::google::cloud::dialogflow::v2::Document* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete document_;
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::cloud::dialogflow::v2::Document>::GetOwningArena(document);
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateDocumentRequest.document)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateDocumentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateDocumentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDocumentRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDocumentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateDocumentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDocumentRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateDocumentRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDocumentRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDocumentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateDocumentRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDocumentRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDocumentRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateDocumentRequest.update_mask)
  return _msg;
}
inline void UpdateDocumentRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateDocumentRequest.update_mask)
}

// -------------------------------------------------------------------

// ReloadDocumentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReloadDocumentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReloadDocumentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ReloadDocumentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReloadDocumentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ReloadDocumentRequest.name)
}
inline std::string* ReloadDocumentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ReloadDocumentRequest.name)
  return _s;
}
inline const std::string& ReloadDocumentRequest::_internal_name() const {
  return name_.Get();
}
inline void ReloadDocumentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReloadDocumentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReloadDocumentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ReloadDocumentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReloadDocumentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ReloadDocumentRequest.name)
}

// string content_uri = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool ReloadDocumentRequest::_internal_has_content_uri() const {
  return source_case() == kContentUri;
}
inline bool ReloadDocumentRequest::has_content_uri() const {
  return _internal_has_content_uri();
}
inline void ReloadDocumentRequest::set_has_content_uri() {
  _oneof_case_[0] = kContentUri;
}
inline void ReloadDocumentRequest::clear_content_uri() {
  if (_internal_has_content_uri()) {
    source_.content_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_source();
  }
}
inline const std::string& ReloadDocumentRequest::content_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ReloadDocumentRequest.content_uri)
  return _internal_content_uri();
}
template <typename ArgT0, typename... ArgT>
inline void ReloadDocumentRequest::set_content_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ReloadDocumentRequest.content_uri)
}
inline std::string* ReloadDocumentRequest::mutable_content_uri() {
  std::string* _s = _internal_mutable_content_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ReloadDocumentRequest.content_uri)
  return _s;
}
inline const std::string& ReloadDocumentRequest::_internal_content_uri() const {
  if (_internal_has_content_uri()) {
    return source_.content_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReloadDocumentRequest::_internal_set_content_uri(const std::string& value) {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReloadDocumentRequest::_internal_mutable_content_uri() {
  if (!_internal_has_content_uri()) {
    clear_source();
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_.content_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReloadDocumentRequest::release_content_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ReloadDocumentRequest.content_uri)
  if (_internal_has_content_uri()) {
    clear_has_source();
    return source_.content_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ReloadDocumentRequest::set_allocated_content_uri(std::string* content_uri) {
  if (has_source()) {
    clear_source();
  }
  if (content_uri != nullptr) {
    set_has_content_uri();
    source_.content_uri_.UnsafeSetDefault(content_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(content_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ReloadDocumentRequest.content_uri)
}

// bool import_gcs_custom_metadata = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ReloadDocumentRequest::clear_import_gcs_custom_metadata() {
  import_gcs_custom_metadata_ = false;
}
inline bool ReloadDocumentRequest::_internal_import_gcs_custom_metadata() const {
  return import_gcs_custom_metadata_;
}
inline bool ReloadDocumentRequest::import_gcs_custom_metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ReloadDocumentRequest.import_gcs_custom_metadata)
  return _internal_import_gcs_custom_metadata();
}
inline void ReloadDocumentRequest::_internal_set_import_gcs_custom_metadata(bool value) {
  
  import_gcs_custom_metadata_ = value;
}
inline void ReloadDocumentRequest::set_import_gcs_custom_metadata(bool value) {
  _internal_set_import_gcs_custom_metadata(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ReloadDocumentRequest.import_gcs_custom_metadata)
}

// bool smart_messaging_partial_update = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void ReloadDocumentRequest::clear_smart_messaging_partial_update() {
  smart_messaging_partial_update_ = false;
}
inline bool ReloadDocumentRequest::_internal_smart_messaging_partial_update() const {
  return smart_messaging_partial_update_;
}
inline bool ReloadDocumentRequest::smart_messaging_partial_update() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ReloadDocumentRequest.smart_messaging_partial_update)
  return _internal_smart_messaging_partial_update();
}
inline void ReloadDocumentRequest::_internal_set_smart_messaging_partial_update(bool value) {
  
  smart_messaging_partial_update_ = value;
}
inline void ReloadDocumentRequest::set_smart_messaging_partial_update(bool value) {
  _internal_set_smart_messaging_partial_update(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ReloadDocumentRequest.smart_messaging_partial_update)
}

inline bool ReloadDocumentRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ReloadDocumentRequest::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline ReloadDocumentRequest::SourceCase ReloadDocumentRequest::source_case() const {
  return ReloadDocumentRequest::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExportDocumentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ExportDocumentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ExportDocumentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportDocumentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportDocumentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportDocumentRequest.name)
}
inline std::string* ExportDocumentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportDocumentRequest.name)
  return _s;
}
inline const std::string& ExportDocumentRequest::_internal_name() const {
  return name_.Get();
}
inline void ExportDocumentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExportDocumentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExportDocumentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportDocumentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExportDocumentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ExportDocumentRequest.name)
}

// .google.cloud.dialogflow.v2.GcsDestination gcs_destination = 2;
inline bool ExportDocumentRequest::_internal_has_gcs_destination() const {
  return destination_case() == kGcsDestination;
}
inline bool ExportDocumentRequest::has_gcs_destination() const {
  return _internal_has_gcs_destination();
}
inline void ExportDocumentRequest::set_has_gcs_destination() {
  _oneof_case_[0] = kGcsDestination;
}
inline ::google::cloud::dialogflow::v2::GcsDestination* ExportDocumentRequest::release_gcs_destination() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ExportDocumentRequest.gcs_destination)
  if (_internal_has_gcs_destination()) {
    clear_has_destination();
      ::google::cloud::dialogflow::v2::GcsDestination* temp = destination_.gcs_destination_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    destination_.gcs_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::GcsDestination& ExportDocumentRequest::_internal_gcs_destination() const {
  return _internal_has_gcs_destination()
      ? *destination_.gcs_destination_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::GcsDestination&>(::google::cloud::dialogflow::v2::_GcsDestination_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::GcsDestination& ExportDocumentRequest::gcs_destination() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportDocumentRequest.gcs_destination)
  return _internal_gcs_destination();
}
inline ::google::cloud::dialogflow::v2::GcsDestination* ExportDocumentRequest::unsafe_arena_release_gcs_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.ExportDocumentRequest.gcs_destination)
  if (_internal_has_gcs_destination()) {
    clear_has_destination();
    ::google::cloud::dialogflow::v2::GcsDestination* temp = destination_.gcs_destination_;
    destination_.gcs_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExportDocumentRequest::unsafe_arena_set_allocated_gcs_destination(::google::cloud::dialogflow::v2::GcsDestination* gcs_destination) {
  clear_destination();
  if (gcs_destination) {
    set_has_gcs_destination();
    destination_.gcs_destination_ = gcs_destination;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.ExportDocumentRequest.gcs_destination)
}
inline ::google::cloud::dialogflow::v2::GcsDestination* ExportDocumentRequest::_internal_mutable_gcs_destination() {
  if (!_internal_has_gcs_destination()) {
    clear_destination();
    set_has_gcs_destination();
    destination_.gcs_destination_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::GcsDestination >(GetArenaForAllocation());
  }
  return destination_.gcs_destination_;
}
inline ::google::cloud::dialogflow::v2::GcsDestination* ExportDocumentRequest::mutable_gcs_destination() {
  ::google::cloud::dialogflow::v2::GcsDestination* _msg = _internal_mutable_gcs_destination();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ExportDocumentRequest.gcs_destination)
  return _msg;
}

// bool export_full_content = 3;
inline void ExportDocumentRequest::clear_export_full_content() {
  export_full_content_ = false;
}
inline bool ExportDocumentRequest::_internal_export_full_content() const {
  return export_full_content_;
}
inline bool ExportDocumentRequest::export_full_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportDocumentRequest.export_full_content)
  return _internal_export_full_content();
}
inline void ExportDocumentRequest::_internal_set_export_full_content(bool value) {
  
  export_full_content_ = value;
}
inline void ExportDocumentRequest::set_export_full_content(bool value) {
  _internal_set_export_full_content(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportDocumentRequest.export_full_content)
}

// bool smart_messaging_partial_update = 5;
inline void ExportDocumentRequest::clear_smart_messaging_partial_update() {
  smart_messaging_partial_update_ = false;
}
inline bool ExportDocumentRequest::_internal_smart_messaging_partial_update() const {
  return smart_messaging_partial_update_;
}
inline bool ExportDocumentRequest::smart_messaging_partial_update() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ExportDocumentRequest.smart_messaging_partial_update)
  return _internal_smart_messaging_partial_update();
}
inline void ExportDocumentRequest::_internal_set_smart_messaging_partial_update(bool value) {
  
  smart_messaging_partial_update_ = value;
}
inline void ExportDocumentRequest::set_smart_messaging_partial_update(bool value) {
  _internal_set_smart_messaging_partial_update(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ExportDocumentRequest.smart_messaging_partial_update)
}

inline bool ExportDocumentRequest::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void ExportDocumentRequest::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
inline ExportDocumentRequest::DestinationCase ExportDocumentRequest::destination_case() const {
  return ExportDocumentRequest::DestinationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KnowledgeOperationMetadata

// .google.cloud.dialogflow.v2.KnowledgeOperationMetadata.State state = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void KnowledgeOperationMetadata::clear_state() {
  state_ = 0;
}
inline ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State KnowledgeOperationMetadata::_internal_state() const {
  return static_cast< ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State >(state_);
}
inline ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State KnowledgeOperationMetadata::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.state)
  return _internal_state();
}
inline void KnowledgeOperationMetadata::_internal_set_state(::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State value) {
  
  state_ = value;
}
inline void KnowledgeOperationMetadata::set_state(::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.state)
}

// string knowledge_base = 3;
inline void KnowledgeOperationMetadata::clear_knowledge_base() {
  knowledge_base_.ClearToEmpty();
}
inline const std::string& KnowledgeOperationMetadata::knowledge_base() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.knowledge_base)
  return _internal_knowledge_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KnowledgeOperationMetadata::set_knowledge_base(ArgT0&& arg0, ArgT... args) {
 
 knowledge_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.knowledge_base)
}
inline std::string* KnowledgeOperationMetadata::mutable_knowledge_base() {
  std::string* _s = _internal_mutable_knowledge_base();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.knowledge_base)
  return _s;
}
inline const std::string& KnowledgeOperationMetadata::_internal_knowledge_base() const {
  return knowledge_base_.Get();
}
inline void KnowledgeOperationMetadata::_internal_set_knowledge_base(const std::string& value) {
  
  knowledge_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KnowledgeOperationMetadata::_internal_mutable_knowledge_base() {
  
  return knowledge_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KnowledgeOperationMetadata::release_knowledge_base() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.knowledge_base)
  return knowledge_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KnowledgeOperationMetadata::set_allocated_knowledge_base(std::string* knowledge_base) {
  if (knowledge_base != nullptr) {
    
  } else {
    
  }
  knowledge_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_base,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (knowledge_base_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    knowledge_base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.KnowledgeOperationMetadata.knowledge_base)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Document_KnowledgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Document_KnowledgeType>() {
  return ::google::cloud::dialogflow::v2::Document_KnowledgeType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State>() {
  return ::google::cloud::dialogflow::v2::KnowledgeOperationMetadata_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fdocument_2eproto
