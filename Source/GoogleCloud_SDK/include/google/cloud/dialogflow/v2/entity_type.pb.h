// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/entity_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class BatchCreateEntitiesRequest;
struct BatchCreateEntitiesRequestDefaultTypeInternal;
extern BatchCreateEntitiesRequestDefaultTypeInternal _BatchCreateEntitiesRequest_default_instance_;
class BatchDeleteEntitiesRequest;
struct BatchDeleteEntitiesRequestDefaultTypeInternal;
extern BatchDeleteEntitiesRequestDefaultTypeInternal _BatchDeleteEntitiesRequest_default_instance_;
class BatchDeleteEntityTypesRequest;
struct BatchDeleteEntityTypesRequestDefaultTypeInternal;
extern BatchDeleteEntityTypesRequestDefaultTypeInternal _BatchDeleteEntityTypesRequest_default_instance_;
class BatchUpdateEntitiesRequest;
struct BatchUpdateEntitiesRequestDefaultTypeInternal;
extern BatchUpdateEntitiesRequestDefaultTypeInternal _BatchUpdateEntitiesRequest_default_instance_;
class BatchUpdateEntityTypesRequest;
struct BatchUpdateEntityTypesRequestDefaultTypeInternal;
extern BatchUpdateEntityTypesRequestDefaultTypeInternal _BatchUpdateEntityTypesRequest_default_instance_;
class BatchUpdateEntityTypesResponse;
struct BatchUpdateEntityTypesResponseDefaultTypeInternal;
extern BatchUpdateEntityTypesResponseDefaultTypeInternal _BatchUpdateEntityTypesResponse_default_instance_;
class CreateEntityTypeRequest;
struct CreateEntityTypeRequestDefaultTypeInternal;
extern CreateEntityTypeRequestDefaultTypeInternal _CreateEntityTypeRequest_default_instance_;
class DeleteEntityTypeRequest;
struct DeleteEntityTypeRequestDefaultTypeInternal;
extern DeleteEntityTypeRequestDefaultTypeInternal _DeleteEntityTypeRequest_default_instance_;
class EntityType;
struct EntityTypeDefaultTypeInternal;
extern EntityTypeDefaultTypeInternal _EntityType_default_instance_;
class EntityTypeBatch;
struct EntityTypeBatchDefaultTypeInternal;
extern EntityTypeBatchDefaultTypeInternal _EntityTypeBatch_default_instance_;
class EntityType_Entity;
struct EntityType_EntityDefaultTypeInternal;
extern EntityType_EntityDefaultTypeInternal _EntityType_Entity_default_instance_;
class GetEntityTypeRequest;
struct GetEntityTypeRequestDefaultTypeInternal;
extern GetEntityTypeRequestDefaultTypeInternal _GetEntityTypeRequest_default_instance_;
class ListEntityTypesRequest;
struct ListEntityTypesRequestDefaultTypeInternal;
extern ListEntityTypesRequestDefaultTypeInternal _ListEntityTypesRequest_default_instance_;
class ListEntityTypesResponse;
struct ListEntityTypesResponseDefaultTypeInternal;
extern ListEntityTypesResponseDefaultTypeInternal _ListEntityTypesResponse_default_instance_;
class UpdateEntityTypeRequest;
struct UpdateEntityTypeRequestDefaultTypeInternal;
extern UpdateEntityTypeRequestDefaultTypeInternal _UpdateEntityTypeRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::BatchCreateEntitiesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchCreateEntitiesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchDeleteEntitiesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchDeleteEntitiesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchDeleteEntityTypesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchDeleteEntityTypesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchUpdateEntitiesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchUpdateEntitiesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchUpdateEntityTypesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchUpdateEntityTypesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::BatchUpdateEntityTypesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::BatchUpdateEntityTypesResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::CreateEntityTypeRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::CreateEntityTypeRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DeleteEntityTypeRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DeleteEntityTypeRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::EntityType* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EntityType>(Arena*);
template<> ::google::cloud::dialogflow::v2::EntityTypeBatch* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EntityTypeBatch>(Arena*);
template<> ::google::cloud::dialogflow::v2::EntityType_Entity* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EntityType_Entity>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetEntityTypeRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetEntityTypeRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListEntityTypesRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListEntityTypesRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListEntityTypesResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListEntityTypesResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateEntityTypeRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateEntityTypeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum EntityType_Kind : int {
  EntityType_Kind_KIND_UNSPECIFIED = 0,
  EntityType_Kind_KIND_MAP = 1,
  EntityType_Kind_KIND_LIST = 2,
  EntityType_Kind_KIND_REGEXP = 3,
  EntityType_Kind_EntityType_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntityType_Kind_EntityType_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntityType_Kind_IsValid(int value);
constexpr EntityType_Kind EntityType_Kind_Kind_MIN = EntityType_Kind_KIND_UNSPECIFIED;
constexpr EntityType_Kind EntityType_Kind_Kind_MAX = EntityType_Kind_KIND_REGEXP;
constexpr int EntityType_Kind_Kind_ARRAYSIZE = EntityType_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_Kind_descriptor();
template<typename T>
inline const std::string& EntityType_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntityType_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntityType_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntityType_Kind_descriptor(), enum_t_value);
}
inline bool EntityType_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntityType_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntityType_Kind>(
    EntityType_Kind_descriptor(), name, value);
}
enum EntityType_AutoExpansionMode : int {
  EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_UNSPECIFIED = 0,
  EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_DEFAULT = 1,
  EntityType_AutoExpansionMode_EntityType_AutoExpansionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntityType_AutoExpansionMode_EntityType_AutoExpansionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntityType_AutoExpansionMode_IsValid(int value);
constexpr EntityType_AutoExpansionMode EntityType_AutoExpansionMode_AutoExpansionMode_MIN = EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_UNSPECIFIED;
constexpr EntityType_AutoExpansionMode EntityType_AutoExpansionMode_AutoExpansionMode_MAX = EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_DEFAULT;
constexpr int EntityType_AutoExpansionMode_AutoExpansionMode_ARRAYSIZE = EntityType_AutoExpansionMode_AutoExpansionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_AutoExpansionMode_descriptor();
template<typename T>
inline const std::string& EntityType_AutoExpansionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntityType_AutoExpansionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntityType_AutoExpansionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntityType_AutoExpansionMode_descriptor(), enum_t_value);
}
inline bool EntityType_AutoExpansionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntityType_AutoExpansionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntityType_AutoExpansionMode>(
    EntityType_AutoExpansionMode_descriptor(), name, value);
}
// ===================================================================

class EntityType_Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EntityType.Entity) */ {
 public:
  inline EntityType_Entity() : EntityType_Entity(nullptr) {}
  ~EntityType_Entity() override;
  explicit PROTOBUF_CONSTEXPR EntityType_Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityType_Entity(const EntityType_Entity& from);
  EntityType_Entity(EntityType_Entity&& from) noexcept
    : EntityType_Entity() {
    *this = ::std::move(from);
  }

  inline EntityType_Entity& operator=(const EntityType_Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityType_Entity& operator=(EntityType_Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityType_Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityType_Entity* internal_default_instance() {
    return reinterpret_cast<const EntityType_Entity*>(
               &_EntityType_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityType_Entity& a, EntityType_Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityType_Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityType_Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityType_Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityType_Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityType_Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityType_Entity& from) {
    EntityType_Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityType_Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EntityType.Entity";
  }
  protected:
  explicit EntityType_Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynonymsFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated string synonyms = 2 [(.google.api.field_behavior) = REQUIRED];
  int synonyms_size() const;
  private:
  int _internal_synonyms_size() const;
  public:
  void clear_synonyms();
  const std::string& synonyms(int index) const;
  std::string* mutable_synonyms(int index);
  void set_synonyms(int index, const std::string& value);
  void set_synonyms(int index, std::string&& value);
  void set_synonyms(int index, const char* value);
  void set_synonyms(int index, const char* value, size_t size);
  std::string* add_synonyms();
  void add_synonyms(const std::string& value);
  void add_synonyms(std::string&& value);
  void add_synonyms(const char* value);
  void add_synonyms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& synonyms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_synonyms();
  private:
  const std::string& _internal_synonyms(int index) const;
  std::string* _internal_add_synonyms();
  public:

  // string value = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EntityType.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> synonyms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class EntityType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EntityType) */ {
 public:
  inline EntityType() : EntityType(nullptr) {}
  ~EntityType() override;
  explicit PROTOBUF_CONSTEXPR EntityType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityType(const EntityType& from);
  EntityType(EntityType&& from) noexcept
    : EntityType() {
    *this = ::std::move(from);
  }

  inline EntityType& operator=(const EntityType& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityType& operator=(EntityType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityType& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityType* internal_default_instance() {
    return reinterpret_cast<const EntityType*>(
               &_EntityType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityType& a, EntityType& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityType& from) {
    EntityType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EntityType";
  }
  protected:
  explicit EntityType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EntityType_Entity Entity;

  typedef EntityType_Kind Kind;
  static constexpr Kind KIND_UNSPECIFIED =
    EntityType_Kind_KIND_UNSPECIFIED;
  static constexpr Kind KIND_MAP =
    EntityType_Kind_KIND_MAP;
  static constexpr Kind KIND_LIST =
    EntityType_Kind_KIND_LIST;
  static constexpr Kind KIND_REGEXP =
    EntityType_Kind_KIND_REGEXP;
  static inline bool Kind_IsValid(int value) {
    return EntityType_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    EntityType_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    EntityType_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    EntityType_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return EntityType_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return EntityType_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return EntityType_Kind_Parse(name, value);
  }

  typedef EntityType_AutoExpansionMode AutoExpansionMode;
  static constexpr AutoExpansionMode AUTO_EXPANSION_MODE_UNSPECIFIED =
    EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_UNSPECIFIED;
  static constexpr AutoExpansionMode AUTO_EXPANSION_MODE_DEFAULT =
    EntityType_AutoExpansionMode_AUTO_EXPANSION_MODE_DEFAULT;
  static inline bool AutoExpansionMode_IsValid(int value) {
    return EntityType_AutoExpansionMode_IsValid(value);
  }
  static constexpr AutoExpansionMode AutoExpansionMode_MIN =
    EntityType_AutoExpansionMode_AutoExpansionMode_MIN;
  static constexpr AutoExpansionMode AutoExpansionMode_MAX =
    EntityType_AutoExpansionMode_AutoExpansionMode_MAX;
  static constexpr int AutoExpansionMode_ARRAYSIZE =
    EntityType_AutoExpansionMode_AutoExpansionMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AutoExpansionMode_descriptor() {
    return EntityType_AutoExpansionMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AutoExpansionMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutoExpansionMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutoExpansionMode_Name.");
    return EntityType_AutoExpansionMode_Name(enum_t_value);
  }
  static inline bool AutoExpansionMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AutoExpansionMode* value) {
    return EntityType_AutoExpansionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 6,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kKindFieldNumber = 3,
    kAutoExpansionModeFieldNumber = 4,
    kEnableFuzzyExtractionFieldNumber = 7,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 6 [(.google.api.field_behavior) = OPTIONAL];
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::google::cloud::dialogflow::v2::EntityType_Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
      mutable_entities();
  private:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& _internal_entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* _internal_add_entities();
  public:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
      entities() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.cloud.dialogflow.v2.EntityType.Kind kind = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_kind();
  ::google::cloud::dialogflow::v2::EntityType_Kind kind() const;
  void set_kind(::google::cloud::dialogflow::v2::EntityType_Kind value);
  private:
  ::google::cloud::dialogflow::v2::EntityType_Kind _internal_kind() const;
  void _internal_set_kind(::google::cloud::dialogflow::v2::EntityType_Kind value);
  public:

  // .google.cloud.dialogflow.v2.EntityType.AutoExpansionMode auto_expansion_mode = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_auto_expansion_mode();
  ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode auto_expansion_mode() const;
  void set_auto_expansion_mode(::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode value);
  private:
  ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode _internal_auto_expansion_mode() const;
  void _internal_set_auto_expansion_mode(::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode value);
  public:

  // bool enable_fuzzy_extraction = 7 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enable_fuzzy_extraction();
  bool enable_fuzzy_extraction() const;
  void set_enable_fuzzy_extraction(bool value);
  private:
  bool _internal_enable_fuzzy_extraction() const;
  void _internal_set_enable_fuzzy_extraction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EntityType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity > entities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int kind_;
    int auto_expansion_mode_;
    bool enable_fuzzy_extraction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class ListEntityTypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListEntityTypesRequest) */ {
 public:
  inline ListEntityTypesRequest() : ListEntityTypesRequest(nullptr) {}
  ~ListEntityTypesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEntityTypesRequest(const ListEntityTypesRequest& from);
  ListEntityTypesRequest(ListEntityTypesRequest&& from) noexcept
    : ListEntityTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListEntityTypesRequest& operator=(const ListEntityTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEntityTypesRequest& operator=(ListEntityTypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEntityTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEntityTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListEntityTypesRequest*>(
               &_ListEntityTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListEntityTypesRequest& a, ListEntityTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEntityTypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEntityTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEntityTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEntityTypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEntityTypesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListEntityTypesRequest& from) {
    ListEntityTypesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEntityTypesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListEntityTypesRequest";
  }
  protected:
  explicit ListEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListEntityTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class ListEntityTypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListEntityTypesResponse) */ {
 public:
  inline ListEntityTypesResponse() : ListEntityTypesResponse(nullptr) {}
  ~ListEntityTypesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListEntityTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEntityTypesResponse(const ListEntityTypesResponse& from);
  ListEntityTypesResponse(ListEntityTypesResponse&& from) noexcept
    : ListEntityTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListEntityTypesResponse& operator=(const ListEntityTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEntityTypesResponse& operator=(ListEntityTypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEntityTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEntityTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListEntityTypesResponse*>(
               &_ListEntityTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListEntityTypesResponse& a, ListEntityTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEntityTypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEntityTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEntityTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEntityTypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEntityTypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListEntityTypesResponse& from) {
    ListEntityTypesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEntityTypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListEntityTypesResponse";
  }
  protected:
  explicit ListEntityTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
  int entity_types_size() const;
  private:
  int _internal_entity_types_size() const;
  public:
  void clear_entity_types();
  ::google::cloud::dialogflow::v2::EntityType* mutable_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
      mutable_entity_types();
  private:
  const ::google::cloud::dialogflow::v2::EntityType& _internal_entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* _internal_add_entity_types();
  public:
  const ::google::cloud::dialogflow::v2::EntityType& entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* add_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
      entity_types() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListEntityTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType > entity_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class GetEntityTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetEntityTypeRequest) */ {
 public:
  inline GetEntityTypeRequest() : GetEntityTypeRequest(nullptr) {}
  ~GetEntityTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityTypeRequest(const GetEntityTypeRequest& from);
  GetEntityTypeRequest(GetEntityTypeRequest&& from) noexcept
    : GetEntityTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityTypeRequest& operator=(const GetEntityTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityTypeRequest& operator=(GetEntityTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityTypeRequest*>(
               &_GetEntityTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetEntityTypeRequest& a, GetEntityTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityTypeRequest& from) {
    GetEntityTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetEntityTypeRequest";
  }
  protected:
  explicit GetEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetEntityTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CreateEntityTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.CreateEntityTypeRequest) */ {
 public:
  inline CreateEntityTypeRequest() : CreateEntityTypeRequest(nullptr) {}
  ~CreateEntityTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEntityTypeRequest(const CreateEntityTypeRequest& from);
  CreateEntityTypeRequest(CreateEntityTypeRequest&& from) noexcept
    : CreateEntityTypeRequest() {
    *this = ::std::move(from);
  }

  inline CreateEntityTypeRequest& operator=(const CreateEntityTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEntityTypeRequest& operator=(CreateEntityTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEntityTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEntityTypeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEntityTypeRequest*>(
               &_CreateEntityTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateEntityTypeRequest& a, CreateEntityTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEntityTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEntityTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateEntityTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateEntityTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEntityTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateEntityTypeRequest& from) {
    CreateEntityTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEntityTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.CreateEntityTypeRequest";
  }
  protected:
  explicit CreateEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
    kEntityTypeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.cloud.dialogflow.v2.EntityType entity_type = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_entity_type() const;
  private:
  bool _internal_has_entity_type() const;
  public:
  void clear_entity_type();
  const ::google::cloud::dialogflow::v2::EntityType& entity_type() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::EntityType* release_entity_type();
  ::google::cloud::dialogflow::v2::EntityType* mutable_entity_type();
  void set_allocated_entity_type(::google::cloud::dialogflow::v2::EntityType* entity_type);
  private:
  const ::google::cloud::dialogflow::v2::EntityType& _internal_entity_type() const;
  ::google::cloud::dialogflow::v2::EntityType* _internal_mutable_entity_type();
  public:
  void unsafe_arena_set_allocated_entity_type(
      ::google::cloud::dialogflow::v2::EntityType* entity_type);
  ::google::cloud::dialogflow::v2::EntityType* unsafe_arena_release_entity_type();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.CreateEntityTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::google::cloud::dialogflow::v2::EntityType* entity_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class UpdateEntityTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateEntityTypeRequest) */ {
 public:
  inline UpdateEntityTypeRequest() : UpdateEntityTypeRequest(nullptr) {}
  ~UpdateEntityTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEntityTypeRequest(const UpdateEntityTypeRequest& from);
  UpdateEntityTypeRequest(UpdateEntityTypeRequest&& from) noexcept
    : UpdateEntityTypeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEntityTypeRequest& operator=(const UpdateEntityTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEntityTypeRequest& operator=(UpdateEntityTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateEntityTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEntityTypeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEntityTypeRequest*>(
               &_UpdateEntityTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateEntityTypeRequest& a, UpdateEntityTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEntityTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEntityTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateEntityTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateEntityTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateEntityTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateEntityTypeRequest& from) {
    UpdateEntityTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEntityTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateEntityTypeRequest";
  }
  protected:
  explicit UpdateEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 2,
    kEntityTypeFieldNumber = 1,
    kUpdateMaskFieldNumber = 3,
  };
  // string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.cloud.dialogflow.v2.EntityType entity_type = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_entity_type() const;
  private:
  bool _internal_has_entity_type() const;
  public:
  void clear_entity_type();
  const ::google::cloud::dialogflow::v2::EntityType& entity_type() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::EntityType* release_entity_type();
  ::google::cloud::dialogflow::v2::EntityType* mutable_entity_type();
  void set_allocated_entity_type(::google::cloud::dialogflow::v2::EntityType* entity_type);
  private:
  const ::google::cloud::dialogflow::v2::EntityType& _internal_entity_type() const;
  ::google::cloud::dialogflow::v2::EntityType* _internal_mutable_entity_type();
  public:
  void unsafe_arena_set_allocated_entity_type(
      ::google::cloud::dialogflow::v2::EntityType* entity_type);
  ::google::cloud::dialogflow::v2::EntityType* unsafe_arena_release_entity_type();

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateEntityTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::google::cloud::dialogflow::v2::EntityType* entity_type_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class DeleteEntityTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DeleteEntityTypeRequest) */ {
 public:
  inline DeleteEntityTypeRequest() : DeleteEntityTypeRequest(nullptr) {}
  ~DeleteEntityTypeRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEntityTypeRequest(const DeleteEntityTypeRequest& from);
  DeleteEntityTypeRequest(DeleteEntityTypeRequest&& from) noexcept
    : DeleteEntityTypeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEntityTypeRequest& operator=(const DeleteEntityTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEntityTypeRequest& operator=(DeleteEntityTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEntityTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEntityTypeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEntityTypeRequest*>(
               &_DeleteEntityTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteEntityTypeRequest& a, DeleteEntityTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEntityTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEntityTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEntityTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEntityTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEntityTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteEntityTypeRequest& from) {
    DeleteEntityTypeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEntityTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DeleteEntityTypeRequest";
  }
  protected:
  explicit DeleteEntityTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DeleteEntityTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateEntityTypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest) */ {
 public:
  inline BatchUpdateEntityTypesRequest() : BatchUpdateEntityTypesRequest(nullptr) {}
  ~BatchUpdateEntityTypesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateEntityTypesRequest(const BatchUpdateEntityTypesRequest& from);
  BatchUpdateEntityTypesRequest(BatchUpdateEntityTypesRequest&& from) noexcept
    : BatchUpdateEntityTypesRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateEntityTypesRequest& operator=(const BatchUpdateEntityTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateEntityTypesRequest& operator=(BatchUpdateEntityTypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateEntityTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  enum EntityTypeBatchCase {
    kEntityTypeBatchUri = 2,
    kEntityTypeBatchInline = 3,
    ENTITY_TYPE_BATCH_NOT_SET = 0,
  };

  static inline const BatchUpdateEntityTypesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateEntityTypesRequest*>(
               &_BatchUpdateEntityTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BatchUpdateEntityTypesRequest& a, BatchUpdateEntityTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateEntityTypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateEntityTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateEntityTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateEntityTypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateEntityTypesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateEntityTypesRequest& from) {
    BatchUpdateEntityTypesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateEntityTypesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest";
  }
  protected:
  explicit BatchUpdateEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 4,
    kUpdateMaskFieldNumber = 5,
    kEntityTypeBatchUriFieldNumber = 2,
    kEntityTypeBatchInlineFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // string entity_type_batch_uri = 2;
  bool has_entity_type_batch_uri() const;
  private:
  bool _internal_has_entity_type_batch_uri() const;
  public:
  void clear_entity_type_batch_uri();
  const std::string& entity_type_batch_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_type_batch_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_type_batch_uri();
  PROTOBUF_NODISCARD std::string* release_entity_type_batch_uri();
  void set_allocated_entity_type_batch_uri(std::string* entity_type_batch_uri);
  private:
  const std::string& _internal_entity_type_batch_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_type_batch_uri(const std::string& value);
  std::string* _internal_mutable_entity_type_batch_uri();
  public:

  // .google.cloud.dialogflow.v2.EntityTypeBatch entity_type_batch_inline = 3;
  bool has_entity_type_batch_inline() const;
  private:
  bool _internal_has_entity_type_batch_inline() const;
  public:
  void clear_entity_type_batch_inline();
  const ::google::cloud::dialogflow::v2::EntityTypeBatch& entity_type_batch_inline() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::EntityTypeBatch* release_entity_type_batch_inline();
  ::google::cloud::dialogflow::v2::EntityTypeBatch* mutable_entity_type_batch_inline();
  void set_allocated_entity_type_batch_inline(::google::cloud::dialogflow::v2::EntityTypeBatch* entity_type_batch_inline);
  private:
  const ::google::cloud::dialogflow::v2::EntityTypeBatch& _internal_entity_type_batch_inline() const;
  ::google::cloud::dialogflow::v2::EntityTypeBatch* _internal_mutable_entity_type_batch_inline();
  public:
  void unsafe_arena_set_allocated_entity_type_batch_inline(
      ::google::cloud::dialogflow::v2::EntityTypeBatch* entity_type_batch_inline);
  ::google::cloud::dialogflow::v2::EntityTypeBatch* unsafe_arena_release_entity_type_batch_inline();

  void clear_entity_type_batch();
  EntityTypeBatchCase entity_type_batch_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest)
 private:
  class _Internal;
  void set_has_entity_type_batch_uri();
  void set_has_entity_type_batch_inline();

  inline bool has_entity_type_batch() const;
  inline void clear_has_entity_type_batch();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    union EntityTypeBatchUnion {
      constexpr EntityTypeBatchUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_type_batch_uri_;
      ::google::cloud::dialogflow::v2::EntityTypeBatch* entity_type_batch_inline_;
    } entity_type_batch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateEntityTypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse) */ {
 public:
  inline BatchUpdateEntityTypesResponse() : BatchUpdateEntityTypesResponse(nullptr) {}
  ~BatchUpdateEntityTypesResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateEntityTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateEntityTypesResponse(const BatchUpdateEntityTypesResponse& from);
  BatchUpdateEntityTypesResponse(BatchUpdateEntityTypesResponse&& from) noexcept
    : BatchUpdateEntityTypesResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateEntityTypesResponse& operator=(const BatchUpdateEntityTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateEntityTypesResponse& operator=(BatchUpdateEntityTypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateEntityTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateEntityTypesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateEntityTypesResponse*>(
               &_BatchUpdateEntityTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BatchUpdateEntityTypesResponse& a, BatchUpdateEntityTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateEntityTypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateEntityTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateEntityTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateEntityTypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateEntityTypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateEntityTypesResponse& from) {
    BatchUpdateEntityTypesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateEntityTypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse";
  }
  protected:
  explicit BatchUpdateEntityTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypesFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
  int entity_types_size() const;
  private:
  int _internal_entity_types_size() const;
  public:
  void clear_entity_types();
  ::google::cloud::dialogflow::v2::EntityType* mutable_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
      mutable_entity_types();
  private:
  const ::google::cloud::dialogflow::v2::EntityType& _internal_entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* _internal_add_entity_types();
  public:
  const ::google::cloud::dialogflow::v2::EntityType& entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* add_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
      entity_types() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType > entity_types_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchDeleteEntityTypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest) */ {
 public:
  inline BatchDeleteEntityTypesRequest() : BatchDeleteEntityTypesRequest(nullptr) {}
  ~BatchDeleteEntityTypesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchDeleteEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeleteEntityTypesRequest(const BatchDeleteEntityTypesRequest& from);
  BatchDeleteEntityTypesRequest(BatchDeleteEntityTypesRequest&& from) noexcept
    : BatchDeleteEntityTypesRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeleteEntityTypesRequest& operator=(const BatchDeleteEntityTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeleteEntityTypesRequest& operator=(BatchDeleteEntityTypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeleteEntityTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeleteEntityTypesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeleteEntityTypesRequest*>(
               &_BatchDeleteEntityTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BatchDeleteEntityTypesRequest& a, BatchDeleteEntityTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeleteEntityTypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeleteEntityTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeleteEntityTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeleteEntityTypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchDeleteEntityTypesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchDeleteEntityTypesRequest& from) {
    BatchDeleteEntityTypesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchDeleteEntityTypesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest";
  }
  protected:
  explicit BatchDeleteEntityTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypeNamesFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated string entity_type_names = 2 [(.google.api.field_behavior) = REQUIRED];
  int entity_type_names_size() const;
  private:
  int _internal_entity_type_names_size() const;
  public:
  void clear_entity_type_names();
  const std::string& entity_type_names(int index) const;
  std::string* mutable_entity_type_names(int index);
  void set_entity_type_names(int index, const std::string& value);
  void set_entity_type_names(int index, std::string&& value);
  void set_entity_type_names(int index, const char* value);
  void set_entity_type_names(int index, const char* value, size_t size);
  std::string* add_entity_type_names();
  void add_entity_type_names(const std::string& value);
  void add_entity_type_names(std::string&& value);
  void add_entity_type_names(const char* value);
  void add_entity_type_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entity_type_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entity_type_names();
  private:
  const std::string& _internal_entity_type_names(int index) const;
  std::string* _internal_add_entity_type_names();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entity_type_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchCreateEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest) */ {
 public:
  inline BatchCreateEntitiesRequest() : BatchCreateEntitiesRequest(nullptr) {}
  ~BatchCreateEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchCreateEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCreateEntitiesRequest(const BatchCreateEntitiesRequest& from);
  BatchCreateEntitiesRequest(BatchCreateEntitiesRequest&& from) noexcept
    : BatchCreateEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline BatchCreateEntitiesRequest& operator=(const BatchCreateEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCreateEntitiesRequest& operator=(BatchCreateEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCreateEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCreateEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchCreateEntitiesRequest*>(
               &_BatchCreateEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BatchCreateEntitiesRequest& a, BatchCreateEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCreateEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCreateEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCreateEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCreateEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCreateEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCreateEntitiesRequest& from) {
    BatchCreateEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchCreateEntitiesRequest";
  }
  protected:
  explicit BatchCreateEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 2 [(.google.api.field_behavior) = REQUIRED];
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::google::cloud::dialogflow::v2::EntityType_Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
      mutable_entities();
  private:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& _internal_entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* _internal_add_entities();
  public:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
      entities() const;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity > entities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest) */ {
 public:
  inline BatchUpdateEntitiesRequest() : BatchUpdateEntitiesRequest(nullptr) {}
  ~BatchUpdateEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateEntitiesRequest(const BatchUpdateEntitiesRequest& from);
  BatchUpdateEntitiesRequest(BatchUpdateEntitiesRequest&& from) noexcept
    : BatchUpdateEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateEntitiesRequest& operator=(const BatchUpdateEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateEntitiesRequest& operator=(BatchUpdateEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateEntitiesRequest*>(
               &_BatchUpdateEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BatchUpdateEntitiesRequest& a, BatchUpdateEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateEntitiesRequest& from) {
    BatchUpdateEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest";
  }
  protected:
  explicit BatchUpdateEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
    kUpdateMaskFieldNumber = 4,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 2 [(.google.api.field_behavior) = REQUIRED];
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::google::cloud::dialogflow::v2::EntityType_Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
      mutable_entities();
  private:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& _internal_entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* _internal_add_entities();
  public:
  const ::google::cloud::dialogflow::v2::EntityType_Entity& entities(int index) const;
  ::google::cloud::dialogflow::v2::EntityType_Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
      entities() const;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.FieldMask update_mask = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity > entities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class BatchDeleteEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest) */ {
 public:
  inline BatchDeleteEntitiesRequest() : BatchDeleteEntitiesRequest(nullptr) {}
  ~BatchDeleteEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchDeleteEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeleteEntitiesRequest(const BatchDeleteEntitiesRequest& from);
  BatchDeleteEntitiesRequest(BatchDeleteEntitiesRequest&& from) noexcept
    : BatchDeleteEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeleteEntitiesRequest& operator=(const BatchDeleteEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeleteEntitiesRequest& operator=(BatchDeleteEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeleteEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeleteEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeleteEntitiesRequest*>(
               &_BatchDeleteEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BatchDeleteEntitiesRequest& a, BatchDeleteEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeleteEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeleteEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeleteEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeleteEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchDeleteEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchDeleteEntitiesRequest& from) {
    BatchDeleteEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchDeleteEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest";
  }
  protected:
  explicit BatchDeleteEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityValuesFieldNumber = 2,
    kParentFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
  };
  // repeated string entity_values = 2 [(.google.api.field_behavior) = REQUIRED];
  int entity_values_size() const;
  private:
  int _internal_entity_values_size() const;
  public:
  void clear_entity_values();
  const std::string& entity_values(int index) const;
  std::string* mutable_entity_values(int index);
  void set_entity_values(int index, const std::string& value);
  void set_entity_values(int index, std::string&& value);
  void set_entity_values(int index, const char* value);
  void set_entity_values(int index, const char* value, size_t size);
  std::string* add_entity_values();
  void add_entity_values(const std::string& value);
  void add_entity_values(std::string&& value);
  void add_entity_values(const char* value);
  void add_entity_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entity_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entity_values();
  private:
  const std::string& _internal_entity_values(int index) const;
  std::string* _internal_add_entity_values();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entity_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// -------------------------------------------------------------------

class EntityTypeBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EntityTypeBatch) */ {
 public:
  inline EntityTypeBatch() : EntityTypeBatch(nullptr) {}
  ~EntityTypeBatch() override;
  explicit PROTOBUF_CONSTEXPR EntityTypeBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityTypeBatch(const EntityTypeBatch& from);
  EntityTypeBatch(EntityTypeBatch&& from) noexcept
    : EntityTypeBatch() {
    *this = ::std::move(from);
  }

  inline EntityTypeBatch& operator=(const EntityTypeBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityTypeBatch& operator=(EntityTypeBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityTypeBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityTypeBatch* internal_default_instance() {
    return reinterpret_cast<const EntityTypeBatch*>(
               &_EntityTypeBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EntityTypeBatch& a, EntityTypeBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityTypeBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityTypeBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityTypeBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityTypeBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityTypeBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityTypeBatch& from) {
    EntityTypeBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityTypeBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EntityTypeBatch";
  }
  protected:
  explicit EntityTypeBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypesFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
  int entity_types_size() const;
  private:
  int _internal_entity_types_size() const;
  public:
  void clear_entity_types();
  ::google::cloud::dialogflow::v2::EntityType* mutable_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
      mutable_entity_types();
  private:
  const ::google::cloud::dialogflow::v2::EntityType& _internal_entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* _internal_add_entity_types();
  public:
  const ::google::cloud::dialogflow::v2::EntityType& entity_types(int index) const;
  ::google::cloud::dialogflow::v2::EntityType* add_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
      entity_types() const;

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EntityTypeBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType > entity_types_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityType_Entity

// string value = 1 [(.google.api.field_behavior) = REQUIRED];
inline void EntityType_Entity::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& EntityType_Entity::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.Entity.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityType_Entity::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.Entity.value)
}
inline std::string* EntityType_Entity::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityType.Entity.value)
  return _s;
}
inline const std::string& EntityType_Entity::_internal_value() const {
  return _impl_.value_.Get();
}
inline void EntityType_Entity::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityType_Entity::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityType_Entity::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EntityType.Entity.value)
  return _impl_.value_.Release();
}
inline void EntityType_Entity::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EntityType.Entity.value)
}

// repeated string synonyms = 2 [(.google.api.field_behavior) = REQUIRED];
inline int EntityType_Entity::_internal_synonyms_size() const {
  return _impl_.synonyms_.size();
}
inline int EntityType_Entity::synonyms_size() const {
  return _internal_synonyms_size();
}
inline void EntityType_Entity::clear_synonyms() {
  _impl_.synonyms_.Clear();
}
inline std::string* EntityType_Entity::add_synonyms() {
  std::string* _s = _internal_add_synonyms();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
  return _s;
}
inline const std::string& EntityType_Entity::_internal_synonyms(int index) const {
  return _impl_.synonyms_.Get(index);
}
inline const std::string& EntityType_Entity::synonyms(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
  return _internal_synonyms(index);
}
inline std::string* EntityType_Entity::mutable_synonyms(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
  return _impl_.synonyms_.Mutable(index);
}
inline void EntityType_Entity::set_synonyms(int index, const std::string& value) {
  _impl_.synonyms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::set_synonyms(int index, std::string&& value) {
  _impl_.synonyms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::set_synonyms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.synonyms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::set_synonyms(int index, const char* value, size_t size) {
  _impl_.synonyms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline std::string* EntityType_Entity::_internal_add_synonyms() {
  return _impl_.synonyms_.Add();
}
inline void EntityType_Entity::add_synonyms(const std::string& value) {
  _impl_.synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::add_synonyms(std::string&& value) {
  _impl_.synonyms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::add_synonyms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline void EntityType_Entity::add_synonyms(const char* value, size_t size) {
  _impl_.synonyms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EntityType_Entity::synonyms() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
  return _impl_.synonyms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EntityType_Entity::mutable_synonyms() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.EntityType.Entity.synonyms)
  return &_impl_.synonyms_;
}

// -------------------------------------------------------------------

// EntityType

// string name = 1;
inline void EntityType::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EntityType::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityType::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.name)
}
inline std::string* EntityType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityType.name)
  return _s;
}
inline const std::string& EntityType::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EntityType::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityType::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityType::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EntityType.name)
  return _impl_.name_.Release();
}
inline void EntityType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EntityType.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void EntityType::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& EntityType::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityType::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.display_name)
}
inline std::string* EntityType::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityType.display_name)
  return _s;
}
inline const std::string& EntityType::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void EntityType::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityType::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityType::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EntityType.display_name)
  return _impl_.display_name_.Release();
}
inline void EntityType::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EntityType.display_name)
}

// .google.cloud.dialogflow.v2.EntityType.Kind kind = 3 [(.google.api.field_behavior) = REQUIRED];
inline void EntityType::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::google::cloud::dialogflow::v2::EntityType_Kind EntityType::_internal_kind() const {
  return static_cast< ::google::cloud::dialogflow::v2::EntityType_Kind >(_impl_.kind_);
}
inline ::google::cloud::dialogflow::v2::EntityType_Kind EntityType::kind() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.kind)
  return _internal_kind();
}
inline void EntityType::_internal_set_kind(::google::cloud::dialogflow::v2::EntityType_Kind value) {
  
  _impl_.kind_ = value;
}
inline void EntityType::set_kind(::google::cloud::dialogflow::v2::EntityType_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.kind)
}

// .google.cloud.dialogflow.v2.EntityType.AutoExpansionMode auto_expansion_mode = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void EntityType::clear_auto_expansion_mode() {
  _impl_.auto_expansion_mode_ = 0;
}
inline ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode EntityType::_internal_auto_expansion_mode() const {
  return static_cast< ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode >(_impl_.auto_expansion_mode_);
}
inline ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode EntityType::auto_expansion_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.auto_expansion_mode)
  return _internal_auto_expansion_mode();
}
inline void EntityType::_internal_set_auto_expansion_mode(::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode value) {
  
  _impl_.auto_expansion_mode_ = value;
}
inline void EntityType::set_auto_expansion_mode(::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode value) {
  _internal_set_auto_expansion_mode(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.auto_expansion_mode)
}

// repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 6 [(.google.api.field_behavior) = OPTIONAL];
inline int EntityType::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int EntityType::entities_size() const {
  return _internal_entities_size();
}
inline void EntityType::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* EntityType::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityType.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
EntityType::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.EntityType.entities)
  return &_impl_.entities_;
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& EntityType::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& EntityType::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.entities)
  return _internal_entities(index);
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* EntityType::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* EntityType::add_entities() {
  ::google::cloud::dialogflow::v2::EntityType_Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.EntityType.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
EntityType::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.EntityType.entities)
  return _impl_.entities_;
}

// bool enable_fuzzy_extraction = 7 [(.google.api.field_behavior) = OPTIONAL];
inline void EntityType::clear_enable_fuzzy_extraction() {
  _impl_.enable_fuzzy_extraction_ = false;
}
inline bool EntityType::_internal_enable_fuzzy_extraction() const {
  return _impl_.enable_fuzzy_extraction_;
}
inline bool EntityType::enable_fuzzy_extraction() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityType.enable_fuzzy_extraction)
  return _internal_enable_fuzzy_extraction();
}
inline void EntityType::_internal_set_enable_fuzzy_extraction(bool value) {
  
  _impl_.enable_fuzzy_extraction_ = value;
}
inline void EntityType::set_enable_fuzzy_extraction(bool value) {
  _internal_set_enable_fuzzy_extraction(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EntityType.enable_fuzzy_extraction)
}

// -------------------------------------------------------------------

// ListEntityTypesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListEntityTypesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListEntityTypesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEntityTypesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEntityTypesRequest.parent)
}
inline std::string* ListEntityTypesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEntityTypesRequest.parent)
  return _s;
}
inline const std::string& ListEntityTypesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListEntityTypesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEntityTypesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListEntityTypesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEntityTypesRequest.parent)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListEntityTypesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& ListEntityTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEntityTypesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEntityTypesRequest.language_code)
}
inline std::string* ListEntityTypesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEntityTypesRequest.language_code)
  return _s;
}
inline const std::string& ListEntityTypesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void ListEntityTypesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEntityTypesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void ListEntityTypesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEntityTypesRequest.language_code)
}

// int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListEntityTypesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListEntityTypesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListEntityTypesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_size)
  return _internal_page_size();
}
inline void ListEntityTypesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListEntityTypesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_size)
}

// string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListEntityTypesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListEntityTypesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEntityTypesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_token)
}
inline std::string* ListEntityTypesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_token)
  return _s;
}
inline const std::string& ListEntityTypesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListEntityTypesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEntityTypesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListEntityTypesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEntityTypesRequest.page_token)
}

// -------------------------------------------------------------------

// ListEntityTypesResponse

// repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
inline int ListEntityTypesResponse::_internal_entity_types_size() const {
  return _impl_.entity_types_.size();
}
inline int ListEntityTypesResponse::entity_types_size() const {
  return _internal_entity_types_size();
}
inline void ListEntityTypesResponse::clear_entity_types() {
  _impl_.entity_types_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType* ListEntityTypesResponse::mutable_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEntityTypesResponse.entity_types)
  return _impl_.entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
ListEntityTypesResponse::mutable_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListEntityTypesResponse.entity_types)
  return &_impl_.entity_types_;
}
inline const ::google::cloud::dialogflow::v2::EntityType& ListEntityTypesResponse::_internal_entity_types(int index) const {
  return _impl_.entity_types_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType& ListEntityTypesResponse::entity_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesResponse.entity_types)
  return _internal_entity_types(index);
}
inline ::google::cloud::dialogflow::v2::EntityType* ListEntityTypesResponse::_internal_add_entity_types() {
  return _impl_.entity_types_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType* ListEntityTypesResponse::add_entity_types() {
  ::google::cloud::dialogflow::v2::EntityType* _add = _internal_add_entity_types();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListEntityTypesResponse.entity_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
ListEntityTypesResponse::entity_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListEntityTypesResponse.entity_types)
  return _impl_.entity_types_;
}

// string next_page_token = 2;
inline void ListEntityTypesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListEntityTypesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListEntityTypesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEntityTypesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListEntityTypesResponse.next_page_token)
}
inline std::string* ListEntityTypesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListEntityTypesResponse.next_page_token)
  return _s;
}
inline const std::string& ListEntityTypesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListEntityTypesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListEntityTypesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListEntityTypesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListEntityTypesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListEntityTypesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListEntityTypesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetEntityTypeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetEntityTypeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetEntityTypeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEntityTypeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityTypeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEntityTypeRequest.name)
}
inline std::string* GetEntityTypeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetEntityTypeRequest.name)
  return _s;
}
inline const std::string& GetEntityTypeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetEntityTypeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityTypeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityTypeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetEntityTypeRequest.name)
  return _impl_.name_.Release();
}
inline void GetEntityTypeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetEntityTypeRequest.name)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void GetEntityTypeRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& GetEntityTypeRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetEntityTypeRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityTypeRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetEntityTypeRequest.language_code)
}
inline std::string* GetEntityTypeRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetEntityTypeRequest.language_code)
  return _s;
}
inline const std::string& GetEntityTypeRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void GetEntityTypeRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityTypeRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityTypeRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetEntityTypeRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void GetEntityTypeRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetEntityTypeRequest.language_code)
}

// -------------------------------------------------------------------

// CreateEntityTypeRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateEntityTypeRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateEntityTypeRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEntityTypeRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEntityTypeRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateEntityTypeRequest.parent)
}
inline std::string* CreateEntityTypeRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEntityTypeRequest.parent)
  return _s;
}
inline const std::string& CreateEntityTypeRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateEntityTypeRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateEntityTypeRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateEntityTypeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEntityTypeRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateEntityTypeRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEntityTypeRequest.parent)
}

// .google.cloud.dialogflow.v2.EntityType entity_type = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateEntityTypeRequest::_internal_has_entity_type() const {
  return this != internal_default_instance() && _impl_.entity_type_ != nullptr;
}
inline bool CreateEntityTypeRequest::has_entity_type() const {
  return _internal_has_entity_type();
}
inline void CreateEntityTypeRequest::clear_entity_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_type_ != nullptr) {
    delete _impl_.entity_type_;
  }
  _impl_.entity_type_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::EntityType& CreateEntityTypeRequest::_internal_entity_type() const {
  const ::google::cloud::dialogflow::v2::EntityType* p = _impl_.entity_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::EntityType&>(
      ::google::cloud::dialogflow::v2::_EntityType_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::EntityType& CreateEntityTypeRequest::entity_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEntityTypeRequest.entity_type)
  return _internal_entity_type();
}
inline void CreateEntityTypeRequest::unsafe_arena_set_allocated_entity_type(
    ::google::cloud::dialogflow::v2::EntityType* entity_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_type_);
  }
  _impl_.entity_type_ = entity_type;
  if (entity_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.CreateEntityTypeRequest.entity_type)
}
inline ::google::cloud::dialogflow::v2::EntityType* CreateEntityTypeRequest::release_entity_type() {
  
  ::google::cloud::dialogflow::v2::EntityType* temp = _impl_.entity_type_;
  _impl_.entity_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::EntityType* CreateEntityTypeRequest::unsafe_arena_release_entity_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEntityTypeRequest.entity_type)
  
  ::google::cloud::dialogflow::v2::EntityType* temp = _impl_.entity_type_;
  _impl_.entity_type_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::EntityType* CreateEntityTypeRequest::_internal_mutable_entity_type() {
  
  if (_impl_.entity_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::EntityType>(GetArenaForAllocation());
    _impl_.entity_type_ = p;
  }
  return _impl_.entity_type_;
}
inline ::google::cloud::dialogflow::v2::EntityType* CreateEntityTypeRequest::mutable_entity_type() {
  ::google::cloud::dialogflow::v2::EntityType* _msg = _internal_mutable_entity_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEntityTypeRequest.entity_type)
  return _msg;
}
inline void CreateEntityTypeRequest::set_allocated_entity_type(::google::cloud::dialogflow::v2::EntityType* entity_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_type_;
  }
  if (entity_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity_type);
    if (message_arena != submessage_arena) {
      entity_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_type_ = entity_type;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEntityTypeRequest.entity_type)
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void CreateEntityTypeRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& CreateEntityTypeRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.CreateEntityTypeRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEntityTypeRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.CreateEntityTypeRequest.language_code)
}
inline std::string* CreateEntityTypeRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.CreateEntityTypeRequest.language_code)
  return _s;
}
inline const std::string& CreateEntityTypeRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void CreateEntityTypeRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateEntityTypeRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateEntityTypeRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.CreateEntityTypeRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void CreateEntityTypeRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.CreateEntityTypeRequest.language_code)
}

// -------------------------------------------------------------------

// UpdateEntityTypeRequest

// .google.cloud.dialogflow.v2.EntityType entity_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateEntityTypeRequest::_internal_has_entity_type() const {
  return this != internal_default_instance() && _impl_.entity_type_ != nullptr;
}
inline bool UpdateEntityTypeRequest::has_entity_type() const {
  return _internal_has_entity_type();
}
inline void UpdateEntityTypeRequest::clear_entity_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_type_ != nullptr) {
    delete _impl_.entity_type_;
  }
  _impl_.entity_type_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::EntityType& UpdateEntityTypeRequest::_internal_entity_type() const {
  const ::google::cloud::dialogflow::v2::EntityType* p = _impl_.entity_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::EntityType&>(
      ::google::cloud::dialogflow::v2::_EntityType_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::EntityType& UpdateEntityTypeRequest::entity_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.entity_type)
  return _internal_entity_type();
}
inline void UpdateEntityTypeRequest::unsafe_arena_set_allocated_entity_type(
    ::google::cloud::dialogflow::v2::EntityType* entity_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_type_);
  }
  _impl_.entity_type_ = entity_type;
  if (entity_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.entity_type)
}
inline ::google::cloud::dialogflow::v2::EntityType* UpdateEntityTypeRequest::release_entity_type() {
  
  ::google::cloud::dialogflow::v2::EntityType* temp = _impl_.entity_type_;
  _impl_.entity_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::EntityType* UpdateEntityTypeRequest::unsafe_arena_release_entity_type() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.entity_type)
  
  ::google::cloud::dialogflow::v2::EntityType* temp = _impl_.entity_type_;
  _impl_.entity_type_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::EntityType* UpdateEntityTypeRequest::_internal_mutable_entity_type() {
  
  if (_impl_.entity_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::EntityType>(GetArenaForAllocation());
    _impl_.entity_type_ = p;
  }
  return _impl_.entity_type_;
}
inline ::google::cloud::dialogflow::v2::EntityType* UpdateEntityTypeRequest::mutable_entity_type() {
  ::google::cloud::dialogflow::v2::EntityType* _msg = _internal_mutable_entity_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.entity_type)
  return _msg;
}
inline void UpdateEntityTypeRequest::set_allocated_entity_type(::google::cloud::dialogflow::v2::EntityType* entity_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_type_;
  }
  if (entity_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity_type);
    if (message_arena != submessage_arena) {
      entity_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_type_ = entity_type;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.entity_type)
}

// string language_code = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void UpdateEntityTypeRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& UpdateEntityTypeRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateEntityTypeRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.language_code)
}
inline std::string* UpdateEntityTypeRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.language_code)
  return _s;
}
inline const std::string& UpdateEntityTypeRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void UpdateEntityTypeRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateEntityTypeRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateEntityTypeRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void UpdateEntityTypeRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.language_code)
}

// .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool UpdateEntityTypeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateEntityTypeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEntityTypeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEntityTypeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateEntityTypeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEntityTypeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEntityTypeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEntityTypeRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEntityTypeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.update_mask)
  return _msg;
}
inline void UpdateEntityTypeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateEntityTypeRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteEntityTypeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteEntityTypeRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteEntityTypeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DeleteEntityTypeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteEntityTypeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DeleteEntityTypeRequest.name)
}
inline std::string* DeleteEntityTypeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DeleteEntityTypeRequest.name)
  return _s;
}
inline const std::string& DeleteEntityTypeRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteEntityTypeRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteEntityTypeRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteEntityTypeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DeleteEntityTypeRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteEntityTypeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DeleteEntityTypeRequest.name)
}

// -------------------------------------------------------------------

// BatchUpdateEntityTypesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchUpdateEntityTypesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchUpdateEntityTypesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateEntityTypesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.parent)
}
inline std::string* BatchUpdateEntityTypesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.parent)
  return _s;
}
inline const std::string& BatchUpdateEntityTypesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchUpdateEntityTypesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchUpdateEntityTypesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.parent)
}

// string entity_type_batch_uri = 2;
inline bool BatchUpdateEntityTypesRequest::_internal_has_entity_type_batch_uri() const {
  return entity_type_batch_case() == kEntityTypeBatchUri;
}
inline bool BatchUpdateEntityTypesRequest::has_entity_type_batch_uri() const {
  return _internal_has_entity_type_batch_uri();
}
inline void BatchUpdateEntityTypesRequest::set_has_entity_type_batch_uri() {
  _impl_._oneof_case_[0] = kEntityTypeBatchUri;
}
inline void BatchUpdateEntityTypesRequest::clear_entity_type_batch_uri() {
  if (_internal_has_entity_type_batch_uri()) {
    _impl_.entity_type_batch_.entity_type_batch_uri_.Destroy();
    clear_has_entity_type_batch();
  }
}
inline const std::string& BatchUpdateEntityTypesRequest::entity_type_batch_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_uri)
  return _internal_entity_type_batch_uri();
}
template <typename ArgT0, typename... ArgT>
inline void BatchUpdateEntityTypesRequest::set_entity_type_batch_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_entity_type_batch_uri()) {
    clear_entity_type_batch();
    set_has_entity_type_batch_uri();
    _impl_.entity_type_batch_.entity_type_batch_uri_.InitDefault();
  }
  _impl_.entity_type_batch_.entity_type_batch_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_uri)
}
inline std::string* BatchUpdateEntityTypesRequest::mutable_entity_type_batch_uri() {
  std::string* _s = _internal_mutable_entity_type_batch_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_uri)
  return _s;
}
inline const std::string& BatchUpdateEntityTypesRequest::_internal_entity_type_batch_uri() const {
  if (_internal_has_entity_type_batch_uri()) {
    return _impl_.entity_type_batch_.entity_type_batch_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BatchUpdateEntityTypesRequest::_internal_set_entity_type_batch_uri(const std::string& value) {
  if (!_internal_has_entity_type_batch_uri()) {
    clear_entity_type_batch();
    set_has_entity_type_batch_uri();
    _impl_.entity_type_batch_.entity_type_batch_uri_.InitDefault();
  }
  _impl_.entity_type_batch_.entity_type_batch_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::_internal_mutable_entity_type_batch_uri() {
  if (!_internal_has_entity_type_batch_uri()) {
    clear_entity_type_batch();
    set_has_entity_type_batch_uri();
    _impl_.entity_type_batch_.entity_type_batch_uri_.InitDefault();
  }
  return _impl_.entity_type_batch_.entity_type_batch_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::release_entity_type_batch_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_uri)
  if (_internal_has_entity_type_batch_uri()) {
    clear_has_entity_type_batch();
    return _impl_.entity_type_batch_.entity_type_batch_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void BatchUpdateEntityTypesRequest::set_allocated_entity_type_batch_uri(std::string* entity_type_batch_uri) {
  if (has_entity_type_batch()) {
    clear_entity_type_batch();
  }
  if (entity_type_batch_uri != nullptr) {
    set_has_entity_type_batch_uri();
    _impl_.entity_type_batch_.entity_type_batch_uri_.InitAllocated(entity_type_batch_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_uri)
}

// .google.cloud.dialogflow.v2.EntityTypeBatch entity_type_batch_inline = 3;
inline bool BatchUpdateEntityTypesRequest::_internal_has_entity_type_batch_inline() const {
  return entity_type_batch_case() == kEntityTypeBatchInline;
}
inline bool BatchUpdateEntityTypesRequest::has_entity_type_batch_inline() const {
  return _internal_has_entity_type_batch_inline();
}
inline void BatchUpdateEntityTypesRequest::set_has_entity_type_batch_inline() {
  _impl_._oneof_case_[0] = kEntityTypeBatchInline;
}
inline void BatchUpdateEntityTypesRequest::clear_entity_type_batch_inline() {
  if (_internal_has_entity_type_batch_inline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.entity_type_batch_.entity_type_batch_inline_;
    }
    clear_has_entity_type_batch();
  }
}
inline ::google::cloud::dialogflow::v2::EntityTypeBatch* BatchUpdateEntityTypesRequest::release_entity_type_batch_inline() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_inline)
  if (_internal_has_entity_type_batch_inline()) {
    clear_has_entity_type_batch();
    ::google::cloud::dialogflow::v2::EntityTypeBatch* temp = _impl_.entity_type_batch_.entity_type_batch_inline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_type_batch_.entity_type_batch_inline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::EntityTypeBatch& BatchUpdateEntityTypesRequest::_internal_entity_type_batch_inline() const {
  return _internal_has_entity_type_batch_inline()
      ? *_impl_.entity_type_batch_.entity_type_batch_inline_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::EntityTypeBatch&>(::google::cloud::dialogflow::v2::_EntityTypeBatch_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::EntityTypeBatch& BatchUpdateEntityTypesRequest::entity_type_batch_inline() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_inline)
  return _internal_entity_type_batch_inline();
}
inline ::google::cloud::dialogflow::v2::EntityTypeBatch* BatchUpdateEntityTypesRequest::unsafe_arena_release_entity_type_batch_inline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_inline)
  if (_internal_has_entity_type_batch_inline()) {
    clear_has_entity_type_batch();
    ::google::cloud::dialogflow::v2::EntityTypeBatch* temp = _impl_.entity_type_batch_.entity_type_batch_inline_;
    _impl_.entity_type_batch_.entity_type_batch_inline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchUpdateEntityTypesRequest::unsafe_arena_set_allocated_entity_type_batch_inline(::google::cloud::dialogflow::v2::EntityTypeBatch* entity_type_batch_inline) {
  clear_entity_type_batch();
  if (entity_type_batch_inline) {
    set_has_entity_type_batch_inline();
    _impl_.entity_type_batch_.entity_type_batch_inline_ = entity_type_batch_inline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_inline)
}
inline ::google::cloud::dialogflow::v2::EntityTypeBatch* BatchUpdateEntityTypesRequest::_internal_mutable_entity_type_batch_inline() {
  if (!_internal_has_entity_type_batch_inline()) {
    clear_entity_type_batch();
    set_has_entity_type_batch_inline();
    _impl_.entity_type_batch_.entity_type_batch_inline_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::EntityTypeBatch >(GetArenaForAllocation());
  }
  return _impl_.entity_type_batch_.entity_type_batch_inline_;
}
inline ::google::cloud::dialogflow::v2::EntityTypeBatch* BatchUpdateEntityTypesRequest::mutable_entity_type_batch_inline() {
  ::google::cloud::dialogflow::v2::EntityTypeBatch* _msg = _internal_mutable_entity_type_batch_inline();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.entity_type_batch_inline)
  return _msg;
}

// string language_code = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchUpdateEntityTypesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& BatchUpdateEntityTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateEntityTypesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.language_code)
}
inline std::string* BatchUpdateEntityTypesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.language_code)
  return _s;
}
inline const std::string& BatchUpdateEntityTypesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void BatchUpdateEntityTypesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateEntityTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void BatchUpdateEntityTypesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.language_code)
}

// .google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = OPTIONAL];
inline bool BatchUpdateEntityTypesRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool BatchUpdateEntityTypesRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateEntityTypesRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateEntityTypesRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.update_mask)
  return _internal_update_mask();
}
inline void BatchUpdateEntityTypesRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntityTypesRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntityTypesRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntityTypesRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntityTypesRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.update_mask)
  return _msg;
}
inline void BatchUpdateEntityTypesRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest.update_mask)
}

inline bool BatchUpdateEntityTypesRequest::has_entity_type_batch() const {
  return entity_type_batch_case() != ENTITY_TYPE_BATCH_NOT_SET;
}
inline void BatchUpdateEntityTypesRequest::clear_has_entity_type_batch() {
  _impl_._oneof_case_[0] = ENTITY_TYPE_BATCH_NOT_SET;
}
inline BatchUpdateEntityTypesRequest::EntityTypeBatchCase BatchUpdateEntityTypesRequest::entity_type_batch_case() const {
  return BatchUpdateEntityTypesRequest::EntityTypeBatchCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchUpdateEntityTypesResponse

// repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
inline int BatchUpdateEntityTypesResponse::_internal_entity_types_size() const {
  return _impl_.entity_types_.size();
}
inline int BatchUpdateEntityTypesResponse::entity_types_size() const {
  return _internal_entity_types_size();
}
inline void BatchUpdateEntityTypesResponse::clear_entity_types() {
  _impl_.entity_types_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType* BatchUpdateEntityTypesResponse::mutable_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse.entity_types)
  return _impl_.entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
BatchUpdateEntityTypesResponse::mutable_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse.entity_types)
  return &_impl_.entity_types_;
}
inline const ::google::cloud::dialogflow::v2::EntityType& BatchUpdateEntityTypesResponse::_internal_entity_types(int index) const {
  return _impl_.entity_types_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType& BatchUpdateEntityTypesResponse::entity_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse.entity_types)
  return _internal_entity_types(index);
}
inline ::google::cloud::dialogflow::v2::EntityType* BatchUpdateEntityTypesResponse::_internal_add_entity_types() {
  return _impl_.entity_types_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType* BatchUpdateEntityTypesResponse::add_entity_types() {
  ::google::cloud::dialogflow::v2::EntityType* _add = _internal_add_entity_types();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse.entity_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
BatchUpdateEntityTypesResponse::entity_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse.entity_types)
  return _impl_.entity_types_;
}

// -------------------------------------------------------------------

// BatchDeleteEntityTypesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchDeleteEntityTypesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchDeleteEntityTypesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchDeleteEntityTypesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.parent)
}
inline std::string* BatchDeleteEntityTypesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.parent)
  return _s;
}
inline const std::string& BatchDeleteEntityTypesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchDeleteEntityTypesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchDeleteEntityTypesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchDeleteEntityTypesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchDeleteEntityTypesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.parent)
}

// repeated string entity_type_names = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchDeleteEntityTypesRequest::_internal_entity_type_names_size() const {
  return _impl_.entity_type_names_.size();
}
inline int BatchDeleteEntityTypesRequest::entity_type_names_size() const {
  return _internal_entity_type_names_size();
}
inline void BatchDeleteEntityTypesRequest::clear_entity_type_names() {
  _impl_.entity_type_names_.Clear();
}
inline std::string* BatchDeleteEntityTypesRequest::add_entity_type_names() {
  std::string* _s = _internal_add_entity_type_names();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
  return _s;
}
inline const std::string& BatchDeleteEntityTypesRequest::_internal_entity_type_names(int index) const {
  return _impl_.entity_type_names_.Get(index);
}
inline const std::string& BatchDeleteEntityTypesRequest::entity_type_names(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
  return _internal_entity_type_names(index);
}
inline std::string* BatchDeleteEntityTypesRequest::mutable_entity_type_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
  return _impl_.entity_type_names_.Mutable(index);
}
inline void BatchDeleteEntityTypesRequest::set_entity_type_names(int index, const std::string& value) {
  _impl_.entity_type_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::set_entity_type_names(int index, std::string&& value) {
  _impl_.entity_type_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::set_entity_type_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entity_type_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::set_entity_type_names(int index, const char* value, size_t size) {
  _impl_.entity_type_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline std::string* BatchDeleteEntityTypesRequest::_internal_add_entity_type_names() {
  return _impl_.entity_type_names_.Add();
}
inline void BatchDeleteEntityTypesRequest::add_entity_type_names(const std::string& value) {
  _impl_.entity_type_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::add_entity_type_names(std::string&& value) {
  _impl_.entity_type_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::add_entity_type_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entity_type_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline void BatchDeleteEntityTypesRequest::add_entity_type_names(const char* value, size_t size) {
  _impl_.entity_type_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchDeleteEntityTypesRequest::entity_type_names() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
  return _impl_.entity_type_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchDeleteEntityTypesRequest::mutable_entity_type_names() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest.entity_type_names)
  return &_impl_.entity_type_names_;
}

// -------------------------------------------------------------------

// BatchCreateEntitiesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchCreateEntitiesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchCreateEntitiesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchCreateEntitiesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.parent)
}
inline std::string* BatchCreateEntitiesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.parent)
  return _s;
}
inline const std::string& BatchCreateEntitiesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchCreateEntitiesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCreateEntitiesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchCreateEntitiesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchCreateEntitiesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.parent)
}

// repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchCreateEntitiesRequest::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int BatchCreateEntitiesRequest::entities_size() const {
  return _internal_entities_size();
}
inline void BatchCreateEntitiesRequest::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchCreateEntitiesRequest::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
BatchCreateEntitiesRequest::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.entities)
  return &_impl_.entities_;
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& BatchCreateEntitiesRequest::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& BatchCreateEntitiesRequest::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.entities)
  return _internal_entities(index);
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchCreateEntitiesRequest::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchCreateEntitiesRequest::add_entities() {
  ::google::cloud::dialogflow::v2::EntityType_Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
BatchCreateEntitiesRequest::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.entities)
  return _impl_.entities_;
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchCreateEntitiesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& BatchCreateEntitiesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchCreateEntitiesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.language_code)
}
inline std::string* BatchCreateEntitiesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.language_code)
  return _s;
}
inline const std::string& BatchCreateEntitiesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void BatchCreateEntitiesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCreateEntitiesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchCreateEntitiesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void BatchCreateEntitiesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchCreateEntitiesRequest.language_code)
}

// -------------------------------------------------------------------

// BatchUpdateEntitiesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchUpdateEntitiesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchUpdateEntitiesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateEntitiesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.parent)
}
inline std::string* BatchUpdateEntitiesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.parent)
  return _s;
}
inline const std::string& BatchUpdateEntitiesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchUpdateEntitiesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateEntitiesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateEntitiesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchUpdateEntitiesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.parent)
}

// repeated .google.cloud.dialogflow.v2.EntityType.Entity entities = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchUpdateEntitiesRequest::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int BatchUpdateEntitiesRequest::entities_size() const {
  return _internal_entities_size();
}
inline void BatchUpdateEntitiesRequest::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchUpdateEntitiesRequest::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >*
BatchUpdateEntitiesRequest::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.entities)
  return &_impl_.entities_;
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& BatchUpdateEntitiesRequest::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType_Entity& BatchUpdateEntitiesRequest::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.entities)
  return _internal_entities(index);
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchUpdateEntitiesRequest::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType_Entity* BatchUpdateEntitiesRequest::add_entities() {
  ::google::cloud::dialogflow::v2::EntityType_Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType_Entity >&
BatchUpdateEntitiesRequest::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.entities)
  return _impl_.entities_;
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchUpdateEntitiesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& BatchUpdateEntitiesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchUpdateEntitiesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.language_code)
}
inline std::string* BatchUpdateEntitiesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.language_code)
  return _s;
}
inline const std::string& BatchUpdateEntitiesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void BatchUpdateEntitiesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateEntitiesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchUpdateEntitiesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void BatchUpdateEntitiesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.language_code)
}

// .google.protobuf.FieldMask update_mask = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool BatchUpdateEntitiesRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool BatchUpdateEntitiesRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateEntitiesRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchUpdateEntitiesRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.update_mask)
  return _internal_update_mask();
}
inline void BatchUpdateEntitiesRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntitiesRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntitiesRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntitiesRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchUpdateEntitiesRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.update_mask)
  return _msg;
}
inline void BatchUpdateEntitiesRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest.update_mask)
}

// -------------------------------------------------------------------

// BatchDeleteEntitiesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchDeleteEntitiesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchDeleteEntitiesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchDeleteEntitiesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.parent)
}
inline std::string* BatchDeleteEntitiesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.parent)
  return _s;
}
inline const std::string& BatchDeleteEntitiesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchDeleteEntitiesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchDeleteEntitiesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchDeleteEntitiesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchDeleteEntitiesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.parent)
}

// repeated string entity_values = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchDeleteEntitiesRequest::_internal_entity_values_size() const {
  return _impl_.entity_values_.size();
}
inline int BatchDeleteEntitiesRequest::entity_values_size() const {
  return _internal_entity_values_size();
}
inline void BatchDeleteEntitiesRequest::clear_entity_values() {
  _impl_.entity_values_.Clear();
}
inline std::string* BatchDeleteEntitiesRequest::add_entity_values() {
  std::string* _s = _internal_add_entity_values();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
  return _s;
}
inline const std::string& BatchDeleteEntitiesRequest::_internal_entity_values(int index) const {
  return _impl_.entity_values_.Get(index);
}
inline const std::string& BatchDeleteEntitiesRequest::entity_values(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
  return _internal_entity_values(index);
}
inline std::string* BatchDeleteEntitiesRequest::mutable_entity_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
  return _impl_.entity_values_.Mutable(index);
}
inline void BatchDeleteEntitiesRequest::set_entity_values(int index, const std::string& value) {
  _impl_.entity_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::set_entity_values(int index, std::string&& value) {
  _impl_.entity_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::set_entity_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entity_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::set_entity_values(int index, const char* value, size_t size) {
  _impl_.entity_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline std::string* BatchDeleteEntitiesRequest::_internal_add_entity_values() {
  return _impl_.entity_values_.Add();
}
inline void BatchDeleteEntitiesRequest::add_entity_values(const std::string& value) {
  _impl_.entity_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::add_entity_values(std::string&& value) {
  _impl_.entity_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::add_entity_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entity_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline void BatchDeleteEntitiesRequest::add_entity_values(const char* value, size_t size) {
  _impl_.entity_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchDeleteEntitiesRequest::entity_values() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
  return _impl_.entity_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchDeleteEntitiesRequest::mutable_entity_values() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.entity_values)
  return &_impl_.entity_values_;
}

// string language_code = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void BatchDeleteEntitiesRequest::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& BatchDeleteEntitiesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchDeleteEntitiesRequest::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.language_code)
}
inline std::string* BatchDeleteEntitiesRequest::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.language_code)
  return _s;
}
inline const std::string& BatchDeleteEntitiesRequest::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void BatchDeleteEntitiesRequest::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchDeleteEntitiesRequest::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchDeleteEntitiesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.language_code)
  return _impl_.language_code_.Release();
}
inline void BatchDeleteEntitiesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest.language_code)
}

// -------------------------------------------------------------------

// EntityTypeBatch

// repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;
inline int EntityTypeBatch::_internal_entity_types_size() const {
  return _impl_.entity_types_.size();
}
inline int EntityTypeBatch::entity_types_size() const {
  return _internal_entity_types_size();
}
inline void EntityTypeBatch::clear_entity_types() {
  _impl_.entity_types_.Clear();
}
inline ::google::cloud::dialogflow::v2::EntityType* EntityTypeBatch::mutable_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EntityTypeBatch.entity_types)
  return _impl_.entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >*
EntityTypeBatch::mutable_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.EntityTypeBatch.entity_types)
  return &_impl_.entity_types_;
}
inline const ::google::cloud::dialogflow::v2::EntityType& EntityTypeBatch::_internal_entity_types(int index) const {
  return _impl_.entity_types_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::EntityType& EntityTypeBatch::entity_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EntityTypeBatch.entity_types)
  return _internal_entity_types(index);
}
inline ::google::cloud::dialogflow::v2::EntityType* EntityTypeBatch::_internal_add_entity_types() {
  return _impl_.entity_types_.Add();
}
inline ::google::cloud::dialogflow::v2::EntityType* EntityTypeBatch::add_entity_types() {
  ::google::cloud::dialogflow::v2::EntityType* _add = _internal_add_entity_types();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.EntityTypeBatch.entity_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::EntityType >&
EntityTypeBatch::entity_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.EntityTypeBatch.entity_types)
  return _impl_.entity_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::EntityType_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::EntityType_Kind>() {
  return ::google::cloud::dialogflow::v2::EntityType_Kind_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode>() {
  return ::google::cloud::dialogflow::v2::EntityType_AutoExpansionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fentity_5ftype_2eproto
