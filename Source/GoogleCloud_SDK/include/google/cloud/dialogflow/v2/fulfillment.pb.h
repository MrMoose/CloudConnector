// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/fulfillment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class Fulfillment;
struct FulfillmentDefaultTypeInternal;
extern FulfillmentDefaultTypeInternal _Fulfillment_default_instance_;
class Fulfillment_Feature;
struct Fulfillment_FeatureDefaultTypeInternal;
extern Fulfillment_FeatureDefaultTypeInternal _Fulfillment_Feature_default_instance_;
class Fulfillment_GenericWebService;
struct Fulfillment_GenericWebServiceDefaultTypeInternal;
extern Fulfillment_GenericWebServiceDefaultTypeInternal _Fulfillment_GenericWebService_default_instance_;
class Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse;
struct Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUseDefaultTypeInternal;
extern Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUseDefaultTypeInternal _Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse_default_instance_;
class GetFulfillmentRequest;
struct GetFulfillmentRequestDefaultTypeInternal;
extern GetFulfillmentRequestDefaultTypeInternal _GetFulfillmentRequest_default_instance_;
class UpdateFulfillmentRequest;
struct UpdateFulfillmentRequestDefaultTypeInternal;
extern UpdateFulfillmentRequestDefaultTypeInternal _UpdateFulfillmentRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::Fulfillment* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment>(Arena*);
template<> ::google::cloud::dialogflow::v2::Fulfillment_Feature* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment_Feature>(Arena*);
template<> ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment_GenericWebService>(Arena*);
template<> ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::GetFulfillmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::GetFulfillmentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateFulfillmentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateFulfillmentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum Fulfillment_Feature_Type : int {
  Fulfillment_Feature_Type_TYPE_UNSPECIFIED = 0,
  Fulfillment_Feature_Type_SMALLTALK = 1,
  Fulfillment_Feature_Type_Fulfillment_Feature_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Fulfillment_Feature_Type_Fulfillment_Feature_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Fulfillment_Feature_Type_IsValid(int value);
constexpr Fulfillment_Feature_Type Fulfillment_Feature_Type_Type_MIN = Fulfillment_Feature_Type_TYPE_UNSPECIFIED;
constexpr Fulfillment_Feature_Type Fulfillment_Feature_Type_Type_MAX = Fulfillment_Feature_Type_SMALLTALK;
constexpr int Fulfillment_Feature_Type_Type_ARRAYSIZE = Fulfillment_Feature_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fulfillment_Feature_Type_descriptor();
template<typename T>
inline const std::string& Fulfillment_Feature_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Fulfillment_Feature_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Fulfillment_Feature_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Fulfillment_Feature_Type_descriptor(), enum_t_value);
}
inline bool Fulfillment_Feature_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Fulfillment_Feature_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Fulfillment_Feature_Type>(
    Fulfillment_Feature_Type_descriptor(), name, value);
}
// ===================================================================

class Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse();
  explicit constexpr Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse& other);
  static const Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse*>(&_Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Fulfillment.GenericWebService.RequestHeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.Fulfillment.GenericWebService.RequestHeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto);
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Fulfillment_GenericWebService PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Fulfillment.GenericWebService) */ {
 public:
  inline Fulfillment_GenericWebService() : Fulfillment_GenericWebService(nullptr) {}
  virtual ~Fulfillment_GenericWebService();
  explicit constexpr Fulfillment_GenericWebService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fulfillment_GenericWebService(const Fulfillment_GenericWebService& from);
  Fulfillment_GenericWebService(Fulfillment_GenericWebService&& from) noexcept
    : Fulfillment_GenericWebService() {
    *this = ::std::move(from);
  }

  inline Fulfillment_GenericWebService& operator=(const Fulfillment_GenericWebService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fulfillment_GenericWebService& operator=(Fulfillment_GenericWebService&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fulfillment_GenericWebService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fulfillment_GenericWebService* internal_default_instance() {
    return reinterpret_cast<const Fulfillment_GenericWebService*>(
               &_Fulfillment_GenericWebService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Fulfillment_GenericWebService& a, Fulfillment_GenericWebService& b) {
    a.Swap(&b);
  }
  inline void Swap(Fulfillment_GenericWebService* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fulfillment_GenericWebService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fulfillment_GenericWebService* New() const final {
    return CreateMaybeMessage<Fulfillment_GenericWebService>(nullptr);
  }

  Fulfillment_GenericWebService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fulfillment_GenericWebService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fulfillment_GenericWebService& from);
  void MergeFrom(const Fulfillment_GenericWebService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fulfillment_GenericWebService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Fulfillment.GenericWebService";
  }
  protected:
  explicit Fulfillment_GenericWebService(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 4,
    kUriFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIsCloudFunctionFieldNumber = 5,
  };
  // map<string, string> request_headers = 4 [(.google.api.field_behavior) = OPTIONAL];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_request_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_request_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      request_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_request_headers();

  // string uri = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string username = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool is_cloud_function = 5 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  PROTOBUF_DEPRECATED void clear_is_cloud_function();
  PROTOBUF_DEPRECATED bool is_cloud_function() const;
  PROTOBUF_DEPRECATED void set_is_cloud_function(bool value);
  private:
  bool _internal_is_cloud_function() const;
  void _internal_set_is_cloud_function(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Fulfillment.GenericWebService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Fulfillment_GenericWebService_RequestHeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool is_cloud_function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
};
// -------------------------------------------------------------------

class Fulfillment_Feature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Fulfillment.Feature) */ {
 public:
  inline Fulfillment_Feature() : Fulfillment_Feature(nullptr) {}
  virtual ~Fulfillment_Feature();
  explicit constexpr Fulfillment_Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fulfillment_Feature(const Fulfillment_Feature& from);
  Fulfillment_Feature(Fulfillment_Feature&& from) noexcept
    : Fulfillment_Feature() {
    *this = ::std::move(from);
  }

  inline Fulfillment_Feature& operator=(const Fulfillment_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fulfillment_Feature& operator=(Fulfillment_Feature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fulfillment_Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fulfillment_Feature* internal_default_instance() {
    return reinterpret_cast<const Fulfillment_Feature*>(
               &_Fulfillment_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Fulfillment_Feature& a, Fulfillment_Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Fulfillment_Feature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fulfillment_Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fulfillment_Feature* New() const final {
    return CreateMaybeMessage<Fulfillment_Feature>(nullptr);
  }

  Fulfillment_Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fulfillment_Feature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fulfillment_Feature& from);
  void MergeFrom(const Fulfillment_Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fulfillment_Feature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Fulfillment.Feature";
  }
  protected:
  explicit Fulfillment_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Fulfillment_Feature_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Fulfillment_Feature_Type_TYPE_UNSPECIFIED;
  static constexpr Type SMALLTALK =
    Fulfillment_Feature_Type_SMALLTALK;
  static inline bool Type_IsValid(int value) {
    return Fulfillment_Feature_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Fulfillment_Feature_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Fulfillment_Feature_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Fulfillment_Feature_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Fulfillment_Feature_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Fulfillment_Feature_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Fulfillment_Feature_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .google.cloud.dialogflow.v2.Fulfillment.Feature.Type type = 1;
  void clear_type();
  ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type type() const;
  void set_type(::google::cloud::dialogflow::v2::Fulfillment_Feature_Type value);
  private:
  ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type _internal_type() const;
  void _internal_set_type(::google::cloud::dialogflow::v2::Fulfillment_Feature_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Fulfillment.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
};
// -------------------------------------------------------------------

class Fulfillment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Fulfillment) */ {
 public:
  inline Fulfillment() : Fulfillment(nullptr) {}
  virtual ~Fulfillment();
  explicit constexpr Fulfillment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fulfillment(const Fulfillment& from);
  Fulfillment(Fulfillment&& from) noexcept
    : Fulfillment() {
    *this = ::std::move(from);
  }

  inline Fulfillment& operator=(const Fulfillment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fulfillment& operator=(Fulfillment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fulfillment& default_instance() {
    return *internal_default_instance();
  }
  enum FulfillmentCase {
    kGenericWebService = 3,
    FULFILLMENT_NOT_SET = 0,
  };

  static inline const Fulfillment* internal_default_instance() {
    return reinterpret_cast<const Fulfillment*>(
               &_Fulfillment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Fulfillment& a, Fulfillment& b) {
    a.Swap(&b);
  }
  inline void Swap(Fulfillment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fulfillment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fulfillment* New() const final {
    return CreateMaybeMessage<Fulfillment>(nullptr);
  }

  Fulfillment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fulfillment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fulfillment& from);
  void MergeFrom(const Fulfillment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fulfillment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Fulfillment";
  }
  protected:
  explicit Fulfillment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Fulfillment_GenericWebService GenericWebService;
  typedef Fulfillment_Feature Feature;

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 5,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kEnabledFieldNumber = 4,
    kGenericWebServiceFieldNumber = 3,
  };
  // repeated .google.cloud.dialogflow.v2.Fulfillment.Feature features = 5 [(.google.api.field_behavior) = OPTIONAL];
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::google::cloud::dialogflow::v2::Fulfillment_Feature* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Fulfillment_Feature >*
      mutable_features();
  private:
  const ::google::cloud::dialogflow::v2::Fulfillment_Feature& _internal_features(int index) const;
  ::google::cloud::dialogflow::v2::Fulfillment_Feature* _internal_add_features();
  public:
  const ::google::cloud::dialogflow::v2::Fulfillment_Feature& features(int index) const;
  ::google::cloud::dialogflow::v2::Fulfillment_Feature* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Fulfillment_Feature >&
      features() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // bool enabled = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .google.cloud.dialogflow.v2.Fulfillment.GenericWebService generic_web_service = 3;
  bool has_generic_web_service() const;
  private:
  bool _internal_has_generic_web_service() const;
  public:
  void clear_generic_web_service();
  const ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService& generic_web_service() const;
  ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* release_generic_web_service();
  ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* mutable_generic_web_service();
  void set_allocated_generic_web_service(::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* generic_web_service);
  private:
  const ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService& _internal_generic_web_service() const;
  ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* _internal_mutable_generic_web_service();
  public:
  void unsafe_arena_set_allocated_generic_web_service(
      ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* generic_web_service);
  ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* unsafe_arena_release_generic_web_service();

  void clear_fulfillment();
  FulfillmentCase fulfillment_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Fulfillment)
 private:
  class _Internal;
  void set_has_generic_web_service();

  inline bool has_fulfillment() const;
  inline void clear_has_fulfillment();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Fulfillment_Feature > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  bool enabled_;
  union FulfillmentUnion {
    constexpr FulfillmentUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* generic_web_service_;
  } fulfillment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
};
// -------------------------------------------------------------------

class GetFulfillmentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.GetFulfillmentRequest) */ {
 public:
  inline GetFulfillmentRequest() : GetFulfillmentRequest(nullptr) {}
  virtual ~GetFulfillmentRequest();
  explicit constexpr GetFulfillmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFulfillmentRequest(const GetFulfillmentRequest& from);
  GetFulfillmentRequest(GetFulfillmentRequest&& from) noexcept
    : GetFulfillmentRequest() {
    *this = ::std::move(from);
  }

  inline GetFulfillmentRequest& operator=(const GetFulfillmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFulfillmentRequest& operator=(GetFulfillmentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFulfillmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFulfillmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetFulfillmentRequest*>(
               &_GetFulfillmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFulfillmentRequest& a, GetFulfillmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFulfillmentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFulfillmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFulfillmentRequest* New() const final {
    return CreateMaybeMessage<GetFulfillmentRequest>(nullptr);
  }

  GetFulfillmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFulfillmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFulfillmentRequest& from);
  void MergeFrom(const GetFulfillmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFulfillmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.GetFulfillmentRequest";
  }
  protected:
  explicit GetFulfillmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.GetFulfillmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
};
// -------------------------------------------------------------------

class UpdateFulfillmentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateFulfillmentRequest) */ {
 public:
  inline UpdateFulfillmentRequest() : UpdateFulfillmentRequest(nullptr) {}
  virtual ~UpdateFulfillmentRequest();
  explicit constexpr UpdateFulfillmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateFulfillmentRequest(const UpdateFulfillmentRequest& from);
  UpdateFulfillmentRequest(UpdateFulfillmentRequest&& from) noexcept
    : UpdateFulfillmentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFulfillmentRequest& operator=(const UpdateFulfillmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFulfillmentRequest& operator=(UpdateFulfillmentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFulfillmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateFulfillmentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFulfillmentRequest*>(
               &_UpdateFulfillmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateFulfillmentRequest& a, UpdateFulfillmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFulfillmentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFulfillmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFulfillmentRequest* New() const final {
    return CreateMaybeMessage<UpdateFulfillmentRequest>(nullptr);
  }

  UpdateFulfillmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFulfillmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFulfillmentRequest& from);
  void MergeFrom(const UpdateFulfillmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFulfillmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateFulfillmentRequest";
  }
  protected:
  explicit UpdateFulfillmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFulfillmentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.Fulfillment fulfillment = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_fulfillment() const;
  private:
  bool _internal_has_fulfillment() const;
  public:
  void clear_fulfillment();
  const ::google::cloud::dialogflow::v2::Fulfillment& fulfillment() const;
  ::google::cloud::dialogflow::v2::Fulfillment* release_fulfillment();
  ::google::cloud::dialogflow::v2::Fulfillment* mutable_fulfillment();
  void set_allocated_fulfillment(::google::cloud::dialogflow::v2::Fulfillment* fulfillment);
  private:
  const ::google::cloud::dialogflow::v2::Fulfillment& _internal_fulfillment() const;
  ::google::cloud::dialogflow::v2::Fulfillment* _internal_mutable_fulfillment();
  public:
  void unsafe_arena_set_allocated_fulfillment(
      ::google::cloud::dialogflow::v2::Fulfillment* fulfillment);
  ::google::cloud::dialogflow::v2::Fulfillment* unsafe_arena_release_fulfillment();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateFulfillmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::dialogflow::v2::Fulfillment* fulfillment_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Fulfillment_GenericWebService

// string uri = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Fulfillment_GenericWebService::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Fulfillment_GenericWebService::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
  return _internal_uri();
}
inline void Fulfillment_GenericWebService::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
}
inline std::string* Fulfillment_GenericWebService::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
  return _internal_mutable_uri();
}
inline const std::string& Fulfillment_GenericWebService::_internal_uri() const {
  return uri_.Get();
}
inline void Fulfillment_GenericWebService::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fulfillment_GenericWebService::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
}
inline void Fulfillment_GenericWebService::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
}
inline void Fulfillment_GenericWebService::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
}
inline std::string* Fulfillment_GenericWebService::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fulfillment_GenericWebService::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fulfillment_GenericWebService::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.uri)
}

// string username = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Fulfillment_GenericWebService::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Fulfillment_GenericWebService::username() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
  return _internal_username();
}
inline void Fulfillment_GenericWebService::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
}
inline std::string* Fulfillment_GenericWebService::mutable_username() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
  return _internal_mutable_username();
}
inline const std::string& Fulfillment_GenericWebService::_internal_username() const {
  return username_.Get();
}
inline void Fulfillment_GenericWebService::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fulfillment_GenericWebService::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
}
inline void Fulfillment_GenericWebService::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
}
inline void Fulfillment_GenericWebService::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
}
inline std::string* Fulfillment_GenericWebService::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fulfillment_GenericWebService::release_username() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fulfillment_GenericWebService::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.username)
}

// string password = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void Fulfillment_GenericWebService::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Fulfillment_GenericWebService::password() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
  return _internal_password();
}
inline void Fulfillment_GenericWebService::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
}
inline std::string* Fulfillment_GenericWebService::mutable_password() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
  return _internal_mutable_password();
}
inline const std::string& Fulfillment_GenericWebService::_internal_password() const {
  return password_.Get();
}
inline void Fulfillment_GenericWebService::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fulfillment_GenericWebService::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
}
inline void Fulfillment_GenericWebService::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
}
inline void Fulfillment_GenericWebService::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
}
inline std::string* Fulfillment_GenericWebService::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fulfillment_GenericWebService::release_password() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fulfillment_GenericWebService::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.password)
}

// map<string, string> request_headers = 4 [(.google.api.field_behavior) = OPTIONAL];
inline int Fulfillment_GenericWebService::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int Fulfillment_GenericWebService::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void Fulfillment_GenericWebService::clear_request_headers() {
  request_headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Fulfillment_GenericWebService::_internal_request_headers() const {
  return request_headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Fulfillment_GenericWebService::request_headers() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.request_headers)
  return _internal_request_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Fulfillment_GenericWebService::_internal_mutable_request_headers() {
  return request_headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Fulfillment_GenericWebService::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.request_headers)
  return _internal_mutable_request_headers();
}

// bool is_cloud_function = 5 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
inline void Fulfillment_GenericWebService::clear_is_cloud_function() {
  is_cloud_function_ = false;
}
inline bool Fulfillment_GenericWebService::_internal_is_cloud_function() const {
  return is_cloud_function_;
}
inline bool Fulfillment_GenericWebService::is_cloud_function() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.is_cloud_function)
  return _internal_is_cloud_function();
}
inline void Fulfillment_GenericWebService::_internal_set_is_cloud_function(bool value) {
  
  is_cloud_function_ = value;
}
inline void Fulfillment_GenericWebService::set_is_cloud_function(bool value) {
  _internal_set_is_cloud_function(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.GenericWebService.is_cloud_function)
}

// -------------------------------------------------------------------

// Fulfillment_Feature

// .google.cloud.dialogflow.v2.Fulfillment.Feature.Type type = 1;
inline void Fulfillment_Feature::clear_type() {
  type_ = 0;
}
inline ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type Fulfillment_Feature::_internal_type() const {
  return static_cast< ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type >(type_);
}
inline ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type Fulfillment_Feature::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.Feature.type)
  return _internal_type();
}
inline void Fulfillment_Feature::_internal_set_type(::google::cloud::dialogflow::v2::Fulfillment_Feature_Type value) {
  
  type_ = value;
}
inline void Fulfillment_Feature::set_type(::google::cloud::dialogflow::v2::Fulfillment_Feature_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.Feature.type)
}

// -------------------------------------------------------------------

// Fulfillment

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Fulfillment::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Fulfillment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.name)
  return _internal_name();
}
inline void Fulfillment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.name)
}
inline std::string* Fulfillment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.name)
  return _internal_mutable_name();
}
inline const std::string& Fulfillment::_internal_name() const {
  return name_.Get();
}
inline void Fulfillment::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fulfillment::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Fulfillment.name)
}
inline void Fulfillment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Fulfillment.name)
}
inline void Fulfillment::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Fulfillment.name)
}
inline std::string* Fulfillment::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fulfillment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fulfillment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Fulfillment.name)
}

// string display_name = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void Fulfillment::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& Fulfillment::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.display_name)
  return _internal_display_name();
}
inline void Fulfillment::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.display_name)
}
inline std::string* Fulfillment::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Fulfillment::_internal_display_name() const {
  return display_name_.Get();
}
inline void Fulfillment::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fulfillment::set_display_name(std::string&& value) {
  
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.Fulfillment.display_name)
}
inline void Fulfillment::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.Fulfillment.display_name)
}
inline void Fulfillment::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.Fulfillment.display_name)
}
inline std::string* Fulfillment::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fulfillment::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fulfillment::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.Fulfillment.display_name)
}

// .google.cloud.dialogflow.v2.Fulfillment.GenericWebService generic_web_service = 3;
inline bool Fulfillment::_internal_has_generic_web_service() const {
  return fulfillment_case() == kGenericWebService;
}
inline bool Fulfillment::has_generic_web_service() const {
  return _internal_has_generic_web_service();
}
inline void Fulfillment::set_has_generic_web_service() {
  _oneof_case_[0] = kGenericWebService;
}
inline void Fulfillment::clear_generic_web_service() {
  if (_internal_has_generic_web_service()) {
    if (GetArena() == nullptr) {
      delete fulfillment_.generic_web_service_;
    }
    clear_has_fulfillment();
  }
}
inline ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* Fulfillment::release_generic_web_service() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.Fulfillment.generic_web_service)
  if (_internal_has_generic_web_service()) {
    clear_has_fulfillment();
      ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* temp = fulfillment_.generic_web_service_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    fulfillment_.generic_web_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService& Fulfillment::_internal_generic_web_service() const {
  return _internal_has_generic_web_service()
      ? *fulfillment_.generic_web_service_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService&>(::google::cloud::dialogflow::v2::_Fulfillment_GenericWebService_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService& Fulfillment::generic_web_service() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.generic_web_service)
  return _internal_generic_web_service();
}
inline ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* Fulfillment::unsafe_arena_release_generic_web_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.Fulfillment.generic_web_service)
  if (_internal_has_generic_web_service()) {
    clear_has_fulfillment();
    ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* temp = fulfillment_.generic_web_service_;
    fulfillment_.generic_web_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Fulfillment::unsafe_arena_set_allocated_generic_web_service(::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* generic_web_service) {
  clear_fulfillment();
  if (generic_web_service) {
    set_has_generic_web_service();
    fulfillment_.generic_web_service_ = generic_web_service;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.Fulfillment.generic_web_service)
}
inline ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* Fulfillment::_internal_mutable_generic_web_service() {
  if (!_internal_has_generic_web_service()) {
    clear_fulfillment();
    set_has_generic_web_service();
    fulfillment_.generic_web_service_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService >(GetArena());
  }
  return fulfillment_.generic_web_service_;
}
inline ::google::cloud::dialogflow::v2::Fulfillment_GenericWebService* Fulfillment::mutable_generic_web_service() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.generic_web_service)
  return _internal_mutable_generic_web_service();
}

// bool enabled = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void Fulfillment::clear_enabled() {
  enabled_ = false;
}
inline bool Fulfillment::_internal_enabled() const {
  return enabled_;
}
inline bool Fulfillment::enabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.enabled)
  return _internal_enabled();
}
inline void Fulfillment::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Fulfillment::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Fulfillment.enabled)
}

// repeated .google.cloud.dialogflow.v2.Fulfillment.Feature features = 5 [(.google.api.field_behavior) = OPTIONAL];
inline int Fulfillment::_internal_features_size() const {
  return features_.size();
}
inline int Fulfillment::features_size() const {
  return _internal_features_size();
}
inline void Fulfillment::clear_features() {
  features_.Clear();
}
inline ::google::cloud::dialogflow::v2::Fulfillment_Feature* Fulfillment::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.Fulfillment.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Fulfillment_Feature >*
Fulfillment::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.Fulfillment.features)
  return &features_;
}
inline const ::google::cloud::dialogflow::v2::Fulfillment_Feature& Fulfillment::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Fulfillment_Feature& Fulfillment::features(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Fulfillment.features)
  return _internal_features(index);
}
inline ::google::cloud::dialogflow::v2::Fulfillment_Feature* Fulfillment::_internal_add_features() {
  return features_.Add();
}
inline ::google::cloud::dialogflow::v2::Fulfillment_Feature* Fulfillment::add_features() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.Fulfillment.features)
  return _internal_add_features();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Fulfillment_Feature >&
Fulfillment::features() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.Fulfillment.features)
  return features_;
}

inline bool Fulfillment::has_fulfillment() const {
  return fulfillment_case() != FULFILLMENT_NOT_SET;
}
inline void Fulfillment::clear_has_fulfillment() {
  _oneof_case_[0] = FULFILLMENT_NOT_SET;
}
inline Fulfillment::FulfillmentCase Fulfillment::fulfillment_case() const {
  return Fulfillment::FulfillmentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetFulfillmentRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetFulfillmentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetFulfillmentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
  return _internal_name();
}
inline void GetFulfillmentRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
}
inline std::string* GetFulfillmentRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetFulfillmentRequest::_internal_name() const {
  return name_.Get();
}
inline void GetFulfillmentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetFulfillmentRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
}
inline void GetFulfillmentRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
}
inline void GetFulfillmentRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
}
inline std::string* GetFulfillmentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetFulfillmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetFulfillmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.GetFulfillmentRequest.name)
}

// -------------------------------------------------------------------

// UpdateFulfillmentRequest

// .google.cloud.dialogflow.v2.Fulfillment fulfillment = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateFulfillmentRequest::_internal_has_fulfillment() const {
  return this != internal_default_instance() && fulfillment_ != nullptr;
}
inline bool UpdateFulfillmentRequest::has_fulfillment() const {
  return _internal_has_fulfillment();
}
inline void UpdateFulfillmentRequest::clear_fulfillment() {
  if (GetArena() == nullptr && fulfillment_ != nullptr) {
    delete fulfillment_;
  }
  fulfillment_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Fulfillment& UpdateFulfillmentRequest::_internal_fulfillment() const {
  const ::google::cloud::dialogflow::v2::Fulfillment* p = fulfillment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Fulfillment&>(
      ::google::cloud::dialogflow::v2::_Fulfillment_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Fulfillment& UpdateFulfillmentRequest::fulfillment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.fulfillment)
  return _internal_fulfillment();
}
inline void UpdateFulfillmentRequest::unsafe_arena_set_allocated_fulfillment(
    ::google::cloud::dialogflow::v2::Fulfillment* fulfillment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fulfillment_);
  }
  fulfillment_ = fulfillment;
  if (fulfillment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.fulfillment)
}
inline ::google::cloud::dialogflow::v2::Fulfillment* UpdateFulfillmentRequest::release_fulfillment() {
  
  ::google::cloud::dialogflow::v2::Fulfillment* temp = fulfillment_;
  fulfillment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* UpdateFulfillmentRequest::unsafe_arena_release_fulfillment() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.fulfillment)
  
  ::google::cloud::dialogflow::v2::Fulfillment* temp = fulfillment_;
  fulfillment_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* UpdateFulfillmentRequest::_internal_mutable_fulfillment() {
  
  if (fulfillment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Fulfillment>(GetArena());
    fulfillment_ = p;
  }
  return fulfillment_;
}
inline ::google::cloud::dialogflow::v2::Fulfillment* UpdateFulfillmentRequest::mutable_fulfillment() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.fulfillment)
  return _internal_mutable_fulfillment();
}
inline void UpdateFulfillmentRequest::set_allocated_fulfillment(::google::cloud::dialogflow::v2::Fulfillment* fulfillment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fulfillment_;
  }
  if (fulfillment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fulfillment);
    if (message_arena != submessage_arena) {
      fulfillment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fulfillment, submessage_arena);
    }
    
  } else {
    
  }
  fulfillment_ = fulfillment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.fulfillment)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateFulfillmentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateFulfillmentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateFulfillmentRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateFulfillmentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateFulfillmentRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateFulfillmentRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateFulfillmentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateFulfillmentRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateFulfillmentRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateFulfillmentRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateFulfillmentRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type>() {
  return ::google::cloud::dialogflow::v2::Fulfillment_Feature_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2ffulfillment_2eproto
