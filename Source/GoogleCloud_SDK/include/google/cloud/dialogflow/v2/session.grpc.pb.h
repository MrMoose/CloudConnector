// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/dialogflow/v2/session.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto__INCLUDED

#include "google/cloud/dialogflow/v2/session.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

// A service used for session interactions.
//
// For more information, see the [API interactions
// guide](https://cloud.google.com/dialogflow/docs/api-overview).
class Sessions final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.dialogflow.v2.Sessions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Processes a natural language query and returns structured, actionable data
    // as a result. This method is not idempotent, because it may cause contexts
    // and session entity types to be updated, which in turn might affect
    // results of future queries.
    //
    // If you might use
    // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
    // or other CCAI products now or in the future, consider using
    // [AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
    // instead of `DetectIntent`. `AnalyzeContent` has additional
    // functionality for Agent Assist and other CCAI products.
    //
    // Note: Always use agent versions for production traffic.
    // See [Versions and
    // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    virtual ::grpc::Status DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>> AsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>>(AsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>> PrepareAsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>>(PrepareAsyncDetectIntentRaw(context, request, cq));
    }
    // Processes a natural language query in audio format in a streaming fashion
    // and returns structured, actionable data as a result. This method is only
    // available via the gRPC API (not REST).
    //
    // If you might use
    // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
    // or other CCAI products now or in the future, consider using
    // [StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
    // instead of `StreamingDetectIntent`. `StreamingAnalyzeContent` has
    // additional functionality for Agent Assist and other CCAI products.
    //
    // Note: Always use agent versions for production traffic.
    // See [Versions and
    // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> StreamingDetectIntent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(StreamingDetectIntentRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> AsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(AsyncStreamingDetectIntentRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> PrepareAsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(PrepareAsyncStreamingDetectIntentRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Processes a natural language query and returns structured, actionable data
      // as a result. This method is not idempotent, because it may cause contexts
      // and session entity types to be updated, which in turn might affect
      // results of future queries.
      //
      // If you might use
      // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
      // or other CCAI products now or in the future, consider using
      // [AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
      // instead of `DetectIntent`. `AnalyzeContent` has additional
      // functionality for Agent Assist and other CCAI products.
      //
      // Note: Always use agent versions for production traffic.
      // See [Versions and
      // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
      virtual void DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Processes a natural language query in audio format in a streaming fashion
      // and returns structured, actionable data as a result. This method is only
      // available via the gRPC API (not REST).
      //
      // If you might use
      // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
      // or other CCAI products now or in the future, consider using
      // [StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
      // instead of `StreamingDetectIntent`. `StreamingAnalyzeContent` has
      // additional functionality for Agent Assist and other CCAI products.
      //
      // Note: Always use agent versions for production traffic.
      // See [Versions and
      // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
      virtual void StreamingDetectIntent(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest,::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>* AsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2::DetectIntentResponse>* PrepareAsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* StreamingDetectIntentRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* AsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* PrepareAsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>> AsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>>(AsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>> PrepareAsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>>(PrepareAsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> StreamingDetectIntent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(StreamingDetectIntentRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> AsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(AsyncStreamingDetectIntentRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>> PrepareAsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>>(PrepareAsyncStreamingDetectIntentRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response, std::function<void(::grpc::Status)>) override;
      void DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamingDetectIntent(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest,::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>* AsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2::DetectIntentResponse>* PrepareAsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* StreamingDetectIntentRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* AsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* PrepareAsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DetectIntent_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingDetectIntent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Processes a natural language query and returns structured, actionable data
    // as a result. This method is not idempotent, because it may cause contexts
    // and session entity types to be updated, which in turn might affect
    // results of future queries.
    //
    // If you might use
    // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
    // or other CCAI products now or in the future, consider using
    // [AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
    // instead of `DetectIntent`. `AnalyzeContent` has additional
    // functionality for Agent Assist and other CCAI products.
    //
    // Note: Always use agent versions for production traffic.
    // See [Versions and
    // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    virtual ::grpc::Status DetectIntent(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response);
    // Processes a natural language query in audio format in a streaming fashion
    // and returns structured, actionable data as a result. This method is only
    // available via the gRPC API (not REST).
    //
    // If you might use
    // [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
    // or other CCAI products now or in the future, consider using
    // [StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
    // instead of `StreamingDetectIntent`. `StreamingAnalyzeContent` has
    // additional functionality for Agent Assist and other CCAI products.
    //
    // Note: Always use agent versions for production traffic.
    // See [Versions and
    // environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    virtual ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectIntent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectIntent(::grpc::ServerContext* context, ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dialogflow::v2::DetectIntentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DetectIntent<WithAsyncMethod_StreamingDetectIntent<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DetectIntent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::dialogflow::v2::DetectIntentRequest, ::google::cloud::dialogflow::v2::DetectIntentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::dialogflow::v2::DetectIntentRequest* request, ::google::cloud::dialogflow::v2::DetectIntentResponse* response) { return this->DetectIntent(context, request, response); }));}
    void SetMessageAllocatorFor_DetectIntent(
        ::grpc::MessageAllocator< ::google::cloud::dialogflow::v2::DetectIntentRequest, ::google::cloud::dialogflow::v2::DetectIntentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::dialogflow::v2::DetectIntentRequest, ::google::cloud::dialogflow::v2::DetectIntentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamingDetectIntent(context); }));
    }
    ~WithCallbackMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>* StreamingDetectIntent(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_DetectIntent<WithCallbackMethod_StreamingDetectIntent<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectIntent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectIntent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectIntent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DetectIntent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectIntent(context, request, response); }));
    }
    ~WithRawCallbackMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetectIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamingDetectIntent(context); }));
    }
    ~WithRawCallbackMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamingDetectIntent(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectIntent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::dialogflow::v2::DetectIntentRequest, ::google::cloud::dialogflow::v2::DetectIntentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::dialogflow::v2::DetectIntentRequest, ::google::cloud::dialogflow::v2::DetectIntentResponse>* streamer) {
                       return this->StreamedDetectIntent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* /*context*/, const ::google::cloud::dialogflow::v2::DetectIntentRequest* /*request*/, ::google::cloud::dialogflow::v2::DetectIntentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectIntent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dialogflow::v2::DetectIntentRequest,::google::cloud::dialogflow::v2::DetectIntentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DetectIntent<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DetectIntent<Service > StreamedService;
};

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto__INCLUDED
