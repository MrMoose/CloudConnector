// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/answer_record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/participant.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class AgentAssistantFeedback;
struct AgentAssistantFeedbackDefaultTypeInternal;
extern AgentAssistantFeedbackDefaultTypeInternal _AgentAssistantFeedback_default_instance_;
class AgentAssistantRecord;
struct AgentAssistantRecordDefaultTypeInternal;
extern AgentAssistantRecordDefaultTypeInternal _AgentAssistantRecord_default_instance_;
class AnswerFeedback;
struct AnswerFeedbackDefaultTypeInternal;
extern AnswerFeedbackDefaultTypeInternal _AnswerFeedback_default_instance_;
class AnswerRecord;
struct AnswerRecordDefaultTypeInternal;
extern AnswerRecordDefaultTypeInternal _AnswerRecord_default_instance_;
class ListAnswerRecordsRequest;
struct ListAnswerRecordsRequestDefaultTypeInternal;
extern ListAnswerRecordsRequestDefaultTypeInternal _ListAnswerRecordsRequest_default_instance_;
class ListAnswerRecordsResponse;
struct ListAnswerRecordsResponseDefaultTypeInternal;
extern ListAnswerRecordsResponseDefaultTypeInternal _ListAnswerRecordsResponse_default_instance_;
class UpdateAnswerRecordRequest;
struct UpdateAnswerRecordRequestDefaultTypeInternal;
extern UpdateAnswerRecordRequestDefaultTypeInternal _UpdateAnswerRecordRequest_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::AgentAssistantFeedback* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AgentAssistantFeedback>(Arena*);
template<> ::google::cloud::dialogflow::v2::AgentAssistantRecord* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AgentAssistantRecord>(Arena*);
template<> ::google::cloud::dialogflow::v2::AnswerFeedback* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AnswerFeedback>(Arena*);
template<> ::google::cloud::dialogflow::v2::AnswerRecord* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::AnswerRecord>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListAnswerRecordsRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListAnswerRecordsRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::ListAnswerRecordsResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::ListAnswerRecordsResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::UpdateAnswerRecordRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::UpdateAnswerRecordRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum AnswerFeedback_CorrectnessLevel : int {
  AnswerFeedback_CorrectnessLevel_CORRECTNESS_LEVEL_UNSPECIFIED = 0,
  AnswerFeedback_CorrectnessLevel_NOT_CORRECT = 1,
  AnswerFeedback_CorrectnessLevel_PARTIALLY_CORRECT = 2,
  AnswerFeedback_CorrectnessLevel_FULLY_CORRECT = 3,
  AnswerFeedback_CorrectnessLevel_AnswerFeedback_CorrectnessLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AnswerFeedback_CorrectnessLevel_AnswerFeedback_CorrectnessLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AnswerFeedback_CorrectnessLevel_IsValid(int value);
constexpr AnswerFeedback_CorrectnessLevel AnswerFeedback_CorrectnessLevel_CorrectnessLevel_MIN = AnswerFeedback_CorrectnessLevel_CORRECTNESS_LEVEL_UNSPECIFIED;
constexpr AnswerFeedback_CorrectnessLevel AnswerFeedback_CorrectnessLevel_CorrectnessLevel_MAX = AnswerFeedback_CorrectnessLevel_FULLY_CORRECT;
constexpr int AnswerFeedback_CorrectnessLevel_CorrectnessLevel_ARRAYSIZE = AnswerFeedback_CorrectnessLevel_CorrectnessLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnswerFeedback_CorrectnessLevel_descriptor();
template<typename T>
inline const std::string& AnswerFeedback_CorrectnessLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnswerFeedback_CorrectnessLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnswerFeedback_CorrectnessLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnswerFeedback_CorrectnessLevel_descriptor(), enum_t_value);
}
inline bool AnswerFeedback_CorrectnessLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnswerFeedback_CorrectnessLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnswerFeedback_CorrectnessLevel>(
    AnswerFeedback_CorrectnessLevel_descriptor(), name, value);
}
enum AgentAssistantFeedback_AnswerRelevance : int {
  AgentAssistantFeedback_AnswerRelevance_ANSWER_RELEVANCE_UNSPECIFIED = 0,
  AgentAssistantFeedback_AnswerRelevance_IRRELEVANT = 1,
  AgentAssistantFeedback_AnswerRelevance_RELEVANT = 2,
  AgentAssistantFeedback_AnswerRelevance_AgentAssistantFeedback_AnswerRelevance_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AgentAssistantFeedback_AnswerRelevance_AgentAssistantFeedback_AnswerRelevance_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AgentAssistantFeedback_AnswerRelevance_IsValid(int value);
constexpr AgentAssistantFeedback_AnswerRelevance AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_MIN = AgentAssistantFeedback_AnswerRelevance_ANSWER_RELEVANCE_UNSPECIFIED;
constexpr AgentAssistantFeedback_AnswerRelevance AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_MAX = AgentAssistantFeedback_AnswerRelevance_RELEVANT;
constexpr int AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_ARRAYSIZE = AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentAssistantFeedback_AnswerRelevance_descriptor();
template<typename T>
inline const std::string& AgentAssistantFeedback_AnswerRelevance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentAssistantFeedback_AnswerRelevance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentAssistantFeedback_AnswerRelevance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentAssistantFeedback_AnswerRelevance_descriptor(), enum_t_value);
}
inline bool AgentAssistantFeedback_AnswerRelevance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgentAssistantFeedback_AnswerRelevance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentAssistantFeedback_AnswerRelevance>(
    AgentAssistantFeedback_AnswerRelevance_descriptor(), name, value);
}
enum AgentAssistantFeedback_DocumentCorrectness : int {
  AgentAssistantFeedback_DocumentCorrectness_DOCUMENT_CORRECTNESS_UNSPECIFIED = 0,
  AgentAssistantFeedback_DocumentCorrectness_INCORRECT = 1,
  AgentAssistantFeedback_DocumentCorrectness_CORRECT = 2,
  AgentAssistantFeedback_DocumentCorrectness_AgentAssistantFeedback_DocumentCorrectness_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AgentAssistantFeedback_DocumentCorrectness_AgentAssistantFeedback_DocumentCorrectness_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AgentAssistantFeedback_DocumentCorrectness_IsValid(int value);
constexpr AgentAssistantFeedback_DocumentCorrectness AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_MIN = AgentAssistantFeedback_DocumentCorrectness_DOCUMENT_CORRECTNESS_UNSPECIFIED;
constexpr AgentAssistantFeedback_DocumentCorrectness AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_MAX = AgentAssistantFeedback_DocumentCorrectness_CORRECT;
constexpr int AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_ARRAYSIZE = AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentAssistantFeedback_DocumentCorrectness_descriptor();
template<typename T>
inline const std::string& AgentAssistantFeedback_DocumentCorrectness_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentAssistantFeedback_DocumentCorrectness>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentAssistantFeedback_DocumentCorrectness_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentAssistantFeedback_DocumentCorrectness_descriptor(), enum_t_value);
}
inline bool AgentAssistantFeedback_DocumentCorrectness_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgentAssistantFeedback_DocumentCorrectness* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentAssistantFeedback_DocumentCorrectness>(
    AgentAssistantFeedback_DocumentCorrectness_descriptor(), name, value);
}
enum AgentAssistantFeedback_DocumentEfficiency : int {
  AgentAssistantFeedback_DocumentEfficiency_DOCUMENT_EFFICIENCY_UNSPECIFIED = 0,
  AgentAssistantFeedback_DocumentEfficiency_INEFFICIENT = 1,
  AgentAssistantFeedback_DocumentEfficiency_EFFICIENT = 2,
  AgentAssistantFeedback_DocumentEfficiency_AgentAssistantFeedback_DocumentEfficiency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AgentAssistantFeedback_DocumentEfficiency_AgentAssistantFeedback_DocumentEfficiency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AgentAssistantFeedback_DocumentEfficiency_IsValid(int value);
constexpr AgentAssistantFeedback_DocumentEfficiency AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_MIN = AgentAssistantFeedback_DocumentEfficiency_DOCUMENT_EFFICIENCY_UNSPECIFIED;
constexpr AgentAssistantFeedback_DocumentEfficiency AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_MAX = AgentAssistantFeedback_DocumentEfficiency_EFFICIENT;
constexpr int AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_ARRAYSIZE = AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentAssistantFeedback_DocumentEfficiency_descriptor();
template<typename T>
inline const std::string& AgentAssistantFeedback_DocumentEfficiency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentAssistantFeedback_DocumentEfficiency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentAssistantFeedback_DocumentEfficiency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentAssistantFeedback_DocumentEfficiency_descriptor(), enum_t_value);
}
inline bool AgentAssistantFeedback_DocumentEfficiency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgentAssistantFeedback_DocumentEfficiency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentAssistantFeedback_DocumentEfficiency>(
    AgentAssistantFeedback_DocumentEfficiency_descriptor(), name, value);
}
// ===================================================================

class AnswerRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AnswerRecord) */ {
 public:
  inline AnswerRecord() : AnswerRecord(nullptr) {}
  ~AnswerRecord() override;
  explicit PROTOBUF_CONSTEXPR AnswerRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnswerRecord(const AnswerRecord& from);
  AnswerRecord(AnswerRecord&& from) noexcept
    : AnswerRecord() {
    *this = ::std::move(from);
  }

  inline AnswerRecord& operator=(const AnswerRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnswerRecord& operator=(AnswerRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnswerRecord& default_instance() {
    return *internal_default_instance();
  }
  enum RecordCase {
    kAgentAssistantRecord = 4,
    RECORD_NOT_SET = 0,
  };

  static inline const AnswerRecord* internal_default_instance() {
    return reinterpret_cast<const AnswerRecord*>(
               &_AnswerRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnswerRecord& a, AnswerRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AnswerRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnswerRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnswerRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnswerRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnswerRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnswerRecord& from) {
    AnswerRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnswerRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AnswerRecord";
  }
  protected:
  explicit AnswerRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAnswerFeedbackFieldNumber = 2,
    kAgentAssistantRecordFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.dialogflow.v2.AnswerFeedback answer_feedback = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_answer_feedback() const;
  private:
  bool _internal_has_answer_feedback() const;
  public:
  void clear_answer_feedback();
  const ::google::cloud::dialogflow::v2::AnswerFeedback& answer_feedback() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AnswerFeedback* release_answer_feedback();
  ::google::cloud::dialogflow::v2::AnswerFeedback* mutable_answer_feedback();
  void set_allocated_answer_feedback(::google::cloud::dialogflow::v2::AnswerFeedback* answer_feedback);
  private:
  const ::google::cloud::dialogflow::v2::AnswerFeedback& _internal_answer_feedback() const;
  ::google::cloud::dialogflow::v2::AnswerFeedback* _internal_mutable_answer_feedback();
  public:
  void unsafe_arena_set_allocated_answer_feedback(
      ::google::cloud::dialogflow::v2::AnswerFeedback* answer_feedback);
  ::google::cloud::dialogflow::v2::AnswerFeedback* unsafe_arena_release_answer_feedback();

  // .google.cloud.dialogflow.v2.AgentAssistantRecord agent_assistant_record = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_agent_assistant_record() const;
  private:
  bool _internal_has_agent_assistant_record() const;
  public:
  void clear_agent_assistant_record();
  const ::google::cloud::dialogflow::v2::AgentAssistantRecord& agent_assistant_record() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AgentAssistantRecord* release_agent_assistant_record();
  ::google::cloud::dialogflow::v2::AgentAssistantRecord* mutable_agent_assistant_record();
  void set_allocated_agent_assistant_record(::google::cloud::dialogflow::v2::AgentAssistantRecord* agent_assistant_record);
  private:
  const ::google::cloud::dialogflow::v2::AgentAssistantRecord& _internal_agent_assistant_record() const;
  ::google::cloud::dialogflow::v2::AgentAssistantRecord* _internal_mutable_agent_assistant_record();
  public:
  void unsafe_arena_set_allocated_agent_assistant_record(
      ::google::cloud::dialogflow::v2::AgentAssistantRecord* agent_assistant_record);
  ::google::cloud::dialogflow::v2::AgentAssistantRecord* unsafe_arena_release_agent_assistant_record();

  void clear_record();
  RecordCase record_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AnswerRecord)
 private:
  class _Internal;
  void set_has_agent_assistant_record();

  inline bool has_record() const;
  inline void clear_has_record();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::cloud::dialogflow::v2::AnswerFeedback* answer_feedback_;
    union RecordUnion {
      constexpr RecordUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::AgentAssistantRecord* agent_assistant_record_;
    } record_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class ListAnswerRecordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListAnswerRecordsRequest) */ {
 public:
  inline ListAnswerRecordsRequest() : ListAnswerRecordsRequest(nullptr) {}
  ~ListAnswerRecordsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAnswerRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAnswerRecordsRequest(const ListAnswerRecordsRequest& from);
  ListAnswerRecordsRequest(ListAnswerRecordsRequest&& from) noexcept
    : ListAnswerRecordsRequest() {
    *this = ::std::move(from);
  }

  inline ListAnswerRecordsRequest& operator=(const ListAnswerRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnswerRecordsRequest& operator=(ListAnswerRecordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAnswerRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAnswerRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnswerRecordsRequest*>(
               &_ListAnswerRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListAnswerRecordsRequest& a, ListAnswerRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnswerRecordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAnswerRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAnswerRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAnswerRecordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAnswerRecordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAnswerRecordsRequest& from) {
    ListAnswerRecordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnswerRecordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListAnswerRecordsRequest";
  }
  protected:
  explicit ListAnswerRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string filter = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  PROTOBUF_DEPRECATED void clear_filter();
  PROTOBUF_DEPRECATED const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_filter(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_filter();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_filter();
  PROTOBUF_DEPRECATED void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListAnswerRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class ListAnswerRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.ListAnswerRecordsResponse) */ {
 public:
  inline ListAnswerRecordsResponse() : ListAnswerRecordsResponse(nullptr) {}
  ~ListAnswerRecordsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAnswerRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAnswerRecordsResponse(const ListAnswerRecordsResponse& from);
  ListAnswerRecordsResponse(ListAnswerRecordsResponse&& from) noexcept
    : ListAnswerRecordsResponse() {
    *this = ::std::move(from);
  }

  inline ListAnswerRecordsResponse& operator=(const ListAnswerRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnswerRecordsResponse& operator=(ListAnswerRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAnswerRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAnswerRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAnswerRecordsResponse*>(
               &_ListAnswerRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListAnswerRecordsResponse& a, ListAnswerRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnswerRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAnswerRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAnswerRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAnswerRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAnswerRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAnswerRecordsResponse& from) {
    ListAnswerRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnswerRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.ListAnswerRecordsResponse";
  }
  protected:
  explicit ListAnswerRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerRecordsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.dialogflow.v2.AnswerRecord answer_records = 1;
  int answer_records_size() const;
  private:
  int _internal_answer_records_size() const;
  public:
  void clear_answer_records();
  ::google::cloud::dialogflow::v2::AnswerRecord* mutable_answer_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnswerRecord >*
      mutable_answer_records();
  private:
  const ::google::cloud::dialogflow::v2::AnswerRecord& _internal_answer_records(int index) const;
  ::google::cloud::dialogflow::v2::AnswerRecord* _internal_add_answer_records();
  public:
  const ::google::cloud::dialogflow::v2::AnswerRecord& answer_records(int index) const;
  ::google::cloud::dialogflow::v2::AnswerRecord* add_answer_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnswerRecord >&
      answer_records() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.ListAnswerRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnswerRecord > answer_records_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class UpdateAnswerRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest) */ {
 public:
  inline UpdateAnswerRecordRequest() : UpdateAnswerRecordRequest(nullptr) {}
  ~UpdateAnswerRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAnswerRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAnswerRecordRequest(const UpdateAnswerRecordRequest& from);
  UpdateAnswerRecordRequest(UpdateAnswerRecordRequest&& from) noexcept
    : UpdateAnswerRecordRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAnswerRecordRequest& operator=(const UpdateAnswerRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAnswerRecordRequest& operator=(UpdateAnswerRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAnswerRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAnswerRecordRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAnswerRecordRequest*>(
               &_UpdateAnswerRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateAnswerRecordRequest& a, UpdateAnswerRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAnswerRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAnswerRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAnswerRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAnswerRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAnswerRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAnswerRecordRequest& from) {
    UpdateAnswerRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAnswerRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.UpdateAnswerRecordRequest";
  }
  protected:
  explicit UpdateAnswerRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerRecordFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2.AnswerRecord answer_record = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_answer_record() const;
  private:
  bool _internal_has_answer_record() const;
  public:
  void clear_answer_record();
  const ::google::cloud::dialogflow::v2::AnswerRecord& answer_record() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AnswerRecord* release_answer_record();
  ::google::cloud::dialogflow::v2::AnswerRecord* mutable_answer_record();
  void set_allocated_answer_record(::google::cloud::dialogflow::v2::AnswerRecord* answer_record);
  private:
  const ::google::cloud::dialogflow::v2::AnswerRecord& _internal_answer_record() const;
  ::google::cloud::dialogflow::v2::AnswerRecord* _internal_mutable_answer_record();
  public:
  void unsafe_arena_set_allocated_answer_record(
      ::google::cloud::dialogflow::v2::AnswerRecord* answer_record);
  ::google::cloud::dialogflow::v2::AnswerRecord* unsafe_arena_release_answer_record();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::dialogflow::v2::AnswerRecord* answer_record_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class AnswerFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AnswerFeedback) */ {
 public:
  inline AnswerFeedback() : AnswerFeedback(nullptr) {}
  ~AnswerFeedback() override;
  explicit PROTOBUF_CONSTEXPR AnswerFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnswerFeedback(const AnswerFeedback& from);
  AnswerFeedback(AnswerFeedback&& from) noexcept
    : AnswerFeedback() {
    *this = ::std::move(from);
  }

  inline AnswerFeedback& operator=(const AnswerFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnswerFeedback& operator=(AnswerFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnswerFeedback& default_instance() {
    return *internal_default_instance();
  }
  enum DetailFeedbackCase {
    kAgentAssistantDetailFeedback = 2,
    DETAIL_FEEDBACK_NOT_SET = 0,
  };

  static inline const AnswerFeedback* internal_default_instance() {
    return reinterpret_cast<const AnswerFeedback*>(
               &_AnswerFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnswerFeedback& a, AnswerFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(AnswerFeedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnswerFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnswerFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnswerFeedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnswerFeedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnswerFeedback& from) {
    AnswerFeedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnswerFeedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AnswerFeedback";
  }
  protected:
  explicit AnswerFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnswerFeedback_CorrectnessLevel CorrectnessLevel;
  static constexpr CorrectnessLevel CORRECTNESS_LEVEL_UNSPECIFIED =
    AnswerFeedback_CorrectnessLevel_CORRECTNESS_LEVEL_UNSPECIFIED;
  static constexpr CorrectnessLevel NOT_CORRECT =
    AnswerFeedback_CorrectnessLevel_NOT_CORRECT;
  static constexpr CorrectnessLevel PARTIALLY_CORRECT =
    AnswerFeedback_CorrectnessLevel_PARTIALLY_CORRECT;
  static constexpr CorrectnessLevel FULLY_CORRECT =
    AnswerFeedback_CorrectnessLevel_FULLY_CORRECT;
  static inline bool CorrectnessLevel_IsValid(int value) {
    return AnswerFeedback_CorrectnessLevel_IsValid(value);
  }
  static constexpr CorrectnessLevel CorrectnessLevel_MIN =
    AnswerFeedback_CorrectnessLevel_CorrectnessLevel_MIN;
  static constexpr CorrectnessLevel CorrectnessLevel_MAX =
    AnswerFeedback_CorrectnessLevel_CorrectnessLevel_MAX;
  static constexpr int CorrectnessLevel_ARRAYSIZE =
    AnswerFeedback_CorrectnessLevel_CorrectnessLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CorrectnessLevel_descriptor() {
    return AnswerFeedback_CorrectnessLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& CorrectnessLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CorrectnessLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CorrectnessLevel_Name.");
    return AnswerFeedback_CorrectnessLevel_Name(enum_t_value);
  }
  static inline bool CorrectnessLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CorrectnessLevel* value) {
    return AnswerFeedback_CorrectnessLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClickTimeFieldNumber = 5,
    kDisplayTimeFieldNumber = 6,
    kCorrectnessLevelFieldNumber = 1,
    kClickedFieldNumber = 3,
    kDisplayedFieldNumber = 4,
    kAgentAssistantDetailFeedbackFieldNumber = 2,
  };
  // .google.protobuf.Timestamp click_time = 5;
  bool has_click_time() const;
  private:
  bool _internal_has_click_time() const;
  public:
  void clear_click_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& click_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_click_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_click_time();
  void set_allocated_click_time(::PROTOBUF_NAMESPACE_ID::Timestamp* click_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_click_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_click_time();
  public:
  void unsafe_arena_set_allocated_click_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* click_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_click_time();

  // .google.protobuf.Timestamp display_time = 6;
  bool has_display_time() const;
  private:
  bool _internal_has_display_time() const;
  public:
  void clear_display_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& display_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_display_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_display_time();
  void set_allocated_display_time(::PROTOBUF_NAMESPACE_ID::Timestamp* display_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_display_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_display_time();
  public:
  void unsafe_arena_set_allocated_display_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* display_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_display_time();

  // .google.cloud.dialogflow.v2.AnswerFeedback.CorrectnessLevel correctness_level = 1;
  void clear_correctness_level();
  ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel correctness_level() const;
  void set_correctness_level(::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel value);
  private:
  ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel _internal_correctness_level() const;
  void _internal_set_correctness_level(::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel value);
  public:

  // bool clicked = 3;
  void clear_clicked();
  bool clicked() const;
  void set_clicked(bool value);
  private:
  bool _internal_clicked() const;
  void _internal_set_clicked(bool value);
  public:

  // bool displayed = 4;
  void clear_displayed();
  bool displayed() const;
  void set_displayed(bool value);
  private:
  bool _internal_displayed() const;
  void _internal_set_displayed(bool value);
  public:

  // .google.cloud.dialogflow.v2.AgentAssistantFeedback agent_assistant_detail_feedback = 2;
  bool has_agent_assistant_detail_feedback() const;
  private:
  bool _internal_has_agent_assistant_detail_feedback() const;
  public:
  void clear_agent_assistant_detail_feedback();
  const ::google::cloud::dialogflow::v2::AgentAssistantFeedback& agent_assistant_detail_feedback() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::AgentAssistantFeedback* release_agent_assistant_detail_feedback();
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback* mutable_agent_assistant_detail_feedback();
  void set_allocated_agent_assistant_detail_feedback(::google::cloud::dialogflow::v2::AgentAssistantFeedback* agent_assistant_detail_feedback);
  private:
  const ::google::cloud::dialogflow::v2::AgentAssistantFeedback& _internal_agent_assistant_detail_feedback() const;
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback* _internal_mutable_agent_assistant_detail_feedback();
  public:
  void unsafe_arena_set_allocated_agent_assistant_detail_feedback(
      ::google::cloud::dialogflow::v2::AgentAssistantFeedback* agent_assistant_detail_feedback);
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback* unsafe_arena_release_agent_assistant_detail_feedback();

  void clear_detail_feedback();
  DetailFeedbackCase detail_feedback_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AnswerFeedback)
 private:
  class _Internal;
  void set_has_agent_assistant_detail_feedback();

  inline bool has_detail_feedback() const;
  inline void clear_has_detail_feedback();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* click_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* display_time_;
    int correctness_level_;
    bool clicked_;
    bool displayed_;
    union DetailFeedbackUnion {
      constexpr DetailFeedbackUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::AgentAssistantFeedback* agent_assistant_detail_feedback_;
    } detail_feedback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class AgentAssistantFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AgentAssistantFeedback) */ {
 public:
  inline AgentAssistantFeedback() : AgentAssistantFeedback(nullptr) {}
  ~AgentAssistantFeedback() override;
  explicit PROTOBUF_CONSTEXPR AgentAssistantFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentAssistantFeedback(const AgentAssistantFeedback& from);
  AgentAssistantFeedback(AgentAssistantFeedback&& from) noexcept
    : AgentAssistantFeedback() {
    *this = ::std::move(from);
  }

  inline AgentAssistantFeedback& operator=(const AgentAssistantFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentAssistantFeedback& operator=(AgentAssistantFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentAssistantFeedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentAssistantFeedback* internal_default_instance() {
    return reinterpret_cast<const AgentAssistantFeedback*>(
               &_AgentAssistantFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AgentAssistantFeedback& a, AgentAssistantFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentAssistantFeedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentAssistantFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentAssistantFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentAssistantFeedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentAssistantFeedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentAssistantFeedback& from) {
    AgentAssistantFeedback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentAssistantFeedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AgentAssistantFeedback";
  }
  protected:
  explicit AgentAssistantFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AgentAssistantFeedback_AnswerRelevance AnswerRelevance;
  static constexpr AnswerRelevance ANSWER_RELEVANCE_UNSPECIFIED =
    AgentAssistantFeedback_AnswerRelevance_ANSWER_RELEVANCE_UNSPECIFIED;
  static constexpr AnswerRelevance IRRELEVANT =
    AgentAssistantFeedback_AnswerRelevance_IRRELEVANT;
  static constexpr AnswerRelevance RELEVANT =
    AgentAssistantFeedback_AnswerRelevance_RELEVANT;
  static inline bool AnswerRelevance_IsValid(int value) {
    return AgentAssistantFeedback_AnswerRelevance_IsValid(value);
  }
  static constexpr AnswerRelevance AnswerRelevance_MIN =
    AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_MIN;
  static constexpr AnswerRelevance AnswerRelevance_MAX =
    AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_MAX;
  static constexpr int AnswerRelevance_ARRAYSIZE =
    AgentAssistantFeedback_AnswerRelevance_AnswerRelevance_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnswerRelevance_descriptor() {
    return AgentAssistantFeedback_AnswerRelevance_descriptor();
  }
  template<typename T>
  static inline const std::string& AnswerRelevance_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnswerRelevance>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnswerRelevance_Name.");
    return AgentAssistantFeedback_AnswerRelevance_Name(enum_t_value);
  }
  static inline bool AnswerRelevance_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AnswerRelevance* value) {
    return AgentAssistantFeedback_AnswerRelevance_Parse(name, value);
  }

  typedef AgentAssistantFeedback_DocumentCorrectness DocumentCorrectness;
  static constexpr DocumentCorrectness DOCUMENT_CORRECTNESS_UNSPECIFIED =
    AgentAssistantFeedback_DocumentCorrectness_DOCUMENT_CORRECTNESS_UNSPECIFIED;
  static constexpr DocumentCorrectness INCORRECT =
    AgentAssistantFeedback_DocumentCorrectness_INCORRECT;
  static constexpr DocumentCorrectness CORRECT =
    AgentAssistantFeedback_DocumentCorrectness_CORRECT;
  static inline bool DocumentCorrectness_IsValid(int value) {
    return AgentAssistantFeedback_DocumentCorrectness_IsValid(value);
  }
  static constexpr DocumentCorrectness DocumentCorrectness_MIN =
    AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_MIN;
  static constexpr DocumentCorrectness DocumentCorrectness_MAX =
    AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_MAX;
  static constexpr int DocumentCorrectness_ARRAYSIZE =
    AgentAssistantFeedback_DocumentCorrectness_DocumentCorrectness_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DocumentCorrectness_descriptor() {
    return AgentAssistantFeedback_DocumentCorrectness_descriptor();
  }
  template<typename T>
  static inline const std::string& DocumentCorrectness_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DocumentCorrectness>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DocumentCorrectness_Name.");
    return AgentAssistantFeedback_DocumentCorrectness_Name(enum_t_value);
  }
  static inline bool DocumentCorrectness_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DocumentCorrectness* value) {
    return AgentAssistantFeedback_DocumentCorrectness_Parse(name, value);
  }

  typedef AgentAssistantFeedback_DocumentEfficiency DocumentEfficiency;
  static constexpr DocumentEfficiency DOCUMENT_EFFICIENCY_UNSPECIFIED =
    AgentAssistantFeedback_DocumentEfficiency_DOCUMENT_EFFICIENCY_UNSPECIFIED;
  static constexpr DocumentEfficiency INEFFICIENT =
    AgentAssistantFeedback_DocumentEfficiency_INEFFICIENT;
  static constexpr DocumentEfficiency EFFICIENT =
    AgentAssistantFeedback_DocumentEfficiency_EFFICIENT;
  static inline bool DocumentEfficiency_IsValid(int value) {
    return AgentAssistantFeedback_DocumentEfficiency_IsValid(value);
  }
  static constexpr DocumentEfficiency DocumentEfficiency_MIN =
    AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_MIN;
  static constexpr DocumentEfficiency DocumentEfficiency_MAX =
    AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_MAX;
  static constexpr int DocumentEfficiency_ARRAYSIZE =
    AgentAssistantFeedback_DocumentEfficiency_DocumentEfficiency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DocumentEfficiency_descriptor() {
    return AgentAssistantFeedback_DocumentEfficiency_descriptor();
  }
  template<typename T>
  static inline const std::string& DocumentEfficiency_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DocumentEfficiency>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DocumentEfficiency_Name.");
    return AgentAssistantFeedback_DocumentEfficiency_Name(enum_t_value);
  }
  static inline bool DocumentEfficiency_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DocumentEfficiency* value) {
    return AgentAssistantFeedback_DocumentEfficiency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerRelevanceFieldNumber = 1,
    kDocumentCorrectnessFieldNumber = 2,
    kDocumentEfficiencyFieldNumber = 3,
  };
  // .google.cloud.dialogflow.v2.AgentAssistantFeedback.AnswerRelevance answer_relevance = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_answer_relevance();
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance answer_relevance() const;
  void set_answer_relevance(::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance value);
  private:
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance _internal_answer_relevance() const;
  void _internal_set_answer_relevance(::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance value);
  public:

  // .google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentCorrectness document_correctness = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_document_correctness();
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness document_correctness() const;
  void set_document_correctness(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness value);
  private:
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness _internal_document_correctness() const;
  void _internal_set_document_correctness(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness value);
  public:

  // .google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentEfficiency document_efficiency = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_document_efficiency();
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency document_efficiency() const;
  void set_document_efficiency(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency value);
  private:
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency _internal_document_efficiency() const;
  void _internal_set_document_efficiency(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AgentAssistantFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int answer_relevance_;
    int document_correctness_;
    int document_efficiency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// -------------------------------------------------------------------

class AgentAssistantRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.AgentAssistantRecord) */ {
 public:
  inline AgentAssistantRecord() : AgentAssistantRecord(nullptr) {}
  ~AgentAssistantRecord() override;
  explicit PROTOBUF_CONSTEXPR AgentAssistantRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentAssistantRecord(const AgentAssistantRecord& from);
  AgentAssistantRecord(AgentAssistantRecord&& from) noexcept
    : AgentAssistantRecord() {
    *this = ::std::move(from);
  }

  inline AgentAssistantRecord& operator=(const AgentAssistantRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentAssistantRecord& operator=(AgentAssistantRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentAssistantRecord& default_instance() {
    return *internal_default_instance();
  }
  enum AnswerCase {
    kArticleSuggestionAnswer = 5,
    kFaqAnswer = 6,
    ANSWER_NOT_SET = 0,
  };

  static inline const AgentAssistantRecord* internal_default_instance() {
    return reinterpret_cast<const AgentAssistantRecord*>(
               &_AgentAssistantRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AgentAssistantRecord& a, AgentAssistantRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentAssistantRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentAssistantRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentAssistantRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentAssistantRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentAssistantRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentAssistantRecord& from) {
    AgentAssistantRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentAssistantRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.AgentAssistantRecord";
  }
  protected:
  explicit AgentAssistantRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticleSuggestionAnswerFieldNumber = 5,
    kFaqAnswerFieldNumber = 6,
  };
  // .google.cloud.dialogflow.v2.ArticleAnswer article_suggestion_answer = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_article_suggestion_answer() const;
  private:
  bool _internal_has_article_suggestion_answer() const;
  public:
  void clear_article_suggestion_answer();
  const ::google::cloud::dialogflow::v2::ArticleAnswer& article_suggestion_answer() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::ArticleAnswer* release_article_suggestion_answer();
  ::google::cloud::dialogflow::v2::ArticleAnswer* mutable_article_suggestion_answer();
  void set_allocated_article_suggestion_answer(::google::cloud::dialogflow::v2::ArticleAnswer* article_suggestion_answer);
  private:
  const ::google::cloud::dialogflow::v2::ArticleAnswer& _internal_article_suggestion_answer() const;
  ::google::cloud::dialogflow::v2::ArticleAnswer* _internal_mutable_article_suggestion_answer();
  public:
  void unsafe_arena_set_allocated_article_suggestion_answer(
      ::google::cloud::dialogflow::v2::ArticleAnswer* article_suggestion_answer);
  ::google::cloud::dialogflow::v2::ArticleAnswer* unsafe_arena_release_article_suggestion_answer();

  // .google.cloud.dialogflow.v2.FaqAnswer faq_answer = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_faq_answer() const;
  private:
  bool _internal_has_faq_answer() const;
  public:
  void clear_faq_answer();
  const ::google::cloud::dialogflow::v2::FaqAnswer& faq_answer() const;
  PROTOBUF_NODISCARD ::google::cloud::dialogflow::v2::FaqAnswer* release_faq_answer();
  ::google::cloud::dialogflow::v2::FaqAnswer* mutable_faq_answer();
  void set_allocated_faq_answer(::google::cloud::dialogflow::v2::FaqAnswer* faq_answer);
  private:
  const ::google::cloud::dialogflow::v2::FaqAnswer& _internal_faq_answer() const;
  ::google::cloud::dialogflow::v2::FaqAnswer* _internal_mutable_faq_answer();
  public:
  void unsafe_arena_set_allocated_faq_answer(
      ::google::cloud::dialogflow::v2::FaqAnswer* faq_answer);
  ::google::cloud::dialogflow::v2::FaqAnswer* unsafe_arena_release_faq_answer();

  void clear_answer();
  AnswerCase answer_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.AgentAssistantRecord)
 private:
  class _Internal;
  void set_has_article_suggestion_answer();
  void set_has_faq_answer();

  inline bool has_answer() const;
  inline void clear_has_answer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AnswerUnion {
      constexpr AnswerUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::dialogflow::v2::ArticleAnswer* article_suggestion_answer_;
      ::google::cloud::dialogflow::v2::FaqAnswer* faq_answer_;
    } answer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnswerRecord

// string name = 1;
inline void AnswerRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AnswerRecord::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnswerRecord::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnswerRecord.name)
}
inline std::string* AnswerRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerRecord.name)
  return _s;
}
inline const std::string& AnswerRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AnswerRecord::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AnswerRecord::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AnswerRecord::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerRecord.name)
  return _impl_.name_.Release();
}
inline void AnswerRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnswerRecord.name)
}

// .google.cloud.dialogflow.v2.AnswerFeedback answer_feedback = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool AnswerRecord::_internal_has_answer_feedback() const {
  return this != internal_default_instance() && _impl_.answer_feedback_ != nullptr;
}
inline bool AnswerRecord::has_answer_feedback() const {
  return _internal_has_answer_feedback();
}
inline void AnswerRecord::clear_answer_feedback() {
  if (GetArenaForAllocation() == nullptr && _impl_.answer_feedback_ != nullptr) {
    delete _impl_.answer_feedback_;
  }
  _impl_.answer_feedback_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AnswerFeedback& AnswerRecord::_internal_answer_feedback() const {
  const ::google::cloud::dialogflow::v2::AnswerFeedback* p = _impl_.answer_feedback_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AnswerFeedback&>(
      ::google::cloud::dialogflow::v2::_AnswerFeedback_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AnswerFeedback& AnswerRecord::answer_feedback() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerRecord.answer_feedback)
  return _internal_answer_feedback();
}
inline void AnswerRecord::unsafe_arena_set_allocated_answer_feedback(
    ::google::cloud::dialogflow::v2::AnswerFeedback* answer_feedback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.answer_feedback_);
  }
  _impl_.answer_feedback_ = answer_feedback;
  if (answer_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnswerRecord.answer_feedback)
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback* AnswerRecord::release_answer_feedback() {
  
  ::google::cloud::dialogflow::v2::AnswerFeedback* temp = _impl_.answer_feedback_;
  _impl_.answer_feedback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback* AnswerRecord::unsafe_arena_release_answer_feedback() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerRecord.answer_feedback)
  
  ::google::cloud::dialogflow::v2::AnswerFeedback* temp = _impl_.answer_feedback_;
  _impl_.answer_feedback_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback* AnswerRecord::_internal_mutable_answer_feedback() {
  
  if (_impl_.answer_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AnswerFeedback>(GetArenaForAllocation());
    _impl_.answer_feedback_ = p;
  }
  return _impl_.answer_feedback_;
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback* AnswerRecord::mutable_answer_feedback() {
  ::google::cloud::dialogflow::v2::AnswerFeedback* _msg = _internal_mutable_answer_feedback();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerRecord.answer_feedback)
  return _msg;
}
inline void AnswerRecord::set_allocated_answer_feedback(::google::cloud::dialogflow::v2::AnswerFeedback* answer_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.answer_feedback_;
  }
  if (answer_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(answer_feedback);
    if (message_arena != submessage_arena) {
      answer_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer_feedback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.answer_feedback_ = answer_feedback;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnswerRecord.answer_feedback)
}

// .google.cloud.dialogflow.v2.AgentAssistantRecord agent_assistant_record = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool AnswerRecord::_internal_has_agent_assistant_record() const {
  return record_case() == kAgentAssistantRecord;
}
inline bool AnswerRecord::has_agent_assistant_record() const {
  return _internal_has_agent_assistant_record();
}
inline void AnswerRecord::set_has_agent_assistant_record() {
  _impl_._oneof_case_[0] = kAgentAssistantRecord;
}
inline void AnswerRecord::clear_agent_assistant_record() {
  if (_internal_has_agent_assistant_record()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.record_.agent_assistant_record_;
    }
    clear_has_record();
  }
}
inline ::google::cloud::dialogflow::v2::AgentAssistantRecord* AnswerRecord::release_agent_assistant_record() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerRecord.agent_assistant_record)
  if (_internal_has_agent_assistant_record()) {
    clear_has_record();
    ::google::cloud::dialogflow::v2::AgentAssistantRecord* temp = _impl_.record_.agent_assistant_record_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.record_.agent_assistant_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::AgentAssistantRecord& AnswerRecord::_internal_agent_assistant_record() const {
  return _internal_has_agent_assistant_record()
      ? *_impl_.record_.agent_assistant_record_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::AgentAssistantRecord&>(::google::cloud::dialogflow::v2::_AgentAssistantRecord_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AgentAssistantRecord& AnswerRecord::agent_assistant_record() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerRecord.agent_assistant_record)
  return _internal_agent_assistant_record();
}
inline ::google::cloud::dialogflow::v2::AgentAssistantRecord* AnswerRecord::unsafe_arena_release_agent_assistant_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AnswerRecord.agent_assistant_record)
  if (_internal_has_agent_assistant_record()) {
    clear_has_record();
    ::google::cloud::dialogflow::v2::AgentAssistantRecord* temp = _impl_.record_.agent_assistant_record_;
    _impl_.record_.agent_assistant_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnswerRecord::unsafe_arena_set_allocated_agent_assistant_record(::google::cloud::dialogflow::v2::AgentAssistantRecord* agent_assistant_record) {
  clear_record();
  if (agent_assistant_record) {
    set_has_agent_assistant_record();
    _impl_.record_.agent_assistant_record_ = agent_assistant_record;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnswerRecord.agent_assistant_record)
}
inline ::google::cloud::dialogflow::v2::AgentAssistantRecord* AnswerRecord::_internal_mutable_agent_assistant_record() {
  if (!_internal_has_agent_assistant_record()) {
    clear_record();
    set_has_agent_assistant_record();
    _impl_.record_.agent_assistant_record_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::AgentAssistantRecord >(GetArenaForAllocation());
  }
  return _impl_.record_.agent_assistant_record_;
}
inline ::google::cloud::dialogflow::v2::AgentAssistantRecord* AnswerRecord::mutable_agent_assistant_record() {
  ::google::cloud::dialogflow::v2::AgentAssistantRecord* _msg = _internal_mutable_agent_assistant_record();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerRecord.agent_assistant_record)
  return _msg;
}

inline bool AnswerRecord::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
inline void AnswerRecord::clear_has_record() {
  _impl_._oneof_case_[0] = RECORD_NOT_SET;
}
inline AnswerRecord::RecordCase AnswerRecord::record_case() const {
  return AnswerRecord::RecordCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListAnswerRecordsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListAnswerRecordsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListAnswerRecordsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAnswerRecordsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.parent)
}
inline std::string* ListAnswerRecordsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.parent)
  return _s;
}
inline const std::string& ListAnswerRecordsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListAnswerRecordsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListAnswerRecordsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.parent)
}

// string filter = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
inline void ListAnswerRecordsRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListAnswerRecordsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAnswerRecordsRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.filter)
}
inline std::string* ListAnswerRecordsRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.filter)
  return _s;
}
inline const std::string& ListAnswerRecordsRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListAnswerRecordsRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListAnswerRecordsRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.filter)
}

// int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListAnswerRecordsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListAnswerRecordsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListAnswerRecordsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_size)
  return _internal_page_size();
}
inline void ListAnswerRecordsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListAnswerRecordsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_size)
}

// string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListAnswerRecordsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListAnswerRecordsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAnswerRecordsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token)
}
inline std::string* ListAnswerRecordsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token)
  return _s;
}
inline const std::string& ListAnswerRecordsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListAnswerRecordsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListAnswerRecordsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token)
}

// -------------------------------------------------------------------

// ListAnswerRecordsResponse

// repeated .google.cloud.dialogflow.v2.AnswerRecord answer_records = 1;
inline int ListAnswerRecordsResponse::_internal_answer_records_size() const {
  return _impl_.answer_records_.size();
}
inline int ListAnswerRecordsResponse::answer_records_size() const {
  return _internal_answer_records_size();
}
inline void ListAnswerRecordsResponse::clear_answer_records() {
  _impl_.answer_records_.Clear();
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* ListAnswerRecordsResponse::mutable_answer_records(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.answer_records)
  return _impl_.answer_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnswerRecord >*
ListAnswerRecordsResponse::mutable_answer_records() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.answer_records)
  return &_impl_.answer_records_;
}
inline const ::google::cloud::dialogflow::v2::AnswerRecord& ListAnswerRecordsResponse::_internal_answer_records(int index) const {
  return _impl_.answer_records_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::AnswerRecord& ListAnswerRecordsResponse::answer_records(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.answer_records)
  return _internal_answer_records(index);
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* ListAnswerRecordsResponse::_internal_add_answer_records() {
  return _impl_.answer_records_.Add();
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* ListAnswerRecordsResponse::add_answer_records() {
  ::google::cloud::dialogflow::v2::AnswerRecord* _add = _internal_add_answer_records();
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.answer_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::AnswerRecord >&
ListAnswerRecordsResponse::answer_records() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.answer_records)
  return _impl_.answer_records_;
}

// string next_page_token = 2;
inline void ListAnswerRecordsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListAnswerRecordsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAnswerRecordsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token)
}
inline std::string* ListAnswerRecordsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token)
  return _s;
}
inline const std::string& ListAnswerRecordsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListAnswerRecordsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAnswerRecordsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListAnswerRecordsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateAnswerRecordRequest

// .google.cloud.dialogflow.v2.AnswerRecord answer_record = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateAnswerRecordRequest::_internal_has_answer_record() const {
  return this != internal_default_instance() && _impl_.answer_record_ != nullptr;
}
inline bool UpdateAnswerRecordRequest::has_answer_record() const {
  return _internal_has_answer_record();
}
inline void UpdateAnswerRecordRequest::clear_answer_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.answer_record_ != nullptr) {
    delete _impl_.answer_record_;
  }
  _impl_.answer_record_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::AnswerRecord& UpdateAnswerRecordRequest::_internal_answer_record() const {
  const ::google::cloud::dialogflow::v2::AnswerRecord* p = _impl_.answer_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::AnswerRecord&>(
      ::google::cloud::dialogflow::v2::_AnswerRecord_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AnswerRecord& UpdateAnswerRecordRequest::answer_record() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.answer_record)
  return _internal_answer_record();
}
inline void UpdateAnswerRecordRequest::unsafe_arena_set_allocated_answer_record(
    ::google::cloud::dialogflow::v2::AnswerRecord* answer_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.answer_record_);
  }
  _impl_.answer_record_ = answer_record;
  if (answer_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.answer_record)
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* UpdateAnswerRecordRequest::release_answer_record() {
  
  ::google::cloud::dialogflow::v2::AnswerRecord* temp = _impl_.answer_record_;
  _impl_.answer_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* UpdateAnswerRecordRequest::unsafe_arena_release_answer_record() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.answer_record)
  
  ::google::cloud::dialogflow::v2::AnswerRecord* temp = _impl_.answer_record_;
  _impl_.answer_record_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* UpdateAnswerRecordRequest::_internal_mutable_answer_record() {
  
  if (_impl_.answer_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::AnswerRecord>(GetArenaForAllocation());
    _impl_.answer_record_ = p;
  }
  return _impl_.answer_record_;
}
inline ::google::cloud::dialogflow::v2::AnswerRecord* UpdateAnswerRecordRequest::mutable_answer_record() {
  ::google::cloud::dialogflow::v2::AnswerRecord* _msg = _internal_mutable_answer_record();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.answer_record)
  return _msg;
}
inline void UpdateAnswerRecordRequest::set_allocated_answer_record(::google::cloud::dialogflow::v2::AnswerRecord* answer_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.answer_record_;
  }
  if (answer_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(answer_record);
    if (message_arena != submessage_arena) {
      answer_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer_record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.answer_record_ = answer_record;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.answer_record)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateAnswerRecordRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateAnswerRecordRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAnswerRecordRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAnswerRecordRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAnswerRecordRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAnswerRecordRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAnswerRecordRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAnswerRecordRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAnswerRecordRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.update_mask)
  return _msg;
}
inline void UpdateAnswerRecordRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.UpdateAnswerRecordRequest.update_mask)
}

// -------------------------------------------------------------------

// AnswerFeedback

// .google.cloud.dialogflow.v2.AnswerFeedback.CorrectnessLevel correctness_level = 1;
inline void AnswerFeedback::clear_correctness_level() {
  _impl_.correctness_level_ = 0;
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel AnswerFeedback::_internal_correctness_level() const {
  return static_cast< ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel >(_impl_.correctness_level_);
}
inline ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel AnswerFeedback::correctness_level() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.correctness_level)
  return _internal_correctness_level();
}
inline void AnswerFeedback::_internal_set_correctness_level(::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel value) {
  
  _impl_.correctness_level_ = value;
}
inline void AnswerFeedback::set_correctness_level(::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel value) {
  _internal_set_correctness_level(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnswerFeedback.correctness_level)
}

// .google.cloud.dialogflow.v2.AgentAssistantFeedback agent_assistant_detail_feedback = 2;
inline bool AnswerFeedback::_internal_has_agent_assistant_detail_feedback() const {
  return detail_feedback_case() == kAgentAssistantDetailFeedback;
}
inline bool AnswerFeedback::has_agent_assistant_detail_feedback() const {
  return _internal_has_agent_assistant_detail_feedback();
}
inline void AnswerFeedback::set_has_agent_assistant_detail_feedback() {
  _impl_._oneof_case_[0] = kAgentAssistantDetailFeedback;
}
inline void AnswerFeedback::clear_agent_assistant_detail_feedback() {
  if (_internal_has_agent_assistant_detail_feedback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.detail_feedback_.agent_assistant_detail_feedback_;
    }
    clear_has_detail_feedback();
  }
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback* AnswerFeedback::release_agent_assistant_detail_feedback() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerFeedback.agent_assistant_detail_feedback)
  if (_internal_has_agent_assistant_detail_feedback()) {
    clear_has_detail_feedback();
    ::google::cloud::dialogflow::v2::AgentAssistantFeedback* temp = _impl_.detail_feedback_.agent_assistant_detail_feedback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.detail_feedback_.agent_assistant_detail_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::AgentAssistantFeedback& AnswerFeedback::_internal_agent_assistant_detail_feedback() const {
  return _internal_has_agent_assistant_detail_feedback()
      ? *_impl_.detail_feedback_.agent_assistant_detail_feedback_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::AgentAssistantFeedback&>(::google::cloud::dialogflow::v2::_AgentAssistantFeedback_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::AgentAssistantFeedback& AnswerFeedback::agent_assistant_detail_feedback() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.agent_assistant_detail_feedback)
  return _internal_agent_assistant_detail_feedback();
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback* AnswerFeedback::unsafe_arena_release_agent_assistant_detail_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AnswerFeedback.agent_assistant_detail_feedback)
  if (_internal_has_agent_assistant_detail_feedback()) {
    clear_has_detail_feedback();
    ::google::cloud::dialogflow::v2::AgentAssistantFeedback* temp = _impl_.detail_feedback_.agent_assistant_detail_feedback_;
    _impl_.detail_feedback_.agent_assistant_detail_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnswerFeedback::unsafe_arena_set_allocated_agent_assistant_detail_feedback(::google::cloud::dialogflow::v2::AgentAssistantFeedback* agent_assistant_detail_feedback) {
  clear_detail_feedback();
  if (agent_assistant_detail_feedback) {
    set_has_agent_assistant_detail_feedback();
    _impl_.detail_feedback_.agent_assistant_detail_feedback_ = agent_assistant_detail_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnswerFeedback.agent_assistant_detail_feedback)
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback* AnswerFeedback::_internal_mutable_agent_assistant_detail_feedback() {
  if (!_internal_has_agent_assistant_detail_feedback()) {
    clear_detail_feedback();
    set_has_agent_assistant_detail_feedback();
    _impl_.detail_feedback_.agent_assistant_detail_feedback_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::AgentAssistantFeedback >(GetArenaForAllocation());
  }
  return _impl_.detail_feedback_.agent_assistant_detail_feedback_;
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback* AnswerFeedback::mutable_agent_assistant_detail_feedback() {
  ::google::cloud::dialogflow::v2::AgentAssistantFeedback* _msg = _internal_mutable_agent_assistant_detail_feedback();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerFeedback.agent_assistant_detail_feedback)
  return _msg;
}

// bool clicked = 3;
inline void AnswerFeedback::clear_clicked() {
  _impl_.clicked_ = false;
}
inline bool AnswerFeedback::_internal_clicked() const {
  return _impl_.clicked_;
}
inline bool AnswerFeedback::clicked() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.clicked)
  return _internal_clicked();
}
inline void AnswerFeedback::_internal_set_clicked(bool value) {
  
  _impl_.clicked_ = value;
}
inline void AnswerFeedback::set_clicked(bool value) {
  _internal_set_clicked(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnswerFeedback.clicked)
}

// .google.protobuf.Timestamp click_time = 5;
inline bool AnswerFeedback::_internal_has_click_time() const {
  return this != internal_default_instance() && _impl_.click_time_ != nullptr;
}
inline bool AnswerFeedback::has_click_time() const {
  return _internal_has_click_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AnswerFeedback::_internal_click_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.click_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AnswerFeedback::click_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.click_time)
  return _internal_click_time();
}
inline void AnswerFeedback::unsafe_arena_set_allocated_click_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* click_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.click_time_);
  }
  _impl_.click_time_ = click_time;
  if (click_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnswerFeedback.click_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::release_click_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.click_time_;
  _impl_.click_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::unsafe_arena_release_click_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerFeedback.click_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.click_time_;
  _impl_.click_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::_internal_mutable_click_time() {
  
  if (_impl_.click_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.click_time_ = p;
  }
  return _impl_.click_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::mutable_click_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_click_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerFeedback.click_time)
  return _msg;
}
inline void AnswerFeedback::set_allocated_click_time(::PROTOBUF_NAMESPACE_ID::Timestamp* click_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.click_time_);
  }
  if (click_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(click_time));
    if (message_arena != submessage_arena) {
      click_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, click_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.click_time_ = click_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnswerFeedback.click_time)
}

// bool displayed = 4;
inline void AnswerFeedback::clear_displayed() {
  _impl_.displayed_ = false;
}
inline bool AnswerFeedback::_internal_displayed() const {
  return _impl_.displayed_;
}
inline bool AnswerFeedback::displayed() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.displayed)
  return _internal_displayed();
}
inline void AnswerFeedback::_internal_set_displayed(bool value) {
  
  _impl_.displayed_ = value;
}
inline void AnswerFeedback::set_displayed(bool value) {
  _internal_set_displayed(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AnswerFeedback.displayed)
}

// .google.protobuf.Timestamp display_time = 6;
inline bool AnswerFeedback::_internal_has_display_time() const {
  return this != internal_default_instance() && _impl_.display_time_ != nullptr;
}
inline bool AnswerFeedback::has_display_time() const {
  return _internal_has_display_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AnswerFeedback::_internal_display_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.display_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AnswerFeedback::display_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AnswerFeedback.display_time)
  return _internal_display_time();
}
inline void AnswerFeedback::unsafe_arena_set_allocated_display_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* display_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.display_time_);
  }
  _impl_.display_time_ = display_time;
  if (display_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AnswerFeedback.display_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::release_display_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.display_time_;
  _impl_.display_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::unsafe_arena_release_display_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AnswerFeedback.display_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.display_time_;
  _impl_.display_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::_internal_mutable_display_time() {
  
  if (_impl_.display_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.display_time_ = p;
  }
  return _impl_.display_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AnswerFeedback::mutable_display_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_display_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AnswerFeedback.display_time)
  return _msg;
}
inline void AnswerFeedback::set_allocated_display_time(::PROTOBUF_NAMESPACE_ID::Timestamp* display_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.display_time_);
  }
  if (display_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_time));
    if (message_arena != submessage_arena) {
      display_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.display_time_ = display_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.AnswerFeedback.display_time)
}

inline bool AnswerFeedback::has_detail_feedback() const {
  return detail_feedback_case() != DETAIL_FEEDBACK_NOT_SET;
}
inline void AnswerFeedback::clear_has_detail_feedback() {
  _impl_._oneof_case_[0] = DETAIL_FEEDBACK_NOT_SET;
}
inline AnswerFeedback::DetailFeedbackCase AnswerFeedback::detail_feedback_case() const {
  return AnswerFeedback::DetailFeedbackCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AgentAssistantFeedback

// .google.cloud.dialogflow.v2.AgentAssistantFeedback.AnswerRelevance answer_relevance = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void AgentAssistantFeedback::clear_answer_relevance() {
  _impl_.answer_relevance_ = 0;
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance AgentAssistantFeedback::_internal_answer_relevance() const {
  return static_cast< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance >(_impl_.answer_relevance_);
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance AgentAssistantFeedback::answer_relevance() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AgentAssistantFeedback.answer_relevance)
  return _internal_answer_relevance();
}
inline void AgentAssistantFeedback::_internal_set_answer_relevance(::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance value) {
  
  _impl_.answer_relevance_ = value;
}
inline void AgentAssistantFeedback::set_answer_relevance(::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance value) {
  _internal_set_answer_relevance(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AgentAssistantFeedback.answer_relevance)
}

// .google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentCorrectness document_correctness = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void AgentAssistantFeedback::clear_document_correctness() {
  _impl_.document_correctness_ = 0;
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness AgentAssistantFeedback::_internal_document_correctness() const {
  return static_cast< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness >(_impl_.document_correctness_);
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness AgentAssistantFeedback::document_correctness() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AgentAssistantFeedback.document_correctness)
  return _internal_document_correctness();
}
inline void AgentAssistantFeedback::_internal_set_document_correctness(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness value) {
  
  _impl_.document_correctness_ = value;
}
inline void AgentAssistantFeedback::set_document_correctness(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness value) {
  _internal_set_document_correctness(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AgentAssistantFeedback.document_correctness)
}

// .google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentEfficiency document_efficiency = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void AgentAssistantFeedback::clear_document_efficiency() {
  _impl_.document_efficiency_ = 0;
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency AgentAssistantFeedback::_internal_document_efficiency() const {
  return static_cast< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency >(_impl_.document_efficiency_);
}
inline ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency AgentAssistantFeedback::document_efficiency() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AgentAssistantFeedback.document_efficiency)
  return _internal_document_efficiency();
}
inline void AgentAssistantFeedback::_internal_set_document_efficiency(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency value) {
  
  _impl_.document_efficiency_ = value;
}
inline void AgentAssistantFeedback::set_document_efficiency(::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency value) {
  _internal_set_document_efficiency(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.AgentAssistantFeedback.document_efficiency)
}

// -------------------------------------------------------------------

// AgentAssistantRecord

// .google.cloud.dialogflow.v2.ArticleAnswer article_suggestion_answer = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool AgentAssistantRecord::_internal_has_article_suggestion_answer() const {
  return answer_case() == kArticleSuggestionAnswer;
}
inline bool AgentAssistantRecord::has_article_suggestion_answer() const {
  return _internal_has_article_suggestion_answer();
}
inline void AgentAssistantRecord::set_has_article_suggestion_answer() {
  _impl_._oneof_case_[0] = kArticleSuggestionAnswer;
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* AgentAssistantRecord::release_article_suggestion_answer() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AgentAssistantRecord.article_suggestion_answer)
  if (_internal_has_article_suggestion_answer()) {
    clear_has_answer();
    ::google::cloud::dialogflow::v2::ArticleAnswer* temp = _impl_.answer_.article_suggestion_answer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.article_suggestion_answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::ArticleAnswer& AgentAssistantRecord::_internal_article_suggestion_answer() const {
  return _internal_has_article_suggestion_answer()
      ? *_impl_.answer_.article_suggestion_answer_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::ArticleAnswer&>(::google::cloud::dialogflow::v2::_ArticleAnswer_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::ArticleAnswer& AgentAssistantRecord::article_suggestion_answer() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AgentAssistantRecord.article_suggestion_answer)
  return _internal_article_suggestion_answer();
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* AgentAssistantRecord::unsafe_arena_release_article_suggestion_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AgentAssistantRecord.article_suggestion_answer)
  if (_internal_has_article_suggestion_answer()) {
    clear_has_answer();
    ::google::cloud::dialogflow::v2::ArticleAnswer* temp = _impl_.answer_.article_suggestion_answer_;
    _impl_.answer_.article_suggestion_answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AgentAssistantRecord::unsafe_arena_set_allocated_article_suggestion_answer(::google::cloud::dialogflow::v2::ArticleAnswer* article_suggestion_answer) {
  clear_answer();
  if (article_suggestion_answer) {
    set_has_article_suggestion_answer();
    _impl_.answer_.article_suggestion_answer_ = article_suggestion_answer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AgentAssistantRecord.article_suggestion_answer)
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* AgentAssistantRecord::_internal_mutable_article_suggestion_answer() {
  if (!_internal_has_article_suggestion_answer()) {
    clear_answer();
    set_has_article_suggestion_answer();
    _impl_.answer_.article_suggestion_answer_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::ArticleAnswer >(GetArenaForAllocation());
  }
  return _impl_.answer_.article_suggestion_answer_;
}
inline ::google::cloud::dialogflow::v2::ArticleAnswer* AgentAssistantRecord::mutable_article_suggestion_answer() {
  ::google::cloud::dialogflow::v2::ArticleAnswer* _msg = _internal_mutable_article_suggestion_answer();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AgentAssistantRecord.article_suggestion_answer)
  return _msg;
}

// .google.cloud.dialogflow.v2.FaqAnswer faq_answer = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool AgentAssistantRecord::_internal_has_faq_answer() const {
  return answer_case() == kFaqAnswer;
}
inline bool AgentAssistantRecord::has_faq_answer() const {
  return _internal_has_faq_answer();
}
inline void AgentAssistantRecord::set_has_faq_answer() {
  _impl_._oneof_case_[0] = kFaqAnswer;
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* AgentAssistantRecord::release_faq_answer() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.AgentAssistantRecord.faq_answer)
  if (_internal_has_faq_answer()) {
    clear_has_answer();
    ::google::cloud::dialogflow::v2::FaqAnswer* temp = _impl_.answer_.faq_answer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.faq_answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::FaqAnswer& AgentAssistantRecord::_internal_faq_answer() const {
  return _internal_has_faq_answer()
      ? *_impl_.answer_.faq_answer_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::FaqAnswer&>(::google::cloud::dialogflow::v2::_FaqAnswer_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::FaqAnswer& AgentAssistantRecord::faq_answer() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.AgentAssistantRecord.faq_answer)
  return _internal_faq_answer();
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* AgentAssistantRecord::unsafe_arena_release_faq_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.AgentAssistantRecord.faq_answer)
  if (_internal_has_faq_answer()) {
    clear_has_answer();
    ::google::cloud::dialogflow::v2::FaqAnswer* temp = _impl_.answer_.faq_answer_;
    _impl_.answer_.faq_answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AgentAssistantRecord::unsafe_arena_set_allocated_faq_answer(::google::cloud::dialogflow::v2::FaqAnswer* faq_answer) {
  clear_answer();
  if (faq_answer) {
    set_has_faq_answer();
    _impl_.answer_.faq_answer_ = faq_answer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.AgentAssistantRecord.faq_answer)
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* AgentAssistantRecord::_internal_mutable_faq_answer() {
  if (!_internal_has_faq_answer()) {
    clear_answer();
    set_has_faq_answer();
    _impl_.answer_.faq_answer_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::FaqAnswer >(GetArenaForAllocation());
  }
  return _impl_.answer_.faq_answer_;
}
inline ::google::cloud::dialogflow::v2::FaqAnswer* AgentAssistantRecord::mutable_faq_answer() {
  ::google::cloud::dialogflow::v2::FaqAnswer* _msg = _internal_mutable_faq_answer();
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.AgentAssistantRecord.faq_answer)
  return _msg;
}

inline bool AgentAssistantRecord::has_answer() const {
  return answer_case() != ANSWER_NOT_SET;
}
inline void AgentAssistantRecord::clear_has_answer() {
  _impl_._oneof_case_[0] = ANSWER_NOT_SET;
}
inline AgentAssistantRecord::AnswerCase AgentAssistantRecord::answer_case() const {
  return AgentAssistantRecord::AnswerCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel>() {
  return ::google::cloud::dialogflow::v2::AnswerFeedback_CorrectnessLevel_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance>() {
  return ::google::cloud::dialogflow::v2::AgentAssistantFeedback_AnswerRelevance_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness>() {
  return ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentCorrectness_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency>() {
  return ::google::cloud::dialogflow::v2::AgentAssistantFeedback_DocumentEfficiency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fanswer_5frecord_2eproto
