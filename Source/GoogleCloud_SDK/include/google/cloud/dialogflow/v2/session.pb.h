// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2/session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/dialogflow/v2/audio_config.pb.h"
#include "google/cloud/dialogflow/v2/context.pb.h"
#include "google/cloud/dialogflow/v2/intent.pb.h"
#include "google/cloud/dialogflow/v2/session_entity_type.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/struct.pb.h>
#include "google/rpc/status.pb.h"
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {
class DetectIntentRequest;
struct DetectIntentRequestDefaultTypeInternal;
extern DetectIntentRequestDefaultTypeInternal _DetectIntentRequest_default_instance_;
class DetectIntentResponse;
struct DetectIntentResponseDefaultTypeInternal;
extern DetectIntentResponseDefaultTypeInternal _DetectIntentResponse_default_instance_;
class EventInput;
struct EventInputDefaultTypeInternal;
extern EventInputDefaultTypeInternal _EventInput_default_instance_;
class QueryInput;
struct QueryInputDefaultTypeInternal;
extern QueryInputDefaultTypeInternal _QueryInput_default_instance_;
class QueryParameters;
struct QueryParametersDefaultTypeInternal;
extern QueryParametersDefaultTypeInternal _QueryParameters_default_instance_;
class QueryParameters_WebhookHeadersEntry_DoNotUse;
struct QueryParameters_WebhookHeadersEntry_DoNotUseDefaultTypeInternal;
extern QueryParameters_WebhookHeadersEntry_DoNotUseDefaultTypeInternal _QueryParameters_WebhookHeadersEntry_DoNotUse_default_instance_;
class QueryResult;
struct QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class Sentiment;
struct SentimentDefaultTypeInternal;
extern SentimentDefaultTypeInternal _Sentiment_default_instance_;
class SentimentAnalysisRequestConfig;
struct SentimentAnalysisRequestConfigDefaultTypeInternal;
extern SentimentAnalysisRequestConfigDefaultTypeInternal _SentimentAnalysisRequestConfig_default_instance_;
class SentimentAnalysisResult;
struct SentimentAnalysisResultDefaultTypeInternal;
extern SentimentAnalysisResultDefaultTypeInternal _SentimentAnalysisResult_default_instance_;
class StreamingDetectIntentRequest;
struct StreamingDetectIntentRequestDefaultTypeInternal;
extern StreamingDetectIntentRequestDefaultTypeInternal _StreamingDetectIntentRequest_default_instance_;
class StreamingDetectIntentResponse;
struct StreamingDetectIntentResponseDefaultTypeInternal;
extern StreamingDetectIntentResponseDefaultTypeInternal _StreamingDetectIntentResponse_default_instance_;
class StreamingRecognitionResult;
struct StreamingRecognitionResultDefaultTypeInternal;
extern StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
class TextInput;
struct TextInputDefaultTypeInternal;
extern TextInputDefaultTypeInternal _TextInput_default_instance_;
}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2::DetectIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DetectIntentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::DetectIntentResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::DetectIntentResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::EventInput* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::EventInput>(Arena*);
template<> ::google::cloud::dialogflow::v2::QueryInput* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryInput>(Arena*);
template<> ::google::cloud::dialogflow::v2::QueryParameters* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryParameters>(Arena*);
template<> ::google::cloud::dialogflow::v2::QueryParameters_WebhookHeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryParameters_WebhookHeadersEntry_DoNotUse>(Arena*);
template<> ::google::cloud::dialogflow::v2::QueryResult* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryResult>(Arena*);
template<> ::google::cloud::dialogflow::v2::Sentiment* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::Sentiment>(Arena*);
template<> ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2::SentimentAnalysisResult* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::SentimentAnalysisResult>(Arena*);
template<> ::google::cloud::dialogflow::v2::StreamingDetectIntentRequest* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::StreamingDetectIntentRequest>(Arena*);
template<> ::google::cloud::dialogflow::v2::StreamingDetectIntentResponse* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::StreamingDetectIntentResponse>(Arena*);
template<> ::google::cloud::dialogflow::v2::StreamingRecognitionResult* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::StreamingRecognitionResult>(Arena*);
template<> ::google::cloud::dialogflow::v2::TextInput* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2::TextInput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2 {

enum StreamingRecognitionResult_MessageType : int {
  StreamingRecognitionResult_MessageType_MESSAGE_TYPE_UNSPECIFIED = 0,
  StreamingRecognitionResult_MessageType_TRANSCRIPT = 1,
  StreamingRecognitionResult_MessageType_END_OF_SINGLE_UTTERANCE = 2,
  StreamingRecognitionResult_MessageType_StreamingRecognitionResult_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamingRecognitionResult_MessageType_StreamingRecognitionResult_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamingRecognitionResult_MessageType_IsValid(int value);
constexpr StreamingRecognitionResult_MessageType StreamingRecognitionResult_MessageType_MessageType_MIN = StreamingRecognitionResult_MessageType_MESSAGE_TYPE_UNSPECIFIED;
constexpr StreamingRecognitionResult_MessageType StreamingRecognitionResult_MessageType_MessageType_MAX = StreamingRecognitionResult_MessageType_END_OF_SINGLE_UTTERANCE;
constexpr int StreamingRecognitionResult_MessageType_MessageType_ARRAYSIZE = StreamingRecognitionResult_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognitionResult_MessageType_descriptor();
template<typename T>
inline const std::string& StreamingRecognitionResult_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamingRecognitionResult_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamingRecognitionResult_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamingRecognitionResult_MessageType_descriptor(), enum_t_value);
}
inline bool StreamingRecognitionResult_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamingRecognitionResult_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamingRecognitionResult_MessageType>(
    StreamingRecognitionResult_MessageType_descriptor(), name, value);
}
// ===================================================================

class DetectIntentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DetectIntentRequest) */ {
 public:
  inline DetectIntentRequest() : DetectIntentRequest(nullptr) {}
  virtual ~DetectIntentRequest();
  explicit constexpr DetectIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectIntentRequest(const DetectIntentRequest& from);
  DetectIntentRequest(DetectIntentRequest&& from) noexcept
    : DetectIntentRequest() {
    *this = ::std::move(from);
  }

  inline DetectIntentRequest& operator=(const DetectIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectIntentRequest& operator=(DetectIntentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectIntentRequest* internal_default_instance() {
    return reinterpret_cast<const DetectIntentRequest*>(
               &_DetectIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectIntentRequest& a, DetectIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectIntentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectIntentRequest* New() const final {
    return CreateMaybeMessage<DetectIntentRequest>(nullptr);
  }

  DetectIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectIntentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectIntentRequest& from);
  void MergeFrom(const DetectIntentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectIntentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DetectIntentRequest";
  }
  protected:
  explicit DetectIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kInputAudioFieldNumber = 5,
    kQueryParamsFieldNumber = 2,
    kQueryInputFieldNumber = 3,
    kOutputAudioConfigFieldNumber = 4,
    kOutputAudioConfigMaskFieldNumber = 7,
  };
  // string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // bytes input_audio = 5;
  void clear_input_audio();
  const std::string& input_audio() const;
  void set_input_audio(const std::string& value);
  void set_input_audio(std::string&& value);
  void set_input_audio(const char* value);
  void set_input_audio(const void* value, size_t size);
  std::string* mutable_input_audio();
  std::string* release_input_audio();
  void set_allocated_input_audio(std::string* input_audio);
  private:
  const std::string& _internal_input_audio() const;
  void _internal_set_input_audio(const std::string& value);
  std::string* _internal_mutable_input_audio();
  public:

  // .google.cloud.dialogflow.v2.QueryParameters query_params = 2;
  bool has_query_params() const;
  private:
  bool _internal_has_query_params() const;
  public:
  void clear_query_params();
  const ::google::cloud::dialogflow::v2::QueryParameters& query_params() const;
  ::google::cloud::dialogflow::v2::QueryParameters* release_query_params();
  ::google::cloud::dialogflow::v2::QueryParameters* mutable_query_params();
  void set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params);
  private:
  const ::google::cloud::dialogflow::v2::QueryParameters& _internal_query_params() const;
  ::google::cloud::dialogflow::v2::QueryParameters* _internal_mutable_query_params();
  public:
  void unsafe_arena_set_allocated_query_params(
      ::google::cloud::dialogflow::v2::QueryParameters* query_params);
  ::google::cloud::dialogflow::v2::QueryParameters* unsafe_arena_release_query_params();

  // .google.cloud.dialogflow.v2.QueryInput query_input = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_query_input() const;
  private:
  bool _internal_has_query_input() const;
  public:
  void clear_query_input();
  const ::google::cloud::dialogflow::v2::QueryInput& query_input() const;
  ::google::cloud::dialogflow::v2::QueryInput* release_query_input();
  ::google::cloud::dialogflow::v2::QueryInput* mutable_query_input();
  void set_allocated_query_input(::google::cloud::dialogflow::v2::QueryInput* query_input);
  private:
  const ::google::cloud::dialogflow::v2::QueryInput& _internal_query_input() const;
  ::google::cloud::dialogflow::v2::QueryInput* _internal_mutable_query_input();
  public:
  void unsafe_arena_set_allocated_query_input(
      ::google::cloud::dialogflow::v2::QueryInput* query_input);
  ::google::cloud::dialogflow::v2::QueryInput* unsafe_arena_release_query_input();

  // .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 4;
  bool has_output_audio_config() const;
  private:
  bool _internal_has_output_audio_config() const;
  public:
  void clear_output_audio_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* release_output_audio_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_output_audio_config();
  void set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_output_audio_config();
  public:
  void unsafe_arena_set_allocated_output_audio_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_output_audio_config();

  // .google.protobuf.FieldMask output_audio_config_mask = 7;
  bool has_output_audio_config_mask() const;
  private:
  bool _internal_has_output_audio_config_mask() const;
  public:
  void clear_output_audio_config_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& output_audio_config_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_output_audio_config_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_output_audio_config_mask();
  void set_allocated_output_audio_config_mask(PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_output_audio_config_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_output_audio_config_mask();
  public:
  void unsafe_arena_set_allocated_output_audio_config_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_output_audio_config_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DetectIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_audio_;
  ::google::cloud::dialogflow::v2::QueryParameters* query_params_;
  ::google::cloud::dialogflow::v2::QueryInput* query_input_;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config_;
  PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class DetectIntentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.DetectIntentResponse) */ {
 public:
  inline DetectIntentResponse() : DetectIntentResponse(nullptr) {}
  virtual ~DetectIntentResponse();
  explicit constexpr DetectIntentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectIntentResponse(const DetectIntentResponse& from);
  DetectIntentResponse(DetectIntentResponse&& from) noexcept
    : DetectIntentResponse() {
    *this = ::std::move(from);
  }

  inline DetectIntentResponse& operator=(const DetectIntentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectIntentResponse& operator=(DetectIntentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectIntentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectIntentResponse* internal_default_instance() {
    return reinterpret_cast<const DetectIntentResponse*>(
               &_DetectIntentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectIntentResponse& a, DetectIntentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectIntentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectIntentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectIntentResponse* New() const final {
    return CreateMaybeMessage<DetectIntentResponse>(nullptr);
  }

  DetectIntentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectIntentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectIntentResponse& from);
  void MergeFrom(const DetectIntentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectIntentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.DetectIntentResponse";
  }
  protected:
  explicit DetectIntentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseIdFieldNumber = 1,
    kOutputAudioFieldNumber = 4,
    kQueryResultFieldNumber = 2,
    kWebhookStatusFieldNumber = 3,
    kOutputAudioConfigFieldNumber = 6,
  };
  // string response_id = 1;
  void clear_response_id();
  const std::string& response_id() const;
  void set_response_id(const std::string& value);
  void set_response_id(std::string&& value);
  void set_response_id(const char* value);
  void set_response_id(const char* value, size_t size);
  std::string* mutable_response_id();
  std::string* release_response_id();
  void set_allocated_response_id(std::string* response_id);
  private:
  const std::string& _internal_response_id() const;
  void _internal_set_response_id(const std::string& value);
  std::string* _internal_mutable_response_id();
  public:

  // bytes output_audio = 4;
  void clear_output_audio();
  const std::string& output_audio() const;
  void set_output_audio(const std::string& value);
  void set_output_audio(std::string&& value);
  void set_output_audio(const char* value);
  void set_output_audio(const void* value, size_t size);
  std::string* mutable_output_audio();
  std::string* release_output_audio();
  void set_allocated_output_audio(std::string* output_audio);
  private:
  const std::string& _internal_output_audio() const;
  void _internal_set_output_audio(const std::string& value);
  std::string* _internal_mutable_output_audio();
  public:

  // .google.cloud.dialogflow.v2.QueryResult query_result = 2;
  bool has_query_result() const;
  private:
  bool _internal_has_query_result() const;
  public:
  void clear_query_result();
  const ::google::cloud::dialogflow::v2::QueryResult& query_result() const;
  ::google::cloud::dialogflow::v2::QueryResult* release_query_result();
  ::google::cloud::dialogflow::v2::QueryResult* mutable_query_result();
  void set_allocated_query_result(::google::cloud::dialogflow::v2::QueryResult* query_result);
  private:
  const ::google::cloud::dialogflow::v2::QueryResult& _internal_query_result() const;
  ::google::cloud::dialogflow::v2::QueryResult* _internal_mutable_query_result();
  public:
  void unsafe_arena_set_allocated_query_result(
      ::google::cloud::dialogflow::v2::QueryResult* query_result);
  ::google::cloud::dialogflow::v2::QueryResult* unsafe_arena_release_query_result();

  // .google.rpc.Status webhook_status = 3;
  bool has_webhook_status() const;
  private:
  bool _internal_has_webhook_status() const;
  public:
  void clear_webhook_status();
  const ::google::rpc::Status& webhook_status() const;
  ::google::rpc::Status* release_webhook_status();
  ::google::rpc::Status* mutable_webhook_status();
  void set_allocated_webhook_status(::google::rpc::Status* webhook_status);
  private:
  const ::google::rpc::Status& _internal_webhook_status() const;
  ::google::rpc::Status* _internal_mutable_webhook_status();
  public:
  void unsafe_arena_set_allocated_webhook_status(
      ::google::rpc::Status* webhook_status);
  ::google::rpc::Status* unsafe_arena_release_webhook_status();

  // .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 6;
  bool has_output_audio_config() const;
  private:
  bool _internal_has_output_audio_config() const;
  public:
  void clear_output_audio_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* release_output_audio_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_output_audio_config();
  void set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_output_audio_config();
  public:
  void unsafe_arena_set_allocated_output_audio_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_output_audio_config();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.DetectIntentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_audio_;
  ::google::cloud::dialogflow::v2::QueryResult* query_result_;
  ::google::rpc::Status* webhook_status_;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class QueryParameters_WebhookHeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryParameters_WebhookHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryParameters_WebhookHeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  QueryParameters_WebhookHeadersEntry_DoNotUse();
  explicit constexpr QueryParameters_WebhookHeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QueryParameters_WebhookHeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryParameters_WebhookHeadersEntry_DoNotUse& other);
  static const QueryParameters_WebhookHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryParameters_WebhookHeadersEntry_DoNotUse*>(&_QueryParameters_WebhookHeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.QueryParameters.WebhookHeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.dialogflow.v2.QueryParameters.WebhookHeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto);
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class QueryParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.QueryParameters) */ {
 public:
  inline QueryParameters() : QueryParameters(nullptr) {}
  virtual ~QueryParameters();
  explicit constexpr QueryParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParameters(const QueryParameters& from);
  QueryParameters(QueryParameters&& from) noexcept
    : QueryParameters() {
    *this = ::std::move(from);
  }

  inline QueryParameters& operator=(const QueryParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParameters& operator=(QueryParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParameters* internal_default_instance() {
    return reinterpret_cast<const QueryParameters*>(
               &_QueryParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryParameters& a, QueryParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryParameters* New() const final {
    return CreateMaybeMessage<QueryParameters>(nullptr);
  }

  QueryParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryParameters& from);
  void MergeFrom(const QueryParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.QueryParameters";
  }
  protected:
  explicit QueryParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextsFieldNumber = 3,
    kSessionEntityTypesFieldNumber = 5,
    kWebhookHeadersFieldNumber = 14,
    kTimeZoneFieldNumber = 1,
    kGeoLocationFieldNumber = 2,
    kPayloadFieldNumber = 6,
    kSentimentAnalysisRequestConfigFieldNumber = 10,
    kResetContextsFieldNumber = 4,
  };
  // repeated .google.cloud.dialogflow.v2.Context contexts = 3;
  int contexts_size() const;
  private:
  int _internal_contexts_size() const;
  public:
  void clear_contexts();
  ::google::cloud::dialogflow::v2::Context* mutable_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
      mutable_contexts();
  private:
  const ::google::cloud::dialogflow::v2::Context& _internal_contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* _internal_add_contexts();
  public:
  const ::google::cloud::dialogflow::v2::Context& contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* add_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
      contexts() const;

  // repeated .google.cloud.dialogflow.v2.SessionEntityType session_entity_types = 5;
  int session_entity_types_size() const;
  private:
  int _internal_session_entity_types_size() const;
  public:
  void clear_session_entity_types();
  ::google::cloud::dialogflow::v2::SessionEntityType* mutable_session_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SessionEntityType >*
      mutable_session_entity_types();
  private:
  const ::google::cloud::dialogflow::v2::SessionEntityType& _internal_session_entity_types(int index) const;
  ::google::cloud::dialogflow::v2::SessionEntityType* _internal_add_session_entity_types();
  public:
  const ::google::cloud::dialogflow::v2::SessionEntityType& session_entity_types(int index) const;
  ::google::cloud::dialogflow::v2::SessionEntityType* add_session_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SessionEntityType >&
      session_entity_types() const;

  // map<string, string> webhook_headers = 14;
  int webhook_headers_size() const;
  private:
  int _internal_webhook_headers_size() const;
  public:
  void clear_webhook_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_webhook_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_webhook_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      webhook_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_webhook_headers();

  // string time_zone = 1;
  void clear_time_zone();
  const std::string& time_zone() const;
  void set_time_zone(const std::string& value);
  void set_time_zone(std::string&& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  std::string* mutable_time_zone();
  std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // .google.type.LatLng geo_location = 2;
  bool has_geo_location() const;
  private:
  bool _internal_has_geo_location() const;
  public:
  void clear_geo_location();
  const ::google::type::LatLng& geo_location() const;
  ::google::type::LatLng* release_geo_location();
  ::google::type::LatLng* mutable_geo_location();
  void set_allocated_geo_location(::google::type::LatLng* geo_location);
  private:
  const ::google::type::LatLng& _internal_geo_location() const;
  ::google::type::LatLng* _internal_mutable_geo_location();
  public:
  void unsafe_arena_set_allocated_geo_location(
      ::google::type::LatLng* geo_location);
  ::google::type::LatLng* unsafe_arena_release_geo_location();

  // .google.protobuf.Struct payload = 6;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Struct& payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_payload();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Struct* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      PROTOBUF_NAMESPACE_ID::Struct* payload);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_payload();

  // .google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig sentiment_analysis_request_config = 10;
  bool has_sentiment_analysis_request_config() const;
  private:
  bool _internal_has_sentiment_analysis_request_config() const;
  public:
  void clear_sentiment_analysis_request_config();
  const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig& sentiment_analysis_request_config() const;
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* release_sentiment_analysis_request_config();
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* mutable_sentiment_analysis_request_config();
  void set_allocated_sentiment_analysis_request_config(::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* sentiment_analysis_request_config);
  private:
  const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig& _internal_sentiment_analysis_request_config() const;
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* _internal_mutable_sentiment_analysis_request_config();
  public:
  void unsafe_arena_set_allocated_sentiment_analysis_request_config(
      ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* sentiment_analysis_request_config);
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* unsafe_arena_release_sentiment_analysis_request_config();

  // bool reset_contexts = 4;
  void clear_reset_contexts();
  bool reset_contexts() const;
  void set_reset_contexts(bool value);
  private:
  bool _internal_reset_contexts() const;
  void _internal_set_reset_contexts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.QueryParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context > contexts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SessionEntityType > session_entity_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryParameters_WebhookHeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> webhook_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
  ::google::type::LatLng* geo_location_;
  PROTOBUF_NAMESPACE_ID::Struct* payload_;
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* sentiment_analysis_request_config_;
  bool reset_contexts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class QueryInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.QueryInput) */ {
 public:
  inline QueryInput() : QueryInput(nullptr) {}
  virtual ~QueryInput();
  explicit constexpr QueryInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInput(const QueryInput& from);
  QueryInput(QueryInput&& from) noexcept
    : QueryInput() {
    *this = ::std::move(from);
  }

  inline QueryInput& operator=(const QueryInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInput& operator=(QueryInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryInput& default_instance() {
    return *internal_default_instance();
  }
  enum InputCase {
    kAudioConfig = 1,
    kText = 2,
    kEvent = 3,
    INPUT_NOT_SET = 0,
  };

  static inline const QueryInput* internal_default_instance() {
    return reinterpret_cast<const QueryInput*>(
               &_QueryInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryInput& a, QueryInput& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryInput* New() const final {
    return CreateMaybeMessage<QueryInput>(nullptr);
  }

  QueryInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryInput& from);
  void MergeFrom(const QueryInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.QueryInput";
  }
  protected:
  explicit QueryInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioConfigFieldNumber = 1,
    kTextFieldNumber = 2,
    kEventFieldNumber = 3,
  };
  // .google.cloud.dialogflow.v2.InputAudioConfig audio_config = 1;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::google::cloud::dialogflow::v2::InputAudioConfig& audio_config() const;
  ::google::cloud::dialogflow::v2::InputAudioConfig* release_audio_config();
  ::google::cloud::dialogflow::v2::InputAudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::google::cloud::dialogflow::v2::InputAudioConfig* audio_config);
  private:
  const ::google::cloud::dialogflow::v2::InputAudioConfig& _internal_audio_config() const;
  ::google::cloud::dialogflow::v2::InputAudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::google::cloud::dialogflow::v2::InputAudioConfig* audio_config);
  ::google::cloud::dialogflow::v2::InputAudioConfig* unsafe_arena_release_audio_config();

  // .google.cloud.dialogflow.v2.TextInput text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::google::cloud::dialogflow::v2::TextInput& text() const;
  ::google::cloud::dialogflow::v2::TextInput* release_text();
  ::google::cloud::dialogflow::v2::TextInput* mutable_text();
  void set_allocated_text(::google::cloud::dialogflow::v2::TextInput* text);
  private:
  const ::google::cloud::dialogflow::v2::TextInput& _internal_text() const;
  ::google::cloud::dialogflow::v2::TextInput* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::google::cloud::dialogflow::v2::TextInput* text);
  ::google::cloud::dialogflow::v2::TextInput* unsafe_arena_release_text();

  // .google.cloud.dialogflow.v2.EventInput event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::google::cloud::dialogflow::v2::EventInput& event() const;
  ::google::cloud::dialogflow::v2::EventInput* release_event();
  ::google::cloud::dialogflow::v2::EventInput* mutable_event();
  void set_allocated_event(::google::cloud::dialogflow::v2::EventInput* event);
  private:
  const ::google::cloud::dialogflow::v2::EventInput& _internal_event() const;
  ::google::cloud::dialogflow::v2::EventInput* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::google::cloud::dialogflow::v2::EventInput* event);
  ::google::cloud::dialogflow::v2::EventInput* unsafe_arena_release_event();

  void clear_input();
  InputCase input_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.QueryInput)
 private:
  class _Internal;
  void set_has_audio_config();
  void set_has_text();
  void set_has_event();

  inline bool has_input() const;
  inline void clear_has_input();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InputUnion {
    constexpr InputUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::dialogflow::v2::InputAudioConfig* audio_config_;
    ::google::cloud::dialogflow::v2::TextInput* text_;
    ::google::cloud::dialogflow::v2::EventInput* event_;
  } input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class QueryResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  virtual ~QueryResult();
  explicit constexpr QueryResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(nullptr);
  }

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.QueryResult";
  }
  protected:
  explicit QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFulfillmentMessagesFieldNumber = 7,
    kOutputContextsFieldNumber = 10,
    kQueryTextFieldNumber = 1,
    kActionFieldNumber = 3,
    kFulfillmentTextFieldNumber = 6,
    kWebhookSourceFieldNumber = 8,
    kLanguageCodeFieldNumber = 15,
    kParametersFieldNumber = 4,
    kWebhookPayloadFieldNumber = 9,
    kIntentFieldNumber = 11,
    kDiagnosticInfoFieldNumber = 14,
    kSentimentAnalysisResultFieldNumber = 17,
    kSpeechRecognitionConfidenceFieldNumber = 2,
    kIntentDetectionConfidenceFieldNumber = 12,
    kAllRequiredParamsPresentFieldNumber = 5,
    kCancelsSlotFillingFieldNumber = 21,
  };
  // repeated .google.cloud.dialogflow.v2.Intent.Message fulfillment_messages = 7;
  int fulfillment_messages_size() const;
  private:
  int _internal_fulfillment_messages_size() const;
  public:
  void clear_fulfillment_messages();
  ::google::cloud::dialogflow::v2::Intent_Message* mutable_fulfillment_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >*
      mutable_fulfillment_messages();
  private:
  const ::google::cloud::dialogflow::v2::Intent_Message& _internal_fulfillment_messages(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message* _internal_add_fulfillment_messages();
  public:
  const ::google::cloud::dialogflow::v2::Intent_Message& fulfillment_messages(int index) const;
  ::google::cloud::dialogflow::v2::Intent_Message* add_fulfillment_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >&
      fulfillment_messages() const;

  // repeated .google.cloud.dialogflow.v2.Context output_contexts = 10;
  int output_contexts_size() const;
  private:
  int _internal_output_contexts_size() const;
  public:
  void clear_output_contexts();
  ::google::cloud::dialogflow::v2::Context* mutable_output_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
      mutable_output_contexts();
  private:
  const ::google::cloud::dialogflow::v2::Context& _internal_output_contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* _internal_add_output_contexts();
  public:
  const ::google::cloud::dialogflow::v2::Context& output_contexts(int index) const;
  ::google::cloud::dialogflow::v2::Context* add_output_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
      output_contexts() const;

  // string query_text = 1;
  void clear_query_text();
  const std::string& query_text() const;
  void set_query_text(const std::string& value);
  void set_query_text(std::string&& value);
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  std::string* mutable_query_text();
  std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string fulfillment_text = 6;
  void clear_fulfillment_text();
  const std::string& fulfillment_text() const;
  void set_fulfillment_text(const std::string& value);
  void set_fulfillment_text(std::string&& value);
  void set_fulfillment_text(const char* value);
  void set_fulfillment_text(const char* value, size_t size);
  std::string* mutable_fulfillment_text();
  std::string* release_fulfillment_text();
  void set_allocated_fulfillment_text(std::string* fulfillment_text);
  private:
  const std::string& _internal_fulfillment_text() const;
  void _internal_set_fulfillment_text(const std::string& value);
  std::string* _internal_mutable_fulfillment_text();
  public:

  // string webhook_source = 8;
  void clear_webhook_source();
  const std::string& webhook_source() const;
  void set_webhook_source(const std::string& value);
  void set_webhook_source(std::string&& value);
  void set_webhook_source(const char* value);
  void set_webhook_source(const char* value, size_t size);
  std::string* mutable_webhook_source();
  std::string* release_webhook_source();
  void set_allocated_webhook_source(std::string* webhook_source);
  private:
  const std::string& _internal_webhook_source() const;
  void _internal_set_webhook_source(const std::string& value);
  std::string* _internal_mutable_webhook_source();
  public:

  // string language_code = 15;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Struct parameters = 4;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Struct& parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_parameters();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Struct* parameters);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_parameters();

  // .google.protobuf.Struct webhook_payload = 9;
  bool has_webhook_payload() const;
  private:
  bool _internal_has_webhook_payload() const;
  public:
  void clear_webhook_payload();
  const PROTOBUF_NAMESPACE_ID::Struct& webhook_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_webhook_payload();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_webhook_payload();
  void set_allocated_webhook_payload(PROTOBUF_NAMESPACE_ID::Struct* webhook_payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_webhook_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_webhook_payload();
  public:
  void unsafe_arena_set_allocated_webhook_payload(
      PROTOBUF_NAMESPACE_ID::Struct* webhook_payload);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_webhook_payload();

  // .google.cloud.dialogflow.v2.Intent intent = 11;
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::google::cloud::dialogflow::v2::Intent& intent() const;
  ::google::cloud::dialogflow::v2::Intent* release_intent();
  ::google::cloud::dialogflow::v2::Intent* mutable_intent();
  void set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent);
  private:
  const ::google::cloud::dialogflow::v2::Intent& _internal_intent() const;
  ::google::cloud::dialogflow::v2::Intent* _internal_mutable_intent();
  public:
  void unsafe_arena_set_allocated_intent(
      ::google::cloud::dialogflow::v2::Intent* intent);
  ::google::cloud::dialogflow::v2::Intent* unsafe_arena_release_intent();

  // .google.protobuf.Struct diagnostic_info = 14;
  bool has_diagnostic_info() const;
  private:
  bool _internal_has_diagnostic_info() const;
  public:
  void clear_diagnostic_info();
  const PROTOBUF_NAMESPACE_ID::Struct& diagnostic_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_diagnostic_info();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_diagnostic_info();
  void set_allocated_diagnostic_info(PROTOBUF_NAMESPACE_ID::Struct* diagnostic_info);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_diagnostic_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_diagnostic_info();
  public:
  void unsafe_arena_set_allocated_diagnostic_info(
      PROTOBUF_NAMESPACE_ID::Struct* diagnostic_info);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_diagnostic_info();

  // .google.cloud.dialogflow.v2.SentimentAnalysisResult sentiment_analysis_result = 17;
  bool has_sentiment_analysis_result() const;
  private:
  bool _internal_has_sentiment_analysis_result() const;
  public:
  void clear_sentiment_analysis_result();
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& sentiment_analysis_result() const;
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* release_sentiment_analysis_result();
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* mutable_sentiment_analysis_result();
  void set_allocated_sentiment_analysis_result(::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_result);
  private:
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& _internal_sentiment_analysis_result() const;
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* _internal_mutable_sentiment_analysis_result();
  public:
  void unsafe_arena_set_allocated_sentiment_analysis_result(
      ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_result);
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* unsafe_arena_release_sentiment_analysis_result();

  // float speech_recognition_confidence = 2;
  void clear_speech_recognition_confidence();
  float speech_recognition_confidence() const;
  void set_speech_recognition_confidence(float value);
  private:
  float _internal_speech_recognition_confidence() const;
  void _internal_set_speech_recognition_confidence(float value);
  public:

  // float intent_detection_confidence = 12;
  void clear_intent_detection_confidence();
  float intent_detection_confidence() const;
  void set_intent_detection_confidence(float value);
  private:
  float _internal_intent_detection_confidence() const;
  void _internal_set_intent_detection_confidence(float value);
  public:

  // bool all_required_params_present = 5;
  void clear_all_required_params_present();
  bool all_required_params_present() const;
  void set_all_required_params_present(bool value);
  private:
  bool _internal_all_required_params_present() const;
  void _internal_set_all_required_params_present(bool value);
  public:

  // bool cancels_slot_filling = 21;
  void clear_cancels_slot_filling();
  bool cancels_slot_filling() const;
  void set_cancels_slot_filling(bool value);
  private:
  bool _internal_cancels_slot_filling() const;
  void _internal_set_cancels_slot_filling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.QueryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message > fulfillment_messages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context > output_contexts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fulfillment_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webhook_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  PROTOBUF_NAMESPACE_ID::Struct* parameters_;
  PROTOBUF_NAMESPACE_ID::Struct* webhook_payload_;
  ::google::cloud::dialogflow::v2::Intent* intent_;
  PROTOBUF_NAMESPACE_ID::Struct* diagnostic_info_;
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_result_;
  float speech_recognition_confidence_;
  float intent_detection_confidence_;
  bool all_required_params_present_;
  bool cancels_slot_filling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class StreamingDetectIntentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.StreamingDetectIntentRequest) */ {
 public:
  inline StreamingDetectIntentRequest() : StreamingDetectIntentRequest(nullptr) {}
  virtual ~StreamingDetectIntentRequest();
  explicit constexpr StreamingDetectIntentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingDetectIntentRequest(const StreamingDetectIntentRequest& from);
  StreamingDetectIntentRequest(StreamingDetectIntentRequest&& from) noexcept
    : StreamingDetectIntentRequest() {
    *this = ::std::move(from);
  }

  inline StreamingDetectIntentRequest& operator=(const StreamingDetectIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingDetectIntentRequest& operator=(StreamingDetectIntentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingDetectIntentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingDetectIntentRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingDetectIntentRequest*>(
               &_StreamingDetectIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamingDetectIntentRequest& a, StreamingDetectIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingDetectIntentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingDetectIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingDetectIntentRequest* New() const final {
    return CreateMaybeMessage<StreamingDetectIntentRequest>(nullptr);
  }

  StreamingDetectIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingDetectIntentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingDetectIntentRequest& from);
  void MergeFrom(const StreamingDetectIntentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingDetectIntentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.StreamingDetectIntentRequest";
  }
  protected:
  explicit StreamingDetectIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kInputAudioFieldNumber = 6,
    kQueryParamsFieldNumber = 2,
    kQueryInputFieldNumber = 3,
    kOutputAudioConfigFieldNumber = 5,
    kOutputAudioConfigMaskFieldNumber = 7,
    kSingleUtteranceFieldNumber = 4,
  };
  // string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // bytes input_audio = 6;
  void clear_input_audio();
  const std::string& input_audio() const;
  void set_input_audio(const std::string& value);
  void set_input_audio(std::string&& value);
  void set_input_audio(const char* value);
  void set_input_audio(const void* value, size_t size);
  std::string* mutable_input_audio();
  std::string* release_input_audio();
  void set_allocated_input_audio(std::string* input_audio);
  private:
  const std::string& _internal_input_audio() const;
  void _internal_set_input_audio(const std::string& value);
  std::string* _internal_mutable_input_audio();
  public:

  // .google.cloud.dialogflow.v2.QueryParameters query_params = 2;
  bool has_query_params() const;
  private:
  bool _internal_has_query_params() const;
  public:
  void clear_query_params();
  const ::google::cloud::dialogflow::v2::QueryParameters& query_params() const;
  ::google::cloud::dialogflow::v2::QueryParameters* release_query_params();
  ::google::cloud::dialogflow::v2::QueryParameters* mutable_query_params();
  void set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params);
  private:
  const ::google::cloud::dialogflow::v2::QueryParameters& _internal_query_params() const;
  ::google::cloud::dialogflow::v2::QueryParameters* _internal_mutable_query_params();
  public:
  void unsafe_arena_set_allocated_query_params(
      ::google::cloud::dialogflow::v2::QueryParameters* query_params);
  ::google::cloud::dialogflow::v2::QueryParameters* unsafe_arena_release_query_params();

  // .google.cloud.dialogflow.v2.QueryInput query_input = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_query_input() const;
  private:
  bool _internal_has_query_input() const;
  public:
  void clear_query_input();
  const ::google::cloud::dialogflow::v2::QueryInput& query_input() const;
  ::google::cloud::dialogflow::v2::QueryInput* release_query_input();
  ::google::cloud::dialogflow::v2::QueryInput* mutable_query_input();
  void set_allocated_query_input(::google::cloud::dialogflow::v2::QueryInput* query_input);
  private:
  const ::google::cloud::dialogflow::v2::QueryInput& _internal_query_input() const;
  ::google::cloud::dialogflow::v2::QueryInput* _internal_mutable_query_input();
  public:
  void unsafe_arena_set_allocated_query_input(
      ::google::cloud::dialogflow::v2::QueryInput* query_input);
  ::google::cloud::dialogflow::v2::QueryInput* unsafe_arena_release_query_input();

  // .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 5;
  bool has_output_audio_config() const;
  private:
  bool _internal_has_output_audio_config() const;
  public:
  void clear_output_audio_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* release_output_audio_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_output_audio_config();
  void set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_output_audio_config();
  public:
  void unsafe_arena_set_allocated_output_audio_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_output_audio_config();

  // .google.protobuf.FieldMask output_audio_config_mask = 7;
  bool has_output_audio_config_mask() const;
  private:
  bool _internal_has_output_audio_config_mask() const;
  public:
  void clear_output_audio_config_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& output_audio_config_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_output_audio_config_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_output_audio_config_mask();
  void set_allocated_output_audio_config_mask(PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_output_audio_config_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_output_audio_config_mask();
  public:
  void unsafe_arena_set_allocated_output_audio_config_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_output_audio_config_mask();

  // bool single_utterance = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_single_utterance();
  PROTOBUF_DEPRECATED bool single_utterance() const;
  PROTOBUF_DEPRECATED void set_single_utterance(bool value);
  private:
  bool _internal_single_utterance() const;
  void _internal_set_single_utterance(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.StreamingDetectIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_audio_;
  ::google::cloud::dialogflow::v2::QueryParameters* query_params_;
  ::google::cloud::dialogflow::v2::QueryInput* query_input_;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config_;
  PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask_;
  bool single_utterance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class StreamingDetectIntentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.StreamingDetectIntentResponse) */ {
 public:
  inline StreamingDetectIntentResponse() : StreamingDetectIntentResponse(nullptr) {}
  virtual ~StreamingDetectIntentResponse();
  explicit constexpr StreamingDetectIntentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingDetectIntentResponse(const StreamingDetectIntentResponse& from);
  StreamingDetectIntentResponse(StreamingDetectIntentResponse&& from) noexcept
    : StreamingDetectIntentResponse() {
    *this = ::std::move(from);
  }

  inline StreamingDetectIntentResponse& operator=(const StreamingDetectIntentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingDetectIntentResponse& operator=(StreamingDetectIntentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingDetectIntentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingDetectIntentResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingDetectIntentResponse*>(
               &_StreamingDetectIntentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamingDetectIntentResponse& a, StreamingDetectIntentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingDetectIntentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingDetectIntentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingDetectIntentResponse* New() const final {
    return CreateMaybeMessage<StreamingDetectIntentResponse>(nullptr);
  }

  StreamingDetectIntentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingDetectIntentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingDetectIntentResponse& from);
  void MergeFrom(const StreamingDetectIntentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingDetectIntentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.StreamingDetectIntentResponse";
  }
  protected:
  explicit StreamingDetectIntentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseIdFieldNumber = 1,
    kOutputAudioFieldNumber = 5,
    kRecognitionResultFieldNumber = 2,
    kQueryResultFieldNumber = 3,
    kWebhookStatusFieldNumber = 4,
    kOutputAudioConfigFieldNumber = 6,
  };
  // string response_id = 1;
  void clear_response_id();
  const std::string& response_id() const;
  void set_response_id(const std::string& value);
  void set_response_id(std::string&& value);
  void set_response_id(const char* value);
  void set_response_id(const char* value, size_t size);
  std::string* mutable_response_id();
  std::string* release_response_id();
  void set_allocated_response_id(std::string* response_id);
  private:
  const std::string& _internal_response_id() const;
  void _internal_set_response_id(const std::string& value);
  std::string* _internal_mutable_response_id();
  public:

  // bytes output_audio = 5;
  void clear_output_audio();
  const std::string& output_audio() const;
  void set_output_audio(const std::string& value);
  void set_output_audio(std::string&& value);
  void set_output_audio(const char* value);
  void set_output_audio(const void* value, size_t size);
  std::string* mutable_output_audio();
  std::string* release_output_audio();
  void set_allocated_output_audio(std::string* output_audio);
  private:
  const std::string& _internal_output_audio() const;
  void _internal_set_output_audio(const std::string& value);
  std::string* _internal_mutable_output_audio();
  public:

  // .google.cloud.dialogflow.v2.StreamingRecognitionResult recognition_result = 2;
  bool has_recognition_result() const;
  private:
  bool _internal_has_recognition_result() const;
  public:
  void clear_recognition_result();
  const ::google::cloud::dialogflow::v2::StreamingRecognitionResult& recognition_result() const;
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* release_recognition_result();
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* mutable_recognition_result();
  void set_allocated_recognition_result(::google::cloud::dialogflow::v2::StreamingRecognitionResult* recognition_result);
  private:
  const ::google::cloud::dialogflow::v2::StreamingRecognitionResult& _internal_recognition_result() const;
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* _internal_mutable_recognition_result();
  public:
  void unsafe_arena_set_allocated_recognition_result(
      ::google::cloud::dialogflow::v2::StreamingRecognitionResult* recognition_result);
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* unsafe_arena_release_recognition_result();

  // .google.cloud.dialogflow.v2.QueryResult query_result = 3;
  bool has_query_result() const;
  private:
  bool _internal_has_query_result() const;
  public:
  void clear_query_result();
  const ::google::cloud::dialogflow::v2::QueryResult& query_result() const;
  ::google::cloud::dialogflow::v2::QueryResult* release_query_result();
  ::google::cloud::dialogflow::v2::QueryResult* mutable_query_result();
  void set_allocated_query_result(::google::cloud::dialogflow::v2::QueryResult* query_result);
  private:
  const ::google::cloud::dialogflow::v2::QueryResult& _internal_query_result() const;
  ::google::cloud::dialogflow::v2::QueryResult* _internal_mutable_query_result();
  public:
  void unsafe_arena_set_allocated_query_result(
      ::google::cloud::dialogflow::v2::QueryResult* query_result);
  ::google::cloud::dialogflow::v2::QueryResult* unsafe_arena_release_query_result();

  // .google.rpc.Status webhook_status = 4;
  bool has_webhook_status() const;
  private:
  bool _internal_has_webhook_status() const;
  public:
  void clear_webhook_status();
  const ::google::rpc::Status& webhook_status() const;
  ::google::rpc::Status* release_webhook_status();
  ::google::rpc::Status* mutable_webhook_status();
  void set_allocated_webhook_status(::google::rpc::Status* webhook_status);
  private:
  const ::google::rpc::Status& _internal_webhook_status() const;
  ::google::rpc::Status* _internal_mutable_webhook_status();
  public:
  void unsafe_arena_set_allocated_webhook_status(
      ::google::rpc::Status* webhook_status);
  ::google::rpc::Status* unsafe_arena_release_webhook_status();

  // .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 6;
  bool has_output_audio_config() const;
  private:
  bool _internal_has_output_audio_config() const;
  public:
  void clear_output_audio_config();
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* release_output_audio_config();
  ::google::cloud::dialogflow::v2::OutputAudioConfig* mutable_output_audio_config();
  void set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  private:
  const ::google::cloud::dialogflow::v2::OutputAudioConfig& _internal_output_audio_config() const;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* _internal_mutable_output_audio_config();
  public:
  void unsafe_arena_set_allocated_output_audio_config(
      ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config);
  ::google::cloud::dialogflow::v2::OutputAudioConfig* unsafe_arena_release_output_audio_config();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.StreamingDetectIntentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_audio_;
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* recognition_result_;
  ::google::cloud::dialogflow::v2::QueryResult* query_result_;
  ::google::rpc::Status* webhook_status_;
  ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.StreamingRecognitionResult) */ {
 public:
  inline StreamingRecognitionResult() : StreamingRecognitionResult(nullptr) {}
  virtual ~StreamingRecognitionResult();
  explicit constexpr StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionResult(const StreamingRecognitionResult& from);
  StreamingRecognitionResult(StreamingRecognitionResult&& from) noexcept
    : StreamingRecognitionResult() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionResult& operator=(const StreamingRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionResult& operator=(StreamingRecognitionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionResult*>(
               &_StreamingRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamingRecognitionResult& a, StreamingRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingRecognitionResult* New() const final {
    return CreateMaybeMessage<StreamingRecognitionResult>(nullptr);
  }

  StreamingRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingRecognitionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingRecognitionResult& from);
  void MergeFrom(const StreamingRecognitionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.StreamingRecognitionResult";
  }
  protected:
  explicit StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamingRecognitionResult_MessageType MessageType;
  static constexpr MessageType MESSAGE_TYPE_UNSPECIFIED =
    StreamingRecognitionResult_MessageType_MESSAGE_TYPE_UNSPECIFIED;
  static constexpr MessageType TRANSCRIPT =
    StreamingRecognitionResult_MessageType_TRANSCRIPT;
  static constexpr MessageType END_OF_SINGLE_UTTERANCE =
    StreamingRecognitionResult_MessageType_END_OF_SINGLE_UTTERANCE;
  static inline bool MessageType_IsValid(int value) {
    return StreamingRecognitionResult_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    StreamingRecognitionResult_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    StreamingRecognitionResult_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    StreamingRecognitionResult_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return StreamingRecognitionResult_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return StreamingRecognitionResult_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return StreamingRecognitionResult_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechWordInfoFieldNumber = 7,
    kTranscriptFieldNumber = 2,
    kLanguageCodeFieldNumber = 10,
    kSpeechEndOffsetFieldNumber = 8,
    kMessageTypeFieldNumber = 1,
    kIsFinalFieldNumber = 3,
    kConfidenceFieldNumber = 4,
  };
  // repeated .google.cloud.dialogflow.v2.SpeechWordInfo speech_word_info = 7;
  int speech_word_info_size() const;
  private:
  int _internal_speech_word_info_size() const;
  public:
  void clear_speech_word_info();
  ::google::cloud::dialogflow::v2::SpeechWordInfo* mutable_speech_word_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SpeechWordInfo >*
      mutable_speech_word_info();
  private:
  const ::google::cloud::dialogflow::v2::SpeechWordInfo& _internal_speech_word_info(int index) const;
  ::google::cloud::dialogflow::v2::SpeechWordInfo* _internal_add_speech_word_info();
  public:
  const ::google::cloud::dialogflow::v2::SpeechWordInfo& speech_word_info(int index) const;
  ::google::cloud::dialogflow::v2::SpeechWordInfo* add_speech_word_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SpeechWordInfo >&
      speech_word_info() const;

  // string transcript = 2;
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // string language_code = 10;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Duration speech_end_offset = 8;
  bool has_speech_end_offset() const;
  private:
  bool _internal_has_speech_end_offset() const;
  public:
  void clear_speech_end_offset();
  const PROTOBUF_NAMESPACE_ID::Duration& speech_end_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_speech_end_offset();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_speech_end_offset();
  void set_allocated_speech_end_offset(PROTOBUF_NAMESPACE_ID::Duration* speech_end_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_speech_end_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_speech_end_offset();
  public:
  void unsafe_arena_set_allocated_speech_end_offset(
      PROTOBUF_NAMESPACE_ID::Duration* speech_end_offset);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_speech_end_offset();

  // .google.cloud.dialogflow.v2.StreamingRecognitionResult.MessageType message_type = 1;
  void clear_message_type();
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType message_type() const;
  void set_message_type(::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType value);
  private:
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType _internal_message_type() const;
  void _internal_set_message_type(::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType value);
  public:

  // bool is_final = 3;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.StreamingRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SpeechWordInfo > speech_word_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  PROTOBUF_NAMESPACE_ID::Duration* speech_end_offset_;
  int message_type_;
  bool is_final_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class TextInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.TextInput) */ {
 public:
  inline TextInput() : TextInput(nullptr) {}
  virtual ~TextInput();
  explicit constexpr TextInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextInput(const TextInput& from);
  TextInput(TextInput&& from) noexcept
    : TextInput() {
    *this = ::std::move(from);
  }

  inline TextInput& operator=(const TextInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextInput& operator=(TextInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextInput* internal_default_instance() {
    return reinterpret_cast<const TextInput*>(
               &_TextInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TextInput& a, TextInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TextInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextInput* New() const final {
    return CreateMaybeMessage<TextInput>(nullptr);
  }

  TextInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextInput& from);
  void MergeFrom(const TextInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.TextInput";
  }
  protected:
  explicit TextInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
  };
  // string text = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string language_code = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.TextInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class EventInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.EventInput) */ {
 public:
  inline EventInput() : EventInput(nullptr) {}
  virtual ~EventInput();
  explicit constexpr EventInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventInput(const EventInput& from);
  EventInput(EventInput&& from) noexcept
    : EventInput() {
    *this = ::std::move(from);
  }

  inline EventInput& operator=(const EventInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventInput& operator=(EventInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventInput* internal_default_instance() {
    return reinterpret_cast<const EventInput*>(
               &_EventInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EventInput& a, EventInput& b) {
    a.Swap(&b);
  }
  inline void Swap(EventInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventInput* New() const final {
    return CreateMaybeMessage<EventInput>(nullptr);
  }

  EventInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventInput& from);
  void MergeFrom(const EventInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.EventInput";
  }
  protected:
  explicit EventInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 3,
    kParametersFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Struct parameters = 2;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Struct& parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_parameters();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Struct* parameters);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.EventInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  PROTOBUF_NAMESPACE_ID::Struct* parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class SentimentAnalysisRequestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig) */ {
 public:
  inline SentimentAnalysisRequestConfig() : SentimentAnalysisRequestConfig(nullptr) {}
  virtual ~SentimentAnalysisRequestConfig();
  explicit constexpr SentimentAnalysisRequestConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SentimentAnalysisRequestConfig(const SentimentAnalysisRequestConfig& from);
  SentimentAnalysisRequestConfig(SentimentAnalysisRequestConfig&& from) noexcept
    : SentimentAnalysisRequestConfig() {
    *this = ::std::move(from);
  }

  inline SentimentAnalysisRequestConfig& operator=(const SentimentAnalysisRequestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentimentAnalysisRequestConfig& operator=(SentimentAnalysisRequestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentimentAnalysisRequestConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentimentAnalysisRequestConfig* internal_default_instance() {
    return reinterpret_cast<const SentimentAnalysisRequestConfig*>(
               &_SentimentAnalysisRequestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SentimentAnalysisRequestConfig& a, SentimentAnalysisRequestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SentimentAnalysisRequestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentimentAnalysisRequestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentimentAnalysisRequestConfig* New() const final {
    return CreateMaybeMessage<SentimentAnalysisRequestConfig>(nullptr);
  }

  SentimentAnalysisRequestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentimentAnalysisRequestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentimentAnalysisRequestConfig& from);
  void MergeFrom(const SentimentAnalysisRequestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentimentAnalysisRequestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig";
  }
  protected:
  explicit SentimentAnalysisRequestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalyzeQueryTextSentimentFieldNumber = 1,
  };
  // bool analyze_query_text_sentiment = 1;
  void clear_analyze_query_text_sentiment();
  bool analyze_query_text_sentiment() const;
  void set_analyze_query_text_sentiment(bool value);
  private:
  bool _internal_analyze_query_text_sentiment() const;
  void _internal_set_analyze_query_text_sentiment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool analyze_query_text_sentiment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class SentimentAnalysisResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.SentimentAnalysisResult) */ {
 public:
  inline SentimentAnalysisResult() : SentimentAnalysisResult(nullptr) {}
  virtual ~SentimentAnalysisResult();
  explicit constexpr SentimentAnalysisResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SentimentAnalysisResult(const SentimentAnalysisResult& from);
  SentimentAnalysisResult(SentimentAnalysisResult&& from) noexcept
    : SentimentAnalysisResult() {
    *this = ::std::move(from);
  }

  inline SentimentAnalysisResult& operator=(const SentimentAnalysisResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentimentAnalysisResult& operator=(SentimentAnalysisResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentimentAnalysisResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentimentAnalysisResult* internal_default_instance() {
    return reinterpret_cast<const SentimentAnalysisResult*>(
               &_SentimentAnalysisResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SentimentAnalysisResult& a, SentimentAnalysisResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SentimentAnalysisResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentimentAnalysisResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentimentAnalysisResult* New() const final {
    return CreateMaybeMessage<SentimentAnalysisResult>(nullptr);
  }

  SentimentAnalysisResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentimentAnalysisResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentimentAnalysisResult& from);
  void MergeFrom(const SentimentAnalysisResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentimentAnalysisResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.SentimentAnalysisResult";
  }
  protected:
  explicit SentimentAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryTextSentimentFieldNumber = 1,
  };
  // .google.cloud.dialogflow.v2.Sentiment query_text_sentiment = 1;
  bool has_query_text_sentiment() const;
  private:
  bool _internal_has_query_text_sentiment() const;
  public:
  void clear_query_text_sentiment();
  const ::google::cloud::dialogflow::v2::Sentiment& query_text_sentiment() const;
  ::google::cloud::dialogflow::v2::Sentiment* release_query_text_sentiment();
  ::google::cloud::dialogflow::v2::Sentiment* mutable_query_text_sentiment();
  void set_allocated_query_text_sentiment(::google::cloud::dialogflow::v2::Sentiment* query_text_sentiment);
  private:
  const ::google::cloud::dialogflow::v2::Sentiment& _internal_query_text_sentiment() const;
  ::google::cloud::dialogflow::v2::Sentiment* _internal_mutable_query_text_sentiment();
  public:
  void unsafe_arena_set_allocated_query_text_sentiment(
      ::google::cloud::dialogflow::v2::Sentiment* query_text_sentiment);
  ::google::cloud::dialogflow::v2::Sentiment* unsafe_arena_release_query_text_sentiment();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.SentimentAnalysisResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::dialogflow::v2::Sentiment* query_text_sentiment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// -------------------------------------------------------------------

class Sentiment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2.Sentiment) */ {
 public:
  inline Sentiment() : Sentiment(nullptr) {}
  virtual ~Sentiment();
  explicit constexpr Sentiment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sentiment(const Sentiment& from);
  Sentiment(Sentiment&& from) noexcept
    : Sentiment() {
    *this = ::std::move(from);
  }

  inline Sentiment& operator=(const Sentiment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sentiment& operator=(Sentiment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sentiment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sentiment* internal_default_instance() {
    return reinterpret_cast<const Sentiment*>(
               &_Sentiment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Sentiment& a, Sentiment& b) {
    a.Swap(&b);
  }
  inline void Swap(Sentiment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sentiment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sentiment* New() const final {
    return CreateMaybeMessage<Sentiment>(nullptr);
  }

  Sentiment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sentiment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sentiment& from);
  void MergeFrom(const Sentiment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sentiment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2.Sentiment";
  }
  protected:
  explicit Sentiment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kMagnitudeFieldNumber = 2,
  };
  // float score = 1;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float magnitude = 2;
  void clear_magnitude();
  float magnitude() const;
  void set_magnitude(float value);
  private:
  float _internal_magnitude() const;
  void _internal_set_magnitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2.Sentiment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float score_;
  float magnitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectIntentRequest

// string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DetectIntentRequest::clear_session() {
  session_.ClearToEmpty();
}
inline const std::string& DetectIntentRequest::session() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.session)
  return _internal_session();
}
inline void DetectIntentRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DetectIntentRequest.session)
}
inline std::string* DetectIntentRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.session)
  return _internal_mutable_session();
}
inline const std::string& DetectIntentRequest::_internal_session() const {
  return session_.Get();
}
inline void DetectIntentRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetectIntentRequest::set_session(std::string&& value) {
  
  session_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.DetectIntentRequest.session)
}
inline void DetectIntentRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.DetectIntentRequest.session)
}
inline void DetectIntentRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.DetectIntentRequest.session)
}
inline std::string* DetectIntentRequest::_internal_mutable_session() {
  
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetectIntentRequest::release_session() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectIntentRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.session)
}

// .google.cloud.dialogflow.v2.QueryParameters query_params = 2;
inline bool DetectIntentRequest::_internal_has_query_params() const {
  return this != internal_default_instance() && query_params_ != nullptr;
}
inline bool DetectIntentRequest::has_query_params() const {
  return _internal_has_query_params();
}
inline void DetectIntentRequest::clear_query_params() {
  if (GetArena() == nullptr && query_params_ != nullptr) {
    delete query_params_;
  }
  query_params_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& DetectIntentRequest::_internal_query_params() const {
  const ::google::cloud::dialogflow::v2::QueryParameters* p = query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryParameters&>(
      ::google::cloud::dialogflow::v2::_QueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& DetectIntentRequest::query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.query_params)
  return _internal_query_params();
}
inline void DetectIntentRequest::unsafe_arena_set_allocated_query_params(
    ::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_params_);
  }
  query_params_ = query_params;
  if (query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.query_params)
}
inline ::google::cloud::dialogflow::v2::QueryParameters* DetectIntentRequest::release_query_params() {
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = query_params_;
  query_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* DetectIntentRequest::unsafe_arena_release_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.query_params)
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = query_params_;
  query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* DetectIntentRequest::_internal_mutable_query_params() {
  
  if (query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryParameters>(GetArena());
    query_params_ = p;
  }
  return query_params_;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* DetectIntentRequest::mutable_query_params() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.query_params)
  return _internal_mutable_query_params();
}
inline void DetectIntentRequest::set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_params_;
  }
  if (query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_params);
    if (message_arena != submessage_arena) {
      query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_params, submessage_arena);
    }
    
  } else {
    
  }
  query_params_ = query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.query_params)
}

// .google.cloud.dialogflow.v2.QueryInput query_input = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool DetectIntentRequest::_internal_has_query_input() const {
  return this != internal_default_instance() && query_input_ != nullptr;
}
inline bool DetectIntentRequest::has_query_input() const {
  return _internal_has_query_input();
}
inline void DetectIntentRequest::clear_query_input() {
  if (GetArena() == nullptr && query_input_ != nullptr) {
    delete query_input_;
  }
  query_input_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryInput& DetectIntentRequest::_internal_query_input() const {
  const ::google::cloud::dialogflow::v2::QueryInput* p = query_input_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryInput&>(
      ::google::cloud::dialogflow::v2::_QueryInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryInput& DetectIntentRequest::query_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.query_input)
  return _internal_query_input();
}
inline void DetectIntentRequest::unsafe_arena_set_allocated_query_input(
    ::google::cloud::dialogflow::v2::QueryInput* query_input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_input_);
  }
  query_input_ = query_input;
  if (query_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.query_input)
}
inline ::google::cloud::dialogflow::v2::QueryInput* DetectIntentRequest::release_query_input() {
  
  ::google::cloud::dialogflow::v2::QueryInput* temp = query_input_;
  query_input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryInput* DetectIntentRequest::unsafe_arena_release_query_input() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.query_input)
  
  ::google::cloud::dialogflow::v2::QueryInput* temp = query_input_;
  query_input_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryInput* DetectIntentRequest::_internal_mutable_query_input() {
  
  if (query_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryInput>(GetArena());
    query_input_ = p;
  }
  return query_input_;
}
inline ::google::cloud::dialogflow::v2::QueryInput* DetectIntentRequest::mutable_query_input() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.query_input)
  return _internal_mutable_query_input();
}
inline void DetectIntentRequest::set_allocated_query_input(::google::cloud::dialogflow::v2::QueryInput* query_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_input_;
  }
  if (query_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_input);
    if (message_arena != submessage_arena) {
      query_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_input, submessage_arena);
    }
    
  } else {
    
  }
  query_input_ = query_input;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.query_input)
}

// .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 4;
inline bool DetectIntentRequest::_internal_has_output_audio_config() const {
  return this != internal_default_instance() && output_audio_config_ != nullptr;
}
inline bool DetectIntentRequest::has_output_audio_config() const {
  return _internal_has_output_audio_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& DetectIntentRequest::_internal_output_audio_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = output_audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& DetectIntentRequest::output_audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config)
  return _internal_output_audio_config();
}
inline void DetectIntentRequest::unsafe_arena_set_allocated_output_audio_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  output_audio_config_ = output_audio_config;
  if (output_audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentRequest::release_output_audio_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentRequest::unsafe_arena_release_output_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentRequest::_internal_mutable_output_audio_config() {
  
  if (output_audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArena());
    output_audio_config_ = p;
  }
  return output_audio_config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentRequest::mutable_output_audio_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config)
  return _internal_mutable_output_audio_config();
}
inline void DetectIntentRequest::set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  if (output_audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_ = output_audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config)
}

// .google.protobuf.FieldMask output_audio_config_mask = 7;
inline bool DetectIntentRequest::_internal_has_output_audio_config_mask() const {
  return this != internal_default_instance() && output_audio_config_mask_ != nullptr;
}
inline bool DetectIntentRequest::has_output_audio_config_mask() const {
  return _internal_has_output_audio_config_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& DetectIntentRequest::_internal_output_audio_config_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = output_audio_config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& DetectIntentRequest::output_audio_config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config_mask)
  return _internal_output_audio_config_mask();
}
inline void DetectIntentRequest::unsafe_arena_set_allocated_output_audio_config_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask_);
  }
  output_audio_config_mask_ = output_audio_config_mask;
  if (output_audio_config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* DetectIntentRequest::release_output_audio_config_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = output_audio_config_mask_;
  output_audio_config_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* DetectIntentRequest::unsafe_arena_release_output_audio_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = output_audio_config_mask_;
  output_audio_config_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* DetectIntentRequest::_internal_mutable_output_audio_config_mask() {
  
  if (output_audio_config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    output_audio_config_mask_ = p;
  }
  return output_audio_config_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* DetectIntentRequest::mutable_output_audio_config_mask() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config_mask)
  return _internal_mutable_output_audio_config_mask();
}
inline void DetectIntentRequest::set_allocated_output_audio_config_mask(PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask_);
  }
  if (output_audio_config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config_mask, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_mask_ = output_audio_config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config_mask)
}

// bytes input_audio = 5;
inline void DetectIntentRequest::clear_input_audio() {
  input_audio_.ClearToEmpty();
}
inline const std::string& DetectIntentRequest::input_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
  return _internal_input_audio();
}
inline void DetectIntentRequest::set_input_audio(const std::string& value) {
  _internal_set_input_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
}
inline std::string* DetectIntentRequest::mutable_input_audio() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
  return _internal_mutable_input_audio();
}
inline const std::string& DetectIntentRequest::_internal_input_audio() const {
  return input_audio_.Get();
}
inline void DetectIntentRequest::_internal_set_input_audio(const std::string& value) {
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetectIntentRequest::set_input_audio(std::string&& value) {
  
  input_audio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
}
inline void DetectIntentRequest::set_input_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
}
inline void DetectIntentRequest::set_input_audio(const void* value,
    size_t size) {
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
}
inline std::string* DetectIntentRequest::_internal_mutable_input_audio() {
  
  return input_audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetectIntentRequest::release_input_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
  return input_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectIntentRequest::set_allocated_input_audio(std::string* input_audio) {
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentRequest.input_audio)
}

// -------------------------------------------------------------------

// DetectIntentResponse

// string response_id = 1;
inline void DetectIntentResponse::clear_response_id() {
  response_id_.ClearToEmpty();
}
inline const std::string& DetectIntentResponse::response_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
  return _internal_response_id();
}
inline void DetectIntentResponse::set_response_id(const std::string& value) {
  _internal_set_response_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
}
inline std::string* DetectIntentResponse::mutable_response_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
  return _internal_mutable_response_id();
}
inline const std::string& DetectIntentResponse::_internal_response_id() const {
  return response_id_.Get();
}
inline void DetectIntentResponse::_internal_set_response_id(const std::string& value) {
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetectIntentResponse::set_response_id(std::string&& value) {
  
  response_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
}
inline void DetectIntentResponse::set_response_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
}
inline void DetectIntentResponse::set_response_id(const char* value,
    size_t size) {
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
}
inline std::string* DetectIntentResponse::_internal_mutable_response_id() {
  
  return response_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetectIntentResponse::release_response_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
  return response_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectIntentResponse::set_allocated_response_id(std::string* response_id) {
  if (response_id != nullptr) {
    
  } else {
    
  }
  response_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.response_id)
}

// .google.cloud.dialogflow.v2.QueryResult query_result = 2;
inline bool DetectIntentResponse::_internal_has_query_result() const {
  return this != internal_default_instance() && query_result_ != nullptr;
}
inline bool DetectIntentResponse::has_query_result() const {
  return _internal_has_query_result();
}
inline void DetectIntentResponse::clear_query_result() {
  if (GetArena() == nullptr && query_result_ != nullptr) {
    delete query_result_;
  }
  query_result_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryResult& DetectIntentResponse::_internal_query_result() const {
  const ::google::cloud::dialogflow::v2::QueryResult* p = query_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryResult&>(
      ::google::cloud::dialogflow::v2::_QueryResult_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryResult& DetectIntentResponse::query_result() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentResponse.query_result)
  return _internal_query_result();
}
inline void DetectIntentResponse::unsafe_arena_set_allocated_query_result(
    ::google::cloud::dialogflow::v2::QueryResult* query_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_result_);
  }
  query_result_ = query_result;
  if (query_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.query_result)
}
inline ::google::cloud::dialogflow::v2::QueryResult* DetectIntentResponse::release_query_result() {
  
  ::google::cloud::dialogflow::v2::QueryResult* temp = query_result_;
  query_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryResult* DetectIntentResponse::unsafe_arena_release_query_result() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentResponse.query_result)
  
  ::google::cloud::dialogflow::v2::QueryResult* temp = query_result_;
  query_result_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryResult* DetectIntentResponse::_internal_mutable_query_result() {
  
  if (query_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryResult>(GetArena());
    query_result_ = p;
  }
  return query_result_;
}
inline ::google::cloud::dialogflow::v2::QueryResult* DetectIntentResponse::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentResponse.query_result)
  return _internal_mutable_query_result();
}
inline void DetectIntentResponse::set_allocated_query_result(::google::cloud::dialogflow::v2::QueryResult* query_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_result_;
  }
  if (query_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_result);
    if (message_arena != submessage_arena) {
      query_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_result, submessage_arena);
    }
    
  } else {
    
  }
  query_result_ = query_result;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.query_result)
}

// .google.rpc.Status webhook_status = 3;
inline bool DetectIntentResponse::_internal_has_webhook_status() const {
  return this != internal_default_instance() && webhook_status_ != nullptr;
}
inline bool DetectIntentResponse::has_webhook_status() const {
  return _internal_has_webhook_status();
}
inline const ::google::rpc::Status& DetectIntentResponse::_internal_webhook_status() const {
  const ::google::rpc::Status* p = webhook_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& DetectIntentResponse::webhook_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentResponse.webhook_status)
  return _internal_webhook_status();
}
inline void DetectIntentResponse::unsafe_arena_set_allocated_webhook_status(
    ::google::rpc::Status* webhook_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status_);
  }
  webhook_status_ = webhook_status;
  if (webhook_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.webhook_status)
}
inline ::google::rpc::Status* DetectIntentResponse::release_webhook_status() {
  
  ::google::rpc::Status* temp = webhook_status_;
  webhook_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* DetectIntentResponse::unsafe_arena_release_webhook_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentResponse.webhook_status)
  
  ::google::rpc::Status* temp = webhook_status_;
  webhook_status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* DetectIntentResponse::_internal_mutable_webhook_status() {
  
  if (webhook_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    webhook_status_ = p;
  }
  return webhook_status_;
}
inline ::google::rpc::Status* DetectIntentResponse::mutable_webhook_status() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentResponse.webhook_status)
  return _internal_mutable_webhook_status();
}
inline void DetectIntentResponse::set_allocated_webhook_status(::google::rpc::Status* webhook_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status_);
  }
  if (webhook_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status)->GetArena();
    if (message_arena != submessage_arena) {
      webhook_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webhook_status, submessage_arena);
    }
    
  } else {
    
  }
  webhook_status_ = webhook_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.webhook_status)
}

// bytes output_audio = 4;
inline void DetectIntentResponse::clear_output_audio() {
  output_audio_.ClearToEmpty();
}
inline const std::string& DetectIntentResponse::output_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
  return _internal_output_audio();
}
inline void DetectIntentResponse::set_output_audio(const std::string& value) {
  _internal_set_output_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
}
inline std::string* DetectIntentResponse::mutable_output_audio() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
  return _internal_mutable_output_audio();
}
inline const std::string& DetectIntentResponse::_internal_output_audio() const {
  return output_audio_.Get();
}
inline void DetectIntentResponse::_internal_set_output_audio(const std::string& value) {
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetectIntentResponse::set_output_audio(std::string&& value) {
  
  output_audio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
}
inline void DetectIntentResponse::set_output_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
}
inline void DetectIntentResponse::set_output_audio(const void* value,
    size_t size) {
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
}
inline std::string* DetectIntentResponse::_internal_mutable_output_audio() {
  
  return output_audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetectIntentResponse::release_output_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
  return output_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectIntentResponse::set_allocated_output_audio(std::string* output_audio) {
  if (output_audio != nullptr) {
    
  } else {
    
  }
  output_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio)
}

// .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 6;
inline bool DetectIntentResponse::_internal_has_output_audio_config() const {
  return this != internal_default_instance() && output_audio_config_ != nullptr;
}
inline bool DetectIntentResponse::has_output_audio_config() const {
  return _internal_has_output_audio_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& DetectIntentResponse::_internal_output_audio_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = output_audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& DetectIntentResponse::output_audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio_config)
  return _internal_output_audio_config();
}
inline void DetectIntentResponse::unsafe_arena_set_allocated_output_audio_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  output_audio_config_ = output_audio_config;
  if (output_audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio_config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentResponse::release_output_audio_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentResponse::unsafe_arena_release_output_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio_config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentResponse::_internal_mutable_output_audio_config() {
  
  if (output_audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArena());
    output_audio_config_ = p;
  }
  return output_audio_config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* DetectIntentResponse::mutable_output_audio_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio_config)
  return _internal_mutable_output_audio_config();
}
inline void DetectIntentResponse::set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  if (output_audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_ = output_audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.DetectIntentResponse.output_audio_config)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryParameters

// string time_zone = 1;
inline void QueryParameters::clear_time_zone() {
  time_zone_.ClearToEmpty();
}
inline const std::string& QueryParameters::time_zone() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.time_zone)
  return _internal_time_zone();
}
inline void QueryParameters::set_time_zone(const std::string& value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryParameters.time_zone)
}
inline std::string* QueryParameters::mutable_time_zone() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.time_zone)
  return _internal_mutable_time_zone();
}
inline const std::string& QueryParameters::_internal_time_zone() const {
  return time_zone_.Get();
}
inline void QueryParameters::_internal_set_time_zone(const std::string& value) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryParameters::set_time_zone(std::string&& value) {
  
  time_zone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryParameters.time_zone)
}
inline void QueryParameters::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryParameters.time_zone)
}
inline void QueryParameters::set_time_zone(const char* value,
    size_t size) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryParameters.time_zone)
}
inline std::string* QueryParameters::_internal_mutable_time_zone() {
  
  return time_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryParameters::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryParameters.time_zone)
  return time_zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryParameters::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  time_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryParameters.time_zone)
}

// .google.type.LatLng geo_location = 2;
inline bool QueryParameters::_internal_has_geo_location() const {
  return this != internal_default_instance() && geo_location_ != nullptr;
}
inline bool QueryParameters::has_geo_location() const {
  return _internal_has_geo_location();
}
inline const ::google::type::LatLng& QueryParameters::_internal_geo_location() const {
  const ::google::type::LatLng* p = geo_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::LatLng&>(
      ::google::type::_LatLng_default_instance_);
}
inline const ::google::type::LatLng& QueryParameters::geo_location() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.geo_location)
  return _internal_geo_location();
}
inline void QueryParameters::unsafe_arena_set_allocated_geo_location(
    ::google::type::LatLng* geo_location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_location_);
  }
  geo_location_ = geo_location;
  if (geo_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryParameters.geo_location)
}
inline ::google::type::LatLng* QueryParameters::release_geo_location() {
  
  ::google::type::LatLng* temp = geo_location_;
  geo_location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::type::LatLng* QueryParameters::unsafe_arena_release_geo_location() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryParameters.geo_location)
  
  ::google::type::LatLng* temp = geo_location_;
  geo_location_ = nullptr;
  return temp;
}
inline ::google::type::LatLng* QueryParameters::_internal_mutable_geo_location() {
  
  if (geo_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::LatLng>(GetArena());
    geo_location_ = p;
  }
  return geo_location_;
}
inline ::google::type::LatLng* QueryParameters::mutable_geo_location() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.geo_location)
  return _internal_mutable_geo_location();
}
inline void QueryParameters::set_allocated_geo_location(::google::type::LatLng* geo_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_location_);
  }
  if (geo_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_location)->GetArena();
    if (message_arena != submessage_arena) {
      geo_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_location, submessage_arena);
    }
    
  } else {
    
  }
  geo_location_ = geo_location;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryParameters.geo_location)
}

// repeated .google.cloud.dialogflow.v2.Context contexts = 3;
inline int QueryParameters::_internal_contexts_size() const {
  return contexts_.size();
}
inline int QueryParameters::contexts_size() const {
  return _internal_contexts_size();
}
inline ::google::cloud::dialogflow::v2::Context* QueryParameters::mutable_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.contexts)
  return contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
QueryParameters::mutable_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.QueryParameters.contexts)
  return &contexts_;
}
inline const ::google::cloud::dialogflow::v2::Context& QueryParameters::_internal_contexts(int index) const {
  return contexts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Context& QueryParameters::contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.contexts)
  return _internal_contexts(index);
}
inline ::google::cloud::dialogflow::v2::Context* QueryParameters::_internal_add_contexts() {
  return contexts_.Add();
}
inline ::google::cloud::dialogflow::v2::Context* QueryParameters::add_contexts() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.QueryParameters.contexts)
  return _internal_add_contexts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
QueryParameters::contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.QueryParameters.contexts)
  return contexts_;
}

// bool reset_contexts = 4;
inline void QueryParameters::clear_reset_contexts() {
  reset_contexts_ = false;
}
inline bool QueryParameters::_internal_reset_contexts() const {
  return reset_contexts_;
}
inline bool QueryParameters::reset_contexts() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.reset_contexts)
  return _internal_reset_contexts();
}
inline void QueryParameters::_internal_set_reset_contexts(bool value) {
  
  reset_contexts_ = value;
}
inline void QueryParameters::set_reset_contexts(bool value) {
  _internal_set_reset_contexts(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryParameters.reset_contexts)
}

// repeated .google.cloud.dialogflow.v2.SessionEntityType session_entity_types = 5;
inline int QueryParameters::_internal_session_entity_types_size() const {
  return session_entity_types_.size();
}
inline int QueryParameters::session_entity_types_size() const {
  return _internal_session_entity_types_size();
}
inline ::google::cloud::dialogflow::v2::SessionEntityType* QueryParameters::mutable_session_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.session_entity_types)
  return session_entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SessionEntityType >*
QueryParameters::mutable_session_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.QueryParameters.session_entity_types)
  return &session_entity_types_;
}
inline const ::google::cloud::dialogflow::v2::SessionEntityType& QueryParameters::_internal_session_entity_types(int index) const {
  return session_entity_types_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::SessionEntityType& QueryParameters::session_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.session_entity_types)
  return _internal_session_entity_types(index);
}
inline ::google::cloud::dialogflow::v2::SessionEntityType* QueryParameters::_internal_add_session_entity_types() {
  return session_entity_types_.Add();
}
inline ::google::cloud::dialogflow::v2::SessionEntityType* QueryParameters::add_session_entity_types() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.QueryParameters.session_entity_types)
  return _internal_add_session_entity_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SessionEntityType >&
QueryParameters::session_entity_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.QueryParameters.session_entity_types)
  return session_entity_types_;
}

// .google.protobuf.Struct payload = 6;
inline bool QueryParameters::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool QueryParameters::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryParameters::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryParameters::payload() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.payload)
  return _internal_payload();
}
inline void QueryParameters::unsafe_arena_set_allocated_payload(
    PROTOBUF_NAMESPACE_ID::Struct* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryParameters.payload)
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryParameters::release_payload() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryParameters::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryParameters.payload)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryParameters::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryParameters::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.payload)
  return _internal_mutable_payload();
}
inline void QueryParameters::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Struct* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryParameters.payload)
}

// .google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig sentiment_analysis_request_config = 10;
inline bool QueryParameters::_internal_has_sentiment_analysis_request_config() const {
  return this != internal_default_instance() && sentiment_analysis_request_config_ != nullptr;
}
inline bool QueryParameters::has_sentiment_analysis_request_config() const {
  return _internal_has_sentiment_analysis_request_config();
}
inline void QueryParameters::clear_sentiment_analysis_request_config() {
  if (GetArena() == nullptr && sentiment_analysis_request_config_ != nullptr) {
    delete sentiment_analysis_request_config_;
  }
  sentiment_analysis_request_config_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig& QueryParameters::_internal_sentiment_analysis_request_config() const {
  const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* p = sentiment_analysis_request_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig&>(
      ::google::cloud::dialogflow::v2::_SentimentAnalysisRequestConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig& QueryParameters::sentiment_analysis_request_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryParameters.sentiment_analysis_request_config)
  return _internal_sentiment_analysis_request_config();
}
inline void QueryParameters::unsafe_arena_set_allocated_sentiment_analysis_request_config(
    ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* sentiment_analysis_request_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sentiment_analysis_request_config_);
  }
  sentiment_analysis_request_config_ = sentiment_analysis_request_config;
  if (sentiment_analysis_request_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryParameters.sentiment_analysis_request_config)
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* QueryParameters::release_sentiment_analysis_request_config() {
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* temp = sentiment_analysis_request_config_;
  sentiment_analysis_request_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* QueryParameters::unsafe_arena_release_sentiment_analysis_request_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryParameters.sentiment_analysis_request_config)
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* temp = sentiment_analysis_request_config_;
  sentiment_analysis_request_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* QueryParameters::_internal_mutable_sentiment_analysis_request_config() {
  
  if (sentiment_analysis_request_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig>(GetArena());
    sentiment_analysis_request_config_ = p;
  }
  return sentiment_analysis_request_config_;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* QueryParameters::mutable_sentiment_analysis_request_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryParameters.sentiment_analysis_request_config)
  return _internal_mutable_sentiment_analysis_request_config();
}
inline void QueryParameters::set_allocated_sentiment_analysis_request_config(::google::cloud::dialogflow::v2::SentimentAnalysisRequestConfig* sentiment_analysis_request_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sentiment_analysis_request_config_;
  }
  if (sentiment_analysis_request_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sentiment_analysis_request_config);
    if (message_arena != submessage_arena) {
      sentiment_analysis_request_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentiment_analysis_request_config, submessage_arena);
    }
    
  } else {
    
  }
  sentiment_analysis_request_config_ = sentiment_analysis_request_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryParameters.sentiment_analysis_request_config)
}

// map<string, string> webhook_headers = 14;
inline int QueryParameters::_internal_webhook_headers_size() const {
  return webhook_headers_.size();
}
inline int QueryParameters::webhook_headers_size() const {
  return _internal_webhook_headers_size();
}
inline void QueryParameters::clear_webhook_headers() {
  webhook_headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryParameters::_internal_webhook_headers() const {
  return webhook_headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryParameters::webhook_headers() const {
  // @@protoc_insertion_point(field_map:google.cloud.dialogflow.v2.QueryParameters.webhook_headers)
  return _internal_webhook_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryParameters::_internal_mutable_webhook_headers() {
  return webhook_headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryParameters::mutable_webhook_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dialogflow.v2.QueryParameters.webhook_headers)
  return _internal_mutable_webhook_headers();
}

// -------------------------------------------------------------------

// QueryInput

// .google.cloud.dialogflow.v2.InputAudioConfig audio_config = 1;
inline bool QueryInput::_internal_has_audio_config() const {
  return input_case() == kAudioConfig;
}
inline bool QueryInput::has_audio_config() const {
  return _internal_has_audio_config();
}
inline void QueryInput::set_has_audio_config() {
  _oneof_case_[0] = kAudioConfig;
}
inline ::google::cloud::dialogflow::v2::InputAudioConfig* QueryInput::release_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryInput.audio_config)
  if (_internal_has_audio_config()) {
    clear_has_input();
      ::google::cloud::dialogflow::v2::InputAudioConfig* temp = input_.audio_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    input_.audio_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::InputAudioConfig& QueryInput::_internal_audio_config() const {
  return _internal_has_audio_config()
      ? *input_.audio_config_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::InputAudioConfig&>(::google::cloud::dialogflow::v2::_InputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::InputAudioConfig& QueryInput::audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryInput.audio_config)
  return _internal_audio_config();
}
inline ::google::cloud::dialogflow::v2::InputAudioConfig* QueryInput::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.QueryInput.audio_config)
  if (_internal_has_audio_config()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::InputAudioConfig* temp = input_.audio_config_;
    input_.audio_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryInput::unsafe_arena_set_allocated_audio_config(::google::cloud::dialogflow::v2::InputAudioConfig* audio_config) {
  clear_input();
  if (audio_config) {
    set_has_audio_config();
    input_.audio_config_ = audio_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryInput.audio_config)
}
inline ::google::cloud::dialogflow::v2::InputAudioConfig* QueryInput::_internal_mutable_audio_config() {
  if (!_internal_has_audio_config()) {
    clear_input();
    set_has_audio_config();
    input_.audio_config_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::InputAudioConfig >(GetArena());
  }
  return input_.audio_config_;
}
inline ::google::cloud::dialogflow::v2::InputAudioConfig* QueryInput::mutable_audio_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryInput.audio_config)
  return _internal_mutable_audio_config();
}

// .google.cloud.dialogflow.v2.TextInput text = 2;
inline bool QueryInput::_internal_has_text() const {
  return input_case() == kText;
}
inline bool QueryInput::has_text() const {
  return _internal_has_text();
}
inline void QueryInput::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void QueryInput::clear_text() {
  if (_internal_has_text()) {
    if (GetArena() == nullptr) {
      delete input_.text_;
    }
    clear_has_input();
  }
}
inline ::google::cloud::dialogflow::v2::TextInput* QueryInput::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryInput.text)
  if (_internal_has_text()) {
    clear_has_input();
      ::google::cloud::dialogflow::v2::TextInput* temp = input_.text_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    input_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::TextInput& QueryInput::_internal_text() const {
  return _internal_has_text()
      ? *input_.text_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::TextInput&>(::google::cloud::dialogflow::v2::_TextInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::TextInput& QueryInput::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryInput.text)
  return _internal_text();
}
inline ::google::cloud::dialogflow::v2::TextInput* QueryInput::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.QueryInput.text)
  if (_internal_has_text()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::TextInput* temp = input_.text_;
    input_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryInput::unsafe_arena_set_allocated_text(::google::cloud::dialogflow::v2::TextInput* text) {
  clear_input();
  if (text) {
    set_has_text();
    input_.text_ = text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryInput.text)
}
inline ::google::cloud::dialogflow::v2::TextInput* QueryInput::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_input();
    set_has_text();
    input_.text_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::TextInput >(GetArena());
  }
  return input_.text_;
}
inline ::google::cloud::dialogflow::v2::TextInput* QueryInput::mutable_text() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryInput.text)
  return _internal_mutable_text();
}

// .google.cloud.dialogflow.v2.EventInput event = 3;
inline bool QueryInput::_internal_has_event() const {
  return input_case() == kEvent;
}
inline bool QueryInput::has_event() const {
  return _internal_has_event();
}
inline void QueryInput::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void QueryInput::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete input_.event_;
    }
    clear_has_input();
  }
}
inline ::google::cloud::dialogflow::v2::EventInput* QueryInput::release_event() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryInput.event)
  if (_internal_has_event()) {
    clear_has_input();
      ::google::cloud::dialogflow::v2::EventInput* temp = input_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    input_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::dialogflow::v2::EventInput& QueryInput::_internal_event() const {
  return _internal_has_event()
      ? *input_.event_
      : reinterpret_cast< ::google::cloud::dialogflow::v2::EventInput&>(::google::cloud::dialogflow::v2::_EventInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::EventInput& QueryInput::event() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryInput.event)
  return _internal_event();
}
inline ::google::cloud::dialogflow::v2::EventInput* QueryInput::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.dialogflow.v2.QueryInput.event)
  if (_internal_has_event()) {
    clear_has_input();
    ::google::cloud::dialogflow::v2::EventInput* temp = input_.event_;
    input_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryInput::unsafe_arena_set_allocated_event(::google::cloud::dialogflow::v2::EventInput* event) {
  clear_input();
  if (event) {
    set_has_event();
    input_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryInput.event)
}
inline ::google::cloud::dialogflow::v2::EventInput* QueryInput::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_input();
    set_has_event();
    input_.event_ = CreateMaybeMessage< ::google::cloud::dialogflow::v2::EventInput >(GetArena());
  }
  return input_.event_;
}
inline ::google::cloud::dialogflow::v2::EventInput* QueryInput::mutable_event() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryInput.event)
  return _internal_mutable_event();
}

inline bool QueryInput::has_input() const {
  return input_case() != INPUT_NOT_SET;
}
inline void QueryInput::clear_has_input() {
  _oneof_case_[0] = INPUT_NOT_SET;
}
inline QueryInput::InputCase QueryInput::input_case() const {
  return QueryInput::InputCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryResult

// string query_text = 1;
inline void QueryResult::clear_query_text() {
  query_text_.ClearToEmpty();
}
inline const std::string& QueryResult::query_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.query_text)
  return _internal_query_text();
}
inline void QueryResult::set_query_text(const std::string& value) {
  _internal_set_query_text(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.query_text)
}
inline std::string* QueryResult::mutable_query_text() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.query_text)
  return _internal_mutable_query_text();
}
inline const std::string& QueryResult::_internal_query_text() const {
  return query_text_.Get();
}
inline void QueryResult::_internal_set_query_text(const std::string& value) {
  
  query_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryResult::set_query_text(std::string&& value) {
  
  query_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryResult.query_text)
}
inline void QueryResult::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryResult.query_text)
}
inline void QueryResult::set_query_text(const char* value,
    size_t size) {
  
  query_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryResult.query_text)
}
inline std::string* QueryResult::_internal_mutable_query_text() {
  
  return query_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryResult::release_query_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.query_text)
  return query_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryResult::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.query_text)
}

// string language_code = 15;
inline void QueryResult::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& QueryResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.language_code)
  return _internal_language_code();
}
inline void QueryResult::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.language_code)
}
inline std::string* QueryResult::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& QueryResult::_internal_language_code() const {
  return language_code_.Get();
}
inline void QueryResult::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryResult::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryResult.language_code)
}
inline void QueryResult::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryResult.language_code)
}
inline void QueryResult::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryResult.language_code)
}
inline std::string* QueryResult::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.language_code)
}

// float speech_recognition_confidence = 2;
inline void QueryResult::clear_speech_recognition_confidence() {
  speech_recognition_confidence_ = 0;
}
inline float QueryResult::_internal_speech_recognition_confidence() const {
  return speech_recognition_confidence_;
}
inline float QueryResult::speech_recognition_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.speech_recognition_confidence)
  return _internal_speech_recognition_confidence();
}
inline void QueryResult::_internal_set_speech_recognition_confidence(float value) {
  
  speech_recognition_confidence_ = value;
}
inline void QueryResult::set_speech_recognition_confidence(float value) {
  _internal_set_speech_recognition_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.speech_recognition_confidence)
}

// string action = 3;
inline void QueryResult::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& QueryResult::action() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.action)
  return _internal_action();
}
inline void QueryResult::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.action)
}
inline std::string* QueryResult::mutable_action() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.action)
  return _internal_mutable_action();
}
inline const std::string& QueryResult::_internal_action() const {
  return action_.Get();
}
inline void QueryResult::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryResult::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryResult.action)
}
inline void QueryResult::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryResult.action)
}
inline void QueryResult::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryResult.action)
}
inline std::string* QueryResult::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryResult::release_action() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryResult::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.action)
}

// .google.protobuf.Struct parameters = 4;
inline bool QueryResult::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool QueryResult::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::parameters() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.parameters)
  return _internal_parameters();
}
inline void QueryResult::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryResult.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.parameters)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.parameters)
  return _internal_mutable_parameters();
}
inline void QueryResult::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.parameters)
}

// bool all_required_params_present = 5;
inline void QueryResult::clear_all_required_params_present() {
  all_required_params_present_ = false;
}
inline bool QueryResult::_internal_all_required_params_present() const {
  return all_required_params_present_;
}
inline bool QueryResult::all_required_params_present() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.all_required_params_present)
  return _internal_all_required_params_present();
}
inline void QueryResult::_internal_set_all_required_params_present(bool value) {
  
  all_required_params_present_ = value;
}
inline void QueryResult::set_all_required_params_present(bool value) {
  _internal_set_all_required_params_present(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.all_required_params_present)
}

// bool cancels_slot_filling = 21;
inline void QueryResult::clear_cancels_slot_filling() {
  cancels_slot_filling_ = false;
}
inline bool QueryResult::_internal_cancels_slot_filling() const {
  return cancels_slot_filling_;
}
inline bool QueryResult::cancels_slot_filling() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.cancels_slot_filling)
  return _internal_cancels_slot_filling();
}
inline void QueryResult::_internal_set_cancels_slot_filling(bool value) {
  
  cancels_slot_filling_ = value;
}
inline void QueryResult::set_cancels_slot_filling(bool value) {
  _internal_set_cancels_slot_filling(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.cancels_slot_filling)
}

// string fulfillment_text = 6;
inline void QueryResult::clear_fulfillment_text() {
  fulfillment_text_.ClearToEmpty();
}
inline const std::string& QueryResult::fulfillment_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
  return _internal_fulfillment_text();
}
inline void QueryResult::set_fulfillment_text(const std::string& value) {
  _internal_set_fulfillment_text(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
}
inline std::string* QueryResult::mutable_fulfillment_text() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
  return _internal_mutable_fulfillment_text();
}
inline const std::string& QueryResult::_internal_fulfillment_text() const {
  return fulfillment_text_.Get();
}
inline void QueryResult::_internal_set_fulfillment_text(const std::string& value) {
  
  fulfillment_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryResult::set_fulfillment_text(std::string&& value) {
  
  fulfillment_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
}
inline void QueryResult::set_fulfillment_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fulfillment_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
}
inline void QueryResult::set_fulfillment_text(const char* value,
    size_t size) {
  
  fulfillment_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
}
inline std::string* QueryResult::_internal_mutable_fulfillment_text() {
  
  return fulfillment_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryResult::release_fulfillment_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
  return fulfillment_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryResult::set_allocated_fulfillment_text(std::string* fulfillment_text) {
  if (fulfillment_text != nullptr) {
    
  } else {
    
  }
  fulfillment_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fulfillment_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.fulfillment_text)
}

// repeated .google.cloud.dialogflow.v2.Intent.Message fulfillment_messages = 7;
inline int QueryResult::_internal_fulfillment_messages_size() const {
  return fulfillment_messages_.size();
}
inline int QueryResult::fulfillment_messages_size() const {
  return _internal_fulfillment_messages_size();
}
inline ::google::cloud::dialogflow::v2::Intent_Message* QueryResult::mutable_fulfillment_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.fulfillment_messages)
  return fulfillment_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >*
QueryResult::mutable_fulfillment_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.QueryResult.fulfillment_messages)
  return &fulfillment_messages_;
}
inline const ::google::cloud::dialogflow::v2::Intent_Message& QueryResult::_internal_fulfillment_messages(int index) const {
  return fulfillment_messages_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Intent_Message& QueryResult::fulfillment_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.fulfillment_messages)
  return _internal_fulfillment_messages(index);
}
inline ::google::cloud::dialogflow::v2::Intent_Message* QueryResult::_internal_add_fulfillment_messages() {
  return fulfillment_messages_.Add();
}
inline ::google::cloud::dialogflow::v2::Intent_Message* QueryResult::add_fulfillment_messages() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.QueryResult.fulfillment_messages)
  return _internal_add_fulfillment_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Intent_Message >&
QueryResult::fulfillment_messages() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.QueryResult.fulfillment_messages)
  return fulfillment_messages_;
}

// string webhook_source = 8;
inline void QueryResult::clear_webhook_source() {
  webhook_source_.ClearToEmpty();
}
inline const std::string& QueryResult::webhook_source() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.webhook_source)
  return _internal_webhook_source();
}
inline void QueryResult::set_webhook_source(const std::string& value) {
  _internal_set_webhook_source(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.webhook_source)
}
inline std::string* QueryResult::mutable_webhook_source() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.webhook_source)
  return _internal_mutable_webhook_source();
}
inline const std::string& QueryResult::_internal_webhook_source() const {
  return webhook_source_.Get();
}
inline void QueryResult::_internal_set_webhook_source(const std::string& value) {
  
  webhook_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryResult::set_webhook_source(std::string&& value) {
  
  webhook_source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.QueryResult.webhook_source)
}
inline void QueryResult::set_webhook_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webhook_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.QueryResult.webhook_source)
}
inline void QueryResult::set_webhook_source(const char* value,
    size_t size) {
  
  webhook_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.QueryResult.webhook_source)
}
inline std::string* QueryResult::_internal_mutable_webhook_source() {
  
  return webhook_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryResult::release_webhook_source() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.webhook_source)
  return webhook_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryResult::set_allocated_webhook_source(std::string* webhook_source) {
  if (webhook_source != nullptr) {
    
  } else {
    
  }
  webhook_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webhook_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.webhook_source)
}

// .google.protobuf.Struct webhook_payload = 9;
inline bool QueryResult::_internal_has_webhook_payload() const {
  return this != internal_default_instance() && webhook_payload_ != nullptr;
}
inline bool QueryResult::has_webhook_payload() const {
  return _internal_has_webhook_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::_internal_webhook_payload() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = webhook_payload_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::webhook_payload() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.webhook_payload)
  return _internal_webhook_payload();
}
inline void QueryResult::unsafe_arena_set_allocated_webhook_payload(
    PROTOBUF_NAMESPACE_ID::Struct* webhook_payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_payload_);
  }
  webhook_payload_ = webhook_payload;
  if (webhook_payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryResult.webhook_payload)
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::release_webhook_payload() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = webhook_payload_;
  webhook_payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::unsafe_arena_release_webhook_payload() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.webhook_payload)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = webhook_payload_;
  webhook_payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::_internal_mutable_webhook_payload() {
  
  if (webhook_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    webhook_payload_ = p;
  }
  return webhook_payload_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::mutable_webhook_payload() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.webhook_payload)
  return _internal_mutable_webhook_payload();
}
inline void QueryResult::set_allocated_webhook_payload(PROTOBUF_NAMESPACE_ID::Struct* webhook_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_payload_);
  }
  if (webhook_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_payload)->GetArena();
    if (message_arena != submessage_arena) {
      webhook_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webhook_payload, submessage_arena);
    }
    
  } else {
    
  }
  webhook_payload_ = webhook_payload;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.webhook_payload)
}

// repeated .google.cloud.dialogflow.v2.Context output_contexts = 10;
inline int QueryResult::_internal_output_contexts_size() const {
  return output_contexts_.size();
}
inline int QueryResult::output_contexts_size() const {
  return _internal_output_contexts_size();
}
inline ::google::cloud::dialogflow::v2::Context* QueryResult::mutable_output_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.output_contexts)
  return output_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >*
QueryResult::mutable_output_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.QueryResult.output_contexts)
  return &output_contexts_;
}
inline const ::google::cloud::dialogflow::v2::Context& QueryResult::_internal_output_contexts(int index) const {
  return output_contexts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::Context& QueryResult::output_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.output_contexts)
  return _internal_output_contexts(index);
}
inline ::google::cloud::dialogflow::v2::Context* QueryResult::_internal_add_output_contexts() {
  return output_contexts_.Add();
}
inline ::google::cloud::dialogflow::v2::Context* QueryResult::add_output_contexts() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.QueryResult.output_contexts)
  return _internal_add_output_contexts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::Context >&
QueryResult::output_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.QueryResult.output_contexts)
  return output_contexts_;
}

// .google.cloud.dialogflow.v2.Intent intent = 11;
inline bool QueryResult::_internal_has_intent() const {
  return this != internal_default_instance() && intent_ != nullptr;
}
inline bool QueryResult::has_intent() const {
  return _internal_has_intent();
}
inline const ::google::cloud::dialogflow::v2::Intent& QueryResult::_internal_intent() const {
  const ::google::cloud::dialogflow::v2::Intent* p = intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Intent&>(
      ::google::cloud::dialogflow::v2::_Intent_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Intent& QueryResult::intent() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.intent)
  return _internal_intent();
}
inline void QueryResult::unsafe_arena_set_allocated_intent(
    ::google::cloud::dialogflow::v2::Intent* intent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryResult.intent)
}
inline ::google::cloud::dialogflow::v2::Intent* QueryResult::release_intent() {
  
  ::google::cloud::dialogflow::v2::Intent* temp = intent_;
  intent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* QueryResult::unsafe_arena_release_intent() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.intent)
  
  ::google::cloud::dialogflow::v2::Intent* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Intent* QueryResult::_internal_mutable_intent() {
  
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Intent>(GetArena());
    intent_ = p;
  }
  return intent_;
}
inline ::google::cloud::dialogflow::v2::Intent* QueryResult::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.intent)
  return _internal_mutable_intent();
}
inline void QueryResult::set_allocated_intent(::google::cloud::dialogflow::v2::Intent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent)->GetArena();
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    
  } else {
    
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.intent)
}

// float intent_detection_confidence = 12;
inline void QueryResult::clear_intent_detection_confidence() {
  intent_detection_confidence_ = 0;
}
inline float QueryResult::_internal_intent_detection_confidence() const {
  return intent_detection_confidence_;
}
inline float QueryResult::intent_detection_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.intent_detection_confidence)
  return _internal_intent_detection_confidence();
}
inline void QueryResult::_internal_set_intent_detection_confidence(float value) {
  
  intent_detection_confidence_ = value;
}
inline void QueryResult::set_intent_detection_confidence(float value) {
  _internal_set_intent_detection_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.QueryResult.intent_detection_confidence)
}

// .google.protobuf.Struct diagnostic_info = 14;
inline bool QueryResult::_internal_has_diagnostic_info() const {
  return this != internal_default_instance() && diagnostic_info_ != nullptr;
}
inline bool QueryResult::has_diagnostic_info() const {
  return _internal_has_diagnostic_info();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::_internal_diagnostic_info() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = diagnostic_info_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& QueryResult::diagnostic_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.diagnostic_info)
  return _internal_diagnostic_info();
}
inline void QueryResult::unsafe_arena_set_allocated_diagnostic_info(
    PROTOBUF_NAMESPACE_ID::Struct* diagnostic_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info_);
  }
  diagnostic_info_ = diagnostic_info;
  if (diagnostic_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryResult.diagnostic_info)
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::release_diagnostic_info() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = diagnostic_info_;
  diagnostic_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::unsafe_arena_release_diagnostic_info() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.diagnostic_info)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = diagnostic_info_;
  diagnostic_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::_internal_mutable_diagnostic_info() {
  
  if (diagnostic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    diagnostic_info_ = p;
  }
  return diagnostic_info_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* QueryResult::mutable_diagnostic_info() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.diagnostic_info)
  return _internal_mutable_diagnostic_info();
}
inline void QueryResult::set_allocated_diagnostic_info(PROTOBUF_NAMESPACE_ID::Struct* diagnostic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info_);
  }
  if (diagnostic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info)->GetArena();
    if (message_arena != submessage_arena) {
      diagnostic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostic_info, submessage_arena);
    }
    
  } else {
    
  }
  diagnostic_info_ = diagnostic_info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.diagnostic_info)
}

// .google.cloud.dialogflow.v2.SentimentAnalysisResult sentiment_analysis_result = 17;
inline bool QueryResult::_internal_has_sentiment_analysis_result() const {
  return this != internal_default_instance() && sentiment_analysis_result_ != nullptr;
}
inline bool QueryResult::has_sentiment_analysis_result() const {
  return _internal_has_sentiment_analysis_result();
}
inline void QueryResult::clear_sentiment_analysis_result() {
  if (GetArena() == nullptr && sentiment_analysis_result_ != nullptr) {
    delete sentiment_analysis_result_;
  }
  sentiment_analysis_result_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& QueryResult::_internal_sentiment_analysis_result() const {
  const ::google::cloud::dialogflow::v2::SentimentAnalysisResult* p = sentiment_analysis_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::SentimentAnalysisResult&>(
      ::google::cloud::dialogflow::v2::_SentimentAnalysisResult_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::SentimentAnalysisResult& QueryResult::sentiment_analysis_result() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.QueryResult.sentiment_analysis_result)
  return _internal_sentiment_analysis_result();
}
inline void QueryResult::unsafe_arena_set_allocated_sentiment_analysis_result(
    ::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sentiment_analysis_result_);
  }
  sentiment_analysis_result_ = sentiment_analysis_result;
  if (sentiment_analysis_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.QueryResult.sentiment_analysis_result)
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* QueryResult::release_sentiment_analysis_result() {
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* temp = sentiment_analysis_result_;
  sentiment_analysis_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* QueryResult::unsafe_arena_release_sentiment_analysis_result() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.QueryResult.sentiment_analysis_result)
  
  ::google::cloud::dialogflow::v2::SentimentAnalysisResult* temp = sentiment_analysis_result_;
  sentiment_analysis_result_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* QueryResult::_internal_mutable_sentiment_analysis_result() {
  
  if (sentiment_analysis_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::SentimentAnalysisResult>(GetArena());
    sentiment_analysis_result_ = p;
  }
  return sentiment_analysis_result_;
}
inline ::google::cloud::dialogflow::v2::SentimentAnalysisResult* QueryResult::mutable_sentiment_analysis_result() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.QueryResult.sentiment_analysis_result)
  return _internal_mutable_sentiment_analysis_result();
}
inline void QueryResult::set_allocated_sentiment_analysis_result(::google::cloud::dialogflow::v2::SentimentAnalysisResult* sentiment_analysis_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sentiment_analysis_result_;
  }
  if (sentiment_analysis_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sentiment_analysis_result);
    if (message_arena != submessage_arena) {
      sentiment_analysis_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentiment_analysis_result, submessage_arena);
    }
    
  } else {
    
  }
  sentiment_analysis_result_ = sentiment_analysis_result;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.QueryResult.sentiment_analysis_result)
}

// -------------------------------------------------------------------

// StreamingDetectIntentRequest

// string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StreamingDetectIntentRequest::clear_session() {
  session_.ClearToEmpty();
}
inline const std::string& StreamingDetectIntentRequest::session() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
  return _internal_session();
}
inline void StreamingDetectIntentRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
}
inline std::string* StreamingDetectIntentRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
  return _internal_mutable_session();
}
inline const std::string& StreamingDetectIntentRequest::_internal_session() const {
  return session_.Get();
}
inline void StreamingDetectIntentRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingDetectIntentRequest::set_session(std::string&& value) {
  
  session_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
}
inline void StreamingDetectIntentRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
}
inline void StreamingDetectIntentRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
}
inline std::string* StreamingDetectIntentRequest::_internal_mutable_session() {
  
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingDetectIntentRequest::release_session() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingDetectIntentRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session)
}

// .google.cloud.dialogflow.v2.QueryParameters query_params = 2;
inline bool StreamingDetectIntentRequest::_internal_has_query_params() const {
  return this != internal_default_instance() && query_params_ != nullptr;
}
inline bool StreamingDetectIntentRequest::has_query_params() const {
  return _internal_has_query_params();
}
inline void StreamingDetectIntentRequest::clear_query_params() {
  if (GetArena() == nullptr && query_params_ != nullptr) {
    delete query_params_;
  }
  query_params_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& StreamingDetectIntentRequest::_internal_query_params() const {
  const ::google::cloud::dialogflow::v2::QueryParameters* p = query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryParameters&>(
      ::google::cloud::dialogflow::v2::_QueryParameters_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryParameters& StreamingDetectIntentRequest::query_params() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params)
  return _internal_query_params();
}
inline void StreamingDetectIntentRequest::unsafe_arena_set_allocated_query_params(
    ::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_params_);
  }
  query_params_ = query_params;
  if (query_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params)
}
inline ::google::cloud::dialogflow::v2::QueryParameters* StreamingDetectIntentRequest::release_query_params() {
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = query_params_;
  query_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* StreamingDetectIntentRequest::unsafe_arena_release_query_params() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params)
  
  ::google::cloud::dialogflow::v2::QueryParameters* temp = query_params_;
  query_params_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* StreamingDetectIntentRequest::_internal_mutable_query_params() {
  
  if (query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryParameters>(GetArena());
    query_params_ = p;
  }
  return query_params_;
}
inline ::google::cloud::dialogflow::v2::QueryParameters* StreamingDetectIntentRequest::mutable_query_params() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params)
  return _internal_mutable_query_params();
}
inline void StreamingDetectIntentRequest::set_allocated_query_params(::google::cloud::dialogflow::v2::QueryParameters* query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_params_;
  }
  if (query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_params);
    if (message_arena != submessage_arena) {
      query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_params, submessage_arena);
    }
    
  } else {
    
  }
  query_params_ = query_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params)
}

// .google.cloud.dialogflow.v2.QueryInput query_input = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool StreamingDetectIntentRequest::_internal_has_query_input() const {
  return this != internal_default_instance() && query_input_ != nullptr;
}
inline bool StreamingDetectIntentRequest::has_query_input() const {
  return _internal_has_query_input();
}
inline void StreamingDetectIntentRequest::clear_query_input() {
  if (GetArena() == nullptr && query_input_ != nullptr) {
    delete query_input_;
  }
  query_input_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryInput& StreamingDetectIntentRequest::_internal_query_input() const {
  const ::google::cloud::dialogflow::v2::QueryInput* p = query_input_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryInput&>(
      ::google::cloud::dialogflow::v2::_QueryInput_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryInput& StreamingDetectIntentRequest::query_input() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input)
  return _internal_query_input();
}
inline void StreamingDetectIntentRequest::unsafe_arena_set_allocated_query_input(
    ::google::cloud::dialogflow::v2::QueryInput* query_input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_input_);
  }
  query_input_ = query_input;
  if (query_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input)
}
inline ::google::cloud::dialogflow::v2::QueryInput* StreamingDetectIntentRequest::release_query_input() {
  
  ::google::cloud::dialogflow::v2::QueryInput* temp = query_input_;
  query_input_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryInput* StreamingDetectIntentRequest::unsafe_arena_release_query_input() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input)
  
  ::google::cloud::dialogflow::v2::QueryInput* temp = query_input_;
  query_input_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryInput* StreamingDetectIntentRequest::_internal_mutable_query_input() {
  
  if (query_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryInput>(GetArena());
    query_input_ = p;
  }
  return query_input_;
}
inline ::google::cloud::dialogflow::v2::QueryInput* StreamingDetectIntentRequest::mutable_query_input() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input)
  return _internal_mutable_query_input();
}
inline void StreamingDetectIntentRequest::set_allocated_query_input(::google::cloud::dialogflow::v2::QueryInput* query_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_input_;
  }
  if (query_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_input);
    if (message_arena != submessage_arena) {
      query_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_input, submessage_arena);
    }
    
  } else {
    
  }
  query_input_ = query_input;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input)
}

// bool single_utterance = 4 [deprecated = true];
inline void StreamingDetectIntentRequest::clear_single_utterance() {
  single_utterance_ = false;
}
inline bool StreamingDetectIntentRequest::_internal_single_utterance() const {
  return single_utterance_;
}
inline bool StreamingDetectIntentRequest::single_utterance() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.single_utterance)
  return _internal_single_utterance();
}
inline void StreamingDetectIntentRequest::_internal_set_single_utterance(bool value) {
  
  single_utterance_ = value;
}
inline void StreamingDetectIntentRequest::set_single_utterance(bool value) {
  _internal_set_single_utterance(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.single_utterance)
}

// .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 5;
inline bool StreamingDetectIntentRequest::_internal_has_output_audio_config() const {
  return this != internal_default_instance() && output_audio_config_ != nullptr;
}
inline bool StreamingDetectIntentRequest::has_output_audio_config() const {
  return _internal_has_output_audio_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& StreamingDetectIntentRequest::_internal_output_audio_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = output_audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& StreamingDetectIntentRequest::output_audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config)
  return _internal_output_audio_config();
}
inline void StreamingDetectIntentRequest::unsafe_arena_set_allocated_output_audio_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  output_audio_config_ = output_audio_config;
  if (output_audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentRequest::release_output_audio_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentRequest::unsafe_arena_release_output_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentRequest::_internal_mutable_output_audio_config() {
  
  if (output_audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArena());
    output_audio_config_ = p;
  }
  return output_audio_config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentRequest::mutable_output_audio_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config)
  return _internal_mutable_output_audio_config();
}
inline void StreamingDetectIntentRequest::set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  if (output_audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_ = output_audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config)
}

// .google.protobuf.FieldMask output_audio_config_mask = 7;
inline bool StreamingDetectIntentRequest::_internal_has_output_audio_config_mask() const {
  return this != internal_default_instance() && output_audio_config_mask_ != nullptr;
}
inline bool StreamingDetectIntentRequest::has_output_audio_config_mask() const {
  return _internal_has_output_audio_config_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& StreamingDetectIntentRequest::_internal_output_audio_config_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = output_audio_config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& StreamingDetectIntentRequest::output_audio_config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config_mask)
  return _internal_output_audio_config_mask();
}
inline void StreamingDetectIntentRequest::unsafe_arena_set_allocated_output_audio_config_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask_);
  }
  output_audio_config_mask_ = output_audio_config_mask;
  if (output_audio_config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* StreamingDetectIntentRequest::release_output_audio_config_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = output_audio_config_mask_;
  output_audio_config_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* StreamingDetectIntentRequest::unsafe_arena_release_output_audio_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = output_audio_config_mask_;
  output_audio_config_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* StreamingDetectIntentRequest::_internal_mutable_output_audio_config_mask() {
  
  if (output_audio_config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    output_audio_config_mask_ = p;
  }
  return output_audio_config_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* StreamingDetectIntentRequest::mutable_output_audio_config_mask() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config_mask)
  return _internal_mutable_output_audio_config_mask();
}
inline void StreamingDetectIntentRequest::set_allocated_output_audio_config_mask(PROTOBUF_NAMESPACE_ID::FieldMask* output_audio_config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask_);
  }
  if (output_audio_config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_mask)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config_mask, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_mask_ = output_audio_config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config_mask)
}

// bytes input_audio = 6;
inline void StreamingDetectIntentRequest::clear_input_audio() {
  input_audio_.ClearToEmpty();
}
inline const std::string& StreamingDetectIntentRequest::input_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
  return _internal_input_audio();
}
inline void StreamingDetectIntentRequest::set_input_audio(const std::string& value) {
  _internal_set_input_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
}
inline std::string* StreamingDetectIntentRequest::mutable_input_audio() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
  return _internal_mutable_input_audio();
}
inline const std::string& StreamingDetectIntentRequest::_internal_input_audio() const {
  return input_audio_.Get();
}
inline void StreamingDetectIntentRequest::_internal_set_input_audio(const std::string& value) {
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingDetectIntentRequest::set_input_audio(std::string&& value) {
  
  input_audio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
}
inline void StreamingDetectIntentRequest::set_input_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
}
inline void StreamingDetectIntentRequest::set_input_audio(const void* value,
    size_t size) {
  
  input_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
}
inline std::string* StreamingDetectIntentRequest::_internal_mutable_input_audio() {
  
  return input_audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingDetectIntentRequest::release_input_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
  return input_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingDetectIntentRequest::set_allocated_input_audio(std::string* input_audio) {
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio)
}

// -------------------------------------------------------------------

// StreamingDetectIntentResponse

// string response_id = 1;
inline void StreamingDetectIntentResponse::clear_response_id() {
  response_id_.ClearToEmpty();
}
inline const std::string& StreamingDetectIntentResponse::response_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
  return _internal_response_id();
}
inline void StreamingDetectIntentResponse::set_response_id(const std::string& value) {
  _internal_set_response_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
}
inline std::string* StreamingDetectIntentResponse::mutable_response_id() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
  return _internal_mutable_response_id();
}
inline const std::string& StreamingDetectIntentResponse::_internal_response_id() const {
  return response_id_.Get();
}
inline void StreamingDetectIntentResponse::_internal_set_response_id(const std::string& value) {
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingDetectIntentResponse::set_response_id(std::string&& value) {
  
  response_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
}
inline void StreamingDetectIntentResponse::set_response_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
}
inline void StreamingDetectIntentResponse::set_response_id(const char* value,
    size_t size) {
  
  response_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
}
inline std::string* StreamingDetectIntentResponse::_internal_mutable_response_id() {
  
  return response_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingDetectIntentResponse::release_response_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
  return response_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingDetectIntentResponse::set_allocated_response_id(std::string* response_id) {
  if (response_id != nullptr) {
    
  } else {
    
  }
  response_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.response_id)
}

// .google.cloud.dialogflow.v2.StreamingRecognitionResult recognition_result = 2;
inline bool StreamingDetectIntentResponse::_internal_has_recognition_result() const {
  return this != internal_default_instance() && recognition_result_ != nullptr;
}
inline bool StreamingDetectIntentResponse::has_recognition_result() const {
  return _internal_has_recognition_result();
}
inline void StreamingDetectIntentResponse::clear_recognition_result() {
  if (GetArena() == nullptr && recognition_result_ != nullptr) {
    delete recognition_result_;
  }
  recognition_result_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::StreamingRecognitionResult& StreamingDetectIntentResponse::_internal_recognition_result() const {
  const ::google::cloud::dialogflow::v2::StreamingRecognitionResult* p = recognition_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::StreamingRecognitionResult&>(
      ::google::cloud::dialogflow::v2::_StreamingRecognitionResult_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::StreamingRecognitionResult& StreamingDetectIntentResponse::recognition_result() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.recognition_result)
  return _internal_recognition_result();
}
inline void StreamingDetectIntentResponse::unsafe_arena_set_allocated_recognition_result(
    ::google::cloud::dialogflow::v2::StreamingRecognitionResult* recognition_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognition_result_);
  }
  recognition_result_ = recognition_result;
  if (recognition_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.recognition_result)
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult* StreamingDetectIntentResponse::release_recognition_result() {
  
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* temp = recognition_result_;
  recognition_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult* StreamingDetectIntentResponse::unsafe_arena_release_recognition_result() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.recognition_result)
  
  ::google::cloud::dialogflow::v2::StreamingRecognitionResult* temp = recognition_result_;
  recognition_result_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult* StreamingDetectIntentResponse::_internal_mutable_recognition_result() {
  
  if (recognition_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::StreamingRecognitionResult>(GetArena());
    recognition_result_ = p;
  }
  return recognition_result_;
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult* StreamingDetectIntentResponse::mutable_recognition_result() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.recognition_result)
  return _internal_mutable_recognition_result();
}
inline void StreamingDetectIntentResponse::set_allocated_recognition_result(::google::cloud::dialogflow::v2::StreamingRecognitionResult* recognition_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recognition_result_;
  }
  if (recognition_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recognition_result);
    if (message_arena != submessage_arena) {
      recognition_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognition_result, submessage_arena);
    }
    
  } else {
    
  }
  recognition_result_ = recognition_result;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.recognition_result)
}

// .google.cloud.dialogflow.v2.QueryResult query_result = 3;
inline bool StreamingDetectIntentResponse::_internal_has_query_result() const {
  return this != internal_default_instance() && query_result_ != nullptr;
}
inline bool StreamingDetectIntentResponse::has_query_result() const {
  return _internal_has_query_result();
}
inline void StreamingDetectIntentResponse::clear_query_result() {
  if (GetArena() == nullptr && query_result_ != nullptr) {
    delete query_result_;
  }
  query_result_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::QueryResult& StreamingDetectIntentResponse::_internal_query_result() const {
  const ::google::cloud::dialogflow::v2::QueryResult* p = query_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::QueryResult&>(
      ::google::cloud::dialogflow::v2::_QueryResult_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::QueryResult& StreamingDetectIntentResponse::query_result() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.query_result)
  return _internal_query_result();
}
inline void StreamingDetectIntentResponse::unsafe_arena_set_allocated_query_result(
    ::google::cloud::dialogflow::v2::QueryResult* query_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_result_);
  }
  query_result_ = query_result;
  if (query_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.query_result)
}
inline ::google::cloud::dialogflow::v2::QueryResult* StreamingDetectIntentResponse::release_query_result() {
  
  ::google::cloud::dialogflow::v2::QueryResult* temp = query_result_;
  query_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryResult* StreamingDetectIntentResponse::unsafe_arena_release_query_result() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.query_result)
  
  ::google::cloud::dialogflow::v2::QueryResult* temp = query_result_;
  query_result_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::QueryResult* StreamingDetectIntentResponse::_internal_mutable_query_result() {
  
  if (query_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::QueryResult>(GetArena());
    query_result_ = p;
  }
  return query_result_;
}
inline ::google::cloud::dialogflow::v2::QueryResult* StreamingDetectIntentResponse::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.query_result)
  return _internal_mutable_query_result();
}
inline void StreamingDetectIntentResponse::set_allocated_query_result(::google::cloud::dialogflow::v2::QueryResult* query_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_result_;
  }
  if (query_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_result);
    if (message_arena != submessage_arena) {
      query_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_result, submessage_arena);
    }
    
  } else {
    
  }
  query_result_ = query_result;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.query_result)
}

// .google.rpc.Status webhook_status = 4;
inline bool StreamingDetectIntentResponse::_internal_has_webhook_status() const {
  return this != internal_default_instance() && webhook_status_ != nullptr;
}
inline bool StreamingDetectIntentResponse::has_webhook_status() const {
  return _internal_has_webhook_status();
}
inline const ::google::rpc::Status& StreamingDetectIntentResponse::_internal_webhook_status() const {
  const ::google::rpc::Status* p = webhook_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& StreamingDetectIntentResponse::webhook_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.webhook_status)
  return _internal_webhook_status();
}
inline void StreamingDetectIntentResponse::unsafe_arena_set_allocated_webhook_status(
    ::google::rpc::Status* webhook_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status_);
  }
  webhook_status_ = webhook_status;
  if (webhook_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.webhook_status)
}
inline ::google::rpc::Status* StreamingDetectIntentResponse::release_webhook_status() {
  
  ::google::rpc::Status* temp = webhook_status_;
  webhook_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* StreamingDetectIntentResponse::unsafe_arena_release_webhook_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.webhook_status)
  
  ::google::rpc::Status* temp = webhook_status_;
  webhook_status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* StreamingDetectIntentResponse::_internal_mutable_webhook_status() {
  
  if (webhook_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    webhook_status_ = p;
  }
  return webhook_status_;
}
inline ::google::rpc::Status* StreamingDetectIntentResponse::mutable_webhook_status() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.webhook_status)
  return _internal_mutable_webhook_status();
}
inline void StreamingDetectIntentResponse::set_allocated_webhook_status(::google::rpc::Status* webhook_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status_);
  }
  if (webhook_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webhook_status)->GetArena();
    if (message_arena != submessage_arena) {
      webhook_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webhook_status, submessage_arena);
    }
    
  } else {
    
  }
  webhook_status_ = webhook_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.webhook_status)
}

// bytes output_audio = 5;
inline void StreamingDetectIntentResponse::clear_output_audio() {
  output_audio_.ClearToEmpty();
}
inline const std::string& StreamingDetectIntentResponse::output_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
  return _internal_output_audio();
}
inline void StreamingDetectIntentResponse::set_output_audio(const std::string& value) {
  _internal_set_output_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
}
inline std::string* StreamingDetectIntentResponse::mutable_output_audio() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
  return _internal_mutable_output_audio();
}
inline const std::string& StreamingDetectIntentResponse::_internal_output_audio() const {
  return output_audio_.Get();
}
inline void StreamingDetectIntentResponse::_internal_set_output_audio(const std::string& value) {
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingDetectIntentResponse::set_output_audio(std::string&& value) {
  
  output_audio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
}
inline void StreamingDetectIntentResponse::set_output_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
}
inline void StreamingDetectIntentResponse::set_output_audio(const void* value,
    size_t size) {
  
  output_audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
}
inline std::string* StreamingDetectIntentResponse::_internal_mutable_output_audio() {
  
  return output_audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingDetectIntentResponse::release_output_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
  return output_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingDetectIntentResponse::set_allocated_output_audio(std::string* output_audio) {
  if (output_audio != nullptr) {
    
  } else {
    
  }
  output_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio)
}

// .google.cloud.dialogflow.v2.OutputAudioConfig output_audio_config = 6;
inline bool StreamingDetectIntentResponse::_internal_has_output_audio_config() const {
  return this != internal_default_instance() && output_audio_config_ != nullptr;
}
inline bool StreamingDetectIntentResponse::has_output_audio_config() const {
  return _internal_has_output_audio_config();
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& StreamingDetectIntentResponse::_internal_output_audio_config() const {
  const ::google::cloud::dialogflow::v2::OutputAudioConfig* p = output_audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::OutputAudioConfig&>(
      ::google::cloud::dialogflow::v2::_OutputAudioConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::OutputAudioConfig& StreamingDetectIntentResponse::output_audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio_config)
  return _internal_output_audio_config();
}
inline void StreamingDetectIntentResponse::unsafe_arena_set_allocated_output_audio_config(
    ::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  output_audio_config_ = output_audio_config;
  if (output_audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio_config)
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentResponse::release_output_audio_config() {
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentResponse::unsafe_arena_release_output_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio_config)
  
  ::google::cloud::dialogflow::v2::OutputAudioConfig* temp = output_audio_config_;
  output_audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentResponse::_internal_mutable_output_audio_config() {
  
  if (output_audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::OutputAudioConfig>(GetArena());
    output_audio_config_ = p;
  }
  return output_audio_config_;
}
inline ::google::cloud::dialogflow::v2::OutputAudioConfig* StreamingDetectIntentResponse::mutable_output_audio_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio_config)
  return _internal_mutable_output_audio_config();
}
inline void StreamingDetectIntentResponse::set_allocated_output_audio_config(::google::cloud::dialogflow::v2::OutputAudioConfig* output_audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config_);
  }
  if (output_audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_audio_config)->GetArena();
    if (message_arena != submessage_arena) {
      output_audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_audio_config, submessage_arena);
    }
    
  } else {
    
  }
  output_audio_config_ = output_audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingDetectIntentResponse.output_audio_config)
}

// -------------------------------------------------------------------

// StreamingRecognitionResult

// .google.cloud.dialogflow.v2.StreamingRecognitionResult.MessageType message_type = 1;
inline void StreamingRecognitionResult::clear_message_type() {
  message_type_ = 0;
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType StreamingRecognitionResult::_internal_message_type() const {
  return static_cast< ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType >(message_type_);
}
inline ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType StreamingRecognitionResult::message_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.message_type)
  return _internal_message_type();
}
inline void StreamingRecognitionResult::_internal_set_message_type(::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType value) {
  
  message_type_ = value;
}
inline void StreamingRecognitionResult::set_message_type(::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingRecognitionResult.message_type)
}

// string transcript = 2;
inline void StreamingRecognitionResult::clear_transcript() {
  transcript_.ClearToEmpty();
}
inline const std::string& StreamingRecognitionResult::transcript() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
  return _internal_transcript();
}
inline void StreamingRecognitionResult::set_transcript(const std::string& value) {
  _internal_set_transcript(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
}
inline std::string* StreamingRecognitionResult::mutable_transcript() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
  return _internal_mutable_transcript();
}
inline const std::string& StreamingRecognitionResult::_internal_transcript() const {
  return transcript_.Get();
}
inline void StreamingRecognitionResult::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingRecognitionResult::set_transcript(std::string&& value) {
  
  transcript_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
}
inline void StreamingRecognitionResult::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
}
inline void StreamingRecognitionResult::set_transcript(const char* value,
    size_t size) {
  
  transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
}
inline std::string* StreamingRecognitionResult::_internal_mutable_transcript() {
  
  return transcript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingRecognitionResult::release_transcript() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingRecognitionResult::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript)
}

// bool is_final = 3;
inline void StreamingRecognitionResult::clear_is_final() {
  is_final_ = false;
}
inline bool StreamingRecognitionResult::_internal_is_final() const {
  return is_final_;
}
inline bool StreamingRecognitionResult::is_final() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.is_final)
  return _internal_is_final();
}
inline void StreamingRecognitionResult::_internal_set_is_final(bool value) {
  
  is_final_ = value;
}
inline void StreamingRecognitionResult::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingRecognitionResult.is_final)
}

// float confidence = 4;
inline void StreamingRecognitionResult::clear_confidence() {
  confidence_ = 0;
}
inline float StreamingRecognitionResult::_internal_confidence() const {
  return confidence_;
}
inline float StreamingRecognitionResult::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.confidence)
  return _internal_confidence();
}
inline void StreamingRecognitionResult::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void StreamingRecognitionResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingRecognitionResult.confidence)
}

// repeated .google.cloud.dialogflow.v2.SpeechWordInfo speech_word_info = 7;
inline int StreamingRecognitionResult::_internal_speech_word_info_size() const {
  return speech_word_info_.size();
}
inline int StreamingRecognitionResult::speech_word_info_size() const {
  return _internal_speech_word_info_size();
}
inline ::google::cloud::dialogflow::v2::SpeechWordInfo* StreamingRecognitionResult::mutable_speech_word_info(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_word_info)
  return speech_word_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SpeechWordInfo >*
StreamingRecognitionResult::mutable_speech_word_info() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_word_info)
  return &speech_word_info_;
}
inline const ::google::cloud::dialogflow::v2::SpeechWordInfo& StreamingRecognitionResult::_internal_speech_word_info(int index) const {
  return speech_word_info_.Get(index);
}
inline const ::google::cloud::dialogflow::v2::SpeechWordInfo& StreamingRecognitionResult::speech_word_info(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_word_info)
  return _internal_speech_word_info(index);
}
inline ::google::cloud::dialogflow::v2::SpeechWordInfo* StreamingRecognitionResult::_internal_add_speech_word_info() {
  return speech_word_info_.Add();
}
inline ::google::cloud::dialogflow::v2::SpeechWordInfo* StreamingRecognitionResult::add_speech_word_info() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_word_info)
  return _internal_add_speech_word_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2::SpeechWordInfo >&
StreamingRecognitionResult::speech_word_info() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_word_info)
  return speech_word_info_;
}

// .google.protobuf.Duration speech_end_offset = 8;
inline bool StreamingRecognitionResult::_internal_has_speech_end_offset() const {
  return this != internal_default_instance() && speech_end_offset_ != nullptr;
}
inline bool StreamingRecognitionResult::has_speech_end_offset() const {
  return _internal_has_speech_end_offset();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::_internal_speech_end_offset() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = speech_end_offset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::speech_end_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_end_offset)
  return _internal_speech_end_offset();
}
inline void StreamingRecognitionResult::unsafe_arena_set_allocated_speech_end_offset(
    PROTOBUF_NAMESPACE_ID::Duration* speech_end_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_end_offset_);
  }
  speech_end_offset_ = speech_end_offset;
  if (speech_end_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_end_offset)
}
inline PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::release_speech_end_offset() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = speech_end_offset_;
  speech_end_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::unsafe_arena_release_speech_end_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_end_offset)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = speech_end_offset_;
  speech_end_offset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::_internal_mutable_speech_end_offset() {
  
  if (speech_end_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    speech_end_offset_ = p;
  }
  return speech_end_offset_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::mutable_speech_end_offset() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_end_offset)
  return _internal_mutable_speech_end_offset();
}
inline void StreamingRecognitionResult::set_allocated_speech_end_offset(PROTOBUF_NAMESPACE_ID::Duration* speech_end_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_end_offset_);
  }
  if (speech_end_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_end_offset)->GetArena();
    if (message_arena != submessage_arena) {
      speech_end_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_end_offset, submessage_arena);
    }
    
  } else {
    
  }
  speech_end_offset_ = speech_end_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingRecognitionResult.speech_end_offset)
}

// string language_code = 10;
inline void StreamingRecognitionResult::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& StreamingRecognitionResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
  return _internal_language_code();
}
inline void StreamingRecognitionResult::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
}
inline std::string* StreamingRecognitionResult::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& StreamingRecognitionResult::_internal_language_code() const {
  return language_code_.Get();
}
inline void StreamingRecognitionResult::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamingRecognitionResult::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
}
inline void StreamingRecognitionResult::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
}
inline void StreamingRecognitionResult::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
}
inline std::string* StreamingRecognitionResult::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamingRecognitionResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingRecognitionResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.StreamingRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// TextInput

// string text = 1 [(.google.api.field_behavior) = REQUIRED];
inline void TextInput::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextInput::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TextInput.text)
  return _internal_text();
}
inline void TextInput::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TextInput.text)
}
inline std::string* TextInput::mutable_text() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.TextInput.text)
  return _internal_mutable_text();
}
inline const std::string& TextInput::_internal_text() const {
  return text_.Get();
}
inline void TextInput::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextInput::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.TextInput.text)
}
inline void TextInput::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.TextInput.text)
}
inline void TextInput::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.TextInput.text)
}
inline std::string* TextInput::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextInput::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.TextInput.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextInput::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.TextInput.text)
}

// string language_code = 2 [(.google.api.field_behavior) = REQUIRED];
inline void TextInput::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& TextInput::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.TextInput.language_code)
  return _internal_language_code();
}
inline void TextInput::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.TextInput.language_code)
}
inline std::string* TextInput::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.TextInput.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& TextInput::_internal_language_code() const {
  return language_code_.Get();
}
inline void TextInput::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextInput::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.TextInput.language_code)
}
inline void TextInput::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.TextInput.language_code)
}
inline void TextInput::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.TextInput.language_code)
}
inline std::string* TextInput::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextInput::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.TextInput.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextInput::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.TextInput.language_code)
}

// -------------------------------------------------------------------

// EventInput

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void EventInput::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EventInput::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EventInput.name)
  return _internal_name();
}
inline void EventInput::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EventInput.name)
}
inline std::string* EventInput::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EventInput.name)
  return _internal_mutable_name();
}
inline const std::string& EventInput::_internal_name() const {
  return name_.Get();
}
inline void EventInput::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EventInput::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.EventInput.name)
}
inline void EventInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.EventInput.name)
}
inline void EventInput::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.EventInput.name)
}
inline std::string* EventInput::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EventInput::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EventInput.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventInput::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EventInput.name)
}

// .google.protobuf.Struct parameters = 2;
inline bool EventInput::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool EventInput::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EventInput::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EventInput::parameters() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EventInput.parameters)
  return _internal_parameters();
}
inline void EventInput::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.EventInput.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventInput::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventInput::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EventInput.parameters)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventInput::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventInput::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EventInput.parameters)
  return _internal_mutable_parameters();
}
inline void EventInput::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EventInput.parameters)
}

// string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
inline void EventInput::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& EventInput::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.EventInput.language_code)
  return _internal_language_code();
}
inline void EventInput::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.EventInput.language_code)
}
inline std::string* EventInput::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.EventInput.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& EventInput::_internal_language_code() const {
  return language_code_.Get();
}
inline void EventInput::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EventInput::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2.EventInput.language_code)
}
inline void EventInput::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2.EventInput.language_code)
}
inline void EventInput::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2.EventInput.language_code)
}
inline std::string* EventInput::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EventInput::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.EventInput.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventInput::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.EventInput.language_code)
}

// -------------------------------------------------------------------

// SentimentAnalysisRequestConfig

// bool analyze_query_text_sentiment = 1;
inline void SentimentAnalysisRequestConfig::clear_analyze_query_text_sentiment() {
  analyze_query_text_sentiment_ = false;
}
inline bool SentimentAnalysisRequestConfig::_internal_analyze_query_text_sentiment() const {
  return analyze_query_text_sentiment_;
}
inline bool SentimentAnalysisRequestConfig::analyze_query_text_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig.analyze_query_text_sentiment)
  return _internal_analyze_query_text_sentiment();
}
inline void SentimentAnalysisRequestConfig::_internal_set_analyze_query_text_sentiment(bool value) {
  
  analyze_query_text_sentiment_ = value;
}
inline void SentimentAnalysisRequestConfig::set_analyze_query_text_sentiment(bool value) {
  _internal_set_analyze_query_text_sentiment(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig.analyze_query_text_sentiment)
}

// -------------------------------------------------------------------

// SentimentAnalysisResult

// .google.cloud.dialogflow.v2.Sentiment query_text_sentiment = 1;
inline bool SentimentAnalysisResult::_internal_has_query_text_sentiment() const {
  return this != internal_default_instance() && query_text_sentiment_ != nullptr;
}
inline bool SentimentAnalysisResult::has_query_text_sentiment() const {
  return _internal_has_query_text_sentiment();
}
inline void SentimentAnalysisResult::clear_query_text_sentiment() {
  if (GetArena() == nullptr && query_text_sentiment_ != nullptr) {
    delete query_text_sentiment_;
  }
  query_text_sentiment_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2::Sentiment& SentimentAnalysisResult::_internal_query_text_sentiment() const {
  const ::google::cloud::dialogflow::v2::Sentiment* p = query_text_sentiment_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2::Sentiment&>(
      ::google::cloud::dialogflow::v2::_Sentiment_default_instance_);
}
inline const ::google::cloud::dialogflow::v2::Sentiment& SentimentAnalysisResult::query_text_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.SentimentAnalysisResult.query_text_sentiment)
  return _internal_query_text_sentiment();
}
inline void SentimentAnalysisResult::unsafe_arena_set_allocated_query_text_sentiment(
    ::google::cloud::dialogflow::v2::Sentiment* query_text_sentiment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_text_sentiment_);
  }
  query_text_sentiment_ = query_text_sentiment;
  if (query_text_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2.SentimentAnalysisResult.query_text_sentiment)
}
inline ::google::cloud::dialogflow::v2::Sentiment* SentimentAnalysisResult::release_query_text_sentiment() {
  
  ::google::cloud::dialogflow::v2::Sentiment* temp = query_text_sentiment_;
  query_text_sentiment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2::Sentiment* SentimentAnalysisResult::unsafe_arena_release_query_text_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2.SentimentAnalysisResult.query_text_sentiment)
  
  ::google::cloud::dialogflow::v2::Sentiment* temp = query_text_sentiment_;
  query_text_sentiment_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2::Sentiment* SentimentAnalysisResult::_internal_mutable_query_text_sentiment() {
  
  if (query_text_sentiment_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2::Sentiment>(GetArena());
    query_text_sentiment_ = p;
  }
  return query_text_sentiment_;
}
inline ::google::cloud::dialogflow::v2::Sentiment* SentimentAnalysisResult::mutable_query_text_sentiment() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2.SentimentAnalysisResult.query_text_sentiment)
  return _internal_mutable_query_text_sentiment();
}
inline void SentimentAnalysisResult::set_allocated_query_text_sentiment(::google::cloud::dialogflow::v2::Sentiment* query_text_sentiment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_text_sentiment_;
  }
  if (query_text_sentiment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_text_sentiment);
    if (message_arena != submessage_arena) {
      query_text_sentiment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_text_sentiment, submessage_arena);
    }
    
  } else {
    
  }
  query_text_sentiment_ = query_text_sentiment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2.SentimentAnalysisResult.query_text_sentiment)
}

// -------------------------------------------------------------------

// Sentiment

// float score = 1;
inline void Sentiment::clear_score() {
  score_ = 0;
}
inline float Sentiment::_internal_score() const {
  return score_;
}
inline float Sentiment::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Sentiment.score)
  return _internal_score();
}
inline void Sentiment::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Sentiment::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Sentiment.score)
}

// float magnitude = 2;
inline void Sentiment::clear_magnitude() {
  magnitude_ = 0;
}
inline float Sentiment::_internal_magnitude() const {
  return magnitude_;
}
inline float Sentiment::magnitude() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2.Sentiment.magnitude)
  return _internal_magnitude();
}
inline void Sentiment::_internal_set_magnitude(float value) {
  
  magnitude_ = value;
}
inline void Sentiment::set_magnitude(float value) {
  _internal_set_magnitude(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2.Sentiment.magnitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType>() {
  return ::google::cloud::dialogflow::v2::StreamingRecognitionResult_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2_2fsession_2eproto
