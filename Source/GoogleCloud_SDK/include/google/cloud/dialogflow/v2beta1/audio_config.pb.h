// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/audio_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2beta1 {
class InputAudioConfig;
struct InputAudioConfigDefaultTypeInternal;
extern InputAudioConfigDefaultTypeInternal _InputAudioConfig_default_instance_;
class OutputAudioConfig;
struct OutputAudioConfigDefaultTypeInternal;
extern OutputAudioConfigDefaultTypeInternal _OutputAudioConfig_default_instance_;
class SpeechContext;
struct SpeechContextDefaultTypeInternal;
extern SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
class SpeechToTextConfig;
struct SpeechToTextConfigDefaultTypeInternal;
extern SpeechToTextConfigDefaultTypeInternal _SpeechToTextConfig_default_instance_;
class SpeechWordInfo;
struct SpeechWordInfoDefaultTypeInternal;
extern SpeechWordInfoDefaultTypeInternal _SpeechWordInfo_default_instance_;
class SynthesizeSpeechConfig;
struct SynthesizeSpeechConfigDefaultTypeInternal;
extern SynthesizeSpeechConfigDefaultTypeInternal _SynthesizeSpeechConfig_default_instance_;
class TelephonyDtmfEvents;
struct TelephonyDtmfEventsDefaultTypeInternal;
extern TelephonyDtmfEventsDefaultTypeInternal _TelephonyDtmfEvents_default_instance_;
class VoiceSelectionParams;
struct VoiceSelectionParamsDefaultTypeInternal;
extern VoiceSelectionParamsDefaultTypeInternal _VoiceSelectionParams_default_instance_;
}  // namespace v2beta1
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::dialogflow::v2beta1::InputAudioConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::InputAudioConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::OutputAudioConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::OutputAudioConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::SpeechContext* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::SpeechContext>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::SpeechToTextConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::SpeechToTextConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::SpeechWordInfo* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::SpeechWordInfo>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::TelephonyDtmfEvents* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::TelephonyDtmfEvents>(Arena*);
template<> ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* Arena::CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::VoiceSelectionParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2beta1 {

enum AudioEncoding : int {
  AUDIO_ENCODING_UNSPECIFIED = 0,
  AUDIO_ENCODING_LINEAR_16 = 1,
  AUDIO_ENCODING_FLAC = 2,
  AUDIO_ENCODING_MULAW = 3,
  AUDIO_ENCODING_AMR = 4,
  AUDIO_ENCODING_AMR_WB = 5,
  AUDIO_ENCODING_OGG_OPUS = 6,
  AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE = 7,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioEncoding_IsValid(int value);
constexpr AudioEncoding AudioEncoding_MIN = AUDIO_ENCODING_UNSPECIFIED;
constexpr AudioEncoding AudioEncoding_MAX = AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE;
constexpr int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEncoding_descriptor();
template<typename T>
inline const std::string& AudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioEncoding_descriptor(), enum_t_value);
}
inline bool AudioEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioEncoding>(
    AudioEncoding_descriptor(), name, value);
}
enum SpeechModelVariant : int {
  SPEECH_MODEL_VARIANT_UNSPECIFIED = 0,
  USE_BEST_AVAILABLE = 1,
  USE_STANDARD = 2,
  USE_ENHANCED = 3,
  SpeechModelVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpeechModelVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpeechModelVariant_IsValid(int value);
constexpr SpeechModelVariant SpeechModelVariant_MIN = SPEECH_MODEL_VARIANT_UNSPECIFIED;
constexpr SpeechModelVariant SpeechModelVariant_MAX = USE_ENHANCED;
constexpr int SpeechModelVariant_ARRAYSIZE = SpeechModelVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeechModelVariant_descriptor();
template<typename T>
inline const std::string& SpeechModelVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeechModelVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeechModelVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpeechModelVariant_descriptor(), enum_t_value);
}
inline bool SpeechModelVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpeechModelVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpeechModelVariant>(
    SpeechModelVariant_descriptor(), name, value);
}
enum SsmlVoiceGender : int {
  SSML_VOICE_GENDER_UNSPECIFIED = 0,
  SSML_VOICE_GENDER_MALE = 1,
  SSML_VOICE_GENDER_FEMALE = 2,
  SSML_VOICE_GENDER_NEUTRAL = 3,
  SsmlVoiceGender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SsmlVoiceGender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SsmlVoiceGender_IsValid(int value);
constexpr SsmlVoiceGender SsmlVoiceGender_MIN = SSML_VOICE_GENDER_UNSPECIFIED;
constexpr SsmlVoiceGender SsmlVoiceGender_MAX = SSML_VOICE_GENDER_NEUTRAL;
constexpr int SsmlVoiceGender_ARRAYSIZE = SsmlVoiceGender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SsmlVoiceGender_descriptor();
template<typename T>
inline const std::string& SsmlVoiceGender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SsmlVoiceGender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SsmlVoiceGender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SsmlVoiceGender_descriptor(), enum_t_value);
}
inline bool SsmlVoiceGender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SsmlVoiceGender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SsmlVoiceGender>(
    SsmlVoiceGender_descriptor(), name, value);
}
enum OutputAudioEncoding : int {
  OUTPUT_AUDIO_ENCODING_UNSPECIFIED = 0,
  OUTPUT_AUDIO_ENCODING_LINEAR_16 = 1,
  OUTPUT_AUDIO_ENCODING_MP3 = 2,
  OUTPUT_AUDIO_ENCODING_MP3_64_KBPS = 4,
  OUTPUT_AUDIO_ENCODING_OGG_OPUS = 3,
  OUTPUT_AUDIO_ENCODING_MULAW = 5,
  OutputAudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OutputAudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OutputAudioEncoding_IsValid(int value);
constexpr OutputAudioEncoding OutputAudioEncoding_MIN = OUTPUT_AUDIO_ENCODING_UNSPECIFIED;
constexpr OutputAudioEncoding OutputAudioEncoding_MAX = OUTPUT_AUDIO_ENCODING_MULAW;
constexpr int OutputAudioEncoding_ARRAYSIZE = OutputAudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputAudioEncoding_descriptor();
template<typename T>
inline const std::string& OutputAudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputAudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputAudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputAudioEncoding_descriptor(), enum_t_value);
}
inline bool OutputAudioEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OutputAudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputAudioEncoding>(
    OutputAudioEncoding_descriptor(), name, value);
}
enum TelephonyDtmf : int {
  TELEPHONY_DTMF_UNSPECIFIED = 0,
  DTMF_ONE = 1,
  DTMF_TWO = 2,
  DTMF_THREE = 3,
  DTMF_FOUR = 4,
  DTMF_FIVE = 5,
  DTMF_SIX = 6,
  DTMF_SEVEN = 7,
  DTMF_EIGHT = 8,
  DTMF_NINE = 9,
  DTMF_ZERO = 10,
  DTMF_A = 11,
  DTMF_B = 12,
  DTMF_C = 13,
  DTMF_D = 14,
  DTMF_STAR = 15,
  DTMF_POUND = 16,
  TelephonyDtmf_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TelephonyDtmf_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TelephonyDtmf_IsValid(int value);
constexpr TelephonyDtmf TelephonyDtmf_MIN = TELEPHONY_DTMF_UNSPECIFIED;
constexpr TelephonyDtmf TelephonyDtmf_MAX = DTMF_POUND;
constexpr int TelephonyDtmf_ARRAYSIZE = TelephonyDtmf_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelephonyDtmf_descriptor();
template<typename T>
inline const std::string& TelephonyDtmf_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelephonyDtmf>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelephonyDtmf_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelephonyDtmf_descriptor(), enum_t_value);
}
inline bool TelephonyDtmf_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelephonyDtmf* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelephonyDtmf>(
    TelephonyDtmf_descriptor(), name, value);
}
// ===================================================================

class SpeechContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.SpeechContext) */ {
 public:
  inline SpeechContext() : SpeechContext(nullptr) {}
  virtual ~SpeechContext();
  explicit constexpr SpeechContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechContext(const SpeechContext& from);
  SpeechContext(SpeechContext&& from) noexcept
    : SpeechContext() {
    *this = ::std::move(from);
  }

  inline SpeechContext& operator=(const SpeechContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechContext& operator=(SpeechContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeechContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechContext* internal_default_instance() {
    return reinterpret_cast<const SpeechContext*>(
               &_SpeechContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeechContext& a, SpeechContext& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechContext* New() const final {
    return CreateMaybeMessage<SpeechContext>(nullptr);
  }

  SpeechContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeechContext& from);
  void MergeFrom(const SpeechContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.SpeechContext";
  }
  protected:
  explicit SpeechContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 1,
    kBoostFieldNumber = 2,
  };
  // repeated string phrases = 1;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;
  public:
  void clear_phrases();
  const std::string& phrases(int index) const;
  std::string* mutable_phrases(int index);
  void set_phrases(int index, const std::string& value);
  void set_phrases(int index, std::string&& value);
  void set_phrases(int index, const char* value);
  void set_phrases(int index, const char* value, size_t size);
  std::string* add_phrases();
  void add_phrases(const std::string& value);
  void add_phrases(std::string&& value);
  void add_phrases(const char* value);
  void add_phrases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phrases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phrases();
  private:
  const std::string& _internal_phrases(int index) const;
  std::string* _internal_add_phrases();
  public:

  // float boost = 2;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.SpeechContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phrases_;
  float boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpeechWordInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.SpeechWordInfo) */ {
 public:
  inline SpeechWordInfo() : SpeechWordInfo(nullptr) {}
  virtual ~SpeechWordInfo();
  explicit constexpr SpeechWordInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechWordInfo(const SpeechWordInfo& from);
  SpeechWordInfo(SpeechWordInfo&& from) noexcept
    : SpeechWordInfo() {
    *this = ::std::move(from);
  }

  inline SpeechWordInfo& operator=(const SpeechWordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechWordInfo& operator=(SpeechWordInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeechWordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechWordInfo* internal_default_instance() {
    return reinterpret_cast<const SpeechWordInfo*>(
               &_SpeechWordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpeechWordInfo& a, SpeechWordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechWordInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechWordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechWordInfo* New() const final {
    return CreateMaybeMessage<SpeechWordInfo>(nullptr);
  }

  SpeechWordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechWordInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeechWordInfo& from);
  void MergeFrom(const SpeechWordInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechWordInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.SpeechWordInfo";
  }
  protected:
  explicit SpeechWordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 3,
    kStartOffsetFieldNumber = 1,
    kEndOffsetFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // string word = 3;
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // .google.protobuf.Duration start_offset = 1;
  bool has_start_offset() const;
  private:
  bool _internal_has_start_offset() const;
  public:
  void clear_start_offset();
  const PROTOBUF_NAMESPACE_ID::Duration& start_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_start_offset();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_start_offset();
  void set_allocated_start_offset(PROTOBUF_NAMESPACE_ID::Duration* start_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_start_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_start_offset();
  public:
  void unsafe_arena_set_allocated_start_offset(
      PROTOBUF_NAMESPACE_ID::Duration* start_offset);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_start_offset();

  // .google.protobuf.Duration end_offset = 2;
  bool has_end_offset() const;
  private:
  bool _internal_has_end_offset() const;
  public:
  void clear_end_offset();
  const PROTOBUF_NAMESPACE_ID::Duration& end_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_end_offset();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_end_offset();
  void set_allocated_end_offset(PROTOBUF_NAMESPACE_ID::Duration* end_offset);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_end_offset() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_end_offset();
  public:
  void unsafe_arena_set_allocated_end_offset(
      PROTOBUF_NAMESPACE_ID::Duration* end_offset);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_end_offset();

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.SpeechWordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  PROTOBUF_NAMESPACE_ID::Duration* start_offset_;
  PROTOBUF_NAMESPACE_ID::Duration* end_offset_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InputAudioConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.InputAudioConfig) */ {
 public:
  inline InputAudioConfig() : InputAudioConfig(nullptr) {}
  virtual ~InputAudioConfig();
  explicit constexpr InputAudioConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputAudioConfig(const InputAudioConfig& from);
  InputAudioConfig(InputAudioConfig&& from) noexcept
    : InputAudioConfig() {
    *this = ::std::move(from);
  }

  inline InputAudioConfig& operator=(const InputAudioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputAudioConfig& operator=(InputAudioConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputAudioConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputAudioConfig* internal_default_instance() {
    return reinterpret_cast<const InputAudioConfig*>(
               &_InputAudioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputAudioConfig& a, InputAudioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InputAudioConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputAudioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputAudioConfig* New() const final {
    return CreateMaybeMessage<InputAudioConfig>(nullptr);
  }

  InputAudioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputAudioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputAudioConfig& from);
  void MergeFrom(const InputAudioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputAudioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.InputAudioConfig";
  }
  protected:
  explicit InputAudioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseHintsFieldNumber = 4,
    kSpeechContextsFieldNumber = 11,
    kLanguageCodeFieldNumber = 3,
    kModelFieldNumber = 7,
    kAudioEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kModelVariantFieldNumber = 10,
    kEnableWordInfoFieldNumber = 13,
    kSingleUtteranceFieldNumber = 8,
    kDisableNoSpeechRecognizedEventFieldNumber = 14,
  };
  // repeated string phrase_hints = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int phrase_hints_size() const;
  private:
  int _internal_phrase_hints_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_phrase_hints();
  PROTOBUF_DEPRECATED const std::string& phrase_hints(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_phrase_hints(int index);
  PROTOBUF_DEPRECATED void set_phrase_hints(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_phrase_hints(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_phrase_hints(int index, const char* value);
  PROTOBUF_DEPRECATED void set_phrase_hints(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_phrase_hints();
  PROTOBUF_DEPRECATED void add_phrase_hints(const std::string& value);
  PROTOBUF_DEPRECATED void add_phrase_hints(std::string&& value);
  PROTOBUF_DEPRECATED void add_phrase_hints(const char* value);
  PROTOBUF_DEPRECATED void add_phrase_hints(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phrase_hints() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phrase_hints();
  private:
  const std::string& _internal_phrase_hints(int index) const;
  std::string* _internal_add_phrase_hints();
  public:

  // repeated .google.cloud.dialogflow.v2beta1.SpeechContext speech_contexts = 11;
  int speech_contexts_size() const;
  private:
  int _internal_speech_contexts_size() const;
  public:
  void clear_speech_contexts();
  ::google::cloud::dialogflow::v2beta1::SpeechContext* mutable_speech_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2beta1::SpeechContext >*
      mutable_speech_contexts();
  private:
  const ::google::cloud::dialogflow::v2beta1::SpeechContext& _internal_speech_contexts(int index) const;
  ::google::cloud::dialogflow::v2beta1::SpeechContext* _internal_add_speech_contexts();
  public:
  const ::google::cloud::dialogflow::v2beta1::SpeechContext& speech_contexts(int index) const;
  ::google::cloud::dialogflow::v2beta1::SpeechContext* add_speech_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2beta1::SpeechContext >&
      speech_contexts() const;

  // string language_code = 3;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string model = 7;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .google.cloud.dialogflow.v2beta1.AudioEncoding audio_encoding = 1;
  void clear_audio_encoding();
  ::google::cloud::dialogflow::v2beta1::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::google::cloud::dialogflow::v2beta1::AudioEncoding value);
  private:
  ::google::cloud::dialogflow::v2beta1::AudioEncoding _internal_audio_encoding() const;
  void _internal_set_audio_encoding(::google::cloud::dialogflow::v2beta1::AudioEncoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .google.cloud.dialogflow.v2beta1.SpeechModelVariant model_variant = 10;
  void clear_model_variant();
  ::google::cloud::dialogflow::v2beta1::SpeechModelVariant model_variant() const;
  void set_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value);
  private:
  ::google::cloud::dialogflow::v2beta1::SpeechModelVariant _internal_model_variant() const;
  void _internal_set_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value);
  public:

  // bool enable_word_info = 13;
  void clear_enable_word_info();
  bool enable_word_info() const;
  void set_enable_word_info(bool value);
  private:
  bool _internal_enable_word_info() const;
  void _internal_set_enable_word_info(bool value);
  public:

  // bool single_utterance = 8;
  void clear_single_utterance();
  bool single_utterance() const;
  void set_single_utterance(bool value);
  private:
  bool _internal_single_utterance() const;
  void _internal_set_single_utterance(bool value);
  public:

  // bool disable_no_speech_recognized_event = 14;
  void clear_disable_no_speech_recognized_event();
  bool disable_no_speech_recognized_event() const;
  void set_disable_no_speech_recognized_event(bool value);
  private:
  bool _internal_disable_no_speech_recognized_event() const;
  void _internal_set_disable_no_speech_recognized_event(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.InputAudioConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phrase_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2beta1::SpeechContext > speech_contexts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  int audio_encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  int model_variant_;
  bool enable_word_info_;
  bool single_utterance_;
  bool disable_no_speech_recognized_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VoiceSelectionParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.VoiceSelectionParams) */ {
 public:
  inline VoiceSelectionParams() : VoiceSelectionParams(nullptr) {}
  virtual ~VoiceSelectionParams();
  explicit constexpr VoiceSelectionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceSelectionParams(const VoiceSelectionParams& from);
  VoiceSelectionParams(VoiceSelectionParams&& from) noexcept
    : VoiceSelectionParams() {
    *this = ::std::move(from);
  }

  inline VoiceSelectionParams& operator=(const VoiceSelectionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceSelectionParams& operator=(VoiceSelectionParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoiceSelectionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceSelectionParams* internal_default_instance() {
    return reinterpret_cast<const VoiceSelectionParams*>(
               &_VoiceSelectionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VoiceSelectionParams& a, VoiceSelectionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceSelectionParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceSelectionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoiceSelectionParams* New() const final {
    return CreateMaybeMessage<VoiceSelectionParams>(nullptr);
  }

  VoiceSelectionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoiceSelectionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoiceSelectionParams& from);
  void MergeFrom(const VoiceSelectionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceSelectionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.VoiceSelectionParams";
  }
  protected:
  explicit VoiceSelectionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSsmlGenderFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.dialogflow.v2beta1.SsmlVoiceGender ssml_gender = 2;
  void clear_ssml_gender();
  ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender ssml_gender() const;
  void set_ssml_gender(::google::cloud::dialogflow::v2beta1::SsmlVoiceGender value);
  private:
  ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender _internal_ssml_gender() const;
  void _internal_set_ssml_gender(::google::cloud::dialogflow::v2beta1::SsmlVoiceGender value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.VoiceSelectionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int ssml_gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeSpeechConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig) */ {
 public:
  inline SynthesizeSpeechConfig() : SynthesizeSpeechConfig(nullptr) {}
  virtual ~SynthesizeSpeechConfig();
  explicit constexpr SynthesizeSpeechConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynthesizeSpeechConfig(const SynthesizeSpeechConfig& from);
  SynthesizeSpeechConfig(SynthesizeSpeechConfig&& from) noexcept
    : SynthesizeSpeechConfig() {
    *this = ::std::move(from);
  }

  inline SynthesizeSpeechConfig& operator=(const SynthesizeSpeechConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeSpeechConfig& operator=(SynthesizeSpeechConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynthesizeSpeechConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynthesizeSpeechConfig* internal_default_instance() {
    return reinterpret_cast<const SynthesizeSpeechConfig*>(
               &_SynthesizeSpeechConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SynthesizeSpeechConfig& a, SynthesizeSpeechConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeSpeechConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynthesizeSpeechConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeSpeechConfig* New() const final {
    return CreateMaybeMessage<SynthesizeSpeechConfig>(nullptr);
  }

  SynthesizeSpeechConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynthesizeSpeechConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynthesizeSpeechConfig& from);
  void MergeFrom(const SynthesizeSpeechConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeSpeechConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig";
  }
  protected:
  explicit SynthesizeSpeechConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsProfileIdFieldNumber = 5,
    kVoiceFieldNumber = 4,
    kSpeakingRateFieldNumber = 1,
    kPitchFieldNumber = 2,
    kVolumeGainDbFieldNumber = 3,
  };
  // repeated string effects_profile_id = 5;
  int effects_profile_id_size() const;
  private:
  int _internal_effects_profile_id_size() const;
  public:
  void clear_effects_profile_id();
  const std::string& effects_profile_id(int index) const;
  std::string* mutable_effects_profile_id(int index);
  void set_effects_profile_id(int index, const std::string& value);
  void set_effects_profile_id(int index, std::string&& value);
  void set_effects_profile_id(int index, const char* value);
  void set_effects_profile_id(int index, const char* value, size_t size);
  std::string* add_effects_profile_id();
  void add_effects_profile_id(const std::string& value);
  void add_effects_profile_id(std::string&& value);
  void add_effects_profile_id(const char* value);
  void add_effects_profile_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& effects_profile_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_effects_profile_id();
  private:
  const std::string& _internal_effects_profile_id(int index) const;
  std::string* _internal_add_effects_profile_id();
  public:

  // .google.cloud.dialogflow.v2beta1.VoiceSelectionParams voice = 4;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams& voice() const;
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* release_voice();
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* mutable_voice();
  void set_allocated_voice(::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* voice);
  private:
  const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams& _internal_voice() const;
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* _internal_mutable_voice();
  public:
  void unsafe_arena_set_allocated_voice(
      ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* voice);
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* unsafe_arena_release_voice();

  // double speaking_rate = 1;
  void clear_speaking_rate();
  double speaking_rate() const;
  void set_speaking_rate(double value);
  private:
  double _internal_speaking_rate() const;
  void _internal_set_speaking_rate(double value);
  public:

  // double pitch = 2;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double volume_gain_db = 3;
  void clear_volume_gain_db();
  double volume_gain_db() const;
  void set_volume_gain_db(double value);
  private:
  double _internal_volume_gain_db() const;
  void _internal_set_volume_gain_db(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> effects_profile_id_;
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* voice_;
  double speaking_rate_;
  double pitch_;
  double volume_gain_db_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OutputAudioConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.OutputAudioConfig) */ {
 public:
  inline OutputAudioConfig() : OutputAudioConfig(nullptr) {}
  virtual ~OutputAudioConfig();
  explicit constexpr OutputAudioConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputAudioConfig(const OutputAudioConfig& from);
  OutputAudioConfig(OutputAudioConfig&& from) noexcept
    : OutputAudioConfig() {
    *this = ::std::move(from);
  }

  inline OutputAudioConfig& operator=(const OutputAudioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputAudioConfig& operator=(OutputAudioConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputAudioConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputAudioConfig* internal_default_instance() {
    return reinterpret_cast<const OutputAudioConfig*>(
               &_OutputAudioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OutputAudioConfig& a, OutputAudioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputAudioConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputAudioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputAudioConfig* New() const final {
    return CreateMaybeMessage<OutputAudioConfig>(nullptr);
  }

  OutputAudioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputAudioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputAudioConfig& from);
  void MergeFrom(const OutputAudioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputAudioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.OutputAudioConfig";
  }
  protected:
  explicit OutputAudioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynthesizeSpeechConfigFieldNumber = 3,
    kAudioEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
  };
  // .google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig synthesize_speech_config = 3;
  bool has_synthesize_speech_config() const;
  private:
  bool _internal_has_synthesize_speech_config() const;
  public:
  void clear_synthesize_speech_config();
  const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig& synthesize_speech_config() const;
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* release_synthesize_speech_config();
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* mutable_synthesize_speech_config();
  void set_allocated_synthesize_speech_config(::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* synthesize_speech_config);
  private:
  const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig& _internal_synthesize_speech_config() const;
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* _internal_mutable_synthesize_speech_config();
  public:
  void unsafe_arena_set_allocated_synthesize_speech_config(
      ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* synthesize_speech_config);
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* unsafe_arena_release_synthesize_speech_config();

  // .google.cloud.dialogflow.v2beta1.OutputAudioEncoding audio_encoding = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_audio_encoding();
  ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding audio_encoding() const;
  void set_audio_encoding(::google::cloud::dialogflow::v2beta1::OutputAudioEncoding value);
  private:
  ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding _internal_audio_encoding() const;
  void _internal_set_audio_encoding(::google::cloud::dialogflow::v2beta1::OutputAudioEncoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.OutputAudioConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* synthesize_speech_config_;
  int audio_encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TelephonyDtmfEvents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents) */ {
 public:
  inline TelephonyDtmfEvents() : TelephonyDtmfEvents(nullptr) {}
  virtual ~TelephonyDtmfEvents();
  explicit constexpr TelephonyDtmfEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelephonyDtmfEvents(const TelephonyDtmfEvents& from);
  TelephonyDtmfEvents(TelephonyDtmfEvents&& from) noexcept
    : TelephonyDtmfEvents() {
    *this = ::std::move(from);
  }

  inline TelephonyDtmfEvents& operator=(const TelephonyDtmfEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelephonyDtmfEvents& operator=(TelephonyDtmfEvents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TelephonyDtmfEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelephonyDtmfEvents* internal_default_instance() {
    return reinterpret_cast<const TelephonyDtmfEvents*>(
               &_TelephonyDtmfEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TelephonyDtmfEvents& a, TelephonyDtmfEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(TelephonyDtmfEvents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelephonyDtmfEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelephonyDtmfEvents* New() const final {
    return CreateMaybeMessage<TelephonyDtmfEvents>(nullptr);
  }

  TelephonyDtmfEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelephonyDtmfEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TelephonyDtmfEvents& from);
  void MergeFrom(const TelephonyDtmfEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelephonyDtmfEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents";
  }
  protected:
  explicit TelephonyDtmfEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtmfEventsFieldNumber = 1,
  };
  // repeated .google.cloud.dialogflow.v2beta1.TelephonyDtmf dtmf_events = 1;
  int dtmf_events_size() const;
  private:
  int _internal_dtmf_events_size() const;
  public:
  void clear_dtmf_events();
  private:
  ::google::cloud::dialogflow::v2beta1::TelephonyDtmf _internal_dtmf_events(int index) const;
  void _internal_add_dtmf_events(::google::cloud::dialogflow::v2beta1::TelephonyDtmf value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dtmf_events();
  public:
  ::google::cloud::dialogflow::v2beta1::TelephonyDtmf dtmf_events(int index) const;
  void set_dtmf_events(int index, ::google::cloud::dialogflow::v2beta1::TelephonyDtmf value);
  void add_dtmf_events(::google::cloud::dialogflow::v2beta1::TelephonyDtmf value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dtmf_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dtmf_events();

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dtmf_events_;
  mutable std::atomic<int> _dtmf_events_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpeechToTextConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.dialogflow.v2beta1.SpeechToTextConfig) */ {
 public:
  inline SpeechToTextConfig() : SpeechToTextConfig(nullptr) {}
  virtual ~SpeechToTextConfig();
  explicit constexpr SpeechToTextConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechToTextConfig(const SpeechToTextConfig& from);
  SpeechToTextConfig(SpeechToTextConfig&& from) noexcept
    : SpeechToTextConfig() {
    *this = ::std::move(from);
  }

  inline SpeechToTextConfig& operator=(const SpeechToTextConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechToTextConfig& operator=(SpeechToTextConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeechToTextConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechToTextConfig* internal_default_instance() {
    return reinterpret_cast<const SpeechToTextConfig*>(
               &_SpeechToTextConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SpeechToTextConfig& a, SpeechToTextConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechToTextConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechToTextConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechToTextConfig* New() const final {
    return CreateMaybeMessage<SpeechToTextConfig>(nullptr);
  }

  SpeechToTextConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechToTextConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeechToTextConfig& from);
  void MergeFrom(const SpeechToTextConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechToTextConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.dialogflow.v2beta1.SpeechToTextConfig";
  }
  protected:
  explicit SpeechToTextConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechModelVariantFieldNumber = 1,
  };
  // .google.cloud.dialogflow.v2beta1.SpeechModelVariant speech_model_variant = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_speech_model_variant();
  ::google::cloud::dialogflow::v2beta1::SpeechModelVariant speech_model_variant() const;
  void set_speech_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value);
  private:
  ::google::cloud::dialogflow::v2beta1::SpeechModelVariant _internal_speech_model_variant() const;
  void _internal_set_speech_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.dialogflow.v2beta1.SpeechToTextConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int speech_model_variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeechContext

// repeated string phrases = 1;
inline int SpeechContext::_internal_phrases_size() const {
  return phrases_.size();
}
inline int SpeechContext::phrases_size() const {
  return _internal_phrases_size();
}
inline void SpeechContext::clear_phrases() {
  phrases_.Clear();
}
inline std::string* SpeechContext::add_phrases() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  return _internal_add_phrases();
}
inline const std::string& SpeechContext::_internal_phrases(int index) const {
  return phrases_.Get(index);
}
inline const std::string& SpeechContext::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  return _internal_phrases(index);
}
inline std::string* SpeechContext::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  return phrases_.Mutable(index);
}
inline void SpeechContext::set_phrases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(value);
}
inline void SpeechContext::set_phrases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(std::move(value));
}
inline void SpeechContext::set_phrases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phrases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline void SpeechContext::set_phrases(int index, const char* value, size_t size) {
  phrases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline std::string* SpeechContext::_internal_add_phrases() {
  return phrases_.Add();
}
inline void SpeechContext::add_phrases(const std::string& value) {
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(std::string&& value) {
  phrases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(const char* value, size_t size) {
  phrases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SpeechContext::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  return phrases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SpeechContext::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2beta1.SpeechContext.phrases)
  return &phrases_;
}

// float boost = 2;
inline void SpeechContext::clear_boost() {
  boost_ = 0;
}
inline float SpeechContext::_internal_boost() const {
  return boost_;
}
inline float SpeechContext::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechContext.boost)
  return _internal_boost();
}
inline void SpeechContext::_internal_set_boost(float value) {
  
  boost_ = value;
}
inline void SpeechContext::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechContext.boost)
}

// -------------------------------------------------------------------

// SpeechWordInfo

// string word = 3;
inline void SpeechWordInfo::clear_word() {
  word_.ClearToEmpty();
}
inline const std::string& SpeechWordInfo::word() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
  return _internal_word();
}
inline void SpeechWordInfo::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
}
inline std::string* SpeechWordInfo::mutable_word() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
  return _internal_mutable_word();
}
inline const std::string& SpeechWordInfo::_internal_word() const {
  return word_.Get();
}
inline void SpeechWordInfo::_internal_set_word(const std::string& value) {
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpeechWordInfo::set_word(std::string&& value) {
  
  word_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
}
inline void SpeechWordInfo::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
}
inline void SpeechWordInfo::set_word(const char* value,
    size_t size) {
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
}
inline std::string* SpeechWordInfo::_internal_mutable_word() {
  
  return word_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpeechWordInfo::release_word() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
  return word_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpeechWordInfo::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.SpeechWordInfo.word)
}

// .google.protobuf.Duration start_offset = 1;
inline bool SpeechWordInfo::_internal_has_start_offset() const {
  return this != internal_default_instance() && start_offset_ != nullptr;
}
inline bool SpeechWordInfo::has_start_offset() const {
  return _internal_has_start_offset();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SpeechWordInfo::_internal_start_offset() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = start_offset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SpeechWordInfo::start_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechWordInfo.start_offset)
  return _internal_start_offset();
}
inline void SpeechWordInfo::unsafe_arena_set_allocated_start_offset(
    PROTOBUF_NAMESPACE_ID::Duration* start_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_offset_);
  }
  start_offset_ = start_offset;
  if (start_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2beta1.SpeechWordInfo.start_offset)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::release_start_offset() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = start_offset_;
  start_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::unsafe_arena_release_start_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.SpeechWordInfo.start_offset)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = start_offset_;
  start_offset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::_internal_mutable_start_offset() {
  
  if (start_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    start_offset_ = p;
  }
  return start_offset_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::mutable_start_offset() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SpeechWordInfo.start_offset)
  return _internal_mutable_start_offset();
}
inline void SpeechWordInfo::set_allocated_start_offset(PROTOBUF_NAMESPACE_ID::Duration* start_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_offset_);
  }
  if (start_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_offset)->GetArena();
    if (message_arena != submessage_arena) {
      start_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_offset, submessage_arena);
    }
    
  } else {
    
  }
  start_offset_ = start_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.SpeechWordInfo.start_offset)
}

// .google.protobuf.Duration end_offset = 2;
inline bool SpeechWordInfo::_internal_has_end_offset() const {
  return this != internal_default_instance() && end_offset_ != nullptr;
}
inline bool SpeechWordInfo::has_end_offset() const {
  return _internal_has_end_offset();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SpeechWordInfo::_internal_end_offset() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = end_offset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SpeechWordInfo::end_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechWordInfo.end_offset)
  return _internal_end_offset();
}
inline void SpeechWordInfo::unsafe_arena_set_allocated_end_offset(
    PROTOBUF_NAMESPACE_ID::Duration* end_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_offset_);
  }
  end_offset_ = end_offset;
  if (end_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2beta1.SpeechWordInfo.end_offset)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::release_end_offset() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = end_offset_;
  end_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::unsafe_arena_release_end_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.SpeechWordInfo.end_offset)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = end_offset_;
  end_offset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::_internal_mutable_end_offset() {
  
  if (end_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    end_offset_ = p;
  }
  return end_offset_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SpeechWordInfo::mutable_end_offset() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SpeechWordInfo.end_offset)
  return _internal_mutable_end_offset();
}
inline void SpeechWordInfo::set_allocated_end_offset(PROTOBUF_NAMESPACE_ID::Duration* end_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_offset_);
  }
  if (end_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_offset)->GetArena();
    if (message_arena != submessage_arena) {
      end_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_offset, submessage_arena);
    }
    
  } else {
    
  }
  end_offset_ = end_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.SpeechWordInfo.end_offset)
}

// float confidence = 4;
inline void SpeechWordInfo::clear_confidence() {
  confidence_ = 0;
}
inline float SpeechWordInfo::_internal_confidence() const {
  return confidence_;
}
inline float SpeechWordInfo::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechWordInfo.confidence)
  return _internal_confidence();
}
inline void SpeechWordInfo::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void SpeechWordInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechWordInfo.confidence)
}

// -------------------------------------------------------------------

// InputAudioConfig

// .google.cloud.dialogflow.v2beta1.AudioEncoding audio_encoding = 1;
inline void InputAudioConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::google::cloud::dialogflow::v2beta1::AudioEncoding InputAudioConfig::_internal_audio_encoding() const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::AudioEncoding >(audio_encoding_);
}
inline ::google::cloud::dialogflow::v2beta1::AudioEncoding InputAudioConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.audio_encoding)
  return _internal_audio_encoding();
}
inline void InputAudioConfig::_internal_set_audio_encoding(::google::cloud::dialogflow::v2beta1::AudioEncoding value) {
  
  audio_encoding_ = value;
}
inline void InputAudioConfig::set_audio_encoding(::google::cloud::dialogflow::v2beta1::AudioEncoding value) {
  _internal_set_audio_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.audio_encoding)
}

// int32 sample_rate_hertz = 2;
inline void InputAudioConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputAudioConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputAudioConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void InputAudioConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void InputAudioConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.sample_rate_hertz)
}

// string language_code = 3;
inline void InputAudioConfig::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& InputAudioConfig::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
  return _internal_language_code();
}
inline void InputAudioConfig::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
}
inline std::string* InputAudioConfig::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& InputAudioConfig::_internal_language_code() const {
  return language_code_.Get();
}
inline void InputAudioConfig::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InputAudioConfig::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
}
inline void InputAudioConfig::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
}
inline void InputAudioConfig::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
}
inline std::string* InputAudioConfig::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InputAudioConfig::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputAudioConfig::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.InputAudioConfig.language_code)
}

// bool enable_word_info = 13;
inline void InputAudioConfig::clear_enable_word_info() {
  enable_word_info_ = false;
}
inline bool InputAudioConfig::_internal_enable_word_info() const {
  return enable_word_info_;
}
inline bool InputAudioConfig::enable_word_info() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.enable_word_info)
  return _internal_enable_word_info();
}
inline void InputAudioConfig::_internal_set_enable_word_info(bool value) {
  
  enable_word_info_ = value;
}
inline void InputAudioConfig::set_enable_word_info(bool value) {
  _internal_set_enable_word_info(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.enable_word_info)
}

// repeated string phrase_hints = 4 [deprecated = true];
inline int InputAudioConfig::_internal_phrase_hints_size() const {
  return phrase_hints_.size();
}
inline int InputAudioConfig::phrase_hints_size() const {
  return _internal_phrase_hints_size();
}
inline void InputAudioConfig::clear_phrase_hints() {
  phrase_hints_.Clear();
}
inline std::string* InputAudioConfig::add_phrase_hints() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  return _internal_add_phrase_hints();
}
inline const std::string& InputAudioConfig::_internal_phrase_hints(int index) const {
  return phrase_hints_.Get(index);
}
inline const std::string& InputAudioConfig::phrase_hints(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  return _internal_phrase_hints(index);
}
inline std::string* InputAudioConfig::mutable_phrase_hints(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  return phrase_hints_.Mutable(index);
}
inline void InputAudioConfig::set_phrase_hints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  phrase_hints_.Mutable(index)->assign(value);
}
inline void InputAudioConfig::set_phrase_hints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  phrase_hints_.Mutable(index)->assign(std::move(value));
}
inline void InputAudioConfig::set_phrase_hints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phrase_hints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline void InputAudioConfig::set_phrase_hints(int index, const char* value, size_t size) {
  phrase_hints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline std::string* InputAudioConfig::_internal_add_phrase_hints() {
  return phrase_hints_.Add();
}
inline void InputAudioConfig::add_phrase_hints(const std::string& value) {
  phrase_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline void InputAudioConfig::add_phrase_hints(std::string&& value) {
  phrase_hints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline void InputAudioConfig::add_phrase_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phrase_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline void InputAudioConfig::add_phrase_hints(const char* value, size_t size) {
  phrase_hints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputAudioConfig::phrase_hints() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  return phrase_hints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputAudioConfig::mutable_phrase_hints() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2beta1.InputAudioConfig.phrase_hints)
  return &phrase_hints_;
}

// repeated .google.cloud.dialogflow.v2beta1.SpeechContext speech_contexts = 11;
inline int InputAudioConfig::_internal_speech_contexts_size() const {
  return speech_contexts_.size();
}
inline int InputAudioConfig::speech_contexts_size() const {
  return _internal_speech_contexts_size();
}
inline void InputAudioConfig::clear_speech_contexts() {
  speech_contexts_.Clear();
}
inline ::google::cloud::dialogflow::v2beta1::SpeechContext* InputAudioConfig::mutable_speech_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.InputAudioConfig.speech_contexts)
  return speech_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2beta1::SpeechContext >*
InputAudioConfig::mutable_speech_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2beta1.InputAudioConfig.speech_contexts)
  return &speech_contexts_;
}
inline const ::google::cloud::dialogflow::v2beta1::SpeechContext& InputAudioConfig::_internal_speech_contexts(int index) const {
  return speech_contexts_.Get(index);
}
inline const ::google::cloud::dialogflow::v2beta1::SpeechContext& InputAudioConfig::speech_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.speech_contexts)
  return _internal_speech_contexts(index);
}
inline ::google::cloud::dialogflow::v2beta1::SpeechContext* InputAudioConfig::_internal_add_speech_contexts() {
  return speech_contexts_.Add();
}
inline ::google::cloud::dialogflow::v2beta1::SpeechContext* InputAudioConfig::add_speech_contexts() {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.InputAudioConfig.speech_contexts)
  return _internal_add_speech_contexts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::dialogflow::v2beta1::SpeechContext >&
InputAudioConfig::speech_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2beta1.InputAudioConfig.speech_contexts)
  return speech_contexts_;
}

// string model = 7;
inline void InputAudioConfig::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& InputAudioConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
  return _internal_model();
}
inline void InputAudioConfig::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
}
inline std::string* InputAudioConfig::mutable_model() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
  return _internal_mutable_model();
}
inline const std::string& InputAudioConfig::_internal_model() const {
  return model_.Get();
}
inline void InputAudioConfig::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InputAudioConfig::set_model(std::string&& value) {
  
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
}
inline void InputAudioConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
}
inline void InputAudioConfig::set_model(const char* value,
    size_t size) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
}
inline std::string* InputAudioConfig::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InputAudioConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputAudioConfig::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.InputAudioConfig.model)
}

// .google.cloud.dialogflow.v2beta1.SpeechModelVariant model_variant = 10;
inline void InputAudioConfig::clear_model_variant() {
  model_variant_ = 0;
}
inline ::google::cloud::dialogflow::v2beta1::SpeechModelVariant InputAudioConfig::_internal_model_variant() const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::SpeechModelVariant >(model_variant_);
}
inline ::google::cloud::dialogflow::v2beta1::SpeechModelVariant InputAudioConfig::model_variant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.model_variant)
  return _internal_model_variant();
}
inline void InputAudioConfig::_internal_set_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value) {
  
  model_variant_ = value;
}
inline void InputAudioConfig::set_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value) {
  _internal_set_model_variant(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.model_variant)
}

// bool single_utterance = 8;
inline void InputAudioConfig::clear_single_utterance() {
  single_utterance_ = false;
}
inline bool InputAudioConfig::_internal_single_utterance() const {
  return single_utterance_;
}
inline bool InputAudioConfig::single_utterance() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.single_utterance)
  return _internal_single_utterance();
}
inline void InputAudioConfig::_internal_set_single_utterance(bool value) {
  
  single_utterance_ = value;
}
inline void InputAudioConfig::set_single_utterance(bool value) {
  _internal_set_single_utterance(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.single_utterance)
}

// bool disable_no_speech_recognized_event = 14;
inline void InputAudioConfig::clear_disable_no_speech_recognized_event() {
  disable_no_speech_recognized_event_ = false;
}
inline bool InputAudioConfig::_internal_disable_no_speech_recognized_event() const {
  return disable_no_speech_recognized_event_;
}
inline bool InputAudioConfig::disable_no_speech_recognized_event() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.InputAudioConfig.disable_no_speech_recognized_event)
  return _internal_disable_no_speech_recognized_event();
}
inline void InputAudioConfig::_internal_set_disable_no_speech_recognized_event(bool value) {
  
  disable_no_speech_recognized_event_ = value;
}
inline void InputAudioConfig::set_disable_no_speech_recognized_event(bool value) {
  _internal_set_disable_no_speech_recognized_event(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.InputAudioConfig.disable_no_speech_recognized_event)
}

// -------------------------------------------------------------------

// VoiceSelectionParams

// string name = 1;
inline void VoiceSelectionParams::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VoiceSelectionParams::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
  return _internal_name();
}
inline void VoiceSelectionParams::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
}
inline std::string* VoiceSelectionParams::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
  return _internal_mutable_name();
}
inline const std::string& VoiceSelectionParams::_internal_name() const {
  return name_.Get();
}
inline void VoiceSelectionParams::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VoiceSelectionParams::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
}
inline void VoiceSelectionParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
}
inline void VoiceSelectionParams::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
}
inline std::string* VoiceSelectionParams::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VoiceSelectionParams::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoiceSelectionParams::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.name)
}

// .google.cloud.dialogflow.v2beta1.SsmlVoiceGender ssml_gender = 2;
inline void VoiceSelectionParams::clear_ssml_gender() {
  ssml_gender_ = 0;
}
inline ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender VoiceSelectionParams::_internal_ssml_gender() const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender >(ssml_gender_);
}
inline ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender VoiceSelectionParams::ssml_gender() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.ssml_gender)
  return _internal_ssml_gender();
}
inline void VoiceSelectionParams::_internal_set_ssml_gender(::google::cloud::dialogflow::v2beta1::SsmlVoiceGender value) {
  
  ssml_gender_ = value;
}
inline void VoiceSelectionParams::set_ssml_gender(::google::cloud::dialogflow::v2beta1::SsmlVoiceGender value) {
  _internal_set_ssml_gender(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.VoiceSelectionParams.ssml_gender)
}

// -------------------------------------------------------------------

// SynthesizeSpeechConfig

// double speaking_rate = 1;
inline void SynthesizeSpeechConfig::clear_speaking_rate() {
  speaking_rate_ = 0;
}
inline double SynthesizeSpeechConfig::_internal_speaking_rate() const {
  return speaking_rate_;
}
inline double SynthesizeSpeechConfig::speaking_rate() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.speaking_rate)
  return _internal_speaking_rate();
}
inline void SynthesizeSpeechConfig::_internal_set_speaking_rate(double value) {
  
  speaking_rate_ = value;
}
inline void SynthesizeSpeechConfig::set_speaking_rate(double value) {
  _internal_set_speaking_rate(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.speaking_rate)
}

// double pitch = 2;
inline void SynthesizeSpeechConfig::clear_pitch() {
  pitch_ = 0;
}
inline double SynthesizeSpeechConfig::_internal_pitch() const {
  return pitch_;
}
inline double SynthesizeSpeechConfig::pitch() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.pitch)
  return _internal_pitch();
}
inline void SynthesizeSpeechConfig::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void SynthesizeSpeechConfig::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.pitch)
}

// double volume_gain_db = 3;
inline void SynthesizeSpeechConfig::clear_volume_gain_db() {
  volume_gain_db_ = 0;
}
inline double SynthesizeSpeechConfig::_internal_volume_gain_db() const {
  return volume_gain_db_;
}
inline double SynthesizeSpeechConfig::volume_gain_db() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.volume_gain_db)
  return _internal_volume_gain_db();
}
inline void SynthesizeSpeechConfig::_internal_set_volume_gain_db(double value) {
  
  volume_gain_db_ = value;
}
inline void SynthesizeSpeechConfig::set_volume_gain_db(double value) {
  _internal_set_volume_gain_db(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.volume_gain_db)
}

// repeated string effects_profile_id = 5;
inline int SynthesizeSpeechConfig::_internal_effects_profile_id_size() const {
  return effects_profile_id_.size();
}
inline int SynthesizeSpeechConfig::effects_profile_id_size() const {
  return _internal_effects_profile_id_size();
}
inline void SynthesizeSpeechConfig::clear_effects_profile_id() {
  effects_profile_id_.Clear();
}
inline std::string* SynthesizeSpeechConfig::add_effects_profile_id() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  return _internal_add_effects_profile_id();
}
inline const std::string& SynthesizeSpeechConfig::_internal_effects_profile_id(int index) const {
  return effects_profile_id_.Get(index);
}
inline const std::string& SynthesizeSpeechConfig::effects_profile_id(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  return _internal_effects_profile_id(index);
}
inline std::string* SynthesizeSpeechConfig::mutable_effects_profile_id(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  return effects_profile_id_.Mutable(index);
}
inline void SynthesizeSpeechConfig::set_effects_profile_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  effects_profile_id_.Mutable(index)->assign(value);
}
inline void SynthesizeSpeechConfig::set_effects_profile_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  effects_profile_id_.Mutable(index)->assign(std::move(value));
}
inline void SynthesizeSpeechConfig::set_effects_profile_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  effects_profile_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline void SynthesizeSpeechConfig::set_effects_profile_id(int index, const char* value, size_t size) {
  effects_profile_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline std::string* SynthesizeSpeechConfig::_internal_add_effects_profile_id() {
  return effects_profile_id_.Add();
}
inline void SynthesizeSpeechConfig::add_effects_profile_id(const std::string& value) {
  effects_profile_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline void SynthesizeSpeechConfig::add_effects_profile_id(std::string&& value) {
  effects_profile_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline void SynthesizeSpeechConfig::add_effects_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  effects_profile_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline void SynthesizeSpeechConfig::add_effects_profile_id(const char* value, size_t size) {
  effects_profile_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SynthesizeSpeechConfig::effects_profile_id() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  return effects_profile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SynthesizeSpeechConfig::mutable_effects_profile_id() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.effects_profile_id)
  return &effects_profile_id_;
}

// .google.cloud.dialogflow.v2beta1.VoiceSelectionParams voice = 4;
inline bool SynthesizeSpeechConfig::_internal_has_voice() const {
  return this != internal_default_instance() && voice_ != nullptr;
}
inline bool SynthesizeSpeechConfig::has_voice() const {
  return _internal_has_voice();
}
inline void SynthesizeSpeechConfig::clear_voice() {
  if (GetArena() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams& SynthesizeSpeechConfig::_internal_voice() const {
  const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* p = voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams&>(
      ::google::cloud::dialogflow::v2beta1::_VoiceSelectionParams_default_instance_);
}
inline const ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams& SynthesizeSpeechConfig::voice() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.voice)
  return _internal_voice();
}
inline void SynthesizeSpeechConfig::unsafe_arena_set_allocated_voice(
    ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* voice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.voice)
}
inline ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* SynthesizeSpeechConfig::release_voice() {
  
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* temp = voice_;
  voice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* SynthesizeSpeechConfig::unsafe_arena_release_voice() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.voice)
  
  ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* SynthesizeSpeechConfig::_internal_mutable_voice() {
  
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::VoiceSelectionParams>(GetArena());
    voice_ = p;
  }
  return voice_;
}
inline ::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* SynthesizeSpeechConfig::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.voice)
  return _internal_mutable_voice();
}
inline void SynthesizeSpeechConfig::set_allocated_voice(::google::cloud::dialogflow::v2beta1::VoiceSelectionParams* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voice);
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig.voice)
}

// -------------------------------------------------------------------

// OutputAudioConfig

// .google.cloud.dialogflow.v2beta1.OutputAudioEncoding audio_encoding = 1 [(.google.api.field_behavior) = REQUIRED];
inline void OutputAudioConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding OutputAudioConfig::_internal_audio_encoding() const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding >(audio_encoding_);
}
inline ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding OutputAudioConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.OutputAudioConfig.audio_encoding)
  return _internal_audio_encoding();
}
inline void OutputAudioConfig::_internal_set_audio_encoding(::google::cloud::dialogflow::v2beta1::OutputAudioEncoding value) {
  
  audio_encoding_ = value;
}
inline void OutputAudioConfig::set_audio_encoding(::google::cloud::dialogflow::v2beta1::OutputAudioEncoding value) {
  _internal_set_audio_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.OutputAudioConfig.audio_encoding)
}

// int32 sample_rate_hertz = 2;
inline void OutputAudioConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputAudioConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputAudioConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.OutputAudioConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void OutputAudioConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void OutputAudioConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.OutputAudioConfig.sample_rate_hertz)
}

// .google.cloud.dialogflow.v2beta1.SynthesizeSpeechConfig synthesize_speech_config = 3;
inline bool OutputAudioConfig::_internal_has_synthesize_speech_config() const {
  return this != internal_default_instance() && synthesize_speech_config_ != nullptr;
}
inline bool OutputAudioConfig::has_synthesize_speech_config() const {
  return _internal_has_synthesize_speech_config();
}
inline void OutputAudioConfig::clear_synthesize_speech_config() {
  if (GetArena() == nullptr && synthesize_speech_config_ != nullptr) {
    delete synthesize_speech_config_;
  }
  synthesize_speech_config_ = nullptr;
}
inline const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig& OutputAudioConfig::_internal_synthesize_speech_config() const {
  const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* p = synthesize_speech_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig&>(
      ::google::cloud::dialogflow::v2beta1::_SynthesizeSpeechConfig_default_instance_);
}
inline const ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig& OutputAudioConfig::synthesize_speech_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.OutputAudioConfig.synthesize_speech_config)
  return _internal_synthesize_speech_config();
}
inline void OutputAudioConfig::unsafe_arena_set_allocated_synthesize_speech_config(
    ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* synthesize_speech_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synthesize_speech_config_);
  }
  synthesize_speech_config_ = synthesize_speech_config;
  if (synthesize_speech_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.dialogflow.v2beta1.OutputAudioConfig.synthesize_speech_config)
}
inline ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* OutputAudioConfig::release_synthesize_speech_config() {
  
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* temp = synthesize_speech_config_;
  synthesize_speech_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* OutputAudioConfig::unsafe_arena_release_synthesize_speech_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dialogflow.v2beta1.OutputAudioConfig.synthesize_speech_config)
  
  ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* temp = synthesize_speech_config_;
  synthesize_speech_config_ = nullptr;
  return temp;
}
inline ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* OutputAudioConfig::_internal_mutable_synthesize_speech_config() {
  
  if (synthesize_speech_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig>(GetArena());
    synthesize_speech_config_ = p;
  }
  return synthesize_speech_config_;
}
inline ::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* OutputAudioConfig::mutable_synthesize_speech_config() {
  // @@protoc_insertion_point(field_mutable:google.cloud.dialogflow.v2beta1.OutputAudioConfig.synthesize_speech_config)
  return _internal_mutable_synthesize_speech_config();
}
inline void OutputAudioConfig::set_allocated_synthesize_speech_config(::google::cloud::dialogflow::v2beta1::SynthesizeSpeechConfig* synthesize_speech_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete synthesize_speech_config_;
  }
  if (synthesize_speech_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(synthesize_speech_config);
    if (message_arena != submessage_arena) {
      synthesize_speech_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synthesize_speech_config, submessage_arena);
    }
    
  } else {
    
  }
  synthesize_speech_config_ = synthesize_speech_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dialogflow.v2beta1.OutputAudioConfig.synthesize_speech_config)
}

// -------------------------------------------------------------------

// TelephonyDtmfEvents

// repeated .google.cloud.dialogflow.v2beta1.TelephonyDtmf dtmf_events = 1;
inline int TelephonyDtmfEvents::_internal_dtmf_events_size() const {
  return dtmf_events_.size();
}
inline int TelephonyDtmfEvents::dtmf_events_size() const {
  return _internal_dtmf_events_size();
}
inline void TelephonyDtmfEvents::clear_dtmf_events() {
  dtmf_events_.Clear();
}
inline ::google::cloud::dialogflow::v2beta1::TelephonyDtmf TelephonyDtmfEvents::_internal_dtmf_events(int index) const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::TelephonyDtmf >(dtmf_events_.Get(index));
}
inline ::google::cloud::dialogflow::v2beta1::TelephonyDtmf TelephonyDtmfEvents::dtmf_events(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents.dtmf_events)
  return _internal_dtmf_events(index);
}
inline void TelephonyDtmfEvents::set_dtmf_events(int index, ::google::cloud::dialogflow::v2beta1::TelephonyDtmf value) {
  dtmf_events_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents.dtmf_events)
}
inline void TelephonyDtmfEvents::_internal_add_dtmf_events(::google::cloud::dialogflow::v2beta1::TelephonyDtmf value) {
  dtmf_events_.Add(value);
}
inline void TelephonyDtmfEvents::add_dtmf_events(::google::cloud::dialogflow::v2beta1::TelephonyDtmf value) {
  // @@protoc_insertion_point(field_add:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents.dtmf_events)
  _internal_add_dtmf_events(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TelephonyDtmfEvents::dtmf_events() const {
  // @@protoc_insertion_point(field_list:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents.dtmf_events)
  return dtmf_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TelephonyDtmfEvents::_internal_mutable_dtmf_events() {
  return &dtmf_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TelephonyDtmfEvents::mutable_dtmf_events() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dialogflow.v2beta1.TelephonyDtmfEvents.dtmf_events)
  return _internal_mutable_dtmf_events();
}

// -------------------------------------------------------------------

// SpeechToTextConfig

// .google.cloud.dialogflow.v2beta1.SpeechModelVariant speech_model_variant = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void SpeechToTextConfig::clear_speech_model_variant() {
  speech_model_variant_ = 0;
}
inline ::google::cloud::dialogflow::v2beta1::SpeechModelVariant SpeechToTextConfig::_internal_speech_model_variant() const {
  return static_cast< ::google::cloud::dialogflow::v2beta1::SpeechModelVariant >(speech_model_variant_);
}
inline ::google::cloud::dialogflow::v2beta1::SpeechModelVariant SpeechToTextConfig::speech_model_variant() const {
  // @@protoc_insertion_point(field_get:google.cloud.dialogflow.v2beta1.SpeechToTextConfig.speech_model_variant)
  return _internal_speech_model_variant();
}
inline void SpeechToTextConfig::_internal_set_speech_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value) {
  
  speech_model_variant_ = value;
}
inline void SpeechToTextConfig::set_speech_model_variant(::google::cloud::dialogflow::v2beta1::SpeechModelVariant value) {
  _internal_set_speech_model_variant(value);
  // @@protoc_insertion_point(field_set:google.cloud.dialogflow.v2beta1.SpeechToTextConfig.speech_model_variant)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta1
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::dialogflow::v2beta1::AudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2beta1::AudioEncoding>() {
  return ::google::cloud::dialogflow::v2beta1::AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2beta1::SpeechModelVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2beta1::SpeechModelVariant>() {
  return ::google::cloud::dialogflow::v2beta1::SpeechModelVariant_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender>() {
  return ::google::cloud::dialogflow::v2beta1::SsmlVoiceGender_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding>() {
  return ::google::cloud::dialogflow::v2beta1::OutputAudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dialogflow::v2beta1::TelephonyDtmf> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dialogflow::v2beta1::TelephonyDtmf>() {
  return ::google::cloud::dialogflow::v2beta1::TelephonyDtmf_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fdialogflow_2fv2beta1_2faudio_5fconfig_2eproto
