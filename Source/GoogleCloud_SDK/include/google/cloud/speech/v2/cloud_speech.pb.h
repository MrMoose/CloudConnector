// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v2/cloud_speech.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
namespace google {
namespace cloud {
namespace speech {
namespace v2 {
class AutoDetectDecodingConfig;
struct AutoDetectDecodingConfigDefaultTypeInternal;
extern AutoDetectDecodingConfigDefaultTypeInternal _AutoDetectDecodingConfig_default_instance_;
class BatchRecognizeFileMetadata;
struct BatchRecognizeFileMetadataDefaultTypeInternal;
extern BatchRecognizeFileMetadataDefaultTypeInternal _BatchRecognizeFileMetadata_default_instance_;
class BatchRecognizeFileResult;
struct BatchRecognizeFileResultDefaultTypeInternal;
extern BatchRecognizeFileResultDefaultTypeInternal _BatchRecognizeFileResult_default_instance_;
class BatchRecognizeMetadata;
struct BatchRecognizeMetadataDefaultTypeInternal;
extern BatchRecognizeMetadataDefaultTypeInternal _BatchRecognizeMetadata_default_instance_;
class BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse;
struct BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUseDefaultTypeInternal;
extern BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUseDefaultTypeInternal _BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse_default_instance_;
class BatchRecognizeRequest;
struct BatchRecognizeRequestDefaultTypeInternal;
extern BatchRecognizeRequestDefaultTypeInternal _BatchRecognizeRequest_default_instance_;
class BatchRecognizeResponse;
struct BatchRecognizeResponseDefaultTypeInternal;
extern BatchRecognizeResponseDefaultTypeInternal _BatchRecognizeResponse_default_instance_;
class BatchRecognizeResponse_ResultsEntry_DoNotUse;
struct BatchRecognizeResponse_ResultsEntry_DoNotUseDefaultTypeInternal;
extern BatchRecognizeResponse_ResultsEntry_DoNotUseDefaultTypeInternal _BatchRecognizeResponse_ResultsEntry_DoNotUse_default_instance_;
class BatchRecognizeTranscriptionMetadata;
struct BatchRecognizeTranscriptionMetadataDefaultTypeInternal;
extern BatchRecognizeTranscriptionMetadataDefaultTypeInternal _BatchRecognizeTranscriptionMetadata_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class CreateCustomClassRequest;
struct CreateCustomClassRequestDefaultTypeInternal;
extern CreateCustomClassRequestDefaultTypeInternal _CreateCustomClassRequest_default_instance_;
class CreatePhraseSetRequest;
struct CreatePhraseSetRequestDefaultTypeInternal;
extern CreatePhraseSetRequestDefaultTypeInternal _CreatePhraseSetRequest_default_instance_;
class CreateRecognizerRequest;
struct CreateRecognizerRequestDefaultTypeInternal;
extern CreateRecognizerRequestDefaultTypeInternal _CreateRecognizerRequest_default_instance_;
class CustomClass;
struct CustomClassDefaultTypeInternal;
extern CustomClassDefaultTypeInternal _CustomClass_default_instance_;
class CustomClass_AnnotationsEntry_DoNotUse;
struct CustomClass_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern CustomClass_AnnotationsEntry_DoNotUseDefaultTypeInternal _CustomClass_AnnotationsEntry_DoNotUse_default_instance_;
class CustomClass_ClassItem;
struct CustomClass_ClassItemDefaultTypeInternal;
extern CustomClass_ClassItemDefaultTypeInternal _CustomClass_ClassItem_default_instance_;
class DeleteCustomClassRequest;
struct DeleteCustomClassRequestDefaultTypeInternal;
extern DeleteCustomClassRequestDefaultTypeInternal _DeleteCustomClassRequest_default_instance_;
class DeletePhraseSetRequest;
struct DeletePhraseSetRequestDefaultTypeInternal;
extern DeletePhraseSetRequestDefaultTypeInternal _DeletePhraseSetRequest_default_instance_;
class DeleteRecognizerRequest;
struct DeleteRecognizerRequestDefaultTypeInternal;
extern DeleteRecognizerRequestDefaultTypeInternal _DeleteRecognizerRequest_default_instance_;
class ExplicitDecodingConfig;
struct ExplicitDecodingConfigDefaultTypeInternal;
extern ExplicitDecodingConfigDefaultTypeInternal _ExplicitDecodingConfig_default_instance_;
class GetConfigRequest;
struct GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetCustomClassRequest;
struct GetCustomClassRequestDefaultTypeInternal;
extern GetCustomClassRequestDefaultTypeInternal _GetCustomClassRequest_default_instance_;
class GetPhraseSetRequest;
struct GetPhraseSetRequestDefaultTypeInternal;
extern GetPhraseSetRequestDefaultTypeInternal _GetPhraseSetRequest_default_instance_;
class GetRecognizerRequest;
struct GetRecognizerRequestDefaultTypeInternal;
extern GetRecognizerRequestDefaultTypeInternal _GetRecognizerRequest_default_instance_;
class ListCustomClassesRequest;
struct ListCustomClassesRequestDefaultTypeInternal;
extern ListCustomClassesRequestDefaultTypeInternal _ListCustomClassesRequest_default_instance_;
class ListCustomClassesResponse;
struct ListCustomClassesResponseDefaultTypeInternal;
extern ListCustomClassesResponseDefaultTypeInternal _ListCustomClassesResponse_default_instance_;
class ListPhraseSetsRequest;
struct ListPhraseSetsRequestDefaultTypeInternal;
extern ListPhraseSetsRequestDefaultTypeInternal _ListPhraseSetsRequest_default_instance_;
class ListPhraseSetsResponse;
struct ListPhraseSetsResponseDefaultTypeInternal;
extern ListPhraseSetsResponseDefaultTypeInternal _ListPhraseSetsResponse_default_instance_;
class ListRecognizersRequest;
struct ListRecognizersRequestDefaultTypeInternal;
extern ListRecognizersRequestDefaultTypeInternal _ListRecognizersRequest_default_instance_;
class ListRecognizersResponse;
struct ListRecognizersResponseDefaultTypeInternal;
extern ListRecognizersResponseDefaultTypeInternal _ListRecognizersResponse_default_instance_;
class OperationMetadata;
struct OperationMetadataDefaultTypeInternal;
extern OperationMetadataDefaultTypeInternal _OperationMetadata_default_instance_;
class PhraseSet;
struct PhraseSetDefaultTypeInternal;
extern PhraseSetDefaultTypeInternal _PhraseSet_default_instance_;
class PhraseSet_AnnotationsEntry_DoNotUse;
struct PhraseSet_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern PhraseSet_AnnotationsEntry_DoNotUseDefaultTypeInternal _PhraseSet_AnnotationsEntry_DoNotUse_default_instance_;
class PhraseSet_Phrase;
struct PhraseSet_PhraseDefaultTypeInternal;
extern PhraseSet_PhraseDefaultTypeInternal _PhraseSet_Phrase_default_instance_;
class RecognitionConfig;
struct RecognitionConfigDefaultTypeInternal;
extern RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
class RecognitionFeatures;
struct RecognitionFeaturesDefaultTypeInternal;
extern RecognitionFeaturesDefaultTypeInternal _RecognitionFeatures_default_instance_;
class RecognitionResponseMetadata;
struct RecognitionResponseMetadataDefaultTypeInternal;
extern RecognitionResponseMetadataDefaultTypeInternal _RecognitionResponseMetadata_default_instance_;
class RecognizeRequest;
struct RecognizeRequestDefaultTypeInternal;
extern RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
class RecognizeResponse;
struct RecognizeResponseDefaultTypeInternal;
extern RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
class Recognizer;
struct RecognizerDefaultTypeInternal;
extern RecognizerDefaultTypeInternal _Recognizer_default_instance_;
class Recognizer_AnnotationsEntry_DoNotUse;
struct Recognizer_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Recognizer_AnnotationsEntry_DoNotUseDefaultTypeInternal _Recognizer_AnnotationsEntry_DoNotUse_default_instance_;
class SpeakerDiarizationConfig;
struct SpeakerDiarizationConfigDefaultTypeInternal;
extern SpeakerDiarizationConfigDefaultTypeInternal _SpeakerDiarizationConfig_default_instance_;
class SpeechAdaptation;
struct SpeechAdaptationDefaultTypeInternal;
extern SpeechAdaptationDefaultTypeInternal _SpeechAdaptation_default_instance_;
class SpeechAdaptation_AdaptationPhraseSet;
struct SpeechAdaptation_AdaptationPhraseSetDefaultTypeInternal;
extern SpeechAdaptation_AdaptationPhraseSetDefaultTypeInternal _SpeechAdaptation_AdaptationPhraseSet_default_instance_;
class SpeechRecognitionAlternative;
struct SpeechRecognitionAlternativeDefaultTypeInternal;
extern SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
class SpeechRecognitionResult;
struct SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
class StreamingRecognitionConfig;
struct StreamingRecognitionConfigDefaultTypeInternal;
extern StreamingRecognitionConfigDefaultTypeInternal _StreamingRecognitionConfig_default_instance_;
class StreamingRecognitionFeatures;
struct StreamingRecognitionFeaturesDefaultTypeInternal;
extern StreamingRecognitionFeaturesDefaultTypeInternal _StreamingRecognitionFeatures_default_instance_;
class StreamingRecognitionFeatures_VoiceActivityTimeout;
struct StreamingRecognitionFeatures_VoiceActivityTimeoutDefaultTypeInternal;
extern StreamingRecognitionFeatures_VoiceActivityTimeoutDefaultTypeInternal _StreamingRecognitionFeatures_VoiceActivityTimeout_default_instance_;
class StreamingRecognitionResult;
struct StreamingRecognitionResultDefaultTypeInternal;
extern StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
class StreamingRecognizeRequest;
struct StreamingRecognizeRequestDefaultTypeInternal;
extern StreamingRecognizeRequestDefaultTypeInternal _StreamingRecognizeRequest_default_instance_;
class StreamingRecognizeResponse;
struct StreamingRecognizeResponseDefaultTypeInternal;
extern StreamingRecognizeResponseDefaultTypeInternal _StreamingRecognizeResponse_default_instance_;
class UndeleteCustomClassRequest;
struct UndeleteCustomClassRequestDefaultTypeInternal;
extern UndeleteCustomClassRequestDefaultTypeInternal _UndeleteCustomClassRequest_default_instance_;
class UndeletePhraseSetRequest;
struct UndeletePhraseSetRequestDefaultTypeInternal;
extern UndeletePhraseSetRequestDefaultTypeInternal _UndeletePhraseSetRequest_default_instance_;
class UndeleteRecognizerRequest;
struct UndeleteRecognizerRequestDefaultTypeInternal;
extern UndeleteRecognizerRequestDefaultTypeInternal _UndeleteRecognizerRequest_default_instance_;
class UpdateConfigRequest;
struct UpdateConfigRequestDefaultTypeInternal;
extern UpdateConfigRequestDefaultTypeInternal _UpdateConfigRequest_default_instance_;
class UpdateCustomClassRequest;
struct UpdateCustomClassRequestDefaultTypeInternal;
extern UpdateCustomClassRequestDefaultTypeInternal _UpdateCustomClassRequest_default_instance_;
class UpdatePhraseSetRequest;
struct UpdatePhraseSetRequestDefaultTypeInternal;
extern UpdatePhraseSetRequestDefaultTypeInternal _UpdatePhraseSetRequest_default_instance_;
class UpdateRecognizerRequest;
struct UpdateRecognizerRequestDefaultTypeInternal;
extern UpdateRecognizerRequestDefaultTypeInternal _UpdateRecognizerRequest_default_instance_;
class WordInfo;
struct WordInfoDefaultTypeInternal;
extern WordInfoDefaultTypeInternal _WordInfo_default_instance_;
}  // namespace v2
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::speech::v2::AutoDetectDecodingConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v2::AutoDetectDecodingConfig>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeFileMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeFileMetadata>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeFileResult* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeFileResult>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeMetadata>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeResponse_ResultsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata>(Arena*);
template<> ::google::cloud::speech::v2::Config* Arena::CreateMaybeMessage<::google::cloud::speech::v2::Config>(Arena*);
template<> ::google::cloud::speech::v2::CreateCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CreateCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v2::CreatePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CreatePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v2::CreateRecognizerRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CreateRecognizerRequest>(Arena*);
template<> ::google::cloud::speech::v2::CustomClass* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CustomClass>(Arena*);
template<> ::google::cloud::speech::v2::CustomClass_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CustomClass_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::speech::v2::CustomClass_ClassItem* Arena::CreateMaybeMessage<::google::cloud::speech::v2::CustomClass_ClassItem>(Arena*);
template<> ::google::cloud::speech::v2::DeleteCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::DeleteCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v2::DeletePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::DeletePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v2::DeleteRecognizerRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::DeleteRecognizerRequest>(Arena*);
template<> ::google::cloud::speech::v2::ExplicitDecodingConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ExplicitDecodingConfig>(Arena*);
template<> ::google::cloud::speech::v2::GetConfigRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::GetConfigRequest>(Arena*);
template<> ::google::cloud::speech::v2::GetCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::GetCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v2::GetPhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::GetPhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v2::GetRecognizerRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::GetRecognizerRequest>(Arena*);
template<> ::google::cloud::speech::v2::ListCustomClassesRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListCustomClassesRequest>(Arena*);
template<> ::google::cloud::speech::v2::ListCustomClassesResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListCustomClassesResponse>(Arena*);
template<> ::google::cloud::speech::v2::ListPhraseSetsRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListPhraseSetsRequest>(Arena*);
template<> ::google::cloud::speech::v2::ListPhraseSetsResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListPhraseSetsResponse>(Arena*);
template<> ::google::cloud::speech::v2::ListRecognizersRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListRecognizersRequest>(Arena*);
template<> ::google::cloud::speech::v2::ListRecognizersResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::ListRecognizersResponse>(Arena*);
template<> ::google::cloud::speech::v2::OperationMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v2::OperationMetadata>(Arena*);
template<> ::google::cloud::speech::v2::PhraseSet* Arena::CreateMaybeMessage<::google::cloud::speech::v2::PhraseSet>(Arena*);
template<> ::google::cloud::speech::v2::PhraseSet_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::PhraseSet_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::speech::v2::PhraseSet_Phrase* Arena::CreateMaybeMessage<::google::cloud::speech::v2::PhraseSet_Phrase>(Arena*);
template<> ::google::cloud::speech::v2::RecognitionConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(Arena*);
template<> ::google::cloud::speech::v2::RecognitionFeatures* Arena::CreateMaybeMessage<::google::cloud::speech::v2::RecognitionFeatures>(Arena*);
template<> ::google::cloud::speech::v2::RecognitionResponseMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v2::RecognitionResponseMetadata>(Arena*);
template<> ::google::cloud::speech::v2::RecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::RecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v2::RecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::RecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v2::Recognizer* Arena::CreateMaybeMessage<::google::cloud::speech::v2::Recognizer>(Arena*);
template<> ::google::cloud::speech::v2::Recognizer_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::Recognizer_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::speech::v2::SpeakerDiarizationConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v2::SpeakerDiarizationConfig>(Arena*);
template<> ::google::cloud::speech::v2::SpeechAdaptation* Arena::CreateMaybeMessage<::google::cloud::speech::v2::SpeechAdaptation>(Arena*);
template<> ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* Arena::CreateMaybeMessage<::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet>(Arena*);
template<> ::google::cloud::speech::v2::SpeechRecognitionAlternative* Arena::CreateMaybeMessage<::google::cloud::speech::v2::SpeechRecognitionAlternative>(Arena*);
template<> ::google::cloud::speech::v2::SpeechRecognitionResult* Arena::CreateMaybeMessage<::google::cloud::speech::v2::SpeechRecognitionResult>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognitionConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionConfig>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognitionFeatures* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionFeatures>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognitionResult* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionResult>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v2::StreamingRecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v2::UndeleteCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UndeleteCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v2::UndeletePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UndeletePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v2::UndeleteRecognizerRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UndeleteRecognizerRequest>(Arena*);
template<> ::google::cloud::speech::v2::UpdateConfigRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UpdateConfigRequest>(Arena*);
template<> ::google::cloud::speech::v2::UpdateCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UpdateCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v2::UpdatePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UpdatePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v2::UpdateRecognizerRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v2::UpdateRecognizerRequest>(Arena*);
template<> ::google::cloud::speech::v2::WordInfo* Arena::CreateMaybeMessage<::google::cloud::speech::v2::WordInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace speech {
namespace v2 {

enum Recognizer_State : int {
  Recognizer_State_STATE_UNSPECIFIED = 0,
  Recognizer_State_ACTIVE = 2,
  Recognizer_State_DELETED = 4,
  Recognizer_State_Recognizer_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Recognizer_State_Recognizer_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Recognizer_State_IsValid(int value);
constexpr Recognizer_State Recognizer_State_State_MIN = Recognizer_State_STATE_UNSPECIFIED;
constexpr Recognizer_State Recognizer_State_State_MAX = Recognizer_State_DELETED;
constexpr int Recognizer_State_State_ARRAYSIZE = Recognizer_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Recognizer_State_descriptor();
template<typename T>
inline const std::string& Recognizer_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Recognizer_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Recognizer_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Recognizer_State_descriptor(), enum_t_value);
}
inline bool Recognizer_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Recognizer_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Recognizer_State>(
    Recognizer_State_descriptor(), name, value);
}
enum ExplicitDecodingConfig_AudioEncoding : int {
  ExplicitDecodingConfig_AudioEncoding_AUDIO_ENCODING_UNSPECIFIED = 0,
  ExplicitDecodingConfig_AudioEncoding_LINEAR16 = 1,
  ExplicitDecodingConfig_AudioEncoding_MULAW = 2,
  ExplicitDecodingConfig_AudioEncoding_ALAW = 3,
  ExplicitDecodingConfig_AudioEncoding_ExplicitDecodingConfig_AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExplicitDecodingConfig_AudioEncoding_ExplicitDecodingConfig_AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExplicitDecodingConfig_AudioEncoding_IsValid(int value);
constexpr ExplicitDecodingConfig_AudioEncoding ExplicitDecodingConfig_AudioEncoding_AudioEncoding_MIN = ExplicitDecodingConfig_AudioEncoding_AUDIO_ENCODING_UNSPECIFIED;
constexpr ExplicitDecodingConfig_AudioEncoding ExplicitDecodingConfig_AudioEncoding_AudioEncoding_MAX = ExplicitDecodingConfig_AudioEncoding_ALAW;
constexpr int ExplicitDecodingConfig_AudioEncoding_AudioEncoding_ARRAYSIZE = ExplicitDecodingConfig_AudioEncoding_AudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExplicitDecodingConfig_AudioEncoding_descriptor();
template<typename T>
inline const std::string& ExplicitDecodingConfig_AudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExplicitDecodingConfig_AudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExplicitDecodingConfig_AudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExplicitDecodingConfig_AudioEncoding_descriptor(), enum_t_value);
}
inline bool ExplicitDecodingConfig_AudioEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExplicitDecodingConfig_AudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExplicitDecodingConfig_AudioEncoding>(
    ExplicitDecodingConfig_AudioEncoding_descriptor(), name, value);
}
enum RecognitionFeatures_MultiChannelMode : int {
  RecognitionFeatures_MultiChannelMode_MULTI_CHANNEL_MODE_UNSPECIFIED = 0,
  RecognitionFeatures_MultiChannelMode_SEPARATE_RECOGNITION_PER_CHANNEL = 1,
  RecognitionFeatures_MultiChannelMode_RecognitionFeatures_MultiChannelMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionFeatures_MultiChannelMode_RecognitionFeatures_MultiChannelMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionFeatures_MultiChannelMode_IsValid(int value);
constexpr RecognitionFeatures_MultiChannelMode RecognitionFeatures_MultiChannelMode_MultiChannelMode_MIN = RecognitionFeatures_MultiChannelMode_MULTI_CHANNEL_MODE_UNSPECIFIED;
constexpr RecognitionFeatures_MultiChannelMode RecognitionFeatures_MultiChannelMode_MultiChannelMode_MAX = RecognitionFeatures_MultiChannelMode_SEPARATE_RECOGNITION_PER_CHANNEL;
constexpr int RecognitionFeatures_MultiChannelMode_MultiChannelMode_ARRAYSIZE = RecognitionFeatures_MultiChannelMode_MultiChannelMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionFeatures_MultiChannelMode_descriptor();
template<typename T>
inline const std::string& RecognitionFeatures_MultiChannelMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionFeatures_MultiChannelMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionFeatures_MultiChannelMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionFeatures_MultiChannelMode_descriptor(), enum_t_value);
}
inline bool RecognitionFeatures_MultiChannelMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionFeatures_MultiChannelMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionFeatures_MultiChannelMode>(
    RecognitionFeatures_MultiChannelMode_descriptor(), name, value);
}
enum StreamingRecognizeResponse_SpeechEventType : int {
  StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED = 0,
  StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE = 1,
  StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_BEGIN = 2,
  StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_END = 3,
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value);
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN = StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX = StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_END;
constexpr int StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE = StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor();
template<typename T>
inline const std::string& StreamingRecognizeResponse_SpeechEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamingRecognizeResponse_SpeechEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamingRecognizeResponse_SpeechEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamingRecognizeResponse_SpeechEventType_descriptor(), enum_t_value);
}
inline bool StreamingRecognizeResponse_SpeechEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamingRecognizeResponse_SpeechEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamingRecognizeResponse_SpeechEventType>(
    StreamingRecognizeResponse_SpeechEventType_descriptor(), name, value);
}
enum CustomClass_State : int {
  CustomClass_State_STATE_UNSPECIFIED = 0,
  CustomClass_State_ACTIVE = 2,
  CustomClass_State_DELETED = 4,
  CustomClass_State_CustomClass_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CustomClass_State_CustomClass_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CustomClass_State_IsValid(int value);
constexpr CustomClass_State CustomClass_State_State_MIN = CustomClass_State_STATE_UNSPECIFIED;
constexpr CustomClass_State CustomClass_State_State_MAX = CustomClass_State_DELETED;
constexpr int CustomClass_State_State_ARRAYSIZE = CustomClass_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomClass_State_descriptor();
template<typename T>
inline const std::string& CustomClass_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CustomClass_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CustomClass_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CustomClass_State_descriptor(), enum_t_value);
}
inline bool CustomClass_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CustomClass_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CustomClass_State>(
    CustomClass_State_descriptor(), name, value);
}
enum PhraseSet_State : int {
  PhraseSet_State_STATE_UNSPECIFIED = 0,
  PhraseSet_State_ACTIVE = 2,
  PhraseSet_State_DELETED = 4,
  PhraseSet_State_PhraseSet_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PhraseSet_State_PhraseSet_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PhraseSet_State_IsValid(int value);
constexpr PhraseSet_State PhraseSet_State_State_MIN = PhraseSet_State_STATE_UNSPECIFIED;
constexpr PhraseSet_State PhraseSet_State_State_MAX = PhraseSet_State_DELETED;
constexpr int PhraseSet_State_State_ARRAYSIZE = PhraseSet_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhraseSet_State_descriptor();
template<typename T>
inline const std::string& PhraseSet_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhraseSet_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhraseSet_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhraseSet_State_descriptor(), enum_t_value);
}
inline bool PhraseSet_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhraseSet_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhraseSet_State>(
    PhraseSet_State_descriptor(), name, value);
}
// ===================================================================

class CreateRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.CreateRecognizerRequest) */ {
 public:
  inline CreateRecognizerRequest() : CreateRecognizerRequest(nullptr) {}
  ~CreateRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRecognizerRequest(const CreateRecognizerRequest& from);
  CreateRecognizerRequest(CreateRecognizerRequest&& from) noexcept
    : CreateRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline CreateRecognizerRequest& operator=(const CreateRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRecognizerRequest& operator=(CreateRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRecognizerRequest*>(
               &_CreateRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateRecognizerRequest& a, CreateRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRecognizerRequest& from) {
    CreateRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.CreateRecognizerRequest";
  }
  protected:
  explicit CreateRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizerIdFieldNumber = 3,
    kParentFieldNumber = 4,
    kRecognizerFieldNumber = 1,
    kValidateOnlyFieldNumber = 2,
  };
  // string recognizer_id = 3;
  void clear_recognizer_id();
  const std::string& recognizer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recognizer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recognizer_id();
  PROTOBUF_NODISCARD std::string* release_recognizer_id();
  void set_allocated_recognizer_id(std::string* recognizer_id);
  private:
  const std::string& _internal_recognizer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recognizer_id(const std::string& value);
  std::string* _internal_mutable_recognizer_id();
  public:

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.speech.v2.Recognizer recognizer = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_recognizer() const;
  private:
  bool _internal_has_recognizer() const;
  public:
  void clear_recognizer();
  const ::google::cloud::speech::v2::Recognizer& recognizer() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::Recognizer* release_recognizer();
  ::google::cloud::speech::v2::Recognizer* mutable_recognizer();
  void set_allocated_recognizer(::google::cloud::speech::v2::Recognizer* recognizer);
  private:
  const ::google::cloud::speech::v2::Recognizer& _internal_recognizer() const;
  ::google::cloud::speech::v2::Recognizer* _internal_mutable_recognizer();
  public:
  void unsafe_arena_set_allocated_recognizer(
      ::google::cloud::speech::v2::Recognizer* recognizer);
  ::google::cloud::speech::v2::Recognizer* unsafe_arena_release_recognizer();

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.CreateRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognizer_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::speech::v2::Recognizer* recognizer_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class OperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.OperationMetadata) */ {
 public:
  inline OperationMetadata() : OperationMetadata(nullptr) {}
  ~OperationMetadata() override;
  explicit PROTOBUF_CONSTEXPR OperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationMetadata(const OperationMetadata& from);
  OperationMetadata(OperationMetadata&& from) noexcept
    : OperationMetadata() {
    *this = ::std::move(from);
  }

  inline OperationMetadata& operator=(const OperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationMetadata& operator=(OperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kBatchRecognizeRequest = 8,
    kCreateRecognizerRequest = 9,
    kUpdateRecognizerRequest = 10,
    kDeleteRecognizerRequest = 11,
    kUndeleteRecognizerRequest = 12,
    kCreateCustomClassRequest = 13,
    kUpdateCustomClassRequest = 14,
    kDeleteCustomClassRequest = 15,
    kUndeleteCustomClassRequest = 16,
    kCreatePhraseSetRequest = 17,
    kUpdatePhraseSetRequest = 18,
    kDeletePhraseSetRequest = 19,
    kUndeletePhraseSetRequest = 20,
    kUpdateConfigRequest = 21,
    REQUEST_NOT_SET = 0,
  };

  enum MetadataCase {
    kBatchRecognizeMetadata = 23,
    METADATA_NOT_SET = 0,
  };

  static inline const OperationMetadata* internal_default_instance() {
    return reinterpret_cast<const OperationMetadata*>(
               &_OperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OperationMetadata& a, OperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationMetadata& from) {
    OperationMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.OperationMetadata";
  }
  protected:
  explicit OperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 3,
    kMethodFieldNumber = 4,
    kKmsKeyNameFieldNumber = 6,
    kKmsKeyVersionNameFieldNumber = 7,
    kCreateTimeFieldNumber = 1,
    kUpdateTimeFieldNumber = 2,
    kProgressPercentFieldNumber = 22,
    kBatchRecognizeRequestFieldNumber = 8,
    kCreateRecognizerRequestFieldNumber = 9,
    kUpdateRecognizerRequestFieldNumber = 10,
    kDeleteRecognizerRequestFieldNumber = 11,
    kUndeleteRecognizerRequestFieldNumber = 12,
    kCreateCustomClassRequestFieldNumber = 13,
    kUpdateCustomClassRequestFieldNumber = 14,
    kDeleteCustomClassRequestFieldNumber = 15,
    kUndeleteCustomClassRequestFieldNumber = 16,
    kCreatePhraseSetRequestFieldNumber = 17,
    kUpdatePhraseSetRequestFieldNumber = 18,
    kDeletePhraseSetRequestFieldNumber = 19,
    kUndeletePhraseSetRequestFieldNumber = 20,
    kUpdateConfigRequestFieldNumber = 21,
    kBatchRecognizeMetadataFieldNumber = 23,
  };
  // string resource = 3;
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_NODISCARD std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string method = 4;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string kms_key_name = 6 [(.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // string kms_key_version_name = 7 [(.google.api.resource_reference) = {
  void clear_kms_key_version_name();
  const std::string& kms_key_version_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_version_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_version_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_version_name();
  void set_allocated_kms_key_version_name(std::string* kms_key_version_name);
  private:
  const std::string& _internal_kms_key_version_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_version_name(const std::string& value);
  std::string* _internal_mutable_kms_key_version_name();
  public:

  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 2;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // int32 progress_percent = 22;
  void clear_progress_percent();
  int32_t progress_percent() const;
  void set_progress_percent(int32_t value);
  private:
  int32_t _internal_progress_percent() const;
  void _internal_set_progress_percent(int32_t value);
  public:

  // .google.cloud.speech.v2.BatchRecognizeRequest batch_recognize_request = 8;
  bool has_batch_recognize_request() const;
  private:
  bool _internal_has_batch_recognize_request() const;
  public:
  void clear_batch_recognize_request();
  const ::google::cloud::speech::v2::BatchRecognizeRequest& batch_recognize_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::BatchRecognizeRequest* release_batch_recognize_request();
  ::google::cloud::speech::v2::BatchRecognizeRequest* mutable_batch_recognize_request();
  void set_allocated_batch_recognize_request(::google::cloud::speech::v2::BatchRecognizeRequest* batch_recognize_request);
  private:
  const ::google::cloud::speech::v2::BatchRecognizeRequest& _internal_batch_recognize_request() const;
  ::google::cloud::speech::v2::BatchRecognizeRequest* _internal_mutable_batch_recognize_request();
  public:
  void unsafe_arena_set_allocated_batch_recognize_request(
      ::google::cloud::speech::v2::BatchRecognizeRequest* batch_recognize_request);
  ::google::cloud::speech::v2::BatchRecognizeRequest* unsafe_arena_release_batch_recognize_request();

  // .google.cloud.speech.v2.CreateRecognizerRequest create_recognizer_request = 9;
  bool has_create_recognizer_request() const;
  private:
  bool _internal_has_create_recognizer_request() const;
  public:
  void clear_create_recognizer_request();
  const ::google::cloud::speech::v2::CreateRecognizerRequest& create_recognizer_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::CreateRecognizerRequest* release_create_recognizer_request();
  ::google::cloud::speech::v2::CreateRecognizerRequest* mutable_create_recognizer_request();
  void set_allocated_create_recognizer_request(::google::cloud::speech::v2::CreateRecognizerRequest* create_recognizer_request);
  private:
  const ::google::cloud::speech::v2::CreateRecognizerRequest& _internal_create_recognizer_request() const;
  ::google::cloud::speech::v2::CreateRecognizerRequest* _internal_mutable_create_recognizer_request();
  public:
  void unsafe_arena_set_allocated_create_recognizer_request(
      ::google::cloud::speech::v2::CreateRecognizerRequest* create_recognizer_request);
  ::google::cloud::speech::v2::CreateRecognizerRequest* unsafe_arena_release_create_recognizer_request();

  // .google.cloud.speech.v2.UpdateRecognizerRequest update_recognizer_request = 10;
  bool has_update_recognizer_request() const;
  private:
  bool _internal_has_update_recognizer_request() const;
  public:
  void clear_update_recognizer_request();
  const ::google::cloud::speech::v2::UpdateRecognizerRequest& update_recognizer_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UpdateRecognizerRequest* release_update_recognizer_request();
  ::google::cloud::speech::v2::UpdateRecognizerRequest* mutable_update_recognizer_request();
  void set_allocated_update_recognizer_request(::google::cloud::speech::v2::UpdateRecognizerRequest* update_recognizer_request);
  private:
  const ::google::cloud::speech::v2::UpdateRecognizerRequest& _internal_update_recognizer_request() const;
  ::google::cloud::speech::v2::UpdateRecognizerRequest* _internal_mutable_update_recognizer_request();
  public:
  void unsafe_arena_set_allocated_update_recognizer_request(
      ::google::cloud::speech::v2::UpdateRecognizerRequest* update_recognizer_request);
  ::google::cloud::speech::v2::UpdateRecognizerRequest* unsafe_arena_release_update_recognizer_request();

  // .google.cloud.speech.v2.DeleteRecognizerRequest delete_recognizer_request = 11;
  bool has_delete_recognizer_request() const;
  private:
  bool _internal_has_delete_recognizer_request() const;
  public:
  void clear_delete_recognizer_request();
  const ::google::cloud::speech::v2::DeleteRecognizerRequest& delete_recognizer_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::DeleteRecognizerRequest* release_delete_recognizer_request();
  ::google::cloud::speech::v2::DeleteRecognizerRequest* mutable_delete_recognizer_request();
  void set_allocated_delete_recognizer_request(::google::cloud::speech::v2::DeleteRecognizerRequest* delete_recognizer_request);
  private:
  const ::google::cloud::speech::v2::DeleteRecognizerRequest& _internal_delete_recognizer_request() const;
  ::google::cloud::speech::v2::DeleteRecognizerRequest* _internal_mutable_delete_recognizer_request();
  public:
  void unsafe_arena_set_allocated_delete_recognizer_request(
      ::google::cloud::speech::v2::DeleteRecognizerRequest* delete_recognizer_request);
  ::google::cloud::speech::v2::DeleteRecognizerRequest* unsafe_arena_release_delete_recognizer_request();

  // .google.cloud.speech.v2.UndeleteRecognizerRequest undelete_recognizer_request = 12;
  bool has_undelete_recognizer_request() const;
  private:
  bool _internal_has_undelete_recognizer_request() const;
  public:
  void clear_undelete_recognizer_request();
  const ::google::cloud::speech::v2::UndeleteRecognizerRequest& undelete_recognizer_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UndeleteRecognizerRequest* release_undelete_recognizer_request();
  ::google::cloud::speech::v2::UndeleteRecognizerRequest* mutable_undelete_recognizer_request();
  void set_allocated_undelete_recognizer_request(::google::cloud::speech::v2::UndeleteRecognizerRequest* undelete_recognizer_request);
  private:
  const ::google::cloud::speech::v2::UndeleteRecognizerRequest& _internal_undelete_recognizer_request() const;
  ::google::cloud::speech::v2::UndeleteRecognizerRequest* _internal_mutable_undelete_recognizer_request();
  public:
  void unsafe_arena_set_allocated_undelete_recognizer_request(
      ::google::cloud::speech::v2::UndeleteRecognizerRequest* undelete_recognizer_request);
  ::google::cloud::speech::v2::UndeleteRecognizerRequest* unsafe_arena_release_undelete_recognizer_request();

  // .google.cloud.speech.v2.CreateCustomClassRequest create_custom_class_request = 13;
  bool has_create_custom_class_request() const;
  private:
  bool _internal_has_create_custom_class_request() const;
  public:
  void clear_create_custom_class_request();
  const ::google::cloud::speech::v2::CreateCustomClassRequest& create_custom_class_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::CreateCustomClassRequest* release_create_custom_class_request();
  ::google::cloud::speech::v2::CreateCustomClassRequest* mutable_create_custom_class_request();
  void set_allocated_create_custom_class_request(::google::cloud::speech::v2::CreateCustomClassRequest* create_custom_class_request);
  private:
  const ::google::cloud::speech::v2::CreateCustomClassRequest& _internal_create_custom_class_request() const;
  ::google::cloud::speech::v2::CreateCustomClassRequest* _internal_mutable_create_custom_class_request();
  public:
  void unsafe_arena_set_allocated_create_custom_class_request(
      ::google::cloud::speech::v2::CreateCustomClassRequest* create_custom_class_request);
  ::google::cloud::speech::v2::CreateCustomClassRequest* unsafe_arena_release_create_custom_class_request();

  // .google.cloud.speech.v2.UpdateCustomClassRequest update_custom_class_request = 14;
  bool has_update_custom_class_request() const;
  private:
  bool _internal_has_update_custom_class_request() const;
  public:
  void clear_update_custom_class_request();
  const ::google::cloud::speech::v2::UpdateCustomClassRequest& update_custom_class_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UpdateCustomClassRequest* release_update_custom_class_request();
  ::google::cloud::speech::v2::UpdateCustomClassRequest* mutable_update_custom_class_request();
  void set_allocated_update_custom_class_request(::google::cloud::speech::v2::UpdateCustomClassRequest* update_custom_class_request);
  private:
  const ::google::cloud::speech::v2::UpdateCustomClassRequest& _internal_update_custom_class_request() const;
  ::google::cloud::speech::v2::UpdateCustomClassRequest* _internal_mutable_update_custom_class_request();
  public:
  void unsafe_arena_set_allocated_update_custom_class_request(
      ::google::cloud::speech::v2::UpdateCustomClassRequest* update_custom_class_request);
  ::google::cloud::speech::v2::UpdateCustomClassRequest* unsafe_arena_release_update_custom_class_request();

  // .google.cloud.speech.v2.DeleteCustomClassRequest delete_custom_class_request = 15;
  bool has_delete_custom_class_request() const;
  private:
  bool _internal_has_delete_custom_class_request() const;
  public:
  void clear_delete_custom_class_request();
  const ::google::cloud::speech::v2::DeleteCustomClassRequest& delete_custom_class_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::DeleteCustomClassRequest* release_delete_custom_class_request();
  ::google::cloud::speech::v2::DeleteCustomClassRequest* mutable_delete_custom_class_request();
  void set_allocated_delete_custom_class_request(::google::cloud::speech::v2::DeleteCustomClassRequest* delete_custom_class_request);
  private:
  const ::google::cloud::speech::v2::DeleteCustomClassRequest& _internal_delete_custom_class_request() const;
  ::google::cloud::speech::v2::DeleteCustomClassRequest* _internal_mutable_delete_custom_class_request();
  public:
  void unsafe_arena_set_allocated_delete_custom_class_request(
      ::google::cloud::speech::v2::DeleteCustomClassRequest* delete_custom_class_request);
  ::google::cloud::speech::v2::DeleteCustomClassRequest* unsafe_arena_release_delete_custom_class_request();

  // .google.cloud.speech.v2.UndeleteCustomClassRequest undelete_custom_class_request = 16;
  bool has_undelete_custom_class_request() const;
  private:
  bool _internal_has_undelete_custom_class_request() const;
  public:
  void clear_undelete_custom_class_request();
  const ::google::cloud::speech::v2::UndeleteCustomClassRequest& undelete_custom_class_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UndeleteCustomClassRequest* release_undelete_custom_class_request();
  ::google::cloud::speech::v2::UndeleteCustomClassRequest* mutable_undelete_custom_class_request();
  void set_allocated_undelete_custom_class_request(::google::cloud::speech::v2::UndeleteCustomClassRequest* undelete_custom_class_request);
  private:
  const ::google::cloud::speech::v2::UndeleteCustomClassRequest& _internal_undelete_custom_class_request() const;
  ::google::cloud::speech::v2::UndeleteCustomClassRequest* _internal_mutable_undelete_custom_class_request();
  public:
  void unsafe_arena_set_allocated_undelete_custom_class_request(
      ::google::cloud::speech::v2::UndeleteCustomClassRequest* undelete_custom_class_request);
  ::google::cloud::speech::v2::UndeleteCustomClassRequest* unsafe_arena_release_undelete_custom_class_request();

  // .google.cloud.speech.v2.CreatePhraseSetRequest create_phrase_set_request = 17;
  bool has_create_phrase_set_request() const;
  private:
  bool _internal_has_create_phrase_set_request() const;
  public:
  void clear_create_phrase_set_request();
  const ::google::cloud::speech::v2::CreatePhraseSetRequest& create_phrase_set_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::CreatePhraseSetRequest* release_create_phrase_set_request();
  ::google::cloud::speech::v2::CreatePhraseSetRequest* mutable_create_phrase_set_request();
  void set_allocated_create_phrase_set_request(::google::cloud::speech::v2::CreatePhraseSetRequest* create_phrase_set_request);
  private:
  const ::google::cloud::speech::v2::CreatePhraseSetRequest& _internal_create_phrase_set_request() const;
  ::google::cloud::speech::v2::CreatePhraseSetRequest* _internal_mutable_create_phrase_set_request();
  public:
  void unsafe_arena_set_allocated_create_phrase_set_request(
      ::google::cloud::speech::v2::CreatePhraseSetRequest* create_phrase_set_request);
  ::google::cloud::speech::v2::CreatePhraseSetRequest* unsafe_arena_release_create_phrase_set_request();

  // .google.cloud.speech.v2.UpdatePhraseSetRequest update_phrase_set_request = 18;
  bool has_update_phrase_set_request() const;
  private:
  bool _internal_has_update_phrase_set_request() const;
  public:
  void clear_update_phrase_set_request();
  const ::google::cloud::speech::v2::UpdatePhraseSetRequest& update_phrase_set_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UpdatePhraseSetRequest* release_update_phrase_set_request();
  ::google::cloud::speech::v2::UpdatePhraseSetRequest* mutable_update_phrase_set_request();
  void set_allocated_update_phrase_set_request(::google::cloud::speech::v2::UpdatePhraseSetRequest* update_phrase_set_request);
  private:
  const ::google::cloud::speech::v2::UpdatePhraseSetRequest& _internal_update_phrase_set_request() const;
  ::google::cloud::speech::v2::UpdatePhraseSetRequest* _internal_mutable_update_phrase_set_request();
  public:
  void unsafe_arena_set_allocated_update_phrase_set_request(
      ::google::cloud::speech::v2::UpdatePhraseSetRequest* update_phrase_set_request);
  ::google::cloud::speech::v2::UpdatePhraseSetRequest* unsafe_arena_release_update_phrase_set_request();

  // .google.cloud.speech.v2.DeletePhraseSetRequest delete_phrase_set_request = 19;
  bool has_delete_phrase_set_request() const;
  private:
  bool _internal_has_delete_phrase_set_request() const;
  public:
  void clear_delete_phrase_set_request();
  const ::google::cloud::speech::v2::DeletePhraseSetRequest& delete_phrase_set_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::DeletePhraseSetRequest* release_delete_phrase_set_request();
  ::google::cloud::speech::v2::DeletePhraseSetRequest* mutable_delete_phrase_set_request();
  void set_allocated_delete_phrase_set_request(::google::cloud::speech::v2::DeletePhraseSetRequest* delete_phrase_set_request);
  private:
  const ::google::cloud::speech::v2::DeletePhraseSetRequest& _internal_delete_phrase_set_request() const;
  ::google::cloud::speech::v2::DeletePhraseSetRequest* _internal_mutable_delete_phrase_set_request();
  public:
  void unsafe_arena_set_allocated_delete_phrase_set_request(
      ::google::cloud::speech::v2::DeletePhraseSetRequest* delete_phrase_set_request);
  ::google::cloud::speech::v2::DeletePhraseSetRequest* unsafe_arena_release_delete_phrase_set_request();

  // .google.cloud.speech.v2.UndeletePhraseSetRequest undelete_phrase_set_request = 20;
  bool has_undelete_phrase_set_request() const;
  private:
  bool _internal_has_undelete_phrase_set_request() const;
  public:
  void clear_undelete_phrase_set_request();
  const ::google::cloud::speech::v2::UndeletePhraseSetRequest& undelete_phrase_set_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UndeletePhraseSetRequest* release_undelete_phrase_set_request();
  ::google::cloud::speech::v2::UndeletePhraseSetRequest* mutable_undelete_phrase_set_request();
  void set_allocated_undelete_phrase_set_request(::google::cloud::speech::v2::UndeletePhraseSetRequest* undelete_phrase_set_request);
  private:
  const ::google::cloud::speech::v2::UndeletePhraseSetRequest& _internal_undelete_phrase_set_request() const;
  ::google::cloud::speech::v2::UndeletePhraseSetRequest* _internal_mutable_undelete_phrase_set_request();
  public:
  void unsafe_arena_set_allocated_undelete_phrase_set_request(
      ::google::cloud::speech::v2::UndeletePhraseSetRequest* undelete_phrase_set_request);
  ::google::cloud::speech::v2::UndeletePhraseSetRequest* unsafe_arena_release_undelete_phrase_set_request();

  // .google.cloud.speech.v2.UpdateConfigRequest update_config_request = 21;
  bool has_update_config_request() const;
  private:
  bool _internal_has_update_config_request() const;
  public:
  void clear_update_config_request();
  const ::google::cloud::speech::v2::UpdateConfigRequest& update_config_request() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::UpdateConfigRequest* release_update_config_request();
  ::google::cloud::speech::v2::UpdateConfigRequest* mutable_update_config_request();
  void set_allocated_update_config_request(::google::cloud::speech::v2::UpdateConfigRequest* update_config_request);
  private:
  const ::google::cloud::speech::v2::UpdateConfigRequest& _internal_update_config_request() const;
  ::google::cloud::speech::v2::UpdateConfigRequest* _internal_mutable_update_config_request();
  public:
  void unsafe_arena_set_allocated_update_config_request(
      ::google::cloud::speech::v2::UpdateConfigRequest* update_config_request);
  ::google::cloud::speech::v2::UpdateConfigRequest* unsafe_arena_release_update_config_request();

  // .google.cloud.speech.v2.BatchRecognizeMetadata batch_recognize_metadata = 23;
  bool has_batch_recognize_metadata() const;
  private:
  bool _internal_has_batch_recognize_metadata() const;
  public:
  void clear_batch_recognize_metadata();
  const ::google::cloud::speech::v2::BatchRecognizeMetadata& batch_recognize_metadata() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::BatchRecognizeMetadata* release_batch_recognize_metadata();
  ::google::cloud::speech::v2::BatchRecognizeMetadata* mutable_batch_recognize_metadata();
  void set_allocated_batch_recognize_metadata(::google::cloud::speech::v2::BatchRecognizeMetadata* batch_recognize_metadata);
  private:
  const ::google::cloud::speech::v2::BatchRecognizeMetadata& _internal_batch_recognize_metadata() const;
  ::google::cloud::speech::v2::BatchRecognizeMetadata* _internal_mutable_batch_recognize_metadata();
  public:
  void unsafe_arena_set_allocated_batch_recognize_metadata(
      ::google::cloud::speech::v2::BatchRecognizeMetadata* batch_recognize_metadata);
  ::google::cloud::speech::v2::BatchRecognizeMetadata* unsafe_arena_release_batch_recognize_metadata();

  void clear_request();
  RequestCase request_case() const;
  void clear_metadata();
  MetadataCase metadata_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.OperationMetadata)
 private:
  class _Internal;
  void set_has_batch_recognize_request();
  void set_has_create_recognizer_request();
  void set_has_update_recognizer_request();
  void set_has_delete_recognizer_request();
  void set_has_undelete_recognizer_request();
  void set_has_create_custom_class_request();
  void set_has_update_custom_class_request();
  void set_has_delete_custom_class_request();
  void set_has_undelete_custom_class_request();
  void set_has_create_phrase_set_request();
  void set_has_update_phrase_set_request();
  void set_has_delete_phrase_set_request();
  void set_has_undelete_phrase_set_request();
  void set_has_update_config_request();
  void set_has_batch_recognize_metadata();

  inline bool has_request() const;
  inline void clear_has_request();

  inline bool has_metadata() const;
  inline void clear_has_metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_version_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    int32_t progress_percent_;
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v2::BatchRecognizeRequest* batch_recognize_request_;
      ::google::cloud::speech::v2::CreateRecognizerRequest* create_recognizer_request_;
      ::google::cloud::speech::v2::UpdateRecognizerRequest* update_recognizer_request_;
      ::google::cloud::speech::v2::DeleteRecognizerRequest* delete_recognizer_request_;
      ::google::cloud::speech::v2::UndeleteRecognizerRequest* undelete_recognizer_request_;
      ::google::cloud::speech::v2::CreateCustomClassRequest* create_custom_class_request_;
      ::google::cloud::speech::v2::UpdateCustomClassRequest* update_custom_class_request_;
      ::google::cloud::speech::v2::DeleteCustomClassRequest* delete_custom_class_request_;
      ::google::cloud::speech::v2::UndeleteCustomClassRequest* undelete_custom_class_request_;
      ::google::cloud::speech::v2::CreatePhraseSetRequest* create_phrase_set_request_;
      ::google::cloud::speech::v2::UpdatePhraseSetRequest* update_phrase_set_request_;
      ::google::cloud::speech::v2::DeletePhraseSetRequest* delete_phrase_set_request_;
      ::google::cloud::speech::v2::UndeletePhraseSetRequest* undelete_phrase_set_request_;
      ::google::cloud::speech::v2::UpdateConfigRequest* update_config_request_;
    } request_;
    union MetadataUnion {
      constexpr MetadataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v2::BatchRecognizeMetadata* batch_recognize_metadata_;
    } metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListRecognizersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListRecognizersRequest) */ {
 public:
  inline ListRecognizersRequest() : ListRecognizersRequest(nullptr) {}
  ~ListRecognizersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListRecognizersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRecognizersRequest(const ListRecognizersRequest& from);
  ListRecognizersRequest(ListRecognizersRequest&& from) noexcept
    : ListRecognizersRequest() {
    *this = ::std::move(from);
  }

  inline ListRecognizersRequest& operator=(const ListRecognizersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecognizersRequest& operator=(ListRecognizersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRecognizersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRecognizersRequest* internal_default_instance() {
    return reinterpret_cast<const ListRecognizersRequest*>(
               &_ListRecognizersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRecognizersRequest& a, ListRecognizersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRecognizersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecognizersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRecognizersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRecognizersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRecognizersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRecognizersRequest& from) {
    ListRecognizersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRecognizersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListRecognizersRequest";
  }
  protected:
  explicit ListRecognizersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
    kShowDeletedFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool show_deleted = 4;
  void clear_show_deleted();
  bool show_deleted() const;
  void set_show_deleted(bool value);
  private:
  bool _internal_show_deleted() const;
  void _internal_set_show_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListRecognizersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    bool show_deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListRecognizersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListRecognizersResponse) */ {
 public:
  inline ListRecognizersResponse() : ListRecognizersResponse(nullptr) {}
  ~ListRecognizersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListRecognizersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRecognizersResponse(const ListRecognizersResponse& from);
  ListRecognizersResponse(ListRecognizersResponse&& from) noexcept
    : ListRecognizersResponse() {
    *this = ::std::move(from);
  }

  inline ListRecognizersResponse& operator=(const ListRecognizersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecognizersResponse& operator=(ListRecognizersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRecognizersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRecognizersResponse* internal_default_instance() {
    return reinterpret_cast<const ListRecognizersResponse*>(
               &_ListRecognizersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListRecognizersResponse& a, ListRecognizersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRecognizersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecognizersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRecognizersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRecognizersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRecognizersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRecognizersResponse& from) {
    ListRecognizersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRecognizersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListRecognizersResponse";
  }
  protected:
  explicit ListRecognizersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.Recognizer recognizers = 1;
  int recognizers_size() const;
  private:
  int _internal_recognizers_size() const;
  public:
  void clear_recognizers();
  ::google::cloud::speech::v2::Recognizer* mutable_recognizers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::Recognizer >*
      mutable_recognizers();
  private:
  const ::google::cloud::speech::v2::Recognizer& _internal_recognizers(int index) const;
  ::google::cloud::speech::v2::Recognizer* _internal_add_recognizers();
  public:
  const ::google::cloud::speech::v2::Recognizer& recognizers(int index) const;
  ::google::cloud::speech::v2::Recognizer* add_recognizers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::Recognizer >&
      recognizers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListRecognizersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::Recognizer > recognizers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class GetRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.GetRecognizerRequest) */ {
 public:
  inline GetRecognizerRequest() : GetRecognizerRequest(nullptr) {}
  ~GetRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecognizerRequest(const GetRecognizerRequest& from);
  GetRecognizerRequest(GetRecognizerRequest&& from) noexcept
    : GetRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline GetRecognizerRequest& operator=(const GetRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecognizerRequest& operator=(GetRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecognizerRequest*>(
               &_GetRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRecognizerRequest& a, GetRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecognizerRequest& from) {
    GetRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.GetRecognizerRequest";
  }
  protected:
  explicit GetRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.GetRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UpdateRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UpdateRecognizerRequest) */ {
 public:
  inline UpdateRecognizerRequest() : UpdateRecognizerRequest(nullptr) {}
  ~UpdateRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRecognizerRequest(const UpdateRecognizerRequest& from);
  UpdateRecognizerRequest(UpdateRecognizerRequest&& from) noexcept
    : UpdateRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRecognizerRequest& operator=(const UpdateRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRecognizerRequest& operator=(UpdateRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRecognizerRequest*>(
               &_UpdateRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateRecognizerRequest& a, UpdateRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRecognizerRequest& from) {
    UpdateRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UpdateRecognizerRequest";
  }
  protected:
  explicit UpdateRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kValidateOnlyFieldNumber = 4,
  };
  // .google.cloud.speech.v2.Recognizer recognizer = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_recognizer() const;
  private:
  bool _internal_has_recognizer() const;
  public:
  void clear_recognizer();
  const ::google::cloud::speech::v2::Recognizer& recognizer() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::Recognizer* release_recognizer();
  ::google::cloud::speech::v2::Recognizer* mutable_recognizer();
  void set_allocated_recognizer(::google::cloud::speech::v2::Recognizer* recognizer);
  private:
  const ::google::cloud::speech::v2::Recognizer& _internal_recognizer() const;
  ::google::cloud::speech::v2::Recognizer* _internal_mutable_recognizer();
  public:
  void unsafe_arena_set_allocated_recognizer(
      ::google::cloud::speech::v2::Recognizer* recognizer);
  ::google::cloud::speech::v2::Recognizer* unsafe_arena_release_recognizer();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool validate_only = 4;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UpdateRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::Recognizer* recognizer_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.DeleteRecognizerRequest) */ {
 public:
  inline DeleteRecognizerRequest() : DeleteRecognizerRequest(nullptr) {}
  ~DeleteRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRecognizerRequest(const DeleteRecognizerRequest& from);
  DeleteRecognizerRequest(DeleteRecognizerRequest&& from) noexcept
    : DeleteRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRecognizerRequest& operator=(const DeleteRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecognizerRequest& operator=(DeleteRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRecognizerRequest*>(
               &_DeleteRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRecognizerRequest& a, DeleteRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRecognizerRequest& from) {
    DeleteRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.DeleteRecognizerRequest";
  }
  protected:
  explicit DeleteRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 3,
    kValidateOnlyFieldNumber = 2,
    kAllowMissingFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // bool allow_missing = 4;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.DeleteRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UndeleteRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UndeleteRecognizerRequest) */ {
 public:
  inline UndeleteRecognizerRequest() : UndeleteRecognizerRequest(nullptr) {}
  ~UndeleteRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR UndeleteRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndeleteRecognizerRequest(const UndeleteRecognizerRequest& from);
  UndeleteRecognizerRequest(UndeleteRecognizerRequest&& from) noexcept
    : UndeleteRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline UndeleteRecognizerRequest& operator=(const UndeleteRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeleteRecognizerRequest& operator=(UndeleteRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndeleteRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndeleteRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteRecognizerRequest*>(
               &_UndeleteRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UndeleteRecognizerRequest& a, UndeleteRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeleteRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndeleteRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndeleteRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndeleteRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndeleteRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UndeleteRecognizerRequest& from) {
    UndeleteRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeleteRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UndeleteRecognizerRequest";
  }
  protected:
  explicit UndeleteRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 4,
    kValidateOnlyFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 4;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UndeleteRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class Recognizer_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Recognizer_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Recognizer_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Recognizer_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Recognizer_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Recognizer_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Recognizer_AnnotationsEntry_DoNotUse& other);
  static const Recognizer_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Recognizer_AnnotationsEntry_DoNotUse*>(&_Recognizer_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.Recognizer.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.Recognizer.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};

// -------------------------------------------------------------------

class Recognizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.Recognizer) */ {
 public:
  inline Recognizer() : Recognizer(nullptr) {}
  ~Recognizer() override;
  explicit PROTOBUF_CONSTEXPR Recognizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recognizer(const Recognizer& from);
  Recognizer(Recognizer&& from) noexcept
    : Recognizer() {
    *this = ::std::move(from);
  }

  inline Recognizer& operator=(const Recognizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recognizer& operator=(Recognizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recognizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recognizer* internal_default_instance() {
    return reinterpret_cast<const Recognizer*>(
               &_Recognizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Recognizer& a, Recognizer& b) {
    a.Swap(&b);
  }
  inline void Swap(Recognizer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recognizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recognizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recognizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Recognizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Recognizer& from) {
    Recognizer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recognizer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.Recognizer";
  }
  protected:
  explicit Recognizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Recognizer_State State;
  static constexpr State STATE_UNSPECIFIED =
    Recognizer_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    Recognizer_State_ACTIVE;
  static constexpr State DELETED =
    Recognizer_State_DELETED;
  static inline bool State_IsValid(int value) {
    return Recognizer_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Recognizer_State_State_MIN;
  static constexpr State State_MAX =
    Recognizer_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Recognizer_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Recognizer_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Recognizer_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Recognizer_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 7,
    kLanguageCodesFieldNumber = 17,
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kModelFieldNumber = 4,
    kEtagFieldNumber = 12,
    kKmsKeyNameFieldNumber = 15,
    kKmsKeyVersionNameFieldNumber = 16,
    kDefaultRecognitionConfigFieldNumber = 6,
    kCreateTimeFieldNumber = 9,
    kUpdateTimeFieldNumber = 10,
    kDeleteTimeFieldNumber = 11,
    kExpireTimeFieldNumber = 14,
    kStateFieldNumber = 8,
    kReconcilingFieldNumber = 13,
  };
  // map<string, string> annotations = 7;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // repeated string language_codes = 17 [(.google.api.field_behavior) = REQUIRED];
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;
  public:
  void clear_language_codes();
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, size_t size);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_language_codes();
  private:
  const std::string& _internal_language_codes(int index) const;
  std::string* _internal_add_language_codes();
  public:

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string model = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string etag = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string kms_key_name = 15 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // string kms_key_version_name = 16 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_version_name();
  const std::string& kms_key_version_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_version_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_version_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_version_name();
  void set_allocated_kms_key_version_name(std::string* kms_key_version_name);
  private:
  const std::string& _internal_kms_key_version_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_version_name(const std::string& value);
  std::string* _internal_mutable_kms_key_version_name();
  public:

  // .google.cloud.speech.v2.RecognitionConfig default_recognition_config = 6;
  bool has_default_recognition_config() const;
  private:
  bool _internal_has_default_recognition_config() const;
  public:
  void clear_default_recognition_config();
  const ::google::cloud::speech::v2::RecognitionConfig& default_recognition_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionConfig* release_default_recognition_config();
  ::google::cloud::speech::v2::RecognitionConfig* mutable_default_recognition_config();
  void set_allocated_default_recognition_config(::google::cloud::speech::v2::RecognitionConfig* default_recognition_config);
  private:
  const ::google::cloud::speech::v2::RecognitionConfig& _internal_default_recognition_config() const;
  ::google::cloud::speech::v2::RecognitionConfig* _internal_mutable_default_recognition_config();
  public:
  void unsafe_arena_set_allocated_default_recognition_config(
      ::google::cloud::speech::v2::RecognitionConfig* default_recognition_config);
  ::google::cloud::speech::v2::RecognitionConfig* unsafe_arena_release_default_recognition_config();

  // .google.protobuf.Timestamp create_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp delete_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.protobuf.Timestamp expire_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.cloud.speech.v2.Recognizer.State state = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::speech::v2::Recognizer_State state() const;
  void set_state(::google::cloud::speech::v2::Recognizer_State value);
  private:
  ::google::cloud::speech::v2::Recognizer_State _internal_state() const;
  void _internal_set_state(::google::cloud::speech::v2::Recognizer_State value);
  public:

  // bool reconciling = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_reconciling();
  bool reconciling() const;
  void set_reconciling(bool value);
  private:
  bool _internal_reconciling() const;
  void _internal_set_reconciling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.Recognizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Recognizer_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> language_codes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_version_name_;
    ::google::cloud::speech::v2::RecognitionConfig* default_recognition_config_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    int state_;
    bool reconciling_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class AutoDetectDecodingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.AutoDetectDecodingConfig) */ {
 public:
  inline AutoDetectDecodingConfig() : AutoDetectDecodingConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AutoDetectDecodingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoDetectDecodingConfig(const AutoDetectDecodingConfig& from);
  AutoDetectDecodingConfig(AutoDetectDecodingConfig&& from) noexcept
    : AutoDetectDecodingConfig() {
    *this = ::std::move(from);
  }

  inline AutoDetectDecodingConfig& operator=(const AutoDetectDecodingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoDetectDecodingConfig& operator=(AutoDetectDecodingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoDetectDecodingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoDetectDecodingConfig* internal_default_instance() {
    return reinterpret_cast<const AutoDetectDecodingConfig*>(
               &_AutoDetectDecodingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AutoDetectDecodingConfig& a, AutoDetectDecodingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoDetectDecodingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoDetectDecodingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoDetectDecodingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoDetectDecodingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AutoDetectDecodingConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AutoDetectDecodingConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.AutoDetectDecodingConfig";
  }
  protected:
  explicit AutoDetectDecodingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.AutoDetectDecodingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ExplicitDecodingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ExplicitDecodingConfig) */ {
 public:
  inline ExplicitDecodingConfig() : ExplicitDecodingConfig(nullptr) {}
  ~ExplicitDecodingConfig() override;
  explicit PROTOBUF_CONSTEXPR ExplicitDecodingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExplicitDecodingConfig(const ExplicitDecodingConfig& from);
  ExplicitDecodingConfig(ExplicitDecodingConfig&& from) noexcept
    : ExplicitDecodingConfig() {
    *this = ::std::move(from);
  }

  inline ExplicitDecodingConfig& operator=(const ExplicitDecodingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplicitDecodingConfig& operator=(ExplicitDecodingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExplicitDecodingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExplicitDecodingConfig* internal_default_instance() {
    return reinterpret_cast<const ExplicitDecodingConfig*>(
               &_ExplicitDecodingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExplicitDecodingConfig& a, ExplicitDecodingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplicitDecodingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExplicitDecodingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExplicitDecodingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExplicitDecodingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExplicitDecodingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExplicitDecodingConfig& from) {
    ExplicitDecodingConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplicitDecodingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ExplicitDecodingConfig";
  }
  protected:
  explicit ExplicitDecodingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExplicitDecodingConfig_AudioEncoding AudioEncoding;
  static constexpr AudioEncoding AUDIO_ENCODING_UNSPECIFIED =
    ExplicitDecodingConfig_AudioEncoding_AUDIO_ENCODING_UNSPECIFIED;
  static constexpr AudioEncoding LINEAR16 =
    ExplicitDecodingConfig_AudioEncoding_LINEAR16;
  static constexpr AudioEncoding MULAW =
    ExplicitDecodingConfig_AudioEncoding_MULAW;
  static constexpr AudioEncoding ALAW =
    ExplicitDecodingConfig_AudioEncoding_ALAW;
  static inline bool AudioEncoding_IsValid(int value) {
    return ExplicitDecodingConfig_AudioEncoding_IsValid(value);
  }
  static constexpr AudioEncoding AudioEncoding_MIN =
    ExplicitDecodingConfig_AudioEncoding_AudioEncoding_MIN;
  static constexpr AudioEncoding AudioEncoding_MAX =
    ExplicitDecodingConfig_AudioEncoding_AudioEncoding_MAX;
  static constexpr int AudioEncoding_ARRAYSIZE =
    ExplicitDecodingConfig_AudioEncoding_AudioEncoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AudioEncoding_descriptor() {
    return ExplicitDecodingConfig_AudioEncoding_descriptor();
  }
  template<typename T>
  static inline const std::string& AudioEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AudioEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AudioEncoding_Name.");
    return ExplicitDecodingConfig_AudioEncoding_Name(enum_t_value);
  }
  static inline bool AudioEncoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AudioEncoding* value) {
    return ExplicitDecodingConfig_AudioEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kAudioChannelCountFieldNumber = 3,
  };
  // .google.cloud.speech.v2.ExplicitDecodingConfig.AudioEncoding encoding = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_encoding();
  ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding encoding() const;
  void set_encoding(::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding value);
  private:
  ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding _internal_encoding() const;
  void _internal_set_encoding(::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  int32_t sample_rate_hertz() const;
  void set_sample_rate_hertz(int32_t value);
  private:
  int32_t _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(int32_t value);
  public:

  // int32 audio_channel_count = 3;
  void clear_audio_channel_count();
  int32_t audio_channel_count() const;
  void set_audio_channel_count(int32_t value);
  private:
  int32_t _internal_audio_channel_count() const;
  void _internal_set_audio_channel_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ExplicitDecodingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int encoding_;
    int32_t sample_rate_hertz_;
    int32_t audio_channel_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeakerDiarizationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.SpeakerDiarizationConfig) */ {
 public:
  inline SpeakerDiarizationConfig() : SpeakerDiarizationConfig(nullptr) {}
  ~SpeakerDiarizationConfig() override;
  explicit PROTOBUF_CONSTEXPR SpeakerDiarizationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeakerDiarizationConfig(const SpeakerDiarizationConfig& from);
  SpeakerDiarizationConfig(SpeakerDiarizationConfig&& from) noexcept
    : SpeakerDiarizationConfig() {
    *this = ::std::move(from);
  }

  inline SpeakerDiarizationConfig& operator=(const SpeakerDiarizationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeakerDiarizationConfig& operator=(SpeakerDiarizationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeakerDiarizationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeakerDiarizationConfig* internal_default_instance() {
    return reinterpret_cast<const SpeakerDiarizationConfig*>(
               &_SpeakerDiarizationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SpeakerDiarizationConfig& a, SpeakerDiarizationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeakerDiarizationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeakerDiarizationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeakerDiarizationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeakerDiarizationConfig& from) {
    SpeakerDiarizationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeakerDiarizationConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.SpeakerDiarizationConfig";
  }
  protected:
  explicit SpeakerDiarizationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSpeakerCountFieldNumber = 2,
    kMaxSpeakerCountFieldNumber = 3,
  };
  // int32 min_speaker_count = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_min_speaker_count();
  int32_t min_speaker_count() const;
  void set_min_speaker_count(int32_t value);
  private:
  int32_t _internal_min_speaker_count() const;
  void _internal_set_min_speaker_count(int32_t value);
  public:

  // int32 max_speaker_count = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_max_speaker_count();
  int32_t max_speaker_count() const;
  void set_max_speaker_count(int32_t value);
  private:
  int32_t _internal_max_speaker_count() const;
  void _internal_set_max_speaker_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.SpeakerDiarizationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t min_speaker_count_;
    int32_t max_speaker_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.RecognitionFeatures) */ {
 public:
  inline RecognitionFeatures() : RecognitionFeatures(nullptr) {}
  ~RecognitionFeatures() override;
  explicit PROTOBUF_CONSTEXPR RecognitionFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionFeatures(const RecognitionFeatures& from);
  RecognitionFeatures(RecognitionFeatures&& from) noexcept
    : RecognitionFeatures() {
    *this = ::std::move(from);
  }

  inline RecognitionFeatures& operator=(const RecognitionFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionFeatures& operator=(RecognitionFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionFeatures* internal_default_instance() {
    return reinterpret_cast<const RecognitionFeatures*>(
               &_RecognitionFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RecognitionFeatures& a, RecognitionFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionFeatures& from) {
    RecognitionFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.RecognitionFeatures";
  }
  protected:
  explicit RecognitionFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecognitionFeatures_MultiChannelMode MultiChannelMode;
  static constexpr MultiChannelMode MULTI_CHANNEL_MODE_UNSPECIFIED =
    RecognitionFeatures_MultiChannelMode_MULTI_CHANNEL_MODE_UNSPECIFIED;
  static constexpr MultiChannelMode SEPARATE_RECOGNITION_PER_CHANNEL =
    RecognitionFeatures_MultiChannelMode_SEPARATE_RECOGNITION_PER_CHANNEL;
  static inline bool MultiChannelMode_IsValid(int value) {
    return RecognitionFeatures_MultiChannelMode_IsValid(value);
  }
  static constexpr MultiChannelMode MultiChannelMode_MIN =
    RecognitionFeatures_MultiChannelMode_MultiChannelMode_MIN;
  static constexpr MultiChannelMode MultiChannelMode_MAX =
    RecognitionFeatures_MultiChannelMode_MultiChannelMode_MAX;
  static constexpr int MultiChannelMode_ARRAYSIZE =
    RecognitionFeatures_MultiChannelMode_MultiChannelMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MultiChannelMode_descriptor() {
    return RecognitionFeatures_MultiChannelMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MultiChannelMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MultiChannelMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MultiChannelMode_Name.");
    return RecognitionFeatures_MultiChannelMode_Name(enum_t_value);
  }
  static inline bool MultiChannelMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MultiChannelMode* value) {
    return RecognitionFeatures_MultiChannelMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiarizationConfigFieldNumber = 9,
    kProfanityFilterFieldNumber = 1,
    kEnableWordTimeOffsetsFieldNumber = 2,
    kEnableWordConfidenceFieldNumber = 3,
    kEnableAutomaticPunctuationFieldNumber = 4,
    kEnableSpokenPunctuationFieldNumber = 14,
    kEnableSpokenEmojisFieldNumber = 15,
    kMaxAlternativesFieldNumber = 16,
    kMultiChannelModeFieldNumber = 17,
  };
  // .google.cloud.speech.v2.SpeakerDiarizationConfig diarization_config = 9;
  bool has_diarization_config() const;
  private:
  bool _internal_has_diarization_config() const;
  public:
  void clear_diarization_config();
  const ::google::cloud::speech::v2::SpeakerDiarizationConfig& diarization_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::SpeakerDiarizationConfig* release_diarization_config();
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* mutable_diarization_config();
  void set_allocated_diarization_config(::google::cloud::speech::v2::SpeakerDiarizationConfig* diarization_config);
  private:
  const ::google::cloud::speech::v2::SpeakerDiarizationConfig& _internal_diarization_config() const;
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* _internal_mutable_diarization_config();
  public:
  void unsafe_arena_set_allocated_diarization_config(
      ::google::cloud::speech::v2::SpeakerDiarizationConfig* diarization_config);
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* unsafe_arena_release_diarization_config();

  // bool profanity_filter = 1;
  void clear_profanity_filter();
  bool profanity_filter() const;
  void set_profanity_filter(bool value);
  private:
  bool _internal_profanity_filter() const;
  void _internal_set_profanity_filter(bool value);
  public:

  // bool enable_word_time_offsets = 2;
  void clear_enable_word_time_offsets();
  bool enable_word_time_offsets() const;
  void set_enable_word_time_offsets(bool value);
  private:
  bool _internal_enable_word_time_offsets() const;
  void _internal_set_enable_word_time_offsets(bool value);
  public:

  // bool enable_word_confidence = 3;
  void clear_enable_word_confidence();
  bool enable_word_confidence() const;
  void set_enable_word_confidence(bool value);
  private:
  bool _internal_enable_word_confidence() const;
  void _internal_set_enable_word_confidence(bool value);
  public:

  // bool enable_automatic_punctuation = 4;
  void clear_enable_automatic_punctuation();
  bool enable_automatic_punctuation() const;
  void set_enable_automatic_punctuation(bool value);
  private:
  bool _internal_enable_automatic_punctuation() const;
  void _internal_set_enable_automatic_punctuation(bool value);
  public:

  // bool enable_spoken_punctuation = 14;
  void clear_enable_spoken_punctuation();
  bool enable_spoken_punctuation() const;
  void set_enable_spoken_punctuation(bool value);
  private:
  bool _internal_enable_spoken_punctuation() const;
  void _internal_set_enable_spoken_punctuation(bool value);
  public:

  // bool enable_spoken_emojis = 15;
  void clear_enable_spoken_emojis();
  bool enable_spoken_emojis() const;
  void set_enable_spoken_emojis(bool value);
  private:
  bool _internal_enable_spoken_emojis() const;
  void _internal_set_enable_spoken_emojis(bool value);
  public:

  // int32 max_alternatives = 16;
  void clear_max_alternatives();
  int32_t max_alternatives() const;
  void set_max_alternatives(int32_t value);
  private:
  int32_t _internal_max_alternatives() const;
  void _internal_set_max_alternatives(int32_t value);
  public:

  // .google.cloud.speech.v2.RecognitionFeatures.MultiChannelMode multi_channel_mode = 17;
  void clear_multi_channel_mode();
  ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode multi_channel_mode() const;
  void set_multi_channel_mode(::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode value);
  private:
  ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode _internal_multi_channel_mode() const;
  void _internal_set_multi_channel_mode(::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.RecognitionFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::SpeakerDiarizationConfig* diarization_config_;
    bool profanity_filter_;
    bool enable_word_time_offsets_;
    bool enable_word_confidence_;
    bool enable_automatic_punctuation_;
    bool enable_spoken_punctuation_;
    bool enable_spoken_emojis_;
    int32_t max_alternatives_;
    int multi_channel_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechAdaptation_AdaptationPhraseSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet) */ {
 public:
  inline SpeechAdaptation_AdaptationPhraseSet() : SpeechAdaptation_AdaptationPhraseSet(nullptr) {}
  ~SpeechAdaptation_AdaptationPhraseSet() override;
  explicit PROTOBUF_CONSTEXPR SpeechAdaptation_AdaptationPhraseSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechAdaptation_AdaptationPhraseSet(const SpeechAdaptation_AdaptationPhraseSet& from);
  SpeechAdaptation_AdaptationPhraseSet(SpeechAdaptation_AdaptationPhraseSet&& from) noexcept
    : SpeechAdaptation_AdaptationPhraseSet() {
    *this = ::std::move(from);
  }

  inline SpeechAdaptation_AdaptationPhraseSet& operator=(const SpeechAdaptation_AdaptationPhraseSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechAdaptation_AdaptationPhraseSet& operator=(SpeechAdaptation_AdaptationPhraseSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechAdaptation_AdaptationPhraseSet& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kPhraseSet = 1,
    kInlinePhraseSet = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const SpeechAdaptation_AdaptationPhraseSet* internal_default_instance() {
    return reinterpret_cast<const SpeechAdaptation_AdaptationPhraseSet*>(
               &_SpeechAdaptation_AdaptationPhraseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SpeechAdaptation_AdaptationPhraseSet& a, SpeechAdaptation_AdaptationPhraseSet& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechAdaptation_AdaptationPhraseSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechAdaptation_AdaptationPhraseSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechAdaptation_AdaptationPhraseSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechAdaptation_AdaptationPhraseSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechAdaptation_AdaptationPhraseSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechAdaptation_AdaptationPhraseSet& from) {
    SpeechAdaptation_AdaptationPhraseSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechAdaptation_AdaptationPhraseSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet";
  }
  protected:
  explicit SpeechAdaptation_AdaptationPhraseSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetFieldNumber = 1,
    kInlinePhraseSetFieldNumber = 2,
  };
  // string phrase_set = 1 [(.google.api.resource_reference) = {
  bool has_phrase_set() const;
  private:
  bool _internal_has_phrase_set() const;
  public:
  void clear_phrase_set();
  const std::string& phrase_set() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phrase_set(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phrase_set();
  PROTOBUF_NODISCARD std::string* release_phrase_set();
  void set_allocated_phrase_set(std::string* phrase_set);
  private:
  const std::string& _internal_phrase_set() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phrase_set(const std::string& value);
  std::string* _internal_mutable_phrase_set();
  public:

  // .google.cloud.speech.v2.PhraseSet inline_phrase_set = 2;
  bool has_inline_phrase_set() const;
  private:
  bool _internal_has_inline_phrase_set() const;
  public:
  void clear_inline_phrase_set();
  const ::google::cloud::speech::v2::PhraseSet& inline_phrase_set() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::PhraseSet* release_inline_phrase_set();
  ::google::cloud::speech::v2::PhraseSet* mutable_inline_phrase_set();
  void set_allocated_inline_phrase_set(::google::cloud::speech::v2::PhraseSet* inline_phrase_set);
  private:
  const ::google::cloud::speech::v2::PhraseSet& _internal_inline_phrase_set() const;
  ::google::cloud::speech::v2::PhraseSet* _internal_mutable_inline_phrase_set();
  public:
  void unsafe_arena_set_allocated_inline_phrase_set(
      ::google::cloud::speech::v2::PhraseSet* inline_phrase_set);
  ::google::cloud::speech::v2::PhraseSet* unsafe_arena_release_inline_phrase_set();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet)
 private:
  class _Internal;
  void set_has_phrase_set();
  void set_has_inline_phrase_set();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phrase_set_;
      ::google::cloud::speech::v2::PhraseSet* inline_phrase_set_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechAdaptation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.SpeechAdaptation) */ {
 public:
  inline SpeechAdaptation() : SpeechAdaptation(nullptr) {}
  ~SpeechAdaptation() override;
  explicit PROTOBUF_CONSTEXPR SpeechAdaptation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechAdaptation(const SpeechAdaptation& from);
  SpeechAdaptation(SpeechAdaptation&& from) noexcept
    : SpeechAdaptation() {
    *this = ::std::move(from);
  }

  inline SpeechAdaptation& operator=(const SpeechAdaptation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechAdaptation& operator=(SpeechAdaptation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechAdaptation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechAdaptation* internal_default_instance() {
    return reinterpret_cast<const SpeechAdaptation*>(
               &_SpeechAdaptation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SpeechAdaptation& a, SpeechAdaptation& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechAdaptation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechAdaptation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechAdaptation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechAdaptation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechAdaptation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechAdaptation& from) {
    SpeechAdaptation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechAdaptation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.SpeechAdaptation";
  }
  protected:
  explicit SpeechAdaptation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpeechAdaptation_AdaptationPhraseSet AdaptationPhraseSet;

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetsFieldNumber = 1,
    kCustomClassesFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet phrase_sets = 1;
  int phrase_sets_size() const;
  private:
  int _internal_phrase_sets_size() const;
  public:
  void clear_phrase_sets();
  ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* mutable_phrase_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet >*
      mutable_phrase_sets();
  private:
  const ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet& _internal_phrase_sets(int index) const;
  ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* _internal_add_phrase_sets();
  public:
  const ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet& phrase_sets(int index) const;
  ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* add_phrase_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet >&
      phrase_sets() const;

  // repeated .google.cloud.speech.v2.CustomClass custom_classes = 2;
  int custom_classes_size() const;
  private:
  int _internal_custom_classes_size() const;
  public:
  void clear_custom_classes();
  ::google::cloud::speech::v2::CustomClass* mutable_custom_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >*
      mutable_custom_classes();
  private:
  const ::google::cloud::speech::v2::CustomClass& _internal_custom_classes(int index) const;
  ::google::cloud::speech::v2::CustomClass* _internal_add_custom_classes();
  public:
  const ::google::cloud::speech::v2::CustomClass& custom_classes(int index) const;
  ::google::cloud::speech::v2::CustomClass* add_custom_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >&
      custom_classes() const;

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.SpeechAdaptation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet > phrase_sets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass > custom_classes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.RecognitionConfig) */ {
 public:
  inline RecognitionConfig() : RecognitionConfig(nullptr) {}
  ~RecognitionConfig() override;
  explicit PROTOBUF_CONSTEXPR RecognitionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionConfig(const RecognitionConfig& from);
  RecognitionConfig(RecognitionConfig&& from) noexcept
    : RecognitionConfig() {
    *this = ::std::move(from);
  }

  inline RecognitionConfig& operator=(const RecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionConfig& operator=(RecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  enum DecodingConfigCase {
    kAutoDecodingConfig = 7,
    kExplicitDecodingConfig = 8,
    DECODING_CONFIG_NOT_SET = 0,
  };

  static inline const RecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const RecognitionConfig*>(
               &_RecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RecognitionConfig& a, RecognitionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionConfig& from) {
    RecognitionConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.RecognitionConfig";
  }
  protected:
  explicit RecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kAdaptationFieldNumber = 6,
    kAutoDecodingConfigFieldNumber = 7,
    kExplicitDecodingConfigFieldNumber = 8,
  };
  // .google.cloud.speech.v2.RecognitionFeatures features = 2;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::google::cloud::speech::v2::RecognitionFeatures& features() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionFeatures* release_features();
  ::google::cloud::speech::v2::RecognitionFeatures* mutable_features();
  void set_allocated_features(::google::cloud::speech::v2::RecognitionFeatures* features);
  private:
  const ::google::cloud::speech::v2::RecognitionFeatures& _internal_features() const;
  ::google::cloud::speech::v2::RecognitionFeatures* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::google::cloud::speech::v2::RecognitionFeatures* features);
  ::google::cloud::speech::v2::RecognitionFeatures* unsafe_arena_release_features();

  // .google.cloud.speech.v2.SpeechAdaptation adaptation = 6;
  bool has_adaptation() const;
  private:
  bool _internal_has_adaptation() const;
  public:
  void clear_adaptation();
  const ::google::cloud::speech::v2::SpeechAdaptation& adaptation() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::SpeechAdaptation* release_adaptation();
  ::google::cloud::speech::v2::SpeechAdaptation* mutable_adaptation();
  void set_allocated_adaptation(::google::cloud::speech::v2::SpeechAdaptation* adaptation);
  private:
  const ::google::cloud::speech::v2::SpeechAdaptation& _internal_adaptation() const;
  ::google::cloud::speech::v2::SpeechAdaptation* _internal_mutable_adaptation();
  public:
  void unsafe_arena_set_allocated_adaptation(
      ::google::cloud::speech::v2::SpeechAdaptation* adaptation);
  ::google::cloud::speech::v2::SpeechAdaptation* unsafe_arena_release_adaptation();

  // .google.cloud.speech.v2.AutoDetectDecodingConfig auto_decoding_config = 7;
  bool has_auto_decoding_config() const;
  private:
  bool _internal_has_auto_decoding_config() const;
  public:
  void clear_auto_decoding_config();
  const ::google::cloud::speech::v2::AutoDetectDecodingConfig& auto_decoding_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::AutoDetectDecodingConfig* release_auto_decoding_config();
  ::google::cloud::speech::v2::AutoDetectDecodingConfig* mutable_auto_decoding_config();
  void set_allocated_auto_decoding_config(::google::cloud::speech::v2::AutoDetectDecodingConfig* auto_decoding_config);
  private:
  const ::google::cloud::speech::v2::AutoDetectDecodingConfig& _internal_auto_decoding_config() const;
  ::google::cloud::speech::v2::AutoDetectDecodingConfig* _internal_mutable_auto_decoding_config();
  public:
  void unsafe_arena_set_allocated_auto_decoding_config(
      ::google::cloud::speech::v2::AutoDetectDecodingConfig* auto_decoding_config);
  ::google::cloud::speech::v2::AutoDetectDecodingConfig* unsafe_arena_release_auto_decoding_config();

  // .google.cloud.speech.v2.ExplicitDecodingConfig explicit_decoding_config = 8;
  bool has_explicit_decoding_config() const;
  private:
  bool _internal_has_explicit_decoding_config() const;
  public:
  void clear_explicit_decoding_config();
  const ::google::cloud::speech::v2::ExplicitDecodingConfig& explicit_decoding_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::ExplicitDecodingConfig* release_explicit_decoding_config();
  ::google::cloud::speech::v2::ExplicitDecodingConfig* mutable_explicit_decoding_config();
  void set_allocated_explicit_decoding_config(::google::cloud::speech::v2::ExplicitDecodingConfig* explicit_decoding_config);
  private:
  const ::google::cloud::speech::v2::ExplicitDecodingConfig& _internal_explicit_decoding_config() const;
  ::google::cloud::speech::v2::ExplicitDecodingConfig* _internal_mutable_explicit_decoding_config();
  public:
  void unsafe_arena_set_allocated_explicit_decoding_config(
      ::google::cloud::speech::v2::ExplicitDecodingConfig* explicit_decoding_config);
  ::google::cloud::speech::v2::ExplicitDecodingConfig* unsafe_arena_release_explicit_decoding_config();

  void clear_decoding_config();
  DecodingConfigCase decoding_config_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.RecognitionConfig)
 private:
  class _Internal;
  void set_has_auto_decoding_config();
  void set_has_explicit_decoding_config();

  inline bool has_decoding_config() const;
  inline void clear_has_decoding_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::RecognitionFeatures* features_;
    ::google::cloud::speech::v2::SpeechAdaptation* adaptation_;
    union DecodingConfigUnion {
      constexpr DecodingConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v2::AutoDetectDecodingConfig* auto_decoding_config_;
      ::google::cloud::speech::v2::ExplicitDecodingConfig* explicit_decoding_config_;
    } decoding_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.RecognizeRequest) */ {
 public:
  inline RecognizeRequest() : RecognizeRequest(nullptr) {}
  ~RecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR RecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeRequest(const RecognizeRequest& from);
  RecognizeRequest(RecognizeRequest&& from) noexcept
    : RecognizeRequest() {
    *this = ::std::move(from);
  }

  inline RecognizeRequest& operator=(const RecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeRequest& operator=(RecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum AudioSourceCase {
    kContent = 5,
    kUri = 6,
    AUDIO_SOURCE_NOT_SET = 0,
  };

  static inline const RecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeRequest*>(
               &_RecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RecognizeRequest& a, RecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeRequest& from) {
    RecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.RecognizeRequest";
  }
  protected:
  explicit RecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizerFieldNumber = 3,
    kConfigFieldNumber = 1,
    kConfigMaskFieldNumber = 8,
    kContentFieldNumber = 5,
    kUriFieldNumber = 6,
  };
  // string recognizer = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_recognizer();
  const std::string& recognizer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recognizer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recognizer();
  PROTOBUF_NODISCARD std::string* release_recognizer();
  void set_allocated_recognizer(std::string* recognizer);
  private:
  const std::string& _internal_recognizer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recognizer(const std::string& value);
  std::string* _internal_mutable_recognizer();
  public:

  // .google.cloud.speech.v2.RecognitionConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v2::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionConfig* release_config();
  ::google::cloud::speech::v2::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v2::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v2::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v2::RecognitionConfig* config);
  ::google::cloud::speech::v2::RecognitionConfig* unsafe_arena_release_config();

  // .google.protobuf.FieldMask config_mask = 8;
  bool has_config_mask() const;
  private:
  bool _internal_has_config_mask() const;
  public:
  void clear_config_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& config_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_config_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_config_mask();
  void set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_config_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_config_mask();
  public:
  void unsafe_arena_set_allocated_config_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_config_mask();

  // bytes content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string uri = 6;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  void clear_audio_source();
  AudioSourceCase audio_source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.RecognizeRequest)
 private:
  class _Internal;
  void set_has_content();
  void set_has_uri();

  inline bool has_audio_source() const;
  inline void clear_has_audio_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognizer_;
    ::google::cloud::speech::v2::RecognitionConfig* config_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask_;
    union AudioSourceUnion {
      constexpr AudioSourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    } audio_source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionResponseMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.RecognitionResponseMetadata) */ {
 public:
  inline RecognitionResponseMetadata() : RecognitionResponseMetadata(nullptr) {}
  ~RecognitionResponseMetadata() override;
  explicit PROTOBUF_CONSTEXPR RecognitionResponseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionResponseMetadata(const RecognitionResponseMetadata& from);
  RecognitionResponseMetadata(RecognitionResponseMetadata&& from) noexcept
    : RecognitionResponseMetadata() {
    *this = ::std::move(from);
  }

  inline RecognitionResponseMetadata& operator=(const RecognitionResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionResponseMetadata& operator=(RecognitionResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const RecognitionResponseMetadata*>(
               &_RecognitionResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RecognitionResponseMetadata& a, RecognitionResponseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionResponseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionResponseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionResponseMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionResponseMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionResponseMetadata& from) {
    RecognitionResponseMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionResponseMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.RecognitionResponseMetadata";
  }
  protected:
  explicit RecognitionResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalBilledDurationFieldNumber = 6,
  };
  // .google.protobuf.Duration total_billed_duration = 6;
  bool has_total_billed_duration() const;
  private:
  bool _internal_has_total_billed_duration() const;
  public:
  void clear_total_billed_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_billed_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_billed_duration();
  void set_allocated_total_billed_duration(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_billed_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_billed_duration();
  public:
  void unsafe_arena_set_allocated_total_billed_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_billed_duration();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.RecognitionResponseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionAlternative final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.SpeechRecognitionAlternative) */ {
 public:
  inline SpeechRecognitionAlternative() : SpeechRecognitionAlternative(nullptr) {}
  ~SpeechRecognitionAlternative() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from);
  SpeechRecognitionAlternative(SpeechRecognitionAlternative&& from) noexcept
    : SpeechRecognitionAlternative() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionAlternative& operator=(const SpeechRecognitionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionAlternative& operator=(SpeechRecognitionAlternative&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionAlternative& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionAlternative* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionAlternative*>(
               &_SpeechRecognitionAlternative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SpeechRecognitionAlternative& a, SpeechRecognitionAlternative& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionAlternative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionAlternative& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechRecognitionAlternative& from) {
    SpeechRecognitionAlternative::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionAlternative* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.SpeechRecognitionAlternative";
  }
  protected:
  explicit SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 3,
    kTranscriptFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.WordInfo words = 3;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  ::google::cloud::speech::v2::WordInfo* mutable_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::WordInfo >*
      mutable_words();
  private:
  const ::google::cloud::speech::v2::WordInfo& _internal_words(int index) const;
  ::google::cloud::speech::v2::WordInfo* _internal_add_words();
  public:
  const ::google::cloud::speech::v2::WordInfo& words(int index) const;
  ::google::cloud::speech::v2::WordInfo* add_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::WordInfo >&
      words() const;

  // string transcript = 1;
  void clear_transcript();
  const std::string& transcript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transcript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transcript();
  PROTOBUF_NODISCARD std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.SpeechRecognitionAlternative)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::WordInfo > words_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class WordInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.WordInfo) */ {
 public:
  inline WordInfo() : WordInfo(nullptr) {}
  ~WordInfo() override;
  explicit PROTOBUF_CONSTEXPR WordInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WordInfo(const WordInfo& from);
  WordInfo(WordInfo&& from) noexcept
    : WordInfo() {
    *this = ::std::move(from);
  }

  inline WordInfo& operator=(const WordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordInfo& operator=(WordInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WordInfo* internal_default_instance() {
    return reinterpret_cast<const WordInfo*>(
               &_WordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WordInfo& a, WordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WordInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WordInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WordInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WordInfo& from) {
    WordInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.WordInfo";
  }
  protected:
  explicit WordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 3,
    kSpeakerLabelFieldNumber = 6,
    kStartOffsetFieldNumber = 1,
    kEndOffsetFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // string word = 3;
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // string speaker_label = 6;
  void clear_speaker_label();
  const std::string& speaker_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_speaker_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_speaker_label();
  PROTOBUF_NODISCARD std::string* release_speaker_label();
  void set_allocated_speaker_label(std::string* speaker_label);
  private:
  const std::string& _internal_speaker_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speaker_label(const std::string& value);
  std::string* _internal_mutable_speaker_label();
  public:

  // .google.protobuf.Duration start_offset = 1;
  bool has_start_offset() const;
  private:
  bool _internal_has_start_offset() const;
  public:
  void clear_start_offset();
  const ::PROTOBUF_NAMESPACE_ID::Duration& start_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_start_offset();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_start_offset();
  void set_allocated_start_offset(::PROTOBUF_NAMESPACE_ID::Duration* start_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_start_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_start_offset();
  public:
  void unsafe_arena_set_allocated_start_offset(
      ::PROTOBUF_NAMESPACE_ID::Duration* start_offset);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_start_offset();

  // .google.protobuf.Duration end_offset = 2;
  bool has_end_offset() const;
  private:
  bool _internal_has_end_offset() const;
  public:
  void clear_end_offset();
  const ::PROTOBUF_NAMESPACE_ID::Duration& end_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_end_offset();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_end_offset();
  void set_allocated_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* end_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_end_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_end_offset();
  public:
  void unsafe_arena_set_allocated_end_offset(
      ::PROTOBUF_NAMESPACE_ID::Duration* end_offset);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_end_offset();

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.WordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speaker_label_;
    ::PROTOBUF_NAMESPACE_ID::Duration* start_offset_;
    ::PROTOBUF_NAMESPACE_ID::Duration* end_offset_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.SpeechRecognitionResult) */ {
 public:
  inline SpeechRecognitionResult() : SpeechRecognitionResult(nullptr) {}
  ~SpeechRecognitionResult() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionResult(const SpeechRecognitionResult& from);
  SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
    : SpeechRecognitionResult() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
               &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechRecognitionResult& from) {
    SpeechRecognitionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.SpeechRecognitionResult";
  }
  protected:
  explicit SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 5,
    kResultEndOffsetFieldNumber = 4,
    kChannelTagFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;
  public:
  void clear_alternatives();
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >*
      mutable_alternatives();
  private:
  const ::google::cloud::speech::v2::SpeechRecognitionAlternative& _internal_alternatives(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* _internal_add_alternatives();
  public:
  const ::google::cloud::speech::v2::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* add_alternatives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >&
      alternatives() const;

  // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Duration result_end_offset = 4;
  bool has_result_end_offset() const;
  private:
  bool _internal_has_result_end_offset() const;
  public:
  void clear_result_end_offset();
  const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_result_end_offset();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_result_end_offset();
  void set_allocated_result_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_result_end_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_result_end_offset();
  public:
  void unsafe_arena_set_allocated_result_end_offset(
      ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_result_end_offset();

  // int32 channel_tag = 2;
  void clear_channel_tag();
  int32_t channel_tag() const;
  void set_channel_tag(int32_t value);
  private:
  int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.SpeechRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative > alternatives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset_;
    int32_t channel_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.RecognizeResponse) */ {
 public:
  inline RecognizeResponse() : RecognizeResponse(nullptr) {}
  ~RecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR RecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeResponse(const RecognizeResponse& from);
  RecognizeResponse(RecognizeResponse&& from) noexcept
    : RecognizeResponse() {
    *this = ::std::move(from);
  }

  inline RecognizeResponse& operator=(const RecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeResponse& operator=(RecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse*>(
               &_RecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RecognizeResponse& a, RecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeResponse& from) {
    RecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.RecognizeResponse";
  }
  protected:
  explicit RecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMetadataFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.SpeechRecognitionResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::google::cloud::speech::v2::SpeechRecognitionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionResult >*
      mutable_results();
  private:
  const ::google::cloud::speech::v2::SpeechRecognitionResult& _internal_results(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionResult* _internal_add_results();
  public:
  const ::google::cloud::speech::v2::SpeechRecognitionResult& results(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionResult >&
      results() const;

  // .google.cloud.speech.v2.RecognitionResponseMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::cloud::speech::v2::RecognitionResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionResponseMetadata* release_metadata();
  ::google::cloud::speech::v2::RecognitionResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::google::cloud::speech::v2::RecognitionResponseMetadata* metadata);
  private:
  const ::google::cloud::speech::v2::RecognitionResponseMetadata& _internal_metadata() const;
  ::google::cloud::speech::v2::RecognitionResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata);
  ::google::cloud::speech::v2::RecognitionResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.RecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionResult > results_;
    ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionFeatures_VoiceActivityTimeout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout) */ {
 public:
  inline StreamingRecognitionFeatures_VoiceActivityTimeout() : StreamingRecognitionFeatures_VoiceActivityTimeout(nullptr) {}
  ~StreamingRecognitionFeatures_VoiceActivityTimeout() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionFeatures_VoiceActivityTimeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionFeatures_VoiceActivityTimeout(const StreamingRecognitionFeatures_VoiceActivityTimeout& from);
  StreamingRecognitionFeatures_VoiceActivityTimeout(StreamingRecognitionFeatures_VoiceActivityTimeout&& from) noexcept
    : StreamingRecognitionFeatures_VoiceActivityTimeout() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionFeatures_VoiceActivityTimeout& operator=(const StreamingRecognitionFeatures_VoiceActivityTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionFeatures_VoiceActivityTimeout& operator=(StreamingRecognitionFeatures_VoiceActivityTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionFeatures_VoiceActivityTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionFeatures_VoiceActivityTimeout* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionFeatures_VoiceActivityTimeout*>(
               &_StreamingRecognitionFeatures_VoiceActivityTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StreamingRecognitionFeatures_VoiceActivityTimeout& a, StreamingRecognitionFeatures_VoiceActivityTimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionFeatures_VoiceActivityTimeout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionFeatures_VoiceActivityTimeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionFeatures_VoiceActivityTimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionFeatures_VoiceActivityTimeout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionFeatures_VoiceActivityTimeout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionFeatures_VoiceActivityTimeout& from) {
    StreamingRecognitionFeatures_VoiceActivityTimeout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionFeatures_VoiceActivityTimeout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout";
  }
  protected:
  explicit StreamingRecognitionFeatures_VoiceActivityTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechStartTimeoutFieldNumber = 1,
    kSpeechEndTimeoutFieldNumber = 2,
  };
  // .google.protobuf.Duration speech_start_timeout = 1;
  bool has_speech_start_timeout() const;
  private:
  bool _internal_has_speech_start_timeout() const;
  public:
  void clear_speech_start_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& speech_start_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_speech_start_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_speech_start_timeout();
  void set_allocated_speech_start_timeout(::PROTOBUF_NAMESPACE_ID::Duration* speech_start_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_speech_start_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_speech_start_timeout();
  public:
  void unsafe_arena_set_allocated_speech_start_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* speech_start_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_speech_start_timeout();

  // .google.protobuf.Duration speech_end_timeout = 2;
  bool has_speech_end_timeout() const;
  private:
  bool _internal_has_speech_end_timeout() const;
  public:
  void clear_speech_end_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& speech_end_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_speech_end_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_speech_end_timeout();
  void set_allocated_speech_end_timeout(::PROTOBUF_NAMESPACE_ID::Duration* speech_end_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_speech_end_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_speech_end_timeout();
  public:
  void unsafe_arena_set_allocated_speech_end_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* speech_end_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_speech_end_timeout();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_start_timeout_;
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_end_timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognitionFeatures) */ {
 public:
  inline StreamingRecognitionFeatures() : StreamingRecognitionFeatures(nullptr) {}
  ~StreamingRecognitionFeatures() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionFeatures(const StreamingRecognitionFeatures& from);
  StreamingRecognitionFeatures(StreamingRecognitionFeatures&& from) noexcept
    : StreamingRecognitionFeatures() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionFeatures& operator=(const StreamingRecognitionFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionFeatures& operator=(StreamingRecognitionFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionFeatures* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionFeatures*>(
               &_StreamingRecognitionFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StreamingRecognitionFeatures& a, StreamingRecognitionFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionFeatures& from) {
    StreamingRecognitionFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognitionFeatures";
  }
  protected:
  explicit StreamingRecognitionFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamingRecognitionFeatures_VoiceActivityTimeout VoiceActivityTimeout;

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceActivityTimeoutFieldNumber = 3,
    kEnableVoiceActivityEventsFieldNumber = 1,
    kInterimResultsFieldNumber = 2,
  };
  // .google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout voice_activity_timeout = 3;
  bool has_voice_activity_timeout() const;
  private:
  bool _internal_has_voice_activity_timeout() const;
  public:
  void clear_voice_activity_timeout();
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout& voice_activity_timeout() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* release_voice_activity_timeout();
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* mutable_voice_activity_timeout();
  void set_allocated_voice_activity_timeout(::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* voice_activity_timeout);
  private:
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout& _internal_voice_activity_timeout() const;
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* _internal_mutable_voice_activity_timeout();
  public:
  void unsafe_arena_set_allocated_voice_activity_timeout(
      ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* voice_activity_timeout);
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* unsafe_arena_release_voice_activity_timeout();

  // bool enable_voice_activity_events = 1;
  void clear_enable_voice_activity_events();
  bool enable_voice_activity_events() const;
  void set_enable_voice_activity_events(bool value);
  private:
  bool _internal_enable_voice_activity_events() const;
  void _internal_set_enable_voice_activity_events(bool value);
  public:

  // bool interim_results = 2;
  void clear_interim_results();
  bool interim_results() const;
  void set_interim_results(bool value);
  private:
  bool _internal_interim_results() const;
  void _internal_set_interim_results(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognitionFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* voice_activity_timeout_;
    bool enable_voice_activity_events_;
    bool interim_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognitionConfig) */ {
 public:
  inline StreamingRecognitionConfig() : StreamingRecognitionConfig(nullptr) {}
  ~StreamingRecognitionConfig() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionConfig(const StreamingRecognitionConfig& from);
  StreamingRecognitionConfig(StreamingRecognitionConfig&& from) noexcept
    : StreamingRecognitionConfig() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionConfig& operator=(const StreamingRecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionConfig& operator=(StreamingRecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionConfig*>(
               &_StreamingRecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StreamingRecognitionConfig& a, StreamingRecognitionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionConfig& from) {
    StreamingRecognitionConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognitionConfig";
  }
  protected:
  explicit StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStreamingFeaturesFieldNumber = 2,
    kConfigMaskFieldNumber = 3,
  };
  // .google.cloud.speech.v2.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v2::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionConfig* release_config();
  ::google::cloud::speech::v2::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v2::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v2::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v2::RecognitionConfig* config);
  ::google::cloud::speech::v2::RecognitionConfig* unsafe_arena_release_config();

  // .google.cloud.speech.v2.StreamingRecognitionFeatures streaming_features = 2;
  bool has_streaming_features() const;
  private:
  bool _internal_has_streaming_features() const;
  public:
  void clear_streaming_features();
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures& streaming_features() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::StreamingRecognitionFeatures* release_streaming_features();
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* mutable_streaming_features();
  void set_allocated_streaming_features(::google::cloud::speech::v2::StreamingRecognitionFeatures* streaming_features);
  private:
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures& _internal_streaming_features() const;
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* _internal_mutable_streaming_features();
  public:
  void unsafe_arena_set_allocated_streaming_features(
      ::google::cloud::speech::v2::StreamingRecognitionFeatures* streaming_features);
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* unsafe_arena_release_streaming_features();

  // .google.protobuf.FieldMask config_mask = 3;
  bool has_config_mask() const;
  private:
  bool _internal_has_config_mask() const;
  public:
  void clear_config_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& config_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_config_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_config_mask();
  void set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_config_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_config_mask();
  public:
  void unsafe_arena_set_allocated_config_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_config_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognitionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::RecognitionConfig* config_;
    ::google::cloud::speech::v2::StreamingRecognitionFeatures* streaming_features_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognizeRequest) */ {
 public:
  inline StreamingRecognizeRequest() : StreamingRecognizeRequest(nullptr) {}
  ~StreamingRecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognizeRequest(const StreamingRecognizeRequest& from);
  StreamingRecognizeRequest(StreamingRecognizeRequest&& from) noexcept
    : StreamingRecognizeRequest() {
    *this = ::std::move(from);
  }

  inline StreamingRecognizeRequest& operator=(const StreamingRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeRequest& operator=(StreamingRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StreamingRequestCase {
    kStreamingConfig = 6,
    kAudio = 5,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const StreamingRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeRequest*>(
               &_StreamingRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StreamingRecognizeRequest& a, StreamingRecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognizeRequest& from) {
    StreamingRecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognizeRequest";
  }
  protected:
  explicit StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizerFieldNumber = 3,
    kStreamingConfigFieldNumber = 6,
    kAudioFieldNumber = 5,
  };
  // string recognizer = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_recognizer();
  const std::string& recognizer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recognizer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recognizer();
  PROTOBUF_NODISCARD std::string* release_recognizer();
  void set_allocated_recognizer(std::string* recognizer);
  private:
  const std::string& _internal_recognizer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recognizer(const std::string& value);
  std::string* _internal_mutable_recognizer();
  public:

  // .google.cloud.speech.v2.StreamingRecognitionConfig streaming_config = 6;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;
  public:
  void clear_streaming_config();
  const ::google::cloud::speech::v2::StreamingRecognitionConfig& streaming_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::StreamingRecognitionConfig* release_streaming_config();
  ::google::cloud::speech::v2::StreamingRecognitionConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::google::cloud::speech::v2::StreamingRecognitionConfig* streaming_config);
  private:
  const ::google::cloud::speech::v2::StreamingRecognitionConfig& _internal_streaming_config() const;
  ::google::cloud::speech::v2::StreamingRecognitionConfig* _internal_mutable_streaming_config();
  public:
  void unsafe_arena_set_allocated_streaming_config(
      ::google::cloud::speech::v2::StreamingRecognitionConfig* streaming_config);
  ::google::cloud::speech::v2::StreamingRecognitionConfig* unsafe_arena_release_streaming_config();

  // bytes audio = 5;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognizeRequest)
 private:
  class _Internal;
  void set_has_streaming_config();
  void set_has_audio();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognizer_;
    union StreamingRequestUnion {
      constexpr StreamingRequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v2::StreamingRecognitionConfig* streaming_config_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
    } streaming_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeRequest) */ {
 public:
  inline BatchRecognizeRequest() : BatchRecognizeRequest(nullptr) {}
  ~BatchRecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeRequest(const BatchRecognizeRequest& from);
  BatchRecognizeRequest(BatchRecognizeRequest&& from) noexcept
    : BatchRecognizeRequest() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeRequest& operator=(const BatchRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeRequest& operator=(BatchRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeRequest*>(
               &_BatchRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BatchRecognizeRequest& a, BatchRecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeRequest& from) {
    BatchRecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeRequest";
  }
  protected:
  explicit BatchRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 3,
    kRecognizerFieldNumber = 1,
    kConfigFieldNumber = 4,
    kConfigMaskFieldNumber = 5,
  };
  // repeated .google.cloud.speech.v2.BatchRecognizeFileMetadata files = 3;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::google::cloud::speech::v2::BatchRecognizeFileMetadata* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::BatchRecognizeFileMetadata >*
      mutable_files();
  private:
  const ::google::cloud::speech::v2::BatchRecognizeFileMetadata& _internal_files(int index) const;
  ::google::cloud::speech::v2::BatchRecognizeFileMetadata* _internal_add_files();
  public:
  const ::google::cloud::speech::v2::BatchRecognizeFileMetadata& files(int index) const;
  ::google::cloud::speech::v2::BatchRecognizeFileMetadata* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::BatchRecognizeFileMetadata >&
      files() const;

  // string recognizer = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_recognizer();
  const std::string& recognizer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recognizer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recognizer();
  PROTOBUF_NODISCARD std::string* release_recognizer();
  void set_allocated_recognizer(std::string* recognizer);
  private:
  const std::string& _internal_recognizer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recognizer(const std::string& value);
  std::string* _internal_mutable_recognizer();
  public:

  // .google.cloud.speech.v2.RecognitionConfig config = 4;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v2::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionConfig* release_config();
  ::google::cloud::speech::v2::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v2::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v2::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v2::RecognitionConfig* config);
  ::google::cloud::speech::v2::RecognitionConfig* unsafe_arena_release_config();

  // .google.protobuf.FieldMask config_mask = 5;
  bool has_config_mask() const;
  private:
  bool _internal_has_config_mask() const;
  public:
  void clear_config_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& config_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_config_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_config_mask();
  void set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_config_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_config_mask();
  public:
  void unsafe_arena_set_allocated_config_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_config_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::BatchRecognizeFileMetadata > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognizer_;
    ::google::cloud::speech::v2::RecognitionConfig* config_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeResponse_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchRecognizeResponse_ResultsEntry_DoNotUse, 
    std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchRecognizeResponse_ResultsEntry_DoNotUse, 
    std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BatchRecognizeResponse_ResultsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BatchRecognizeResponse_ResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BatchRecognizeResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BatchRecognizeResponse_ResultsEntry_DoNotUse& other);
  static const BatchRecognizeResponse_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchRecognizeResponse_ResultsEntry_DoNotUse*>(&_BatchRecognizeResponse_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.BatchRecognizeResponse.ResultsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};

// -------------------------------------------------------------------

class BatchRecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeResponse) */ {
 public:
  inline BatchRecognizeResponse() : BatchRecognizeResponse(nullptr) {}
  ~BatchRecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeResponse(const BatchRecognizeResponse& from);
  BatchRecognizeResponse(BatchRecognizeResponse&& from) noexcept
    : BatchRecognizeResponse() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeResponse& operator=(const BatchRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeResponse& operator=(BatchRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeResponse*>(
               &_BatchRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BatchRecognizeResponse& a, BatchRecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeResponse& from) {
    BatchRecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeResponse";
  }
  protected:
  explicit BatchRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // map<string, .google.cloud.speech.v2.BatchRecognizeFileResult> results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        BatchRecognizeResponse_ResultsEntry_DoNotUse,
        std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeFileResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeFileResult) */ {
 public:
  inline BatchRecognizeFileResult() : BatchRecognizeFileResult(nullptr) {}
  ~BatchRecognizeFileResult() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeFileResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeFileResult(const BatchRecognizeFileResult& from);
  BatchRecognizeFileResult(BatchRecognizeFileResult&& from) noexcept
    : BatchRecognizeFileResult() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeFileResult& operator=(const BatchRecognizeFileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeFileResult& operator=(BatchRecognizeFileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeFileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchRecognizeFileResult* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeFileResult*>(
               &_BatchRecognizeFileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BatchRecognizeFileResult& a, BatchRecognizeFileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeFileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeFileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeFileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeFileResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeFileResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeFileResult& from) {
    BatchRecognizeFileResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeFileResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeFileResult";
  }
  protected:
  explicit BatchRecognizeFileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .google.rpc.Status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeFileResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::google::rpc::Status* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeTranscriptionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata) */ {
 public:
  inline BatchRecognizeTranscriptionMetadata() : BatchRecognizeTranscriptionMetadata(nullptr) {}
  ~BatchRecognizeTranscriptionMetadata() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeTranscriptionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeTranscriptionMetadata(const BatchRecognizeTranscriptionMetadata& from);
  BatchRecognizeTranscriptionMetadata(BatchRecognizeTranscriptionMetadata&& from) noexcept
    : BatchRecognizeTranscriptionMetadata() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeTranscriptionMetadata& operator=(const BatchRecognizeTranscriptionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeTranscriptionMetadata& operator=(BatchRecognizeTranscriptionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeTranscriptionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchRecognizeTranscriptionMetadata* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeTranscriptionMetadata*>(
               &_BatchRecognizeTranscriptionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BatchRecognizeTranscriptionMetadata& a, BatchRecognizeTranscriptionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeTranscriptionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeTranscriptionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeTranscriptionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeTranscriptionMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeTranscriptionMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeTranscriptionMetadata& from) {
    BatchRecognizeTranscriptionMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeTranscriptionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata";
  }
  protected:
  explicit BatchRecognizeTranscriptionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 3,
    kErrorFieldNumber = 2,
    kProgressPercentFieldNumber = 1,
  };
  // string uri = 3;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .google.rpc.Status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // int32 progress_percent = 1;
  void clear_progress_percent();
  int32_t progress_percent() const;
  void set_progress_percent(int32_t value);
  private:
  int32_t _internal_progress_percent() const;
  void _internal_set_progress_percent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::google::rpc::Status* error_;
    int32_t progress_percent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse, 
    std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse, 
    std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse& other);
  static const BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse*>(&_BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.BatchRecognizeMetadata.TranscriptionMetadataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};

// -------------------------------------------------------------------

class BatchRecognizeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeMetadata) */ {
 public:
  inline BatchRecognizeMetadata() : BatchRecognizeMetadata(nullptr) {}
  ~BatchRecognizeMetadata() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeMetadata(const BatchRecognizeMetadata& from);
  BatchRecognizeMetadata(BatchRecognizeMetadata&& from) noexcept
    : BatchRecognizeMetadata() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeMetadata& operator=(const BatchRecognizeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeMetadata& operator=(BatchRecognizeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchRecognizeMetadata* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeMetadata*>(
               &_BatchRecognizeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BatchRecognizeMetadata& a, BatchRecognizeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeMetadata& from) {
    BatchRecognizeMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeMetadata";
  }
  protected:
  explicit BatchRecognizeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptionMetadataFieldNumber = 1,
  };
  // map<string, .google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata> transcription_metadata = 1;
  int transcription_metadata_size() const;
  private:
  int _internal_transcription_metadata_size() const;
  public:
  void clear_transcription_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >&
      _internal_transcription_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >*
      _internal_mutable_transcription_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >&
      transcription_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >*
      mutable_transcription_metadata();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        BatchRecognizeMetadata_TranscriptionMetadataEntry_DoNotUse,
        std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> transcription_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class BatchRecognizeFileMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.BatchRecognizeFileMetadata) */ {
 public:
  inline BatchRecognizeFileMetadata() : BatchRecognizeFileMetadata(nullptr) {}
  ~BatchRecognizeFileMetadata() override;
  explicit PROTOBUF_CONSTEXPR BatchRecognizeFileMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchRecognizeFileMetadata(const BatchRecognizeFileMetadata& from);
  BatchRecognizeFileMetadata(BatchRecognizeFileMetadata&& from) noexcept
    : BatchRecognizeFileMetadata() {
    *this = ::std::move(from);
  }

  inline BatchRecognizeFileMetadata& operator=(const BatchRecognizeFileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRecognizeFileMetadata& operator=(BatchRecognizeFileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchRecognizeFileMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum AudioSourceCase {
    kUri = 1,
    AUDIO_SOURCE_NOT_SET = 0,
  };

  static inline const BatchRecognizeFileMetadata* internal_default_instance() {
    return reinterpret_cast<const BatchRecognizeFileMetadata*>(
               &_BatchRecognizeFileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BatchRecognizeFileMetadata& a, BatchRecognizeFileMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRecognizeFileMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRecognizeFileMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchRecognizeFileMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchRecognizeFileMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchRecognizeFileMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchRecognizeFileMetadata& from) {
    BatchRecognizeFileMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRecognizeFileMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.BatchRecognizeFileMetadata";
  }
  protected:
  explicit BatchRecognizeFileMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 4,
    kConfigMaskFieldNumber = 5,
    kUriFieldNumber = 1,
  };
  // .google.cloud.speech.v2.RecognitionConfig config = 4;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v2::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionConfig* release_config();
  ::google::cloud::speech::v2::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v2::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v2::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v2::RecognitionConfig* config);
  ::google::cloud::speech::v2::RecognitionConfig* unsafe_arena_release_config();

  // .google.protobuf.FieldMask config_mask = 5;
  bool has_config_mask() const;
  private:
  bool _internal_has_config_mask() const;
  public:
  void clear_config_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& config_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_config_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_config_mask();
  void set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_config_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_config_mask();
  public:
  void unsafe_arena_set_allocated_config_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_config_mask();

  // string uri = 1;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  void clear_audio_source();
  AudioSourceCase audio_source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.BatchRecognizeFileMetadata)
 private:
  class _Internal;
  void set_has_uri();

  inline bool has_audio_source() const;
  inline void clear_has_audio_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::RecognitionConfig* config_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask_;
    union AudioSourceUnion {
      constexpr AudioSourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    } audio_source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognitionResult) */ {
 public:
  inline StreamingRecognitionResult() : StreamingRecognitionResult(nullptr) {}
  ~StreamingRecognitionResult() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionResult(const StreamingRecognitionResult& from);
  StreamingRecognitionResult(StreamingRecognitionResult&& from) noexcept
    : StreamingRecognitionResult() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionResult& operator=(const StreamingRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionResult& operator=(StreamingRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionResult*>(
               &_StreamingRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(StreamingRecognitionResult& a, StreamingRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionResult& from) {
    StreamingRecognitionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognitionResult";
  }
  protected:
  explicit StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 6,
    kResultEndOffsetFieldNumber = 4,
    kIsFinalFieldNumber = 2,
    kStabilityFieldNumber = 3,
    kChannelTagFieldNumber = 5,
  };
  // repeated .google.cloud.speech.v2.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;
  public:
  void clear_alternatives();
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >*
      mutable_alternatives();
  private:
  const ::google::cloud::speech::v2::SpeechRecognitionAlternative& _internal_alternatives(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* _internal_add_alternatives();
  public:
  const ::google::cloud::speech::v2::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* add_alternatives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >&
      alternatives() const;

  // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Duration result_end_offset = 4;
  bool has_result_end_offset() const;
  private:
  bool _internal_has_result_end_offset() const;
  public:
  void clear_result_end_offset();
  const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_result_end_offset();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_result_end_offset();
  void set_allocated_result_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_result_end_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_result_end_offset();
  public:
  void unsafe_arena_set_allocated_result_end_offset(
      ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_result_end_offset();

  // bool is_final = 2;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // float stability = 3;
  void clear_stability();
  float stability() const;
  void set_stability(float value);
  private:
  float _internal_stability() const;
  void _internal_set_stability(float value);
  public:

  // int32 channel_tag = 5;
  void clear_channel_tag();
  int32_t channel_tag() const;
  void set_channel_tag(int32_t value);
  private:
  int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative > alternatives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset_;
    bool is_final_;
    float stability_;
    int32_t channel_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.StreamingRecognizeResponse) */ {
 public:
  inline StreamingRecognizeResponse() : StreamingRecognizeResponse(nullptr) {}
  ~StreamingRecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognizeResponse(const StreamingRecognizeResponse& from);
  StreamingRecognizeResponse(StreamingRecognizeResponse&& from) noexcept
    : StreamingRecognizeResponse() {
    *this = ::std::move(from);
  }

  inline StreamingRecognizeResponse& operator=(const StreamingRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeResponse& operator=(StreamingRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeResponse*>(
               &_StreamingRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(StreamingRecognizeResponse& a, StreamingRecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognizeResponse& from) {
    StreamingRecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.StreamingRecognizeResponse";
  }
  protected:
  explicit StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamingRecognizeResponse_SpeechEventType SpeechEventType;
  static constexpr SpeechEventType SPEECH_EVENT_TYPE_UNSPECIFIED =
    StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_TYPE_UNSPECIFIED;
  static constexpr SpeechEventType END_OF_SINGLE_UTTERANCE =
    StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE;
  static constexpr SpeechEventType SPEECH_ACTIVITY_BEGIN =
    StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_BEGIN;
  static constexpr SpeechEventType SPEECH_ACTIVITY_END =
    StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_END;
  static inline bool SpeechEventType_IsValid(int value) {
    return StreamingRecognizeResponse_SpeechEventType_IsValid(value);
  }
  static constexpr SpeechEventType SpeechEventType_MIN =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN;
  static constexpr SpeechEventType SpeechEventType_MAX =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX;
  static constexpr int SpeechEventType_ARRAYSIZE =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpeechEventType_descriptor() {
    return StreamingRecognizeResponse_SpeechEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& SpeechEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpeechEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpeechEventType_Name.");
    return StreamingRecognizeResponse_SpeechEventType_Name(enum_t_value);
  }
  static inline bool SpeechEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpeechEventType* value) {
    return StreamingRecognizeResponse_SpeechEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 6,
    kMetadataFieldNumber = 5,
    kSpeechEventOffsetFieldNumber = 7,
    kSpeechEventTypeFieldNumber = 3,
  };
  // repeated .google.cloud.speech.v2.StreamingRecognitionResult results = 6;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::google::cloud::speech::v2::StreamingRecognitionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::StreamingRecognitionResult >*
      mutable_results();
  private:
  const ::google::cloud::speech::v2::StreamingRecognitionResult& _internal_results(int index) const;
  ::google::cloud::speech::v2::StreamingRecognitionResult* _internal_add_results();
  public:
  const ::google::cloud::speech::v2::StreamingRecognitionResult& results(int index) const;
  ::google::cloud::speech::v2::StreamingRecognitionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::StreamingRecognitionResult >&
      results() const;

  // .google.cloud.speech.v2.RecognitionResponseMetadata metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::cloud::speech::v2::RecognitionResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::RecognitionResponseMetadata* release_metadata();
  ::google::cloud::speech::v2::RecognitionResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::google::cloud::speech::v2::RecognitionResponseMetadata* metadata);
  private:
  const ::google::cloud::speech::v2::RecognitionResponseMetadata& _internal_metadata() const;
  ::google::cloud::speech::v2::RecognitionResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata);
  ::google::cloud::speech::v2::RecognitionResponseMetadata* unsafe_arena_release_metadata();

  // .google.protobuf.Duration speech_event_offset = 7;
  bool has_speech_event_offset() const;
  private:
  bool _internal_has_speech_event_offset() const;
  public:
  void clear_speech_event_offset();
  const ::PROTOBUF_NAMESPACE_ID::Duration& speech_event_offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_speech_event_offset();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_speech_event_offset();
  void set_allocated_speech_event_offset(::PROTOBUF_NAMESPACE_ID::Duration* speech_event_offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_speech_event_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_speech_event_offset();
  public:
  void unsafe_arena_set_allocated_speech_event_offset(
      ::PROTOBUF_NAMESPACE_ID::Duration* speech_event_offset);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_speech_event_offset();

  // .google.cloud.speech.v2.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;
  void clear_speech_event_type();
  ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType speech_event_type() const;
  void set_speech_event_type(::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType value);
  private:
  ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType _internal_speech_event_type() const;
  void _internal_set_speech_event_type(::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.StreamingRecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::StreamingRecognitionResult > results_;
    ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata_;
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_event_offset_;
    int speech_event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kKmsKeyNameFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.GetConfigRequest) */ {
 public:
  inline GetConfigRequest() : GetConfigRequest(nullptr) {}
  ~GetConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigRequest(const GetConfigRequest& from);
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigRequest& from) {
    GetConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.GetConfigRequest";
  }
  protected:
  explicit GetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.GetConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UpdateConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UpdateConfigRequest) */ {
 public:
  inline UpdateConfigRequest() : UpdateConfigRequest(nullptr) {}
  ~UpdateConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateConfigRequest(const UpdateConfigRequest& from);
  UpdateConfigRequest(UpdateConfigRequest&& from) noexcept
    : UpdateConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConfigRequest& operator=(const UpdateConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConfigRequest& operator=(UpdateConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConfigRequest*>(
               &_UpdateConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UpdateConfigRequest& a, UpdateConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateConfigRequest& from) {
    UpdateConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UpdateConfigRequest";
  }
  protected:
  explicit UpdateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.speech.v2.Config config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v2::Config& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::Config* release_config();
  ::google::cloud::speech::v2::Config* mutable_config();
  void set_allocated_config(::google::cloud::speech::v2::Config* config);
  private:
  const ::google::cloud::speech::v2::Config& _internal_config() const;
  ::google::cloud::speech::v2::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v2::Config* config);
  ::google::cloud::speech::v2::Config* unsafe_arena_release_config();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UpdateConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::Config* config_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class CustomClass_ClassItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.CustomClass.ClassItem) */ {
 public:
  inline CustomClass_ClassItem() : CustomClass_ClassItem(nullptr) {}
  ~CustomClass_ClassItem() override;
  explicit PROTOBUF_CONSTEXPR CustomClass_ClassItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomClass_ClassItem(const CustomClass_ClassItem& from);
  CustomClass_ClassItem(CustomClass_ClassItem&& from) noexcept
    : CustomClass_ClassItem() {
    *this = ::std::move(from);
  }

  inline CustomClass_ClassItem& operator=(const CustomClass_ClassItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomClass_ClassItem& operator=(CustomClass_ClassItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomClass_ClassItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomClass_ClassItem* internal_default_instance() {
    return reinterpret_cast<const CustomClass_ClassItem*>(
               &_CustomClass_ClassItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CustomClass_ClassItem& a, CustomClass_ClassItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomClass_ClassItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomClass_ClassItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomClass_ClassItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomClass_ClassItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomClass_ClassItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomClass_ClassItem& from) {
    CustomClass_ClassItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomClass_ClassItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.CustomClass.ClassItem";
  }
  protected:
  explicit CustomClass_ClassItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.CustomClass.ClassItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class CustomClass_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CustomClass_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CustomClass_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CustomClass_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CustomClass_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CustomClass_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CustomClass_AnnotationsEntry_DoNotUse& other);
  static const CustomClass_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CustomClass_AnnotationsEntry_DoNotUse*>(&_CustomClass_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.CustomClass.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.CustomClass.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};

// -------------------------------------------------------------------

class CustomClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.CustomClass) */ {
 public:
  inline CustomClass() : CustomClass(nullptr) {}
  ~CustomClass() override;
  explicit PROTOBUF_CONSTEXPR CustomClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomClass(const CustomClass& from);
  CustomClass(CustomClass&& from) noexcept
    : CustomClass() {
    *this = ::std::move(from);
  }

  inline CustomClass& operator=(const CustomClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomClass& operator=(CustomClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomClass* internal_default_instance() {
    return reinterpret_cast<const CustomClass*>(
               &_CustomClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CustomClass& a, CustomClass& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomClass& from) {
    CustomClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.CustomClass";
  }
  protected:
  explicit CustomClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomClass_ClassItem ClassItem;

  typedef CustomClass_State State;
  static constexpr State STATE_UNSPECIFIED =
    CustomClass_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    CustomClass_State_ACTIVE;
  static constexpr State DELETED =
    CustomClass_State_DELETED;
  static inline bool State_IsValid(int value) {
    return CustomClass_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CustomClass_State_State_MIN;
  static constexpr State State_MAX =
    CustomClass_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CustomClass_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CustomClass_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CustomClass_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CustomClass_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kAnnotationsFieldNumber = 10,
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kDisplayNameFieldNumber = 4,
    kEtagFieldNumber = 11,
    kKmsKeyNameFieldNumber = 13,
    kKmsKeyVersionNameFieldNumber = 14,
    kCreateTimeFieldNumber = 6,
    kUpdateTimeFieldNumber = 7,
    kDeleteTimeFieldNumber = 8,
    kExpireTimeFieldNumber = 9,
    kReconcilingFieldNumber = 12,
    kStateFieldNumber = 15,
  };
  // repeated .google.cloud.speech.v2.CustomClass.ClassItem items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::google::cloud::speech::v2::CustomClass_ClassItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass_ClassItem >*
      mutable_items();
  private:
  const ::google::cloud::speech::v2::CustomClass_ClassItem& _internal_items(int index) const;
  ::google::cloud::speech::v2::CustomClass_ClassItem* _internal_add_items();
  public:
  const ::google::cloud::speech::v2::CustomClass_ClassItem& items(int index) const;
  ::google::cloud::speech::v2::CustomClass_ClassItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass_ClassItem >&
      items() const;

  // map<string, string> annotations = 10;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string display_name = 4;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string kms_key_name = 13 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // string kms_key_version_name = 14 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_version_name();
  const std::string& kms_key_version_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_version_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_version_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_version_name();
  void set_allocated_kms_key_version_name(std::string* kms_key_version_name);
  private:
  const std::string& _internal_kms_key_version_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_version_name(const std::string& value);
  std::string* _internal_mutable_kms_key_version_name();
  public:

  // .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp delete_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.protobuf.Timestamp expire_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // bool reconciling = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_reconciling();
  bool reconciling() const;
  void set_reconciling(bool value);
  private:
  bool _internal_reconciling() const;
  void _internal_set_reconciling(bool value);
  public:

  // .google.cloud.speech.v2.CustomClass.State state = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::speech::v2::CustomClass_State state() const;
  void set_state(::google::cloud::speech::v2::CustomClass_State value);
  private:
  ::google::cloud::speech::v2::CustomClass_State _internal_state() const;
  void _internal_set_state(::google::cloud::speech::v2::CustomClass_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.CustomClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass_ClassItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CustomClass_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_version_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    bool reconciling_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class PhraseSet_Phrase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.PhraseSet.Phrase) */ {
 public:
  inline PhraseSet_Phrase() : PhraseSet_Phrase(nullptr) {}
  ~PhraseSet_Phrase() override;
  explicit PROTOBUF_CONSTEXPR PhraseSet_Phrase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhraseSet_Phrase(const PhraseSet_Phrase& from);
  PhraseSet_Phrase(PhraseSet_Phrase&& from) noexcept
    : PhraseSet_Phrase() {
    *this = ::std::move(from);
  }

  inline PhraseSet_Phrase& operator=(const PhraseSet_Phrase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhraseSet_Phrase& operator=(PhraseSet_Phrase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PhraseSet_Phrase& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhraseSet_Phrase* internal_default_instance() {
    return reinterpret_cast<const PhraseSet_Phrase*>(
               &_PhraseSet_Phrase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PhraseSet_Phrase& a, PhraseSet_Phrase& b) {
    a.Swap(&b);
  }
  inline void Swap(PhraseSet_Phrase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhraseSet_Phrase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhraseSet_Phrase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhraseSet_Phrase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PhraseSet_Phrase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PhraseSet_Phrase& from) {
    PhraseSet_Phrase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhraseSet_Phrase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.PhraseSet.Phrase";
  }
  protected:
  explicit PhraseSet_Phrase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBoostFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // float boost = 2;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.PhraseSet.Phrase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    float boost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class PhraseSet_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PhraseSet_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PhraseSet_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PhraseSet_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PhraseSet_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PhraseSet_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PhraseSet_AnnotationsEntry_DoNotUse& other);
  static const PhraseSet_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PhraseSet_AnnotationsEntry_DoNotUse*>(&_PhraseSet_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.PhraseSet.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.speech.v2.PhraseSet.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};

// -------------------------------------------------------------------

class PhraseSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.PhraseSet) */ {
 public:
  inline PhraseSet() : PhraseSet(nullptr) {}
  ~PhraseSet() override;
  explicit PROTOBUF_CONSTEXPR PhraseSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhraseSet(const PhraseSet& from);
  PhraseSet(PhraseSet&& from) noexcept
    : PhraseSet() {
    *this = ::std::move(from);
  }

  inline PhraseSet& operator=(const PhraseSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhraseSet& operator=(PhraseSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PhraseSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhraseSet* internal_default_instance() {
    return reinterpret_cast<const PhraseSet*>(
               &_PhraseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PhraseSet& a, PhraseSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PhraseSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhraseSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhraseSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhraseSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PhraseSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PhraseSet& from) {
    PhraseSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhraseSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.PhraseSet";
  }
  protected:
  explicit PhraseSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PhraseSet_Phrase Phrase;

  typedef PhraseSet_State State;
  static constexpr State STATE_UNSPECIFIED =
    PhraseSet_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    PhraseSet_State_ACTIVE;
  static constexpr State DELETED =
    PhraseSet_State_DELETED;
  static inline bool State_IsValid(int value) {
    return PhraseSet_State_IsValid(value);
  }
  static constexpr State State_MIN =
    PhraseSet_State_State_MIN;
  static constexpr State State_MAX =
    PhraseSet_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    PhraseSet_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return PhraseSet_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return PhraseSet_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return PhraseSet_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 3,
    kAnnotationsFieldNumber = 10,
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kDisplayNameFieldNumber = 5,
    kEtagFieldNumber = 11,
    kKmsKeyNameFieldNumber = 13,
    kKmsKeyVersionNameFieldNumber = 14,
    kCreateTimeFieldNumber = 6,
    kUpdateTimeFieldNumber = 7,
    kDeleteTimeFieldNumber = 8,
    kExpireTimeFieldNumber = 9,
    kBoostFieldNumber = 4,
    kReconcilingFieldNumber = 12,
    kStateFieldNumber = 15,
  };
  // repeated .google.cloud.speech.v2.PhraseSet.Phrase phrases = 3;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;
  public:
  void clear_phrases();
  ::google::cloud::speech::v2::PhraseSet_Phrase* mutable_phrases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet_Phrase >*
      mutable_phrases();
  private:
  const ::google::cloud::speech::v2::PhraseSet_Phrase& _internal_phrases(int index) const;
  ::google::cloud::speech::v2::PhraseSet_Phrase* _internal_add_phrases();
  public:
  const ::google::cloud::speech::v2::PhraseSet_Phrase& phrases(int index) const;
  ::google::cloud::speech::v2::PhraseSet_Phrase* add_phrases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet_Phrase >&
      phrases() const;

  // map<string, string> annotations = 10;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string display_name = 5;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string kms_key_name = 13 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // string kms_key_version_name = 14 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
  void clear_kms_key_version_name();
  const std::string& kms_key_version_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_version_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_version_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_version_name();
  void set_allocated_kms_key_version_name(std::string* kms_key_version_name);
  private:
  const std::string& _internal_kms_key_version_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_version_name(const std::string& value);
  std::string* _internal_mutable_kms_key_version_name();
  public:

  // .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp delete_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.protobuf.Timestamp expire_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // float boost = 4;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // bool reconciling = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_reconciling();
  bool reconciling() const;
  void set_reconciling(bool value);
  private:
  bool _internal_reconciling() const;
  void _internal_set_reconciling(bool value);
  public:

  // .google.cloud.speech.v2.PhraseSet.State state = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::speech::v2::PhraseSet_State state() const;
  void set_state(::google::cloud::speech::v2::PhraseSet_State value);
  private:
  ::google::cloud::speech::v2::PhraseSet_State _internal_state() const;
  void _internal_set_state(::google::cloud::speech::v2::PhraseSet_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.PhraseSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet_Phrase > phrases_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PhraseSet_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_version_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    float boost_;
    bool reconciling_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class CreateCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.CreateCustomClassRequest) */ {
 public:
  inline CreateCustomClassRequest() : CreateCustomClassRequest(nullptr) {}
  ~CreateCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCustomClassRequest(const CreateCustomClassRequest& from);
  CreateCustomClassRequest(CreateCustomClassRequest&& from) noexcept
    : CreateCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline CreateCustomClassRequest& operator=(const CreateCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCustomClassRequest& operator=(CreateCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCustomClassRequest*>(
               &_CreateCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CreateCustomClassRequest& a, CreateCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCustomClassRequest& from) {
    CreateCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.CreateCustomClassRequest";
  }
  protected:
  explicit CreateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomClassIdFieldNumber = 3,
    kParentFieldNumber = 4,
    kCustomClassFieldNumber = 1,
    kValidateOnlyFieldNumber = 2,
  };
  // string custom_class_id = 3;
  void clear_custom_class_id();
  const std::string& custom_class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_class_id();
  PROTOBUF_NODISCARD std::string* release_custom_class_id();
  void set_allocated_custom_class_id(std::string* custom_class_id);
  private:
  const std::string& _internal_custom_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_class_id(const std::string& value);
  std::string* _internal_mutable_custom_class_id();
  public:

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.speech.v2.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_custom_class() const;
  private:
  bool _internal_has_custom_class() const;
  public:
  void clear_custom_class();
  const ::google::cloud::speech::v2::CustomClass& custom_class() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::CustomClass* release_custom_class();
  ::google::cloud::speech::v2::CustomClass* mutable_custom_class();
  void set_allocated_custom_class(::google::cloud::speech::v2::CustomClass* custom_class);
  private:
  const ::google::cloud::speech::v2::CustomClass& _internal_custom_class() const;
  ::google::cloud::speech::v2::CustomClass* _internal_mutable_custom_class();
  public:
  void unsafe_arena_set_allocated_custom_class(
      ::google::cloud::speech::v2::CustomClass* custom_class);
  ::google::cloud::speech::v2::CustomClass* unsafe_arena_release_custom_class();

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.CreateCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::speech::v2::CustomClass* custom_class_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListCustomClassesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListCustomClassesRequest) */ {
 public:
  inline ListCustomClassesRequest() : ListCustomClassesRequest(nullptr) {}
  ~ListCustomClassesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListCustomClassesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCustomClassesRequest(const ListCustomClassesRequest& from);
  ListCustomClassesRequest(ListCustomClassesRequest&& from) noexcept
    : ListCustomClassesRequest() {
    *this = ::std::move(from);
  }

  inline ListCustomClassesRequest& operator=(const ListCustomClassesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCustomClassesRequest& operator=(ListCustomClassesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCustomClassesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCustomClassesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCustomClassesRequest*>(
               &_ListCustomClassesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ListCustomClassesRequest& a, ListCustomClassesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCustomClassesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCustomClassesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCustomClassesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCustomClassesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCustomClassesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCustomClassesRequest& from) {
    ListCustomClassesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCustomClassesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListCustomClassesRequest";
  }
  protected:
  explicit ListCustomClassesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
    kShowDeletedFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool show_deleted = 4;
  void clear_show_deleted();
  bool show_deleted() const;
  void set_show_deleted(bool value);
  private:
  bool _internal_show_deleted() const;
  void _internal_set_show_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListCustomClassesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    bool show_deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListCustomClassesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListCustomClassesResponse) */ {
 public:
  inline ListCustomClassesResponse() : ListCustomClassesResponse(nullptr) {}
  ~ListCustomClassesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCustomClassesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCustomClassesResponse(const ListCustomClassesResponse& from);
  ListCustomClassesResponse(ListCustomClassesResponse&& from) noexcept
    : ListCustomClassesResponse() {
    *this = ::std::move(from);
  }

  inline ListCustomClassesResponse& operator=(const ListCustomClassesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCustomClassesResponse& operator=(ListCustomClassesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCustomClassesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCustomClassesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCustomClassesResponse*>(
               &_ListCustomClassesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ListCustomClassesResponse& a, ListCustomClassesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCustomClassesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCustomClassesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCustomClassesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCustomClassesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCustomClassesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCustomClassesResponse& from) {
    ListCustomClassesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCustomClassesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListCustomClassesResponse";
  }
  protected:
  explicit ListCustomClassesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomClassesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.CustomClass custom_classes = 1;
  int custom_classes_size() const;
  private:
  int _internal_custom_classes_size() const;
  public:
  void clear_custom_classes();
  ::google::cloud::speech::v2::CustomClass* mutable_custom_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >*
      mutable_custom_classes();
  private:
  const ::google::cloud::speech::v2::CustomClass& _internal_custom_classes(int index) const;
  ::google::cloud::speech::v2::CustomClass* _internal_add_custom_classes();
  public:
  const ::google::cloud::speech::v2::CustomClass& custom_classes(int index) const;
  ::google::cloud::speech::v2::CustomClass* add_custom_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >&
      custom_classes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListCustomClassesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass > custom_classes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class GetCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.GetCustomClassRequest) */ {
 public:
  inline GetCustomClassRequest() : GetCustomClassRequest(nullptr) {}
  ~GetCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomClassRequest(const GetCustomClassRequest& from);
  GetCustomClassRequest(GetCustomClassRequest&& from) noexcept
    : GetCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline GetCustomClassRequest& operator=(const GetCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomClassRequest& operator=(GetCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const GetCustomClassRequest*>(
               &_GetCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetCustomClassRequest& a, GetCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCustomClassRequest& from) {
    GetCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.GetCustomClassRequest";
  }
  protected:
  explicit GetCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.GetCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UpdateCustomClassRequest) */ {
 public:
  inline UpdateCustomClassRequest() : UpdateCustomClassRequest(nullptr) {}
  ~UpdateCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCustomClassRequest(const UpdateCustomClassRequest& from);
  UpdateCustomClassRequest(UpdateCustomClassRequest&& from) noexcept
    : UpdateCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCustomClassRequest& operator=(const UpdateCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomClassRequest& operator=(UpdateCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomClassRequest*>(
               &_UpdateCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UpdateCustomClassRequest& a, UpdateCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCustomClassRequest& from) {
    UpdateCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UpdateCustomClassRequest";
  }
  protected:
  explicit UpdateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomClassFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kValidateOnlyFieldNumber = 4,
  };
  // .google.cloud.speech.v2.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_custom_class() const;
  private:
  bool _internal_has_custom_class() const;
  public:
  void clear_custom_class();
  const ::google::cloud::speech::v2::CustomClass& custom_class() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::CustomClass* release_custom_class();
  ::google::cloud::speech::v2::CustomClass* mutable_custom_class();
  void set_allocated_custom_class(::google::cloud::speech::v2::CustomClass* custom_class);
  private:
  const ::google::cloud::speech::v2::CustomClass& _internal_custom_class() const;
  ::google::cloud::speech::v2::CustomClass* _internal_mutable_custom_class();
  public:
  void unsafe_arena_set_allocated_custom_class(
      ::google::cloud::speech::v2::CustomClass* custom_class);
  ::google::cloud::speech::v2::CustomClass* unsafe_arena_release_custom_class();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool validate_only = 4;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UpdateCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::CustomClass* custom_class_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.DeleteCustomClassRequest) */ {
 public:
  inline DeleteCustomClassRequest() : DeleteCustomClassRequest(nullptr) {}
  ~DeleteCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCustomClassRequest(const DeleteCustomClassRequest& from);
  DeleteCustomClassRequest(DeleteCustomClassRequest&& from) noexcept
    : DeleteCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCustomClassRequest& operator=(const DeleteCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomClassRequest& operator=(DeleteCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomClassRequest*>(
               &_DeleteCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DeleteCustomClassRequest& a, DeleteCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteCustomClassRequest& from) {
    DeleteCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.DeleteCustomClassRequest";
  }
  protected:
  explicit DeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 3,
    kValidateOnlyFieldNumber = 2,
    kAllowMissingFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // bool allow_missing = 4;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.DeleteCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UndeleteCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UndeleteCustomClassRequest) */ {
 public:
  inline UndeleteCustomClassRequest() : UndeleteCustomClassRequest(nullptr) {}
  ~UndeleteCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR UndeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndeleteCustomClassRequest(const UndeleteCustomClassRequest& from);
  UndeleteCustomClassRequest(UndeleteCustomClassRequest&& from) noexcept
    : UndeleteCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline UndeleteCustomClassRequest& operator=(const UndeleteCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeleteCustomClassRequest& operator=(UndeleteCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndeleteCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndeleteCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteCustomClassRequest*>(
               &_UndeleteCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(UndeleteCustomClassRequest& a, UndeleteCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeleteCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndeleteCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndeleteCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndeleteCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndeleteCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UndeleteCustomClassRequest& from) {
    UndeleteCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeleteCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UndeleteCustomClassRequest";
  }
  protected:
  explicit UndeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 4,
    kValidateOnlyFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 4;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UndeleteCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class CreatePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.CreatePhraseSetRequest) */ {
 public:
  inline CreatePhraseSetRequest() : CreatePhraseSetRequest(nullptr) {}
  ~CreatePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePhraseSetRequest(const CreatePhraseSetRequest& from);
  CreatePhraseSetRequest(CreatePhraseSetRequest&& from) noexcept
    : CreatePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline CreatePhraseSetRequest& operator=(const CreatePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePhraseSetRequest& operator=(CreatePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePhraseSetRequest*>(
               &_CreatePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CreatePhraseSetRequest& a, CreatePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePhraseSetRequest& from) {
    CreatePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.CreatePhraseSetRequest";
  }
  protected:
  explicit CreatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetIdFieldNumber = 3,
    kParentFieldNumber = 4,
    kPhraseSetFieldNumber = 1,
    kValidateOnlyFieldNumber = 2,
  };
  // string phrase_set_id = 3;
  void clear_phrase_set_id();
  const std::string& phrase_set_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phrase_set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phrase_set_id();
  PROTOBUF_NODISCARD std::string* release_phrase_set_id();
  void set_allocated_phrase_set_id(std::string* phrase_set_id);
  private:
  const std::string& _internal_phrase_set_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phrase_set_id(const std::string& value);
  std::string* _internal_mutable_phrase_set_id();
  public:

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.speech.v2.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_phrase_set() const;
  private:
  bool _internal_has_phrase_set() const;
  public:
  void clear_phrase_set();
  const ::google::cloud::speech::v2::PhraseSet& phrase_set() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::PhraseSet* release_phrase_set();
  ::google::cloud::speech::v2::PhraseSet* mutable_phrase_set();
  void set_allocated_phrase_set(::google::cloud::speech::v2::PhraseSet* phrase_set);
  private:
  const ::google::cloud::speech::v2::PhraseSet& _internal_phrase_set() const;
  ::google::cloud::speech::v2::PhraseSet* _internal_mutable_phrase_set();
  public:
  void unsafe_arena_set_allocated_phrase_set(
      ::google::cloud::speech::v2::PhraseSet* phrase_set);
  ::google::cloud::speech::v2::PhraseSet* unsafe_arena_release_phrase_set();

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.CreatePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phrase_set_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::speech::v2::PhraseSet* phrase_set_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListPhraseSetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListPhraseSetsRequest) */ {
 public:
  inline ListPhraseSetsRequest() : ListPhraseSetsRequest(nullptr) {}
  ~ListPhraseSetsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPhraseSetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhraseSetsRequest(const ListPhraseSetsRequest& from);
  ListPhraseSetsRequest(ListPhraseSetsRequest&& from) noexcept
    : ListPhraseSetsRequest() {
    *this = ::std::move(from);
  }

  inline ListPhraseSetsRequest& operator=(const ListPhraseSetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhraseSetsRequest& operator=(ListPhraseSetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhraseSetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhraseSetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPhraseSetsRequest*>(
               &_ListPhraseSetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ListPhraseSetsRequest& a, ListPhraseSetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhraseSetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhraseSetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhraseSetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhraseSetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhraseSetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhraseSetsRequest& from) {
    ListPhraseSetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhraseSetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListPhraseSetsRequest";
  }
  protected:
  explicit ListPhraseSetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
    kShowDeletedFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool show_deleted = 4;
  void clear_show_deleted();
  bool show_deleted() const;
  void set_show_deleted(bool value);
  private:
  bool _internal_show_deleted() const;
  void _internal_set_show_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListPhraseSetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    bool show_deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class ListPhraseSetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.ListPhraseSetsResponse) */ {
 public:
  inline ListPhraseSetsResponse() : ListPhraseSetsResponse(nullptr) {}
  ~ListPhraseSetsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPhraseSetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhraseSetsResponse(const ListPhraseSetsResponse& from);
  ListPhraseSetsResponse(ListPhraseSetsResponse&& from) noexcept
    : ListPhraseSetsResponse() {
    *this = ::std::move(from);
  }

  inline ListPhraseSetsResponse& operator=(const ListPhraseSetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhraseSetsResponse& operator=(ListPhraseSetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhraseSetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhraseSetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPhraseSetsResponse*>(
               &_ListPhraseSetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ListPhraseSetsResponse& a, ListPhraseSetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhraseSetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhraseSetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhraseSetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhraseSetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhraseSetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhraseSetsResponse& from) {
    ListPhraseSetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhraseSetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.ListPhraseSetsResponse";
  }
  protected:
  explicit ListPhraseSetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v2.PhraseSet phrase_sets = 1;
  int phrase_sets_size() const;
  private:
  int _internal_phrase_sets_size() const;
  public:
  void clear_phrase_sets();
  ::google::cloud::speech::v2::PhraseSet* mutable_phrase_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet >*
      mutable_phrase_sets();
  private:
  const ::google::cloud::speech::v2::PhraseSet& _internal_phrase_sets(int index) const;
  ::google::cloud::speech::v2::PhraseSet* _internal_add_phrase_sets();
  public:
  const ::google::cloud::speech::v2::PhraseSet& phrase_sets(int index) const;
  ::google::cloud::speech::v2::PhraseSet* add_phrase_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet >&
      phrase_sets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.ListPhraseSetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet > phrase_sets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class GetPhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.GetPhraseSetRequest) */ {
 public:
  inline GetPhraseSetRequest() : GetPhraseSetRequest(nullptr) {}
  ~GetPhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhraseSetRequest(const GetPhraseSetRequest& from);
  GetPhraseSetRequest(GetPhraseSetRequest&& from) noexcept
    : GetPhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline GetPhraseSetRequest& operator=(const GetPhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhraseSetRequest& operator=(GetPhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetPhraseSetRequest*>(
               &_GetPhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetPhraseSetRequest& a, GetPhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPhraseSetRequest& from) {
    GetPhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.GetPhraseSetRequest";
  }
  protected:
  explicit GetPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.GetPhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UpdatePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UpdatePhraseSetRequest) */ {
 public:
  inline UpdatePhraseSetRequest() : UpdatePhraseSetRequest(nullptr) {}
  ~UpdatePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePhraseSetRequest(const UpdatePhraseSetRequest& from);
  UpdatePhraseSetRequest(UpdatePhraseSetRequest&& from) noexcept
    : UpdatePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePhraseSetRequest& operator=(const UpdatePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePhraseSetRequest& operator=(UpdatePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePhraseSetRequest*>(
               &_UpdatePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(UpdatePhraseSetRequest& a, UpdatePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePhraseSetRequest& from) {
    UpdatePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UpdatePhraseSetRequest";
  }
  protected:
  explicit UpdatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
    kValidateOnlyFieldNumber = 4,
  };
  // .google.cloud.speech.v2.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_phrase_set() const;
  private:
  bool _internal_has_phrase_set() const;
  public:
  void clear_phrase_set();
  const ::google::cloud::speech::v2::PhraseSet& phrase_set() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v2::PhraseSet* release_phrase_set();
  ::google::cloud::speech::v2::PhraseSet* mutable_phrase_set();
  void set_allocated_phrase_set(::google::cloud::speech::v2::PhraseSet* phrase_set);
  private:
  const ::google::cloud::speech::v2::PhraseSet& _internal_phrase_set() const;
  ::google::cloud::speech::v2::PhraseSet* _internal_mutable_phrase_set();
  public:
  void unsafe_arena_set_allocated_phrase_set(
      ::google::cloud::speech::v2::PhraseSet* phrase_set);
  ::google::cloud::speech::v2::PhraseSet* unsafe_arena_release_phrase_set();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool validate_only = 4;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UpdatePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v2::PhraseSet* phrase_set_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class DeletePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.DeletePhraseSetRequest) */ {
 public:
  inline DeletePhraseSetRequest() : DeletePhraseSetRequest(nullptr) {}
  ~DeletePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR DeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePhraseSetRequest(const DeletePhraseSetRequest& from);
  DeletePhraseSetRequest(DeletePhraseSetRequest&& from) noexcept
    : DeletePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline DeletePhraseSetRequest& operator=(const DeletePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePhraseSetRequest& operator=(DeletePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePhraseSetRequest*>(
               &_DeletePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(DeletePhraseSetRequest& a, DeletePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeletePhraseSetRequest& from) {
    DeletePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.DeletePhraseSetRequest";
  }
  protected:
  explicit DeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 3,
    kValidateOnlyFieldNumber = 2,
    kAllowMissingFieldNumber = 4,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 2;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // bool allow_missing = 4;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.DeletePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    bool allow_missing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class UndeletePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v2.UndeletePhraseSetRequest) */ {
 public:
  inline UndeletePhraseSetRequest() : UndeletePhraseSetRequest(nullptr) {}
  ~UndeletePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR UndeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndeletePhraseSetRequest(const UndeletePhraseSetRequest& from);
  UndeletePhraseSetRequest(UndeletePhraseSetRequest&& from) noexcept
    : UndeletePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline UndeletePhraseSetRequest& operator=(const UndeletePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeletePhraseSetRequest& operator=(UndeletePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndeletePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndeletePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const UndeletePhraseSetRequest*>(
               &_UndeletePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(UndeletePhraseSetRequest& a, UndeletePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeletePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndeletePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndeletePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndeletePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndeletePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UndeletePhraseSetRequest& from) {
    UndeletePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeletePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v2.UndeletePhraseSetRequest";
  }
  protected:
  explicit UndeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 4,
    kValidateOnlyFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 4;
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // bool validate_only = 3;
  void clear_validate_only();
  bool validate_only() const;
  void set_validate_only(bool value);
  private:
  bool _internal_validate_only() const;
  void _internal_set_validate_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.UndeletePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    bool validate_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRecognizerRequest

// .google.cloud.speech.v2.Recognizer recognizer = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateRecognizerRequest::_internal_has_recognizer() const {
  return this != internal_default_instance() && _impl_.recognizer_ != nullptr;
}
inline bool CreateRecognizerRequest::has_recognizer() const {
  return _internal_has_recognizer();
}
inline void CreateRecognizerRequest::clear_recognizer() {
  if (GetArenaForAllocation() == nullptr && _impl_.recognizer_ != nullptr) {
    delete _impl_.recognizer_;
  }
  _impl_.recognizer_ = nullptr;
}
inline const ::google::cloud::speech::v2::Recognizer& CreateRecognizerRequest::_internal_recognizer() const {
  const ::google::cloud::speech::v2::Recognizer* p = _impl_.recognizer_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::Recognizer&>(
      ::google::cloud::speech::v2::_Recognizer_default_instance_);
}
inline const ::google::cloud::speech::v2::Recognizer& CreateRecognizerRequest::recognizer() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateRecognizerRequest.recognizer)
  return _internal_recognizer();
}
inline void CreateRecognizerRequest::unsafe_arena_set_allocated_recognizer(
    ::google::cloud::speech::v2::Recognizer* recognizer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recognizer_);
  }
  _impl_.recognizer_ = recognizer;
  if (recognizer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CreateRecognizerRequest.recognizer)
}
inline ::google::cloud::speech::v2::Recognizer* CreateRecognizerRequest::release_recognizer() {
  
  ::google::cloud::speech::v2::Recognizer* temp = _impl_.recognizer_;
  _impl_.recognizer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::Recognizer* CreateRecognizerRequest::unsafe_arena_release_recognizer() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateRecognizerRequest.recognizer)
  
  ::google::cloud::speech::v2::Recognizer* temp = _impl_.recognizer_;
  _impl_.recognizer_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::Recognizer* CreateRecognizerRequest::_internal_mutable_recognizer() {
  
  if (_impl_.recognizer_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::Recognizer>(GetArenaForAllocation());
    _impl_.recognizer_ = p;
  }
  return _impl_.recognizer_;
}
inline ::google::cloud::speech::v2::Recognizer* CreateRecognizerRequest::mutable_recognizer() {
  ::google::cloud::speech::v2::Recognizer* _msg = _internal_mutable_recognizer();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateRecognizerRequest.recognizer)
  return _msg;
}
inline void CreateRecognizerRequest::set_allocated_recognizer(::google::cloud::speech::v2::Recognizer* recognizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recognizer_;
  }
  if (recognizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recognizer);
    if (message_arena != submessage_arena) {
      recognizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognizer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recognizer_ = recognizer;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateRecognizerRequest.recognizer)
}

// bool validate_only = 2;
inline void CreateRecognizerRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool CreateRecognizerRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool CreateRecognizerRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateRecognizerRequest.validate_only)
  return _internal_validate_only();
}
inline void CreateRecognizerRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void CreateRecognizerRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateRecognizerRequest.validate_only)
}

// string recognizer_id = 3;
inline void CreateRecognizerRequest::clear_recognizer_id() {
  _impl_.recognizer_id_.ClearToEmpty();
}
inline const std::string& CreateRecognizerRequest::recognizer_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateRecognizerRequest.recognizer_id)
  return _internal_recognizer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRecognizerRequest::set_recognizer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recognizer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateRecognizerRequest.recognizer_id)
}
inline std::string* CreateRecognizerRequest::mutable_recognizer_id() {
  std::string* _s = _internal_mutable_recognizer_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateRecognizerRequest.recognizer_id)
  return _s;
}
inline const std::string& CreateRecognizerRequest::_internal_recognizer_id() const {
  return _impl_.recognizer_id_.Get();
}
inline void CreateRecognizerRequest::_internal_set_recognizer_id(const std::string& value) {
  
  _impl_.recognizer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRecognizerRequest::_internal_mutable_recognizer_id() {
  
  return _impl_.recognizer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRecognizerRequest::release_recognizer_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateRecognizerRequest.recognizer_id)
  return _impl_.recognizer_id_.Release();
}
inline void CreateRecognizerRequest::set_allocated_recognizer_id(std::string* recognizer_id) {
  if (recognizer_id != nullptr) {
    
  } else {
    
  }
  _impl_.recognizer_id_.SetAllocated(recognizer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recognizer_id_.IsDefault()) {
    _impl_.recognizer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateRecognizerRequest.recognizer_id)
}

// string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateRecognizerRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateRecognizerRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateRecognizerRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRecognizerRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateRecognizerRequest.parent)
}
inline std::string* CreateRecognizerRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateRecognizerRequest.parent)
  return _s;
}
inline const std::string& CreateRecognizerRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateRecognizerRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRecognizerRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRecognizerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateRecognizerRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateRecognizerRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateRecognizerRequest.parent)
}

// -------------------------------------------------------------------

// OperationMetadata

// .google.protobuf.Timestamp create_time = 1;
inline bool OperationMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool OperationMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.create_time)
  return _internal_create_time();
}
inline void OperationMetadata::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.create_time)
  return _msg;
}
inline void OperationMetadata::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.create_time)
}

// .google.protobuf.Timestamp update_time = 2;
inline bool OperationMetadata::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool OperationMetadata::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.update_time)
  return _internal_update_time();
}
inline void OperationMetadata::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.update_time)
  return _msg;
}
inline void OperationMetadata::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.update_time)
}

// string resource = 3;
inline void OperationMetadata::clear_resource() {
  _impl_.resource_.ClearToEmpty();
}
inline const std::string& OperationMetadata::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_resource(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.OperationMetadata.resource)
}
inline std::string* OperationMetadata::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.resource)
  return _s;
}
inline const std::string& OperationMetadata::_internal_resource() const {
  return _impl_.resource_.Get();
}
inline void OperationMetadata::_internal_set_resource(const std::string& value) {
  
  _impl_.resource_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_resource() {
  
  return _impl_.resource_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.resource)
  return _impl_.resource_.Release();
}
inline void OperationMetadata::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  _impl_.resource_.SetAllocated(resource, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_.IsDefault()) {
    _impl_.resource_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.resource)
}

// string method = 4;
inline void OperationMetadata::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& OperationMetadata::method() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.OperationMetadata.method)
}
inline std::string* OperationMetadata::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.method)
  return _s;
}
inline const std::string& OperationMetadata::_internal_method() const {
  return _impl_.method_.Get();
}
inline void OperationMetadata::_internal_set_method(const std::string& value) {
  
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_method() {
  
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_method() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.method)
  return _impl_.method_.Release();
}
inline void OperationMetadata::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.method)
}

// string kms_key_name = 6 [(.google.api.resource_reference) = {
inline void OperationMetadata::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& OperationMetadata::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.OperationMetadata.kms_key_name)
}
inline std::string* OperationMetadata::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.kms_key_name)
  return _s;
}
inline const std::string& OperationMetadata::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void OperationMetadata::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void OperationMetadata::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.kms_key_name)
}

// string kms_key_version_name = 7 [(.google.api.resource_reference) = {
inline void OperationMetadata::clear_kms_key_version_name() {
  _impl_.kms_key_version_name_.ClearToEmpty();
}
inline const std::string& OperationMetadata::kms_key_version_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.kms_key_version_name)
  return _internal_kms_key_version_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_kms_key_version_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_version_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.OperationMetadata.kms_key_version_name)
}
inline std::string* OperationMetadata::mutable_kms_key_version_name() {
  std::string* _s = _internal_mutable_kms_key_version_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.kms_key_version_name)
  return _s;
}
inline const std::string& OperationMetadata::_internal_kms_key_version_name() const {
  return _impl_.kms_key_version_name_.Get();
}
inline void OperationMetadata::_internal_set_kms_key_version_name(const std::string& value) {
  
  _impl_.kms_key_version_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_kms_key_version_name() {
  
  return _impl_.kms_key_version_name_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_kms_key_version_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.kms_key_version_name)
  return _impl_.kms_key_version_name_.Release();
}
inline void OperationMetadata::set_allocated_kms_key_version_name(std::string* kms_key_version_name) {
  if (kms_key_version_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_version_name_.SetAllocated(kms_key_version_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_version_name_.IsDefault()) {
    _impl_.kms_key_version_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.OperationMetadata.kms_key_version_name)
}

// .google.cloud.speech.v2.BatchRecognizeRequest batch_recognize_request = 8;
inline bool OperationMetadata::_internal_has_batch_recognize_request() const {
  return request_case() == kBatchRecognizeRequest;
}
inline bool OperationMetadata::has_batch_recognize_request() const {
  return _internal_has_batch_recognize_request();
}
inline void OperationMetadata::set_has_batch_recognize_request() {
  _impl_._oneof_case_[0] = kBatchRecognizeRequest;
}
inline void OperationMetadata::clear_batch_recognize_request() {
  if (_internal_has_batch_recognize_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.batch_recognize_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::BatchRecognizeRequest* OperationMetadata::release_batch_recognize_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.batch_recognize_request)
  if (_internal_has_batch_recognize_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::BatchRecognizeRequest* temp = _impl_.request_.batch_recognize_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.batch_recognize_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::BatchRecognizeRequest& OperationMetadata::_internal_batch_recognize_request() const {
  return _internal_has_batch_recognize_request()
      ? *_impl_.request_.batch_recognize_request_
      : reinterpret_cast< ::google::cloud::speech::v2::BatchRecognizeRequest&>(::google::cloud::speech::v2::_BatchRecognizeRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::BatchRecognizeRequest& OperationMetadata::batch_recognize_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.batch_recognize_request)
  return _internal_batch_recognize_request();
}
inline ::google::cloud::speech::v2::BatchRecognizeRequest* OperationMetadata::unsafe_arena_release_batch_recognize_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.batch_recognize_request)
  if (_internal_has_batch_recognize_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::BatchRecognizeRequest* temp = _impl_.request_.batch_recognize_request_;
    _impl_.request_.batch_recognize_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_batch_recognize_request(::google::cloud::speech::v2::BatchRecognizeRequest* batch_recognize_request) {
  clear_request();
  if (batch_recognize_request) {
    set_has_batch_recognize_request();
    _impl_.request_.batch_recognize_request_ = batch_recognize_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.batch_recognize_request)
}
inline ::google::cloud::speech::v2::BatchRecognizeRequest* OperationMetadata::_internal_mutable_batch_recognize_request() {
  if (!_internal_has_batch_recognize_request()) {
    clear_request();
    set_has_batch_recognize_request();
    _impl_.request_.batch_recognize_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::BatchRecognizeRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.batch_recognize_request_;
}
inline ::google::cloud::speech::v2::BatchRecognizeRequest* OperationMetadata::mutable_batch_recognize_request() {
  ::google::cloud::speech::v2::BatchRecognizeRequest* _msg = _internal_mutable_batch_recognize_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.batch_recognize_request)
  return _msg;
}

// .google.cloud.speech.v2.CreateRecognizerRequest create_recognizer_request = 9;
inline bool OperationMetadata::_internal_has_create_recognizer_request() const {
  return request_case() == kCreateRecognizerRequest;
}
inline bool OperationMetadata::has_create_recognizer_request() const {
  return _internal_has_create_recognizer_request();
}
inline void OperationMetadata::set_has_create_recognizer_request() {
  _impl_._oneof_case_[0] = kCreateRecognizerRequest;
}
inline void OperationMetadata::clear_create_recognizer_request() {
  if (_internal_has_create_recognizer_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.create_recognizer_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::CreateRecognizerRequest* OperationMetadata::release_create_recognizer_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.create_recognizer_request)
  if (_internal_has_create_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreateRecognizerRequest* temp = _impl_.request_.create_recognizer_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.create_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::CreateRecognizerRequest& OperationMetadata::_internal_create_recognizer_request() const {
  return _internal_has_create_recognizer_request()
      ? *_impl_.request_.create_recognizer_request_
      : reinterpret_cast< ::google::cloud::speech::v2::CreateRecognizerRequest&>(::google::cloud::speech::v2::_CreateRecognizerRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::CreateRecognizerRequest& OperationMetadata::create_recognizer_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.create_recognizer_request)
  return _internal_create_recognizer_request();
}
inline ::google::cloud::speech::v2::CreateRecognizerRequest* OperationMetadata::unsafe_arena_release_create_recognizer_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.create_recognizer_request)
  if (_internal_has_create_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreateRecognizerRequest* temp = _impl_.request_.create_recognizer_request_;
    _impl_.request_.create_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_create_recognizer_request(::google::cloud::speech::v2::CreateRecognizerRequest* create_recognizer_request) {
  clear_request();
  if (create_recognizer_request) {
    set_has_create_recognizer_request();
    _impl_.request_.create_recognizer_request_ = create_recognizer_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.create_recognizer_request)
}
inline ::google::cloud::speech::v2::CreateRecognizerRequest* OperationMetadata::_internal_mutable_create_recognizer_request() {
  if (!_internal_has_create_recognizer_request()) {
    clear_request();
    set_has_create_recognizer_request();
    _impl_.request_.create_recognizer_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::CreateRecognizerRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.create_recognizer_request_;
}
inline ::google::cloud::speech::v2::CreateRecognizerRequest* OperationMetadata::mutable_create_recognizer_request() {
  ::google::cloud::speech::v2::CreateRecognizerRequest* _msg = _internal_mutable_create_recognizer_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.create_recognizer_request)
  return _msg;
}

// .google.cloud.speech.v2.UpdateRecognizerRequest update_recognizer_request = 10;
inline bool OperationMetadata::_internal_has_update_recognizer_request() const {
  return request_case() == kUpdateRecognizerRequest;
}
inline bool OperationMetadata::has_update_recognizer_request() const {
  return _internal_has_update_recognizer_request();
}
inline void OperationMetadata::set_has_update_recognizer_request() {
  _impl_._oneof_case_[0] = kUpdateRecognizerRequest;
}
inline void OperationMetadata::clear_update_recognizer_request() {
  if (_internal_has_update_recognizer_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.update_recognizer_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UpdateRecognizerRequest* OperationMetadata::release_update_recognizer_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.update_recognizer_request)
  if (_internal_has_update_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateRecognizerRequest* temp = _impl_.request_.update_recognizer_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.update_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UpdateRecognizerRequest& OperationMetadata::_internal_update_recognizer_request() const {
  return _internal_has_update_recognizer_request()
      ? *_impl_.request_.update_recognizer_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UpdateRecognizerRequest&>(::google::cloud::speech::v2::_UpdateRecognizerRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UpdateRecognizerRequest& OperationMetadata::update_recognizer_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.update_recognizer_request)
  return _internal_update_recognizer_request();
}
inline ::google::cloud::speech::v2::UpdateRecognizerRequest* OperationMetadata::unsafe_arena_release_update_recognizer_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.update_recognizer_request)
  if (_internal_has_update_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateRecognizerRequest* temp = _impl_.request_.update_recognizer_request_;
    _impl_.request_.update_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_update_recognizer_request(::google::cloud::speech::v2::UpdateRecognizerRequest* update_recognizer_request) {
  clear_request();
  if (update_recognizer_request) {
    set_has_update_recognizer_request();
    _impl_.request_.update_recognizer_request_ = update_recognizer_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.update_recognizer_request)
}
inline ::google::cloud::speech::v2::UpdateRecognizerRequest* OperationMetadata::_internal_mutable_update_recognizer_request() {
  if (!_internal_has_update_recognizer_request()) {
    clear_request();
    set_has_update_recognizer_request();
    _impl_.request_.update_recognizer_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UpdateRecognizerRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.update_recognizer_request_;
}
inline ::google::cloud::speech::v2::UpdateRecognizerRequest* OperationMetadata::mutable_update_recognizer_request() {
  ::google::cloud::speech::v2::UpdateRecognizerRequest* _msg = _internal_mutable_update_recognizer_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.update_recognizer_request)
  return _msg;
}

// .google.cloud.speech.v2.DeleteRecognizerRequest delete_recognizer_request = 11;
inline bool OperationMetadata::_internal_has_delete_recognizer_request() const {
  return request_case() == kDeleteRecognizerRequest;
}
inline bool OperationMetadata::has_delete_recognizer_request() const {
  return _internal_has_delete_recognizer_request();
}
inline void OperationMetadata::set_has_delete_recognizer_request() {
  _impl_._oneof_case_[0] = kDeleteRecognizerRequest;
}
inline void OperationMetadata::clear_delete_recognizer_request() {
  if (_internal_has_delete_recognizer_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.delete_recognizer_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::DeleteRecognizerRequest* OperationMetadata::release_delete_recognizer_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.delete_recognizer_request)
  if (_internal_has_delete_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeleteRecognizerRequest* temp = _impl_.request_.delete_recognizer_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.delete_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::DeleteRecognizerRequest& OperationMetadata::_internal_delete_recognizer_request() const {
  return _internal_has_delete_recognizer_request()
      ? *_impl_.request_.delete_recognizer_request_
      : reinterpret_cast< ::google::cloud::speech::v2::DeleteRecognizerRequest&>(::google::cloud::speech::v2::_DeleteRecognizerRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::DeleteRecognizerRequest& OperationMetadata::delete_recognizer_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.delete_recognizer_request)
  return _internal_delete_recognizer_request();
}
inline ::google::cloud::speech::v2::DeleteRecognizerRequest* OperationMetadata::unsafe_arena_release_delete_recognizer_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.delete_recognizer_request)
  if (_internal_has_delete_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeleteRecognizerRequest* temp = _impl_.request_.delete_recognizer_request_;
    _impl_.request_.delete_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_delete_recognizer_request(::google::cloud::speech::v2::DeleteRecognizerRequest* delete_recognizer_request) {
  clear_request();
  if (delete_recognizer_request) {
    set_has_delete_recognizer_request();
    _impl_.request_.delete_recognizer_request_ = delete_recognizer_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.delete_recognizer_request)
}
inline ::google::cloud::speech::v2::DeleteRecognizerRequest* OperationMetadata::_internal_mutable_delete_recognizer_request() {
  if (!_internal_has_delete_recognizer_request()) {
    clear_request();
    set_has_delete_recognizer_request();
    _impl_.request_.delete_recognizer_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::DeleteRecognizerRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.delete_recognizer_request_;
}
inline ::google::cloud::speech::v2::DeleteRecognizerRequest* OperationMetadata::mutable_delete_recognizer_request() {
  ::google::cloud::speech::v2::DeleteRecognizerRequest* _msg = _internal_mutable_delete_recognizer_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.delete_recognizer_request)
  return _msg;
}

// .google.cloud.speech.v2.UndeleteRecognizerRequest undelete_recognizer_request = 12;
inline bool OperationMetadata::_internal_has_undelete_recognizer_request() const {
  return request_case() == kUndeleteRecognizerRequest;
}
inline bool OperationMetadata::has_undelete_recognizer_request() const {
  return _internal_has_undelete_recognizer_request();
}
inline void OperationMetadata::set_has_undelete_recognizer_request() {
  _impl_._oneof_case_[0] = kUndeleteRecognizerRequest;
}
inline void OperationMetadata::clear_undelete_recognizer_request() {
  if (_internal_has_undelete_recognizer_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.undelete_recognizer_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UndeleteRecognizerRequest* OperationMetadata::release_undelete_recognizer_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.undelete_recognizer_request)
  if (_internal_has_undelete_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeleteRecognizerRequest* temp = _impl_.request_.undelete_recognizer_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.undelete_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UndeleteRecognizerRequest& OperationMetadata::_internal_undelete_recognizer_request() const {
  return _internal_has_undelete_recognizer_request()
      ? *_impl_.request_.undelete_recognizer_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UndeleteRecognizerRequest&>(::google::cloud::speech::v2::_UndeleteRecognizerRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UndeleteRecognizerRequest& OperationMetadata::undelete_recognizer_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.undelete_recognizer_request)
  return _internal_undelete_recognizer_request();
}
inline ::google::cloud::speech::v2::UndeleteRecognizerRequest* OperationMetadata::unsafe_arena_release_undelete_recognizer_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.undelete_recognizer_request)
  if (_internal_has_undelete_recognizer_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeleteRecognizerRequest* temp = _impl_.request_.undelete_recognizer_request_;
    _impl_.request_.undelete_recognizer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_undelete_recognizer_request(::google::cloud::speech::v2::UndeleteRecognizerRequest* undelete_recognizer_request) {
  clear_request();
  if (undelete_recognizer_request) {
    set_has_undelete_recognizer_request();
    _impl_.request_.undelete_recognizer_request_ = undelete_recognizer_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.undelete_recognizer_request)
}
inline ::google::cloud::speech::v2::UndeleteRecognizerRequest* OperationMetadata::_internal_mutable_undelete_recognizer_request() {
  if (!_internal_has_undelete_recognizer_request()) {
    clear_request();
    set_has_undelete_recognizer_request();
    _impl_.request_.undelete_recognizer_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UndeleteRecognizerRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.undelete_recognizer_request_;
}
inline ::google::cloud::speech::v2::UndeleteRecognizerRequest* OperationMetadata::mutable_undelete_recognizer_request() {
  ::google::cloud::speech::v2::UndeleteRecognizerRequest* _msg = _internal_mutable_undelete_recognizer_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.undelete_recognizer_request)
  return _msg;
}

// .google.cloud.speech.v2.CreateCustomClassRequest create_custom_class_request = 13;
inline bool OperationMetadata::_internal_has_create_custom_class_request() const {
  return request_case() == kCreateCustomClassRequest;
}
inline bool OperationMetadata::has_create_custom_class_request() const {
  return _internal_has_create_custom_class_request();
}
inline void OperationMetadata::set_has_create_custom_class_request() {
  _impl_._oneof_case_[0] = kCreateCustomClassRequest;
}
inline void OperationMetadata::clear_create_custom_class_request() {
  if (_internal_has_create_custom_class_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.create_custom_class_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::CreateCustomClassRequest* OperationMetadata::release_create_custom_class_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.create_custom_class_request)
  if (_internal_has_create_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreateCustomClassRequest* temp = _impl_.request_.create_custom_class_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.create_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::CreateCustomClassRequest& OperationMetadata::_internal_create_custom_class_request() const {
  return _internal_has_create_custom_class_request()
      ? *_impl_.request_.create_custom_class_request_
      : reinterpret_cast< ::google::cloud::speech::v2::CreateCustomClassRequest&>(::google::cloud::speech::v2::_CreateCustomClassRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::CreateCustomClassRequest& OperationMetadata::create_custom_class_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.create_custom_class_request)
  return _internal_create_custom_class_request();
}
inline ::google::cloud::speech::v2::CreateCustomClassRequest* OperationMetadata::unsafe_arena_release_create_custom_class_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.create_custom_class_request)
  if (_internal_has_create_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreateCustomClassRequest* temp = _impl_.request_.create_custom_class_request_;
    _impl_.request_.create_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_create_custom_class_request(::google::cloud::speech::v2::CreateCustomClassRequest* create_custom_class_request) {
  clear_request();
  if (create_custom_class_request) {
    set_has_create_custom_class_request();
    _impl_.request_.create_custom_class_request_ = create_custom_class_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.create_custom_class_request)
}
inline ::google::cloud::speech::v2::CreateCustomClassRequest* OperationMetadata::_internal_mutable_create_custom_class_request() {
  if (!_internal_has_create_custom_class_request()) {
    clear_request();
    set_has_create_custom_class_request();
    _impl_.request_.create_custom_class_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::CreateCustomClassRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.create_custom_class_request_;
}
inline ::google::cloud::speech::v2::CreateCustomClassRequest* OperationMetadata::mutable_create_custom_class_request() {
  ::google::cloud::speech::v2::CreateCustomClassRequest* _msg = _internal_mutable_create_custom_class_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.create_custom_class_request)
  return _msg;
}

// .google.cloud.speech.v2.UpdateCustomClassRequest update_custom_class_request = 14;
inline bool OperationMetadata::_internal_has_update_custom_class_request() const {
  return request_case() == kUpdateCustomClassRequest;
}
inline bool OperationMetadata::has_update_custom_class_request() const {
  return _internal_has_update_custom_class_request();
}
inline void OperationMetadata::set_has_update_custom_class_request() {
  _impl_._oneof_case_[0] = kUpdateCustomClassRequest;
}
inline void OperationMetadata::clear_update_custom_class_request() {
  if (_internal_has_update_custom_class_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.update_custom_class_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UpdateCustomClassRequest* OperationMetadata::release_update_custom_class_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.update_custom_class_request)
  if (_internal_has_update_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateCustomClassRequest* temp = _impl_.request_.update_custom_class_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.update_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UpdateCustomClassRequest& OperationMetadata::_internal_update_custom_class_request() const {
  return _internal_has_update_custom_class_request()
      ? *_impl_.request_.update_custom_class_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UpdateCustomClassRequest&>(::google::cloud::speech::v2::_UpdateCustomClassRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UpdateCustomClassRequest& OperationMetadata::update_custom_class_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.update_custom_class_request)
  return _internal_update_custom_class_request();
}
inline ::google::cloud::speech::v2::UpdateCustomClassRequest* OperationMetadata::unsafe_arena_release_update_custom_class_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.update_custom_class_request)
  if (_internal_has_update_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateCustomClassRequest* temp = _impl_.request_.update_custom_class_request_;
    _impl_.request_.update_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_update_custom_class_request(::google::cloud::speech::v2::UpdateCustomClassRequest* update_custom_class_request) {
  clear_request();
  if (update_custom_class_request) {
    set_has_update_custom_class_request();
    _impl_.request_.update_custom_class_request_ = update_custom_class_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.update_custom_class_request)
}
inline ::google::cloud::speech::v2::UpdateCustomClassRequest* OperationMetadata::_internal_mutable_update_custom_class_request() {
  if (!_internal_has_update_custom_class_request()) {
    clear_request();
    set_has_update_custom_class_request();
    _impl_.request_.update_custom_class_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UpdateCustomClassRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.update_custom_class_request_;
}
inline ::google::cloud::speech::v2::UpdateCustomClassRequest* OperationMetadata::mutable_update_custom_class_request() {
  ::google::cloud::speech::v2::UpdateCustomClassRequest* _msg = _internal_mutable_update_custom_class_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.update_custom_class_request)
  return _msg;
}

// .google.cloud.speech.v2.DeleteCustomClassRequest delete_custom_class_request = 15;
inline bool OperationMetadata::_internal_has_delete_custom_class_request() const {
  return request_case() == kDeleteCustomClassRequest;
}
inline bool OperationMetadata::has_delete_custom_class_request() const {
  return _internal_has_delete_custom_class_request();
}
inline void OperationMetadata::set_has_delete_custom_class_request() {
  _impl_._oneof_case_[0] = kDeleteCustomClassRequest;
}
inline void OperationMetadata::clear_delete_custom_class_request() {
  if (_internal_has_delete_custom_class_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.delete_custom_class_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::DeleteCustomClassRequest* OperationMetadata::release_delete_custom_class_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.delete_custom_class_request)
  if (_internal_has_delete_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeleteCustomClassRequest* temp = _impl_.request_.delete_custom_class_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.delete_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::DeleteCustomClassRequest& OperationMetadata::_internal_delete_custom_class_request() const {
  return _internal_has_delete_custom_class_request()
      ? *_impl_.request_.delete_custom_class_request_
      : reinterpret_cast< ::google::cloud::speech::v2::DeleteCustomClassRequest&>(::google::cloud::speech::v2::_DeleteCustomClassRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::DeleteCustomClassRequest& OperationMetadata::delete_custom_class_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.delete_custom_class_request)
  return _internal_delete_custom_class_request();
}
inline ::google::cloud::speech::v2::DeleteCustomClassRequest* OperationMetadata::unsafe_arena_release_delete_custom_class_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.delete_custom_class_request)
  if (_internal_has_delete_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeleteCustomClassRequest* temp = _impl_.request_.delete_custom_class_request_;
    _impl_.request_.delete_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_delete_custom_class_request(::google::cloud::speech::v2::DeleteCustomClassRequest* delete_custom_class_request) {
  clear_request();
  if (delete_custom_class_request) {
    set_has_delete_custom_class_request();
    _impl_.request_.delete_custom_class_request_ = delete_custom_class_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.delete_custom_class_request)
}
inline ::google::cloud::speech::v2::DeleteCustomClassRequest* OperationMetadata::_internal_mutable_delete_custom_class_request() {
  if (!_internal_has_delete_custom_class_request()) {
    clear_request();
    set_has_delete_custom_class_request();
    _impl_.request_.delete_custom_class_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::DeleteCustomClassRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.delete_custom_class_request_;
}
inline ::google::cloud::speech::v2::DeleteCustomClassRequest* OperationMetadata::mutable_delete_custom_class_request() {
  ::google::cloud::speech::v2::DeleteCustomClassRequest* _msg = _internal_mutable_delete_custom_class_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.delete_custom_class_request)
  return _msg;
}

// .google.cloud.speech.v2.UndeleteCustomClassRequest undelete_custom_class_request = 16;
inline bool OperationMetadata::_internal_has_undelete_custom_class_request() const {
  return request_case() == kUndeleteCustomClassRequest;
}
inline bool OperationMetadata::has_undelete_custom_class_request() const {
  return _internal_has_undelete_custom_class_request();
}
inline void OperationMetadata::set_has_undelete_custom_class_request() {
  _impl_._oneof_case_[0] = kUndeleteCustomClassRequest;
}
inline void OperationMetadata::clear_undelete_custom_class_request() {
  if (_internal_has_undelete_custom_class_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.undelete_custom_class_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UndeleteCustomClassRequest* OperationMetadata::release_undelete_custom_class_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.undelete_custom_class_request)
  if (_internal_has_undelete_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeleteCustomClassRequest* temp = _impl_.request_.undelete_custom_class_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.undelete_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UndeleteCustomClassRequest& OperationMetadata::_internal_undelete_custom_class_request() const {
  return _internal_has_undelete_custom_class_request()
      ? *_impl_.request_.undelete_custom_class_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UndeleteCustomClassRequest&>(::google::cloud::speech::v2::_UndeleteCustomClassRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UndeleteCustomClassRequest& OperationMetadata::undelete_custom_class_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.undelete_custom_class_request)
  return _internal_undelete_custom_class_request();
}
inline ::google::cloud::speech::v2::UndeleteCustomClassRequest* OperationMetadata::unsafe_arena_release_undelete_custom_class_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.undelete_custom_class_request)
  if (_internal_has_undelete_custom_class_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeleteCustomClassRequest* temp = _impl_.request_.undelete_custom_class_request_;
    _impl_.request_.undelete_custom_class_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_undelete_custom_class_request(::google::cloud::speech::v2::UndeleteCustomClassRequest* undelete_custom_class_request) {
  clear_request();
  if (undelete_custom_class_request) {
    set_has_undelete_custom_class_request();
    _impl_.request_.undelete_custom_class_request_ = undelete_custom_class_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.undelete_custom_class_request)
}
inline ::google::cloud::speech::v2::UndeleteCustomClassRequest* OperationMetadata::_internal_mutable_undelete_custom_class_request() {
  if (!_internal_has_undelete_custom_class_request()) {
    clear_request();
    set_has_undelete_custom_class_request();
    _impl_.request_.undelete_custom_class_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UndeleteCustomClassRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.undelete_custom_class_request_;
}
inline ::google::cloud::speech::v2::UndeleteCustomClassRequest* OperationMetadata::mutable_undelete_custom_class_request() {
  ::google::cloud::speech::v2::UndeleteCustomClassRequest* _msg = _internal_mutable_undelete_custom_class_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.undelete_custom_class_request)
  return _msg;
}

// .google.cloud.speech.v2.CreatePhraseSetRequest create_phrase_set_request = 17;
inline bool OperationMetadata::_internal_has_create_phrase_set_request() const {
  return request_case() == kCreatePhraseSetRequest;
}
inline bool OperationMetadata::has_create_phrase_set_request() const {
  return _internal_has_create_phrase_set_request();
}
inline void OperationMetadata::set_has_create_phrase_set_request() {
  _impl_._oneof_case_[0] = kCreatePhraseSetRequest;
}
inline void OperationMetadata::clear_create_phrase_set_request() {
  if (_internal_has_create_phrase_set_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.create_phrase_set_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::CreatePhraseSetRequest* OperationMetadata::release_create_phrase_set_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.create_phrase_set_request)
  if (_internal_has_create_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreatePhraseSetRequest* temp = _impl_.request_.create_phrase_set_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.create_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::CreatePhraseSetRequest& OperationMetadata::_internal_create_phrase_set_request() const {
  return _internal_has_create_phrase_set_request()
      ? *_impl_.request_.create_phrase_set_request_
      : reinterpret_cast< ::google::cloud::speech::v2::CreatePhraseSetRequest&>(::google::cloud::speech::v2::_CreatePhraseSetRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::CreatePhraseSetRequest& OperationMetadata::create_phrase_set_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.create_phrase_set_request)
  return _internal_create_phrase_set_request();
}
inline ::google::cloud::speech::v2::CreatePhraseSetRequest* OperationMetadata::unsafe_arena_release_create_phrase_set_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.create_phrase_set_request)
  if (_internal_has_create_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::CreatePhraseSetRequest* temp = _impl_.request_.create_phrase_set_request_;
    _impl_.request_.create_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_create_phrase_set_request(::google::cloud::speech::v2::CreatePhraseSetRequest* create_phrase_set_request) {
  clear_request();
  if (create_phrase_set_request) {
    set_has_create_phrase_set_request();
    _impl_.request_.create_phrase_set_request_ = create_phrase_set_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.create_phrase_set_request)
}
inline ::google::cloud::speech::v2::CreatePhraseSetRequest* OperationMetadata::_internal_mutable_create_phrase_set_request() {
  if (!_internal_has_create_phrase_set_request()) {
    clear_request();
    set_has_create_phrase_set_request();
    _impl_.request_.create_phrase_set_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::CreatePhraseSetRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.create_phrase_set_request_;
}
inline ::google::cloud::speech::v2::CreatePhraseSetRequest* OperationMetadata::mutable_create_phrase_set_request() {
  ::google::cloud::speech::v2::CreatePhraseSetRequest* _msg = _internal_mutable_create_phrase_set_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.create_phrase_set_request)
  return _msg;
}

// .google.cloud.speech.v2.UpdatePhraseSetRequest update_phrase_set_request = 18;
inline bool OperationMetadata::_internal_has_update_phrase_set_request() const {
  return request_case() == kUpdatePhraseSetRequest;
}
inline bool OperationMetadata::has_update_phrase_set_request() const {
  return _internal_has_update_phrase_set_request();
}
inline void OperationMetadata::set_has_update_phrase_set_request() {
  _impl_._oneof_case_[0] = kUpdatePhraseSetRequest;
}
inline void OperationMetadata::clear_update_phrase_set_request() {
  if (_internal_has_update_phrase_set_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.update_phrase_set_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UpdatePhraseSetRequest* OperationMetadata::release_update_phrase_set_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.update_phrase_set_request)
  if (_internal_has_update_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdatePhraseSetRequest* temp = _impl_.request_.update_phrase_set_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.update_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UpdatePhraseSetRequest& OperationMetadata::_internal_update_phrase_set_request() const {
  return _internal_has_update_phrase_set_request()
      ? *_impl_.request_.update_phrase_set_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UpdatePhraseSetRequest&>(::google::cloud::speech::v2::_UpdatePhraseSetRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UpdatePhraseSetRequest& OperationMetadata::update_phrase_set_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.update_phrase_set_request)
  return _internal_update_phrase_set_request();
}
inline ::google::cloud::speech::v2::UpdatePhraseSetRequest* OperationMetadata::unsafe_arena_release_update_phrase_set_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.update_phrase_set_request)
  if (_internal_has_update_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdatePhraseSetRequest* temp = _impl_.request_.update_phrase_set_request_;
    _impl_.request_.update_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_update_phrase_set_request(::google::cloud::speech::v2::UpdatePhraseSetRequest* update_phrase_set_request) {
  clear_request();
  if (update_phrase_set_request) {
    set_has_update_phrase_set_request();
    _impl_.request_.update_phrase_set_request_ = update_phrase_set_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.update_phrase_set_request)
}
inline ::google::cloud::speech::v2::UpdatePhraseSetRequest* OperationMetadata::_internal_mutable_update_phrase_set_request() {
  if (!_internal_has_update_phrase_set_request()) {
    clear_request();
    set_has_update_phrase_set_request();
    _impl_.request_.update_phrase_set_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UpdatePhraseSetRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.update_phrase_set_request_;
}
inline ::google::cloud::speech::v2::UpdatePhraseSetRequest* OperationMetadata::mutable_update_phrase_set_request() {
  ::google::cloud::speech::v2::UpdatePhraseSetRequest* _msg = _internal_mutable_update_phrase_set_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.update_phrase_set_request)
  return _msg;
}

// .google.cloud.speech.v2.DeletePhraseSetRequest delete_phrase_set_request = 19;
inline bool OperationMetadata::_internal_has_delete_phrase_set_request() const {
  return request_case() == kDeletePhraseSetRequest;
}
inline bool OperationMetadata::has_delete_phrase_set_request() const {
  return _internal_has_delete_phrase_set_request();
}
inline void OperationMetadata::set_has_delete_phrase_set_request() {
  _impl_._oneof_case_[0] = kDeletePhraseSetRequest;
}
inline void OperationMetadata::clear_delete_phrase_set_request() {
  if (_internal_has_delete_phrase_set_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.delete_phrase_set_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::DeletePhraseSetRequest* OperationMetadata::release_delete_phrase_set_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.delete_phrase_set_request)
  if (_internal_has_delete_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeletePhraseSetRequest* temp = _impl_.request_.delete_phrase_set_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.delete_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::DeletePhraseSetRequest& OperationMetadata::_internal_delete_phrase_set_request() const {
  return _internal_has_delete_phrase_set_request()
      ? *_impl_.request_.delete_phrase_set_request_
      : reinterpret_cast< ::google::cloud::speech::v2::DeletePhraseSetRequest&>(::google::cloud::speech::v2::_DeletePhraseSetRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::DeletePhraseSetRequest& OperationMetadata::delete_phrase_set_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.delete_phrase_set_request)
  return _internal_delete_phrase_set_request();
}
inline ::google::cloud::speech::v2::DeletePhraseSetRequest* OperationMetadata::unsafe_arena_release_delete_phrase_set_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.delete_phrase_set_request)
  if (_internal_has_delete_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::DeletePhraseSetRequest* temp = _impl_.request_.delete_phrase_set_request_;
    _impl_.request_.delete_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_delete_phrase_set_request(::google::cloud::speech::v2::DeletePhraseSetRequest* delete_phrase_set_request) {
  clear_request();
  if (delete_phrase_set_request) {
    set_has_delete_phrase_set_request();
    _impl_.request_.delete_phrase_set_request_ = delete_phrase_set_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.delete_phrase_set_request)
}
inline ::google::cloud::speech::v2::DeletePhraseSetRequest* OperationMetadata::_internal_mutable_delete_phrase_set_request() {
  if (!_internal_has_delete_phrase_set_request()) {
    clear_request();
    set_has_delete_phrase_set_request();
    _impl_.request_.delete_phrase_set_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::DeletePhraseSetRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.delete_phrase_set_request_;
}
inline ::google::cloud::speech::v2::DeletePhraseSetRequest* OperationMetadata::mutable_delete_phrase_set_request() {
  ::google::cloud::speech::v2::DeletePhraseSetRequest* _msg = _internal_mutable_delete_phrase_set_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.delete_phrase_set_request)
  return _msg;
}

// .google.cloud.speech.v2.UndeletePhraseSetRequest undelete_phrase_set_request = 20;
inline bool OperationMetadata::_internal_has_undelete_phrase_set_request() const {
  return request_case() == kUndeletePhraseSetRequest;
}
inline bool OperationMetadata::has_undelete_phrase_set_request() const {
  return _internal_has_undelete_phrase_set_request();
}
inline void OperationMetadata::set_has_undelete_phrase_set_request() {
  _impl_._oneof_case_[0] = kUndeletePhraseSetRequest;
}
inline void OperationMetadata::clear_undelete_phrase_set_request() {
  if (_internal_has_undelete_phrase_set_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.undelete_phrase_set_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UndeletePhraseSetRequest* OperationMetadata::release_undelete_phrase_set_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.undelete_phrase_set_request)
  if (_internal_has_undelete_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeletePhraseSetRequest* temp = _impl_.request_.undelete_phrase_set_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.undelete_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UndeletePhraseSetRequest& OperationMetadata::_internal_undelete_phrase_set_request() const {
  return _internal_has_undelete_phrase_set_request()
      ? *_impl_.request_.undelete_phrase_set_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UndeletePhraseSetRequest&>(::google::cloud::speech::v2::_UndeletePhraseSetRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UndeletePhraseSetRequest& OperationMetadata::undelete_phrase_set_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.undelete_phrase_set_request)
  return _internal_undelete_phrase_set_request();
}
inline ::google::cloud::speech::v2::UndeletePhraseSetRequest* OperationMetadata::unsafe_arena_release_undelete_phrase_set_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.undelete_phrase_set_request)
  if (_internal_has_undelete_phrase_set_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UndeletePhraseSetRequest* temp = _impl_.request_.undelete_phrase_set_request_;
    _impl_.request_.undelete_phrase_set_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_undelete_phrase_set_request(::google::cloud::speech::v2::UndeletePhraseSetRequest* undelete_phrase_set_request) {
  clear_request();
  if (undelete_phrase_set_request) {
    set_has_undelete_phrase_set_request();
    _impl_.request_.undelete_phrase_set_request_ = undelete_phrase_set_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.undelete_phrase_set_request)
}
inline ::google::cloud::speech::v2::UndeletePhraseSetRequest* OperationMetadata::_internal_mutable_undelete_phrase_set_request() {
  if (!_internal_has_undelete_phrase_set_request()) {
    clear_request();
    set_has_undelete_phrase_set_request();
    _impl_.request_.undelete_phrase_set_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UndeletePhraseSetRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.undelete_phrase_set_request_;
}
inline ::google::cloud::speech::v2::UndeletePhraseSetRequest* OperationMetadata::mutable_undelete_phrase_set_request() {
  ::google::cloud::speech::v2::UndeletePhraseSetRequest* _msg = _internal_mutable_undelete_phrase_set_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.undelete_phrase_set_request)
  return _msg;
}

// .google.cloud.speech.v2.UpdateConfigRequest update_config_request = 21;
inline bool OperationMetadata::_internal_has_update_config_request() const {
  return request_case() == kUpdateConfigRequest;
}
inline bool OperationMetadata::has_update_config_request() const {
  return _internal_has_update_config_request();
}
inline void OperationMetadata::set_has_update_config_request() {
  _impl_._oneof_case_[0] = kUpdateConfigRequest;
}
inline void OperationMetadata::clear_update_config_request() {
  if (_internal_has_update_config_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.update_config_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::speech::v2::UpdateConfigRequest* OperationMetadata::release_update_config_request() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.update_config_request)
  if (_internal_has_update_config_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateConfigRequest* temp = _impl_.request_.update_config_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.update_config_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::UpdateConfigRequest& OperationMetadata::_internal_update_config_request() const {
  return _internal_has_update_config_request()
      ? *_impl_.request_.update_config_request_
      : reinterpret_cast< ::google::cloud::speech::v2::UpdateConfigRequest&>(::google::cloud::speech::v2::_UpdateConfigRequest_default_instance_);
}
inline const ::google::cloud::speech::v2::UpdateConfigRequest& OperationMetadata::update_config_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.update_config_request)
  return _internal_update_config_request();
}
inline ::google::cloud::speech::v2::UpdateConfigRequest* OperationMetadata::unsafe_arena_release_update_config_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.update_config_request)
  if (_internal_has_update_config_request()) {
    clear_has_request();
    ::google::cloud::speech::v2::UpdateConfigRequest* temp = _impl_.request_.update_config_request_;
    _impl_.request_.update_config_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_update_config_request(::google::cloud::speech::v2::UpdateConfigRequest* update_config_request) {
  clear_request();
  if (update_config_request) {
    set_has_update_config_request();
    _impl_.request_.update_config_request_ = update_config_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.update_config_request)
}
inline ::google::cloud::speech::v2::UpdateConfigRequest* OperationMetadata::_internal_mutable_update_config_request() {
  if (!_internal_has_update_config_request()) {
    clear_request();
    set_has_update_config_request();
    _impl_.request_.update_config_request_ = CreateMaybeMessage< ::google::cloud::speech::v2::UpdateConfigRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.update_config_request_;
}
inline ::google::cloud::speech::v2::UpdateConfigRequest* OperationMetadata::mutable_update_config_request() {
  ::google::cloud::speech::v2::UpdateConfigRequest* _msg = _internal_mutable_update_config_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.update_config_request)
  return _msg;
}

// int32 progress_percent = 22;
inline void OperationMetadata::clear_progress_percent() {
  _impl_.progress_percent_ = 0;
}
inline int32_t OperationMetadata::_internal_progress_percent() const {
  return _impl_.progress_percent_;
}
inline int32_t OperationMetadata::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.progress_percent)
  return _internal_progress_percent();
}
inline void OperationMetadata::_internal_set_progress_percent(int32_t value) {
  
  _impl_.progress_percent_ = value;
}
inline void OperationMetadata::set_progress_percent(int32_t value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.OperationMetadata.progress_percent)
}

// .google.cloud.speech.v2.BatchRecognizeMetadata batch_recognize_metadata = 23;
inline bool OperationMetadata::_internal_has_batch_recognize_metadata() const {
  return metadata_case() == kBatchRecognizeMetadata;
}
inline bool OperationMetadata::has_batch_recognize_metadata() const {
  return _internal_has_batch_recognize_metadata();
}
inline void OperationMetadata::set_has_batch_recognize_metadata() {
  _impl_._oneof_case_[1] = kBatchRecognizeMetadata;
}
inline void OperationMetadata::clear_batch_recognize_metadata() {
  if (_internal_has_batch_recognize_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.metadata_.batch_recognize_metadata_;
    }
    clear_has_metadata();
  }
}
inline ::google::cloud::speech::v2::BatchRecognizeMetadata* OperationMetadata::release_batch_recognize_metadata() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.OperationMetadata.batch_recognize_metadata)
  if (_internal_has_batch_recognize_metadata()) {
    clear_has_metadata();
    ::google::cloud::speech::v2::BatchRecognizeMetadata* temp = _impl_.metadata_.batch_recognize_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.metadata_.batch_recognize_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::BatchRecognizeMetadata& OperationMetadata::_internal_batch_recognize_metadata() const {
  return _internal_has_batch_recognize_metadata()
      ? *_impl_.metadata_.batch_recognize_metadata_
      : reinterpret_cast< ::google::cloud::speech::v2::BatchRecognizeMetadata&>(::google::cloud::speech::v2::_BatchRecognizeMetadata_default_instance_);
}
inline const ::google::cloud::speech::v2::BatchRecognizeMetadata& OperationMetadata::batch_recognize_metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.OperationMetadata.batch_recognize_metadata)
  return _internal_batch_recognize_metadata();
}
inline ::google::cloud::speech::v2::BatchRecognizeMetadata* OperationMetadata::unsafe_arena_release_batch_recognize_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.OperationMetadata.batch_recognize_metadata)
  if (_internal_has_batch_recognize_metadata()) {
    clear_has_metadata();
    ::google::cloud::speech::v2::BatchRecognizeMetadata* temp = _impl_.metadata_.batch_recognize_metadata_;
    _impl_.metadata_.batch_recognize_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationMetadata::unsafe_arena_set_allocated_batch_recognize_metadata(::google::cloud::speech::v2::BatchRecognizeMetadata* batch_recognize_metadata) {
  clear_metadata();
  if (batch_recognize_metadata) {
    set_has_batch_recognize_metadata();
    _impl_.metadata_.batch_recognize_metadata_ = batch_recognize_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.OperationMetadata.batch_recognize_metadata)
}
inline ::google::cloud::speech::v2::BatchRecognizeMetadata* OperationMetadata::_internal_mutable_batch_recognize_metadata() {
  if (!_internal_has_batch_recognize_metadata()) {
    clear_metadata();
    set_has_batch_recognize_metadata();
    _impl_.metadata_.batch_recognize_metadata_ = CreateMaybeMessage< ::google::cloud::speech::v2::BatchRecognizeMetadata >(GetArenaForAllocation());
  }
  return _impl_.metadata_.batch_recognize_metadata_;
}
inline ::google::cloud::speech::v2::BatchRecognizeMetadata* OperationMetadata::mutable_batch_recognize_metadata() {
  ::google::cloud::speech::v2::BatchRecognizeMetadata* _msg = _internal_mutable_batch_recognize_metadata();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.OperationMetadata.batch_recognize_metadata)
  return _msg;
}

inline bool OperationMetadata::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void OperationMetadata::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline bool OperationMetadata::has_metadata() const {
  return metadata_case() != METADATA_NOT_SET;
}
inline void OperationMetadata::clear_has_metadata() {
  _impl_._oneof_case_[1] = METADATA_NOT_SET;
}
inline OperationMetadata::RequestCase OperationMetadata::request_case() const {
  return OperationMetadata::RequestCase(_impl_._oneof_case_[0]);
}
inline OperationMetadata::MetadataCase OperationMetadata::metadata_case() const {
  return OperationMetadata::MetadataCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ListRecognizersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListRecognizersRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListRecognizersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRecognizersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListRecognizersRequest.parent)
}
inline std::string* ListRecognizersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListRecognizersRequest.parent)
  return _s;
}
inline const std::string& ListRecognizersRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListRecognizersRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRecognizersRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRecognizersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListRecognizersRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListRecognizersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListRecognizersRequest.parent)
}

// int32 page_size = 2;
inline void ListRecognizersRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListRecognizersRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListRecognizersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersRequest.page_size)
  return _internal_page_size();
}
inline void ListRecognizersRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListRecognizersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListRecognizersRequest.page_size)
}

// string page_token = 3;
inline void ListRecognizersRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListRecognizersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRecognizersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListRecognizersRequest.page_token)
}
inline std::string* ListRecognizersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListRecognizersRequest.page_token)
  return _s;
}
inline const std::string& ListRecognizersRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListRecognizersRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRecognizersRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRecognizersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListRecognizersRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListRecognizersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListRecognizersRequest.page_token)
}

// bool show_deleted = 4;
inline void ListRecognizersRequest::clear_show_deleted() {
  _impl_.show_deleted_ = false;
}
inline bool ListRecognizersRequest::_internal_show_deleted() const {
  return _impl_.show_deleted_;
}
inline bool ListRecognizersRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersRequest.show_deleted)
  return _internal_show_deleted();
}
inline void ListRecognizersRequest::_internal_set_show_deleted(bool value) {
  
  _impl_.show_deleted_ = value;
}
inline void ListRecognizersRequest::set_show_deleted(bool value) {
  _internal_set_show_deleted(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListRecognizersRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListRecognizersResponse

// repeated .google.cloud.speech.v2.Recognizer recognizers = 1;
inline int ListRecognizersResponse::_internal_recognizers_size() const {
  return _impl_.recognizers_.size();
}
inline int ListRecognizersResponse::recognizers_size() const {
  return _internal_recognizers_size();
}
inline void ListRecognizersResponse::clear_recognizers() {
  _impl_.recognizers_.Clear();
}
inline ::google::cloud::speech::v2::Recognizer* ListRecognizersResponse::mutable_recognizers(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListRecognizersResponse.recognizers)
  return _impl_.recognizers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::Recognizer >*
ListRecognizersResponse::mutable_recognizers() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.ListRecognizersResponse.recognizers)
  return &_impl_.recognizers_;
}
inline const ::google::cloud::speech::v2::Recognizer& ListRecognizersResponse::_internal_recognizers(int index) const {
  return _impl_.recognizers_.Get(index);
}
inline const ::google::cloud::speech::v2::Recognizer& ListRecognizersResponse::recognizers(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersResponse.recognizers)
  return _internal_recognizers(index);
}
inline ::google::cloud::speech::v2::Recognizer* ListRecognizersResponse::_internal_add_recognizers() {
  return _impl_.recognizers_.Add();
}
inline ::google::cloud::speech::v2::Recognizer* ListRecognizersResponse::add_recognizers() {
  ::google::cloud::speech::v2::Recognizer* _add = _internal_add_recognizers();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.ListRecognizersResponse.recognizers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::Recognizer >&
ListRecognizersResponse::recognizers() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.ListRecognizersResponse.recognizers)
  return _impl_.recognizers_;
}

// string next_page_token = 2;
inline void ListRecognizersResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListRecognizersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListRecognizersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRecognizersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListRecognizersResponse.next_page_token)
}
inline std::string* ListRecognizersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListRecognizersResponse.next_page_token)
  return _s;
}
inline const std::string& ListRecognizersResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListRecognizersResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRecognizersResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRecognizersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListRecognizersResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListRecognizersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListRecognizersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetRecognizerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetRecognizerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetRecognizerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.GetRecognizerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecognizerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.GetRecognizerRequest.name)
}
inline std::string* GetRecognizerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.GetRecognizerRequest.name)
  return _s;
}
inline const std::string& GetRecognizerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetRecognizerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecognizerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecognizerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.GetRecognizerRequest.name)
  return _impl_.name_.Release();
}
inline void GetRecognizerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.GetRecognizerRequest.name)
}

// -------------------------------------------------------------------

// UpdateRecognizerRequest

// .google.cloud.speech.v2.Recognizer recognizer = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateRecognizerRequest::_internal_has_recognizer() const {
  return this != internal_default_instance() && _impl_.recognizer_ != nullptr;
}
inline bool UpdateRecognizerRequest::has_recognizer() const {
  return _internal_has_recognizer();
}
inline void UpdateRecognizerRequest::clear_recognizer() {
  if (GetArenaForAllocation() == nullptr && _impl_.recognizer_ != nullptr) {
    delete _impl_.recognizer_;
  }
  _impl_.recognizer_ = nullptr;
}
inline const ::google::cloud::speech::v2::Recognizer& UpdateRecognizerRequest::_internal_recognizer() const {
  const ::google::cloud::speech::v2::Recognizer* p = _impl_.recognizer_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::Recognizer&>(
      ::google::cloud::speech::v2::_Recognizer_default_instance_);
}
inline const ::google::cloud::speech::v2::Recognizer& UpdateRecognizerRequest::recognizer() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateRecognizerRequest.recognizer)
  return _internal_recognizer();
}
inline void UpdateRecognizerRequest::unsafe_arena_set_allocated_recognizer(
    ::google::cloud::speech::v2::Recognizer* recognizer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recognizer_);
  }
  _impl_.recognizer_ = recognizer;
  if (recognizer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateRecognizerRequest.recognizer)
}
inline ::google::cloud::speech::v2::Recognizer* UpdateRecognizerRequest::release_recognizer() {
  
  ::google::cloud::speech::v2::Recognizer* temp = _impl_.recognizer_;
  _impl_.recognizer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::Recognizer* UpdateRecognizerRequest::unsafe_arena_release_recognizer() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateRecognizerRequest.recognizer)
  
  ::google::cloud::speech::v2::Recognizer* temp = _impl_.recognizer_;
  _impl_.recognizer_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::Recognizer* UpdateRecognizerRequest::_internal_mutable_recognizer() {
  
  if (_impl_.recognizer_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::Recognizer>(GetArenaForAllocation());
    _impl_.recognizer_ = p;
  }
  return _impl_.recognizer_;
}
inline ::google::cloud::speech::v2::Recognizer* UpdateRecognizerRequest::mutable_recognizer() {
  ::google::cloud::speech::v2::Recognizer* _msg = _internal_mutable_recognizer();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateRecognizerRequest.recognizer)
  return _msg;
}
inline void UpdateRecognizerRequest::set_allocated_recognizer(::google::cloud::speech::v2::Recognizer* recognizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recognizer_;
  }
  if (recognizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recognizer);
    if (message_arena != submessage_arena) {
      recognizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognizer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recognizer_ = recognizer;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateRecognizerRequest.recognizer)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateRecognizerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateRecognizerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRecognizerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRecognizerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateRecognizerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateRecognizerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateRecognizerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRecognizerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRecognizerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateRecognizerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRecognizerRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRecognizerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateRecognizerRequest.update_mask)
  return _msg;
}
inline void UpdateRecognizerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateRecognizerRequest.update_mask)
}

// bool validate_only = 4;
inline void UpdateRecognizerRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UpdateRecognizerRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UpdateRecognizerRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateRecognizerRequest.validate_only)
  return _internal_validate_only();
}
inline void UpdateRecognizerRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UpdateRecognizerRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UpdateRecognizerRequest.validate_only)
}

// -------------------------------------------------------------------

// DeleteRecognizerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteRecognizerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteRecognizerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteRecognizerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecognizerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteRecognizerRequest.name)
}
inline std::string* DeleteRecognizerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeleteRecognizerRequest.name)
  return _s;
}
inline const std::string& DeleteRecognizerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteRecognizerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecognizerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecognizerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeleteRecognizerRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteRecognizerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeleteRecognizerRequest.name)
}

// bool validate_only = 2;
inline void DeleteRecognizerRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool DeleteRecognizerRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool DeleteRecognizerRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteRecognizerRequest.validate_only)
  return _internal_validate_only();
}
inline void DeleteRecognizerRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void DeleteRecognizerRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteRecognizerRequest.validate_only)
}

// bool allow_missing = 4;
inline void DeleteRecognizerRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteRecognizerRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteRecognizerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteRecognizerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteRecognizerRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteRecognizerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteRecognizerRequest.allow_missing)
}

// string etag = 3;
inline void DeleteRecognizerRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& DeleteRecognizerRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteRecognizerRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecognizerRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteRecognizerRequest.etag)
}
inline std::string* DeleteRecognizerRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeleteRecognizerRequest.etag)
  return _s;
}
inline const std::string& DeleteRecognizerRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void DeleteRecognizerRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecognizerRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecognizerRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeleteRecognizerRequest.etag)
  return _impl_.etag_.Release();
}
inline void DeleteRecognizerRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeleteRecognizerRequest.etag)
}

// -------------------------------------------------------------------

// UndeleteRecognizerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UndeleteRecognizerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UndeleteRecognizerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteRecognizerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeleteRecognizerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteRecognizerRequest.name)
}
inline std::string* UndeleteRecognizerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeleteRecognizerRequest.name)
  return _s;
}
inline const std::string& UndeleteRecognizerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UndeleteRecognizerRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeleteRecognizerRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeleteRecognizerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeleteRecognizerRequest.name)
  return _impl_.name_.Release();
}
inline void UndeleteRecognizerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeleteRecognizerRequest.name)
}

// bool validate_only = 3;
inline void UndeleteRecognizerRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UndeleteRecognizerRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UndeleteRecognizerRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteRecognizerRequest.validate_only)
  return _internal_validate_only();
}
inline void UndeleteRecognizerRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UndeleteRecognizerRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteRecognizerRequest.validate_only)
}

// string etag = 4;
inline void UndeleteRecognizerRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& UndeleteRecognizerRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteRecognizerRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeleteRecognizerRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteRecognizerRequest.etag)
}
inline std::string* UndeleteRecognizerRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeleteRecognizerRequest.etag)
  return _s;
}
inline const std::string& UndeleteRecognizerRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void UndeleteRecognizerRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeleteRecognizerRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeleteRecognizerRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeleteRecognizerRequest.etag)
  return _impl_.etag_.Release();
}
inline void UndeleteRecognizerRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeleteRecognizerRequest.etag)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Recognizer

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Recognizer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Recognizer::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.name)
}
inline std::string* Recognizer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.name)
  return _s;
}
inline const std::string& Recognizer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Recognizer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.name)
  return _impl_.name_.Release();
}
inline void Recognizer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.name)
}

// string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Recognizer::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Recognizer::uid() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.uid)
}
inline std::string* Recognizer::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.uid)
  return _s;
}
inline const std::string& Recognizer::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void Recognizer::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_uid() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.uid)
  return _impl_.uid_.Release();
}
inline void Recognizer::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.uid)
}

// string display_name = 3;
inline void Recognizer::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Recognizer::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.display_name)
}
inline std::string* Recognizer::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.display_name)
  return _s;
}
inline const std::string& Recognizer::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Recognizer::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.display_name)
  return _impl_.display_name_.Release();
}
inline void Recognizer::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.display_name)
}

// string model = 4 [(.google.api.field_behavior) = REQUIRED];
inline void Recognizer::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& Recognizer::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.model)
}
inline std::string* Recognizer::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.model)
  return _s;
}
inline const std::string& Recognizer::_internal_model() const {
  return _impl_.model_.Get();
}
inline void Recognizer::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.model)
  return _impl_.model_.Release();
}
inline void Recognizer::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.model)
}

// repeated string language_codes = 17 [(.google.api.field_behavior) = REQUIRED];
inline int Recognizer::_internal_language_codes_size() const {
  return _impl_.language_codes_.size();
}
inline int Recognizer::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void Recognizer::clear_language_codes() {
  _impl_.language_codes_.Clear();
}
inline std::string* Recognizer::add_language_codes() {
  std::string* _s = _internal_add_language_codes();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v2.Recognizer.language_codes)
  return _s;
}
inline const std::string& Recognizer::_internal_language_codes(int index) const {
  return _impl_.language_codes_.Get(index);
}
inline const std::string& Recognizer::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.language_codes)
  return _internal_language_codes(index);
}
inline std::string* Recognizer::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.language_codes)
  return _impl_.language_codes_.Mutable(index);
}
inline void Recognizer::set_language_codes(int index, const std::string& value) {
  _impl_.language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::set_language_codes(int index, std::string&& value) {
  _impl_.language_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::set_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::set_language_codes(int index, const char* value, size_t size) {
  _impl_.language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v2.Recognizer.language_codes)
}
inline std::string* Recognizer::_internal_add_language_codes() {
  return _impl_.language_codes_.Add();
}
inline void Recognizer::add_language_codes(const std::string& value) {
  _impl_.language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::add_language_codes(std::string&& value) {
  _impl_.language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::add_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.speech.v2.Recognizer.language_codes)
}
inline void Recognizer::add_language_codes(const char* value, size_t size) {
  _impl_.language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.speech.v2.Recognizer.language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Recognizer::language_codes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.Recognizer.language_codes)
  return _impl_.language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Recognizer::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.Recognizer.language_codes)
  return &_impl_.language_codes_;
}

// .google.cloud.speech.v2.RecognitionConfig default_recognition_config = 6;
inline bool Recognizer::_internal_has_default_recognition_config() const {
  return this != internal_default_instance() && _impl_.default_recognition_config_ != nullptr;
}
inline bool Recognizer::has_default_recognition_config() const {
  return _internal_has_default_recognition_config();
}
inline void Recognizer::clear_default_recognition_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_recognition_config_ != nullptr) {
    delete _impl_.default_recognition_config_;
  }
  _impl_.default_recognition_config_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionConfig& Recognizer::_internal_default_recognition_config() const {
  const ::google::cloud::speech::v2::RecognitionConfig* p = _impl_.default_recognition_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionConfig&>(
      ::google::cloud::speech::v2::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionConfig& Recognizer::default_recognition_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.default_recognition_config)
  return _internal_default_recognition_config();
}
inline void Recognizer::unsafe_arena_set_allocated_default_recognition_config(
    ::google::cloud::speech::v2::RecognitionConfig* default_recognition_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_recognition_config_);
  }
  _impl_.default_recognition_config_ = default_recognition_config;
  if (default_recognition_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Recognizer.default_recognition_config)
}
inline ::google::cloud::speech::v2::RecognitionConfig* Recognizer::release_default_recognition_config() {
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.default_recognition_config_;
  _impl_.default_recognition_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* Recognizer::unsafe_arena_release_default_recognition_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.default_recognition_config)
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.default_recognition_config_;
  _impl_.default_recognition_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* Recognizer::_internal_mutable_default_recognition_config() {
  
  if (_impl_.default_recognition_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(GetArenaForAllocation());
    _impl_.default_recognition_config_ = p;
  }
  return _impl_.default_recognition_config_;
}
inline ::google::cloud::speech::v2::RecognitionConfig* Recognizer::mutable_default_recognition_config() {
  ::google::cloud::speech::v2::RecognitionConfig* _msg = _internal_mutable_default_recognition_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.default_recognition_config)
  return _msg;
}
inline void Recognizer::set_allocated_default_recognition_config(::google::cloud::speech::v2::RecognitionConfig* default_recognition_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_recognition_config_;
  }
  if (default_recognition_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_recognition_config);
    if (message_arena != submessage_arena) {
      default_recognition_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_recognition_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_recognition_config_ = default_recognition_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.default_recognition_config)
}

// map<string, string> annotations = 7;
inline int Recognizer::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int Recognizer::annotations_size() const {
  return _internal_annotations_size();
}
inline void Recognizer::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Recognizer::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Recognizer::annotations() const {
  // @@protoc_insertion_point(field_map:google.cloud.speech.v2.Recognizer.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Recognizer::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Recognizer::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.speech.v2.Recognizer.annotations)
  return _internal_mutable_annotations();
}

// .google.cloud.speech.v2.Recognizer.State state = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Recognizer::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::speech::v2::Recognizer_State Recognizer::_internal_state() const {
  return static_cast< ::google::cloud::speech::v2::Recognizer_State >(_impl_.state_);
}
inline ::google::cloud::speech::v2::Recognizer_State Recognizer::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.state)
  return _internal_state();
}
inline void Recognizer::_internal_set_state(::google::cloud::speech::v2::Recognizer_State value) {
  
  _impl_.state_ = value;
}
inline void Recognizer::set_state(::google::cloud::speech::v2::Recognizer_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.state)
}

// .google.protobuf.Timestamp create_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Recognizer::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Recognizer::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.create_time)
  return _internal_create_time();
}
inline void Recognizer::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Recognizer.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.create_time)
  return _msg;
}
inline void Recognizer::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.create_time)
}

// .google.protobuf.Timestamp update_time = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Recognizer::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Recognizer::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.update_time)
  return _internal_update_time();
}
inline void Recognizer::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Recognizer.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.update_time)
  return _msg;
}
inline void Recognizer::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.update_time)
}

// .google.protobuf.Timestamp delete_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Recognizer::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool Recognizer::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::delete_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.delete_time)
  return _internal_delete_time();
}
inline void Recognizer::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Recognizer.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.delete_time)
  return _msg;
}
inline void Recognizer::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.delete_time)
}

// .google.protobuf.Timestamp expire_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Recognizer::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool Recognizer::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Recognizer::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.expire_time)
  return _internal_expire_time();
}
inline void Recognizer::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Recognizer.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Recognizer::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.expire_time)
  return _msg;
}
inline void Recognizer::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.expire_time)
}

// string etag = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Recognizer::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Recognizer::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.etag)
}
inline std::string* Recognizer::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.etag)
  return _s;
}
inline const std::string& Recognizer::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Recognizer::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.etag)
  return _impl_.etag_.Release();
}
inline void Recognizer::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.etag)
}

// bool reconciling = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Recognizer::clear_reconciling() {
  _impl_.reconciling_ = false;
}
inline bool Recognizer::_internal_reconciling() const {
  return _impl_.reconciling_;
}
inline bool Recognizer::reconciling() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.reconciling)
  return _internal_reconciling();
}
inline void Recognizer::_internal_set_reconciling(bool value) {
  
  _impl_.reconciling_ = value;
}
inline void Recognizer::set_reconciling(bool value) {
  _internal_set_reconciling(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.reconciling)
}

// string kms_key_name = 15 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void Recognizer::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& Recognizer::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.kms_key_name)
}
inline std::string* Recognizer::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.kms_key_name)
  return _s;
}
inline const std::string& Recognizer::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void Recognizer::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void Recognizer::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.kms_key_name)
}

// string kms_key_version_name = 16 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void Recognizer::clear_kms_key_version_name() {
  _impl_.kms_key_version_name_.ClearToEmpty();
}
inline const std::string& Recognizer::kms_key_version_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Recognizer.kms_key_version_name)
  return _internal_kms_key_version_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recognizer::set_kms_key_version_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_version_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Recognizer.kms_key_version_name)
}
inline std::string* Recognizer::mutable_kms_key_version_name() {
  std::string* _s = _internal_mutable_kms_key_version_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Recognizer.kms_key_version_name)
  return _s;
}
inline const std::string& Recognizer::_internal_kms_key_version_name() const {
  return _impl_.kms_key_version_name_.Get();
}
inline void Recognizer::_internal_set_kms_key_version_name(const std::string& value) {
  
  _impl_.kms_key_version_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Recognizer::_internal_mutable_kms_key_version_name() {
  
  return _impl_.kms_key_version_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Recognizer::release_kms_key_version_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Recognizer.kms_key_version_name)
  return _impl_.kms_key_version_name_.Release();
}
inline void Recognizer::set_allocated_kms_key_version_name(std::string* kms_key_version_name) {
  if (kms_key_version_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_version_name_.SetAllocated(kms_key_version_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_version_name_.IsDefault()) {
    _impl_.kms_key_version_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Recognizer.kms_key_version_name)
}

// -------------------------------------------------------------------

// AutoDetectDecodingConfig

// -------------------------------------------------------------------

// ExplicitDecodingConfig

// .google.cloud.speech.v2.ExplicitDecodingConfig.AudioEncoding encoding = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ExplicitDecodingConfig::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding ExplicitDecodingConfig::_internal_encoding() const {
  return static_cast< ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding >(_impl_.encoding_);
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding ExplicitDecodingConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ExplicitDecodingConfig.encoding)
  return _internal_encoding();
}
inline void ExplicitDecodingConfig::_internal_set_encoding(::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding value) {
  
  _impl_.encoding_ = value;
}
inline void ExplicitDecodingConfig::set_encoding(::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ExplicitDecodingConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void ExplicitDecodingConfig::clear_sample_rate_hertz() {
  _impl_.sample_rate_hertz_ = 0;
}
inline int32_t ExplicitDecodingConfig::_internal_sample_rate_hertz() const {
  return _impl_.sample_rate_hertz_;
}
inline int32_t ExplicitDecodingConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ExplicitDecodingConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void ExplicitDecodingConfig::_internal_set_sample_rate_hertz(int32_t value) {
  
  _impl_.sample_rate_hertz_ = value;
}
inline void ExplicitDecodingConfig::set_sample_rate_hertz(int32_t value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ExplicitDecodingConfig.sample_rate_hertz)
}

// int32 audio_channel_count = 3;
inline void ExplicitDecodingConfig::clear_audio_channel_count() {
  _impl_.audio_channel_count_ = 0;
}
inline int32_t ExplicitDecodingConfig::_internal_audio_channel_count() const {
  return _impl_.audio_channel_count_;
}
inline int32_t ExplicitDecodingConfig::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ExplicitDecodingConfig.audio_channel_count)
  return _internal_audio_channel_count();
}
inline void ExplicitDecodingConfig::_internal_set_audio_channel_count(int32_t value) {
  
  _impl_.audio_channel_count_ = value;
}
inline void ExplicitDecodingConfig::set_audio_channel_count(int32_t value) {
  _internal_set_audio_channel_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ExplicitDecodingConfig.audio_channel_count)
}

// -------------------------------------------------------------------

// SpeakerDiarizationConfig

// int32 min_speaker_count = 2 [(.google.api.field_behavior) = REQUIRED];
inline void SpeakerDiarizationConfig::clear_min_speaker_count() {
  _impl_.min_speaker_count_ = 0;
}
inline int32_t SpeakerDiarizationConfig::_internal_min_speaker_count() const {
  return _impl_.min_speaker_count_;
}
inline int32_t SpeakerDiarizationConfig::min_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeakerDiarizationConfig.min_speaker_count)
  return _internal_min_speaker_count();
}
inline void SpeakerDiarizationConfig::_internal_set_min_speaker_count(int32_t value) {
  
  _impl_.min_speaker_count_ = value;
}
inline void SpeakerDiarizationConfig::set_min_speaker_count(int32_t value) {
  _internal_set_min_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeakerDiarizationConfig.min_speaker_count)
}

// int32 max_speaker_count = 3 [(.google.api.field_behavior) = REQUIRED];
inline void SpeakerDiarizationConfig::clear_max_speaker_count() {
  _impl_.max_speaker_count_ = 0;
}
inline int32_t SpeakerDiarizationConfig::_internal_max_speaker_count() const {
  return _impl_.max_speaker_count_;
}
inline int32_t SpeakerDiarizationConfig::max_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeakerDiarizationConfig.max_speaker_count)
  return _internal_max_speaker_count();
}
inline void SpeakerDiarizationConfig::_internal_set_max_speaker_count(int32_t value) {
  
  _impl_.max_speaker_count_ = value;
}
inline void SpeakerDiarizationConfig::set_max_speaker_count(int32_t value) {
  _internal_set_max_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeakerDiarizationConfig.max_speaker_count)
}

// -------------------------------------------------------------------

// RecognitionFeatures

// bool profanity_filter = 1;
inline void RecognitionFeatures::clear_profanity_filter() {
  _impl_.profanity_filter_ = false;
}
inline bool RecognitionFeatures::_internal_profanity_filter() const {
  return _impl_.profanity_filter_;
}
inline bool RecognitionFeatures::profanity_filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.profanity_filter)
  return _internal_profanity_filter();
}
inline void RecognitionFeatures::_internal_set_profanity_filter(bool value) {
  
  _impl_.profanity_filter_ = value;
}
inline void RecognitionFeatures::set_profanity_filter(bool value) {
  _internal_set_profanity_filter(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.profanity_filter)
}

// bool enable_word_time_offsets = 2;
inline void RecognitionFeatures::clear_enable_word_time_offsets() {
  _impl_.enable_word_time_offsets_ = false;
}
inline bool RecognitionFeatures::_internal_enable_word_time_offsets() const {
  return _impl_.enable_word_time_offsets_;
}
inline bool RecognitionFeatures::enable_word_time_offsets() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.enable_word_time_offsets)
  return _internal_enable_word_time_offsets();
}
inline void RecognitionFeatures::_internal_set_enable_word_time_offsets(bool value) {
  
  _impl_.enable_word_time_offsets_ = value;
}
inline void RecognitionFeatures::set_enable_word_time_offsets(bool value) {
  _internal_set_enable_word_time_offsets(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.enable_word_time_offsets)
}

// bool enable_word_confidence = 3;
inline void RecognitionFeatures::clear_enable_word_confidence() {
  _impl_.enable_word_confidence_ = false;
}
inline bool RecognitionFeatures::_internal_enable_word_confidence() const {
  return _impl_.enable_word_confidence_;
}
inline bool RecognitionFeatures::enable_word_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.enable_word_confidence)
  return _internal_enable_word_confidence();
}
inline void RecognitionFeatures::_internal_set_enable_word_confidence(bool value) {
  
  _impl_.enable_word_confidence_ = value;
}
inline void RecognitionFeatures::set_enable_word_confidence(bool value) {
  _internal_set_enable_word_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.enable_word_confidence)
}

// bool enable_automatic_punctuation = 4;
inline void RecognitionFeatures::clear_enable_automatic_punctuation() {
  _impl_.enable_automatic_punctuation_ = false;
}
inline bool RecognitionFeatures::_internal_enable_automatic_punctuation() const {
  return _impl_.enable_automatic_punctuation_;
}
inline bool RecognitionFeatures::enable_automatic_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.enable_automatic_punctuation)
  return _internal_enable_automatic_punctuation();
}
inline void RecognitionFeatures::_internal_set_enable_automatic_punctuation(bool value) {
  
  _impl_.enable_automatic_punctuation_ = value;
}
inline void RecognitionFeatures::set_enable_automatic_punctuation(bool value) {
  _internal_set_enable_automatic_punctuation(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.enable_automatic_punctuation)
}

// bool enable_spoken_punctuation = 14;
inline void RecognitionFeatures::clear_enable_spoken_punctuation() {
  _impl_.enable_spoken_punctuation_ = false;
}
inline bool RecognitionFeatures::_internal_enable_spoken_punctuation() const {
  return _impl_.enable_spoken_punctuation_;
}
inline bool RecognitionFeatures::enable_spoken_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.enable_spoken_punctuation)
  return _internal_enable_spoken_punctuation();
}
inline void RecognitionFeatures::_internal_set_enable_spoken_punctuation(bool value) {
  
  _impl_.enable_spoken_punctuation_ = value;
}
inline void RecognitionFeatures::set_enable_spoken_punctuation(bool value) {
  _internal_set_enable_spoken_punctuation(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.enable_spoken_punctuation)
}

// bool enable_spoken_emojis = 15;
inline void RecognitionFeatures::clear_enable_spoken_emojis() {
  _impl_.enable_spoken_emojis_ = false;
}
inline bool RecognitionFeatures::_internal_enable_spoken_emojis() const {
  return _impl_.enable_spoken_emojis_;
}
inline bool RecognitionFeatures::enable_spoken_emojis() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.enable_spoken_emojis)
  return _internal_enable_spoken_emojis();
}
inline void RecognitionFeatures::_internal_set_enable_spoken_emojis(bool value) {
  
  _impl_.enable_spoken_emojis_ = value;
}
inline void RecognitionFeatures::set_enable_spoken_emojis(bool value) {
  _internal_set_enable_spoken_emojis(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.enable_spoken_emojis)
}

// .google.cloud.speech.v2.RecognitionFeatures.MultiChannelMode multi_channel_mode = 17;
inline void RecognitionFeatures::clear_multi_channel_mode() {
  _impl_.multi_channel_mode_ = 0;
}
inline ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode RecognitionFeatures::_internal_multi_channel_mode() const {
  return static_cast< ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode >(_impl_.multi_channel_mode_);
}
inline ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode RecognitionFeatures::multi_channel_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.multi_channel_mode)
  return _internal_multi_channel_mode();
}
inline void RecognitionFeatures::_internal_set_multi_channel_mode(::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode value) {
  
  _impl_.multi_channel_mode_ = value;
}
inline void RecognitionFeatures::set_multi_channel_mode(::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode value) {
  _internal_set_multi_channel_mode(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.multi_channel_mode)
}

// .google.cloud.speech.v2.SpeakerDiarizationConfig diarization_config = 9;
inline bool RecognitionFeatures::_internal_has_diarization_config() const {
  return this != internal_default_instance() && _impl_.diarization_config_ != nullptr;
}
inline bool RecognitionFeatures::has_diarization_config() const {
  return _internal_has_diarization_config();
}
inline void RecognitionFeatures::clear_diarization_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.diarization_config_ != nullptr) {
    delete _impl_.diarization_config_;
  }
  _impl_.diarization_config_ = nullptr;
}
inline const ::google::cloud::speech::v2::SpeakerDiarizationConfig& RecognitionFeatures::_internal_diarization_config() const {
  const ::google::cloud::speech::v2::SpeakerDiarizationConfig* p = _impl_.diarization_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::SpeakerDiarizationConfig&>(
      ::google::cloud::speech::v2::_SpeakerDiarizationConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::SpeakerDiarizationConfig& RecognitionFeatures::diarization_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.diarization_config)
  return _internal_diarization_config();
}
inline void RecognitionFeatures::unsafe_arena_set_allocated_diarization_config(
    ::google::cloud::speech::v2::SpeakerDiarizationConfig* diarization_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diarization_config_);
  }
  _impl_.diarization_config_ = diarization_config;
  if (diarization_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionFeatures.diarization_config)
}
inline ::google::cloud::speech::v2::SpeakerDiarizationConfig* RecognitionFeatures::release_diarization_config() {
  
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* temp = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::SpeakerDiarizationConfig* RecognitionFeatures::unsafe_arena_release_diarization_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionFeatures.diarization_config)
  
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* temp = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::SpeakerDiarizationConfig* RecognitionFeatures::_internal_mutable_diarization_config() {
  
  if (_impl_.diarization_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::SpeakerDiarizationConfig>(GetArenaForAllocation());
    _impl_.diarization_config_ = p;
  }
  return _impl_.diarization_config_;
}
inline ::google::cloud::speech::v2::SpeakerDiarizationConfig* RecognitionFeatures::mutable_diarization_config() {
  ::google::cloud::speech::v2::SpeakerDiarizationConfig* _msg = _internal_mutable_diarization_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionFeatures.diarization_config)
  return _msg;
}
inline void RecognitionFeatures::set_allocated_diarization_config(::google::cloud::speech::v2::SpeakerDiarizationConfig* diarization_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.diarization_config_;
  }
  if (diarization_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(diarization_config);
    if (message_arena != submessage_arena) {
      diarization_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diarization_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.diarization_config_ = diarization_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognitionFeatures.diarization_config)
}

// int32 max_alternatives = 16;
inline void RecognitionFeatures::clear_max_alternatives() {
  _impl_.max_alternatives_ = 0;
}
inline int32_t RecognitionFeatures::_internal_max_alternatives() const {
  return _impl_.max_alternatives_;
}
inline int32_t RecognitionFeatures::max_alternatives() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionFeatures.max_alternatives)
  return _internal_max_alternatives();
}
inline void RecognitionFeatures::_internal_set_max_alternatives(int32_t value) {
  
  _impl_.max_alternatives_ = value;
}
inline void RecognitionFeatures::set_max_alternatives(int32_t value) {
  _internal_set_max_alternatives(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognitionFeatures.max_alternatives)
}

// -------------------------------------------------------------------

// SpeechAdaptation_AdaptationPhraseSet

// string phrase_set = 1 [(.google.api.resource_reference) = {
inline bool SpeechAdaptation_AdaptationPhraseSet::_internal_has_phrase_set() const {
  return value_case() == kPhraseSet;
}
inline bool SpeechAdaptation_AdaptationPhraseSet::has_phrase_set() const {
  return _internal_has_phrase_set();
}
inline void SpeechAdaptation_AdaptationPhraseSet::set_has_phrase_set() {
  _impl_._oneof_case_[0] = kPhraseSet;
}
inline void SpeechAdaptation_AdaptationPhraseSet::clear_phrase_set() {
  if (_internal_has_phrase_set()) {
    _impl_.value_.phrase_set_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SpeechAdaptation_AdaptationPhraseSet::phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.phrase_set)
  return _internal_phrase_set();
}
template <typename ArgT0, typename... ArgT>
inline void SpeechAdaptation_AdaptationPhraseSet::set_phrase_set(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_phrase_set()) {
    clear_value();
    set_has_phrase_set();
    _impl_.value_.phrase_set_.InitDefault();
  }
  _impl_.value_.phrase_set_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.phrase_set)
}
inline std::string* SpeechAdaptation_AdaptationPhraseSet::mutable_phrase_set() {
  std::string* _s = _internal_mutable_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.phrase_set)
  return _s;
}
inline const std::string& SpeechAdaptation_AdaptationPhraseSet::_internal_phrase_set() const {
  if (_internal_has_phrase_set()) {
    return _impl_.value_.phrase_set_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SpeechAdaptation_AdaptationPhraseSet::_internal_set_phrase_set(const std::string& value) {
  if (!_internal_has_phrase_set()) {
    clear_value();
    set_has_phrase_set();
    _impl_.value_.phrase_set_.InitDefault();
  }
  _impl_.value_.phrase_set_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechAdaptation_AdaptationPhraseSet::_internal_mutable_phrase_set() {
  if (!_internal_has_phrase_set()) {
    clear_value();
    set_has_phrase_set();
    _impl_.value_.phrase_set_.InitDefault();
  }
  return _impl_.value_.phrase_set_.Mutable(      GetArenaForAllocation());
}
inline std::string* SpeechAdaptation_AdaptationPhraseSet::release_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.phrase_set)
  if (_internal_has_phrase_set()) {
    clear_has_value();
    return _impl_.value_.phrase_set_.Release();
  } else {
    return nullptr;
  }
}
inline void SpeechAdaptation_AdaptationPhraseSet::set_allocated_phrase_set(std::string* phrase_set) {
  if (has_value()) {
    clear_value();
  }
  if (phrase_set != nullptr) {
    set_has_phrase_set();
    _impl_.value_.phrase_set_.InitAllocated(phrase_set, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.phrase_set)
}

// .google.cloud.speech.v2.PhraseSet inline_phrase_set = 2;
inline bool SpeechAdaptation_AdaptationPhraseSet::_internal_has_inline_phrase_set() const {
  return value_case() == kInlinePhraseSet;
}
inline bool SpeechAdaptation_AdaptationPhraseSet::has_inline_phrase_set() const {
  return _internal_has_inline_phrase_set();
}
inline void SpeechAdaptation_AdaptationPhraseSet::set_has_inline_phrase_set() {
  _impl_._oneof_case_[0] = kInlinePhraseSet;
}
inline void SpeechAdaptation_AdaptationPhraseSet::clear_inline_phrase_set() {
  if (_internal_has_inline_phrase_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.inline_phrase_set_;
    }
    clear_has_value();
  }
}
inline ::google::cloud::speech::v2::PhraseSet* SpeechAdaptation_AdaptationPhraseSet::release_inline_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.inline_phrase_set)
  if (_internal_has_inline_phrase_set()) {
    clear_has_value();
    ::google::cloud::speech::v2::PhraseSet* temp = _impl_.value_.inline_phrase_set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.inline_phrase_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::PhraseSet& SpeechAdaptation_AdaptationPhraseSet::_internal_inline_phrase_set() const {
  return _internal_has_inline_phrase_set()
      ? *_impl_.value_.inline_phrase_set_
      : reinterpret_cast< ::google::cloud::speech::v2::PhraseSet&>(::google::cloud::speech::v2::_PhraseSet_default_instance_);
}
inline const ::google::cloud::speech::v2::PhraseSet& SpeechAdaptation_AdaptationPhraseSet::inline_phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.inline_phrase_set)
  return _internal_inline_phrase_set();
}
inline ::google::cloud::speech::v2::PhraseSet* SpeechAdaptation_AdaptationPhraseSet::unsafe_arena_release_inline_phrase_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.inline_phrase_set)
  if (_internal_has_inline_phrase_set()) {
    clear_has_value();
    ::google::cloud::speech::v2::PhraseSet* temp = _impl_.value_.inline_phrase_set_;
    _impl_.value_.inline_phrase_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SpeechAdaptation_AdaptationPhraseSet::unsafe_arena_set_allocated_inline_phrase_set(::google::cloud::speech::v2::PhraseSet* inline_phrase_set) {
  clear_value();
  if (inline_phrase_set) {
    set_has_inline_phrase_set();
    _impl_.value_.inline_phrase_set_ = inline_phrase_set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.inline_phrase_set)
}
inline ::google::cloud::speech::v2::PhraseSet* SpeechAdaptation_AdaptationPhraseSet::_internal_mutable_inline_phrase_set() {
  if (!_internal_has_inline_phrase_set()) {
    clear_value();
    set_has_inline_phrase_set();
    _impl_.value_.inline_phrase_set_ = CreateMaybeMessage< ::google::cloud::speech::v2::PhraseSet >(GetArenaForAllocation());
  }
  return _impl_.value_.inline_phrase_set_;
}
inline ::google::cloud::speech::v2::PhraseSet* SpeechAdaptation_AdaptationPhraseSet::mutable_inline_phrase_set() {
  ::google::cloud::speech::v2::PhraseSet* _msg = _internal_mutable_inline_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet.inline_phrase_set)
  return _msg;
}

inline bool SpeechAdaptation_AdaptationPhraseSet::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SpeechAdaptation_AdaptationPhraseSet::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline SpeechAdaptation_AdaptationPhraseSet::ValueCase SpeechAdaptation_AdaptationPhraseSet::value_case() const {
  return SpeechAdaptation_AdaptationPhraseSet::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SpeechAdaptation

// repeated .google.cloud.speech.v2.SpeechAdaptation.AdaptationPhraseSet phrase_sets = 1;
inline int SpeechAdaptation::_internal_phrase_sets_size() const {
  return _impl_.phrase_sets_.size();
}
inline int SpeechAdaptation::phrase_sets_size() const {
  return _internal_phrase_sets_size();
}
inline void SpeechAdaptation::clear_phrase_sets() {
  _impl_.phrase_sets_.Clear();
}
inline ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* SpeechAdaptation::mutable_phrase_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechAdaptation.phrase_sets)
  return _impl_.phrase_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet >*
SpeechAdaptation::mutable_phrase_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.SpeechAdaptation.phrase_sets)
  return &_impl_.phrase_sets_;
}
inline const ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet& SpeechAdaptation::_internal_phrase_sets(int index) const {
  return _impl_.phrase_sets_.Get(index);
}
inline const ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet& SpeechAdaptation::phrase_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechAdaptation.phrase_sets)
  return _internal_phrase_sets(index);
}
inline ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* SpeechAdaptation::_internal_add_phrase_sets() {
  return _impl_.phrase_sets_.Add();
}
inline ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* SpeechAdaptation::add_phrase_sets() {
  ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet* _add = _internal_add_phrase_sets();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.SpeechAdaptation.phrase_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechAdaptation_AdaptationPhraseSet >&
SpeechAdaptation::phrase_sets() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.SpeechAdaptation.phrase_sets)
  return _impl_.phrase_sets_;
}

// repeated .google.cloud.speech.v2.CustomClass custom_classes = 2;
inline int SpeechAdaptation::_internal_custom_classes_size() const {
  return _impl_.custom_classes_.size();
}
inline int SpeechAdaptation::custom_classes_size() const {
  return _internal_custom_classes_size();
}
inline void SpeechAdaptation::clear_custom_classes() {
  _impl_.custom_classes_.Clear();
}
inline ::google::cloud::speech::v2::CustomClass* SpeechAdaptation::mutable_custom_classes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechAdaptation.custom_classes)
  return _impl_.custom_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >*
SpeechAdaptation::mutable_custom_classes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.SpeechAdaptation.custom_classes)
  return &_impl_.custom_classes_;
}
inline const ::google::cloud::speech::v2::CustomClass& SpeechAdaptation::_internal_custom_classes(int index) const {
  return _impl_.custom_classes_.Get(index);
}
inline const ::google::cloud::speech::v2::CustomClass& SpeechAdaptation::custom_classes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechAdaptation.custom_classes)
  return _internal_custom_classes(index);
}
inline ::google::cloud::speech::v2::CustomClass* SpeechAdaptation::_internal_add_custom_classes() {
  return _impl_.custom_classes_.Add();
}
inline ::google::cloud::speech::v2::CustomClass* SpeechAdaptation::add_custom_classes() {
  ::google::cloud::speech::v2::CustomClass* _add = _internal_add_custom_classes();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.SpeechAdaptation.custom_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >&
SpeechAdaptation::custom_classes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.SpeechAdaptation.custom_classes)
  return _impl_.custom_classes_;
}

// -------------------------------------------------------------------

// RecognitionConfig

// .google.cloud.speech.v2.AutoDetectDecodingConfig auto_decoding_config = 7;
inline bool RecognitionConfig::_internal_has_auto_decoding_config() const {
  return decoding_config_case() == kAutoDecodingConfig;
}
inline bool RecognitionConfig::has_auto_decoding_config() const {
  return _internal_has_auto_decoding_config();
}
inline void RecognitionConfig::set_has_auto_decoding_config() {
  _impl_._oneof_case_[0] = kAutoDecodingConfig;
}
inline void RecognitionConfig::clear_auto_decoding_config() {
  if (_internal_has_auto_decoding_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.decoding_config_.auto_decoding_config_;
    }
    clear_has_decoding_config();
  }
}
inline ::google::cloud::speech::v2::AutoDetectDecodingConfig* RecognitionConfig::release_auto_decoding_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionConfig.auto_decoding_config)
  if (_internal_has_auto_decoding_config()) {
    clear_has_decoding_config();
    ::google::cloud::speech::v2::AutoDetectDecodingConfig* temp = _impl_.decoding_config_.auto_decoding_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.decoding_config_.auto_decoding_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::AutoDetectDecodingConfig& RecognitionConfig::_internal_auto_decoding_config() const {
  return _internal_has_auto_decoding_config()
      ? *_impl_.decoding_config_.auto_decoding_config_
      : reinterpret_cast< ::google::cloud::speech::v2::AutoDetectDecodingConfig&>(::google::cloud::speech::v2::_AutoDetectDecodingConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::AutoDetectDecodingConfig& RecognitionConfig::auto_decoding_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionConfig.auto_decoding_config)
  return _internal_auto_decoding_config();
}
inline ::google::cloud::speech::v2::AutoDetectDecodingConfig* RecognitionConfig::unsafe_arena_release_auto_decoding_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.RecognitionConfig.auto_decoding_config)
  if (_internal_has_auto_decoding_config()) {
    clear_has_decoding_config();
    ::google::cloud::speech::v2::AutoDetectDecodingConfig* temp = _impl_.decoding_config_.auto_decoding_config_;
    _impl_.decoding_config_.auto_decoding_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecognitionConfig::unsafe_arena_set_allocated_auto_decoding_config(::google::cloud::speech::v2::AutoDetectDecodingConfig* auto_decoding_config) {
  clear_decoding_config();
  if (auto_decoding_config) {
    set_has_auto_decoding_config();
    _impl_.decoding_config_.auto_decoding_config_ = auto_decoding_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionConfig.auto_decoding_config)
}
inline ::google::cloud::speech::v2::AutoDetectDecodingConfig* RecognitionConfig::_internal_mutable_auto_decoding_config() {
  if (!_internal_has_auto_decoding_config()) {
    clear_decoding_config();
    set_has_auto_decoding_config();
    _impl_.decoding_config_.auto_decoding_config_ = CreateMaybeMessage< ::google::cloud::speech::v2::AutoDetectDecodingConfig >(GetArenaForAllocation());
  }
  return _impl_.decoding_config_.auto_decoding_config_;
}
inline ::google::cloud::speech::v2::AutoDetectDecodingConfig* RecognitionConfig::mutable_auto_decoding_config() {
  ::google::cloud::speech::v2::AutoDetectDecodingConfig* _msg = _internal_mutable_auto_decoding_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionConfig.auto_decoding_config)
  return _msg;
}

// .google.cloud.speech.v2.ExplicitDecodingConfig explicit_decoding_config = 8;
inline bool RecognitionConfig::_internal_has_explicit_decoding_config() const {
  return decoding_config_case() == kExplicitDecodingConfig;
}
inline bool RecognitionConfig::has_explicit_decoding_config() const {
  return _internal_has_explicit_decoding_config();
}
inline void RecognitionConfig::set_has_explicit_decoding_config() {
  _impl_._oneof_case_[0] = kExplicitDecodingConfig;
}
inline void RecognitionConfig::clear_explicit_decoding_config() {
  if (_internal_has_explicit_decoding_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.decoding_config_.explicit_decoding_config_;
    }
    clear_has_decoding_config();
  }
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig* RecognitionConfig::release_explicit_decoding_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionConfig.explicit_decoding_config)
  if (_internal_has_explicit_decoding_config()) {
    clear_has_decoding_config();
    ::google::cloud::speech::v2::ExplicitDecodingConfig* temp = _impl_.decoding_config_.explicit_decoding_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.decoding_config_.explicit_decoding_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::ExplicitDecodingConfig& RecognitionConfig::_internal_explicit_decoding_config() const {
  return _internal_has_explicit_decoding_config()
      ? *_impl_.decoding_config_.explicit_decoding_config_
      : reinterpret_cast< ::google::cloud::speech::v2::ExplicitDecodingConfig&>(::google::cloud::speech::v2::_ExplicitDecodingConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::ExplicitDecodingConfig& RecognitionConfig::explicit_decoding_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionConfig.explicit_decoding_config)
  return _internal_explicit_decoding_config();
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig* RecognitionConfig::unsafe_arena_release_explicit_decoding_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.RecognitionConfig.explicit_decoding_config)
  if (_internal_has_explicit_decoding_config()) {
    clear_has_decoding_config();
    ::google::cloud::speech::v2::ExplicitDecodingConfig* temp = _impl_.decoding_config_.explicit_decoding_config_;
    _impl_.decoding_config_.explicit_decoding_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecognitionConfig::unsafe_arena_set_allocated_explicit_decoding_config(::google::cloud::speech::v2::ExplicitDecodingConfig* explicit_decoding_config) {
  clear_decoding_config();
  if (explicit_decoding_config) {
    set_has_explicit_decoding_config();
    _impl_.decoding_config_.explicit_decoding_config_ = explicit_decoding_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionConfig.explicit_decoding_config)
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig* RecognitionConfig::_internal_mutable_explicit_decoding_config() {
  if (!_internal_has_explicit_decoding_config()) {
    clear_decoding_config();
    set_has_explicit_decoding_config();
    _impl_.decoding_config_.explicit_decoding_config_ = CreateMaybeMessage< ::google::cloud::speech::v2::ExplicitDecodingConfig >(GetArenaForAllocation());
  }
  return _impl_.decoding_config_.explicit_decoding_config_;
}
inline ::google::cloud::speech::v2::ExplicitDecodingConfig* RecognitionConfig::mutable_explicit_decoding_config() {
  ::google::cloud::speech::v2::ExplicitDecodingConfig* _msg = _internal_mutable_explicit_decoding_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionConfig.explicit_decoding_config)
  return _msg;
}

// .google.cloud.speech.v2.RecognitionFeatures features = 2;
inline bool RecognitionConfig::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool RecognitionConfig::has_features() const {
  return _internal_has_features();
}
inline void RecognitionConfig::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionFeatures& RecognitionConfig::_internal_features() const {
  const ::google::cloud::speech::v2::RecognitionFeatures* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionFeatures&>(
      ::google::cloud::speech::v2::_RecognitionFeatures_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionFeatures& RecognitionConfig::features() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionConfig.features)
  return _internal_features();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_features(
    ::google::cloud::speech::v2::RecognitionFeatures* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionConfig.features)
}
inline ::google::cloud::speech::v2::RecognitionFeatures* RecognitionConfig::release_features() {
  
  ::google::cloud::speech::v2::RecognitionFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionFeatures* RecognitionConfig::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionConfig.features)
  
  ::google::cloud::speech::v2::RecognitionFeatures* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionFeatures* RecognitionConfig::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionFeatures>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::google::cloud::speech::v2::RecognitionFeatures* RecognitionConfig::mutable_features() {
  ::google::cloud::speech::v2::RecognitionFeatures* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionConfig.features)
  return _msg;
}
inline void RecognitionConfig::set_allocated_features(::google::cloud::speech::v2::RecognitionFeatures* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognitionConfig.features)
}

// .google.cloud.speech.v2.SpeechAdaptation adaptation = 6;
inline bool RecognitionConfig::_internal_has_adaptation() const {
  return this != internal_default_instance() && _impl_.adaptation_ != nullptr;
}
inline bool RecognitionConfig::has_adaptation() const {
  return _internal_has_adaptation();
}
inline void RecognitionConfig::clear_adaptation() {
  if (GetArenaForAllocation() == nullptr && _impl_.adaptation_ != nullptr) {
    delete _impl_.adaptation_;
  }
  _impl_.adaptation_ = nullptr;
}
inline const ::google::cloud::speech::v2::SpeechAdaptation& RecognitionConfig::_internal_adaptation() const {
  const ::google::cloud::speech::v2::SpeechAdaptation* p = _impl_.adaptation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::SpeechAdaptation&>(
      ::google::cloud::speech::v2::_SpeechAdaptation_default_instance_);
}
inline const ::google::cloud::speech::v2::SpeechAdaptation& RecognitionConfig::adaptation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionConfig.adaptation)
  return _internal_adaptation();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_adaptation(
    ::google::cloud::speech::v2::SpeechAdaptation* adaptation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaptation_);
  }
  _impl_.adaptation_ = adaptation;
  if (adaptation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionConfig.adaptation)
}
inline ::google::cloud::speech::v2::SpeechAdaptation* RecognitionConfig::release_adaptation() {
  
  ::google::cloud::speech::v2::SpeechAdaptation* temp = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::SpeechAdaptation* RecognitionConfig::unsafe_arena_release_adaptation() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionConfig.adaptation)
  
  ::google::cloud::speech::v2::SpeechAdaptation* temp = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::SpeechAdaptation* RecognitionConfig::_internal_mutable_adaptation() {
  
  if (_impl_.adaptation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::SpeechAdaptation>(GetArenaForAllocation());
    _impl_.adaptation_ = p;
  }
  return _impl_.adaptation_;
}
inline ::google::cloud::speech::v2::SpeechAdaptation* RecognitionConfig::mutable_adaptation() {
  ::google::cloud::speech::v2::SpeechAdaptation* _msg = _internal_mutable_adaptation();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionConfig.adaptation)
  return _msg;
}
inline void RecognitionConfig::set_allocated_adaptation(::google::cloud::speech::v2::SpeechAdaptation* adaptation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.adaptation_;
  }
  if (adaptation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(adaptation);
    if (message_arena != submessage_arena) {
      adaptation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaptation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adaptation_ = adaptation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognitionConfig.adaptation)
}

inline bool RecognitionConfig::has_decoding_config() const {
  return decoding_config_case() != DECODING_CONFIG_NOT_SET;
}
inline void RecognitionConfig::clear_has_decoding_config() {
  _impl_._oneof_case_[0] = DECODING_CONFIG_NOT_SET;
}
inline RecognitionConfig::DecodingConfigCase RecognitionConfig::decoding_config_case() const {
  return RecognitionConfig::DecodingConfigCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognizeRequest

// string recognizer = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void RecognizeRequest::clear_recognizer() {
  _impl_.recognizer_.ClearToEmpty();
}
inline const std::string& RecognizeRequest::recognizer() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeRequest.recognizer)
  return _internal_recognizer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizeRequest::set_recognizer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recognizer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognizeRequest.recognizer)
}
inline std::string* RecognizeRequest::mutable_recognizer() {
  std::string* _s = _internal_mutable_recognizer();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeRequest.recognizer)
  return _s;
}
inline const std::string& RecognizeRequest::_internal_recognizer() const {
  return _impl_.recognizer_.Get();
}
inline void RecognizeRequest::_internal_set_recognizer(const std::string& value) {
  
  _impl_.recognizer_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizeRequest::_internal_mutable_recognizer() {
  
  return _impl_.recognizer_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizeRequest::release_recognizer() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeRequest.recognizer)
  return _impl_.recognizer_.Release();
}
inline void RecognizeRequest::set_allocated_recognizer(std::string* recognizer) {
  if (recognizer != nullptr) {
    
  } else {
    
  }
  _impl_.recognizer_.SetAllocated(recognizer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recognizer_.IsDefault()) {
    _impl_.recognizer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeRequest.recognizer)
}

// .google.cloud.speech.v2.RecognitionConfig config = 1;
inline bool RecognizeRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool RecognizeRequest::has_config() const {
  return _internal_has_config();
}
inline void RecognizeRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionConfig& RecognizeRequest::_internal_config() const {
  const ::google::cloud::speech::v2::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionConfig&>(
      ::google::cloud::speech::v2::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionConfig& RecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeRequest.config)
  return _internal_config();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v2::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognizeRequest.config)
}
inline ::google::cloud::speech::v2::RecognitionConfig* RecognizeRequest::release_config() {
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* RecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeRequest.config)
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* RecognizeRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v2::RecognitionConfig* RecognizeRequest::mutable_config() {
  ::google::cloud::speech::v2::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeRequest.config)
  return _msg;
}
inline void RecognizeRequest::set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeRequest.config)
}

// .google.protobuf.FieldMask config_mask = 8;
inline bool RecognizeRequest::_internal_has_config_mask() const {
  return this != internal_default_instance() && _impl_.config_mask_ != nullptr;
}
inline bool RecognizeRequest::has_config_mask() const {
  return _internal_has_config_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& RecognizeRequest::_internal_config_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& RecognizeRequest::config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeRequest.config_mask)
  return _internal_config_mask();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_config_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  _impl_.config_mask_ = config_mask;
  if (config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognizeRequest.config_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* RecognizeRequest::release_config_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* RecognizeRequest::unsafe_arena_release_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeRequest.config_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* RecognizeRequest::_internal_mutable_config_mask() {
  
  if (_impl_.config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.config_mask_ = p;
  }
  return _impl_.config_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* RecognizeRequest::mutable_config_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_config_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeRequest.config_mask)
  return _msg;
}
inline void RecognizeRequest::set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  if (config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_mask));
    if (message_arena != submessage_arena) {
      config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_mask_ = config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeRequest.config_mask)
}

// bytes content = 5;
inline bool RecognizeRequest::_internal_has_content() const {
  return audio_source_case() == kContent;
}
inline bool RecognizeRequest::has_content() const {
  return _internal_has_content();
}
inline void RecognizeRequest::set_has_content() {
  _impl_._oneof_case_[0] = kContent;
}
inline void RecognizeRequest::clear_content() {
  if (_internal_has_content()) {
    _impl_.audio_source_.content_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognizeRequest::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline void RecognizeRequest::set_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognizeRequest.content)
}
inline std::string* RecognizeRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeRequest.content)
  return _s;
}
inline const std::string& RecognizeRequest::_internal_content() const {
  if (_internal_has_content()) {
    return _impl_.audio_source_.content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RecognizeRequest::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizeRequest::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  return _impl_.audio_source_.content_.Mutable(      GetArenaForAllocation());
}
inline std::string* RecognizeRequest::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeRequest.content)
  if (_internal_has_content()) {
    clear_has_audio_source();
    return _impl_.audio_source_.content_.Release();
  } else {
    return nullptr;
  }
}
inline void RecognizeRequest::set_allocated_content(std::string* content) {
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (content != nullptr) {
    set_has_content();
    _impl_.audio_source_.content_.InitAllocated(content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeRequest.content)
}

// string uri = 6;
inline bool RecognizeRequest::_internal_has_uri() const {
  return audio_source_case() == kUri;
}
inline bool RecognizeRequest::has_uri() const {
  return _internal_has_uri();
}
inline void RecognizeRequest::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void RecognizeRequest::clear_uri() {
  if (_internal_has_uri()) {
    _impl_.audio_source_.uri_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognizeRequest::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeRequest.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline void RecognizeRequest::set_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.RecognizeRequest.uri)
}
inline std::string* RecognizeRequest::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeRequest.uri)
  return _s;
}
inline const std::string& RecognizeRequest::_internal_uri() const {
  if (_internal_has_uri()) {
    return _impl_.audio_source_.uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RecognizeRequest::_internal_set_uri(const std::string& value) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizeRequest::_internal_mutable_uri() {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  return _impl_.audio_source_.uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* RecognizeRequest::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeRequest.uri)
  if (_internal_has_uri()) {
    clear_has_audio_source();
    return _impl_.audio_source_.uri_.Release();
  } else {
    return nullptr;
  }
}
inline void RecognizeRequest::set_allocated_uri(std::string* uri) {
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (uri != nullptr) {
    set_has_uri();
    _impl_.audio_source_.uri_.InitAllocated(uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeRequest.uri)
}

inline bool RecognizeRequest::has_audio_source() const {
  return audio_source_case() != AUDIO_SOURCE_NOT_SET;
}
inline void RecognizeRequest::clear_has_audio_source() {
  _impl_._oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}
inline RecognizeRequest::AudioSourceCase RecognizeRequest::audio_source_case() const {
  return RecognizeRequest::AudioSourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognitionResponseMetadata

// .google.protobuf.Duration total_billed_duration = 6;
inline bool RecognitionResponseMetadata::_internal_has_total_billed_duration() const {
  return this != internal_default_instance() && _impl_.total_billed_duration_ != nullptr;
}
inline bool RecognitionResponseMetadata::has_total_billed_duration() const {
  return _internal_has_total_billed_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecognitionResponseMetadata::_internal_total_billed_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_billed_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecognitionResponseMetadata::total_billed_duration() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognitionResponseMetadata.total_billed_duration)
  return _internal_total_billed_duration();
}
inline void RecognitionResponseMetadata::unsafe_arena_set_allocated_total_billed_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_duration_);
  }
  _impl_.total_billed_duration_ = total_billed_duration;
  if (total_billed_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognitionResponseMetadata.total_billed_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognitionResponseMetadata::release_total_billed_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_duration_;
  _impl_.total_billed_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognitionResponseMetadata::unsafe_arena_release_total_billed_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognitionResponseMetadata.total_billed_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_duration_;
  _impl_.total_billed_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognitionResponseMetadata::_internal_mutable_total_billed_duration() {
  
  if (_impl_.total_billed_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_billed_duration_ = p;
  }
  return _impl_.total_billed_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognitionResponseMetadata::mutable_total_billed_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_billed_duration();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognitionResponseMetadata.total_billed_duration)
  return _msg;
}
inline void RecognitionResponseMetadata::set_allocated_total_billed_duration(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_duration_);
  }
  if (total_billed_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_billed_duration));
    if (message_arena != submessage_arena) {
      total_billed_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_billed_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_billed_duration_ = total_billed_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognitionResponseMetadata.total_billed_duration)
}

// -------------------------------------------------------------------

// SpeechRecognitionAlternative

// string transcript = 1;
inline void SpeechRecognitionAlternative::clear_transcript() {
  _impl_.transcript_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionAlternative::transcript() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionAlternative.transcript)
  return _internal_transcript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionAlternative::set_transcript(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transcript_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeechRecognitionAlternative.transcript)
}
inline std::string* SpeechRecognitionAlternative::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechRecognitionAlternative.transcript)
  return _s;
}
inline const std::string& SpeechRecognitionAlternative::_internal_transcript() const {
  return _impl_.transcript_.Get();
}
inline void SpeechRecognitionAlternative::_internal_set_transcript(const std::string& value) {
  
  _impl_.transcript_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionAlternative::_internal_mutable_transcript() {
  
  return _impl_.transcript_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionAlternative::release_transcript() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.SpeechRecognitionAlternative.transcript)
  return _impl_.transcript_.Release();
}
inline void SpeechRecognitionAlternative::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  _impl_.transcript_.SetAllocated(transcript, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transcript_.IsDefault()) {
    _impl_.transcript_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.SpeechRecognitionAlternative.transcript)
}

// float confidence = 2;
inline void SpeechRecognitionAlternative::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float SpeechRecognitionAlternative::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionAlternative.confidence)
  return _internal_confidence();
}
inline void SpeechRecognitionAlternative::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void SpeechRecognitionAlternative::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeechRecognitionAlternative.confidence)
}

// repeated .google.cloud.speech.v2.WordInfo words = 3;
inline int SpeechRecognitionAlternative::_internal_words_size() const {
  return _impl_.words_.size();
}
inline int SpeechRecognitionAlternative::words_size() const {
  return _internal_words_size();
}
inline void SpeechRecognitionAlternative::clear_words() {
  _impl_.words_.Clear();
}
inline ::google::cloud::speech::v2::WordInfo* SpeechRecognitionAlternative::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechRecognitionAlternative.words)
  return _impl_.words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::WordInfo >*
SpeechRecognitionAlternative::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.SpeechRecognitionAlternative.words)
  return &_impl_.words_;
}
inline const ::google::cloud::speech::v2::WordInfo& SpeechRecognitionAlternative::_internal_words(int index) const {
  return _impl_.words_.Get(index);
}
inline const ::google::cloud::speech::v2::WordInfo& SpeechRecognitionAlternative::words(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionAlternative.words)
  return _internal_words(index);
}
inline ::google::cloud::speech::v2::WordInfo* SpeechRecognitionAlternative::_internal_add_words() {
  return _impl_.words_.Add();
}
inline ::google::cloud::speech::v2::WordInfo* SpeechRecognitionAlternative::add_words() {
  ::google::cloud::speech::v2::WordInfo* _add = _internal_add_words();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.SpeechRecognitionAlternative.words)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::WordInfo >&
SpeechRecognitionAlternative::words() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.SpeechRecognitionAlternative.words)
  return _impl_.words_;
}

// -------------------------------------------------------------------

// WordInfo

// .google.protobuf.Duration start_offset = 1;
inline bool WordInfo::_internal_has_start_offset() const {
  return this != internal_default_instance() && _impl_.start_offset_ != nullptr;
}
inline bool WordInfo::has_start_offset() const {
  return _internal_has_start_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::_internal_start_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.start_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::start_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.WordInfo.start_offset)
  return _internal_start_offset();
}
inline void WordInfo::unsafe_arena_set_allocated_start_offset(
    ::PROTOBUF_NAMESPACE_ID::Duration* start_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_offset_);
  }
  _impl_.start_offset_ = start_offset;
  if (start_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.WordInfo.start_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::release_start_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.start_offset_;
  _impl_.start_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::unsafe_arena_release_start_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.WordInfo.start_offset)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.start_offset_;
  _impl_.start_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::_internal_mutable_start_offset() {
  
  if (_impl_.start_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.start_offset_ = p;
  }
  return _impl_.start_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::mutable_start_offset() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_start_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.WordInfo.start_offset)
  return _msg;
}
inline void WordInfo::set_allocated_start_offset(::PROTOBUF_NAMESPACE_ID::Duration* start_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_offset_);
  }
  if (start_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_offset));
    if (message_arena != submessage_arena) {
      start_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_offset_ = start_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.WordInfo.start_offset)
}

// .google.protobuf.Duration end_offset = 2;
inline bool WordInfo::_internal_has_end_offset() const {
  return this != internal_default_instance() && _impl_.end_offset_ != nullptr;
}
inline bool WordInfo::has_end_offset() const {
  return _internal_has_end_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::_internal_end_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.end_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::end_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.WordInfo.end_offset)
  return _internal_end_offset();
}
inline void WordInfo::unsafe_arena_set_allocated_end_offset(
    ::PROTOBUF_NAMESPACE_ID::Duration* end_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_offset_);
  }
  _impl_.end_offset_ = end_offset;
  if (end_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.WordInfo.end_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::release_end_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.end_offset_;
  _impl_.end_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::unsafe_arena_release_end_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.WordInfo.end_offset)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.end_offset_;
  _impl_.end_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::_internal_mutable_end_offset() {
  
  if (_impl_.end_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.end_offset_ = p;
  }
  return _impl_.end_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::mutable_end_offset() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_end_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.WordInfo.end_offset)
  return _msg;
}
inline void WordInfo::set_allocated_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* end_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_offset_);
  }
  if (end_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_offset));
    if (message_arena != submessage_arena) {
      end_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_offset_ = end_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.WordInfo.end_offset)
}

// string word = 3;
inline void WordInfo::clear_word() {
  _impl_.word_.ClearToEmpty();
}
inline const std::string& WordInfo::word() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.WordInfo.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WordInfo::set_word(ArgT0&& arg0, ArgT... args) {
 
 _impl_.word_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.WordInfo.word)
}
inline std::string* WordInfo::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.WordInfo.word)
  return _s;
}
inline const std::string& WordInfo::_internal_word() const {
  return _impl_.word_.Get();
}
inline void WordInfo::_internal_set_word(const std::string& value) {
  
  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* WordInfo::_internal_mutable_word() {
  
  return _impl_.word_.Mutable(GetArenaForAllocation());
}
inline std::string* WordInfo::release_word() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.WordInfo.word)
  return _impl_.word_.Release();
}
inline void WordInfo::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  _impl_.word_.SetAllocated(word, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.WordInfo.word)
}

// float confidence = 4;
inline void WordInfo::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float WordInfo::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float WordInfo::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.WordInfo.confidence)
  return _internal_confidence();
}
inline void WordInfo::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void WordInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.WordInfo.confidence)
}

// string speaker_label = 6;
inline void WordInfo::clear_speaker_label() {
  _impl_.speaker_label_.ClearToEmpty();
}
inline const std::string& WordInfo::speaker_label() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.WordInfo.speaker_label)
  return _internal_speaker_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WordInfo::set_speaker_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.speaker_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.WordInfo.speaker_label)
}
inline std::string* WordInfo::mutable_speaker_label() {
  std::string* _s = _internal_mutable_speaker_label();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.WordInfo.speaker_label)
  return _s;
}
inline const std::string& WordInfo::_internal_speaker_label() const {
  return _impl_.speaker_label_.Get();
}
inline void WordInfo::_internal_set_speaker_label(const std::string& value) {
  
  _impl_.speaker_label_.Set(value, GetArenaForAllocation());
}
inline std::string* WordInfo::_internal_mutable_speaker_label() {
  
  return _impl_.speaker_label_.Mutable(GetArenaForAllocation());
}
inline std::string* WordInfo::release_speaker_label() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.WordInfo.speaker_label)
  return _impl_.speaker_label_.Release();
}
inline void WordInfo::set_allocated_speaker_label(std::string* speaker_label) {
  if (speaker_label != nullptr) {
    
  } else {
    
  }
  _impl_.speaker_label_.SetAllocated(speaker_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.speaker_label_.IsDefault()) {
    _impl_.speaker_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.WordInfo.speaker_label)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// repeated .google.cloud.speech.v2.SpeechRecognitionAlternative alternatives = 1;
inline int SpeechRecognitionResult::_internal_alternatives_size() const {
  return _impl_.alternatives_.size();
}
inline int SpeechRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void SpeechRecognitionResult::clear_alternatives() {
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* SpeechRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechRecognitionResult.alternatives)
  return _impl_.alternatives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >*
SpeechRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.SpeechRecognitionResult.alternatives)
  return &_impl_.alternatives_;
}
inline const ::google::cloud::speech::v2::SpeechRecognitionAlternative& SpeechRecognitionResult::_internal_alternatives(int index) const {
  return _impl_.alternatives_.Get(index);
}
inline const ::google::cloud::speech::v2::SpeechRecognitionAlternative& SpeechRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionResult.alternatives)
  return _internal_alternatives(index);
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* SpeechRecognitionResult::_internal_add_alternatives() {
  return _impl_.alternatives_.Add();
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* SpeechRecognitionResult::add_alternatives() {
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* _add = _internal_add_alternatives();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.SpeechRecognitionResult.alternatives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >&
SpeechRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.SpeechRecognitionResult.alternatives)
  return _impl_.alternatives_;
}

// int32 channel_tag = 2;
inline void SpeechRecognitionResult::clear_channel_tag() {
  _impl_.channel_tag_ = 0;
}
inline int32_t SpeechRecognitionResult::_internal_channel_tag() const {
  return _impl_.channel_tag_;
}
inline int32_t SpeechRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void SpeechRecognitionResult::_internal_set_channel_tag(int32_t value) {
  
  _impl_.channel_tag_ = value;
}
inline void SpeechRecognitionResult::set_channel_tag(int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeechRecognitionResult.channel_tag)
}

// .google.protobuf.Duration result_end_offset = 4;
inline bool SpeechRecognitionResult::_internal_has_result_end_offset() const {
  return this != internal_default_instance() && _impl_.result_end_offset_ != nullptr;
}
inline bool SpeechRecognitionResult::has_result_end_offset() const {
  return _internal_has_result_end_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpeechRecognitionResult::_internal_result_end_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.result_end_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpeechRecognitionResult::result_end_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionResult.result_end_offset)
  return _internal_result_end_offset();
}
inline void SpeechRecognitionResult::unsafe_arena_set_allocated_result_end_offset(
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_offset_);
  }
  _impl_.result_end_offset_ = result_end_offset;
  if (result_end_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.SpeechRecognitionResult.result_end_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::release_result_end_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_offset_;
  _impl_.result_end_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::unsafe_arena_release_result_end_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.SpeechRecognitionResult.result_end_offset)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_offset_;
  _impl_.result_end_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::_internal_mutable_result_end_offset() {
  
  if (_impl_.result_end_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.result_end_offset_ = p;
  }
  return _impl_.result_end_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::mutable_result_end_offset() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_result_end_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechRecognitionResult.result_end_offset)
  return _msg;
}
inline void SpeechRecognitionResult::set_allocated_result_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_offset_);
  }
  if (result_end_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_end_offset));
    if (message_arena != submessage_arena) {
      result_end_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_end_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_end_offset_ = result_end_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.SpeechRecognitionResult.result_end_offset)
}

// string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void SpeechRecognitionResult::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.SpeechRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionResult::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.SpeechRecognitionResult.language_code)
}
inline std::string* SpeechRecognitionResult::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.SpeechRecognitionResult.language_code)
  return _s;
}
inline const std::string& SpeechRecognitionResult::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void SpeechRecognitionResult::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.SpeechRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void SpeechRecognitionResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.SpeechRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// RecognizeResponse

// repeated .google.cloud.speech.v2.SpeechRecognitionResult results = 3;
inline int RecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int RecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void RecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v2::SpeechRecognitionResult* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionResult >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.RecognizeResponse.results)
  return &_impl_.results_;
}
inline const ::google::cloud::speech::v2::SpeechRecognitionResult& RecognizeResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::google::cloud::speech::v2::SpeechRecognitionResult& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeResponse.results)
  return _internal_results(index);
}
inline ::google::cloud::speech::v2::SpeechRecognitionResult* RecognizeResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::google::cloud::speech::v2::SpeechRecognitionResult* RecognizeResponse::add_results() {
  ::google::cloud::speech::v2::SpeechRecognitionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.RecognizeResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionResult >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.RecognizeResponse.results)
  return _impl_.results_;
}

// .google.cloud.speech.v2.RecognitionResponseMetadata metadata = 2;
inline bool RecognizeResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool RecognizeResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void RecognizeResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionResponseMetadata& RecognizeResponse::_internal_metadata() const {
  const ::google::cloud::speech::v2::RecognitionResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionResponseMetadata&>(
      ::google::cloud::speech::v2::_RecognitionResponseMetadata_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionResponseMetadata& RecognizeResponse::metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.RecognizeResponse.metadata)
  return _internal_metadata();
}
inline void RecognizeResponse::unsafe_arena_set_allocated_metadata(
    ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.RecognizeResponse.metadata)
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* RecognizeResponse::release_metadata() {
  
  ::google::cloud::speech::v2::RecognitionResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* RecognizeResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.RecognizeResponse.metadata)
  
  ::google::cloud::speech::v2::RecognitionResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* RecognizeResponse::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionResponseMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* RecognizeResponse::mutable_metadata() {
  ::google::cloud::speech::v2::RecognitionResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.RecognizeResponse.metadata)
  return _msg;
}
inline void RecognizeResponse::set_allocated_metadata(::google::cloud::speech::v2::RecognitionResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.RecognizeResponse.metadata)
}

// -------------------------------------------------------------------

// StreamingRecognitionFeatures_VoiceActivityTimeout

// .google.protobuf.Duration speech_start_timeout = 1;
inline bool StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_has_speech_start_timeout() const {
  return this != internal_default_instance() && _impl_.speech_start_timeout_ != nullptr;
}
inline bool StreamingRecognitionFeatures_VoiceActivityTimeout::has_speech_start_timeout() const {
  return _internal_has_speech_start_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_speech_start_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.speech_start_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionFeatures_VoiceActivityTimeout::speech_start_timeout() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_start_timeout)
  return _internal_speech_start_timeout();
}
inline void StreamingRecognitionFeatures_VoiceActivityTimeout::unsafe_arena_set_allocated_speech_start_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_start_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_start_timeout_);
  }
  _impl_.speech_start_timeout_ = speech_start_timeout;
  if (speech_start_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_start_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::release_speech_start_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_start_timeout_;
  _impl_.speech_start_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::unsafe_arena_release_speech_start_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_start_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_start_timeout_;
  _impl_.speech_start_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_mutable_speech_start_timeout() {
  
  if (_impl_.speech_start_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.speech_start_timeout_ = p;
  }
  return _impl_.speech_start_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::mutable_speech_start_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_speech_start_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_start_timeout)
  return _msg;
}
inline void StreamingRecognitionFeatures_VoiceActivityTimeout::set_allocated_speech_start_timeout(::PROTOBUF_NAMESPACE_ID::Duration* speech_start_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_start_timeout_);
  }
  if (speech_start_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_start_timeout));
    if (message_arena != submessage_arena) {
      speech_start_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_start_timeout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speech_start_timeout_ = speech_start_timeout;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_start_timeout)
}

// .google.protobuf.Duration speech_end_timeout = 2;
inline bool StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_has_speech_end_timeout() const {
  return this != internal_default_instance() && _impl_.speech_end_timeout_ != nullptr;
}
inline bool StreamingRecognitionFeatures_VoiceActivityTimeout::has_speech_end_timeout() const {
  return _internal_has_speech_end_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_speech_end_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.speech_end_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionFeatures_VoiceActivityTimeout::speech_end_timeout() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_end_timeout)
  return _internal_speech_end_timeout();
}
inline void StreamingRecognitionFeatures_VoiceActivityTimeout::unsafe_arena_set_allocated_speech_end_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_end_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_end_timeout_);
  }
  _impl_.speech_end_timeout_ = speech_end_timeout;
  if (speech_end_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_end_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::release_speech_end_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_end_timeout_;
  _impl_.speech_end_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::unsafe_arena_release_speech_end_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_end_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_end_timeout_;
  _impl_.speech_end_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::_internal_mutable_speech_end_timeout() {
  
  if (_impl_.speech_end_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.speech_end_timeout_ = p;
  }
  return _impl_.speech_end_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionFeatures_VoiceActivityTimeout::mutable_speech_end_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_speech_end_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_end_timeout)
  return _msg;
}
inline void StreamingRecognitionFeatures_VoiceActivityTimeout::set_allocated_speech_end_timeout(::PROTOBUF_NAMESPACE_ID::Duration* speech_end_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_end_timeout_);
  }
  if (speech_end_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_end_timeout));
    if (message_arena != submessage_arena) {
      speech_end_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_end_timeout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speech_end_timeout_ = speech_end_timeout;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout.speech_end_timeout)
}

// -------------------------------------------------------------------

// StreamingRecognitionFeatures

// bool enable_voice_activity_events = 1;
inline void StreamingRecognitionFeatures::clear_enable_voice_activity_events() {
  _impl_.enable_voice_activity_events_ = false;
}
inline bool StreamingRecognitionFeatures::_internal_enable_voice_activity_events() const {
  return _impl_.enable_voice_activity_events_;
}
inline bool StreamingRecognitionFeatures::enable_voice_activity_events() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionFeatures.enable_voice_activity_events)
  return _internal_enable_voice_activity_events();
}
inline void StreamingRecognitionFeatures::_internal_set_enable_voice_activity_events(bool value) {
  
  _impl_.enable_voice_activity_events_ = value;
}
inline void StreamingRecognitionFeatures::set_enable_voice_activity_events(bool value) {
  _internal_set_enable_voice_activity_events(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionFeatures.enable_voice_activity_events)
}

// bool interim_results = 2;
inline void StreamingRecognitionFeatures::clear_interim_results() {
  _impl_.interim_results_ = false;
}
inline bool StreamingRecognitionFeatures::_internal_interim_results() const {
  return _impl_.interim_results_;
}
inline bool StreamingRecognitionFeatures::interim_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionFeatures.interim_results)
  return _internal_interim_results();
}
inline void StreamingRecognitionFeatures::_internal_set_interim_results(bool value) {
  
  _impl_.interim_results_ = value;
}
inline void StreamingRecognitionFeatures::set_interim_results(bool value) {
  _internal_set_interim_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionFeatures.interim_results)
}

// .google.cloud.speech.v2.StreamingRecognitionFeatures.VoiceActivityTimeout voice_activity_timeout = 3;
inline bool StreamingRecognitionFeatures::_internal_has_voice_activity_timeout() const {
  return this != internal_default_instance() && _impl_.voice_activity_timeout_ != nullptr;
}
inline bool StreamingRecognitionFeatures::has_voice_activity_timeout() const {
  return _internal_has_voice_activity_timeout();
}
inline void StreamingRecognitionFeatures::clear_voice_activity_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.voice_activity_timeout_ != nullptr) {
    delete _impl_.voice_activity_timeout_;
  }
  _impl_.voice_activity_timeout_ = nullptr;
}
inline const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout& StreamingRecognitionFeatures::_internal_voice_activity_timeout() const {
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* p = _impl_.voice_activity_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout&>(
      ::google::cloud::speech::v2::_StreamingRecognitionFeatures_VoiceActivityTimeout_default_instance_);
}
inline const ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout& StreamingRecognitionFeatures::voice_activity_timeout() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionFeatures.voice_activity_timeout)
  return _internal_voice_activity_timeout();
}
inline void StreamingRecognitionFeatures::unsafe_arena_set_allocated_voice_activity_timeout(
    ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* voice_activity_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voice_activity_timeout_);
  }
  _impl_.voice_activity_timeout_ = voice_activity_timeout;
  if (voice_activity_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.voice_activity_timeout)
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* StreamingRecognitionFeatures::release_voice_activity_timeout() {
  
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* temp = _impl_.voice_activity_timeout_;
  _impl_.voice_activity_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* StreamingRecognitionFeatures::unsafe_arena_release_voice_activity_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionFeatures.voice_activity_timeout)
  
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* temp = _impl_.voice_activity_timeout_;
  _impl_.voice_activity_timeout_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* StreamingRecognitionFeatures::_internal_mutable_voice_activity_timeout() {
  
  if (_impl_.voice_activity_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout>(GetArenaForAllocation());
    _impl_.voice_activity_timeout_ = p;
  }
  return _impl_.voice_activity_timeout_;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* StreamingRecognitionFeatures::mutable_voice_activity_timeout() {
  ::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* _msg = _internal_mutable_voice_activity_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionFeatures.voice_activity_timeout)
  return _msg;
}
inline void StreamingRecognitionFeatures::set_allocated_voice_activity_timeout(::google::cloud::speech::v2::StreamingRecognitionFeatures_VoiceActivityTimeout* voice_activity_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.voice_activity_timeout_;
  }
  if (voice_activity_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(voice_activity_timeout);
    if (message_arena != submessage_arena) {
      voice_activity_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice_activity_timeout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.voice_activity_timeout_ = voice_activity_timeout;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionFeatures.voice_activity_timeout)
}

// -------------------------------------------------------------------

// StreamingRecognitionConfig

// .google.cloud.speech.v2.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool StreamingRecognitionConfig::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool StreamingRecognitionConfig::has_config() const {
  return _internal_has_config();
}
inline void StreamingRecognitionConfig::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionConfig& StreamingRecognitionConfig::_internal_config() const {
  const ::google::cloud::speech::v2::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionConfig&>(
      ::google::cloud::speech::v2::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionConfig& StreamingRecognitionConfig::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionConfig.config)
  return _internal_config();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v2::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.config)
}
inline ::google::cloud::speech::v2::RecognitionConfig* StreamingRecognitionConfig::release_config() {
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* StreamingRecognitionConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionConfig.config)
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* StreamingRecognitionConfig::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v2::RecognitionConfig* StreamingRecognitionConfig::mutable_config() {
  ::google::cloud::speech::v2::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionConfig.config)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.config)
}

// .google.protobuf.FieldMask config_mask = 3;
inline bool StreamingRecognitionConfig::_internal_has_config_mask() const {
  return this != internal_default_instance() && _impl_.config_mask_ != nullptr;
}
inline bool StreamingRecognitionConfig::has_config_mask() const {
  return _internal_has_config_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& StreamingRecognitionConfig::_internal_config_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& StreamingRecognitionConfig::config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionConfig.config_mask)
  return _internal_config_mask();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_config_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  _impl_.config_mask_ = config_mask;
  if (config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.config_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamingRecognitionConfig::release_config_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamingRecognitionConfig::unsafe_arena_release_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionConfig.config_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamingRecognitionConfig::_internal_mutable_config_mask() {
  
  if (_impl_.config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.config_mask_ = p;
  }
  return _impl_.config_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamingRecognitionConfig::mutable_config_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_config_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionConfig.config_mask)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  if (config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_mask));
    if (message_arena != submessage_arena) {
      config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_mask_ = config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.config_mask)
}

// .google.cloud.speech.v2.StreamingRecognitionFeatures streaming_features = 2;
inline bool StreamingRecognitionConfig::_internal_has_streaming_features() const {
  return this != internal_default_instance() && _impl_.streaming_features_ != nullptr;
}
inline bool StreamingRecognitionConfig::has_streaming_features() const {
  return _internal_has_streaming_features();
}
inline void StreamingRecognitionConfig::clear_streaming_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.streaming_features_ != nullptr) {
    delete _impl_.streaming_features_;
  }
  _impl_.streaming_features_ = nullptr;
}
inline const ::google::cloud::speech::v2::StreamingRecognitionFeatures& StreamingRecognitionConfig::_internal_streaming_features() const {
  const ::google::cloud::speech::v2::StreamingRecognitionFeatures* p = _impl_.streaming_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::StreamingRecognitionFeatures&>(
      ::google::cloud::speech::v2::_StreamingRecognitionFeatures_default_instance_);
}
inline const ::google::cloud::speech::v2::StreamingRecognitionFeatures& StreamingRecognitionConfig::streaming_features() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionConfig.streaming_features)
  return _internal_streaming_features();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_streaming_features(
    ::google::cloud::speech::v2::StreamingRecognitionFeatures* streaming_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.streaming_features_);
  }
  _impl_.streaming_features_ = streaming_features;
  if (streaming_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.streaming_features)
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures* StreamingRecognitionConfig::release_streaming_features() {
  
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* temp = _impl_.streaming_features_;
  _impl_.streaming_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures* StreamingRecognitionConfig::unsafe_arena_release_streaming_features() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionConfig.streaming_features)
  
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* temp = _impl_.streaming_features_;
  _impl_.streaming_features_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures* StreamingRecognitionConfig::_internal_mutable_streaming_features() {
  
  if (_impl_.streaming_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::StreamingRecognitionFeatures>(GetArenaForAllocation());
    _impl_.streaming_features_ = p;
  }
  return _impl_.streaming_features_;
}
inline ::google::cloud::speech::v2::StreamingRecognitionFeatures* StreamingRecognitionConfig::mutable_streaming_features() {
  ::google::cloud::speech::v2::StreamingRecognitionFeatures* _msg = _internal_mutable_streaming_features();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionConfig.streaming_features)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_streaming_features(::google::cloud::speech::v2::StreamingRecognitionFeatures* streaming_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.streaming_features_;
  }
  if (streaming_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(streaming_features);
    if (message_arena != submessage_arena) {
      streaming_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.streaming_features_ = streaming_features;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionConfig.streaming_features)
}

// -------------------------------------------------------------------

// StreamingRecognizeRequest

// string recognizer = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StreamingRecognizeRequest::clear_recognizer() {
  _impl_.recognizer_.ClearToEmpty();
}
inline const std::string& StreamingRecognizeRequest::recognizer() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeRequest.recognizer)
  return _internal_recognizer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamingRecognizeRequest::set_recognizer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recognizer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognizeRequest.recognizer)
}
inline std::string* StreamingRecognizeRequest::mutable_recognizer() {
  std::string* _s = _internal_mutable_recognizer();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeRequest.recognizer)
  return _s;
}
inline const std::string& StreamingRecognizeRequest::_internal_recognizer() const {
  return _impl_.recognizer_.Get();
}
inline void StreamingRecognizeRequest::_internal_set_recognizer(const std::string& value) {
  
  _impl_.recognizer_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::_internal_mutable_recognizer() {
  
  return _impl_.recognizer_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::release_recognizer() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognizeRequest.recognizer)
  return _impl_.recognizer_.Release();
}
inline void StreamingRecognizeRequest::set_allocated_recognizer(std::string* recognizer) {
  if (recognizer != nullptr) {
    
  } else {
    
  }
  _impl_.recognizer_.SetAllocated(recognizer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recognizer_.IsDefault()) {
    _impl_.recognizer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognizeRequest.recognizer)
}

// .google.cloud.speech.v2.StreamingRecognitionConfig streaming_config = 6;
inline bool StreamingRecognizeRequest::_internal_has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline bool StreamingRecognizeRequest::has_streaming_config() const {
  return _internal_has_streaming_config();
}
inline void StreamingRecognizeRequest::set_has_streaming_config() {
  _impl_._oneof_case_[0] = kStreamingConfig;
}
inline void StreamingRecognizeRequest::clear_streaming_config() {
  if (_internal_has_streaming_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.streaming_request_.streaming_config_;
    }
    clear_has_streaming_request();
  }
}
inline ::google::cloud::speech::v2::StreamingRecognitionConfig* StreamingRecognizeRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v2::StreamingRecognitionConfig* temp = _impl_.streaming_request_.streaming_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v2::StreamingRecognitionConfig& StreamingRecognizeRequest::_internal_streaming_config() const {
  return _internal_has_streaming_config()
      ? *_impl_.streaming_request_.streaming_config_
      : reinterpret_cast< ::google::cloud::speech::v2::StreamingRecognitionConfig&>(::google::cloud::speech::v2::_StreamingRecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::StreamingRecognitionConfig& StreamingRecognizeRequest::streaming_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config)
  return _internal_streaming_config();
}
inline ::google::cloud::speech::v2::StreamingRecognitionConfig* StreamingRecognizeRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v2::StreamingRecognitionConfig* temp = _impl_.streaming_request_.streaming_config_;
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingRecognizeRequest::unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v2::StreamingRecognitionConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config)
}
inline ::google::cloud::speech::v2::StreamingRecognitionConfig* StreamingRecognizeRequest::_internal_mutable_streaming_config() {
  if (!_internal_has_streaming_config()) {
    clear_streaming_request();
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ = CreateMaybeMessage< ::google::cloud::speech::v2::StreamingRecognitionConfig >(GetArenaForAllocation());
  }
  return _impl_.streaming_request_.streaming_config_;
}
inline ::google::cloud::speech::v2::StreamingRecognitionConfig* StreamingRecognizeRequest::mutable_streaming_config() {
  ::google::cloud::speech::v2::StreamingRecognitionConfig* _msg = _internal_mutable_streaming_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeRequest.streaming_config)
  return _msg;
}

// bytes audio = 5;
inline bool StreamingRecognizeRequest::_internal_has_audio() const {
  return streaming_request_case() == kAudio;
}
inline bool StreamingRecognizeRequest::has_audio() const {
  return _internal_has_audio();
}
inline void StreamingRecognizeRequest::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline void StreamingRecognizeRequest::clear_audio() {
  if (_internal_has_audio()) {
    _impl_.streaming_request_.audio_.Destroy();
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingRecognizeRequest::audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeRequest.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline void StreamingRecognizeRequest::set_audio(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_audio()) {
    clear_streaming_request();
    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognizeRequest.audio)
}
inline std::string* StreamingRecognizeRequest::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeRequest.audio)
  return _s;
}
inline const std::string& StreamingRecognizeRequest::_internal_audio() const {
  if (_internal_has_audio()) {
    return _impl_.streaming_request_.audio_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamingRecognizeRequest::_internal_set_audio(const std::string& value) {
  if (!_internal_has_audio()) {
    clear_streaming_request();
    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  _impl_.streaming_request_.audio_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::_internal_mutable_audio() {
  if (!_internal_has_audio()) {
    clear_streaming_request();
    set_has_audio();
    _impl_.streaming_request_.audio_.InitDefault();
  }
  return _impl_.streaming_request_.audio_.Mutable(      GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::release_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognizeRequest.audio)
  if (_internal_has_audio()) {
    clear_has_streaming_request();
    return _impl_.streaming_request_.audio_.Release();
  } else {
    return nullptr;
  }
}
inline void StreamingRecognizeRequest::set_allocated_audio(std::string* audio) {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (audio != nullptr) {
    set_has_audio();
    _impl_.streaming_request_.audio_.InitAllocated(audio, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognizeRequest.audio)
}

inline bool StreamingRecognizeRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingRecognizeRequest::clear_has_streaming_request() {
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingRecognizeRequest::StreamingRequestCase StreamingRecognizeRequest::streaming_request_case() const {
  return StreamingRecognizeRequest::StreamingRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchRecognizeRequest

// string recognizer = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchRecognizeRequest::clear_recognizer() {
  _impl_.recognizer_.ClearToEmpty();
}
inline const std::string& BatchRecognizeRequest::recognizer() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeRequest.recognizer)
  return _internal_recognizer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchRecognizeRequest::set_recognizer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recognizer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.BatchRecognizeRequest.recognizer)
}
inline std::string* BatchRecognizeRequest::mutable_recognizer() {
  std::string* _s = _internal_mutable_recognizer();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeRequest.recognizer)
  return _s;
}
inline const std::string& BatchRecognizeRequest::_internal_recognizer() const {
  return _impl_.recognizer_.Get();
}
inline void BatchRecognizeRequest::_internal_set_recognizer(const std::string& value) {
  
  _impl_.recognizer_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchRecognizeRequest::_internal_mutable_recognizer() {
  
  return _impl_.recognizer_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchRecognizeRequest::release_recognizer() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeRequest.recognizer)
  return _impl_.recognizer_.Release();
}
inline void BatchRecognizeRequest::set_allocated_recognizer(std::string* recognizer) {
  if (recognizer != nullptr) {
    
  } else {
    
  }
  _impl_.recognizer_.SetAllocated(recognizer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recognizer_.IsDefault()) {
    _impl_.recognizer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeRequest.recognizer)
}

// .google.cloud.speech.v2.RecognitionConfig config = 4;
inline bool BatchRecognizeRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool BatchRecognizeRequest::has_config() const {
  return _internal_has_config();
}
inline void BatchRecognizeRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionConfig& BatchRecognizeRequest::_internal_config() const {
  const ::google::cloud::speech::v2::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionConfig&>(
      ::google::cloud::speech::v2::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionConfig& BatchRecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeRequest.config)
  return _internal_config();
}
inline void BatchRecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v2::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeRequest.config)
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeRequest::release_config() {
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeRequest.config)
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeRequest::mutable_config() {
  ::google::cloud::speech::v2::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeRequest.config)
  return _msg;
}
inline void BatchRecognizeRequest::set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeRequest.config)
}

// .google.protobuf.FieldMask config_mask = 5;
inline bool BatchRecognizeRequest::_internal_has_config_mask() const {
  return this != internal_default_instance() && _impl_.config_mask_ != nullptr;
}
inline bool BatchRecognizeRequest::has_config_mask() const {
  return _internal_has_config_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchRecognizeRequest::_internal_config_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchRecognizeRequest::config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeRequest.config_mask)
  return _internal_config_mask();
}
inline void BatchRecognizeRequest::unsafe_arena_set_allocated_config_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  _impl_.config_mask_ = config_mask;
  if (config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeRequest.config_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeRequest::release_config_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeRequest::unsafe_arena_release_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeRequest.config_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeRequest::_internal_mutable_config_mask() {
  
  if (_impl_.config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.config_mask_ = p;
  }
  return _impl_.config_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeRequest::mutable_config_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_config_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeRequest.config_mask)
  return _msg;
}
inline void BatchRecognizeRequest::set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  if (config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_mask));
    if (message_arena != submessage_arena) {
      config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_mask_ = config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeRequest.config_mask)
}

// repeated .google.cloud.speech.v2.BatchRecognizeFileMetadata files = 3;
inline int BatchRecognizeRequest::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int BatchRecognizeRequest::files_size() const {
  return _internal_files_size();
}
inline void BatchRecognizeRequest::clear_files() {
  _impl_.files_.Clear();
}
inline ::google::cloud::speech::v2::BatchRecognizeFileMetadata* BatchRecognizeRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeRequest.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::BatchRecognizeFileMetadata >*
BatchRecognizeRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.BatchRecognizeRequest.files)
  return &_impl_.files_;
}
inline const ::google::cloud::speech::v2::BatchRecognizeFileMetadata& BatchRecognizeRequest::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::google::cloud::speech::v2::BatchRecognizeFileMetadata& BatchRecognizeRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeRequest.files)
  return _internal_files(index);
}
inline ::google::cloud::speech::v2::BatchRecognizeFileMetadata* BatchRecognizeRequest::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::google::cloud::speech::v2::BatchRecognizeFileMetadata* BatchRecognizeRequest::add_files() {
  ::google::cloud::speech::v2::BatchRecognizeFileMetadata* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.BatchRecognizeRequest.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::BatchRecognizeFileMetadata >&
BatchRecognizeRequest::files() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.BatchRecognizeRequest.files)
  return _impl_.files_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchRecognizeResponse

// map<string, .google.cloud.speech.v2.BatchRecognizeFileResult> results = 1;
inline int BatchRecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int BatchRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void BatchRecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >&
BatchRecognizeResponse::_internal_results() const {
  return _impl_.results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >&
BatchRecognizeResponse::results() const {
  // @@protoc_insertion_point(field_map:google.cloud.speech.v2.BatchRecognizeResponse.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >*
BatchRecognizeResponse::_internal_mutable_results() {
  return _impl_.results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeFileResult >*
BatchRecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.speech.v2.BatchRecognizeResponse.results)
  return _internal_mutable_results();
}

// -------------------------------------------------------------------

// BatchRecognizeFileResult

// string uri = 1;
inline void BatchRecognizeFileResult::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& BatchRecognizeFileResult::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeFileResult.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchRecognizeFileResult::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.BatchRecognizeFileResult.uri)
}
inline std::string* BatchRecognizeFileResult::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeFileResult.uri)
  return _s;
}
inline const std::string& BatchRecognizeFileResult::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void BatchRecognizeFileResult::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchRecognizeFileResult::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchRecognizeFileResult::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeFileResult.uri)
  return _impl_.uri_.Release();
}
inline void BatchRecognizeFileResult::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeFileResult.uri)
}

// .google.rpc.Status error = 2;
inline bool BatchRecognizeFileResult::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool BatchRecognizeFileResult::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& BatchRecognizeFileResult::_internal_error() const {
  const ::google::rpc::Status* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchRecognizeFileResult::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeFileResult.error)
  return _internal_error();
}
inline void BatchRecognizeFileResult::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeFileResult.error)
}
inline ::google::rpc::Status* BatchRecognizeFileResult::release_error() {
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* BatchRecognizeFileResult::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeFileResult.error)
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchRecognizeFileResult::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::google::rpc::Status* BatchRecognizeFileResult::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeFileResult.error)
  return _msg;
}
inline void BatchRecognizeFileResult::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeFileResult.error)
}

// -------------------------------------------------------------------

// BatchRecognizeTranscriptionMetadata

// int32 progress_percent = 1;
inline void BatchRecognizeTranscriptionMetadata::clear_progress_percent() {
  _impl_.progress_percent_ = 0;
}
inline int32_t BatchRecognizeTranscriptionMetadata::_internal_progress_percent() const {
  return _impl_.progress_percent_;
}
inline int32_t BatchRecognizeTranscriptionMetadata::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.progress_percent)
  return _internal_progress_percent();
}
inline void BatchRecognizeTranscriptionMetadata::_internal_set_progress_percent(int32_t value) {
  
  _impl_.progress_percent_ = value;
}
inline void BatchRecognizeTranscriptionMetadata::set_progress_percent(int32_t value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.progress_percent)
}

// .google.rpc.Status error = 2;
inline bool BatchRecognizeTranscriptionMetadata::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool BatchRecognizeTranscriptionMetadata::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& BatchRecognizeTranscriptionMetadata::_internal_error() const {
  const ::google::rpc::Status* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchRecognizeTranscriptionMetadata::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.error)
  return _internal_error();
}
inline void BatchRecognizeTranscriptionMetadata::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.error)
}
inline ::google::rpc::Status* BatchRecognizeTranscriptionMetadata::release_error() {
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* BatchRecognizeTranscriptionMetadata::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.error)
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchRecognizeTranscriptionMetadata::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::google::rpc::Status* BatchRecognizeTranscriptionMetadata::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.error)
  return _msg;
}
inline void BatchRecognizeTranscriptionMetadata::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.error)
}

// string uri = 3;
inline void BatchRecognizeTranscriptionMetadata::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& BatchRecognizeTranscriptionMetadata::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchRecognizeTranscriptionMetadata::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.uri)
}
inline std::string* BatchRecognizeTranscriptionMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.uri)
  return _s;
}
inline const std::string& BatchRecognizeTranscriptionMetadata::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void BatchRecognizeTranscriptionMetadata::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchRecognizeTranscriptionMetadata::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchRecognizeTranscriptionMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.uri)
  return _impl_.uri_.Release();
}
inline void BatchRecognizeTranscriptionMetadata::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata.uri)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchRecognizeMetadata

// map<string, .google.cloud.speech.v2.BatchRecognizeTranscriptionMetadata> transcription_metadata = 1;
inline int BatchRecognizeMetadata::_internal_transcription_metadata_size() const {
  return _impl_.transcription_metadata_.size();
}
inline int BatchRecognizeMetadata::transcription_metadata_size() const {
  return _internal_transcription_metadata_size();
}
inline void BatchRecognizeMetadata::clear_transcription_metadata() {
  _impl_.transcription_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >&
BatchRecognizeMetadata::_internal_transcription_metadata() const {
  return _impl_.transcription_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >&
BatchRecognizeMetadata::transcription_metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.speech.v2.BatchRecognizeMetadata.transcription_metadata)
  return _internal_transcription_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >*
BatchRecognizeMetadata::_internal_mutable_transcription_metadata() {
  return _impl_.transcription_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::speech::v2::BatchRecognizeTranscriptionMetadata >*
BatchRecognizeMetadata::mutable_transcription_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.speech.v2.BatchRecognizeMetadata.transcription_metadata)
  return _internal_mutable_transcription_metadata();
}

// -------------------------------------------------------------------

// BatchRecognizeFileMetadata

// string uri = 1;
inline bool BatchRecognizeFileMetadata::_internal_has_uri() const {
  return audio_source_case() == kUri;
}
inline bool BatchRecognizeFileMetadata::has_uri() const {
  return _internal_has_uri();
}
inline void BatchRecognizeFileMetadata::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void BatchRecognizeFileMetadata::clear_uri() {
  if (_internal_has_uri()) {
    _impl_.audio_source_.uri_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& BatchRecognizeFileMetadata::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeFileMetadata.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline void BatchRecognizeFileMetadata::set_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.BatchRecognizeFileMetadata.uri)
}
inline std::string* BatchRecognizeFileMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeFileMetadata.uri)
  return _s;
}
inline const std::string& BatchRecognizeFileMetadata::_internal_uri() const {
  if (_internal_has_uri()) {
    return _impl_.audio_source_.uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BatchRecognizeFileMetadata::_internal_set_uri(const std::string& value) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchRecognizeFileMetadata::_internal_mutable_uri() {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  return _impl_.audio_source_.uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* BatchRecognizeFileMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeFileMetadata.uri)
  if (_internal_has_uri()) {
    clear_has_audio_source();
    return _impl_.audio_source_.uri_.Release();
  } else {
    return nullptr;
  }
}
inline void BatchRecognizeFileMetadata::set_allocated_uri(std::string* uri) {
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (uri != nullptr) {
    set_has_uri();
    _impl_.audio_source_.uri_.InitAllocated(uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeFileMetadata.uri)
}

// .google.cloud.speech.v2.RecognitionConfig config = 4;
inline bool BatchRecognizeFileMetadata::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool BatchRecognizeFileMetadata::has_config() const {
  return _internal_has_config();
}
inline void BatchRecognizeFileMetadata::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionConfig& BatchRecognizeFileMetadata::_internal_config() const {
  const ::google::cloud::speech::v2::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionConfig&>(
      ::google::cloud::speech::v2::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionConfig& BatchRecognizeFileMetadata::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeFileMetadata.config)
  return _internal_config();
}
inline void BatchRecognizeFileMetadata::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v2::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeFileMetadata.config)
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeFileMetadata::release_config() {
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeFileMetadata::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeFileMetadata.config)
  
  ::google::cloud::speech::v2::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeFileMetadata::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v2::RecognitionConfig* BatchRecognizeFileMetadata::mutable_config() {
  ::google::cloud::speech::v2::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeFileMetadata.config)
  return _msg;
}
inline void BatchRecognizeFileMetadata::set_allocated_config(::google::cloud::speech::v2::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeFileMetadata.config)
}

// .google.protobuf.FieldMask config_mask = 5;
inline bool BatchRecognizeFileMetadata::_internal_has_config_mask() const {
  return this != internal_default_instance() && _impl_.config_mask_ != nullptr;
}
inline bool BatchRecognizeFileMetadata::has_config_mask() const {
  return _internal_has_config_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchRecognizeFileMetadata::_internal_config_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.config_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& BatchRecognizeFileMetadata::config_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.BatchRecognizeFileMetadata.config_mask)
  return _internal_config_mask();
}
inline void BatchRecognizeFileMetadata::unsafe_arena_set_allocated_config_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  _impl_.config_mask_ = config_mask;
  if (config_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.BatchRecognizeFileMetadata.config_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeFileMetadata::release_config_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeFileMetadata::unsafe_arena_release_config_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.BatchRecognizeFileMetadata.config_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.config_mask_;
  _impl_.config_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeFileMetadata::_internal_mutable_config_mask() {
  
  if (_impl_.config_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.config_mask_ = p;
  }
  return _impl_.config_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* BatchRecognizeFileMetadata::mutable_config_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_config_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.BatchRecognizeFileMetadata.config_mask)
  return _msg;
}
inline void BatchRecognizeFileMetadata::set_allocated_config_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* config_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_mask_);
  }
  if (config_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_mask));
    if (message_arena != submessage_arena) {
      config_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_mask_ = config_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.BatchRecognizeFileMetadata.config_mask)
}

inline bool BatchRecognizeFileMetadata::has_audio_source() const {
  return audio_source_case() != AUDIO_SOURCE_NOT_SET;
}
inline void BatchRecognizeFileMetadata::clear_has_audio_source() {
  _impl_._oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}
inline BatchRecognizeFileMetadata::AudioSourceCase BatchRecognizeFileMetadata::audio_source_case() const {
  return BatchRecognizeFileMetadata::AudioSourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingRecognitionResult

// repeated .google.cloud.speech.v2.SpeechRecognitionAlternative alternatives = 1;
inline int StreamingRecognitionResult::_internal_alternatives_size() const {
  return _impl_.alternatives_.size();
}
inline int StreamingRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void StreamingRecognitionResult::clear_alternatives() {
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* StreamingRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionResult.alternatives)
  return _impl_.alternatives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >*
StreamingRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.StreamingRecognitionResult.alternatives)
  return &_impl_.alternatives_;
}
inline const ::google::cloud::speech::v2::SpeechRecognitionAlternative& StreamingRecognitionResult::_internal_alternatives(int index) const {
  return _impl_.alternatives_.Get(index);
}
inline const ::google::cloud::speech::v2::SpeechRecognitionAlternative& StreamingRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.alternatives)
  return _internal_alternatives(index);
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* StreamingRecognitionResult::_internal_add_alternatives() {
  return _impl_.alternatives_.Add();
}
inline ::google::cloud::speech::v2::SpeechRecognitionAlternative* StreamingRecognitionResult::add_alternatives() {
  ::google::cloud::speech::v2::SpeechRecognitionAlternative* _add = _internal_add_alternatives();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.StreamingRecognitionResult.alternatives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::SpeechRecognitionAlternative >&
StreamingRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.StreamingRecognitionResult.alternatives)
  return _impl_.alternatives_;
}

// bool is_final = 2;
inline void StreamingRecognitionResult::clear_is_final() {
  _impl_.is_final_ = false;
}
inline bool StreamingRecognitionResult::_internal_is_final() const {
  return _impl_.is_final_;
}
inline bool StreamingRecognitionResult::is_final() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.is_final)
  return _internal_is_final();
}
inline void StreamingRecognitionResult::_internal_set_is_final(bool value) {
  
  _impl_.is_final_ = value;
}
inline void StreamingRecognitionResult::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionResult.is_final)
}

// float stability = 3;
inline void StreamingRecognitionResult::clear_stability() {
  _impl_.stability_ = 0;
}
inline float StreamingRecognitionResult::_internal_stability() const {
  return _impl_.stability_;
}
inline float StreamingRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.stability)
  return _internal_stability();
}
inline void StreamingRecognitionResult::_internal_set_stability(float value) {
  
  _impl_.stability_ = value;
}
inline void StreamingRecognitionResult::set_stability(float value) {
  _internal_set_stability(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionResult.stability)
}

// .google.protobuf.Duration result_end_offset = 4;
inline bool StreamingRecognitionResult::_internal_has_result_end_offset() const {
  return this != internal_default_instance() && _impl_.result_end_offset_ != nullptr;
}
inline bool StreamingRecognitionResult::has_result_end_offset() const {
  return _internal_has_result_end_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::_internal_result_end_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.result_end_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::result_end_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.result_end_offset)
  return _internal_result_end_offset();
}
inline void StreamingRecognitionResult::unsafe_arena_set_allocated_result_end_offset(
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_offset_);
  }
  _impl_.result_end_offset_ = result_end_offset;
  if (result_end_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognitionResult.result_end_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::release_result_end_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_offset_;
  _impl_.result_end_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::unsafe_arena_release_result_end_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionResult.result_end_offset)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_offset_;
  _impl_.result_end_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::_internal_mutable_result_end_offset() {
  
  if (_impl_.result_end_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.result_end_offset_ = p;
  }
  return _impl_.result_end_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::mutable_result_end_offset() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_result_end_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionResult.result_end_offset)
  return _msg;
}
inline void StreamingRecognitionResult::set_allocated_result_end_offset(::PROTOBUF_NAMESPACE_ID::Duration* result_end_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_offset_);
  }
  if (result_end_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_end_offset));
    if (message_arena != submessage_arena) {
      result_end_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_end_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_end_offset_ = result_end_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionResult.result_end_offset)
}

// int32 channel_tag = 5;
inline void StreamingRecognitionResult::clear_channel_tag() {
  _impl_.channel_tag_ = 0;
}
inline int32_t StreamingRecognitionResult::_internal_channel_tag() const {
  return _impl_.channel_tag_;
}
inline int32_t StreamingRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void StreamingRecognitionResult::_internal_set_channel_tag(int32_t value) {
  
  _impl_.channel_tag_ = value;
}
inline void StreamingRecognitionResult::set_channel_tag(int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionResult.channel_tag)
}

// string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void StreamingRecognitionResult::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& StreamingRecognitionResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamingRecognitionResult::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognitionResult.language_code)
}
inline std::string* StreamingRecognitionResult::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognitionResult.language_code)
  return _s;
}
inline const std::string& StreamingRecognitionResult::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void StreamingRecognitionResult::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingRecognitionResult::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamingRecognitionResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void StreamingRecognitionResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// StreamingRecognizeResponse

// repeated .google.cloud.speech.v2.StreamingRecognitionResult results = 6;
inline int StreamingRecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int StreamingRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void StreamingRecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v2::StreamingRecognitionResult* StreamingRecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::StreamingRecognitionResult >*
StreamingRecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.StreamingRecognizeResponse.results)
  return &_impl_.results_;
}
inline const ::google::cloud::speech::v2::StreamingRecognitionResult& StreamingRecognizeResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::google::cloud::speech::v2::StreamingRecognitionResult& StreamingRecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeResponse.results)
  return _internal_results(index);
}
inline ::google::cloud::speech::v2::StreamingRecognitionResult* StreamingRecognizeResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::google::cloud::speech::v2::StreamingRecognitionResult* StreamingRecognizeResponse::add_results() {
  ::google::cloud::speech::v2::StreamingRecognitionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.StreamingRecognizeResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::StreamingRecognitionResult >&
StreamingRecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.StreamingRecognizeResponse.results)
  return _impl_.results_;
}

// .google.cloud.speech.v2.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;
inline void StreamingRecognizeResponse::clear_speech_event_type() {
  _impl_.speech_event_type_ = 0;
}
inline ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::_internal_speech_event_type() const {
  return static_cast< ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType >(_impl_.speech_event_type_);
}
inline ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::speech_event_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_type)
  return _internal_speech_event_type();
}
inline void StreamingRecognizeResponse::_internal_set_speech_event_type(::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType value) {
  
  _impl_.speech_event_type_ = value;
}
inline void StreamingRecognizeResponse::set_speech_event_type(::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType value) {
  _internal_set_speech_event_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_type)
}

// .google.protobuf.Duration speech_event_offset = 7;
inline bool StreamingRecognizeResponse::_internal_has_speech_event_offset() const {
  return this != internal_default_instance() && _impl_.speech_event_offset_ != nullptr;
}
inline bool StreamingRecognizeResponse::has_speech_event_offset() const {
  return _internal_has_speech_event_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognizeResponse::_internal_speech_event_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.speech_event_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognizeResponse::speech_event_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_offset)
  return _internal_speech_event_offset();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_speech_event_offset(
    ::PROTOBUF_NAMESPACE_ID::Duration* speech_event_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_event_offset_);
  }
  _impl_.speech_event_offset_ = speech_event_offset;
  if (speech_event_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::release_speech_event_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_event_offset_;
  _impl_.speech_event_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::unsafe_arena_release_speech_event_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_offset)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.speech_event_offset_;
  _impl_.speech_event_offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::_internal_mutable_speech_event_offset() {
  
  if (_impl_.speech_event_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.speech_event_offset_ = p;
  }
  return _impl_.speech_event_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::mutable_speech_event_offset() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_speech_event_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_offset)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_speech_event_offset(::PROTOBUF_NAMESPACE_ID::Duration* speech_event_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speech_event_offset_);
  }
  if (speech_event_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_event_offset));
    if (message_arena != submessage_arena) {
      speech_event_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_event_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speech_event_offset_ = speech_event_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognizeResponse.speech_event_offset)
}

// .google.cloud.speech.v2.RecognitionResponseMetadata metadata = 5;
inline bool StreamingRecognizeResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool StreamingRecognizeResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void StreamingRecognizeResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::cloud::speech::v2::RecognitionResponseMetadata& StreamingRecognizeResponse::_internal_metadata() const {
  const ::google::cloud::speech::v2::RecognitionResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::RecognitionResponseMetadata&>(
      ::google::cloud::speech::v2::_RecognitionResponseMetadata_default_instance_);
}
inline const ::google::cloud::speech::v2::RecognitionResponseMetadata& StreamingRecognizeResponse::metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.StreamingRecognizeResponse.metadata)
  return _internal_metadata();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_metadata(
    ::google::cloud::speech::v2::RecognitionResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.StreamingRecognizeResponse.metadata)
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* StreamingRecognizeResponse::release_metadata() {
  
  ::google::cloud::speech::v2::RecognitionResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* StreamingRecognizeResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.StreamingRecognizeResponse.metadata)
  
  ::google::cloud::speech::v2::RecognitionResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* StreamingRecognizeResponse::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::RecognitionResponseMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::cloud::speech::v2::RecognitionResponseMetadata* StreamingRecognizeResponse::mutable_metadata() {
  ::google::cloud::speech::v2::RecognitionResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.StreamingRecognizeResponse.metadata)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_metadata(::google::cloud::speech::v2::RecognitionResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.StreamingRecognizeResponse.metadata)
}

// -------------------------------------------------------------------

// Config

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Config::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Config::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Config.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Config.name)
}
inline std::string* Config::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Config.name)
  return _s;
}
inline const std::string& Config::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Config::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Config.name)
  return _impl_.name_.Release();
}
inline void Config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Config.name)
}

// string kms_key_name = 2 [(.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {
inline void Config::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& Config::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Config.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.Config.kms_key_name)
}
inline std::string* Config::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Config.kms_key_name)
  return _s;
}
inline const std::string& Config::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void Config::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Config.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void Config::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Config.kms_key_name)
}

// .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Config::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Config::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Config::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Config::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.Config.update_time)
  return _internal_update_time();
}
inline void Config::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.Config.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Config::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Config::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.Config.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Config::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Config::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.Config.update_time)
  return _msg;
}
inline void Config::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.Config.update_time)
}

// -------------------------------------------------------------------

// GetConfigRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetConfigRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.GetConfigRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConfigRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.GetConfigRequest.name)
}
inline std::string* GetConfigRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.GetConfigRequest.name)
  return _s;
}
inline const std::string& GetConfigRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetConfigRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConfigRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.GetConfigRequest.name)
  return _impl_.name_.Release();
}
inline void GetConfigRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.GetConfigRequest.name)
}

// -------------------------------------------------------------------

// UpdateConfigRequest

// .google.cloud.speech.v2.Config config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateConfigRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool UpdateConfigRequest::has_config() const {
  return _internal_has_config();
}
inline void UpdateConfigRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v2::Config& UpdateConfigRequest::_internal_config() const {
  const ::google::cloud::speech::v2::Config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::Config&>(
      ::google::cloud::speech::v2::_Config_default_instance_);
}
inline const ::google::cloud::speech::v2::Config& UpdateConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateConfigRequest.config)
  return _internal_config();
}
inline void UpdateConfigRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v2::Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateConfigRequest.config)
}
inline ::google::cloud::speech::v2::Config* UpdateConfigRequest::release_config() {
  
  ::google::cloud::speech::v2::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::Config* UpdateConfigRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateConfigRequest.config)
  
  ::google::cloud::speech::v2::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::Config* UpdateConfigRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::Config>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v2::Config* UpdateConfigRequest::mutable_config() {
  ::google::cloud::speech::v2::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateConfigRequest.config)
  return _msg;
}
inline void UpdateConfigRequest::set_allocated_config(::google::cloud::speech::v2::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateConfigRequest.config)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateConfigRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateConfigRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConfigRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConfigRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateConfigRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateConfigRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateConfigRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConfigRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConfigRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateConfigRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConfigRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConfigRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateConfigRequest.update_mask)
  return _msg;
}
inline void UpdateConfigRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateConfigRequest.update_mask)
}

// -------------------------------------------------------------------

// CustomClass_ClassItem

// string value = 1;
inline void CustomClass_ClassItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& CustomClass_ClassItem::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.ClassItem.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass_ClassItem::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.ClassItem.value)
}
inline std::string* CustomClass_ClassItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.ClassItem.value)
  return _s;
}
inline const std::string& CustomClass_ClassItem::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CustomClass_ClassItem::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass_ClassItem::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass_ClassItem::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.ClassItem.value)
  return _impl_.value_.Release();
}
inline void CustomClass_ClassItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.ClassItem.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CustomClass

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomClass::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CustomClass::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.name)
}
inline std::string* CustomClass::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.name)
  return _s;
}
inline const std::string& CustomClass::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomClass::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.name)
  return _impl_.name_.Release();
}
inline void CustomClass::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.name)
}

// string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomClass::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CustomClass::uid() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.uid)
}
inline std::string* CustomClass::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.uid)
  return _s;
}
inline const std::string& CustomClass::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void CustomClass::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_uid() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.uid)
  return _impl_.uid_.Release();
}
inline void CustomClass::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.uid)
}

// string display_name = 4;
inline void CustomClass::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& CustomClass::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.display_name)
}
inline std::string* CustomClass::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.display_name)
  return _s;
}
inline const std::string& CustomClass::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void CustomClass::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.display_name)
  return _impl_.display_name_.Release();
}
inline void CustomClass::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.display_name)
}

// repeated .google.cloud.speech.v2.CustomClass.ClassItem items = 5;
inline int CustomClass::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CustomClass::items_size() const {
  return _internal_items_size();
}
inline void CustomClass::clear_items() {
  _impl_.items_.Clear();
}
inline ::google::cloud::speech::v2::CustomClass_ClassItem* CustomClass::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass_ClassItem >*
CustomClass::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.CustomClass.items)
  return &_impl_.items_;
}
inline const ::google::cloud::speech::v2::CustomClass_ClassItem& CustomClass::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::google::cloud::speech::v2::CustomClass_ClassItem& CustomClass::items(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.items)
  return _internal_items(index);
}
inline ::google::cloud::speech::v2::CustomClass_ClassItem* CustomClass::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::google::cloud::speech::v2::CustomClass_ClassItem* CustomClass::add_items() {
  ::google::cloud::speech::v2::CustomClass_ClassItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.CustomClass.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass_ClassItem >&
CustomClass::items() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.CustomClass.items)
  return _impl_.items_;
}

// .google.cloud.speech.v2.CustomClass.State state = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomClass::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::speech::v2::CustomClass_State CustomClass::_internal_state() const {
  return static_cast< ::google::cloud::speech::v2::CustomClass_State >(_impl_.state_);
}
inline ::google::cloud::speech::v2::CustomClass_State CustomClass::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.state)
  return _internal_state();
}
inline void CustomClass::_internal_set_state(::google::cloud::speech::v2::CustomClass_State value) {
  
  _impl_.state_ = value;
}
inline void CustomClass::set_state(::google::cloud::speech::v2::CustomClass_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.state)
}

// .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CustomClass::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool CustomClass::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.create_time)
  return _internal_create_time();
}
inline void CustomClass::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CustomClass.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.create_time)
  return _msg;
}
inline void CustomClass::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.create_time)
}

// .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CustomClass::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool CustomClass::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.update_time)
  return _internal_update_time();
}
inline void CustomClass::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CustomClass.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.update_time)
  return _msg;
}
inline void CustomClass::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.update_time)
}

// .google.protobuf.Timestamp delete_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CustomClass::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool CustomClass::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::delete_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.delete_time)
  return _internal_delete_time();
}
inline void CustomClass::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CustomClass.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.delete_time)
  return _msg;
}
inline void CustomClass::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.delete_time)
}

// .google.protobuf.Timestamp expire_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool CustomClass::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool CustomClass::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CustomClass::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.expire_time)
  return _internal_expire_time();
}
inline void CustomClass::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CustomClass.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CustomClass::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.expire_time)
  return _msg;
}
inline void CustomClass::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.expire_time)
}

// map<string, string> annotations = 10;
inline int CustomClass::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int CustomClass::annotations_size() const {
  return _internal_annotations_size();
}
inline void CustomClass::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CustomClass::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CustomClass::annotations() const {
  // @@protoc_insertion_point(field_map:google.cloud.speech.v2.CustomClass.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CustomClass::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CustomClass::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.speech.v2.CustomClass.annotations)
  return _internal_mutable_annotations();
}

// string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomClass::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& CustomClass::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.etag)
}
inline std::string* CustomClass::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.etag)
  return _s;
}
inline const std::string& CustomClass::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void CustomClass::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.etag)
  return _impl_.etag_.Release();
}
inline void CustomClass::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.etag)
}

// bool reconciling = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomClass::clear_reconciling() {
  _impl_.reconciling_ = false;
}
inline bool CustomClass::_internal_reconciling() const {
  return _impl_.reconciling_;
}
inline bool CustomClass::reconciling() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.reconciling)
  return _internal_reconciling();
}
inline void CustomClass::_internal_set_reconciling(bool value) {
  
  _impl_.reconciling_ = value;
}
inline void CustomClass::set_reconciling(bool value) {
  _internal_set_reconciling(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.reconciling)
}

// string kms_key_name = 13 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void CustomClass::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& CustomClass::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.kms_key_name)
}
inline std::string* CustomClass::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.kms_key_name)
  return _s;
}
inline const std::string& CustomClass::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void CustomClass::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void CustomClass::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.kms_key_name)
}

// string kms_key_version_name = 14 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void CustomClass::clear_kms_key_version_name() {
  _impl_.kms_key_version_name_.ClearToEmpty();
}
inline const std::string& CustomClass::kms_key_version_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CustomClass.kms_key_version_name)
  return _internal_kms_key_version_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_kms_key_version_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_version_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CustomClass.kms_key_version_name)
}
inline std::string* CustomClass::mutable_kms_key_version_name() {
  std::string* _s = _internal_mutable_kms_key_version_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CustomClass.kms_key_version_name)
  return _s;
}
inline const std::string& CustomClass::_internal_kms_key_version_name() const {
  return _impl_.kms_key_version_name_.Get();
}
inline void CustomClass::_internal_set_kms_key_version_name(const std::string& value) {
  
  _impl_.kms_key_version_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_kms_key_version_name() {
  
  return _impl_.kms_key_version_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_kms_key_version_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CustomClass.kms_key_version_name)
  return _impl_.kms_key_version_name_.Release();
}
inline void CustomClass::set_allocated_kms_key_version_name(std::string* kms_key_version_name) {
  if (kms_key_version_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_version_name_.SetAllocated(kms_key_version_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_version_name_.IsDefault()) {
    _impl_.kms_key_version_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CustomClass.kms_key_version_name)
}

// -------------------------------------------------------------------

// PhraseSet_Phrase

// string value = 1;
inline void PhraseSet_Phrase::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PhraseSet_Phrase::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.Phrase.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet_Phrase::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.Phrase.value)
}
inline std::string* PhraseSet_Phrase::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.Phrase.value)
  return _s;
}
inline const std::string& PhraseSet_Phrase::_internal_value() const {
  return _impl_.value_.Get();
}
inline void PhraseSet_Phrase::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet_Phrase::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet_Phrase::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.Phrase.value)
  return _impl_.value_.Release();
}
inline void PhraseSet_Phrase::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.Phrase.value)
}

// float boost = 2;
inline void PhraseSet_Phrase::clear_boost() {
  _impl_.boost_ = 0;
}
inline float PhraseSet_Phrase::_internal_boost() const {
  return _impl_.boost_;
}
inline float PhraseSet_Phrase::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.Phrase.boost)
  return _internal_boost();
}
inline void PhraseSet_Phrase::_internal_set_boost(float value) {
  
  _impl_.boost_ = value;
}
inline void PhraseSet_Phrase::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.Phrase.boost)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PhraseSet

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void PhraseSet::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PhraseSet::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.name)
}
inline std::string* PhraseSet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.name)
  return _s;
}
inline const std::string& PhraseSet::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PhraseSet::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.name)
  return _impl_.name_.Release();
}
inline void PhraseSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.name)
}

// string uid = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void PhraseSet::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& PhraseSet::uid() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.uid)
}
inline std::string* PhraseSet::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.uid)
  return _s;
}
inline const std::string& PhraseSet::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void PhraseSet::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_uid() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.uid)
  return _impl_.uid_.Release();
}
inline void PhraseSet::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.uid)
}

// repeated .google.cloud.speech.v2.PhraseSet.Phrase phrases = 3;
inline int PhraseSet::_internal_phrases_size() const {
  return _impl_.phrases_.size();
}
inline int PhraseSet::phrases_size() const {
  return _internal_phrases_size();
}
inline void PhraseSet::clear_phrases() {
  _impl_.phrases_.Clear();
}
inline ::google::cloud::speech::v2::PhraseSet_Phrase* PhraseSet::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.phrases)
  return _impl_.phrases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet_Phrase >*
PhraseSet::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.PhraseSet.phrases)
  return &_impl_.phrases_;
}
inline const ::google::cloud::speech::v2::PhraseSet_Phrase& PhraseSet::_internal_phrases(int index) const {
  return _impl_.phrases_.Get(index);
}
inline const ::google::cloud::speech::v2::PhraseSet_Phrase& PhraseSet::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.phrases)
  return _internal_phrases(index);
}
inline ::google::cloud::speech::v2::PhraseSet_Phrase* PhraseSet::_internal_add_phrases() {
  return _impl_.phrases_.Add();
}
inline ::google::cloud::speech::v2::PhraseSet_Phrase* PhraseSet::add_phrases() {
  ::google::cloud::speech::v2::PhraseSet_Phrase* _add = _internal_add_phrases();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.PhraseSet.phrases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet_Phrase >&
PhraseSet::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.PhraseSet.phrases)
  return _impl_.phrases_;
}

// float boost = 4;
inline void PhraseSet::clear_boost() {
  _impl_.boost_ = 0;
}
inline float PhraseSet::_internal_boost() const {
  return _impl_.boost_;
}
inline float PhraseSet::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.boost)
  return _internal_boost();
}
inline void PhraseSet::_internal_set_boost(float value) {
  
  _impl_.boost_ = value;
}
inline void PhraseSet::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.boost)
}

// string display_name = 5;
inline void PhraseSet::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& PhraseSet::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.display_name)
}
inline std::string* PhraseSet::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.display_name)
  return _s;
}
inline const std::string& PhraseSet::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void PhraseSet::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.display_name)
  return _impl_.display_name_.Release();
}
inline void PhraseSet::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.display_name)
}

// .google.cloud.speech.v2.PhraseSet.State state = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void PhraseSet::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::speech::v2::PhraseSet_State PhraseSet::_internal_state() const {
  return static_cast< ::google::cloud::speech::v2::PhraseSet_State >(_impl_.state_);
}
inline ::google::cloud::speech::v2::PhraseSet_State PhraseSet::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.state)
  return _internal_state();
}
inline void PhraseSet::_internal_set_state(::google::cloud::speech::v2::PhraseSet_State value) {
  
  _impl_.state_ = value;
}
inline void PhraseSet::set_state(::google::cloud::speech::v2::PhraseSet_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.state)
}

// .google.protobuf.Timestamp create_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool PhraseSet::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool PhraseSet::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.create_time)
  return _internal_create_time();
}
inline void PhraseSet::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.PhraseSet.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.create_time)
  return _msg;
}
inline void PhraseSet::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.create_time)
}

// .google.protobuf.Timestamp update_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool PhraseSet::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool PhraseSet::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.update_time)
  return _internal_update_time();
}
inline void PhraseSet::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.PhraseSet.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.update_time)
  return _msg;
}
inline void PhraseSet::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.update_time)
}

// .google.protobuf.Timestamp delete_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool PhraseSet::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool PhraseSet::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::delete_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.delete_time)
  return _internal_delete_time();
}
inline void PhraseSet::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.PhraseSet.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.delete_time)
  return _msg;
}
inline void PhraseSet::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.delete_time)
}

// .google.protobuf.Timestamp expire_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool PhraseSet::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool PhraseSet::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PhraseSet::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.expire_time)
  return _internal_expire_time();
}
inline void PhraseSet::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.PhraseSet.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PhraseSet::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.expire_time)
  return _msg;
}
inline void PhraseSet::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.expire_time)
}

// map<string, string> annotations = 10;
inline int PhraseSet::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int PhraseSet::annotations_size() const {
  return _internal_annotations_size();
}
inline void PhraseSet::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PhraseSet::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PhraseSet::annotations() const {
  // @@protoc_insertion_point(field_map:google.cloud.speech.v2.PhraseSet.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PhraseSet::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PhraseSet::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.speech.v2.PhraseSet.annotations)
  return _internal_mutable_annotations();
}

// string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void PhraseSet::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& PhraseSet::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.etag)
}
inline std::string* PhraseSet::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.etag)
  return _s;
}
inline const std::string& PhraseSet::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void PhraseSet::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.etag)
  return _impl_.etag_.Release();
}
inline void PhraseSet::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.etag)
}

// bool reconciling = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void PhraseSet::clear_reconciling() {
  _impl_.reconciling_ = false;
}
inline bool PhraseSet::_internal_reconciling() const {
  return _impl_.reconciling_;
}
inline bool PhraseSet::reconciling() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.reconciling)
  return _internal_reconciling();
}
inline void PhraseSet::_internal_set_reconciling(bool value) {
  
  _impl_.reconciling_ = value;
}
inline void PhraseSet::set_reconciling(bool value) {
  _internal_set_reconciling(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.reconciling)
}

// string kms_key_name = 13 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void PhraseSet::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& PhraseSet::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.kms_key_name)
}
inline std::string* PhraseSet::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.kms_key_name)
  return _s;
}
inline const std::string& PhraseSet::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void PhraseSet::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void PhraseSet::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.kms_key_name)
}

// string kms_key_version_name = 14 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.resource_reference) = {
inline void PhraseSet::clear_kms_key_version_name() {
  _impl_.kms_key_version_name_.ClearToEmpty();
}
inline const std::string& PhraseSet::kms_key_version_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.PhraseSet.kms_key_version_name)
  return _internal_kms_key_version_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_kms_key_version_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_version_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.PhraseSet.kms_key_version_name)
}
inline std::string* PhraseSet::mutable_kms_key_version_name() {
  std::string* _s = _internal_mutable_kms_key_version_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.PhraseSet.kms_key_version_name)
  return _s;
}
inline const std::string& PhraseSet::_internal_kms_key_version_name() const {
  return _impl_.kms_key_version_name_.Get();
}
inline void PhraseSet::_internal_set_kms_key_version_name(const std::string& value) {
  
  _impl_.kms_key_version_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_kms_key_version_name() {
  
  return _impl_.kms_key_version_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_kms_key_version_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.PhraseSet.kms_key_version_name)
  return _impl_.kms_key_version_name_.Release();
}
inline void PhraseSet::set_allocated_kms_key_version_name(std::string* kms_key_version_name) {
  if (kms_key_version_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_version_name_.SetAllocated(kms_key_version_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_version_name_.IsDefault()) {
    _impl_.kms_key_version_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.PhraseSet.kms_key_version_name)
}

// -------------------------------------------------------------------

// CreateCustomClassRequest

// .google.cloud.speech.v2.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateCustomClassRequest::_internal_has_custom_class() const {
  return this != internal_default_instance() && _impl_.custom_class_ != nullptr;
}
inline bool CreateCustomClassRequest::has_custom_class() const {
  return _internal_has_custom_class();
}
inline void CreateCustomClassRequest::clear_custom_class() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_class_ != nullptr) {
    delete _impl_.custom_class_;
  }
  _impl_.custom_class_ = nullptr;
}
inline const ::google::cloud::speech::v2::CustomClass& CreateCustomClassRequest::_internal_custom_class() const {
  const ::google::cloud::speech::v2::CustomClass* p = _impl_.custom_class_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::CustomClass&>(
      ::google::cloud::speech::v2::_CustomClass_default_instance_);
}
inline const ::google::cloud::speech::v2::CustomClass& CreateCustomClassRequest::custom_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateCustomClassRequest.custom_class)
  return _internal_custom_class();
}
inline void CreateCustomClassRequest::unsafe_arena_set_allocated_custom_class(
    ::google::cloud::speech::v2::CustomClass* custom_class) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  _impl_.custom_class_ = custom_class;
  if (custom_class) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CreateCustomClassRequest.custom_class)
}
inline ::google::cloud::speech::v2::CustomClass* CreateCustomClassRequest::release_custom_class() {
  
  ::google::cloud::speech::v2::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::CustomClass* CreateCustomClassRequest::unsafe_arena_release_custom_class() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateCustomClassRequest.custom_class)
  
  ::google::cloud::speech::v2::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::CustomClass* CreateCustomClassRequest::_internal_mutable_custom_class() {
  
  if (_impl_.custom_class_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::CustomClass>(GetArenaForAllocation());
    _impl_.custom_class_ = p;
  }
  return _impl_.custom_class_;
}
inline ::google::cloud::speech::v2::CustomClass* CreateCustomClassRequest::mutable_custom_class() {
  ::google::cloud::speech::v2::CustomClass* _msg = _internal_mutable_custom_class();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateCustomClassRequest.custom_class)
  return _msg;
}
inline void CreateCustomClassRequest::set_allocated_custom_class(::google::cloud::speech::v2::CustomClass* custom_class) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_class_;
  }
  if (custom_class) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_class);
    if (message_arena != submessage_arena) {
      custom_class = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_class, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_class_ = custom_class;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateCustomClassRequest.custom_class)
}

// bool validate_only = 2;
inline void CreateCustomClassRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool CreateCustomClassRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool CreateCustomClassRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateCustomClassRequest.validate_only)
  return _internal_validate_only();
}
inline void CreateCustomClassRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void CreateCustomClassRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateCustomClassRequest.validate_only)
}

// string custom_class_id = 3;
inline void CreateCustomClassRequest::clear_custom_class_id() {
  _impl_.custom_class_id_.ClearToEmpty();
}
inline const std::string& CreateCustomClassRequest::custom_class_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateCustomClassRequest.custom_class_id)
  return _internal_custom_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCustomClassRequest::set_custom_class_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.custom_class_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateCustomClassRequest.custom_class_id)
}
inline std::string* CreateCustomClassRequest::mutable_custom_class_id() {
  std::string* _s = _internal_mutable_custom_class_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateCustomClassRequest.custom_class_id)
  return _s;
}
inline const std::string& CreateCustomClassRequest::_internal_custom_class_id() const {
  return _impl_.custom_class_id_.Get();
}
inline void CreateCustomClassRequest::_internal_set_custom_class_id(const std::string& value) {
  
  _impl_.custom_class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::_internal_mutable_custom_class_id() {
  
  return _impl_.custom_class_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::release_custom_class_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateCustomClassRequest.custom_class_id)
  return _impl_.custom_class_id_.Release();
}
inline void CreateCustomClassRequest::set_allocated_custom_class_id(std::string* custom_class_id) {
  if (custom_class_id != nullptr) {
    
  } else {
    
  }
  _impl_.custom_class_id_.SetAllocated(custom_class_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_class_id_.IsDefault()) {
    _impl_.custom_class_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateCustomClassRequest.custom_class_id)
}

// string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCustomClassRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateCustomClassRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreateCustomClassRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCustomClassRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreateCustomClassRequest.parent)
}
inline std::string* CreateCustomClassRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreateCustomClassRequest.parent)
  return _s;
}
inline const std::string& CreateCustomClassRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateCustomClassRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreateCustomClassRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateCustomClassRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreateCustomClassRequest.parent)
}

// -------------------------------------------------------------------

// ListCustomClassesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCustomClassesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListCustomClassesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListCustomClassesRequest.parent)
}
inline std::string* ListCustomClassesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListCustomClassesRequest.parent)
  return _s;
}
inline const std::string& ListCustomClassesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListCustomClassesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListCustomClassesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListCustomClassesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListCustomClassesRequest.parent)
}

// int32 page_size = 2;
inline void ListCustomClassesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListCustomClassesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListCustomClassesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesRequest.page_size)
  return _internal_page_size();
}
inline void ListCustomClassesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListCustomClassesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListCustomClassesRequest.page_size)
}

// string page_token = 3;
inline void ListCustomClassesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListCustomClassesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListCustomClassesRequest.page_token)
}
inline std::string* ListCustomClassesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListCustomClassesRequest.page_token)
  return _s;
}
inline const std::string& ListCustomClassesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListCustomClassesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListCustomClassesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListCustomClassesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListCustomClassesRequest.page_token)
}

// bool show_deleted = 4;
inline void ListCustomClassesRequest::clear_show_deleted() {
  _impl_.show_deleted_ = false;
}
inline bool ListCustomClassesRequest::_internal_show_deleted() const {
  return _impl_.show_deleted_;
}
inline bool ListCustomClassesRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesRequest.show_deleted)
  return _internal_show_deleted();
}
inline void ListCustomClassesRequest::_internal_set_show_deleted(bool value) {
  
  _impl_.show_deleted_ = value;
}
inline void ListCustomClassesRequest::set_show_deleted(bool value) {
  _internal_set_show_deleted(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListCustomClassesRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListCustomClassesResponse

// repeated .google.cloud.speech.v2.CustomClass custom_classes = 1;
inline int ListCustomClassesResponse::_internal_custom_classes_size() const {
  return _impl_.custom_classes_.size();
}
inline int ListCustomClassesResponse::custom_classes_size() const {
  return _internal_custom_classes_size();
}
inline void ListCustomClassesResponse::clear_custom_classes() {
  _impl_.custom_classes_.Clear();
}
inline ::google::cloud::speech::v2::CustomClass* ListCustomClassesResponse::mutable_custom_classes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListCustomClassesResponse.custom_classes)
  return _impl_.custom_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >*
ListCustomClassesResponse::mutable_custom_classes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.ListCustomClassesResponse.custom_classes)
  return &_impl_.custom_classes_;
}
inline const ::google::cloud::speech::v2::CustomClass& ListCustomClassesResponse::_internal_custom_classes(int index) const {
  return _impl_.custom_classes_.Get(index);
}
inline const ::google::cloud::speech::v2::CustomClass& ListCustomClassesResponse::custom_classes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesResponse.custom_classes)
  return _internal_custom_classes(index);
}
inline ::google::cloud::speech::v2::CustomClass* ListCustomClassesResponse::_internal_add_custom_classes() {
  return _impl_.custom_classes_.Add();
}
inline ::google::cloud::speech::v2::CustomClass* ListCustomClassesResponse::add_custom_classes() {
  ::google::cloud::speech::v2::CustomClass* _add = _internal_add_custom_classes();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.ListCustomClassesResponse.custom_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::CustomClass >&
ListCustomClassesResponse::custom_classes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.ListCustomClassesResponse.custom_classes)
  return _impl_.custom_classes_;
}

// string next_page_token = 2;
inline void ListCustomClassesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListCustomClassesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListCustomClassesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListCustomClassesResponse.next_page_token)
}
inline std::string* ListCustomClassesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListCustomClassesResponse.next_page_token)
  return _s;
}
inline const std::string& ListCustomClassesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListCustomClassesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListCustomClassesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListCustomClassesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListCustomClassesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetCustomClassRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCustomClassRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCustomClassRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.GetCustomClassRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCustomClassRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.GetCustomClassRequest.name)
}
inline std::string* GetCustomClassRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.GetCustomClassRequest.name)
  return _s;
}
inline const std::string& GetCustomClassRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetCustomClassRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomClassRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCustomClassRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.GetCustomClassRequest.name)
  return _impl_.name_.Release();
}
inline void GetCustomClassRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.GetCustomClassRequest.name)
}

// -------------------------------------------------------------------

// UpdateCustomClassRequest

// .google.cloud.speech.v2.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCustomClassRequest::_internal_has_custom_class() const {
  return this != internal_default_instance() && _impl_.custom_class_ != nullptr;
}
inline bool UpdateCustomClassRequest::has_custom_class() const {
  return _internal_has_custom_class();
}
inline void UpdateCustomClassRequest::clear_custom_class() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_class_ != nullptr) {
    delete _impl_.custom_class_;
  }
  _impl_.custom_class_ = nullptr;
}
inline const ::google::cloud::speech::v2::CustomClass& UpdateCustomClassRequest::_internal_custom_class() const {
  const ::google::cloud::speech::v2::CustomClass* p = _impl_.custom_class_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::CustomClass&>(
      ::google::cloud::speech::v2::_CustomClass_default_instance_);
}
inline const ::google::cloud::speech::v2::CustomClass& UpdateCustomClassRequest::custom_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateCustomClassRequest.custom_class)
  return _internal_custom_class();
}
inline void UpdateCustomClassRequest::unsafe_arena_set_allocated_custom_class(
    ::google::cloud::speech::v2::CustomClass* custom_class) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  _impl_.custom_class_ = custom_class;
  if (custom_class) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateCustomClassRequest.custom_class)
}
inline ::google::cloud::speech::v2::CustomClass* UpdateCustomClassRequest::release_custom_class() {
  
  ::google::cloud::speech::v2::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::CustomClass* UpdateCustomClassRequest::unsafe_arena_release_custom_class() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateCustomClassRequest.custom_class)
  
  ::google::cloud::speech::v2::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::CustomClass* UpdateCustomClassRequest::_internal_mutable_custom_class() {
  
  if (_impl_.custom_class_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::CustomClass>(GetArenaForAllocation());
    _impl_.custom_class_ = p;
  }
  return _impl_.custom_class_;
}
inline ::google::cloud::speech::v2::CustomClass* UpdateCustomClassRequest::mutable_custom_class() {
  ::google::cloud::speech::v2::CustomClass* _msg = _internal_mutable_custom_class();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateCustomClassRequest.custom_class)
  return _msg;
}
inline void UpdateCustomClassRequest::set_allocated_custom_class(::google::cloud::speech::v2::CustomClass* custom_class) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_class_;
  }
  if (custom_class) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_class);
    if (message_arena != submessage_arena) {
      custom_class = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_class, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_class_ = custom_class;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateCustomClassRequest.custom_class)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateCustomClassRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateCustomClassRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCustomClassRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCustomClassRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateCustomClassRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCustomClassRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdateCustomClassRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdateCustomClassRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdateCustomClassRequest.update_mask)
  return _msg;
}
inline void UpdateCustomClassRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdateCustomClassRequest.update_mask)
}

// bool validate_only = 4;
inline void UpdateCustomClassRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UpdateCustomClassRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UpdateCustomClassRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdateCustomClassRequest.validate_only)
  return _internal_validate_only();
}
inline void UpdateCustomClassRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UpdateCustomClassRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UpdateCustomClassRequest.validate_only)
}

// -------------------------------------------------------------------

// DeleteCustomClassRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCustomClassRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteCustomClassRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteCustomClassRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCustomClassRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteCustomClassRequest.name)
}
inline std::string* DeleteCustomClassRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeleteCustomClassRequest.name)
  return _s;
}
inline const std::string& DeleteCustomClassRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteCustomClassRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeleteCustomClassRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteCustomClassRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeleteCustomClassRequest.name)
}

// bool validate_only = 2;
inline void DeleteCustomClassRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool DeleteCustomClassRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool DeleteCustomClassRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteCustomClassRequest.validate_only)
  return _internal_validate_only();
}
inline void DeleteCustomClassRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void DeleteCustomClassRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteCustomClassRequest.validate_only)
}

// bool allow_missing = 4;
inline void DeleteCustomClassRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeleteCustomClassRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeleteCustomClassRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteCustomClassRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteCustomClassRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeleteCustomClassRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteCustomClassRequest.allow_missing)
}

// string etag = 3;
inline void DeleteCustomClassRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& DeleteCustomClassRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeleteCustomClassRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCustomClassRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeleteCustomClassRequest.etag)
}
inline std::string* DeleteCustomClassRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeleteCustomClassRequest.etag)
  return _s;
}
inline const std::string& DeleteCustomClassRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void DeleteCustomClassRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeleteCustomClassRequest.etag)
  return _impl_.etag_.Release();
}
inline void DeleteCustomClassRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeleteCustomClassRequest.etag)
}

// -------------------------------------------------------------------

// UndeleteCustomClassRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UndeleteCustomClassRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UndeleteCustomClassRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteCustomClassRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeleteCustomClassRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteCustomClassRequest.name)
}
inline std::string* UndeleteCustomClassRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeleteCustomClassRequest.name)
  return _s;
}
inline const std::string& UndeleteCustomClassRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UndeleteCustomClassRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeleteCustomClassRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeleteCustomClassRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeleteCustomClassRequest.name)
  return _impl_.name_.Release();
}
inline void UndeleteCustomClassRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeleteCustomClassRequest.name)
}

// bool validate_only = 3;
inline void UndeleteCustomClassRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UndeleteCustomClassRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UndeleteCustomClassRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteCustomClassRequest.validate_only)
  return _internal_validate_only();
}
inline void UndeleteCustomClassRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UndeleteCustomClassRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteCustomClassRequest.validate_only)
}

// string etag = 4;
inline void UndeleteCustomClassRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& UndeleteCustomClassRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeleteCustomClassRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeleteCustomClassRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeleteCustomClassRequest.etag)
}
inline std::string* UndeleteCustomClassRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeleteCustomClassRequest.etag)
  return _s;
}
inline const std::string& UndeleteCustomClassRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void UndeleteCustomClassRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeleteCustomClassRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeleteCustomClassRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeleteCustomClassRequest.etag)
  return _impl_.etag_.Release();
}
inline void UndeleteCustomClassRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeleteCustomClassRequest.etag)
}

// -------------------------------------------------------------------

// CreatePhraseSetRequest

// .google.cloud.speech.v2.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreatePhraseSetRequest::_internal_has_phrase_set() const {
  return this != internal_default_instance() && _impl_.phrase_set_ != nullptr;
}
inline bool CreatePhraseSetRequest::has_phrase_set() const {
  return _internal_has_phrase_set();
}
inline void CreatePhraseSetRequest::clear_phrase_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.phrase_set_ != nullptr) {
    delete _impl_.phrase_set_;
  }
  _impl_.phrase_set_ = nullptr;
}
inline const ::google::cloud::speech::v2::PhraseSet& CreatePhraseSetRequest::_internal_phrase_set() const {
  const ::google::cloud::speech::v2::PhraseSet* p = _impl_.phrase_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::PhraseSet&>(
      ::google::cloud::speech::v2::_PhraseSet_default_instance_);
}
inline const ::google::cloud::speech::v2::PhraseSet& CreatePhraseSetRequest::phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set)
  return _internal_phrase_set();
}
inline void CreatePhraseSetRequest::unsafe_arena_set_allocated_phrase_set(
    ::google::cloud::speech::v2::PhraseSet* phrase_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  _impl_.phrase_set_ = phrase_set;
  if (phrase_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set)
}
inline ::google::cloud::speech::v2::PhraseSet* CreatePhraseSetRequest::release_phrase_set() {
  
  ::google::cloud::speech::v2::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::PhraseSet* CreatePhraseSetRequest::unsafe_arena_release_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set)
  
  ::google::cloud::speech::v2::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::PhraseSet* CreatePhraseSetRequest::_internal_mutable_phrase_set() {
  
  if (_impl_.phrase_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::PhraseSet>(GetArenaForAllocation());
    _impl_.phrase_set_ = p;
  }
  return _impl_.phrase_set_;
}
inline ::google::cloud::speech::v2::PhraseSet* CreatePhraseSetRequest::mutable_phrase_set() {
  ::google::cloud::speech::v2::PhraseSet* _msg = _internal_mutable_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set)
  return _msg;
}
inline void CreatePhraseSetRequest::set_allocated_phrase_set(::google::cloud::speech::v2::PhraseSet* phrase_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.phrase_set_;
  }
  if (phrase_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(phrase_set);
    if (message_arena != submessage_arena) {
      phrase_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phrase_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.phrase_set_ = phrase_set;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set)
}

// bool validate_only = 2;
inline void CreatePhraseSetRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool CreatePhraseSetRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool CreatePhraseSetRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreatePhraseSetRequest.validate_only)
  return _internal_validate_only();
}
inline void CreatePhraseSetRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void CreatePhraseSetRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreatePhraseSetRequest.validate_only)
}

// string phrase_set_id = 3;
inline void CreatePhraseSetRequest::clear_phrase_set_id() {
  _impl_.phrase_set_id_.ClearToEmpty();
}
inline const std::string& CreatePhraseSetRequest::phrase_set_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set_id)
  return _internal_phrase_set_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePhraseSetRequest::set_phrase_set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phrase_set_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set_id)
}
inline std::string* CreatePhraseSetRequest::mutable_phrase_set_id() {
  std::string* _s = _internal_mutable_phrase_set_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set_id)
  return _s;
}
inline const std::string& CreatePhraseSetRequest::_internal_phrase_set_id() const {
  return _impl_.phrase_set_id_.Get();
}
inline void CreatePhraseSetRequest::_internal_set_phrase_set_id(const std::string& value) {
  
  _impl_.phrase_set_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::_internal_mutable_phrase_set_id() {
  
  return _impl_.phrase_set_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::release_phrase_set_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set_id)
  return _impl_.phrase_set_id_.Release();
}
inline void CreatePhraseSetRequest::set_allocated_phrase_set_id(std::string* phrase_set_id) {
  if (phrase_set_id != nullptr) {
    
  } else {
    
  }
  _impl_.phrase_set_id_.SetAllocated(phrase_set_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phrase_set_id_.IsDefault()) {
    _impl_.phrase_set_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreatePhraseSetRequest.phrase_set_id)
}

// string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreatePhraseSetRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreatePhraseSetRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.CreatePhraseSetRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePhraseSetRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.CreatePhraseSetRequest.parent)
}
inline std::string* CreatePhraseSetRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.CreatePhraseSetRequest.parent)
  return _s;
}
inline const std::string& CreatePhraseSetRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreatePhraseSetRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.CreatePhraseSetRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreatePhraseSetRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.CreatePhraseSetRequest.parent)
}

// -------------------------------------------------------------------

// ListPhraseSetsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListPhraseSetsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListPhraseSetsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListPhraseSetsRequest.parent)
}
inline std::string* ListPhraseSetsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListPhraseSetsRequest.parent)
  return _s;
}
inline const std::string& ListPhraseSetsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListPhraseSetsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListPhraseSetsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListPhraseSetsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListPhraseSetsRequest.parent)
}

// int32 page_size = 2;
inline void ListPhraseSetsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListPhraseSetsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListPhraseSetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsRequest.page_size)
  return _internal_page_size();
}
inline void ListPhraseSetsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListPhraseSetsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListPhraseSetsRequest.page_size)
}

// string page_token = 3;
inline void ListPhraseSetsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListPhraseSetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListPhraseSetsRequest.page_token)
}
inline std::string* ListPhraseSetsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListPhraseSetsRequest.page_token)
  return _s;
}
inline const std::string& ListPhraseSetsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListPhraseSetsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListPhraseSetsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListPhraseSetsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListPhraseSetsRequest.page_token)
}

// bool show_deleted = 4;
inline void ListPhraseSetsRequest::clear_show_deleted() {
  _impl_.show_deleted_ = false;
}
inline bool ListPhraseSetsRequest::_internal_show_deleted() const {
  return _impl_.show_deleted_;
}
inline bool ListPhraseSetsRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsRequest.show_deleted)
  return _internal_show_deleted();
}
inline void ListPhraseSetsRequest::_internal_set_show_deleted(bool value) {
  
  _impl_.show_deleted_ = value;
}
inline void ListPhraseSetsRequest::set_show_deleted(bool value) {
  _internal_set_show_deleted(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListPhraseSetsRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListPhraseSetsResponse

// repeated .google.cloud.speech.v2.PhraseSet phrase_sets = 1;
inline int ListPhraseSetsResponse::_internal_phrase_sets_size() const {
  return _impl_.phrase_sets_.size();
}
inline int ListPhraseSetsResponse::phrase_sets_size() const {
  return _internal_phrase_sets_size();
}
inline void ListPhraseSetsResponse::clear_phrase_sets() {
  _impl_.phrase_sets_.Clear();
}
inline ::google::cloud::speech::v2::PhraseSet* ListPhraseSetsResponse::mutable_phrase_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListPhraseSetsResponse.phrase_sets)
  return _impl_.phrase_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet >*
ListPhraseSetsResponse::mutable_phrase_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v2.ListPhraseSetsResponse.phrase_sets)
  return &_impl_.phrase_sets_;
}
inline const ::google::cloud::speech::v2::PhraseSet& ListPhraseSetsResponse::_internal_phrase_sets(int index) const {
  return _impl_.phrase_sets_.Get(index);
}
inline const ::google::cloud::speech::v2::PhraseSet& ListPhraseSetsResponse::phrase_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsResponse.phrase_sets)
  return _internal_phrase_sets(index);
}
inline ::google::cloud::speech::v2::PhraseSet* ListPhraseSetsResponse::_internal_add_phrase_sets() {
  return _impl_.phrase_sets_.Add();
}
inline ::google::cloud::speech::v2::PhraseSet* ListPhraseSetsResponse::add_phrase_sets() {
  ::google::cloud::speech::v2::PhraseSet* _add = _internal_add_phrase_sets();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v2.ListPhraseSetsResponse.phrase_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v2::PhraseSet >&
ListPhraseSetsResponse::phrase_sets() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v2.ListPhraseSetsResponse.phrase_sets)
  return _impl_.phrase_sets_;
}

// string next_page_token = 2;
inline void ListPhraseSetsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListPhraseSetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.ListPhraseSetsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.ListPhraseSetsResponse.next_page_token)
}
inline std::string* ListPhraseSetsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.ListPhraseSetsResponse.next_page_token)
  return _s;
}
inline const std::string& ListPhraseSetsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListPhraseSetsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.ListPhraseSetsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListPhraseSetsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.ListPhraseSetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetPhraseSetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetPhraseSetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPhraseSetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.GetPhraseSetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPhraseSetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.GetPhraseSetRequest.name)
}
inline std::string* GetPhraseSetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.GetPhraseSetRequest.name)
  return _s;
}
inline const std::string& GetPhraseSetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetPhraseSetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPhraseSetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPhraseSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.GetPhraseSetRequest.name)
  return _impl_.name_.Release();
}
inline void GetPhraseSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.GetPhraseSetRequest.name)
}

// -------------------------------------------------------------------

// UpdatePhraseSetRequest

// .google.cloud.speech.v2.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdatePhraseSetRequest::_internal_has_phrase_set() const {
  return this != internal_default_instance() && _impl_.phrase_set_ != nullptr;
}
inline bool UpdatePhraseSetRequest::has_phrase_set() const {
  return _internal_has_phrase_set();
}
inline void UpdatePhraseSetRequest::clear_phrase_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.phrase_set_ != nullptr) {
    delete _impl_.phrase_set_;
  }
  _impl_.phrase_set_ = nullptr;
}
inline const ::google::cloud::speech::v2::PhraseSet& UpdatePhraseSetRequest::_internal_phrase_set() const {
  const ::google::cloud::speech::v2::PhraseSet* p = _impl_.phrase_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v2::PhraseSet&>(
      ::google::cloud::speech::v2::_PhraseSet_default_instance_);
}
inline const ::google::cloud::speech::v2::PhraseSet& UpdatePhraseSetRequest::phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdatePhraseSetRequest.phrase_set)
  return _internal_phrase_set();
}
inline void UpdatePhraseSetRequest::unsafe_arena_set_allocated_phrase_set(
    ::google::cloud::speech::v2::PhraseSet* phrase_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  _impl_.phrase_set_ = phrase_set;
  if (phrase_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdatePhraseSetRequest.phrase_set)
}
inline ::google::cloud::speech::v2::PhraseSet* UpdatePhraseSetRequest::release_phrase_set() {
  
  ::google::cloud::speech::v2::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v2::PhraseSet* UpdatePhraseSetRequest::unsafe_arena_release_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdatePhraseSetRequest.phrase_set)
  
  ::google::cloud::speech::v2::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v2::PhraseSet* UpdatePhraseSetRequest::_internal_mutable_phrase_set() {
  
  if (_impl_.phrase_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v2::PhraseSet>(GetArenaForAllocation());
    _impl_.phrase_set_ = p;
  }
  return _impl_.phrase_set_;
}
inline ::google::cloud::speech::v2::PhraseSet* UpdatePhraseSetRequest::mutable_phrase_set() {
  ::google::cloud::speech::v2::PhraseSet* _msg = _internal_mutable_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdatePhraseSetRequest.phrase_set)
  return _msg;
}
inline void UpdatePhraseSetRequest::set_allocated_phrase_set(::google::cloud::speech::v2::PhraseSet* phrase_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.phrase_set_;
  }
  if (phrase_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(phrase_set);
    if (message_arena != submessage_arena) {
      phrase_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phrase_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.phrase_set_ = phrase_set;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdatePhraseSetRequest.phrase_set)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdatePhraseSetRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdatePhraseSetRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePhraseSetRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePhraseSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdatePhraseSetRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdatePhraseSetRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v2.UpdatePhraseSetRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UpdatePhraseSetRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UpdatePhraseSetRequest.update_mask)
  return _msg;
}
inline void UpdatePhraseSetRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UpdatePhraseSetRequest.update_mask)
}

// bool validate_only = 4;
inline void UpdatePhraseSetRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UpdatePhraseSetRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UpdatePhraseSetRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UpdatePhraseSetRequest.validate_only)
  return _internal_validate_only();
}
inline void UpdatePhraseSetRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UpdatePhraseSetRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UpdatePhraseSetRequest.validate_only)
}

// -------------------------------------------------------------------

// DeletePhraseSetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeletePhraseSetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeletePhraseSetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeletePhraseSetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePhraseSetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeletePhraseSetRequest.name)
}
inline std::string* DeletePhraseSetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeletePhraseSetRequest.name)
  return _s;
}
inline const std::string& DeletePhraseSetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeletePhraseSetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeletePhraseSetRequest.name)
  return _impl_.name_.Release();
}
inline void DeletePhraseSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeletePhraseSetRequest.name)
}

// bool validate_only = 2;
inline void DeletePhraseSetRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool DeletePhraseSetRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool DeletePhraseSetRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeletePhraseSetRequest.validate_only)
  return _internal_validate_only();
}
inline void DeletePhraseSetRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void DeletePhraseSetRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeletePhraseSetRequest.validate_only)
}

// bool allow_missing = 4;
inline void DeletePhraseSetRequest::clear_allow_missing() {
  _impl_.allow_missing_ = false;
}
inline bool DeletePhraseSetRequest::_internal_allow_missing() const {
  return _impl_.allow_missing_;
}
inline bool DeletePhraseSetRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeletePhraseSetRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeletePhraseSetRequest::_internal_set_allow_missing(bool value) {
  
  _impl_.allow_missing_ = value;
}
inline void DeletePhraseSetRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeletePhraseSetRequest.allow_missing)
}

// string etag = 3;
inline void DeletePhraseSetRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& DeletePhraseSetRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.DeletePhraseSetRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePhraseSetRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.DeletePhraseSetRequest.etag)
}
inline std::string* DeletePhraseSetRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.DeletePhraseSetRequest.etag)
  return _s;
}
inline const std::string& DeletePhraseSetRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void DeletePhraseSetRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.DeletePhraseSetRequest.etag)
  return _impl_.etag_.Release();
}
inline void DeletePhraseSetRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.DeletePhraseSetRequest.etag)
}

// -------------------------------------------------------------------

// UndeletePhraseSetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UndeletePhraseSetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UndeletePhraseSetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeletePhraseSetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeletePhraseSetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeletePhraseSetRequest.name)
}
inline std::string* UndeletePhraseSetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeletePhraseSetRequest.name)
  return _s;
}
inline const std::string& UndeletePhraseSetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UndeletePhraseSetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeletePhraseSetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeletePhraseSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeletePhraseSetRequest.name)
  return _impl_.name_.Release();
}
inline void UndeletePhraseSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeletePhraseSetRequest.name)
}

// bool validate_only = 3;
inline void UndeletePhraseSetRequest::clear_validate_only() {
  _impl_.validate_only_ = false;
}
inline bool UndeletePhraseSetRequest::_internal_validate_only() const {
  return _impl_.validate_only_;
}
inline bool UndeletePhraseSetRequest::validate_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeletePhraseSetRequest.validate_only)
  return _internal_validate_only();
}
inline void UndeletePhraseSetRequest::_internal_set_validate_only(bool value) {
  
  _impl_.validate_only_ = value;
}
inline void UndeletePhraseSetRequest::set_validate_only(bool value) {
  _internal_set_validate_only(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeletePhraseSetRequest.validate_only)
}

// string etag = 4;
inline void UndeletePhraseSetRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& UndeletePhraseSetRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v2.UndeletePhraseSetRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeletePhraseSetRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v2.UndeletePhraseSetRequest.etag)
}
inline std::string* UndeletePhraseSetRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v2.UndeletePhraseSetRequest.etag)
  return _s;
}
inline const std::string& UndeletePhraseSetRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void UndeletePhraseSetRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeletePhraseSetRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeletePhraseSetRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v2.UndeletePhraseSetRequest.etag)
  return _impl_.etag_.Release();
}
inline void UndeletePhraseSetRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v2.UndeletePhraseSetRequest.etag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace speech
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::speech::v2::Recognizer_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::Recognizer_State>() {
  return ::google::cloud::speech::v2::Recognizer_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding>() {
  return ::google::cloud::speech::v2::ExplicitDecodingConfig_AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode>() {
  return ::google::cloud::speech::v2::RecognitionFeatures_MultiChannelMode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType>() {
  return ::google::cloud::speech::v2::StreamingRecognizeResponse_SpeechEventType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v2::CustomClass_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::CustomClass_State>() {
  return ::google::cloud::speech::v2::CustomClass_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v2::PhraseSet_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v2::PhraseSet_State>() {
  return ::google::cloud::speech::v2::PhraseSet_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv2_2fcloud_5fspeech_2eproto
