// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1/cloud_speech.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/cloud/speech/v1/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class LongRunningRecognizeMetadata;
struct LongRunningRecognizeMetadataDefaultTypeInternal;
extern LongRunningRecognizeMetadataDefaultTypeInternal _LongRunningRecognizeMetadata_default_instance_;
class LongRunningRecognizeRequest;
struct LongRunningRecognizeRequestDefaultTypeInternal;
extern LongRunningRecognizeRequestDefaultTypeInternal _LongRunningRecognizeRequest_default_instance_;
class LongRunningRecognizeResponse;
struct LongRunningRecognizeResponseDefaultTypeInternal;
extern LongRunningRecognizeResponseDefaultTypeInternal _LongRunningRecognizeResponse_default_instance_;
class RecognitionAudio;
struct RecognitionAudioDefaultTypeInternal;
extern RecognitionAudioDefaultTypeInternal _RecognitionAudio_default_instance_;
class RecognitionConfig;
struct RecognitionConfigDefaultTypeInternal;
extern RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
class RecognitionMetadata;
struct RecognitionMetadataDefaultTypeInternal;
extern RecognitionMetadataDefaultTypeInternal _RecognitionMetadata_default_instance_;
class RecognizeRequest;
struct RecognizeRequestDefaultTypeInternal;
extern RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
class RecognizeResponse;
struct RecognizeResponseDefaultTypeInternal;
extern RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
class SpeakerDiarizationConfig;
struct SpeakerDiarizationConfigDefaultTypeInternal;
extern SpeakerDiarizationConfigDefaultTypeInternal _SpeakerDiarizationConfig_default_instance_;
class SpeechContext;
struct SpeechContextDefaultTypeInternal;
extern SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
class SpeechRecognitionAlternative;
struct SpeechRecognitionAlternativeDefaultTypeInternal;
extern SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
class SpeechRecognitionResult;
struct SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
class StreamingRecognitionConfig;
struct StreamingRecognitionConfigDefaultTypeInternal;
extern StreamingRecognitionConfigDefaultTypeInternal _StreamingRecognitionConfig_default_instance_;
class StreamingRecognitionResult;
struct StreamingRecognitionResultDefaultTypeInternal;
extern StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
class StreamingRecognizeRequest;
struct StreamingRecognizeRequestDefaultTypeInternal;
extern StreamingRecognizeRequestDefaultTypeInternal _StreamingRecognizeRequest_default_instance_;
class StreamingRecognizeResponse;
struct StreamingRecognizeResponseDefaultTypeInternal;
extern StreamingRecognizeResponseDefaultTypeInternal _StreamingRecognizeResponse_default_instance_;
class TranscriptOutputConfig;
struct TranscriptOutputConfigDefaultTypeInternal;
extern TranscriptOutputConfigDefaultTypeInternal _TranscriptOutputConfig_default_instance_;
class WordInfo;
struct WordInfoDefaultTypeInternal;
extern WordInfoDefaultTypeInternal _WordInfo_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::speech::v1::LongRunningRecognizeMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v1::LongRunningRecognizeMetadata>(Arena*);
template<> ::google::cloud::speech::v1::LongRunningRecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::LongRunningRecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v1::LongRunningRecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v1::LongRunningRecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v1::RecognitionAudio* Arena::CreateMaybeMessage<::google::cloud::speech::v1::RecognitionAudio>(Arena*);
template<> ::google::cloud::speech::v1::RecognitionConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v1::RecognitionConfig>(Arena*);
template<> ::google::cloud::speech::v1::RecognitionMetadata* Arena::CreateMaybeMessage<::google::cloud::speech::v1::RecognitionMetadata>(Arena*);
template<> ::google::cloud::speech::v1::RecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::RecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v1::RecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v1::RecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v1::SpeakerDiarizationConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v1::SpeakerDiarizationConfig>(Arena*);
template<> ::google::cloud::speech::v1::SpeechContext* Arena::CreateMaybeMessage<::google::cloud::speech::v1::SpeechContext>(Arena*);
template<> ::google::cloud::speech::v1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage<::google::cloud::speech::v1::SpeechRecognitionAlternative>(Arena*);
template<> ::google::cloud::speech::v1::SpeechRecognitionResult* Arena::CreateMaybeMessage<::google::cloud::speech::v1::SpeechRecognitionResult>(Arena*);
template<> ::google::cloud::speech::v1::StreamingRecognitionConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v1::StreamingRecognitionConfig>(Arena*);
template<> ::google::cloud::speech::v1::StreamingRecognitionResult* Arena::CreateMaybeMessage<::google::cloud::speech::v1::StreamingRecognitionResult>(Arena*);
template<> ::google::cloud::speech::v1::StreamingRecognizeRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::StreamingRecognizeRequest>(Arena*);
template<> ::google::cloud::speech::v1::StreamingRecognizeResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v1::StreamingRecognizeResponse>(Arena*);
template<> ::google::cloud::speech::v1::TranscriptOutputConfig* Arena::CreateMaybeMessage<::google::cloud::speech::v1::TranscriptOutputConfig>(Arena*);
template<> ::google::cloud::speech::v1::WordInfo* Arena::CreateMaybeMessage<::google::cloud::speech::v1::WordInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace speech {
namespace v1 {

enum RecognitionConfig_AudioEncoding : int {
  RecognitionConfig_AudioEncoding_ENCODING_UNSPECIFIED = 0,
  RecognitionConfig_AudioEncoding_LINEAR16 = 1,
  RecognitionConfig_AudioEncoding_FLAC = 2,
  RecognitionConfig_AudioEncoding_MULAW = 3,
  RecognitionConfig_AudioEncoding_AMR = 4,
  RecognitionConfig_AudioEncoding_AMR_WB = 5,
  RecognitionConfig_AudioEncoding_OGG_OPUS = 6,
  RecognitionConfig_AudioEncoding_SPEEX_WITH_HEADER_BYTE = 7,
  RecognitionConfig_AudioEncoding_WEBM_OPUS = 9,
  RecognitionConfig_AudioEncoding_RecognitionConfig_AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionConfig_AudioEncoding_RecognitionConfig_AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionConfig_AudioEncoding_IsValid(int value);
constexpr RecognitionConfig_AudioEncoding RecognitionConfig_AudioEncoding_AudioEncoding_MIN = RecognitionConfig_AudioEncoding_ENCODING_UNSPECIFIED;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig_AudioEncoding_AudioEncoding_MAX = RecognitionConfig_AudioEncoding_WEBM_OPUS;
constexpr int RecognitionConfig_AudioEncoding_AudioEncoding_ARRAYSIZE = RecognitionConfig_AudioEncoding_AudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor();
template<typename T>
inline const std::string& RecognitionConfig_AudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionConfig_AudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionConfig_AudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionConfig_AudioEncoding_descriptor(), enum_t_value);
}
inline bool RecognitionConfig_AudioEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionConfig_AudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionConfig_AudioEncoding>(
    RecognitionConfig_AudioEncoding_descriptor(), name, value);
}
enum RecognitionMetadata_InteractionType : int {
  RecognitionMetadata_InteractionType_INTERACTION_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_InteractionType_DISCUSSION = 1,
  RecognitionMetadata_InteractionType_PRESENTATION = 2,
  RecognitionMetadata_InteractionType_PHONE_CALL = 3,
  RecognitionMetadata_InteractionType_VOICEMAIL = 4,
  RecognitionMetadata_InteractionType_PROFESSIONALLY_PRODUCED = 5,
  RecognitionMetadata_InteractionType_VOICE_SEARCH = 6,
  RecognitionMetadata_InteractionType_VOICE_COMMAND = 7,
  RecognitionMetadata_InteractionType_DICTATION = 8,
  RecognitionMetadata_InteractionType_RecognitionMetadata_InteractionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionMetadata_InteractionType_RecognitionMetadata_InteractionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionMetadata_InteractionType_IsValid(int value);
constexpr RecognitionMetadata_InteractionType RecognitionMetadata_InteractionType_InteractionType_MIN = RecognitionMetadata_InteractionType_INTERACTION_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata_InteractionType_InteractionType_MAX = RecognitionMetadata_InteractionType_DICTATION;
constexpr int RecognitionMetadata_InteractionType_InteractionType_ARRAYSIZE = RecognitionMetadata_InteractionType_InteractionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_InteractionType_descriptor();
template<typename T>
inline const std::string& RecognitionMetadata_InteractionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionMetadata_InteractionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionMetadata_InteractionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionMetadata_InteractionType_descriptor(), enum_t_value);
}
inline bool RecognitionMetadata_InteractionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionMetadata_InteractionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionMetadata_InteractionType>(
    RecognitionMetadata_InteractionType_descriptor(), name, value);
}
enum RecognitionMetadata_MicrophoneDistance : int {
  RecognitionMetadata_MicrophoneDistance_MICROPHONE_DISTANCE_UNSPECIFIED = 0,
  RecognitionMetadata_MicrophoneDistance_NEARFIELD = 1,
  RecognitionMetadata_MicrophoneDistance_MIDFIELD = 2,
  RecognitionMetadata_MicrophoneDistance_FARFIELD = 3,
  RecognitionMetadata_MicrophoneDistance_RecognitionMetadata_MicrophoneDistance_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionMetadata_MicrophoneDistance_RecognitionMetadata_MicrophoneDistance_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionMetadata_MicrophoneDistance_IsValid(int value);
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MIN = RecognitionMetadata_MicrophoneDistance_MICROPHONE_DISTANCE_UNSPECIFIED;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MAX = RecognitionMetadata_MicrophoneDistance_FARFIELD;
constexpr int RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_ARRAYSIZE = RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_MicrophoneDistance_descriptor();
template<typename T>
inline const std::string& RecognitionMetadata_MicrophoneDistance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionMetadata_MicrophoneDistance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionMetadata_MicrophoneDistance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionMetadata_MicrophoneDistance_descriptor(), enum_t_value);
}
inline bool RecognitionMetadata_MicrophoneDistance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionMetadata_MicrophoneDistance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionMetadata_MicrophoneDistance>(
    RecognitionMetadata_MicrophoneDistance_descriptor(), name, value);
}
enum RecognitionMetadata_OriginalMediaType : int {
  RecognitionMetadata_OriginalMediaType_ORIGINAL_MEDIA_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_OriginalMediaType_AUDIO = 1,
  RecognitionMetadata_OriginalMediaType_VIDEO = 2,
  RecognitionMetadata_OriginalMediaType_RecognitionMetadata_OriginalMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionMetadata_OriginalMediaType_RecognitionMetadata_OriginalMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionMetadata_OriginalMediaType_IsValid(int value);
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata_OriginalMediaType_OriginalMediaType_MIN = RecognitionMetadata_OriginalMediaType_ORIGINAL_MEDIA_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata_OriginalMediaType_OriginalMediaType_MAX = RecognitionMetadata_OriginalMediaType_VIDEO;
constexpr int RecognitionMetadata_OriginalMediaType_OriginalMediaType_ARRAYSIZE = RecognitionMetadata_OriginalMediaType_OriginalMediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_OriginalMediaType_descriptor();
template<typename T>
inline const std::string& RecognitionMetadata_OriginalMediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionMetadata_OriginalMediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionMetadata_OriginalMediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionMetadata_OriginalMediaType_descriptor(), enum_t_value);
}
inline bool RecognitionMetadata_OriginalMediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionMetadata_OriginalMediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionMetadata_OriginalMediaType>(
    RecognitionMetadata_OriginalMediaType_descriptor(), name, value);
}
enum RecognitionMetadata_RecordingDeviceType : int {
  RecognitionMetadata_RecordingDeviceType_RECORDING_DEVICE_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_RecordingDeviceType_SMARTPHONE = 1,
  RecognitionMetadata_RecordingDeviceType_PC = 2,
  RecognitionMetadata_RecordingDeviceType_PHONE_LINE = 3,
  RecognitionMetadata_RecordingDeviceType_VEHICLE = 4,
  RecognitionMetadata_RecordingDeviceType_OTHER_OUTDOOR_DEVICE = 5,
  RecognitionMetadata_RecordingDeviceType_OTHER_INDOOR_DEVICE = 6,
  RecognitionMetadata_RecordingDeviceType_RecognitionMetadata_RecordingDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecognitionMetadata_RecordingDeviceType_RecognitionMetadata_RecordingDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecognitionMetadata_RecordingDeviceType_IsValid(int value);
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MIN = RecognitionMetadata_RecordingDeviceType_RECORDING_DEVICE_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MAX = RecognitionMetadata_RecordingDeviceType_OTHER_INDOOR_DEVICE;
constexpr int RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_ARRAYSIZE = RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_RecordingDeviceType_descriptor();
template<typename T>
inline const std::string& RecognitionMetadata_RecordingDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognitionMetadata_RecordingDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognitionMetadata_RecordingDeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognitionMetadata_RecordingDeviceType_descriptor(), enum_t_value);
}
inline bool RecognitionMetadata_RecordingDeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecognitionMetadata_RecordingDeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognitionMetadata_RecordingDeviceType>(
    RecognitionMetadata_RecordingDeviceType_descriptor(), name, value);
}
enum StreamingRecognizeResponse_SpeechEventType : int {
  StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_UNSPECIFIED = 0,
  StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE = 1,
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value);
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN = StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_UNSPECIFIED;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX = StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE;
constexpr int StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE = StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor();
template<typename T>
inline const std::string& StreamingRecognizeResponse_SpeechEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamingRecognizeResponse_SpeechEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamingRecognizeResponse_SpeechEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamingRecognizeResponse_SpeechEventType_descriptor(), enum_t_value);
}
inline bool StreamingRecognizeResponse_SpeechEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamingRecognizeResponse_SpeechEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamingRecognizeResponse_SpeechEventType>(
    StreamingRecognizeResponse_SpeechEventType_descriptor(), name, value);
}
// ===================================================================

class RecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognizeRequest) */ {
 public:
  inline RecognizeRequest() : RecognizeRequest(nullptr) {}
  ~RecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR RecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeRequest(const RecognizeRequest& from);
  RecognizeRequest(RecognizeRequest&& from) noexcept
    : RecognizeRequest() {
    *this = ::std::move(from);
  }

  inline RecognizeRequest& operator=(const RecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeRequest& operator=(RecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeRequest*>(
               &_RecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecognizeRequest& a, RecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeRequest& from) {
    RecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.RecognizeRequest";
  }
  protected:
  explicit RecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v1::RecognitionConfig* config);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::google::cloud::speech::v1::RecognitionAudio& audio() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionAudio* release_audio();
  ::google::cloud::speech::v1::RecognitionAudio* mutable_audio();
  void set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* audio);
  private:
  const ::google::cloud::speech::v1::RecognitionAudio& _internal_audio() const;
  ::google::cloud::speech::v1::RecognitionAudio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::google::cloud::speech::v1::RecognitionAudio* audio);
  ::google::cloud::speech::v1::RecognitionAudio* unsafe_arena_release_audio();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    ::google::cloud::speech::v1::RecognitionAudio* audio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeRequest) */ {
 public:
  inline LongRunningRecognizeRequest() : LongRunningRecognizeRequest(nullptr) {}
  ~LongRunningRecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongRunningRecognizeRequest(const LongRunningRecognizeRequest& from);
  LongRunningRecognizeRequest(LongRunningRecognizeRequest&& from) noexcept
    : LongRunningRecognizeRequest() {
    *this = ::std::move(from);
  }

  inline LongRunningRecognizeRequest& operator=(const LongRunningRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeRequest& operator=(LongRunningRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeRequest*>(
               &_LongRunningRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LongRunningRecognizeRequest& a, LongRunningRecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LongRunningRecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LongRunningRecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LongRunningRecognizeRequest& from) {
    LongRunningRecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongRunningRecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.LongRunningRecognizeRequest";
  }
  protected:
  explicit LongRunningRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
    kOutputConfigFieldNumber = 4,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v1::RecognitionConfig* config);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::google::cloud::speech::v1::RecognitionAudio& audio() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionAudio* release_audio();
  ::google::cloud::speech::v1::RecognitionAudio* mutable_audio();
  void set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* audio);
  private:
  const ::google::cloud::speech::v1::RecognitionAudio& _internal_audio() const;
  ::google::cloud::speech::v1::RecognitionAudio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::google::cloud::speech::v1::RecognitionAudio* audio);
  ::google::cloud::speech::v1::RecognitionAudio* unsafe_arena_release_audio();

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::TranscriptOutputConfig* release_output_config();
  ::google::cloud::speech::v1::TranscriptOutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* output_config);
  private:
  const ::google::cloud::speech::v1::TranscriptOutputConfig& _internal_output_config() const;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _internal_mutable_output_config();
  public:
  void unsafe_arena_set_allocated_output_config(
      ::google::cloud::speech::v1::TranscriptOutputConfig* output_config);
  ::google::cloud::speech::v1::TranscriptOutputConfig* unsafe_arena_release_output_config();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    ::google::cloud::speech::v1::RecognitionAudio* audio_;
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class TranscriptOutputConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.TranscriptOutputConfig) */ {
 public:
  inline TranscriptOutputConfig() : TranscriptOutputConfig(nullptr) {}
  ~TranscriptOutputConfig() override;
  explicit PROTOBUF_CONSTEXPR TranscriptOutputConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranscriptOutputConfig(const TranscriptOutputConfig& from);
  TranscriptOutputConfig(TranscriptOutputConfig&& from) noexcept
    : TranscriptOutputConfig() {
    *this = ::std::move(from);
  }

  inline TranscriptOutputConfig& operator=(const TranscriptOutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptOutputConfig& operator=(TranscriptOutputConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranscriptOutputConfig& default_instance() {
    return *internal_default_instance();
  }
  enum OutputTypeCase {
    kGcsUri = 1,
    OUTPUT_TYPE_NOT_SET = 0,
  };

  static inline const TranscriptOutputConfig* internal_default_instance() {
    return reinterpret_cast<const TranscriptOutputConfig*>(
               &_TranscriptOutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TranscriptOutputConfig& a, TranscriptOutputConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TranscriptOutputConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptOutputConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranscriptOutputConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranscriptOutputConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranscriptOutputConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TranscriptOutputConfig& from) {
    TranscriptOutputConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranscriptOutputConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.TranscriptOutputConfig";
  }
  protected:
  explicit TranscriptOutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGcsUriFieldNumber = 1,
  };
  // string gcs_uri = 1;
  bool has_gcs_uri() const;
  private:
  bool _internal_has_gcs_uri() const;
  public:
  void clear_gcs_uri();
  const std::string& gcs_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gcs_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gcs_uri();
  PROTOBUF_NODISCARD std::string* release_gcs_uri();
  void set_allocated_gcs_uri(std::string* gcs_uri);
  private:
  const std::string& _internal_gcs_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcs_uri(const std::string& value);
  std::string* _internal_mutable_gcs_uri();
  public:

  void clear_output_type();
  OutputTypeCase output_type_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.TranscriptOutputConfig)
 private:
  class _Internal;
  void set_has_gcs_uri();

  inline bool has_output_type() const;
  inline void clear_has_output_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OutputTypeUnion {
      constexpr OutputTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcs_uri_;
    } output_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognizeRequest) */ {
 public:
  inline StreamingRecognizeRequest() : StreamingRecognizeRequest(nullptr) {}
  ~StreamingRecognizeRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognizeRequest(const StreamingRecognizeRequest& from);
  StreamingRecognizeRequest(StreamingRecognizeRequest&& from) noexcept
    : StreamingRecognizeRequest() {
    *this = ::std::move(from);
  }

  inline StreamingRecognizeRequest& operator=(const StreamingRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeRequest& operator=(StreamingRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StreamingRequestCase {
    kStreamingConfig = 1,
    kAudioContent = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static inline const StreamingRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeRequest*>(
               &_StreamingRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamingRecognizeRequest& a, StreamingRecognizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognizeRequest& from) {
    StreamingRecognizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.StreamingRecognizeRequest";
  }
  protected:
  explicit StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingConfigFieldNumber = 1,
    kAudioContentFieldNumber = 2,
  };
  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;
  public:
  void clear_streaming_config();
  const ::google::cloud::speech::v1::StreamingRecognitionConfig& streaming_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::StreamingRecognitionConfig* release_streaming_config();
  ::google::cloud::speech::v1::StreamingRecognitionConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config);
  private:
  const ::google::cloud::speech::v1::StreamingRecognitionConfig& _internal_streaming_config() const;
  ::google::cloud::speech::v1::StreamingRecognitionConfig* _internal_mutable_streaming_config();
  public:
  void unsafe_arena_set_allocated_streaming_config(
      ::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config);
  ::google::cloud::speech::v1::StreamingRecognitionConfig* unsafe_arena_release_streaming_config();

  // bytes audio_content = 2;
  bool has_audio_content() const;
  private:
  bool _internal_has_audio_content() const;
  public:
  void clear_audio_content();
  const std::string& audio_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_content();
  PROTOBUF_NODISCARD std::string* release_audio_content();
  void set_allocated_audio_content(std::string* audio_content);
  private:
  const std::string& _internal_audio_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_content(const std::string& value);
  std::string* _internal_mutable_audio_content();
  public:

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeRequest)
 private:
  class _Internal;
  void set_has_streaming_config();
  void set_has_audio_content();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union StreamingRequestUnion {
      constexpr StreamingRequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
    } streaming_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognitionConfig) */ {
 public:
  inline StreamingRecognitionConfig() : StreamingRecognitionConfig(nullptr) {}
  ~StreamingRecognitionConfig() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionConfig(const StreamingRecognitionConfig& from);
  StreamingRecognitionConfig(StreamingRecognitionConfig&& from) noexcept
    : StreamingRecognitionConfig() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionConfig& operator=(const StreamingRecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionConfig& operator=(StreamingRecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionConfig*>(
               &_StreamingRecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamingRecognitionConfig& a, StreamingRecognitionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionConfig& from) {
    StreamingRecognitionConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.StreamingRecognitionConfig";
  }
  protected:
  explicit StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kSingleUtteranceFieldNumber = 2,
    kInterimResultsFieldNumber = 3,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config);
  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::cloud::speech::v1::RecognitionConfig* config);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  // bool single_utterance = 2;
  void clear_single_utterance();
  bool single_utterance() const;
  void set_single_utterance(bool value);
  private:
  bool _internal_single_utterance() const;
  void _internal_set_single_utterance(bool value);
  public:

  // bool interim_results = 3;
  void clear_interim_results();
  bool interim_results() const;
  void set_interim_results(bool value);
  private:
  bool _internal_interim_results() const;
  void _internal_set_interim_results(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    bool single_utterance_;
    bool interim_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionConfig) */ {
 public:
  inline RecognitionConfig() : RecognitionConfig(nullptr) {}
  ~RecognitionConfig() override;
  explicit PROTOBUF_CONSTEXPR RecognitionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionConfig(const RecognitionConfig& from);
  RecognitionConfig(RecognitionConfig&& from) noexcept
    : RecognitionConfig() {
    *this = ::std::move(from);
  }

  inline RecognitionConfig& operator=(const RecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionConfig& operator=(RecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const RecognitionConfig*>(
               &_RecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecognitionConfig& a, RecognitionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionConfig& from) {
    RecognitionConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.RecognitionConfig";
  }
  protected:
  explicit RecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecognitionConfig_AudioEncoding AudioEncoding;
  static constexpr AudioEncoding ENCODING_UNSPECIFIED =
    RecognitionConfig_AudioEncoding_ENCODING_UNSPECIFIED;
  static constexpr AudioEncoding LINEAR16 =
    RecognitionConfig_AudioEncoding_LINEAR16;
  static constexpr AudioEncoding FLAC =
    RecognitionConfig_AudioEncoding_FLAC;
  static constexpr AudioEncoding MULAW =
    RecognitionConfig_AudioEncoding_MULAW;
  static constexpr AudioEncoding AMR =
    RecognitionConfig_AudioEncoding_AMR;
  static constexpr AudioEncoding AMR_WB =
    RecognitionConfig_AudioEncoding_AMR_WB;
  static constexpr AudioEncoding OGG_OPUS =
    RecognitionConfig_AudioEncoding_OGG_OPUS;
  static constexpr AudioEncoding SPEEX_WITH_HEADER_BYTE =
    RecognitionConfig_AudioEncoding_SPEEX_WITH_HEADER_BYTE;
  static constexpr AudioEncoding WEBM_OPUS =
    RecognitionConfig_AudioEncoding_WEBM_OPUS;
  static inline bool AudioEncoding_IsValid(int value) {
    return RecognitionConfig_AudioEncoding_IsValid(value);
  }
  static constexpr AudioEncoding AudioEncoding_MIN =
    RecognitionConfig_AudioEncoding_AudioEncoding_MIN;
  static constexpr AudioEncoding AudioEncoding_MAX =
    RecognitionConfig_AudioEncoding_AudioEncoding_MAX;
  static constexpr int AudioEncoding_ARRAYSIZE =
    RecognitionConfig_AudioEncoding_AudioEncoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AudioEncoding_descriptor() {
    return RecognitionConfig_AudioEncoding_descriptor();
  }
  template<typename T>
  static inline const std::string& AudioEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AudioEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AudioEncoding_Name.");
    return RecognitionConfig_AudioEncoding_Name(enum_t_value);
  }
  static inline bool AudioEncoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AudioEncoding* value) {
    return RecognitionConfig_AudioEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechContextsFieldNumber = 6,
    kAlternativeLanguageCodesFieldNumber = 18,
    kLanguageCodeFieldNumber = 3,
    kModelFieldNumber = 13,
    kMetadataFieldNumber = 9,
    kDiarizationConfigFieldNumber = 19,
    kAdaptationFieldNumber = 20,
    kEnableSpokenPunctuationFieldNumber = 22,
    kEnableSpokenEmojisFieldNumber = 23,
    kEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kMaxAlternativesFieldNumber = 4,
    kAudioChannelCountFieldNumber = 7,
    kEnableSeparateRecognitionPerChannelFieldNumber = 12,
    kProfanityFilterFieldNumber = 5,
    kEnableWordTimeOffsetsFieldNumber = 8,
    kEnableWordConfidenceFieldNumber = 15,
    kEnableAutomaticPunctuationFieldNumber = 11,
    kUseEnhancedFieldNumber = 14,
  };
  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  int speech_contexts_size() const;
  private:
  int _internal_speech_contexts_size() const;
  public:
  void clear_speech_contexts();
  ::google::cloud::speech::v1::SpeechContext* mutable_speech_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >*
      mutable_speech_contexts();
  private:
  const ::google::cloud::speech::v1::SpeechContext& _internal_speech_contexts(int index) const;
  ::google::cloud::speech::v1::SpeechContext* _internal_add_speech_contexts();
  public:
  const ::google::cloud::speech::v1::SpeechContext& speech_contexts(int index) const;
  ::google::cloud::speech::v1::SpeechContext* add_speech_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >&
      speech_contexts() const;

  // repeated string alternative_language_codes = 18;
  int alternative_language_codes_size() const;
  private:
  int _internal_alternative_language_codes_size() const;
  public:
  void clear_alternative_language_codes();
  const std::string& alternative_language_codes(int index) const;
  std::string* mutable_alternative_language_codes(int index);
  void set_alternative_language_codes(int index, const std::string& value);
  void set_alternative_language_codes(int index, std::string&& value);
  void set_alternative_language_codes(int index, const char* value);
  void set_alternative_language_codes(int index, const char* value, size_t size);
  std::string* add_alternative_language_codes();
  void add_alternative_language_codes(const std::string& value);
  void add_alternative_language_codes(std::string&& value);
  void add_alternative_language_codes(const char* value);
  void add_alternative_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternative_language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternative_language_codes();
  private:
  const std::string& _internal_alternative_language_codes(int index) const;
  std::string* _internal_add_alternative_language_codes();
  public:

  // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string model = 13;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::cloud::speech::v1::RecognitionMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionMetadata* release_metadata();
  ::google::cloud::speech::v1::RecognitionMetadata* mutable_metadata();
  void set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* metadata);
  private:
  const ::google::cloud::speech::v1::RecognitionMetadata& _internal_metadata() const;
  ::google::cloud::speech::v1::RecognitionMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::cloud::speech::v1::RecognitionMetadata* metadata);
  ::google::cloud::speech::v1::RecognitionMetadata* unsafe_arena_release_metadata();

  // .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
  bool has_diarization_config() const;
  private:
  bool _internal_has_diarization_config() const;
  public:
  void clear_diarization_config();
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig& diarization_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeakerDiarizationConfig* release_diarization_config();
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* mutable_diarization_config();
  void set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config);
  private:
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig& _internal_diarization_config() const;
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* _internal_mutable_diarization_config();
  public:
  void unsafe_arena_set_allocated_diarization_config(
      ::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config);
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* unsafe_arena_release_diarization_config();

  // .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
  bool has_adaptation() const;
  private:
  bool _internal_has_adaptation() const;
  public:
  void clear_adaptation();
  const ::google::cloud::speech::v1::SpeechAdaptation& adaptation() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeechAdaptation* release_adaptation();
  ::google::cloud::speech::v1::SpeechAdaptation* mutable_adaptation();
  void set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* adaptation);
  private:
  const ::google::cloud::speech::v1::SpeechAdaptation& _internal_adaptation() const;
  ::google::cloud::speech::v1::SpeechAdaptation* _internal_mutable_adaptation();
  public:
  void unsafe_arena_set_allocated_adaptation(
      ::google::cloud::speech::v1::SpeechAdaptation* adaptation);
  ::google::cloud::speech::v1::SpeechAdaptation* unsafe_arena_release_adaptation();

  // .google.protobuf.BoolValue enable_spoken_punctuation = 22;
  bool has_enable_spoken_punctuation() const;
  private:
  bool _internal_has_enable_spoken_punctuation() const;
  public:
  void clear_enable_spoken_punctuation();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable_spoken_punctuation() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enable_spoken_punctuation();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enable_spoken_punctuation();
  void set_allocated_enable_spoken_punctuation(::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_punctuation);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enable_spoken_punctuation() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enable_spoken_punctuation();
  public:
  void unsafe_arena_set_allocated_enable_spoken_punctuation(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_punctuation);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enable_spoken_punctuation();

  // .google.protobuf.BoolValue enable_spoken_emojis = 23;
  bool has_enable_spoken_emojis() const;
  private:
  bool _internal_has_enable_spoken_emojis() const;
  public:
  void clear_enable_spoken_emojis();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable_spoken_emojis() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enable_spoken_emojis();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enable_spoken_emojis();
  void set_allocated_enable_spoken_emojis(::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_emojis);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enable_spoken_emojis() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enable_spoken_emojis();
  public:
  void unsafe_arena_set_allocated_enable_spoken_emojis(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_emojis);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enable_spoken_emojis();

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  void clear_encoding();
  ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding encoding() const;
  void set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value);
  private:
  ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding _internal_encoding() const;
  void _internal_set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  int32_t sample_rate_hertz() const;
  void set_sample_rate_hertz(int32_t value);
  private:
  int32_t _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(int32_t value);
  public:

  // int32 max_alternatives = 4;
  void clear_max_alternatives();
  int32_t max_alternatives() const;
  void set_max_alternatives(int32_t value);
  private:
  int32_t _internal_max_alternatives() const;
  void _internal_set_max_alternatives(int32_t value);
  public:

  // int32 audio_channel_count = 7;
  void clear_audio_channel_count();
  int32_t audio_channel_count() const;
  void set_audio_channel_count(int32_t value);
  private:
  int32_t _internal_audio_channel_count() const;
  void _internal_set_audio_channel_count(int32_t value);
  public:

  // bool enable_separate_recognition_per_channel = 12;
  void clear_enable_separate_recognition_per_channel();
  bool enable_separate_recognition_per_channel() const;
  void set_enable_separate_recognition_per_channel(bool value);
  private:
  bool _internal_enable_separate_recognition_per_channel() const;
  void _internal_set_enable_separate_recognition_per_channel(bool value);
  public:

  // bool profanity_filter = 5;
  void clear_profanity_filter();
  bool profanity_filter() const;
  void set_profanity_filter(bool value);
  private:
  bool _internal_profanity_filter() const;
  void _internal_set_profanity_filter(bool value);
  public:

  // bool enable_word_time_offsets = 8;
  void clear_enable_word_time_offsets();
  bool enable_word_time_offsets() const;
  void set_enable_word_time_offsets(bool value);
  private:
  bool _internal_enable_word_time_offsets() const;
  void _internal_set_enable_word_time_offsets(bool value);
  public:

  // bool enable_word_confidence = 15;
  void clear_enable_word_confidence();
  bool enable_word_confidence() const;
  void set_enable_word_confidence(bool value);
  private:
  bool _internal_enable_word_confidence() const;
  void _internal_set_enable_word_confidence(bool value);
  public:

  // bool enable_automatic_punctuation = 11;
  void clear_enable_automatic_punctuation();
  bool enable_automatic_punctuation() const;
  void set_enable_automatic_punctuation(bool value);
  private:
  bool _internal_enable_automatic_punctuation() const;
  void _internal_set_enable_automatic_punctuation(bool value);
  public:

  // bool use_enhanced = 14;
  void clear_use_enhanced();
  bool use_enhanced() const;
  void set_use_enhanced(bool value);
  private:
  bool _internal_use_enhanced() const;
  void _internal_set_use_enhanced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext > speech_contexts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternative_language_codes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::google::cloud::speech::v1::RecognitionMetadata* metadata_;
    ::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config_;
    ::google::cloud::speech::v1::SpeechAdaptation* adaptation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_punctuation_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_emojis_;
    int encoding_;
    int32_t sample_rate_hertz_;
    int32_t max_alternatives_;
    int32_t audio_channel_count_;
    bool enable_separate_recognition_per_channel_;
    bool profanity_filter_;
    bool enable_word_time_offsets_;
    bool enable_word_confidence_;
    bool enable_automatic_punctuation_;
    bool use_enhanced_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeakerDiarizationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeakerDiarizationConfig) */ {
 public:
  inline SpeakerDiarizationConfig() : SpeakerDiarizationConfig(nullptr) {}
  ~SpeakerDiarizationConfig() override;
  explicit PROTOBUF_CONSTEXPR SpeakerDiarizationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeakerDiarizationConfig(const SpeakerDiarizationConfig& from);
  SpeakerDiarizationConfig(SpeakerDiarizationConfig&& from) noexcept
    : SpeakerDiarizationConfig() {
    *this = ::std::move(from);
  }

  inline SpeakerDiarizationConfig& operator=(const SpeakerDiarizationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeakerDiarizationConfig& operator=(SpeakerDiarizationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeakerDiarizationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeakerDiarizationConfig* internal_default_instance() {
    return reinterpret_cast<const SpeakerDiarizationConfig*>(
               &_SpeakerDiarizationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SpeakerDiarizationConfig& a, SpeakerDiarizationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeakerDiarizationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeakerDiarizationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeakerDiarizationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeakerDiarizationConfig& from) {
    SpeakerDiarizationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeakerDiarizationConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.SpeakerDiarizationConfig";
  }
  protected:
  explicit SpeakerDiarizationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableSpeakerDiarizationFieldNumber = 1,
    kMinSpeakerCountFieldNumber = 2,
    kMaxSpeakerCountFieldNumber = 3,
    kSpeakerTagFieldNumber = 5,
  };
  // bool enable_speaker_diarization = 1;
  void clear_enable_speaker_diarization();
  bool enable_speaker_diarization() const;
  void set_enable_speaker_diarization(bool value);
  private:
  bool _internal_enable_speaker_diarization() const;
  void _internal_set_enable_speaker_diarization(bool value);
  public:

  // int32 min_speaker_count = 2;
  void clear_min_speaker_count();
  int32_t min_speaker_count() const;
  void set_min_speaker_count(int32_t value);
  private:
  int32_t _internal_min_speaker_count() const;
  void _internal_set_min_speaker_count(int32_t value);
  public:

  // int32 max_speaker_count = 3;
  void clear_max_speaker_count();
  int32_t max_speaker_count() const;
  void set_max_speaker_count(int32_t value);
  private:
  int32_t _internal_max_speaker_count() const;
  void _internal_set_max_speaker_count(int32_t value);
  public:

  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  PROTOBUF_DEPRECATED void clear_speaker_tag();
  PROTOBUF_DEPRECATED int32_t speaker_tag() const;
  PROTOBUF_DEPRECATED void set_speaker_tag(int32_t value);
  private:
  int32_t _internal_speaker_tag() const;
  void _internal_set_speaker_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeakerDiarizationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_speaker_diarization_;
    int32_t min_speaker_count_;
    int32_t max_speaker_count_;
    int32_t speaker_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionMetadata) */ {
 public:
  inline RecognitionMetadata() : RecognitionMetadata(nullptr) {}
  ~RecognitionMetadata() override;
  explicit PROTOBUF_CONSTEXPR RecognitionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionMetadata(const RecognitionMetadata& from);
  RecognitionMetadata(RecognitionMetadata&& from) noexcept
    : RecognitionMetadata() {
    *this = ::std::move(from);
  }

  inline RecognitionMetadata& operator=(const RecognitionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionMetadata& operator=(RecognitionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionMetadata* internal_default_instance() {
    return reinterpret_cast<const RecognitionMetadata*>(
               &_RecognitionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecognitionMetadata& a, RecognitionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionMetadata& from) {
    RecognitionMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.RecognitionMetadata";
  }
  protected:
  explicit RecognitionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecognitionMetadata_InteractionType InteractionType;
  static constexpr InteractionType INTERACTION_TYPE_UNSPECIFIED =
    RecognitionMetadata_InteractionType_INTERACTION_TYPE_UNSPECIFIED;
  static constexpr InteractionType DISCUSSION =
    RecognitionMetadata_InteractionType_DISCUSSION;
  static constexpr InteractionType PRESENTATION =
    RecognitionMetadata_InteractionType_PRESENTATION;
  static constexpr InteractionType PHONE_CALL =
    RecognitionMetadata_InteractionType_PHONE_CALL;
  static constexpr InteractionType VOICEMAIL =
    RecognitionMetadata_InteractionType_VOICEMAIL;
  static constexpr InteractionType PROFESSIONALLY_PRODUCED =
    RecognitionMetadata_InteractionType_PROFESSIONALLY_PRODUCED;
  static constexpr InteractionType VOICE_SEARCH =
    RecognitionMetadata_InteractionType_VOICE_SEARCH;
  static constexpr InteractionType VOICE_COMMAND =
    RecognitionMetadata_InteractionType_VOICE_COMMAND;
  static constexpr InteractionType DICTATION =
    RecognitionMetadata_InteractionType_DICTATION;
  static inline bool InteractionType_IsValid(int value) {
    return RecognitionMetadata_InteractionType_IsValid(value);
  }
  static constexpr InteractionType InteractionType_MIN =
    RecognitionMetadata_InteractionType_InteractionType_MIN;
  static constexpr InteractionType InteractionType_MAX =
    RecognitionMetadata_InteractionType_InteractionType_MAX;
  static constexpr int InteractionType_ARRAYSIZE =
    RecognitionMetadata_InteractionType_InteractionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InteractionType_descriptor() {
    return RecognitionMetadata_InteractionType_descriptor();
  }
  template<typename T>
  static inline const std::string& InteractionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InteractionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InteractionType_Name.");
    return RecognitionMetadata_InteractionType_Name(enum_t_value);
  }
  static inline bool InteractionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InteractionType* value) {
    return RecognitionMetadata_InteractionType_Parse(name, value);
  }

  typedef RecognitionMetadata_MicrophoneDistance MicrophoneDistance;
  static constexpr MicrophoneDistance MICROPHONE_DISTANCE_UNSPECIFIED =
    RecognitionMetadata_MicrophoneDistance_MICROPHONE_DISTANCE_UNSPECIFIED;
  static constexpr MicrophoneDistance NEARFIELD =
    RecognitionMetadata_MicrophoneDistance_NEARFIELD;
  static constexpr MicrophoneDistance MIDFIELD =
    RecognitionMetadata_MicrophoneDistance_MIDFIELD;
  static constexpr MicrophoneDistance FARFIELD =
    RecognitionMetadata_MicrophoneDistance_FARFIELD;
  static inline bool MicrophoneDistance_IsValid(int value) {
    return RecognitionMetadata_MicrophoneDistance_IsValid(value);
  }
  static constexpr MicrophoneDistance MicrophoneDistance_MIN =
    RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MIN;
  static constexpr MicrophoneDistance MicrophoneDistance_MAX =
    RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MAX;
  static constexpr int MicrophoneDistance_ARRAYSIZE =
    RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MicrophoneDistance_descriptor() {
    return RecognitionMetadata_MicrophoneDistance_descriptor();
  }
  template<typename T>
  static inline const std::string& MicrophoneDistance_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MicrophoneDistance>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MicrophoneDistance_Name.");
    return RecognitionMetadata_MicrophoneDistance_Name(enum_t_value);
  }
  static inline bool MicrophoneDistance_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MicrophoneDistance* value) {
    return RecognitionMetadata_MicrophoneDistance_Parse(name, value);
  }

  typedef RecognitionMetadata_OriginalMediaType OriginalMediaType;
  static constexpr OriginalMediaType ORIGINAL_MEDIA_TYPE_UNSPECIFIED =
    RecognitionMetadata_OriginalMediaType_ORIGINAL_MEDIA_TYPE_UNSPECIFIED;
  static constexpr OriginalMediaType AUDIO =
    RecognitionMetadata_OriginalMediaType_AUDIO;
  static constexpr OriginalMediaType VIDEO =
    RecognitionMetadata_OriginalMediaType_VIDEO;
  static inline bool OriginalMediaType_IsValid(int value) {
    return RecognitionMetadata_OriginalMediaType_IsValid(value);
  }
  static constexpr OriginalMediaType OriginalMediaType_MIN =
    RecognitionMetadata_OriginalMediaType_OriginalMediaType_MIN;
  static constexpr OriginalMediaType OriginalMediaType_MAX =
    RecognitionMetadata_OriginalMediaType_OriginalMediaType_MAX;
  static constexpr int OriginalMediaType_ARRAYSIZE =
    RecognitionMetadata_OriginalMediaType_OriginalMediaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OriginalMediaType_descriptor() {
    return RecognitionMetadata_OriginalMediaType_descriptor();
  }
  template<typename T>
  static inline const std::string& OriginalMediaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OriginalMediaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OriginalMediaType_Name.");
    return RecognitionMetadata_OriginalMediaType_Name(enum_t_value);
  }
  static inline bool OriginalMediaType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OriginalMediaType* value) {
    return RecognitionMetadata_OriginalMediaType_Parse(name, value);
  }

  typedef RecognitionMetadata_RecordingDeviceType RecordingDeviceType;
  static constexpr RecordingDeviceType RECORDING_DEVICE_TYPE_UNSPECIFIED =
    RecognitionMetadata_RecordingDeviceType_RECORDING_DEVICE_TYPE_UNSPECIFIED;
  static constexpr RecordingDeviceType SMARTPHONE =
    RecognitionMetadata_RecordingDeviceType_SMARTPHONE;
  static constexpr RecordingDeviceType PC =
    RecognitionMetadata_RecordingDeviceType_PC;
  static constexpr RecordingDeviceType PHONE_LINE =
    RecognitionMetadata_RecordingDeviceType_PHONE_LINE;
  static constexpr RecordingDeviceType VEHICLE =
    RecognitionMetadata_RecordingDeviceType_VEHICLE;
  static constexpr RecordingDeviceType OTHER_OUTDOOR_DEVICE =
    RecognitionMetadata_RecordingDeviceType_OTHER_OUTDOOR_DEVICE;
  static constexpr RecordingDeviceType OTHER_INDOOR_DEVICE =
    RecognitionMetadata_RecordingDeviceType_OTHER_INDOOR_DEVICE;
  static inline bool RecordingDeviceType_IsValid(int value) {
    return RecognitionMetadata_RecordingDeviceType_IsValid(value);
  }
  static constexpr RecordingDeviceType RecordingDeviceType_MIN =
    RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MIN;
  static constexpr RecordingDeviceType RecordingDeviceType_MAX =
    RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MAX;
  static constexpr int RecordingDeviceType_ARRAYSIZE =
    RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingDeviceType_descriptor() {
    return RecognitionMetadata_RecordingDeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingDeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingDeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingDeviceType_Name.");
    return RecognitionMetadata_RecordingDeviceType_Name(enum_t_value);
  }
  static inline bool RecordingDeviceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingDeviceType* value) {
    return RecognitionMetadata_RecordingDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRecordingDeviceNameFieldNumber = 7,
    kOriginalMimeTypeFieldNumber = 8,
    kAudioTopicFieldNumber = 10,
    kInteractionTypeFieldNumber = 1,
    kIndustryNaicsCodeOfAudioFieldNumber = 3,
    kMicrophoneDistanceFieldNumber = 4,
    kOriginalMediaTypeFieldNumber = 5,
    kRecordingDeviceTypeFieldNumber = 6,
  };
  // string recording_device_name = 7;
  void clear_recording_device_name();
  const std::string& recording_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recording_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recording_device_name();
  PROTOBUF_NODISCARD std::string* release_recording_device_name();
  void set_allocated_recording_device_name(std::string* recording_device_name);
  private:
  const std::string& _internal_recording_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recording_device_name(const std::string& value);
  std::string* _internal_mutable_recording_device_name();
  public:

  // string original_mime_type = 8;
  void clear_original_mime_type();
  const std::string& original_mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_mime_type();
  PROTOBUF_NODISCARD std::string* release_original_mime_type();
  void set_allocated_original_mime_type(std::string* original_mime_type);
  private:
  const std::string& _internal_original_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_mime_type(const std::string& value);
  std::string* _internal_mutable_original_mime_type();
  public:

  // string audio_topic = 10;
  void clear_audio_topic();
  const std::string& audio_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_topic();
  PROTOBUF_NODISCARD std::string* release_audio_topic();
  void set_allocated_audio_topic(std::string* audio_topic);
  private:
  const std::string& _internal_audio_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_topic(const std::string& value);
  std::string* _internal_mutable_audio_topic();
  public:

  // .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
  void clear_interaction_type();
  ::google::cloud::speech::v1::RecognitionMetadata_InteractionType interaction_type() const;
  void set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value);
  private:
  ::google::cloud::speech::v1::RecognitionMetadata_InteractionType _internal_interaction_type() const;
  void _internal_set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value);
  public:

  // uint32 industry_naics_code_of_audio = 3;
  void clear_industry_naics_code_of_audio();
  uint32_t industry_naics_code_of_audio() const;
  void set_industry_naics_code_of_audio(uint32_t value);
  private:
  uint32_t _internal_industry_naics_code_of_audio() const;
  void _internal_set_industry_naics_code_of_audio(uint32_t value);
  public:

  // .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  void clear_microphone_distance();
  ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance microphone_distance() const;
  void set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value);
  private:
  ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance _internal_microphone_distance() const;
  void _internal_set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value);
  public:

  // .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  void clear_original_media_type();
  ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType original_media_type() const;
  void set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value);
  private:
  ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType _internal_original_media_type() const;
  void _internal_set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value);
  public:

  // .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  void clear_recording_device_type();
  ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType recording_device_type() const;
  void set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value);
  private:
  ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType _internal_recording_device_type() const;
  void _internal_set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recording_device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_mime_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_topic_;
    int interaction_type_;
    uint32_t industry_naics_code_of_audio_;
    int microphone_distance_;
    int original_media_type_;
    int recording_device_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechContext) */ {
 public:
  inline SpeechContext() : SpeechContext(nullptr) {}
  ~SpeechContext() override;
  explicit PROTOBUF_CONSTEXPR SpeechContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechContext(const SpeechContext& from);
  SpeechContext(SpeechContext&& from) noexcept
    : SpeechContext() {
    *this = ::std::move(from);
  }

  inline SpeechContext& operator=(const SpeechContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechContext& operator=(SpeechContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechContext* internal_default_instance() {
    return reinterpret_cast<const SpeechContext*>(
               &_SpeechContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpeechContext& a, SpeechContext& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechContext& from) {
    SpeechContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.SpeechContext";
  }
  protected:
  explicit SpeechContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 1,
    kBoostFieldNumber = 4,
  };
  // repeated string phrases = 1;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;
  public:
  void clear_phrases();
  const std::string& phrases(int index) const;
  std::string* mutable_phrases(int index);
  void set_phrases(int index, const std::string& value);
  void set_phrases(int index, std::string&& value);
  void set_phrases(int index, const char* value);
  void set_phrases(int index, const char* value, size_t size);
  std::string* add_phrases();
  void add_phrases(const std::string& value);
  void add_phrases(std::string&& value);
  void add_phrases(const char* value);
  void add_phrases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phrases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phrases();
  private:
  const std::string& _internal_phrases(int index) const;
  std::string* _internal_add_phrases();
  public:

  // float boost = 4;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phrases_;
    float boost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionAudio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionAudio) */ {
 public:
  inline RecognitionAudio() : RecognitionAudio(nullptr) {}
  ~RecognitionAudio() override;
  explicit PROTOBUF_CONSTEXPR RecognitionAudio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognitionAudio(const RecognitionAudio& from);
  RecognitionAudio(RecognitionAudio&& from) noexcept
    : RecognitionAudio() {
    *this = ::std::move(from);
  }

  inline RecognitionAudio& operator=(const RecognitionAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionAudio& operator=(RecognitionAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionAudio& default_instance() {
    return *internal_default_instance();
  }
  enum AudioSourceCase {
    kContent = 1,
    kUri = 2,
    AUDIO_SOURCE_NOT_SET = 0,
  };

  static inline const RecognitionAudio* internal_default_instance() {
    return reinterpret_cast<const RecognitionAudio*>(
               &_RecognitionAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecognitionAudio& a, RecognitionAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognitionAudio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognitionAudio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognitionAudio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognitionAudio& from) {
    RecognitionAudio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognitionAudio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.RecognitionAudio";
  }
  protected:
  explicit RecognitionAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kUriFieldNumber = 2,
  };
  // bytes content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string uri = 2;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  void clear_audio_source();
  AudioSourceCase audio_source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionAudio)
 private:
  class _Internal;
  void set_has_content();
  void set_has_uri();

  inline bool has_audio_source() const;
  inline void clear_has_audio_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AudioSourceUnion {
      constexpr AudioSourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    } audio_source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognizeResponse) */ {
 public:
  inline RecognizeResponse() : RecognizeResponse(nullptr) {}
  ~RecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR RecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeResponse(const RecognizeResponse& from);
  RecognizeResponse(RecognizeResponse&& from) noexcept
    : RecognizeResponse() {
    *this = ::std::move(from);
  }

  inline RecognizeResponse& operator=(const RecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeResponse& operator=(RecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse*>(
               &_RecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecognizeResponse& a, RecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeResponse& from) {
    RecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.RecognizeResponse";
  }
  protected:
  explicit RecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kTotalBilledTimeFieldNumber = 3,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::google::cloud::speech::v1::SpeechRecognitionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >*
      mutable_results();
  private:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& _internal_results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* _internal_add_results();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >&
      results() const;

  // .google.protobuf.Duration total_billed_time = 3;
  bool has_total_billed_time() const;
  private:
  bool _internal_has_total_billed_time() const;
  public:
  void clear_total_billed_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_billed_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_billed_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_billed_time();
  public:
  void unsafe_arena_set_allocated_total_billed_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_billed_time();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult > results_;
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeResponse) */ {
 public:
  inline LongRunningRecognizeResponse() : LongRunningRecognizeResponse(nullptr) {}
  ~LongRunningRecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongRunningRecognizeResponse(const LongRunningRecognizeResponse& from);
  LongRunningRecognizeResponse(LongRunningRecognizeResponse&& from) noexcept
    : LongRunningRecognizeResponse() {
    *this = ::std::move(from);
  }

  inline LongRunningRecognizeResponse& operator=(const LongRunningRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeResponse& operator=(LongRunningRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeResponse*>(
               &_LongRunningRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LongRunningRecognizeResponse& a, LongRunningRecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LongRunningRecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LongRunningRecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LongRunningRecognizeResponse& from) {
    LongRunningRecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongRunningRecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.LongRunningRecognizeResponse";
  }
  protected:
  explicit LongRunningRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kTotalBilledTimeFieldNumber = 3,
    kOutputConfigFieldNumber = 6,
    kOutputErrorFieldNumber = 7,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::google::cloud::speech::v1::SpeechRecognitionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >*
      mutable_results();
  private:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& _internal_results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* _internal_add_results();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >&
      results() const;

  // .google.protobuf.Duration total_billed_time = 3;
  bool has_total_billed_time() const;
  private:
  bool _internal_has_total_billed_time() const;
  public:
  void clear_total_billed_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_billed_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_billed_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_billed_time();
  public:
  void unsafe_arena_set_allocated_total_billed_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_billed_time();

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::TranscriptOutputConfig* release_output_config();
  ::google::cloud::speech::v1::TranscriptOutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* output_config);
  private:
  const ::google::cloud::speech::v1::TranscriptOutputConfig& _internal_output_config() const;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _internal_mutable_output_config();
  public:
  void unsafe_arena_set_allocated_output_config(
      ::google::cloud::speech::v1::TranscriptOutputConfig* output_config);
  ::google::cloud::speech::v1::TranscriptOutputConfig* unsafe_arena_release_output_config();

  // .google.rpc.Status output_error = 7;
  bool has_output_error() const;
  private:
  bool _internal_has_output_error() const;
  public:
  void clear_output_error();
  const ::google::rpc::Status& output_error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_output_error();
  ::google::rpc::Status* mutable_output_error();
  void set_allocated_output_error(::google::rpc::Status* output_error);
  private:
  const ::google::rpc::Status& _internal_output_error() const;
  ::google::rpc::Status* _internal_mutable_output_error();
  public:
  void unsafe_arena_set_allocated_output_error(
      ::google::rpc::Status* output_error);
  ::google::rpc::Status* unsafe_arena_release_output_error();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult > results_;
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time_;
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config_;
    ::google::rpc::Status* output_error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeMetadata) */ {
 public:
  inline LongRunningRecognizeMetadata() : LongRunningRecognizeMetadata(nullptr) {}
  ~LongRunningRecognizeMetadata() override;
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongRunningRecognizeMetadata(const LongRunningRecognizeMetadata& from);
  LongRunningRecognizeMetadata(LongRunningRecognizeMetadata&& from) noexcept
    : LongRunningRecognizeMetadata() {
    *this = ::std::move(from);
  }

  inline LongRunningRecognizeMetadata& operator=(const LongRunningRecognizeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeMetadata& operator=(LongRunningRecognizeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeMetadata* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeMetadata*>(
               &_LongRunningRecognizeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LongRunningRecognizeMetadata& a, LongRunningRecognizeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LongRunningRecognizeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LongRunningRecognizeMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LongRunningRecognizeMetadata& from) {
    LongRunningRecognizeMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongRunningRecognizeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.LongRunningRecognizeMetadata";
  }
  protected:
  explicit LongRunningRecognizeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 4,
    kStartTimeFieldNumber = 2,
    kLastUpdateTimeFieldNumber = 3,
    kProgressPercentFieldNumber = 1,
  };
  // string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp last_update_time = 3;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();

  // int32 progress_percent = 1;
  void clear_progress_percent();
  int32_t progress_percent() const;
  void set_progress_percent(int32_t value);
  private:
  int32_t _internal_progress_percent() const;
  void _internal_set_progress_percent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    int32_t progress_percent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognizeResponse) */ {
 public:
  inline StreamingRecognizeResponse() : StreamingRecognizeResponse(nullptr) {}
  ~StreamingRecognizeResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognizeResponse(const StreamingRecognizeResponse& from);
  StreamingRecognizeResponse(StreamingRecognizeResponse&& from) noexcept
    : StreamingRecognizeResponse() {
    *this = ::std::move(from);
  }

  inline StreamingRecognizeResponse& operator=(const StreamingRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeResponse& operator=(StreamingRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeResponse*>(
               &_StreamingRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StreamingRecognizeResponse& a, StreamingRecognizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognizeResponse& from) {
    StreamingRecognizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.StreamingRecognizeResponse";
  }
  protected:
  explicit StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamingRecognizeResponse_SpeechEventType SpeechEventType;
  static constexpr SpeechEventType SPEECH_EVENT_UNSPECIFIED =
    StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_UNSPECIFIED;
  static constexpr SpeechEventType END_OF_SINGLE_UTTERANCE =
    StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE;
  static inline bool SpeechEventType_IsValid(int value) {
    return StreamingRecognizeResponse_SpeechEventType_IsValid(value);
  }
  static constexpr SpeechEventType SpeechEventType_MIN =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN;
  static constexpr SpeechEventType SpeechEventType_MAX =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX;
  static constexpr int SpeechEventType_ARRAYSIZE =
    StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpeechEventType_descriptor() {
    return StreamingRecognizeResponse_SpeechEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& SpeechEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpeechEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpeechEventType_Name.");
    return StreamingRecognizeResponse_SpeechEventType_Name(enum_t_value);
  }
  static inline bool SpeechEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpeechEventType* value) {
    return StreamingRecognizeResponse_SpeechEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kErrorFieldNumber = 1,
    kTotalBilledTimeFieldNumber = 5,
    kSpeechEventTypeFieldNumber = 4,
  };
  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::google::cloud::speech::v1::StreamingRecognitionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >*
      mutable_results();
  private:
  const ::google::cloud::speech::v1::StreamingRecognitionResult& _internal_results(int index) const;
  ::google::cloud::speech::v1::StreamingRecognitionResult* _internal_add_results();
  public:
  const ::google::cloud::speech::v1::StreamingRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::StreamingRecognitionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >&
      results() const;

  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .google.protobuf.Duration total_billed_time = 5;
  bool has_total_billed_time() const;
  private:
  bool _internal_has_total_billed_time() const;
  public:
  void clear_total_billed_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total_billed_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total_billed_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total_billed_time();
  public:
  void unsafe_arena_set_allocated_total_billed_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total_billed_time();

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  void clear_speech_event_type();
  ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType speech_event_type() const;
  void set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value);
  private:
  ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType _internal_speech_event_type() const;
  void _internal_set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult > results_;
    ::google::rpc::Status* error_;
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time_;
    int speech_event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognitionResult) */ {
 public:
  inline StreamingRecognitionResult() : StreamingRecognitionResult(nullptr) {}
  ~StreamingRecognitionResult() override;
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingRecognitionResult(const StreamingRecognitionResult& from);
  StreamingRecognitionResult(StreamingRecognitionResult&& from) noexcept
    : StreamingRecognitionResult() {
    *this = ::std::move(from);
  }

  inline StreamingRecognitionResult& operator=(const StreamingRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionResult& operator=(StreamingRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionResult*>(
               &_StreamingRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamingRecognitionResult& a, StreamingRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingRecognitionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingRecognitionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingRecognitionResult& from) {
    StreamingRecognitionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRecognitionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.StreamingRecognitionResult";
  }
  protected:
  explicit StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 6,
    kResultEndTimeFieldNumber = 4,
    kIsFinalFieldNumber = 2,
    kStabilityFieldNumber = 3,
    kChannelTagFieldNumber = 5,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;
  public:
  void clear_alternatives();
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
      mutable_alternatives();
  private:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& _internal_alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _internal_add_alternatives();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* add_alternatives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
      alternatives() const;

  // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Duration result_end_time = 4;
  bool has_result_end_time() const;
  private:
  bool _internal_has_result_end_time() const;
  public:
  void clear_result_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_result_end_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_result_end_time();
  void set_allocated_result_end_time(::PROTOBUF_NAMESPACE_ID::Duration* result_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_result_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_result_end_time();
  public:
  void unsafe_arena_set_allocated_result_end_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_result_end_time();

  // bool is_final = 2;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // float stability = 3;
  void clear_stability();
  float stability() const;
  void set_stability(float value);
  private:
  float _internal_stability() const;
  void _internal_set_stability(float value);
  public:

  // int32 channel_tag = 5;
  void clear_channel_tag();
  int32_t channel_tag() const;
  void set_channel_tag(int32_t value);
  private:
  int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative > alternatives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time_;
    bool is_final_;
    float stability_;
    int32_t channel_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechRecognitionResult) */ {
 public:
  inline SpeechRecognitionResult() : SpeechRecognitionResult(nullptr) {}
  ~SpeechRecognitionResult() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionResult(const SpeechRecognitionResult& from);
  SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
    : SpeechRecognitionResult() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
               &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechRecognitionResult& from) {
    SpeechRecognitionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.SpeechRecognitionResult";
  }
  protected:
  explicit SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 5,
    kResultEndTimeFieldNumber = 4,
    kChannelTagFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;
  public:
  void clear_alternatives();
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
      mutable_alternatives();
  private:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& _internal_alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _internal_add_alternatives();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* add_alternatives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
      alternatives() const;

  // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.protobuf.Duration result_end_time = 4;
  bool has_result_end_time() const;
  private:
  bool _internal_has_result_end_time() const;
  public:
  void clear_result_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_result_end_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_result_end_time();
  void set_allocated_result_end_time(::PROTOBUF_NAMESPACE_ID::Duration* result_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_result_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_result_end_time();
  public:
  void unsafe_arena_set_allocated_result_end_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_result_end_time();

  // int32 channel_tag = 2;
  void clear_channel_tag();
  int32_t channel_tag() const;
  void set_channel_tag(int32_t value);
  private:
  int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative > alternatives_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time_;
    int32_t channel_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionAlternative final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechRecognitionAlternative) */ {
 public:
  inline SpeechRecognitionAlternative() : SpeechRecognitionAlternative(nullptr) {}
  ~SpeechRecognitionAlternative() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from);
  SpeechRecognitionAlternative(SpeechRecognitionAlternative&& from) noexcept
    : SpeechRecognitionAlternative() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionAlternative& operator=(const SpeechRecognitionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionAlternative& operator=(SpeechRecognitionAlternative&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionAlternative& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionAlternative* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionAlternative*>(
               &_SpeechRecognitionAlternative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SpeechRecognitionAlternative& a, SpeechRecognitionAlternative& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionAlternative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionAlternative& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechRecognitionAlternative& from) {
    SpeechRecognitionAlternative::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionAlternative* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.SpeechRecognitionAlternative";
  }
  protected:
  explicit SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 3,
    kTranscriptFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  ::google::cloud::speech::v1::WordInfo* mutable_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >*
      mutable_words();
  private:
  const ::google::cloud::speech::v1::WordInfo& _internal_words(int index) const;
  ::google::cloud::speech::v1::WordInfo* _internal_add_words();
  public:
  const ::google::cloud::speech::v1::WordInfo& words(int index) const;
  ::google::cloud::speech::v1::WordInfo* add_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >&
      words() const;

  // string transcript = 1;
  void clear_transcript();
  const std::string& transcript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transcript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transcript();
  PROTOBUF_NODISCARD std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionAlternative)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo > words_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class WordInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.WordInfo) */ {
 public:
  inline WordInfo() : WordInfo(nullptr) {}
  ~WordInfo() override;
  explicit PROTOBUF_CONSTEXPR WordInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WordInfo(const WordInfo& from);
  WordInfo(WordInfo&& from) noexcept
    : WordInfo() {
    *this = ::std::move(from);
  }

  inline WordInfo& operator=(const WordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordInfo& operator=(WordInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WordInfo* internal_default_instance() {
    return reinterpret_cast<const WordInfo*>(
               &_WordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WordInfo& a, WordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WordInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WordInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WordInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WordInfo& from) {
    WordInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.WordInfo";
  }
  protected:
  explicit WordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 3,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kConfidenceFieldNumber = 4,
    kSpeakerTagFieldNumber = 5,
  };
  // string word = 3;
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // .google.protobuf.Duration start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Duration* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* start_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_start_time();

  // .google.protobuf.Duration end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Duration* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* end_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_end_time();

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 speaker_tag = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_speaker_tag();
  int32_t speaker_tag() const;
  void set_speaker_tag(int32_t value);
  private:
  int32_t _internal_speaker_tag() const;
  void _internal_set_speaker_tag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.WordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
    ::PROTOBUF_NAMESPACE_ID::Duration* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Duration* end_time_;
    float confidence_;
    int32_t speaker_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecognizeRequest

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool RecognizeRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool RecognizeRequest::has_config() const {
  return _internal_has_config();
}
inline void RecognizeRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& RecognizeRequest::_internal_config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(
      ::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& RecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.config)
  return _internal_config();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::release_config() {
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::mutable_config() {
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.config)
  return _msg;
}
inline void RecognizeRequest::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}

// .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool RecognizeRequest::_internal_has_audio() const {
  return this != internal_default_instance() && _impl_.audio_ != nullptr;
}
inline bool RecognizeRequest::has_audio() const {
  return _internal_has_audio();
}
inline void RecognizeRequest::clear_audio() {
  if (GetArenaForAllocation() == nullptr && _impl_.audio_ != nullptr) {
    delete _impl_.audio_;
  }
  _impl_.audio_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionAudio& RecognizeRequest::_internal_audio() const {
  const ::google::cloud::speech::v1::RecognitionAudio* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionAudio&>(
      ::google::cloud::speech::v1::_RecognitionAudio_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionAudio& RecognizeRequest::audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.audio)
  return _internal_audio();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1::RecognitionAudio* audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::release_audio() {
  
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.audio)
  
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::_internal_mutable_audio() {
  
  if (_impl_.audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionAudio>(GetArenaForAllocation());
    _impl_.audio_ = p;
  }
  return _impl_.audio_;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::mutable_audio() {
  ::google::cloud::speech::v1::RecognitionAudio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.audio)
  return _msg;
}
inline void RecognizeRequest::set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}

// -------------------------------------------------------------------

// LongRunningRecognizeRequest

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool LongRunningRecognizeRequest::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool LongRunningRecognizeRequest::has_config() const {
  return _internal_has_config();
}
inline void LongRunningRecognizeRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& LongRunningRecognizeRequest::_internal_config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(
      ::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& LongRunningRecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
  return _internal_config();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::release_config() {
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::mutable_config() {
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
}

// .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool LongRunningRecognizeRequest::_internal_has_audio() const {
  return this != internal_default_instance() && _impl_.audio_ != nullptr;
}
inline bool LongRunningRecognizeRequest::has_audio() const {
  return _internal_has_audio();
}
inline void LongRunningRecognizeRequest::clear_audio() {
  if (GetArenaForAllocation() == nullptr && _impl_.audio_ != nullptr) {
    delete _impl_.audio_;
  }
  _impl_.audio_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionAudio& LongRunningRecognizeRequest::_internal_audio() const {
  const ::google::cloud::speech::v1::RecognitionAudio* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionAudio&>(
      ::google::cloud::speech::v1::_RecognitionAudio_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionAudio& LongRunningRecognizeRequest::audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
  return _internal_audio();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1::RecognitionAudio* audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::release_audio() {
  
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
  
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::_internal_mutable_audio() {
  
  if (_impl_.audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionAudio>(GetArenaForAllocation());
    _impl_.audio_ = p;
  }
  return _impl_.audio_;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::mutable_audio() {
  ::google::cloud::speech::v1::RecognitionAudio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
}

// .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool LongRunningRecognizeRequest::_internal_has_output_config() const {
  return this != internal_default_instance() && _impl_.output_config_ != nullptr;
}
inline bool LongRunningRecognizeRequest::has_output_config() const {
  return _internal_has_output_config();
}
inline void LongRunningRecognizeRequest::clear_output_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_config_ != nullptr) {
    delete _impl_.output_config_;
  }
  _impl_.output_config_ = nullptr;
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeRequest::_internal_output_config() const {
  const ::google::cloud::speech::v1::TranscriptOutputConfig* p = _impl_.output_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::TranscriptOutputConfig&>(
      ::google::cloud::speech::v1::_TranscriptOutputConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeRequest::output_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
  return _internal_output_config();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_output_config(
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_config_);
  }
  _impl_.output_config_ = output_config;
  if (output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::release_output_config() {
  
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::unsafe_arena_release_output_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
  
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::_internal_mutable_output_config() {
  
  if (_impl_.output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::TranscriptOutputConfig>(GetArenaForAllocation());
    _impl_.output_config_ = p;
  }
  return _impl_.output_config_;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::mutable_output_config() {
  ::google::cloud::speech::v1::TranscriptOutputConfig* _msg = _internal_mutable_output_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.output_config_;
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output_config);
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
}

// -------------------------------------------------------------------

// TranscriptOutputConfig

// string gcs_uri = 1;
inline bool TranscriptOutputConfig::_internal_has_gcs_uri() const {
  return output_type_case() == kGcsUri;
}
inline bool TranscriptOutputConfig::has_gcs_uri() const {
  return _internal_has_gcs_uri();
}
inline void TranscriptOutputConfig::set_has_gcs_uri() {
  _impl_._oneof_case_[0] = kGcsUri;
}
inline void TranscriptOutputConfig::clear_gcs_uri() {
  if (_internal_has_gcs_uri()) {
    _impl_.output_type_.gcs_uri_.Destroy();
    clear_has_output_type();
  }
}
inline const std::string& TranscriptOutputConfig::gcs_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  return _internal_gcs_uri();
}
template <typename ArgT0, typename... ArgT>
inline void TranscriptOutputConfig::set_gcs_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_gcs_uri()) {
    clear_output_type();
    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  _impl_.output_type_.gcs_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
}
inline std::string* TranscriptOutputConfig::mutable_gcs_uri() {
  std::string* _s = _internal_mutable_gcs_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  return _s;
}
inline const std::string& TranscriptOutputConfig::_internal_gcs_uri() const {
  if (_internal_has_gcs_uri()) {
    return _impl_.output_type_.gcs_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TranscriptOutputConfig::_internal_set_gcs_uri(const std::string& value) {
  if (!_internal_has_gcs_uri()) {
    clear_output_type();
    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  _impl_.output_type_.gcs_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* TranscriptOutputConfig::_internal_mutable_gcs_uri() {
  if (!_internal_has_gcs_uri()) {
    clear_output_type();
    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  return _impl_.output_type_.gcs_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* TranscriptOutputConfig::release_gcs_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  if (_internal_has_gcs_uri()) {
    clear_has_output_type();
    return _impl_.output_type_.gcs_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void TranscriptOutputConfig::set_allocated_gcs_uri(std::string* gcs_uri) {
  if (has_output_type()) {
    clear_output_type();
  }
  if (gcs_uri != nullptr) {
    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitAllocated(gcs_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
}

inline bool TranscriptOutputConfig::has_output_type() const {
  return output_type_case() != OUTPUT_TYPE_NOT_SET;
}
inline void TranscriptOutputConfig::clear_has_output_type() {
  _impl_._oneof_case_[0] = OUTPUT_TYPE_NOT_SET;
}
inline TranscriptOutputConfig::OutputTypeCase TranscriptOutputConfig::output_type_case() const {
  return TranscriptOutputConfig::OutputTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingRecognizeRequest

// .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
inline bool StreamingRecognizeRequest::_internal_has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline bool StreamingRecognizeRequest::has_streaming_config() const {
  return _internal_has_streaming_config();
}
inline void StreamingRecognizeRequest::set_has_streaming_config() {
  _impl_._oneof_case_[0] = kStreamingConfig;
}
inline void StreamingRecognizeRequest::clear_streaming_config() {
  if (_internal_has_streaming_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.streaming_request_.streaming_config_;
    }
    clear_has_streaming_request();
  }
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v1::StreamingRecognitionConfig* temp = _impl_.streaming_request_.streaming_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig& StreamingRecognizeRequest::_internal_streaming_config() const {
  return _internal_has_streaming_config()
      ? *_impl_.streaming_request_.streaming_config_
      : reinterpret_cast< ::google::cloud::speech::v1::StreamingRecognitionConfig&>(::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig& StreamingRecognizeRequest::streaming_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return _internal_streaming_config();
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v1::StreamingRecognitionConfig* temp = _impl_.streaming_request_.streaming_config_;
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingRecognizeRequest::unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::_internal_mutable_streaming_config() {
  if (!_internal_has_streaming_config()) {
    clear_streaming_request();
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ = CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig >(GetArenaForAllocation());
  }
  return _impl_.streaming_request_.streaming_config_;
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::mutable_streaming_config() {
  ::google::cloud::speech::v1::StreamingRecognitionConfig* _msg = _internal_mutable_streaming_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return _msg;
}

// bytes audio_content = 2;
inline bool StreamingRecognizeRequest::_internal_has_audio_content() const {
  return streaming_request_case() == kAudioContent;
}
inline bool StreamingRecognizeRequest::has_audio_content() const {
  return _internal_has_audio_content();
}
inline void StreamingRecognizeRequest::set_has_audio_content() {
  _impl_._oneof_case_[0] = kAudioContent;
}
inline void StreamingRecognizeRequest::clear_audio_content() {
  if (_internal_has_audio_content()) {
    _impl_.streaming_request_.audio_content_.Destroy();
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingRecognizeRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  return _internal_audio_content();
}
template <typename ArgT0, typename... ArgT>
inline void StreamingRecognizeRequest::set_audio_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  _impl_.streaming_request_.audio_content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
inline std::string* StreamingRecognizeRequest::mutable_audio_content() {
  std::string* _s = _internal_mutable_audio_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  return _s;
}
inline const std::string& StreamingRecognizeRequest::_internal_audio_content() const {
  if (_internal_has_audio_content()) {
    return _impl_.streaming_request_.audio_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamingRecognizeRequest::_internal_set_audio_content(const std::string& value) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  _impl_.streaming_request_.audio_content_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::_internal_mutable_audio_content() {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  return _impl_.streaming_request_.audio_content_.Mutable(      GetArenaForAllocation());
}
inline std::string* StreamingRecognizeRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  if (_internal_has_audio_content()) {
    clear_has_streaming_request();
    return _impl_.streaming_request_.audio_content_.Release();
  } else {
    return nullptr;
  }
}
inline void StreamingRecognizeRequest::set_allocated_audio_content(std::string* audio_content) {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (audio_content != nullptr) {
    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitAllocated(audio_content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}

inline bool StreamingRecognizeRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingRecognizeRequest::clear_has_streaming_request() {
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingRecognizeRequest::StreamingRequestCase StreamingRecognizeRequest::streaming_request_case() const {
  return StreamingRecognizeRequest::StreamingRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingRecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool StreamingRecognitionConfig::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool StreamingRecognitionConfig::has_config() const {
  return _internal_has_config();
}
inline void StreamingRecognitionConfig::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingRecognitionConfig::_internal_config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(
      ::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingRecognitionConfig::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return _internal_config();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::release_config() {
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::mutable_config() {
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}

// bool single_utterance = 2;
inline void StreamingRecognitionConfig::clear_single_utterance() {
  _impl_.single_utterance_ = false;
}
inline bool StreamingRecognitionConfig::_internal_single_utterance() const {
  return _impl_.single_utterance_;
}
inline bool StreamingRecognitionConfig::single_utterance() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
  return _internal_single_utterance();
}
inline void StreamingRecognitionConfig::_internal_set_single_utterance(bool value) {
  
  _impl_.single_utterance_ = value;
}
inline void StreamingRecognitionConfig::set_single_utterance(bool value) {
  _internal_set_single_utterance(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
}

// bool interim_results = 3;
inline void StreamingRecognitionConfig::clear_interim_results() {
  _impl_.interim_results_ = false;
}
inline bool StreamingRecognitionConfig::_internal_interim_results() const {
  return _impl_.interim_results_;
}
inline bool StreamingRecognitionConfig::interim_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
  return _internal_interim_results();
}
inline void StreamingRecognitionConfig::_internal_set_interim_results(bool value) {
  
  _impl_.interim_results_ = value;
}
inline void StreamingRecognitionConfig::set_interim_results(bool value) {
  _internal_set_interim_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
}

// -------------------------------------------------------------------

// RecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
inline void RecognitionConfig::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding RecognitionConfig::_internal_encoding() const {
  return static_cast< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding >(_impl_.encoding_);
}
inline ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding RecognitionConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.encoding)
  return _internal_encoding();
}
inline void RecognitionConfig::_internal_set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value) {
  
  _impl_.encoding_ = value;
}
inline void RecognitionConfig::set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void RecognitionConfig::clear_sample_rate_hertz() {
  _impl_.sample_rate_hertz_ = 0;
}
inline int32_t RecognitionConfig::_internal_sample_rate_hertz() const {
  return _impl_.sample_rate_hertz_;
}
inline int32_t RecognitionConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void RecognitionConfig::_internal_set_sample_rate_hertz(int32_t value) {
  
  _impl_.sample_rate_hertz_ = value;
}
inline void RecognitionConfig::set_sample_rate_hertz(int32_t value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
}

// int32 audio_channel_count = 7;
inline void RecognitionConfig::clear_audio_channel_count() {
  _impl_.audio_channel_count_ = 0;
}
inline int32_t RecognitionConfig::_internal_audio_channel_count() const {
  return _impl_.audio_channel_count_;
}
inline int32_t RecognitionConfig::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.audio_channel_count)
  return _internal_audio_channel_count();
}
inline void RecognitionConfig::_internal_set_audio_channel_count(int32_t value) {
  
  _impl_.audio_channel_count_ = value;
}
inline void RecognitionConfig::set_audio_channel_count(int32_t value) {
  _internal_set_audio_channel_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.audio_channel_count)
}

// bool enable_separate_recognition_per_channel = 12;
inline void RecognitionConfig::clear_enable_separate_recognition_per_channel() {
  _impl_.enable_separate_recognition_per_channel_ = false;
}
inline bool RecognitionConfig::_internal_enable_separate_recognition_per_channel() const {
  return _impl_.enable_separate_recognition_per_channel_;
}
inline bool RecognitionConfig::enable_separate_recognition_per_channel() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_separate_recognition_per_channel)
  return _internal_enable_separate_recognition_per_channel();
}
inline void RecognitionConfig::_internal_set_enable_separate_recognition_per_channel(bool value) {
  
  _impl_.enable_separate_recognition_per_channel_ = value;
}
inline void RecognitionConfig::set_enable_separate_recognition_per_channel(bool value) {
  _internal_set_enable_separate_recognition_per_channel(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_separate_recognition_per_channel)
}

// string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
inline void RecognitionConfig::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& RecognitionConfig::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognitionConfig::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.language_code)
}
inline std::string* RecognitionConfig::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _s;
}
inline const std::string& RecognitionConfig::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void RecognitionConfig::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionConfig::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognitionConfig::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _impl_.language_code_.Release();
}
inline void RecognitionConfig::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.language_code)
}

// repeated string alternative_language_codes = 18;
inline int RecognitionConfig::_internal_alternative_language_codes_size() const {
  return _impl_.alternative_language_codes_.size();
}
inline int RecognitionConfig::alternative_language_codes_size() const {
  return _internal_alternative_language_codes_size();
}
inline void RecognitionConfig::clear_alternative_language_codes() {
  _impl_.alternative_language_codes_.Clear();
}
inline std::string* RecognitionConfig::add_alternative_language_codes() {
  std::string* _s = _internal_add_alternative_language_codes();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _s;
}
inline const std::string& RecognitionConfig::_internal_alternative_language_codes(int index) const {
  return _impl_.alternative_language_codes_.Get(index);
}
inline const std::string& RecognitionConfig::alternative_language_codes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _internal_alternative_language_codes(index);
}
inline std::string* RecognitionConfig::mutable_alternative_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _impl_.alternative_language_codes_.Mutable(index);
}
inline void RecognitionConfig::set_alternative_language_codes(int index, const std::string& value) {
  _impl_.alternative_language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::set_alternative_language_codes(int index, std::string&& value) {
  _impl_.alternative_language_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::set_alternative_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.alternative_language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::set_alternative_language_codes(int index, const char* value, size_t size) {
  _impl_.alternative_language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline std::string* RecognitionConfig::_internal_add_alternative_language_codes() {
  return _impl_.alternative_language_codes_.Add();
}
inline void RecognitionConfig::add_alternative_language_codes(const std::string& value) {
  _impl_.alternative_language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::add_alternative_language_codes(std::string&& value) {
  _impl_.alternative_language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::add_alternative_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.alternative_language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline void RecognitionConfig::add_alternative_language_codes(const char* value, size_t size) {
  _impl_.alternative_language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecognitionConfig::alternative_language_codes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _impl_.alternative_language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecognitionConfig::mutable_alternative_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return &_impl_.alternative_language_codes_;
}

// int32 max_alternatives = 4;
inline void RecognitionConfig::clear_max_alternatives() {
  _impl_.max_alternatives_ = 0;
}
inline int32_t RecognitionConfig::_internal_max_alternatives() const {
  return _impl_.max_alternatives_;
}
inline int32_t RecognitionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
  return _internal_max_alternatives();
}
inline void RecognitionConfig::_internal_set_max_alternatives(int32_t value) {
  
  _impl_.max_alternatives_ = value;
}
inline void RecognitionConfig::set_max_alternatives(int32_t value) {
  _internal_set_max_alternatives(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
}

// bool profanity_filter = 5;
inline void RecognitionConfig::clear_profanity_filter() {
  _impl_.profanity_filter_ = false;
}
inline bool RecognitionConfig::_internal_profanity_filter() const {
  return _impl_.profanity_filter_;
}
inline bool RecognitionConfig::profanity_filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
  return _internal_profanity_filter();
}
inline void RecognitionConfig::_internal_set_profanity_filter(bool value) {
  
  _impl_.profanity_filter_ = value;
}
inline void RecognitionConfig::set_profanity_filter(bool value) {
  _internal_set_profanity_filter(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
}

// .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
inline bool RecognitionConfig::_internal_has_adaptation() const {
  return this != internal_default_instance() && _impl_.adaptation_ != nullptr;
}
inline bool RecognitionConfig::has_adaptation() const {
  return _internal_has_adaptation();
}
inline const ::google::cloud::speech::v1::SpeechAdaptation& RecognitionConfig::_internal_adaptation() const {
  const ::google::cloud::speech::v1::SpeechAdaptation* p = _impl_.adaptation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeechAdaptation&>(
      ::google::cloud::speech::v1::_SpeechAdaptation_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeechAdaptation& RecognitionConfig::adaptation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.adaptation)
  return _internal_adaptation();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_adaptation(
    ::google::cloud::speech::v1::SpeechAdaptation* adaptation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaptation_);
  }
  _impl_.adaptation_ = adaptation;
  if (adaptation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.adaptation)
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::release_adaptation() {
  
  ::google::cloud::speech::v1::SpeechAdaptation* temp = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::unsafe_arena_release_adaptation() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.adaptation)
  
  ::google::cloud::speech::v1::SpeechAdaptation* temp = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::_internal_mutable_adaptation() {
  
  if (_impl_.adaptation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::SpeechAdaptation>(GetArenaForAllocation());
    _impl_.adaptation_ = p;
  }
  return _impl_.adaptation_;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::mutable_adaptation() {
  ::google::cloud::speech::v1::SpeechAdaptation* _msg = _internal_mutable_adaptation();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.adaptation)
  return _msg;
}
inline void RecognitionConfig::set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* adaptation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaptation_);
  }
  if (adaptation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adaptation));
    if (message_arena != submessage_arena) {
      adaptation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaptation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adaptation_ = adaptation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.adaptation)
}

// repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
inline int RecognitionConfig::_internal_speech_contexts_size() const {
  return _impl_.speech_contexts_.size();
}
inline int RecognitionConfig::speech_contexts_size() const {
  return _internal_speech_contexts_size();
}
inline void RecognitionConfig::clear_speech_contexts() {
  _impl_.speech_contexts_.Clear();
}
inline ::google::cloud::speech::v1::SpeechContext* RecognitionConfig::mutable_speech_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _impl_.speech_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >*
RecognitionConfig::mutable_speech_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return &_impl_.speech_contexts_;
}
inline const ::google::cloud::speech::v1::SpeechContext& RecognitionConfig::_internal_speech_contexts(int index) const {
  return _impl_.speech_contexts_.Get(index);
}
inline const ::google::cloud::speech::v1::SpeechContext& RecognitionConfig::speech_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _internal_speech_contexts(index);
}
inline ::google::cloud::speech::v1::SpeechContext* RecognitionConfig::_internal_add_speech_contexts() {
  return _impl_.speech_contexts_.Add();
}
inline ::google::cloud::speech::v1::SpeechContext* RecognitionConfig::add_speech_contexts() {
  ::google::cloud::speech::v1::SpeechContext* _add = _internal_add_speech_contexts();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >&
RecognitionConfig::speech_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _impl_.speech_contexts_;
}

// bool enable_word_time_offsets = 8;
inline void RecognitionConfig::clear_enable_word_time_offsets() {
  _impl_.enable_word_time_offsets_ = false;
}
inline bool RecognitionConfig::_internal_enable_word_time_offsets() const {
  return _impl_.enable_word_time_offsets_;
}
inline bool RecognitionConfig::enable_word_time_offsets() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
  return _internal_enable_word_time_offsets();
}
inline void RecognitionConfig::_internal_set_enable_word_time_offsets(bool value) {
  
  _impl_.enable_word_time_offsets_ = value;
}
inline void RecognitionConfig::set_enable_word_time_offsets(bool value) {
  _internal_set_enable_word_time_offsets(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
}

// bool enable_word_confidence = 15;
inline void RecognitionConfig::clear_enable_word_confidence() {
  _impl_.enable_word_confidence_ = false;
}
inline bool RecognitionConfig::_internal_enable_word_confidence() const {
  return _impl_.enable_word_confidence_;
}
inline bool RecognitionConfig::enable_word_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_word_confidence)
  return _internal_enable_word_confidence();
}
inline void RecognitionConfig::_internal_set_enable_word_confidence(bool value) {
  
  _impl_.enable_word_confidence_ = value;
}
inline void RecognitionConfig::set_enable_word_confidence(bool value) {
  _internal_set_enable_word_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_word_confidence)
}

// bool enable_automatic_punctuation = 11;
inline void RecognitionConfig::clear_enable_automatic_punctuation() {
  _impl_.enable_automatic_punctuation_ = false;
}
inline bool RecognitionConfig::_internal_enable_automatic_punctuation() const {
  return _impl_.enable_automatic_punctuation_;
}
inline bool RecognitionConfig::enable_automatic_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
  return _internal_enable_automatic_punctuation();
}
inline void RecognitionConfig::_internal_set_enable_automatic_punctuation(bool value) {
  
  _impl_.enable_automatic_punctuation_ = value;
}
inline void RecognitionConfig::set_enable_automatic_punctuation(bool value) {
  _internal_set_enable_automatic_punctuation(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
}

// .google.protobuf.BoolValue enable_spoken_punctuation = 22;
inline bool RecognitionConfig::_internal_has_enable_spoken_punctuation() const {
  return this != internal_default_instance() && _impl_.enable_spoken_punctuation_ != nullptr;
}
inline bool RecognitionConfig::has_enable_spoken_punctuation() const {
  return _internal_has_enable_spoken_punctuation();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RecognitionConfig::_internal_enable_spoken_punctuation() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.enable_spoken_punctuation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RecognitionConfig::enable_spoken_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
  return _internal_enable_spoken_punctuation();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_enable_spoken_punctuation(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_punctuation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enable_spoken_punctuation_);
  }
  _impl_.enable_spoken_punctuation_ = enable_spoken_punctuation;
  if (enable_spoken_punctuation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::release_enable_spoken_punctuation() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enable_spoken_punctuation_;
  _impl_.enable_spoken_punctuation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::unsafe_arena_release_enable_spoken_punctuation() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enable_spoken_punctuation_;
  _impl_.enable_spoken_punctuation_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::_internal_mutable_enable_spoken_punctuation() {
  
  if (_impl_.enable_spoken_punctuation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.enable_spoken_punctuation_ = p;
  }
  return _impl_.enable_spoken_punctuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::mutable_enable_spoken_punctuation() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enable_spoken_punctuation();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
  return _msg;
}
inline void RecognitionConfig::set_allocated_enable_spoken_punctuation(::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_punctuation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enable_spoken_punctuation_);
  }
  if (enable_spoken_punctuation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_spoken_punctuation));
    if (message_arena != submessage_arena) {
      enable_spoken_punctuation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_spoken_punctuation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enable_spoken_punctuation_ = enable_spoken_punctuation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
}

// .google.protobuf.BoolValue enable_spoken_emojis = 23;
inline bool RecognitionConfig::_internal_has_enable_spoken_emojis() const {
  return this != internal_default_instance() && _impl_.enable_spoken_emojis_ != nullptr;
}
inline bool RecognitionConfig::has_enable_spoken_emojis() const {
  return _internal_has_enable_spoken_emojis();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RecognitionConfig::_internal_enable_spoken_emojis() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.enable_spoken_emojis_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& RecognitionConfig::enable_spoken_emojis() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
  return _internal_enable_spoken_emojis();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_enable_spoken_emojis(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_emojis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enable_spoken_emojis_);
  }
  _impl_.enable_spoken_emojis_ = enable_spoken_emojis;
  if (enable_spoken_emojis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::release_enable_spoken_emojis() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enable_spoken_emojis_;
  _impl_.enable_spoken_emojis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::unsafe_arena_release_enable_spoken_emojis() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.enable_spoken_emojis_;
  _impl_.enable_spoken_emojis_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::_internal_mutable_enable_spoken_emojis() {
  
  if (_impl_.enable_spoken_emojis_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.enable_spoken_emojis_ = p;
  }
  return _impl_.enable_spoken_emojis_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* RecognitionConfig::mutable_enable_spoken_emojis() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enable_spoken_emojis();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
  return _msg;
}
inline void RecognitionConfig::set_allocated_enable_spoken_emojis(::PROTOBUF_NAMESPACE_ID::BoolValue* enable_spoken_emojis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enable_spoken_emojis_);
  }
  if (enable_spoken_emojis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_spoken_emojis));
    if (message_arena != submessage_arena) {
      enable_spoken_emojis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_spoken_emojis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enable_spoken_emojis_ = enable_spoken_emojis;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
}

// .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
inline bool RecognitionConfig::_internal_has_diarization_config() const {
  return this != internal_default_instance() && _impl_.diarization_config_ != nullptr;
}
inline bool RecognitionConfig::has_diarization_config() const {
  return _internal_has_diarization_config();
}
inline void RecognitionConfig::clear_diarization_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.diarization_config_ != nullptr) {
    delete _impl_.diarization_config_;
  }
  _impl_.diarization_config_ = nullptr;
}
inline const ::google::cloud::speech::v1::SpeakerDiarizationConfig& RecognitionConfig::_internal_diarization_config() const {
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig* p = _impl_.diarization_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeakerDiarizationConfig&>(
      ::google::cloud::speech::v1::_SpeakerDiarizationConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeakerDiarizationConfig& RecognitionConfig::diarization_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.diarization_config)
  return _internal_diarization_config();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_diarization_config(
    ::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.diarization_config_);
  }
  _impl_.diarization_config_ = diarization_config;
  if (diarization_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.diarization_config)
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::release_diarization_config() {
  
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* temp = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::unsafe_arena_release_diarization_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.diarization_config)
  
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* temp = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::_internal_mutable_diarization_config() {
  
  if (_impl_.diarization_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::SpeakerDiarizationConfig>(GetArenaForAllocation());
    _impl_.diarization_config_ = p;
  }
  return _impl_.diarization_config_;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::mutable_diarization_config() {
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* _msg = _internal_mutable_diarization_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.diarization_config)
  return _msg;
}
inline void RecognitionConfig::set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.diarization_config_;
  }
  if (diarization_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(diarization_config);
    if (message_arena != submessage_arena) {
      diarization_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diarization_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.diarization_config_ = diarization_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.diarization_config)
}

// .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
inline bool RecognitionConfig::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool RecognitionConfig::has_metadata() const {
  return _internal_has_metadata();
}
inline void RecognitionConfig::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::google::cloud::speech::v1::RecognitionMetadata& RecognitionConfig::_internal_metadata() const {
  const ::google::cloud::speech::v1::RecognitionMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionMetadata&>(
      ::google::cloud::speech::v1::_RecognitionMetadata_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionMetadata& RecognitionConfig::metadata() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.metadata)
  return _internal_metadata();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_metadata(
    ::google::cloud::speech::v1::RecognitionMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.metadata)
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::release_metadata() {
  
  ::google::cloud::speech::v1::RecognitionMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.metadata)
  
  ::google::cloud::speech::v1::RecognitionMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::mutable_metadata() {
  ::google::cloud::speech::v1::RecognitionMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.metadata)
  return _msg;
}
inline void RecognitionConfig::set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.metadata)
}

// string model = 13;
inline void RecognitionConfig::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& RecognitionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognitionConfig::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.model)
}
inline std::string* RecognitionConfig::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.model)
  return _s;
}
inline const std::string& RecognitionConfig::_internal_model() const {
  return _impl_.model_.Get();
}
inline void RecognitionConfig::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionConfig::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognitionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.model)
  return _impl_.model_.Release();
}
inline void RecognitionConfig::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.model)
}

// bool use_enhanced = 14;
inline void RecognitionConfig::clear_use_enhanced() {
  _impl_.use_enhanced_ = false;
}
inline bool RecognitionConfig::_internal_use_enhanced() const {
  return _impl_.use_enhanced_;
}
inline bool RecognitionConfig::use_enhanced() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
  return _internal_use_enhanced();
}
inline void RecognitionConfig::_internal_set_use_enhanced(bool value) {
  
  _impl_.use_enhanced_ = value;
}
inline void RecognitionConfig::set_use_enhanced(bool value) {
  _internal_set_use_enhanced(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
}

// -------------------------------------------------------------------

// SpeakerDiarizationConfig

// bool enable_speaker_diarization = 1;
inline void SpeakerDiarizationConfig::clear_enable_speaker_diarization() {
  _impl_.enable_speaker_diarization_ = false;
}
inline bool SpeakerDiarizationConfig::_internal_enable_speaker_diarization() const {
  return _impl_.enable_speaker_diarization_;
}
inline bool SpeakerDiarizationConfig::enable_speaker_diarization() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.enable_speaker_diarization)
  return _internal_enable_speaker_diarization();
}
inline void SpeakerDiarizationConfig::_internal_set_enable_speaker_diarization(bool value) {
  
  _impl_.enable_speaker_diarization_ = value;
}
inline void SpeakerDiarizationConfig::set_enable_speaker_diarization(bool value) {
  _internal_set_enable_speaker_diarization(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.enable_speaker_diarization)
}

// int32 min_speaker_count = 2;
inline void SpeakerDiarizationConfig::clear_min_speaker_count() {
  _impl_.min_speaker_count_ = 0;
}
inline int32_t SpeakerDiarizationConfig::_internal_min_speaker_count() const {
  return _impl_.min_speaker_count_;
}
inline int32_t SpeakerDiarizationConfig::min_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.min_speaker_count)
  return _internal_min_speaker_count();
}
inline void SpeakerDiarizationConfig::_internal_set_min_speaker_count(int32_t value) {
  
  _impl_.min_speaker_count_ = value;
}
inline void SpeakerDiarizationConfig::set_min_speaker_count(int32_t value) {
  _internal_set_min_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.min_speaker_count)
}

// int32 max_speaker_count = 3;
inline void SpeakerDiarizationConfig::clear_max_speaker_count() {
  _impl_.max_speaker_count_ = 0;
}
inline int32_t SpeakerDiarizationConfig::_internal_max_speaker_count() const {
  return _impl_.max_speaker_count_;
}
inline int32_t SpeakerDiarizationConfig::max_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.max_speaker_count)
  return _internal_max_speaker_count();
}
inline void SpeakerDiarizationConfig::_internal_set_max_speaker_count(int32_t value) {
  
  _impl_.max_speaker_count_ = value;
}
inline void SpeakerDiarizationConfig::set_max_speaker_count(int32_t value) {
  _internal_set_max_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.max_speaker_count)
}

// int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void SpeakerDiarizationConfig::clear_speaker_tag() {
  _impl_.speaker_tag_ = 0;
}
inline int32_t SpeakerDiarizationConfig::_internal_speaker_tag() const {
  return _impl_.speaker_tag_;
}
inline int32_t SpeakerDiarizationConfig::speaker_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.speaker_tag)
  return _internal_speaker_tag();
}
inline void SpeakerDiarizationConfig::_internal_set_speaker_tag(int32_t value) {
  
  _impl_.speaker_tag_ = value;
}
inline void SpeakerDiarizationConfig::set_speaker_tag(int32_t value) {
  _internal_set_speaker_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.speaker_tag)
}

// -------------------------------------------------------------------

// RecognitionMetadata

// .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
inline void RecognitionMetadata::clear_interaction_type() {
  _impl_.interaction_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_InteractionType RecognitionMetadata::_internal_interaction_type() const {
  return static_cast< ::google::cloud::speech::v1::RecognitionMetadata_InteractionType >(_impl_.interaction_type_);
}
inline ::google::cloud::speech::v1::RecognitionMetadata_InteractionType RecognitionMetadata::interaction_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.interaction_type)
  return _internal_interaction_type();
}
inline void RecognitionMetadata::_internal_set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value) {
  
  _impl_.interaction_type_ = value;
}
inline void RecognitionMetadata::set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value) {
  _internal_set_interaction_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.interaction_type)
}

// uint32 industry_naics_code_of_audio = 3;
inline void RecognitionMetadata::clear_industry_naics_code_of_audio() {
  _impl_.industry_naics_code_of_audio_ = 0u;
}
inline uint32_t RecognitionMetadata::_internal_industry_naics_code_of_audio() const {
  return _impl_.industry_naics_code_of_audio_;
}
inline uint32_t RecognitionMetadata::industry_naics_code_of_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.industry_naics_code_of_audio)
  return _internal_industry_naics_code_of_audio();
}
inline void RecognitionMetadata::_internal_set_industry_naics_code_of_audio(uint32_t value) {
  
  _impl_.industry_naics_code_of_audio_ = value;
}
inline void RecognitionMetadata::set_industry_naics_code_of_audio(uint32_t value) {
  _internal_set_industry_naics_code_of_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.industry_naics_code_of_audio)
}

// .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
inline void RecognitionMetadata::clear_microphone_distance() {
  _impl_.microphone_distance_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance RecognitionMetadata::_internal_microphone_distance() const {
  return static_cast< ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance >(_impl_.microphone_distance_);
}
inline ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance RecognitionMetadata::microphone_distance() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.microphone_distance)
  return _internal_microphone_distance();
}
inline void RecognitionMetadata::_internal_set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value) {
  
  _impl_.microphone_distance_ = value;
}
inline void RecognitionMetadata::set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value) {
  _internal_set_microphone_distance(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.microphone_distance)
}

// .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
inline void RecognitionMetadata::clear_original_media_type() {
  _impl_.original_media_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType RecognitionMetadata::_internal_original_media_type() const {
  return static_cast< ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType >(_impl_.original_media_type_);
}
inline ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType RecognitionMetadata::original_media_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.original_media_type)
  return _internal_original_media_type();
}
inline void RecognitionMetadata::_internal_set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value) {
  
  _impl_.original_media_type_ = value;
}
inline void RecognitionMetadata::set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value) {
  _internal_set_original_media_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.original_media_type)
}

// .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
inline void RecognitionMetadata::clear_recording_device_type() {
  _impl_.recording_device_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType RecognitionMetadata::_internal_recording_device_type() const {
  return static_cast< ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType >(_impl_.recording_device_type_);
}
inline ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType RecognitionMetadata::recording_device_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.recording_device_type)
  return _internal_recording_device_type();
}
inline void RecognitionMetadata::_internal_set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value) {
  
  _impl_.recording_device_type_ = value;
}
inline void RecognitionMetadata::set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value) {
  _internal_set_recording_device_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.recording_device_type)
}

// string recording_device_name = 7;
inline void RecognitionMetadata::clear_recording_device_name() {
  _impl_.recording_device_name_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::recording_device_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _internal_recording_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognitionMetadata::set_recording_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recording_device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
}
inline std::string* RecognitionMetadata::mutable_recording_device_name() {
  std::string* _s = _internal_mutable_recording_device_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_recording_device_name() const {
  return _impl_.recording_device_name_.Get();
}
inline void RecognitionMetadata::_internal_set_recording_device_name(const std::string& value) {
  
  _impl_.recording_device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::_internal_mutable_recording_device_name() {
  
  return _impl_.recording_device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::release_recording_device_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _impl_.recording_device_name_.Release();
}
inline void RecognitionMetadata::set_allocated_recording_device_name(std::string* recording_device_name) {
  if (recording_device_name != nullptr) {
    
  } else {
    
  }
  _impl_.recording_device_name_.SetAllocated(recording_device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recording_device_name_.IsDefault()) {
    _impl_.recording_device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
}

// string original_mime_type = 8;
inline void RecognitionMetadata::clear_original_mime_type() {
  _impl_.original_mime_type_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::original_mime_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _internal_original_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognitionMetadata::set_original_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.original_mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
}
inline std::string* RecognitionMetadata::mutable_original_mime_type() {
  std::string* _s = _internal_mutable_original_mime_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_original_mime_type() const {
  return _impl_.original_mime_type_.Get();
}
inline void RecognitionMetadata::_internal_set_original_mime_type(const std::string& value) {
  
  _impl_.original_mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::_internal_mutable_original_mime_type() {
  
  return _impl_.original_mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::release_original_mime_type() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _impl_.original_mime_type_.Release();
}
inline void RecognitionMetadata::set_allocated_original_mime_type(std::string* original_mime_type) {
  if (original_mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.original_mime_type_.SetAllocated(original_mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.original_mime_type_.IsDefault()) {
    _impl_.original_mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
}

// string audio_topic = 10;
inline void RecognitionMetadata::clear_audio_topic() {
  _impl_.audio_topic_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::audio_topic() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _internal_audio_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognitionMetadata::set_audio_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
}
inline std::string* RecognitionMetadata::mutable_audio_topic() {
  std::string* _s = _internal_mutable_audio_topic();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_audio_topic() const {
  return _impl_.audio_topic_.Get();
}
inline void RecognitionMetadata::_internal_set_audio_topic(const std::string& value) {
  
  _impl_.audio_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::_internal_mutable_audio_topic() {
  
  return _impl_.audio_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognitionMetadata::release_audio_topic() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _impl_.audio_topic_.Release();
}
inline void RecognitionMetadata::set_allocated_audio_topic(std::string* audio_topic) {
  if (audio_topic != nullptr) {
    
  } else {
    
  }
  _impl_.audio_topic_.SetAllocated(audio_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_topic_.IsDefault()) {
    _impl_.audio_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
}

// -------------------------------------------------------------------

// SpeechContext

// repeated string phrases = 1;
inline int SpeechContext::_internal_phrases_size() const {
  return _impl_.phrases_.size();
}
inline int SpeechContext::phrases_size() const {
  return _internal_phrases_size();
}
inline void SpeechContext::clear_phrases() {
  _impl_.phrases_.Clear();
}
inline std::string* SpeechContext::add_phrases() {
  std::string* _s = _internal_add_phrases();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return _s;
}
inline const std::string& SpeechContext::_internal_phrases(int index) const {
  return _impl_.phrases_.Get(index);
}
inline const std::string& SpeechContext::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechContext.phrases)
  return _internal_phrases(index);
}
inline std::string* SpeechContext::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return _impl_.phrases_.Mutable(index);
}
inline void SpeechContext::set_phrases(int index, const std::string& value) {
  _impl_.phrases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::set_phrases(int index, std::string&& value) {
  _impl_.phrases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::set_phrases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phrases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::set_phrases(int index, const char* value, size_t size) {
  _impl_.phrases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.SpeechContext.phrases)
}
inline std::string* SpeechContext::_internal_add_phrases() {
  return _impl_.phrases_.Add();
}
inline void SpeechContext::add_phrases(const std::string& value) {
  _impl_.phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(std::string&& value) {
  _impl_.phrases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.speech.v1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(const char* value, size_t size) {
  _impl_.phrases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.speech.v1.SpeechContext.phrases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SpeechContext::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechContext.phrases)
  return _impl_.phrases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SpeechContext::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechContext.phrases)
  return &_impl_.phrases_;
}

// float boost = 4;
inline void SpeechContext::clear_boost() {
  _impl_.boost_ = 0;
}
inline float SpeechContext::_internal_boost() const {
  return _impl_.boost_;
}
inline float SpeechContext::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechContext.boost)
  return _internal_boost();
}
inline void SpeechContext::_internal_set_boost(float value) {
  
  _impl_.boost_ = value;
}
inline void SpeechContext::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.boost)
}

// -------------------------------------------------------------------

// RecognitionAudio

// bytes content = 1;
inline bool RecognitionAudio::_internal_has_content() const {
  return audio_source_case() == kContent;
}
inline bool RecognitionAudio::has_content() const {
  return _internal_has_content();
}
inline void RecognitionAudio::set_has_content() {
  _impl_._oneof_case_[0] = kContent;
}
inline void RecognitionAudio::clear_content() {
  if (_internal_has_content()) {
    _impl_.audio_source_.content_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognitionAudio::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline void RecognitionAudio::set_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.content)
}
inline std::string* RecognitionAudio::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.content)
  return _s;
}
inline const std::string& RecognitionAudio::_internal_content() const {
  if (_internal_has_content()) {
    return _impl_.audio_source_.content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RecognitionAudio::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionAudio::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_audio_source();
    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  return _impl_.audio_source_.content_.Mutable(      GetArenaForAllocation());
}
inline std::string* RecognitionAudio::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.content)
  if (_internal_has_content()) {
    clear_has_audio_source();
    return _impl_.audio_source_.content_.Release();
  } else {
    return nullptr;
  }
}
inline void RecognitionAudio::set_allocated_content(std::string* content) {
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (content != nullptr) {
    set_has_content();
    _impl_.audio_source_.content_.InitAllocated(content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.content)
}

// string uri = 2;
inline bool RecognitionAudio::_internal_has_uri() const {
  return audio_source_case() == kUri;
}
inline bool RecognitionAudio::has_uri() const {
  return _internal_has_uri();
}
inline void RecognitionAudio::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void RecognitionAudio::clear_uri() {
  if (_internal_has_uri()) {
    _impl_.audio_source_.uri_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognitionAudio::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline void RecognitionAudio::set_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.uri)
}
inline std::string* RecognitionAudio::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.uri)
  return _s;
}
inline const std::string& RecognitionAudio::_internal_uri() const {
  if (_internal_has_uri()) {
    return _impl_.audio_source_.uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RecognitionAudio::_internal_set_uri(const std::string& value) {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognitionAudio::_internal_mutable_uri() {
  if (!_internal_has_uri()) {
    clear_audio_source();
    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  return _impl_.audio_source_.uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* RecognitionAudio::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.uri)
  if (_internal_has_uri()) {
    clear_has_audio_source();
    return _impl_.audio_source_.uri_.Release();
  } else {
    return nullptr;
  }
}
inline void RecognitionAudio::set_allocated_uri(std::string* uri) {
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (uri != nullptr) {
    set_has_uri();
    _impl_.audio_source_.uri_.InitAllocated(uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.uri)
}

inline bool RecognitionAudio::has_audio_source() const {
  return audio_source_case() != AUDIO_SOURCE_NOT_SET;
}
inline void RecognitionAudio::clear_has_audio_source() {
  _impl_._oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}
inline RecognitionAudio::AudioSourceCase RecognitionAudio::audio_source_case() const {
  return RecognitionAudio::AudioSourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognizeResponse

// repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
inline int RecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int RecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void RecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognizeResponse.results)
  return &_impl_.results_;
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& RecognizeResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.results)
  return _internal_results(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::add_results() {
  ::google::cloud::speech::v1::SpeechRecognitionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognizeResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognizeResponse.results)
  return _impl_.results_;
}

// .google.protobuf.Duration total_billed_time = 3;
inline bool RecognizeResponse::_internal_has_total_billed_time() const {
  return this != internal_default_instance() && _impl_.total_billed_time_ != nullptr;
}
inline bool RecognizeResponse::has_total_billed_time() const {
  return _internal_has_total_billed_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecognizeResponse::_internal_total_billed_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecognizeResponse::total_billed_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void RecognizeResponse::unsafe_arena_set_allocated_total_billed_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = total_billed_time;
  if (total_billed_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognizeResponse::release_total_billed_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognizeResponse::unsafe_arena_release_total_billed_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognizeResponse::_internal_mutable_total_billed_time() {
  
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_billed_time_ = p;
  }
  return _impl_.total_billed_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecognizeResponse::mutable_total_billed_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
  return _msg;
}
inline void RecognizeResponse::set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  if (total_billed_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_billed_time));
    if (message_arena != submessage_arena) {
      total_billed_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_billed_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_billed_time_ = total_billed_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
}

// -------------------------------------------------------------------

// LongRunningRecognizeResponse

// repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
inline int LongRunningRecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int LongRunningRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void LongRunningRecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* LongRunningRecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >*
LongRunningRecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return &_impl_.results_;
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& LongRunningRecognizeResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& LongRunningRecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _internal_results(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* LongRunningRecognizeResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* LongRunningRecognizeResponse::add_results() {
  ::google::cloud::speech::v1::SpeechRecognitionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >&
LongRunningRecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _impl_.results_;
}

// .google.protobuf.Duration total_billed_time = 3;
inline bool LongRunningRecognizeResponse::_internal_has_total_billed_time() const {
  return this != internal_default_instance() && _impl_.total_billed_time_ != nullptr;
}
inline bool LongRunningRecognizeResponse::has_total_billed_time() const {
  return _internal_has_total_billed_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& LongRunningRecognizeResponse::_internal_total_billed_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& LongRunningRecognizeResponse::total_billed_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_total_billed_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = total_billed_time;
  if (total_billed_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* LongRunningRecognizeResponse::release_total_billed_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* LongRunningRecognizeResponse::unsafe_arena_release_total_billed_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* LongRunningRecognizeResponse::_internal_mutable_total_billed_time() {
  
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_billed_time_ = p;
  }
  return _impl_.total_billed_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* LongRunningRecognizeResponse::mutable_total_billed_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  if (total_billed_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_billed_time));
    if (message_arena != submessage_arena) {
      total_billed_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_billed_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_billed_time_ = total_billed_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
}

// .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
inline bool LongRunningRecognizeResponse::_internal_has_output_config() const {
  return this != internal_default_instance() && _impl_.output_config_ != nullptr;
}
inline bool LongRunningRecognizeResponse::has_output_config() const {
  return _internal_has_output_config();
}
inline void LongRunningRecognizeResponse::clear_output_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_config_ != nullptr) {
    delete _impl_.output_config_;
  }
  _impl_.output_config_ = nullptr;
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeResponse::_internal_output_config() const {
  const ::google::cloud::speech::v1::TranscriptOutputConfig* p = _impl_.output_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::TranscriptOutputConfig&>(
      ::google::cloud::speech::v1::_TranscriptOutputConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeResponse::output_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
  return _internal_output_config();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_output_config(
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_config_);
  }
  _impl_.output_config_ = output_config;
  if (output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::release_output_config() {
  
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::unsafe_arena_release_output_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
  
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::_internal_mutable_output_config() {
  
  if (_impl_.output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::TranscriptOutputConfig>(GetArenaForAllocation());
    _impl_.output_config_ = p;
  }
  return _impl_.output_config_;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::mutable_output_config() {
  ::google::cloud::speech::v1::TranscriptOutputConfig* _msg = _internal_mutable_output_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.output_config_;
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output_config);
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
}

// .google.rpc.Status output_error = 7;
inline bool LongRunningRecognizeResponse::_internal_has_output_error() const {
  return this != internal_default_instance() && _impl_.output_error_ != nullptr;
}
inline bool LongRunningRecognizeResponse::has_output_error() const {
  return _internal_has_output_error();
}
inline const ::google::rpc::Status& LongRunningRecognizeResponse::_internal_output_error() const {
  const ::google::rpc::Status* p = _impl_.output_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& LongRunningRecognizeResponse::output_error() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
  return _internal_output_error();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_output_error(
    ::google::rpc::Status* output_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_error_);
  }
  _impl_.output_error_ = output_error;
  if (output_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::release_output_error() {
  
  ::google::rpc::Status* temp = _impl_.output_error_;
  _impl_.output_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::unsafe_arena_release_output_error() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
  
  ::google::rpc::Status* temp = _impl_.output_error_;
  _impl_.output_error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::_internal_mutable_output_error() {
  
  if (_impl_.output_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.output_error_ = p;
  }
  return _impl_.output_error_;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::mutable_output_error() {
  ::google::rpc::Status* _msg = _internal_mutable_output_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_output_error(::google::rpc::Status* output_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_error_);
  }
  if (output_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_error));
    if (message_arena != submessage_arena) {
      output_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_error_ = output_error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
}

// -------------------------------------------------------------------

// LongRunningRecognizeMetadata

// int32 progress_percent = 1;
inline void LongRunningRecognizeMetadata::clear_progress_percent() {
  _impl_.progress_percent_ = 0;
}
inline int32_t LongRunningRecognizeMetadata::_internal_progress_percent() const {
  return _impl_.progress_percent_;
}
inline int32_t LongRunningRecognizeMetadata::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.progress_percent)
  return _internal_progress_percent();
}
inline void LongRunningRecognizeMetadata::_internal_set_progress_percent(int32_t value) {
  
  _impl_.progress_percent_ = value;
}
inline void LongRunningRecognizeMetadata::set_progress_percent(int32_t value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LongRunningRecognizeMetadata.progress_percent)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool LongRunningRecognizeMetadata::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool LongRunningRecognizeMetadata::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LongRunningRecognizeMetadata::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LongRunningRecognizeMetadata::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
  return _internal_start_time();
}
inline void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
  return _msg;
}
inline void LongRunningRecognizeMetadata::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
}

// .google.protobuf.Timestamp last_update_time = 3;
inline bool LongRunningRecognizeMetadata::_internal_has_last_update_time() const {
  return this != internal_default_instance() && _impl_.last_update_time_ != nullptr;
}
inline bool LongRunningRecognizeMetadata::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LongRunningRecognizeMetadata::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LongRunningRecognizeMetadata::last_update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
  return _internal_last_update_time();
}
inline void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::release_last_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::_internal_mutable_last_update_time() {
  
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LongRunningRecognizeMetadata::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
  return _msg;
}
inline void LongRunningRecognizeMetadata::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
}

// string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void LongRunningRecognizeMetadata::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& LongRunningRecognizeMetadata::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LongRunningRecognizeMetadata::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
}
inline std::string* LongRunningRecognizeMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _s;
}
inline const std::string& LongRunningRecognizeMetadata::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void LongRunningRecognizeMetadata::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* LongRunningRecognizeMetadata::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* LongRunningRecognizeMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _impl_.uri_.Release();
}
inline void LongRunningRecognizeMetadata::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
}

// -------------------------------------------------------------------

// StreamingRecognizeResponse

// .google.rpc.Status error = 1;
inline bool StreamingRecognizeResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool StreamingRecognizeResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& StreamingRecognizeResponse::_internal_error() const {
  const ::google::rpc::Status* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& StreamingRecognizeResponse::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return _internal_error();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}
inline ::google::rpc::Status* StreamingRecognizeResponse::release_error() {
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}

// repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
inline int StreamingRecognizeResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int StreamingRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void StreamingRecognizeResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >*
StreamingRecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return &_impl_.results_;
}
inline const ::google::cloud::speech::v1::StreamingRecognitionResult& StreamingRecognizeResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::google::cloud::speech::v1::StreamingRecognitionResult& StreamingRecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _internal_results(index);
}
inline ::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::add_results() {
  ::google::cloud::speech::v1::StreamingRecognitionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >&
StreamingRecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _impl_.results_;
}

// .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
inline void StreamingRecognizeResponse::clear_speech_event_type() {
  _impl_.speech_event_type_ = 0;
}
inline ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::_internal_speech_event_type() const {
  return static_cast< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType >(_impl_.speech_event_type_);
}
inline ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::speech_event_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
  return _internal_speech_event_type();
}
inline void StreamingRecognizeResponse::_internal_set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value) {
  
  _impl_.speech_event_type_ = value;
}
inline void StreamingRecognizeResponse::set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value) {
  _internal_set_speech_event_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
}

// .google.protobuf.Duration total_billed_time = 5;
inline bool StreamingRecognizeResponse::_internal_has_total_billed_time() const {
  return this != internal_default_instance() && _impl_.total_billed_time_ != nullptr;
}
inline bool StreamingRecognizeResponse::has_total_billed_time() const {
  return _internal_has_total_billed_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognizeResponse::_internal_total_billed_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognizeResponse::total_billed_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_total_billed_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = total_billed_time;
  if (total_billed_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::release_total_billed_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::unsafe_arena_release_total_billed_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::_internal_mutable_total_billed_time() {
  
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_billed_time_ = p;
  }
  return _impl_.total_billed_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognizeResponse::mutable_total_billed_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_total_billed_time(::PROTOBUF_NAMESPACE_ID::Duration* total_billed_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_billed_time_);
  }
  if (total_billed_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_billed_time));
    if (message_arena != submessage_arena) {
      total_billed_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_billed_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_billed_time_ = total_billed_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
}

// -------------------------------------------------------------------

// StreamingRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
inline int StreamingRecognitionResult::_internal_alternatives_size() const {
  return _impl_.alternatives_.size();
}
inline int StreamingRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void StreamingRecognitionResult::clear_alternatives() {
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _impl_.alternatives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
StreamingRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return &_impl_.alternatives_;
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& StreamingRecognitionResult::_internal_alternatives(int index) const {
  return _impl_.alternatives_.Get(index);
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& StreamingRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _internal_alternatives(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::_internal_add_alternatives() {
  return _impl_.alternatives_.Add();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::add_alternatives() {
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _add = _internal_add_alternatives();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
StreamingRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _impl_.alternatives_;
}

// bool is_final = 2;
inline void StreamingRecognitionResult::clear_is_final() {
  _impl_.is_final_ = false;
}
inline bool StreamingRecognitionResult::_internal_is_final() const {
  return _impl_.is_final_;
}
inline bool StreamingRecognitionResult::is_final() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
  return _internal_is_final();
}
inline void StreamingRecognitionResult::_internal_set_is_final(bool value) {
  
  _impl_.is_final_ = value;
}
inline void StreamingRecognitionResult::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
}

// float stability = 3;
inline void StreamingRecognitionResult::clear_stability() {
  _impl_.stability_ = 0;
}
inline float StreamingRecognitionResult::_internal_stability() const {
  return _impl_.stability_;
}
inline float StreamingRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.stability)
  return _internal_stability();
}
inline void StreamingRecognitionResult::_internal_set_stability(float value) {
  
  _impl_.stability_ = value;
}
inline void StreamingRecognitionResult::set_stability(float value) {
  _internal_set_stability(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.stability)
}

// .google.protobuf.Duration result_end_time = 4;
inline bool StreamingRecognitionResult::_internal_has_result_end_time() const {
  return this != internal_default_instance() && _impl_.result_end_time_ != nullptr;
}
inline bool StreamingRecognitionResult::has_result_end_time() const {
  return _internal_has_result_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::_internal_result_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.result_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamingRecognitionResult::result_end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
  return _internal_result_end_time();
}
inline void StreamingRecognitionResult::unsafe_arena_set_allocated_result_end_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_time_);
  }
  _impl_.result_end_time_ = result_end_time;
  if (result_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::release_result_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::unsafe_arena_release_result_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::_internal_mutable_result_end_time() {
  
  if (_impl_.result_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.result_end_time_ = p;
  }
  return _impl_.result_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamingRecognitionResult::mutable_result_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_result_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
  return _msg;
}
inline void StreamingRecognitionResult::set_allocated_result_end_time(::PROTOBUF_NAMESPACE_ID::Duration* result_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_time_);
  }
  if (result_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_end_time));
    if (message_arena != submessage_arena) {
      result_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_end_time_ = result_end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
}

// int32 channel_tag = 5;
inline void StreamingRecognitionResult::clear_channel_tag() {
  _impl_.channel_tag_ = 0;
}
inline int32_t StreamingRecognitionResult::_internal_channel_tag() const {
  return _impl_.channel_tag_;
}
inline int32_t StreamingRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void StreamingRecognitionResult::_internal_set_channel_tag(int32_t value) {
  
  _impl_.channel_tag_ = value;
}
inline void StreamingRecognitionResult::set_channel_tag(int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.channel_tag)
}

// string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void StreamingRecognitionResult::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& StreamingRecognitionResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamingRecognitionResult::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
}
inline std::string* StreamingRecognitionResult::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _s;
}
inline const std::string& StreamingRecognitionResult::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void StreamingRecognitionResult::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamingRecognitionResult::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamingRecognitionResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void StreamingRecognitionResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
inline int SpeechRecognitionResult::_internal_alternatives_size() const {
  return _impl_.alternatives_.size();
}
inline int SpeechRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void SpeechRecognitionResult::clear_alternatives() {
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _impl_.alternatives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
SpeechRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return &_impl_.alternatives_;
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& SpeechRecognitionResult::_internal_alternatives(int index) const {
  return _impl_.alternatives_.Get(index);
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& SpeechRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _internal_alternatives(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::_internal_add_alternatives() {
  return _impl_.alternatives_.Add();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::add_alternatives() {
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _add = _internal_add_alternatives();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
SpeechRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _impl_.alternatives_;
}

// int32 channel_tag = 2;
inline void SpeechRecognitionResult::clear_channel_tag() {
  _impl_.channel_tag_ = 0;
}
inline int32_t SpeechRecognitionResult::_internal_channel_tag() const {
  return _impl_.channel_tag_;
}
inline int32_t SpeechRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void SpeechRecognitionResult::_internal_set_channel_tag(int32_t value) {
  
  _impl_.channel_tag_ = value;
}
inline void SpeechRecognitionResult::set_channel_tag(int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionResult.channel_tag)
}

// .google.protobuf.Duration result_end_time = 4;
inline bool SpeechRecognitionResult::_internal_has_result_end_time() const {
  return this != internal_default_instance() && _impl_.result_end_time_ != nullptr;
}
inline bool SpeechRecognitionResult::has_result_end_time() const {
  return _internal_has_result_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpeechRecognitionResult::_internal_result_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.result_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpeechRecognitionResult::result_end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
  return _internal_result_end_time();
}
inline void SpeechRecognitionResult::unsafe_arena_set_allocated_result_end_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* result_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_time_);
  }
  _impl_.result_end_time_ = result_end_time;
  if (result_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::release_result_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::unsafe_arena_release_result_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::_internal_mutable_result_end_time() {
  
  if (_impl_.result_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.result_end_time_ = p;
  }
  return _impl_.result_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpeechRecognitionResult::mutable_result_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_result_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
  return _msg;
}
inline void SpeechRecognitionResult::set_allocated_result_end_time(::PROTOBUF_NAMESPACE_ID::Duration* result_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_end_time_);
  }
  if (result_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_end_time));
    if (message_arena != submessage_arena) {
      result_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_end_time_ = result_end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
}

// string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void SpeechRecognitionResult::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionResult::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionResult::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
}
inline std::string* SpeechRecognitionResult::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _s;
}
inline const std::string& SpeechRecognitionResult::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void SpeechRecognitionResult::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void SpeechRecognitionResult::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// SpeechRecognitionAlternative

// string transcript = 1;
inline void SpeechRecognitionAlternative::clear_transcript() {
  _impl_.transcript_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionAlternative::transcript() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _internal_transcript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionAlternative::set_transcript(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transcript_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
inline std::string* SpeechRecognitionAlternative::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _s;
}
inline const std::string& SpeechRecognitionAlternative::_internal_transcript() const {
  return _impl_.transcript_.Get();
}
inline void SpeechRecognitionAlternative::_internal_set_transcript(const std::string& value) {
  
  _impl_.transcript_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionAlternative::_internal_mutable_transcript() {
  
  return _impl_.transcript_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionAlternative::release_transcript() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _impl_.transcript_.Release();
}
inline void SpeechRecognitionAlternative::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  _impl_.transcript_.SetAllocated(transcript, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transcript_.IsDefault()) {
    _impl_.transcript_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}

// float confidence = 2;
inline void SpeechRecognitionAlternative::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float SpeechRecognitionAlternative::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
  return _internal_confidence();
}
inline void SpeechRecognitionAlternative::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void SpeechRecognitionAlternative::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
}

// repeated .google.cloud.speech.v1.WordInfo words = 3;
inline int SpeechRecognitionAlternative::_internal_words_size() const {
  return _impl_.words_.size();
}
inline int SpeechRecognitionAlternative::words_size() const {
  return _internal_words_size();
}
inline void SpeechRecognitionAlternative::clear_words() {
  _impl_.words_.Clear();
}
inline ::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _impl_.words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >*
SpeechRecognitionAlternative::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return &_impl_.words_;
}
inline const ::google::cloud::speech::v1::WordInfo& SpeechRecognitionAlternative::_internal_words(int index) const {
  return _impl_.words_.Get(index);
}
inline const ::google::cloud::speech::v1::WordInfo& SpeechRecognitionAlternative::words(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _internal_words(index);
}
inline ::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::_internal_add_words() {
  return _impl_.words_.Add();
}
inline ::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::add_words() {
  ::google::cloud::speech::v1::WordInfo* _add = _internal_add_words();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >&
SpeechRecognitionAlternative::words() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _impl_.words_;
}

// -------------------------------------------------------------------

// WordInfo

// .google.protobuf.Duration start_time = 1;
inline bool WordInfo::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool WordInfo::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.start_time)
  return _internal_start_time();
}
inline void WordInfo::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.start_time)
  return _msg;
}
inline void WordInfo::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Duration* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}

// .google.protobuf.Duration end_time = 2;
inline bool WordInfo::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool WordInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& WordInfo::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.end_time)
  return _internal_end_time();
}
inline void WordInfo::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* WordInfo::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.end_time)
  return _msg;
}
inline void WordInfo::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Duration* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}

// string word = 3;
inline void WordInfo::clear_word() {
  _impl_.word_.ClearToEmpty();
}
inline const std::string& WordInfo::word() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WordInfo::set_word(ArgT0&& arg0, ArgT... args) {
 
 _impl_.word_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.word)
}
inline std::string* WordInfo::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.word)
  return _s;
}
inline const std::string& WordInfo::_internal_word() const {
  return _impl_.word_.Get();
}
inline void WordInfo::_internal_set_word(const std::string& value) {
  
  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* WordInfo::_internal_mutable_word() {
  
  return _impl_.word_.Mutable(GetArenaForAllocation());
}
inline std::string* WordInfo::release_word() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.word)
  return _impl_.word_.Release();
}
inline void WordInfo::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  _impl_.word_.SetAllocated(word, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.word)
}

// float confidence = 4;
inline void WordInfo::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float WordInfo::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float WordInfo::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.confidence)
  return _internal_confidence();
}
inline void WordInfo::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void WordInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.confidence)
}

// int32 speaker_tag = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WordInfo::clear_speaker_tag() {
  _impl_.speaker_tag_ = 0;
}
inline int32_t WordInfo::_internal_speaker_tag() const {
  return _impl_.speaker_tag_;
}
inline int32_t WordInfo::speaker_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.speaker_tag)
  return _internal_speaker_tag();
}
inline void WordInfo::_internal_set_speaker_tag(int32_t value) {
  
  _impl_.speaker_tag_ = value;
}
inline void WordInfo::set_speaker_tag(int32_t value) {
  _internal_set_speaker_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.speaker_tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding>() {
  return ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v1::RecognitionMetadata_InteractionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::RecognitionMetadata_InteractionType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_InteractionType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType>() {
  return ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto
