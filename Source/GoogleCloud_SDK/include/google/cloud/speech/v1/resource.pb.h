// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1/resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv1_2fresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class CustomClass;
struct CustomClassDefaultTypeInternal;
extern CustomClassDefaultTypeInternal _CustomClass_default_instance_;
class CustomClass_ClassItem;
struct CustomClass_ClassItemDefaultTypeInternal;
extern CustomClass_ClassItemDefaultTypeInternal _CustomClass_ClassItem_default_instance_;
class PhraseSet;
struct PhraseSetDefaultTypeInternal;
extern PhraseSetDefaultTypeInternal _PhraseSet_default_instance_;
class PhraseSet_Phrase;
struct PhraseSet_PhraseDefaultTypeInternal;
extern PhraseSet_PhraseDefaultTypeInternal _PhraseSet_Phrase_default_instance_;
class SpeechAdaptation;
struct SpeechAdaptationDefaultTypeInternal;
extern SpeechAdaptationDefaultTypeInternal _SpeechAdaptation_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::speech::v1::CustomClass* Arena::CreateMaybeMessage<::google::cloud::speech::v1::CustomClass>(Arena*);
template<> ::google::cloud::speech::v1::CustomClass_ClassItem* Arena::CreateMaybeMessage<::google::cloud::speech::v1::CustomClass_ClassItem>(Arena*);
template<> ::google::cloud::speech::v1::PhraseSet* Arena::CreateMaybeMessage<::google::cloud::speech::v1::PhraseSet>(Arena*);
template<> ::google::cloud::speech::v1::PhraseSet_Phrase* Arena::CreateMaybeMessage<::google::cloud::speech::v1::PhraseSet_Phrase>(Arena*);
template<> ::google::cloud::speech::v1::SpeechAdaptation* Arena::CreateMaybeMessage<::google::cloud::speech::v1::SpeechAdaptation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace speech {
namespace v1 {

// ===================================================================

class CustomClass_ClassItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.CustomClass.ClassItem) */ {
 public:
  inline CustomClass_ClassItem() : CustomClass_ClassItem(nullptr) {}
  ~CustomClass_ClassItem() override;
  explicit PROTOBUF_CONSTEXPR CustomClass_ClassItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomClass_ClassItem(const CustomClass_ClassItem& from);
  CustomClass_ClassItem(CustomClass_ClassItem&& from) noexcept
    : CustomClass_ClassItem() {
    *this = ::std::move(from);
  }

  inline CustomClass_ClassItem& operator=(const CustomClass_ClassItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomClass_ClassItem& operator=(CustomClass_ClassItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomClass_ClassItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomClass_ClassItem* internal_default_instance() {
    return reinterpret_cast<const CustomClass_ClassItem*>(
               &_CustomClass_ClassItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomClass_ClassItem& a, CustomClass_ClassItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomClass_ClassItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomClass_ClassItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomClass_ClassItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomClass_ClassItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomClass_ClassItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomClass_ClassItem& from) {
    CustomClass_ClassItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomClass_ClassItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.CustomClass.ClassItem";
  }
  protected:
  explicit CustomClass_ClassItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.CustomClass.ClassItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
};
// -------------------------------------------------------------------

class CustomClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.CustomClass) */ {
 public:
  inline CustomClass() : CustomClass(nullptr) {}
  ~CustomClass() override;
  explicit PROTOBUF_CONSTEXPR CustomClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomClass(const CustomClass& from);
  CustomClass(CustomClass&& from) noexcept
    : CustomClass() {
    *this = ::std::move(from);
  }

  inline CustomClass& operator=(const CustomClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomClass& operator=(CustomClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomClass* internal_default_instance() {
    return reinterpret_cast<const CustomClass*>(
               &_CustomClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomClass& a, CustomClass& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomClass& from) {
    CustomClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.CustomClass";
  }
  protected:
  explicit CustomClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomClass_ClassItem ClassItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kNameFieldNumber = 1,
    kCustomClassIdFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.CustomClass.ClassItem items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::google::cloud::speech::v1::CustomClass_ClassItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass_ClassItem >*
      mutable_items();
  private:
  const ::google::cloud::speech::v1::CustomClass_ClassItem& _internal_items(int index) const;
  ::google::cloud::speech::v1::CustomClass_ClassItem* _internal_add_items();
  public:
  const ::google::cloud::speech::v1::CustomClass_ClassItem& items(int index) const;
  ::google::cloud::speech::v1::CustomClass_ClassItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass_ClassItem >&
      items() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string custom_class_id = 2;
  void clear_custom_class_id();
  const std::string& custom_class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_class_id();
  PROTOBUF_NODISCARD std::string* release_custom_class_id();
  void set_allocated_custom_class_id(std::string* custom_class_id);
  private:
  const std::string& _internal_custom_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_class_id(const std::string& value);
  std::string* _internal_mutable_custom_class_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.CustomClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass_ClassItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_class_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
};
// -------------------------------------------------------------------

class PhraseSet_Phrase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.PhraseSet.Phrase) */ {
 public:
  inline PhraseSet_Phrase() : PhraseSet_Phrase(nullptr) {}
  ~PhraseSet_Phrase() override;
  explicit PROTOBUF_CONSTEXPR PhraseSet_Phrase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhraseSet_Phrase(const PhraseSet_Phrase& from);
  PhraseSet_Phrase(PhraseSet_Phrase&& from) noexcept
    : PhraseSet_Phrase() {
    *this = ::std::move(from);
  }

  inline PhraseSet_Phrase& operator=(const PhraseSet_Phrase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhraseSet_Phrase& operator=(PhraseSet_Phrase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PhraseSet_Phrase& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhraseSet_Phrase* internal_default_instance() {
    return reinterpret_cast<const PhraseSet_Phrase*>(
               &_PhraseSet_Phrase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PhraseSet_Phrase& a, PhraseSet_Phrase& b) {
    a.Swap(&b);
  }
  inline void Swap(PhraseSet_Phrase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhraseSet_Phrase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhraseSet_Phrase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhraseSet_Phrase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PhraseSet_Phrase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PhraseSet_Phrase& from) {
    PhraseSet_Phrase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhraseSet_Phrase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.PhraseSet.Phrase";
  }
  protected:
  explicit PhraseSet_Phrase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBoostFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // float boost = 2;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.PhraseSet.Phrase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    float boost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
};
// -------------------------------------------------------------------

class PhraseSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.PhraseSet) */ {
 public:
  inline PhraseSet() : PhraseSet(nullptr) {}
  ~PhraseSet() override;
  explicit PROTOBUF_CONSTEXPR PhraseSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhraseSet(const PhraseSet& from);
  PhraseSet(PhraseSet&& from) noexcept
    : PhraseSet() {
    *this = ::std::move(from);
  }

  inline PhraseSet& operator=(const PhraseSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhraseSet& operator=(PhraseSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PhraseSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhraseSet* internal_default_instance() {
    return reinterpret_cast<const PhraseSet*>(
               &_PhraseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PhraseSet& a, PhraseSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PhraseSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhraseSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhraseSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhraseSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PhraseSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PhraseSet& from) {
    PhraseSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhraseSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.PhraseSet";
  }
  protected:
  explicit PhraseSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PhraseSet_Phrase Phrase;

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 2,
    kNameFieldNumber = 1,
    kBoostFieldNumber = 4,
  };
  // repeated .google.cloud.speech.v1.PhraseSet.Phrase phrases = 2;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;
  public:
  void clear_phrases();
  ::google::cloud::speech::v1::PhraseSet_Phrase* mutable_phrases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet_Phrase >*
      mutable_phrases();
  private:
  const ::google::cloud::speech::v1::PhraseSet_Phrase& _internal_phrases(int index) const;
  ::google::cloud::speech::v1::PhraseSet_Phrase* _internal_add_phrases();
  public:
  const ::google::cloud::speech::v1::PhraseSet_Phrase& phrases(int index) const;
  ::google::cloud::speech::v1::PhraseSet_Phrase* add_phrases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet_Phrase >&
      phrases() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float boost = 4;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.PhraseSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet_Phrase > phrases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float boost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
};
// -------------------------------------------------------------------

class SpeechAdaptation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechAdaptation) */ {
 public:
  inline SpeechAdaptation() : SpeechAdaptation(nullptr) {}
  ~SpeechAdaptation() override;
  explicit PROTOBUF_CONSTEXPR SpeechAdaptation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechAdaptation(const SpeechAdaptation& from);
  SpeechAdaptation(SpeechAdaptation&& from) noexcept
    : SpeechAdaptation() {
    *this = ::std::move(from);
  }

  inline SpeechAdaptation& operator=(const SpeechAdaptation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechAdaptation& operator=(SpeechAdaptation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechAdaptation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechAdaptation* internal_default_instance() {
    return reinterpret_cast<const SpeechAdaptation*>(
               &_SpeechAdaptation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpeechAdaptation& a, SpeechAdaptation& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechAdaptation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechAdaptation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechAdaptation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechAdaptation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechAdaptation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeechAdaptation& from) {
    SpeechAdaptation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechAdaptation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.SpeechAdaptation";
  }
  protected:
  explicit SpeechAdaptation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetsFieldNumber = 1,
    kPhraseSetReferencesFieldNumber = 2,
    kCustomClassesFieldNumber = 3,
  };
  // repeated .google.cloud.speech.v1.PhraseSet phrase_sets = 1;
  int phrase_sets_size() const;
  private:
  int _internal_phrase_sets_size() const;
  public:
  void clear_phrase_sets();
  ::google::cloud::speech::v1::PhraseSet* mutable_phrase_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >*
      mutable_phrase_sets();
  private:
  const ::google::cloud::speech::v1::PhraseSet& _internal_phrase_sets(int index) const;
  ::google::cloud::speech::v1::PhraseSet* _internal_add_phrase_sets();
  public:
  const ::google::cloud::speech::v1::PhraseSet& phrase_sets(int index) const;
  ::google::cloud::speech::v1::PhraseSet* add_phrase_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >&
      phrase_sets() const;

  // repeated string phrase_set_references = 2 [(.google.api.resource_reference) = {
  int phrase_set_references_size() const;
  private:
  int _internal_phrase_set_references_size() const;
  public:
  void clear_phrase_set_references();
  const std::string& phrase_set_references(int index) const;
  std::string* mutable_phrase_set_references(int index);
  void set_phrase_set_references(int index, const std::string& value);
  void set_phrase_set_references(int index, std::string&& value);
  void set_phrase_set_references(int index, const char* value);
  void set_phrase_set_references(int index, const char* value, size_t size);
  std::string* add_phrase_set_references();
  void add_phrase_set_references(const std::string& value);
  void add_phrase_set_references(std::string&& value);
  void add_phrase_set_references(const char* value);
  void add_phrase_set_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phrase_set_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phrase_set_references();
  private:
  const std::string& _internal_phrase_set_references(int index) const;
  std::string* _internal_add_phrase_set_references();
  public:

  // repeated .google.cloud.speech.v1.CustomClass custom_classes = 3;
  int custom_classes_size() const;
  private:
  int _internal_custom_classes_size() const;
  public:
  void clear_custom_classes();
  ::google::cloud::speech::v1::CustomClass* mutable_custom_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >*
      mutable_custom_classes();
  private:
  const ::google::cloud::speech::v1::CustomClass& _internal_custom_classes(int index) const;
  ::google::cloud::speech::v1::CustomClass* _internal_add_custom_classes();
  public:
  const ::google::cloud::speech::v1::CustomClass& custom_classes(int index) const;
  ::google::cloud::speech::v1::CustomClass* add_custom_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >&
      custom_classes() const;

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechAdaptation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet > phrase_sets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phrase_set_references_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass > custom_classes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomClass_ClassItem

// string value = 1;
inline void CustomClass_ClassItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& CustomClass_ClassItem::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CustomClass.ClassItem.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass_ClassItem::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CustomClass.ClassItem.value)
}
inline std::string* CustomClass_ClassItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CustomClass.ClassItem.value)
  return _s;
}
inline const std::string& CustomClass_ClassItem::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CustomClass_ClassItem::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass_ClassItem::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass_ClassItem::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CustomClass.ClassItem.value)
  return _impl_.value_.Release();
}
inline void CustomClass_ClassItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CustomClass.ClassItem.value)
}

// -------------------------------------------------------------------

// CustomClass

// string name = 1;
inline void CustomClass::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CustomClass::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CustomClass.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CustomClass.name)
}
inline std::string* CustomClass::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CustomClass.name)
  return _s;
}
inline const std::string& CustomClass::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomClass::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CustomClass.name)
  return _impl_.name_.Release();
}
inline void CustomClass::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CustomClass.name)
}

// string custom_class_id = 2;
inline void CustomClass::clear_custom_class_id() {
  _impl_.custom_class_id_.ClearToEmpty();
}
inline const std::string& CustomClass::custom_class_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CustomClass.custom_class_id)
  return _internal_custom_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomClass::set_custom_class_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.custom_class_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CustomClass.custom_class_id)
}
inline std::string* CustomClass::mutable_custom_class_id() {
  std::string* _s = _internal_mutable_custom_class_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CustomClass.custom_class_id)
  return _s;
}
inline const std::string& CustomClass::_internal_custom_class_id() const {
  return _impl_.custom_class_id_.Get();
}
inline void CustomClass::_internal_set_custom_class_id(const std::string& value) {
  
  _impl_.custom_class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomClass::_internal_mutable_custom_class_id() {
  
  return _impl_.custom_class_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomClass::release_custom_class_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CustomClass.custom_class_id)
  return _impl_.custom_class_id_.Release();
}
inline void CustomClass::set_allocated_custom_class_id(std::string* custom_class_id) {
  if (custom_class_id != nullptr) {
    
  } else {
    
  }
  _impl_.custom_class_id_.SetAllocated(custom_class_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_class_id_.IsDefault()) {
    _impl_.custom_class_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CustomClass.custom_class_id)
}

// repeated .google.cloud.speech.v1.CustomClass.ClassItem items = 3;
inline int CustomClass::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CustomClass::items_size() const {
  return _internal_items_size();
}
inline void CustomClass::clear_items() {
  _impl_.items_.Clear();
}
inline ::google::cloud::speech::v1::CustomClass_ClassItem* CustomClass::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CustomClass.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass_ClassItem >*
CustomClass::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.CustomClass.items)
  return &_impl_.items_;
}
inline const ::google::cloud::speech::v1::CustomClass_ClassItem& CustomClass::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::google::cloud::speech::v1::CustomClass_ClassItem& CustomClass::items(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CustomClass.items)
  return _internal_items(index);
}
inline ::google::cloud::speech::v1::CustomClass_ClassItem* CustomClass::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::google::cloud::speech::v1::CustomClass_ClassItem* CustomClass::add_items() {
  ::google::cloud::speech::v1::CustomClass_ClassItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.CustomClass.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass_ClassItem >&
CustomClass::items() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.CustomClass.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// PhraseSet_Phrase

// string value = 1;
inline void PhraseSet_Phrase::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PhraseSet_Phrase::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.PhraseSet.Phrase.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet_Phrase::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.PhraseSet.Phrase.value)
}
inline std::string* PhraseSet_Phrase::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.PhraseSet.Phrase.value)
  return _s;
}
inline const std::string& PhraseSet_Phrase::_internal_value() const {
  return _impl_.value_.Get();
}
inline void PhraseSet_Phrase::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet_Phrase::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet_Phrase::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.PhraseSet.Phrase.value)
  return _impl_.value_.Release();
}
inline void PhraseSet_Phrase::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.PhraseSet.Phrase.value)
}

// float boost = 2;
inline void PhraseSet_Phrase::clear_boost() {
  _impl_.boost_ = 0;
}
inline float PhraseSet_Phrase::_internal_boost() const {
  return _impl_.boost_;
}
inline float PhraseSet_Phrase::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.PhraseSet.Phrase.boost)
  return _internal_boost();
}
inline void PhraseSet_Phrase::_internal_set_boost(float value) {
  
  _impl_.boost_ = value;
}
inline void PhraseSet_Phrase::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.PhraseSet.Phrase.boost)
}

// -------------------------------------------------------------------

// PhraseSet

// string name = 1;
inline void PhraseSet::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PhraseSet::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.PhraseSet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhraseSet::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.PhraseSet.name)
}
inline std::string* PhraseSet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.PhraseSet.name)
  return _s;
}
inline const std::string& PhraseSet::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PhraseSet::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PhraseSet::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PhraseSet::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.PhraseSet.name)
  return _impl_.name_.Release();
}
inline void PhraseSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.PhraseSet.name)
}

// repeated .google.cloud.speech.v1.PhraseSet.Phrase phrases = 2;
inline int PhraseSet::_internal_phrases_size() const {
  return _impl_.phrases_.size();
}
inline int PhraseSet::phrases_size() const {
  return _internal_phrases_size();
}
inline void PhraseSet::clear_phrases() {
  _impl_.phrases_.Clear();
}
inline ::google::cloud::speech::v1::PhraseSet_Phrase* PhraseSet::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.PhraseSet.phrases)
  return _impl_.phrases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet_Phrase >*
PhraseSet::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.PhraseSet.phrases)
  return &_impl_.phrases_;
}
inline const ::google::cloud::speech::v1::PhraseSet_Phrase& PhraseSet::_internal_phrases(int index) const {
  return _impl_.phrases_.Get(index);
}
inline const ::google::cloud::speech::v1::PhraseSet_Phrase& PhraseSet::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.PhraseSet.phrases)
  return _internal_phrases(index);
}
inline ::google::cloud::speech::v1::PhraseSet_Phrase* PhraseSet::_internal_add_phrases() {
  return _impl_.phrases_.Add();
}
inline ::google::cloud::speech::v1::PhraseSet_Phrase* PhraseSet::add_phrases() {
  ::google::cloud::speech::v1::PhraseSet_Phrase* _add = _internal_add_phrases();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.PhraseSet.phrases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet_Phrase >&
PhraseSet::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.PhraseSet.phrases)
  return _impl_.phrases_;
}

// float boost = 4;
inline void PhraseSet::clear_boost() {
  _impl_.boost_ = 0;
}
inline float PhraseSet::_internal_boost() const {
  return _impl_.boost_;
}
inline float PhraseSet::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.PhraseSet.boost)
  return _internal_boost();
}
inline void PhraseSet::_internal_set_boost(float value) {
  
  _impl_.boost_ = value;
}
inline void PhraseSet::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.PhraseSet.boost)
}

// -------------------------------------------------------------------

// SpeechAdaptation

// repeated .google.cloud.speech.v1.PhraseSet phrase_sets = 1;
inline int SpeechAdaptation::_internal_phrase_sets_size() const {
  return _impl_.phrase_sets_.size();
}
inline int SpeechAdaptation::phrase_sets_size() const {
  return _internal_phrase_sets_size();
}
inline void SpeechAdaptation::clear_phrase_sets() {
  _impl_.phrase_sets_.Clear();
}
inline ::google::cloud::speech::v1::PhraseSet* SpeechAdaptation::mutable_phrase_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechAdaptation.phrase_sets)
  return _impl_.phrase_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >*
SpeechAdaptation::mutable_phrase_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechAdaptation.phrase_sets)
  return &_impl_.phrase_sets_;
}
inline const ::google::cloud::speech::v1::PhraseSet& SpeechAdaptation::_internal_phrase_sets(int index) const {
  return _impl_.phrase_sets_.Get(index);
}
inline const ::google::cloud::speech::v1::PhraseSet& SpeechAdaptation::phrase_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechAdaptation.phrase_sets)
  return _internal_phrase_sets(index);
}
inline ::google::cloud::speech::v1::PhraseSet* SpeechAdaptation::_internal_add_phrase_sets() {
  return _impl_.phrase_sets_.Add();
}
inline ::google::cloud::speech::v1::PhraseSet* SpeechAdaptation::add_phrase_sets() {
  ::google::cloud::speech::v1::PhraseSet* _add = _internal_add_phrase_sets();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechAdaptation.phrase_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >&
SpeechAdaptation::phrase_sets() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechAdaptation.phrase_sets)
  return _impl_.phrase_sets_;
}

// repeated string phrase_set_references = 2 [(.google.api.resource_reference) = {
inline int SpeechAdaptation::_internal_phrase_set_references_size() const {
  return _impl_.phrase_set_references_.size();
}
inline int SpeechAdaptation::phrase_set_references_size() const {
  return _internal_phrase_set_references_size();
}
inline void SpeechAdaptation::clear_phrase_set_references() {
  _impl_.phrase_set_references_.Clear();
}
inline std::string* SpeechAdaptation::add_phrase_set_references() {
  std::string* _s = _internal_add_phrase_set_references();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
  return _s;
}
inline const std::string& SpeechAdaptation::_internal_phrase_set_references(int index) const {
  return _impl_.phrase_set_references_.Get(index);
}
inline const std::string& SpeechAdaptation::phrase_set_references(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
  return _internal_phrase_set_references(index);
}
inline std::string* SpeechAdaptation::mutable_phrase_set_references(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
  return _impl_.phrase_set_references_.Mutable(index);
}
inline void SpeechAdaptation::set_phrase_set_references(int index, const std::string& value) {
  _impl_.phrase_set_references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::set_phrase_set_references(int index, std::string&& value) {
  _impl_.phrase_set_references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::set_phrase_set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phrase_set_references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::set_phrase_set_references(int index, const char* value, size_t size) {
  _impl_.phrase_set_references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline std::string* SpeechAdaptation::_internal_add_phrase_set_references() {
  return _impl_.phrase_set_references_.Add();
}
inline void SpeechAdaptation::add_phrase_set_references(const std::string& value) {
  _impl_.phrase_set_references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::add_phrase_set_references(std::string&& value) {
  _impl_.phrase_set_references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::add_phrase_set_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phrase_set_references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline void SpeechAdaptation::add_phrase_set_references(const char* value, size_t size) {
  _impl_.phrase_set_references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SpeechAdaptation::phrase_set_references() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
  return _impl_.phrase_set_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SpeechAdaptation::mutable_phrase_set_references() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechAdaptation.phrase_set_references)
  return &_impl_.phrase_set_references_;
}

// repeated .google.cloud.speech.v1.CustomClass custom_classes = 3;
inline int SpeechAdaptation::_internal_custom_classes_size() const {
  return _impl_.custom_classes_.size();
}
inline int SpeechAdaptation::custom_classes_size() const {
  return _internal_custom_classes_size();
}
inline void SpeechAdaptation::clear_custom_classes() {
  _impl_.custom_classes_.Clear();
}
inline ::google::cloud::speech::v1::CustomClass* SpeechAdaptation::mutable_custom_classes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechAdaptation.custom_classes)
  return _impl_.custom_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >*
SpeechAdaptation::mutable_custom_classes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechAdaptation.custom_classes)
  return &_impl_.custom_classes_;
}
inline const ::google::cloud::speech::v1::CustomClass& SpeechAdaptation::_internal_custom_classes(int index) const {
  return _impl_.custom_classes_.Get(index);
}
inline const ::google::cloud::speech::v1::CustomClass& SpeechAdaptation::custom_classes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechAdaptation.custom_classes)
  return _internal_custom_classes(index);
}
inline ::google::cloud::speech::v1::CustomClass* SpeechAdaptation::_internal_add_custom_classes() {
  return _impl_.custom_classes_.Add();
}
inline ::google::cloud::speech::v1::CustomClass* SpeechAdaptation::add_custom_classes() {
  ::google::cloud::speech::v1::CustomClass* _add = _internal_add_custom_classes();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechAdaptation.custom_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >&
SpeechAdaptation::custom_classes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechAdaptation.custom_classes)
  return _impl_.custom_classes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fresource_2eproto
