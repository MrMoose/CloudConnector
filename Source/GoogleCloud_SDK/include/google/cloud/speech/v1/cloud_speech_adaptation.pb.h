// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1/cloud_speech_adaptation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/speech/v1/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class CreateCustomClassRequest;
struct CreateCustomClassRequestDefaultTypeInternal;
extern CreateCustomClassRequestDefaultTypeInternal _CreateCustomClassRequest_default_instance_;
class CreatePhraseSetRequest;
struct CreatePhraseSetRequestDefaultTypeInternal;
extern CreatePhraseSetRequestDefaultTypeInternal _CreatePhraseSetRequest_default_instance_;
class DeleteCustomClassRequest;
struct DeleteCustomClassRequestDefaultTypeInternal;
extern DeleteCustomClassRequestDefaultTypeInternal _DeleteCustomClassRequest_default_instance_;
class DeletePhraseSetRequest;
struct DeletePhraseSetRequestDefaultTypeInternal;
extern DeletePhraseSetRequestDefaultTypeInternal _DeletePhraseSetRequest_default_instance_;
class GetCustomClassRequest;
struct GetCustomClassRequestDefaultTypeInternal;
extern GetCustomClassRequestDefaultTypeInternal _GetCustomClassRequest_default_instance_;
class GetPhraseSetRequest;
struct GetPhraseSetRequestDefaultTypeInternal;
extern GetPhraseSetRequestDefaultTypeInternal _GetPhraseSetRequest_default_instance_;
class ListCustomClassesRequest;
struct ListCustomClassesRequestDefaultTypeInternal;
extern ListCustomClassesRequestDefaultTypeInternal _ListCustomClassesRequest_default_instance_;
class ListCustomClassesResponse;
struct ListCustomClassesResponseDefaultTypeInternal;
extern ListCustomClassesResponseDefaultTypeInternal _ListCustomClassesResponse_default_instance_;
class ListPhraseSetRequest;
struct ListPhraseSetRequestDefaultTypeInternal;
extern ListPhraseSetRequestDefaultTypeInternal _ListPhraseSetRequest_default_instance_;
class ListPhraseSetResponse;
struct ListPhraseSetResponseDefaultTypeInternal;
extern ListPhraseSetResponseDefaultTypeInternal _ListPhraseSetResponse_default_instance_;
class UpdateCustomClassRequest;
struct UpdateCustomClassRequestDefaultTypeInternal;
extern UpdateCustomClassRequestDefaultTypeInternal _UpdateCustomClassRequest_default_instance_;
class UpdatePhraseSetRequest;
struct UpdatePhraseSetRequestDefaultTypeInternal;
extern UpdatePhraseSetRequestDefaultTypeInternal _UpdatePhraseSetRequest_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::speech::v1::CreateCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::CreateCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v1::CreatePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::CreatePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v1::DeleteCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::DeleteCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v1::DeletePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::DeletePhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v1::GetCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::GetCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v1::GetPhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::GetPhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v1::ListCustomClassesRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::ListCustomClassesRequest>(Arena*);
template<> ::google::cloud::speech::v1::ListCustomClassesResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v1::ListCustomClassesResponse>(Arena*);
template<> ::google::cloud::speech::v1::ListPhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::ListPhraseSetRequest>(Arena*);
template<> ::google::cloud::speech::v1::ListPhraseSetResponse* Arena::CreateMaybeMessage<::google::cloud::speech::v1::ListPhraseSetResponse>(Arena*);
template<> ::google::cloud::speech::v1::UpdateCustomClassRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::UpdateCustomClassRequest>(Arena*);
template<> ::google::cloud::speech::v1::UpdatePhraseSetRequest* Arena::CreateMaybeMessage<::google::cloud::speech::v1::UpdatePhraseSetRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace speech {
namespace v1 {

// ===================================================================

class CreatePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.CreatePhraseSetRequest) */ {
 public:
  inline CreatePhraseSetRequest() : CreatePhraseSetRequest(nullptr) {}
  ~CreatePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePhraseSetRequest(const CreatePhraseSetRequest& from);
  CreatePhraseSetRequest(CreatePhraseSetRequest&& from) noexcept
    : CreatePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline CreatePhraseSetRequest& operator=(const CreatePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePhraseSetRequest& operator=(CreatePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePhraseSetRequest*>(
               &_CreatePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreatePhraseSetRequest& a, CreatePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePhraseSetRequest& from) {
    CreatePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.CreatePhraseSetRequest";
  }
  protected:
  explicit CreatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPhraseSetIdFieldNumber = 2,
    kPhraseSetFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string phrase_set_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_phrase_set_id();
  const std::string& phrase_set_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phrase_set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phrase_set_id();
  PROTOBUF_NODISCARD std::string* release_phrase_set_id();
  void set_allocated_phrase_set_id(std::string* phrase_set_id);
  private:
  const std::string& _internal_phrase_set_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phrase_set_id(const std::string& value);
  std::string* _internal_mutable_phrase_set_id();
  public:

  // .google.cloud.speech.v1.PhraseSet phrase_set = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_phrase_set() const;
  private:
  bool _internal_has_phrase_set() const;
  public:
  void clear_phrase_set();
  const ::google::cloud::speech::v1::PhraseSet& phrase_set() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::PhraseSet* release_phrase_set();
  ::google::cloud::speech::v1::PhraseSet* mutable_phrase_set();
  void set_allocated_phrase_set(::google::cloud::speech::v1::PhraseSet* phrase_set);
  private:
  const ::google::cloud::speech::v1::PhraseSet& _internal_phrase_set() const;
  ::google::cloud::speech::v1::PhraseSet* _internal_mutable_phrase_set();
  public:
  void unsafe_arena_set_allocated_phrase_set(
      ::google::cloud::speech::v1::PhraseSet* phrase_set);
  ::google::cloud::speech::v1::PhraseSet* unsafe_arena_release_phrase_set();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.CreatePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phrase_set_id_;
    ::google::cloud::speech::v1::PhraseSet* phrase_set_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class UpdatePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.UpdatePhraseSetRequest) */ {
 public:
  inline UpdatePhraseSetRequest() : UpdatePhraseSetRequest(nullptr) {}
  ~UpdatePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePhraseSetRequest(const UpdatePhraseSetRequest& from);
  UpdatePhraseSetRequest(UpdatePhraseSetRequest&& from) noexcept
    : UpdatePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePhraseSetRequest& operator=(const UpdatePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePhraseSetRequest& operator=(UpdatePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePhraseSetRequest*>(
               &_UpdatePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdatePhraseSetRequest& a, UpdatePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePhraseSetRequest& from) {
    UpdatePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.UpdatePhraseSetRequest";
  }
  protected:
  explicit UpdatePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.speech.v1.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_phrase_set() const;
  private:
  bool _internal_has_phrase_set() const;
  public:
  void clear_phrase_set();
  const ::google::cloud::speech::v1::PhraseSet& phrase_set() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::PhraseSet* release_phrase_set();
  ::google::cloud::speech::v1::PhraseSet* mutable_phrase_set();
  void set_allocated_phrase_set(::google::cloud::speech::v1::PhraseSet* phrase_set);
  private:
  const ::google::cloud::speech::v1::PhraseSet& _internal_phrase_set() const;
  ::google::cloud::speech::v1::PhraseSet* _internal_mutable_phrase_set();
  public:
  void unsafe_arena_set_allocated_phrase_set(
      ::google::cloud::speech::v1::PhraseSet* phrase_set);
  ::google::cloud::speech::v1::PhraseSet* unsafe_arena_release_phrase_set();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.UpdatePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v1::PhraseSet* phrase_set_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class GetPhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.GetPhraseSetRequest) */ {
 public:
  inline GetPhraseSetRequest() : GetPhraseSetRequest(nullptr) {}
  ~GetPhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhraseSetRequest(const GetPhraseSetRequest& from);
  GetPhraseSetRequest(GetPhraseSetRequest&& from) noexcept
    : GetPhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline GetPhraseSetRequest& operator=(const GetPhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhraseSetRequest& operator=(GetPhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetPhraseSetRequest*>(
               &_GetPhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPhraseSetRequest& a, GetPhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPhraseSetRequest& from) {
    GetPhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.GetPhraseSetRequest";
  }
  protected:
  explicit GetPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.GetPhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class ListPhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.ListPhraseSetRequest) */ {
 public:
  inline ListPhraseSetRequest() : ListPhraseSetRequest(nullptr) {}
  ~ListPhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhraseSetRequest(const ListPhraseSetRequest& from);
  ListPhraseSetRequest(ListPhraseSetRequest&& from) noexcept
    : ListPhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline ListPhraseSetRequest& operator=(const ListPhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhraseSetRequest& operator=(ListPhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const ListPhraseSetRequest*>(
               &_ListPhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListPhraseSetRequest& a, ListPhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhraseSetRequest& from) {
    ListPhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.ListPhraseSetRequest";
  }
  protected:
  explicit ListPhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.ListPhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class ListPhraseSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.ListPhraseSetResponse) */ {
 public:
  inline ListPhraseSetResponse() : ListPhraseSetResponse(nullptr) {}
  ~ListPhraseSetResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPhraseSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPhraseSetResponse(const ListPhraseSetResponse& from);
  ListPhraseSetResponse(ListPhraseSetResponse&& from) noexcept
    : ListPhraseSetResponse() {
    *this = ::std::move(from);
  }

  inline ListPhraseSetResponse& operator=(const ListPhraseSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPhraseSetResponse& operator=(ListPhraseSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPhraseSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPhraseSetResponse* internal_default_instance() {
    return reinterpret_cast<const ListPhraseSetResponse*>(
               &_ListPhraseSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListPhraseSetResponse& a, ListPhraseSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPhraseSetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPhraseSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPhraseSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPhraseSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPhraseSetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListPhraseSetResponse& from) {
    ListPhraseSetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPhraseSetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.ListPhraseSetResponse";
  }
  protected:
  explicit ListPhraseSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseSetsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.PhraseSet phrase_sets = 1;
  int phrase_sets_size() const;
  private:
  int _internal_phrase_sets_size() const;
  public:
  void clear_phrase_sets();
  ::google::cloud::speech::v1::PhraseSet* mutable_phrase_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >*
      mutable_phrase_sets();
  private:
  const ::google::cloud::speech::v1::PhraseSet& _internal_phrase_sets(int index) const;
  ::google::cloud::speech::v1::PhraseSet* _internal_add_phrase_sets();
  public:
  const ::google::cloud::speech::v1::PhraseSet& phrase_sets(int index) const;
  ::google::cloud::speech::v1::PhraseSet* add_phrase_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >&
      phrase_sets() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.ListPhraseSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet > phrase_sets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class DeletePhraseSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.DeletePhraseSetRequest) */ {
 public:
  inline DeletePhraseSetRequest() : DeletePhraseSetRequest(nullptr) {}
  ~DeletePhraseSetRequest() override;
  explicit PROTOBUF_CONSTEXPR DeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePhraseSetRequest(const DeletePhraseSetRequest& from);
  DeletePhraseSetRequest(DeletePhraseSetRequest&& from) noexcept
    : DeletePhraseSetRequest() {
    *this = ::std::move(from);
  }

  inline DeletePhraseSetRequest& operator=(const DeletePhraseSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePhraseSetRequest& operator=(DeletePhraseSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePhraseSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePhraseSetRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePhraseSetRequest*>(
               &_DeletePhraseSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePhraseSetRequest& a, DeletePhraseSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePhraseSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePhraseSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePhraseSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePhraseSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePhraseSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeletePhraseSetRequest& from) {
    DeletePhraseSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePhraseSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.DeletePhraseSetRequest";
  }
  protected:
  explicit DeletePhraseSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.DeletePhraseSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class CreateCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.CreateCustomClassRequest) */ {
 public:
  inline CreateCustomClassRequest() : CreateCustomClassRequest(nullptr) {}
  ~CreateCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCustomClassRequest(const CreateCustomClassRequest& from);
  CreateCustomClassRequest(CreateCustomClassRequest&& from) noexcept
    : CreateCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline CreateCustomClassRequest& operator=(const CreateCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCustomClassRequest& operator=(CreateCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCustomClassRequest*>(
               &_CreateCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateCustomClassRequest& a, CreateCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCustomClassRequest& from) {
    CreateCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.CreateCustomClassRequest";
  }
  protected:
  explicit CreateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kCustomClassIdFieldNumber = 2,
    kCustomClassFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string custom_class_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_custom_class_id();
  const std::string& custom_class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_class_id();
  PROTOBUF_NODISCARD std::string* release_custom_class_id();
  void set_allocated_custom_class_id(std::string* custom_class_id);
  private:
  const std::string& _internal_custom_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_class_id(const std::string& value);
  std::string* _internal_mutable_custom_class_id();
  public:

  // .google.cloud.speech.v1.CustomClass custom_class = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_custom_class() const;
  private:
  bool _internal_has_custom_class() const;
  public:
  void clear_custom_class();
  const ::google::cloud::speech::v1::CustomClass& custom_class() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::CustomClass* release_custom_class();
  ::google::cloud::speech::v1::CustomClass* mutable_custom_class();
  void set_allocated_custom_class(::google::cloud::speech::v1::CustomClass* custom_class);
  private:
  const ::google::cloud::speech::v1::CustomClass& _internal_custom_class() const;
  ::google::cloud::speech::v1::CustomClass* _internal_mutable_custom_class();
  public:
  void unsafe_arena_set_allocated_custom_class(
      ::google::cloud::speech::v1::CustomClass* custom_class);
  ::google::cloud::speech::v1::CustomClass* unsafe_arena_release_custom_class();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.CreateCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_class_id_;
    ::google::cloud::speech::v1::CustomClass* custom_class_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.UpdateCustomClassRequest) */ {
 public:
  inline UpdateCustomClassRequest() : UpdateCustomClassRequest(nullptr) {}
  ~UpdateCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCustomClassRequest(const UpdateCustomClassRequest& from);
  UpdateCustomClassRequest(UpdateCustomClassRequest&& from) noexcept
    : UpdateCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCustomClassRequest& operator=(const UpdateCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomClassRequest& operator=(UpdateCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomClassRequest*>(
               &_UpdateCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateCustomClassRequest& a, UpdateCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCustomClassRequest& from) {
    UpdateCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.UpdateCustomClassRequest";
  }
  protected:
  explicit UpdateCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomClassFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.cloud.speech.v1.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_custom_class() const;
  private:
  bool _internal_has_custom_class() const;
  public:
  void clear_custom_class();
  const ::google::cloud::speech::v1::CustomClass& custom_class() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::CustomClass* release_custom_class();
  ::google::cloud::speech::v1::CustomClass* mutable_custom_class();
  void set_allocated_custom_class(::google::cloud::speech::v1::CustomClass* custom_class);
  private:
  const ::google::cloud::speech::v1::CustomClass& _internal_custom_class() const;
  ::google::cloud::speech::v1::CustomClass* _internal_mutable_custom_class();
  public:
  void unsafe_arena_set_allocated_custom_class(
      ::google::cloud::speech::v1::CustomClass* custom_class);
  ::google::cloud::speech::v1::CustomClass* unsafe_arena_release_custom_class();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.UpdateCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::speech::v1::CustomClass* custom_class_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class GetCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.GetCustomClassRequest) */ {
 public:
  inline GetCustomClassRequest() : GetCustomClassRequest(nullptr) {}
  ~GetCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomClassRequest(const GetCustomClassRequest& from);
  GetCustomClassRequest(GetCustomClassRequest&& from) noexcept
    : GetCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline GetCustomClassRequest& operator=(const GetCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomClassRequest& operator=(GetCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const GetCustomClassRequest*>(
               &_GetCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetCustomClassRequest& a, GetCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCustomClassRequest& from) {
    GetCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.GetCustomClassRequest";
  }
  protected:
  explicit GetCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.GetCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class ListCustomClassesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.ListCustomClassesRequest) */ {
 public:
  inline ListCustomClassesRequest() : ListCustomClassesRequest(nullptr) {}
  ~ListCustomClassesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListCustomClassesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCustomClassesRequest(const ListCustomClassesRequest& from);
  ListCustomClassesRequest(ListCustomClassesRequest&& from) noexcept
    : ListCustomClassesRequest() {
    *this = ::std::move(from);
  }

  inline ListCustomClassesRequest& operator=(const ListCustomClassesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCustomClassesRequest& operator=(ListCustomClassesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCustomClassesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCustomClassesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCustomClassesRequest*>(
               &_ListCustomClassesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListCustomClassesRequest& a, ListCustomClassesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCustomClassesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCustomClassesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCustomClassesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCustomClassesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCustomClassesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCustomClassesRequest& from) {
    ListCustomClassesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCustomClassesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.ListCustomClassesRequest";
  }
  protected:
  explicit ListCustomClassesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.ListCustomClassesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class ListCustomClassesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.ListCustomClassesResponse) */ {
 public:
  inline ListCustomClassesResponse() : ListCustomClassesResponse(nullptr) {}
  ~ListCustomClassesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCustomClassesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCustomClassesResponse(const ListCustomClassesResponse& from);
  ListCustomClassesResponse(ListCustomClassesResponse&& from) noexcept
    : ListCustomClassesResponse() {
    *this = ::std::move(from);
  }

  inline ListCustomClassesResponse& operator=(const ListCustomClassesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCustomClassesResponse& operator=(ListCustomClassesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCustomClassesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCustomClassesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCustomClassesResponse*>(
               &_ListCustomClassesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListCustomClassesResponse& a, ListCustomClassesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCustomClassesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCustomClassesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCustomClassesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCustomClassesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCustomClassesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListCustomClassesResponse& from) {
    ListCustomClassesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCustomClassesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.ListCustomClassesResponse";
  }
  protected:
  explicit ListCustomClassesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomClassesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.CustomClass custom_classes = 1;
  int custom_classes_size() const;
  private:
  int _internal_custom_classes_size() const;
  public:
  void clear_custom_classes();
  ::google::cloud::speech::v1::CustomClass* mutable_custom_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >*
      mutable_custom_classes();
  private:
  const ::google::cloud::speech::v1::CustomClass& _internal_custom_classes(int index) const;
  ::google::cloud::speech::v1::CustomClass* _internal_add_custom_classes();
  public:
  const ::google::cloud::speech::v1::CustomClass& custom_classes(int index) const;
  ::google::cloud::speech::v1::CustomClass* add_custom_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >&
      custom_classes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.ListCustomClassesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass > custom_classes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.DeleteCustomClassRequest) */ {
 public:
  inline DeleteCustomClassRequest() : DeleteCustomClassRequest(nullptr) {}
  ~DeleteCustomClassRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCustomClassRequest(const DeleteCustomClassRequest& from);
  DeleteCustomClassRequest(DeleteCustomClassRequest&& from) noexcept
    : DeleteCustomClassRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCustomClassRequest& operator=(const DeleteCustomClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomClassRequest& operator=(DeleteCustomClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCustomClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCustomClassRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomClassRequest*>(
               &_DeleteCustomClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteCustomClassRequest& a, DeleteCustomClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomClassRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCustomClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCustomClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCustomClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteCustomClassRequest& from) {
    DeleteCustomClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.speech.v1.DeleteCustomClassRequest";
  }
  protected:
  explicit DeleteCustomClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.DeleteCustomClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreatePhraseSetRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreatePhraseSetRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreatePhraseSetRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreatePhraseSetRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePhraseSetRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CreatePhraseSetRequest.parent)
}
inline std::string* CreatePhraseSetRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreatePhraseSetRequest.parent)
  return _s;
}
inline const std::string& CreatePhraseSetRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreatePhraseSetRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreatePhraseSetRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreatePhraseSetRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreatePhraseSetRequest.parent)
}

// string phrase_set_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreatePhraseSetRequest::clear_phrase_set_id() {
  _impl_.phrase_set_id_.ClearToEmpty();
}
inline const std::string& CreatePhraseSetRequest::phrase_set_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set_id)
  return _internal_phrase_set_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePhraseSetRequest::set_phrase_set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phrase_set_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set_id)
}
inline std::string* CreatePhraseSetRequest::mutable_phrase_set_id() {
  std::string* _s = _internal_mutable_phrase_set_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set_id)
  return _s;
}
inline const std::string& CreatePhraseSetRequest::_internal_phrase_set_id() const {
  return _impl_.phrase_set_id_.Get();
}
inline void CreatePhraseSetRequest::_internal_set_phrase_set_id(const std::string& value) {
  
  _impl_.phrase_set_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::_internal_mutable_phrase_set_id() {
  
  return _impl_.phrase_set_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePhraseSetRequest::release_phrase_set_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set_id)
  return _impl_.phrase_set_id_.Release();
}
inline void CreatePhraseSetRequest::set_allocated_phrase_set_id(std::string* phrase_set_id) {
  if (phrase_set_id != nullptr) {
    
  } else {
    
  }
  _impl_.phrase_set_id_.SetAllocated(phrase_set_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phrase_set_id_.IsDefault()) {
    _impl_.phrase_set_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set_id)
}

// .google.cloud.speech.v1.PhraseSet phrase_set = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreatePhraseSetRequest::_internal_has_phrase_set() const {
  return this != internal_default_instance() && _impl_.phrase_set_ != nullptr;
}
inline bool CreatePhraseSetRequest::has_phrase_set() const {
  return _internal_has_phrase_set();
}
inline const ::google::cloud::speech::v1::PhraseSet& CreatePhraseSetRequest::_internal_phrase_set() const {
  const ::google::cloud::speech::v1::PhraseSet* p = _impl_.phrase_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::PhraseSet&>(
      ::google::cloud::speech::v1::_PhraseSet_default_instance_);
}
inline const ::google::cloud::speech::v1::PhraseSet& CreatePhraseSetRequest::phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set)
  return _internal_phrase_set();
}
inline void CreatePhraseSetRequest::unsafe_arena_set_allocated_phrase_set(
    ::google::cloud::speech::v1::PhraseSet* phrase_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  _impl_.phrase_set_ = phrase_set;
  if (phrase_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set)
}
inline ::google::cloud::speech::v1::PhraseSet* CreatePhraseSetRequest::release_phrase_set() {
  
  ::google::cloud::speech::v1::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::PhraseSet* CreatePhraseSetRequest::unsafe_arena_release_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set)
  
  ::google::cloud::speech::v1::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::PhraseSet* CreatePhraseSetRequest::_internal_mutable_phrase_set() {
  
  if (_impl_.phrase_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::PhraseSet>(GetArenaForAllocation());
    _impl_.phrase_set_ = p;
  }
  return _impl_.phrase_set_;
}
inline ::google::cloud::speech::v1::PhraseSet* CreatePhraseSetRequest::mutable_phrase_set() {
  ::google::cloud::speech::v1::PhraseSet* _msg = _internal_mutable_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set)
  return _msg;
}
inline void CreatePhraseSetRequest::set_allocated_phrase_set(::google::cloud::speech::v1::PhraseSet* phrase_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  if (phrase_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phrase_set));
    if (message_arena != submessage_arena) {
      phrase_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phrase_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.phrase_set_ = phrase_set;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreatePhraseSetRequest.phrase_set)
}

// -------------------------------------------------------------------

// UpdatePhraseSetRequest

// .google.cloud.speech.v1.PhraseSet phrase_set = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdatePhraseSetRequest::_internal_has_phrase_set() const {
  return this != internal_default_instance() && _impl_.phrase_set_ != nullptr;
}
inline bool UpdatePhraseSetRequest::has_phrase_set() const {
  return _internal_has_phrase_set();
}
inline const ::google::cloud::speech::v1::PhraseSet& UpdatePhraseSetRequest::_internal_phrase_set() const {
  const ::google::cloud::speech::v1::PhraseSet* p = _impl_.phrase_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::PhraseSet&>(
      ::google::cloud::speech::v1::_PhraseSet_default_instance_);
}
inline const ::google::cloud::speech::v1::PhraseSet& UpdatePhraseSetRequest::phrase_set() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.UpdatePhraseSetRequest.phrase_set)
  return _internal_phrase_set();
}
inline void UpdatePhraseSetRequest::unsafe_arena_set_allocated_phrase_set(
    ::google::cloud::speech::v1::PhraseSet* phrase_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  _impl_.phrase_set_ = phrase_set;
  if (phrase_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.UpdatePhraseSetRequest.phrase_set)
}
inline ::google::cloud::speech::v1::PhraseSet* UpdatePhraseSetRequest::release_phrase_set() {
  
  ::google::cloud::speech::v1::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::PhraseSet* UpdatePhraseSetRequest::unsafe_arena_release_phrase_set() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.UpdatePhraseSetRequest.phrase_set)
  
  ::google::cloud::speech::v1::PhraseSet* temp = _impl_.phrase_set_;
  _impl_.phrase_set_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::PhraseSet* UpdatePhraseSetRequest::_internal_mutable_phrase_set() {
  
  if (_impl_.phrase_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::PhraseSet>(GetArenaForAllocation());
    _impl_.phrase_set_ = p;
  }
  return _impl_.phrase_set_;
}
inline ::google::cloud::speech::v1::PhraseSet* UpdatePhraseSetRequest::mutable_phrase_set() {
  ::google::cloud::speech::v1::PhraseSet* _msg = _internal_mutable_phrase_set();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.UpdatePhraseSetRequest.phrase_set)
  return _msg;
}
inline void UpdatePhraseSetRequest::set_allocated_phrase_set(::google::cloud::speech::v1::PhraseSet* phrase_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phrase_set_);
  }
  if (phrase_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phrase_set));
    if (message_arena != submessage_arena) {
      phrase_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phrase_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.phrase_set_ = phrase_set;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.UpdatePhraseSetRequest.phrase_set)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdatePhraseSetRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdatePhraseSetRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePhraseSetRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePhraseSetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.UpdatePhraseSetRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdatePhraseSetRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.UpdatePhraseSetRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.UpdatePhraseSetRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePhraseSetRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.UpdatePhraseSetRequest.update_mask)
  return _msg;
}
inline void UpdatePhraseSetRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.UpdatePhraseSetRequest.update_mask)
}

// -------------------------------------------------------------------

// GetPhraseSetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetPhraseSetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPhraseSetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.GetPhraseSetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPhraseSetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.GetPhraseSetRequest.name)
}
inline std::string* GetPhraseSetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.GetPhraseSetRequest.name)
  return _s;
}
inline const std::string& GetPhraseSetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetPhraseSetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPhraseSetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPhraseSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.GetPhraseSetRequest.name)
  return _impl_.name_.Release();
}
inline void GetPhraseSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.GetPhraseSetRequest.name)
}

// -------------------------------------------------------------------

// ListPhraseSetRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListPhraseSetRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListPhraseSetRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListPhraseSetRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListPhraseSetRequest.parent)
}
inline std::string* ListPhraseSetRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListPhraseSetRequest.parent)
  return _s;
}
inline const std::string& ListPhraseSetRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListPhraseSetRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListPhraseSetRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListPhraseSetRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListPhraseSetRequest.parent)
}

// int32 page_size = 2;
inline void ListPhraseSetRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListPhraseSetRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListPhraseSetRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListPhraseSetRequest.page_size)
  return _internal_page_size();
}
inline void ListPhraseSetRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListPhraseSetRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListPhraseSetRequest.page_size)
}

// string page_token = 3;
inline void ListPhraseSetRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListPhraseSetRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListPhraseSetRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListPhraseSetRequest.page_token)
}
inline std::string* ListPhraseSetRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListPhraseSetRequest.page_token)
  return _s;
}
inline const std::string& ListPhraseSetRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListPhraseSetRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListPhraseSetRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListPhraseSetRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListPhraseSetRequest.page_token)
}

// -------------------------------------------------------------------

// ListPhraseSetResponse

// repeated .google.cloud.speech.v1.PhraseSet phrase_sets = 1;
inline int ListPhraseSetResponse::_internal_phrase_sets_size() const {
  return _impl_.phrase_sets_.size();
}
inline int ListPhraseSetResponse::phrase_sets_size() const {
  return _internal_phrase_sets_size();
}
inline ::google::cloud::speech::v1::PhraseSet* ListPhraseSetResponse::mutable_phrase_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListPhraseSetResponse.phrase_sets)
  return _impl_.phrase_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >*
ListPhraseSetResponse::mutable_phrase_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.ListPhraseSetResponse.phrase_sets)
  return &_impl_.phrase_sets_;
}
inline const ::google::cloud::speech::v1::PhraseSet& ListPhraseSetResponse::_internal_phrase_sets(int index) const {
  return _impl_.phrase_sets_.Get(index);
}
inline const ::google::cloud::speech::v1::PhraseSet& ListPhraseSetResponse::phrase_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListPhraseSetResponse.phrase_sets)
  return _internal_phrase_sets(index);
}
inline ::google::cloud::speech::v1::PhraseSet* ListPhraseSetResponse::_internal_add_phrase_sets() {
  return _impl_.phrase_sets_.Add();
}
inline ::google::cloud::speech::v1::PhraseSet* ListPhraseSetResponse::add_phrase_sets() {
  ::google::cloud::speech::v1::PhraseSet* _add = _internal_add_phrase_sets();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.ListPhraseSetResponse.phrase_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::PhraseSet >&
ListPhraseSetResponse::phrase_sets() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.ListPhraseSetResponse.phrase_sets)
  return _impl_.phrase_sets_;
}

// string next_page_token = 2;
inline void ListPhraseSetResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListPhraseSetResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListPhraseSetResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPhraseSetResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListPhraseSetResponse.next_page_token)
}
inline std::string* ListPhraseSetResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListPhraseSetResponse.next_page_token)
  return _s;
}
inline const std::string& ListPhraseSetResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListPhraseSetResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPhraseSetResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPhraseSetResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListPhraseSetResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListPhraseSetResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListPhraseSetResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeletePhraseSetRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeletePhraseSetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeletePhraseSetRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.DeletePhraseSetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePhraseSetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.DeletePhraseSetRequest.name)
}
inline std::string* DeletePhraseSetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.DeletePhraseSetRequest.name)
  return _s;
}
inline const std::string& DeletePhraseSetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeletePhraseSetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePhraseSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.DeletePhraseSetRequest.name)
  return _impl_.name_.Release();
}
inline void DeletePhraseSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.DeletePhraseSetRequest.name)
}

// -------------------------------------------------------------------

// CreateCustomClassRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCustomClassRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateCustomClassRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreateCustomClassRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCustomClassRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CreateCustomClassRequest.parent)
}
inline std::string* CreateCustomClassRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreateCustomClassRequest.parent)
  return _s;
}
inline const std::string& CreateCustomClassRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateCustomClassRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreateCustomClassRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateCustomClassRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreateCustomClassRequest.parent)
}

// string custom_class_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void CreateCustomClassRequest::clear_custom_class_id() {
  _impl_.custom_class_id_.ClearToEmpty();
}
inline const std::string& CreateCustomClassRequest::custom_class_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreateCustomClassRequest.custom_class_id)
  return _internal_custom_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCustomClassRequest::set_custom_class_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.custom_class_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.CreateCustomClassRequest.custom_class_id)
}
inline std::string* CreateCustomClassRequest::mutable_custom_class_id() {
  std::string* _s = _internal_mutable_custom_class_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreateCustomClassRequest.custom_class_id)
  return _s;
}
inline const std::string& CreateCustomClassRequest::_internal_custom_class_id() const {
  return _impl_.custom_class_id_.Get();
}
inline void CreateCustomClassRequest::_internal_set_custom_class_id(const std::string& value) {
  
  _impl_.custom_class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::_internal_mutable_custom_class_id() {
  
  return _impl_.custom_class_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCustomClassRequest::release_custom_class_id() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreateCustomClassRequest.custom_class_id)
  return _impl_.custom_class_id_.Release();
}
inline void CreateCustomClassRequest::set_allocated_custom_class_id(std::string* custom_class_id) {
  if (custom_class_id != nullptr) {
    
  } else {
    
  }
  _impl_.custom_class_id_.SetAllocated(custom_class_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_class_id_.IsDefault()) {
    _impl_.custom_class_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreateCustomClassRequest.custom_class_id)
}

// .google.cloud.speech.v1.CustomClass custom_class = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateCustomClassRequest::_internal_has_custom_class() const {
  return this != internal_default_instance() && _impl_.custom_class_ != nullptr;
}
inline bool CreateCustomClassRequest::has_custom_class() const {
  return _internal_has_custom_class();
}
inline const ::google::cloud::speech::v1::CustomClass& CreateCustomClassRequest::_internal_custom_class() const {
  const ::google::cloud::speech::v1::CustomClass* p = _impl_.custom_class_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::CustomClass&>(
      ::google::cloud::speech::v1::_CustomClass_default_instance_);
}
inline const ::google::cloud::speech::v1::CustomClass& CreateCustomClassRequest::custom_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.CreateCustomClassRequest.custom_class)
  return _internal_custom_class();
}
inline void CreateCustomClassRequest::unsafe_arena_set_allocated_custom_class(
    ::google::cloud::speech::v1::CustomClass* custom_class) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  _impl_.custom_class_ = custom_class;
  if (custom_class) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.CreateCustomClassRequest.custom_class)
}
inline ::google::cloud::speech::v1::CustomClass* CreateCustomClassRequest::release_custom_class() {
  
  ::google::cloud::speech::v1::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::CustomClass* CreateCustomClassRequest::unsafe_arena_release_custom_class() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.CreateCustomClassRequest.custom_class)
  
  ::google::cloud::speech::v1::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::CustomClass* CreateCustomClassRequest::_internal_mutable_custom_class() {
  
  if (_impl_.custom_class_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::CustomClass>(GetArenaForAllocation());
    _impl_.custom_class_ = p;
  }
  return _impl_.custom_class_;
}
inline ::google::cloud::speech::v1::CustomClass* CreateCustomClassRequest::mutable_custom_class() {
  ::google::cloud::speech::v1::CustomClass* _msg = _internal_mutable_custom_class();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.CreateCustomClassRequest.custom_class)
  return _msg;
}
inline void CreateCustomClassRequest::set_allocated_custom_class(::google::cloud::speech::v1::CustomClass* custom_class) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  if (custom_class) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_class));
    if (message_arena != submessage_arena) {
      custom_class = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_class, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_class_ = custom_class;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.CreateCustomClassRequest.custom_class)
}

// -------------------------------------------------------------------

// UpdateCustomClassRequest

// .google.cloud.speech.v1.CustomClass custom_class = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCustomClassRequest::_internal_has_custom_class() const {
  return this != internal_default_instance() && _impl_.custom_class_ != nullptr;
}
inline bool UpdateCustomClassRequest::has_custom_class() const {
  return _internal_has_custom_class();
}
inline const ::google::cloud::speech::v1::CustomClass& UpdateCustomClassRequest::_internal_custom_class() const {
  const ::google::cloud::speech::v1::CustomClass* p = _impl_.custom_class_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::CustomClass&>(
      ::google::cloud::speech::v1::_CustomClass_default_instance_);
}
inline const ::google::cloud::speech::v1::CustomClass& UpdateCustomClassRequest::custom_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.UpdateCustomClassRequest.custom_class)
  return _internal_custom_class();
}
inline void UpdateCustomClassRequest::unsafe_arena_set_allocated_custom_class(
    ::google::cloud::speech::v1::CustomClass* custom_class) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  _impl_.custom_class_ = custom_class;
  if (custom_class) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.UpdateCustomClassRequest.custom_class)
}
inline ::google::cloud::speech::v1::CustomClass* UpdateCustomClassRequest::release_custom_class() {
  
  ::google::cloud::speech::v1::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::speech::v1::CustomClass* UpdateCustomClassRequest::unsafe_arena_release_custom_class() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.UpdateCustomClassRequest.custom_class)
  
  ::google::cloud::speech::v1::CustomClass* temp = _impl_.custom_class_;
  _impl_.custom_class_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::CustomClass* UpdateCustomClassRequest::_internal_mutable_custom_class() {
  
  if (_impl_.custom_class_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::CustomClass>(GetArenaForAllocation());
    _impl_.custom_class_ = p;
  }
  return _impl_.custom_class_;
}
inline ::google::cloud::speech::v1::CustomClass* UpdateCustomClassRequest::mutable_custom_class() {
  ::google::cloud::speech::v1::CustomClass* _msg = _internal_mutable_custom_class();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.UpdateCustomClassRequest.custom_class)
  return _msg;
}
inline void UpdateCustomClassRequest::set_allocated_custom_class(::google::cloud::speech::v1::CustomClass* custom_class) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_class_);
  }
  if (custom_class) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_class));
    if (message_arena != submessage_arena) {
      custom_class = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_class, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_class_ = custom_class;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.UpdateCustomClassRequest.custom_class)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateCustomClassRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateCustomClassRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCustomClassRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCustomClassRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.UpdateCustomClassRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCustomClassRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.UpdateCustomClassRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.UpdateCustomClassRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCustomClassRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.UpdateCustomClassRequest.update_mask)
  return _msg;
}
inline void UpdateCustomClassRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.UpdateCustomClassRequest.update_mask)
}

// -------------------------------------------------------------------

// GetCustomClassRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCustomClassRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetCustomClassRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.GetCustomClassRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCustomClassRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.GetCustomClassRequest.name)
}
inline std::string* GetCustomClassRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.GetCustomClassRequest.name)
  return _s;
}
inline const std::string& GetCustomClassRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetCustomClassRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomClassRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCustomClassRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.GetCustomClassRequest.name)
  return _impl_.name_.Release();
}
inline void GetCustomClassRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.GetCustomClassRequest.name)
}

// -------------------------------------------------------------------

// ListCustomClassesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCustomClassesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListCustomClassesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListCustomClassesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListCustomClassesRequest.parent)
}
inline std::string* ListCustomClassesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListCustomClassesRequest.parent)
  return _s;
}
inline const std::string& ListCustomClassesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListCustomClassesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListCustomClassesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListCustomClassesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListCustomClassesRequest.parent)
}

// int32 page_size = 2;
inline void ListCustomClassesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListCustomClassesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListCustomClassesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListCustomClassesRequest.page_size)
  return _internal_page_size();
}
inline void ListCustomClassesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListCustomClassesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListCustomClassesRequest.page_size)
}

// string page_token = 3;
inline void ListCustomClassesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListCustomClassesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListCustomClassesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListCustomClassesRequest.page_token)
}
inline std::string* ListCustomClassesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListCustomClassesRequest.page_token)
  return _s;
}
inline const std::string& ListCustomClassesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListCustomClassesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListCustomClassesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListCustomClassesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListCustomClassesRequest.page_token)
}

// -------------------------------------------------------------------

// ListCustomClassesResponse

// repeated .google.cloud.speech.v1.CustomClass custom_classes = 1;
inline int ListCustomClassesResponse::_internal_custom_classes_size() const {
  return _impl_.custom_classes_.size();
}
inline int ListCustomClassesResponse::custom_classes_size() const {
  return _internal_custom_classes_size();
}
inline ::google::cloud::speech::v1::CustomClass* ListCustomClassesResponse::mutable_custom_classes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListCustomClassesResponse.custom_classes)
  return _impl_.custom_classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >*
ListCustomClassesResponse::mutable_custom_classes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.ListCustomClassesResponse.custom_classes)
  return &_impl_.custom_classes_;
}
inline const ::google::cloud::speech::v1::CustomClass& ListCustomClassesResponse::_internal_custom_classes(int index) const {
  return _impl_.custom_classes_.Get(index);
}
inline const ::google::cloud::speech::v1::CustomClass& ListCustomClassesResponse::custom_classes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListCustomClassesResponse.custom_classes)
  return _internal_custom_classes(index);
}
inline ::google::cloud::speech::v1::CustomClass* ListCustomClassesResponse::_internal_add_custom_classes() {
  return _impl_.custom_classes_.Add();
}
inline ::google::cloud::speech::v1::CustomClass* ListCustomClassesResponse::add_custom_classes() {
  ::google::cloud::speech::v1::CustomClass* _add = _internal_add_custom_classes();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.ListCustomClassesResponse.custom_classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::speech::v1::CustomClass >&
ListCustomClassesResponse::custom_classes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.ListCustomClassesResponse.custom_classes)
  return _impl_.custom_classes_;
}

// string next_page_token = 2;
inline void ListCustomClassesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListCustomClassesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ListCustomClassesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCustomClassesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ListCustomClassesResponse.next_page_token)
}
inline std::string* ListCustomClassesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ListCustomClassesResponse.next_page_token)
  return _s;
}
inline const std::string& ListCustomClassesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListCustomClassesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListCustomClassesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListCustomClassesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ListCustomClassesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListCustomClassesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ListCustomClassesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteCustomClassRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCustomClassRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteCustomClassRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.DeleteCustomClassRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteCustomClassRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.DeleteCustomClassRequest.name)
}
inline std::string* DeleteCustomClassRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.DeleteCustomClassRequest.name)
  return _s;
}
inline const std::string& DeleteCustomClassRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteCustomClassRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteCustomClassRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.DeleteCustomClassRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteCustomClassRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.DeleteCustomClassRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_5fadaptation_2eproto
