// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/common/operation_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto;
namespace google {
namespace cloud {
namespace common {
class OperationMetadata;
struct OperationMetadataDefaultTypeInternal;
extern OperationMetadataDefaultTypeInternal _OperationMetadata_default_instance_;
}  // namespace common
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::common::OperationMetadata* Arena::CreateMaybeMessage<::google::cloud::common::OperationMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace common {

// ===================================================================

class OperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.common.OperationMetadata) */ {
 public:
  inline OperationMetadata() : OperationMetadata(nullptr) {}
  ~OperationMetadata() override;
  explicit PROTOBUF_CONSTEXPR OperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationMetadata(const OperationMetadata& from);
  OperationMetadata(OperationMetadata&& from) noexcept
    : OperationMetadata() {
    *this = ::std::move(from);
  }

  inline OperationMetadata& operator=(const OperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationMetadata& operator=(OperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationMetadata* internal_default_instance() {
    return reinterpret_cast<const OperationMetadata*>(
               &_OperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationMetadata& a, OperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationMetadata& from) {
    OperationMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.common.OperationMetadata";
  }
  protected:
  explicit OperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 3,
    kVerbFieldNumber = 4,
    kStatusDetailFieldNumber = 5,
    kApiVersionFieldNumber = 7,
    kCreateTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kCancelRequestedFieldNumber = 6,
  };
  // string target = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string verb = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_verb();
  const std::string& verb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verb();
  PROTOBUF_NODISCARD std::string* release_verb();
  void set_allocated_verb(std::string* verb);
  private:
  const std::string& _internal_verb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verb(const std::string& value);
  std::string* _internal_mutable_verb();
  public:

  // string status_detail = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_status_detail();
  const std::string& status_detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* status_detail);
  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(const std::string& value);
  std::string* _internal_mutable_status_detail();
  public:

  // string api_version = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_NODISCARD std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // .google.protobuf.Timestamp create_time = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp end_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // bool cancel_requested = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_cancel_requested();
  bool cancel_requested() const;
  void set_cancel_requested(bool value);
  private:
  bool _internal_cancel_requested() const;
  void _internal_set_cancel_requested(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.common.OperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verb_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    bool cancel_requested_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationMetadata

// .google.protobuf.Timestamp create_time = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool OperationMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool OperationMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.create_time)
  return _internal_create_time();
}
inline void OperationMetadata::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.common.OperationMetadata.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.create_time)
  return _msg;
}
inline void OperationMetadata::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.create_time)
}

// .google.protobuf.Timestamp end_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool OperationMetadata::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool OperationMetadata::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OperationMetadata::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.end_time)
  return _internal_end_time();
}
inline void OperationMetadata::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.common.OperationMetadata.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OperationMetadata::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.end_time)
  return _msg;
}
inline void OperationMetadata::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.end_time)
}

// string target = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void OperationMetadata::clear_target() {
  _impl_.target_.ClearToEmpty();
}
inline const std::string& OperationMetadata::target() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_target(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.common.OperationMetadata.target)
}
inline std::string* OperationMetadata::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.target)
  return _s;
}
inline const std::string& OperationMetadata::_internal_target() const {
  return _impl_.target_.Get();
}
inline void OperationMetadata::_internal_set_target(const std::string& value) {
  
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_target() {
  
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_target() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.target)
  return _impl_.target_.Release();
}
inline void OperationMetadata::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.target)
}

// string verb = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void OperationMetadata::clear_verb() {
  _impl_.verb_.ClearToEmpty();
}
inline const std::string& OperationMetadata::verb() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.verb)
  return _internal_verb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_verb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verb_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.common.OperationMetadata.verb)
}
inline std::string* OperationMetadata::mutable_verb() {
  std::string* _s = _internal_mutable_verb();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.verb)
  return _s;
}
inline const std::string& OperationMetadata::_internal_verb() const {
  return _impl_.verb_.Get();
}
inline void OperationMetadata::_internal_set_verb(const std::string& value) {
  
  _impl_.verb_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_verb() {
  
  return _impl_.verb_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_verb() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.verb)
  return _impl_.verb_.Release();
}
inline void OperationMetadata::set_allocated_verb(std::string* verb) {
  if (verb != nullptr) {
    
  } else {
    
  }
  _impl_.verb_.SetAllocated(verb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verb_.IsDefault()) {
    _impl_.verb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.verb)
}

// string status_detail = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void OperationMetadata::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OperationMetadata::status_detail() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.status_detail)
  return _internal_status_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_status_detail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.common.OperationMetadata.status_detail)
}
inline std::string* OperationMetadata::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.status_detail)
  return _s;
}
inline const std::string& OperationMetadata::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OperationMetadata::_internal_set_status_detail(const std::string& value) {
  
  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_status_detail() {
  
  return _impl_.status_detail_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_status_detail() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OperationMetadata::set_allocated_status_detail(std::string* status_detail) {
  if (status_detail != nullptr) {
    
  } else {
    
  }
  _impl_.status_detail_.SetAllocated(status_detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_detail_.IsDefault()) {
    _impl_.status_detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.status_detail)
}

// bool cancel_requested = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void OperationMetadata::clear_cancel_requested() {
  _impl_.cancel_requested_ = false;
}
inline bool OperationMetadata::_internal_cancel_requested() const {
  return _impl_.cancel_requested_;
}
inline bool OperationMetadata::cancel_requested() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.cancel_requested)
  return _internal_cancel_requested();
}
inline void OperationMetadata::_internal_set_cancel_requested(bool value) {
  
  _impl_.cancel_requested_ = value;
}
inline void OperationMetadata::set_cancel_requested(bool value) {
  _internal_set_cancel_requested(value);
  // @@protoc_insertion_point(field_set:google.cloud.common.OperationMetadata.cancel_requested)
}

// string api_version = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void OperationMetadata::clear_api_version() {
  _impl_.api_version_.ClearToEmpty();
}
inline const std::string& OperationMetadata::api_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.common.OperationMetadata.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationMetadata::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.api_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.common.OperationMetadata.api_version)
}
inline std::string* OperationMetadata::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:google.cloud.common.OperationMetadata.api_version)
  return _s;
}
inline const std::string& OperationMetadata::_internal_api_version() const {
  return _impl_.api_version_.Get();
}
inline void OperationMetadata::_internal_set_api_version(const std::string& value) {
  
  _impl_.api_version_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationMetadata::_internal_mutable_api_version() {
  
  return _impl_.api_version_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationMetadata::release_api_version() {
  // @@protoc_insertion_point(field_release:google.cloud.common.OperationMetadata.api_version)
  return _impl_.api_version_.Release();
}
inline void OperationMetadata::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  _impl_.api_version_.SetAllocated(api_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.api_version_.IsDefault()) {
    _impl_.api_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.common.OperationMetadata.api_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fcommon_2foperation_5fmetadata_2eproto
