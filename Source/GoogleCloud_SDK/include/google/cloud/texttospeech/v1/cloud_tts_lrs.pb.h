// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/texttospeech/v1/cloud_tts_lrs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/cloud/texttospeech/v1/cloud_tts.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto;
namespace google {
namespace cloud {
namespace texttospeech {
namespace v1 {
class SynthesizeLongAudioMetadata;
struct SynthesizeLongAudioMetadataDefaultTypeInternal;
extern SynthesizeLongAudioMetadataDefaultTypeInternal _SynthesizeLongAudioMetadata_default_instance_;
class SynthesizeLongAudioRequest;
struct SynthesizeLongAudioRequestDefaultTypeInternal;
extern SynthesizeLongAudioRequestDefaultTypeInternal _SynthesizeLongAudioRequest_default_instance_;
class SynthesizeLongAudioResponse;
struct SynthesizeLongAudioResponseDefaultTypeInternal;
extern SynthesizeLongAudioResponseDefaultTypeInternal _SynthesizeLongAudioResponse_default_instance_;
}  // namespace v1
}  // namespace texttospeech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::texttospeech::v1::SynthesizeLongAudioMetadata* Arena::CreateMaybeMessage<::google::cloud::texttospeech::v1::SynthesizeLongAudioMetadata>(Arena*);
template<> ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* Arena::CreateMaybeMessage<::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest>(Arena*);
template<> ::google::cloud::texttospeech::v1::SynthesizeLongAudioResponse* Arena::CreateMaybeMessage<::google::cloud::texttospeech::v1::SynthesizeLongAudioResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace texttospeech {
namespace v1 {

// ===================================================================

class SynthesizeLongAudioRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest) */ {
 public:
  inline SynthesizeLongAudioRequest() : SynthesizeLongAudioRequest(nullptr) {}
  ~SynthesizeLongAudioRequest() override;
  explicit PROTOBUF_CONSTEXPR SynthesizeLongAudioRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynthesizeLongAudioRequest(const SynthesizeLongAudioRequest& from);
  SynthesizeLongAudioRequest(SynthesizeLongAudioRequest&& from) noexcept
    : SynthesizeLongAudioRequest() {
    *this = ::std::move(from);
  }

  inline SynthesizeLongAudioRequest& operator=(const SynthesizeLongAudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeLongAudioRequest& operator=(SynthesizeLongAudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynthesizeLongAudioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynthesizeLongAudioRequest* internal_default_instance() {
    return reinterpret_cast<const SynthesizeLongAudioRequest*>(
               &_SynthesizeLongAudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SynthesizeLongAudioRequest& a, SynthesizeLongAudioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeLongAudioRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynthesizeLongAudioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynthesizeLongAudioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynthesizeLongAudioRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynthesizeLongAudioRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynthesizeLongAudioRequest& from) {
    SynthesizeLongAudioRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeLongAudioRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.texttospeech.v1.SynthesizeLongAudioRequest";
  }
  protected:
  explicit SynthesizeLongAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kOutputGcsUriFieldNumber = 4,
    kInputFieldNumber = 2,
    kAudioConfigFieldNumber = 3,
    kVoiceFieldNumber = 5,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string output_gcs_uri = 4;
  void clear_output_gcs_uri();
  const std::string& output_gcs_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_gcs_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_gcs_uri();
  PROTOBUF_NODISCARD std::string* release_output_gcs_uri();
  void set_allocated_output_gcs_uri(std::string* output_gcs_uri);
  private:
  const std::string& _internal_output_gcs_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_gcs_uri(const std::string& value);
  std::string* _internal_mutable_output_gcs_uri();
  public:

  // .google.cloud.texttospeech.v1.SynthesisInput input = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::google::cloud::texttospeech::v1::SynthesisInput& input() const;
  PROTOBUF_NODISCARD ::google::cloud::texttospeech::v1::SynthesisInput* release_input();
  ::google::cloud::texttospeech::v1::SynthesisInput* mutable_input();
  void set_allocated_input(::google::cloud::texttospeech::v1::SynthesisInput* input);
  private:
  const ::google::cloud::texttospeech::v1::SynthesisInput& _internal_input() const;
  ::google::cloud::texttospeech::v1::SynthesisInput* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::google::cloud::texttospeech::v1::SynthesisInput* input);
  ::google::cloud::texttospeech::v1::SynthesisInput* unsafe_arena_release_input();

  // .google.cloud.texttospeech.v1.AudioConfig audio_config = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::google::cloud::texttospeech::v1::AudioConfig& audio_config() const;
  PROTOBUF_NODISCARD ::google::cloud::texttospeech::v1::AudioConfig* release_audio_config();
  ::google::cloud::texttospeech::v1::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::google::cloud::texttospeech::v1::AudioConfig* audio_config);
  private:
  const ::google::cloud::texttospeech::v1::AudioConfig& _internal_audio_config() const;
  ::google::cloud::texttospeech::v1::AudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::google::cloud::texttospeech::v1::AudioConfig* audio_config);
  ::google::cloud::texttospeech::v1::AudioConfig* unsafe_arena_release_audio_config();

  // .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 5;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::google::cloud::texttospeech::v1::VoiceSelectionParams& voice() const;
  PROTOBUF_NODISCARD ::google::cloud::texttospeech::v1::VoiceSelectionParams* release_voice();
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* mutable_voice();
  void set_allocated_voice(::google::cloud::texttospeech::v1::VoiceSelectionParams* voice);
  private:
  const ::google::cloud::texttospeech::v1::VoiceSelectionParams& _internal_voice() const;
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* _internal_mutable_voice();
  public:
  void unsafe_arena_set_allocated_voice(
      ::google::cloud::texttospeech::v1::VoiceSelectionParams* voice);
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* unsafe_arena_release_voice();

  // @@protoc_insertion_point(class_scope:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_gcs_uri_;
    ::google::cloud::texttospeech::v1::SynthesisInput* input_;
    ::google::cloud::texttospeech::v1::AudioConfig* audio_config_;
    ::google::cloud::texttospeech::v1::VoiceSelectionParams* voice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeLongAudioResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.texttospeech.v1.SynthesizeLongAudioResponse) */ {
 public:
  inline SynthesizeLongAudioResponse() : SynthesizeLongAudioResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SynthesizeLongAudioResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynthesizeLongAudioResponse(const SynthesizeLongAudioResponse& from);
  SynthesizeLongAudioResponse(SynthesizeLongAudioResponse&& from) noexcept
    : SynthesizeLongAudioResponse() {
    *this = ::std::move(from);
  }

  inline SynthesizeLongAudioResponse& operator=(const SynthesizeLongAudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeLongAudioResponse& operator=(SynthesizeLongAudioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynthesizeLongAudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynthesizeLongAudioResponse* internal_default_instance() {
    return reinterpret_cast<const SynthesizeLongAudioResponse*>(
               &_SynthesizeLongAudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SynthesizeLongAudioResponse& a, SynthesizeLongAudioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeLongAudioResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynthesizeLongAudioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynthesizeLongAudioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynthesizeLongAudioResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SynthesizeLongAudioResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SynthesizeLongAudioResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.texttospeech.v1.SynthesizeLongAudioResponse";
  }
  protected:
  explicit SynthesizeLongAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.texttospeech.v1.SynthesizeLongAudioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeLongAudioMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata) */ {
 public:
  inline SynthesizeLongAudioMetadata() : SynthesizeLongAudioMetadata(nullptr) {}
  ~SynthesizeLongAudioMetadata() override;
  explicit PROTOBUF_CONSTEXPR SynthesizeLongAudioMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynthesizeLongAudioMetadata(const SynthesizeLongAudioMetadata& from);
  SynthesizeLongAudioMetadata(SynthesizeLongAudioMetadata&& from) noexcept
    : SynthesizeLongAudioMetadata() {
    *this = ::std::move(from);
  }

  inline SynthesizeLongAudioMetadata& operator=(const SynthesizeLongAudioMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeLongAudioMetadata& operator=(SynthesizeLongAudioMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynthesizeLongAudioMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynthesizeLongAudioMetadata* internal_default_instance() {
    return reinterpret_cast<const SynthesizeLongAudioMetadata*>(
               &_SynthesizeLongAudioMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SynthesizeLongAudioMetadata& a, SynthesizeLongAudioMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeLongAudioMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynthesizeLongAudioMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynthesizeLongAudioMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynthesizeLongAudioMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynthesizeLongAudioMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynthesizeLongAudioMetadata& from) {
    SynthesizeLongAudioMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeLongAudioMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata";
  }
  protected:
  explicit SynthesizeLongAudioMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kLastUpdateTimeFieldNumber = 2,
    kProgressPercentageFieldNumber = 3,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp last_update_time = 2;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();

  // double progress_percentage = 3;
  void clear_progress_percentage();
  double progress_percentage() const;
  void set_progress_percentage(double value);
  private:
  double _internal_progress_percentage() const;
  void _internal_set_progress_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    double progress_percentage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SynthesizeLongAudioRequest

// string parent = 1;
inline void SynthesizeLongAudioRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& SynthesizeLongAudioRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SynthesizeLongAudioRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.parent)
}
inline std::string* SynthesizeLongAudioRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.parent)
  return _s;
}
inline const std::string& SynthesizeLongAudioRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void SynthesizeLongAudioRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* SynthesizeLongAudioRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* SynthesizeLongAudioRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.parent)
  return _impl_.parent_.Release();
}
inline void SynthesizeLongAudioRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.parent)
}

// .google.cloud.texttospeech.v1.SynthesisInput input = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool SynthesizeLongAudioRequest::_internal_has_input() const {
  return this != internal_default_instance() && _impl_.input_ != nullptr;
}
inline bool SynthesizeLongAudioRequest::has_input() const {
  return _internal_has_input();
}
inline const ::google::cloud::texttospeech::v1::SynthesisInput& SynthesizeLongAudioRequest::_internal_input() const {
  const ::google::cloud::texttospeech::v1::SynthesisInput* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::texttospeech::v1::SynthesisInput&>(
      ::google::cloud::texttospeech::v1::_SynthesisInput_default_instance_);
}
inline const ::google::cloud::texttospeech::v1::SynthesisInput& SynthesizeLongAudioRequest::input() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input)
  return _internal_input();
}
inline void SynthesizeLongAudioRequest::unsafe_arena_set_allocated_input(
    ::google::cloud::texttospeech::v1::SynthesisInput* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input)
}
inline ::google::cloud::texttospeech::v1::SynthesisInput* SynthesizeLongAudioRequest::release_input() {
  
  ::google::cloud::texttospeech::v1::SynthesisInput* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::texttospeech::v1::SynthesisInput* SynthesizeLongAudioRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input)
  
  ::google::cloud::texttospeech::v1::SynthesisInput* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::google::cloud::texttospeech::v1::SynthesisInput* SynthesizeLongAudioRequest::_internal_mutable_input() {
  
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::texttospeech::v1::SynthesisInput>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::google::cloud::texttospeech::v1::SynthesisInput* SynthesizeLongAudioRequest::mutable_input() {
  ::google::cloud::texttospeech::v1::SynthesisInput* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input)
  return _msg;
}
inline void SynthesizeLongAudioRequest::set_allocated_input(::google::cloud::texttospeech::v1::SynthesisInput* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input));
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input)
}

// .google.cloud.texttospeech.v1.AudioConfig audio_config = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool SynthesizeLongAudioRequest::_internal_has_audio_config() const {
  return this != internal_default_instance() && _impl_.audio_config_ != nullptr;
}
inline bool SynthesizeLongAudioRequest::has_audio_config() const {
  return _internal_has_audio_config();
}
inline const ::google::cloud::texttospeech::v1::AudioConfig& SynthesizeLongAudioRequest::_internal_audio_config() const {
  const ::google::cloud::texttospeech::v1::AudioConfig* p = _impl_.audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::texttospeech::v1::AudioConfig&>(
      ::google::cloud::texttospeech::v1::_AudioConfig_default_instance_);
}
inline const ::google::cloud::texttospeech::v1::AudioConfig& SynthesizeLongAudioRequest::audio_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audio_config)
  return _internal_audio_config();
}
inline void SynthesizeLongAudioRequest::unsafe_arena_set_allocated_audio_config(
    ::google::cloud::texttospeech::v1::AudioConfig* audio_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_config_);
  }
  _impl_.audio_config_ = audio_config;
  if (audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audio_config)
}
inline ::google::cloud::texttospeech::v1::AudioConfig* SynthesizeLongAudioRequest::release_audio_config() {
  
  ::google::cloud::texttospeech::v1::AudioConfig* temp = _impl_.audio_config_;
  _impl_.audio_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::texttospeech::v1::AudioConfig* SynthesizeLongAudioRequest::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audio_config)
  
  ::google::cloud::texttospeech::v1::AudioConfig* temp = _impl_.audio_config_;
  _impl_.audio_config_ = nullptr;
  return temp;
}
inline ::google::cloud::texttospeech::v1::AudioConfig* SynthesizeLongAudioRequest::_internal_mutable_audio_config() {
  
  if (_impl_.audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::texttospeech::v1::AudioConfig>(GetArenaForAllocation());
    _impl_.audio_config_ = p;
  }
  return _impl_.audio_config_;
}
inline ::google::cloud::texttospeech::v1::AudioConfig* SynthesizeLongAudioRequest::mutable_audio_config() {
  ::google::cloud::texttospeech::v1::AudioConfig* _msg = _internal_mutable_audio_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audio_config)
  return _msg;
}
inline void SynthesizeLongAudioRequest::set_allocated_audio_config(::google::cloud::texttospeech::v1::AudioConfig* audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_config_);
  }
  if (audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config));
    if (message_arena != submessage_arena) {
      audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.audio_config_ = audio_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audio_config)
}

// string output_gcs_uri = 4;
inline void SynthesizeLongAudioRequest::clear_output_gcs_uri() {
  _impl_.output_gcs_uri_.ClearToEmpty();
}
inline const std::string& SynthesizeLongAudioRequest::output_gcs_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.output_gcs_uri)
  return _internal_output_gcs_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SynthesizeLongAudioRequest::set_output_gcs_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_gcs_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.output_gcs_uri)
}
inline std::string* SynthesizeLongAudioRequest::mutable_output_gcs_uri() {
  std::string* _s = _internal_mutable_output_gcs_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.output_gcs_uri)
  return _s;
}
inline const std::string& SynthesizeLongAudioRequest::_internal_output_gcs_uri() const {
  return _impl_.output_gcs_uri_.Get();
}
inline void SynthesizeLongAudioRequest::_internal_set_output_gcs_uri(const std::string& value) {
  
  _impl_.output_gcs_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* SynthesizeLongAudioRequest::_internal_mutable_output_gcs_uri() {
  
  return _impl_.output_gcs_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* SynthesizeLongAudioRequest::release_output_gcs_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.output_gcs_uri)
  return _impl_.output_gcs_uri_.Release();
}
inline void SynthesizeLongAudioRequest::set_allocated_output_gcs_uri(std::string* output_gcs_uri) {
  if (output_gcs_uri != nullptr) {
    
  } else {
    
  }
  _impl_.output_gcs_uri_.SetAllocated(output_gcs_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_gcs_uri_.IsDefault()) {
    _impl_.output_gcs_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.output_gcs_uri)
}

// .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 5;
inline bool SynthesizeLongAudioRequest::_internal_has_voice() const {
  return this != internal_default_instance() && _impl_.voice_ != nullptr;
}
inline bool SynthesizeLongAudioRequest::has_voice() const {
  return _internal_has_voice();
}
inline const ::google::cloud::texttospeech::v1::VoiceSelectionParams& SynthesizeLongAudioRequest::_internal_voice() const {
  const ::google::cloud::texttospeech::v1::VoiceSelectionParams* p = _impl_.voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::texttospeech::v1::VoiceSelectionParams&>(
      ::google::cloud::texttospeech::v1::_VoiceSelectionParams_default_instance_);
}
inline const ::google::cloud::texttospeech::v1::VoiceSelectionParams& SynthesizeLongAudioRequest::voice() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice)
  return _internal_voice();
}
inline void SynthesizeLongAudioRequest::unsafe_arena_set_allocated_voice(
    ::google::cloud::texttospeech::v1::VoiceSelectionParams* voice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voice_);
  }
  _impl_.voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice)
}
inline ::google::cloud::texttospeech::v1::VoiceSelectionParams* SynthesizeLongAudioRequest::release_voice() {
  
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::texttospeech::v1::VoiceSelectionParams* SynthesizeLongAudioRequest::unsafe_arena_release_voice() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice)
  
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* temp = _impl_.voice_;
  _impl_.voice_ = nullptr;
  return temp;
}
inline ::google::cloud::texttospeech::v1::VoiceSelectionParams* SynthesizeLongAudioRequest::_internal_mutable_voice() {
  
  if (_impl_.voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::texttospeech::v1::VoiceSelectionParams>(GetArenaForAllocation());
    _impl_.voice_ = p;
  }
  return _impl_.voice_;
}
inline ::google::cloud::texttospeech::v1::VoiceSelectionParams* SynthesizeLongAudioRequest::mutable_voice() {
  ::google::cloud::texttospeech::v1::VoiceSelectionParams* _msg = _internal_mutable_voice();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice)
  return _msg;
}
inline void SynthesizeLongAudioRequest::set_allocated_voice(::google::cloud::texttospeech::v1::VoiceSelectionParams* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice));
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice)
}

// -------------------------------------------------------------------

// SynthesizeLongAudioResponse

// -------------------------------------------------------------------

// SynthesizeLongAudioMetadata

// .google.protobuf.Timestamp start_time = 1;
inline bool SynthesizeLongAudioMetadata::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool SynthesizeLongAudioMetadata::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SynthesizeLongAudioMetadata::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SynthesizeLongAudioMetadata::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.start_time)
  return _internal_start_time();
}
inline void SynthesizeLongAudioMetadata::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.start_time)
  return _msg;
}
inline void SynthesizeLongAudioMetadata::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.start_time)
}

// .google.protobuf.Timestamp last_update_time = 2;
inline bool SynthesizeLongAudioMetadata::_internal_has_last_update_time() const {
  return this != internal_default_instance() && _impl_.last_update_time_ != nullptr;
}
inline bool SynthesizeLongAudioMetadata::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SynthesizeLongAudioMetadata::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SynthesizeLongAudioMetadata::last_update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.last_update_time)
  return _internal_last_update_time();
}
inline void SynthesizeLongAudioMetadata::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::release_last_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.last_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::_internal_mutable_last_update_time() {
  
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SynthesizeLongAudioMetadata::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.last_update_time)
  return _msg;
}
inline void SynthesizeLongAudioMetadata::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.last_update_time)
}

// double progress_percentage = 3;
inline void SynthesizeLongAudioMetadata::clear_progress_percentage() {
  _impl_.progress_percentage_ = 0;
}
inline double SynthesizeLongAudioMetadata::_internal_progress_percentage() const {
  return _impl_.progress_percentage_;
}
inline double SynthesizeLongAudioMetadata::progress_percentage() const {
  // @@protoc_insertion_point(field_get:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.progress_percentage)
  return _internal_progress_percentage();
}
inline void SynthesizeLongAudioMetadata::_internal_set_progress_percentage(double value) {
  
  _impl_.progress_percentage_ = value;
}
inline void SynthesizeLongAudioMetadata::set_progress_percentage(double value) {
  _internal_set_progress_percentage(value);
  // @@protoc_insertion_point(field_set:google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.progress_percentage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace texttospeech
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto
