// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/texttospeech/v1/cloud_tts_lrs.proto
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto__INCLUDED
#define GRPC_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto__INCLUDED

#include "google/cloud/texttospeech/v1/cloud_tts_lrs.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace google {
namespace cloud {
namespace texttospeech {
namespace v1 {

// Service that implements Google Cloud Text-to-Speech API.
class TextToSpeechLongAudioSynthesize final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Synthesizes long form text asynchronously.
    virtual ::grpc::Status SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncSynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncSynthesizeLongAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncSynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncSynthesizeLongAudioRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Synthesizes long form text asynchronously.
      virtual void SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncSynthesizeLongAudioRaw(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncSynthesizeLongAudioRaw(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncSynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncSynthesizeLongAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncSynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncSynthesizeLongAudioRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void SynthesizeLongAudio(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncSynthesizeLongAudioRaw(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncSynthesizeLongAudioRaw(::grpc::ClientContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SynthesizeLongAudio_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Synthesizes long form text asynchronously.
    virtual ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeLongAudio(::grpc::ServerContext* context, ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SynthesizeLongAudio<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* request, ::google::longrunning::Operation* response) { return this->SynthesizeLongAudio(context, request, response); }));}
    void SetMessageAllocatorFor_SynthesizeLongAudio(
        ::grpc::MessageAllocator< ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SynthesizeLongAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SynthesizeLongAudio<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeLongAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SynthesizeLongAudio(context, request, response); }));
    }
    ~WithRawCallbackMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SynthesizeLongAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SynthesizeLongAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SynthesizeLongAudio() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedSynthesizeLongAudio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SynthesizeLongAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynthesizeLongAudio(::grpc::ServerContext* /*context*/, const ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynthesizeLongAudio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::texttospeech::v1::SynthesizeLongAudioRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SynthesizeLongAudio<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SynthesizeLongAudio<Service > StreamedService;
};

}  // namespace v1
}  // namespace texttospeech
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_5flrs_2eproto__INCLUDED
