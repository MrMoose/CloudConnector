// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/migration/v2/migration_entities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/migration/v2/migration_error_details.pb.h"
#include "google/cloud/bigquery/migration/v2/migration_metrics.pb.h"
#include "google/cloud/bigquery/migration/v2/translation_config.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/error_details.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {
class MigrationSubtask;
struct MigrationSubtaskDefaultTypeInternal;
extern MigrationSubtaskDefaultTypeInternal _MigrationSubtask_default_instance_;
class MigrationTask;
struct MigrationTaskDefaultTypeInternal;
extern MigrationTaskDefaultTypeInternal _MigrationTask_default_instance_;
class MigrationWorkflow;
struct MigrationWorkflowDefaultTypeInternal;
extern MigrationWorkflowDefaultTypeInternal _MigrationWorkflow_default_instance_;
class MigrationWorkflow_TasksEntry_DoNotUse;
struct MigrationWorkflow_TasksEntry_DoNotUseDefaultTypeInternal;
extern MigrationWorkflow_TasksEntry_DoNotUseDefaultTypeInternal _MigrationWorkflow_TasksEntry_DoNotUse_default_instance_;
}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::migration::v2::MigrationSubtask* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MigrationSubtask>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::MigrationTask* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MigrationTask>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::MigrationWorkflow* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MigrationWorkflow>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::MigrationWorkflow_TasksEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MigrationWorkflow_TasksEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {

enum MigrationWorkflow_State : int {
  MigrationWorkflow_State_STATE_UNSPECIFIED = 0,
  MigrationWorkflow_State_DRAFT = 1,
  MigrationWorkflow_State_RUNNING = 2,
  MigrationWorkflow_State_PAUSED = 3,
  MigrationWorkflow_State_COMPLETED = 4,
  MigrationWorkflow_State_MigrationWorkflow_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MigrationWorkflow_State_MigrationWorkflow_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MigrationWorkflow_State_IsValid(int value);
constexpr MigrationWorkflow_State MigrationWorkflow_State_State_MIN = MigrationWorkflow_State_STATE_UNSPECIFIED;
constexpr MigrationWorkflow_State MigrationWorkflow_State_State_MAX = MigrationWorkflow_State_COMPLETED;
constexpr int MigrationWorkflow_State_State_ARRAYSIZE = MigrationWorkflow_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrationWorkflow_State_descriptor();
template<typename T>
inline const std::string& MigrationWorkflow_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MigrationWorkflow_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MigrationWorkflow_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MigrationWorkflow_State_descriptor(), enum_t_value);
}
inline bool MigrationWorkflow_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MigrationWorkflow_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MigrationWorkflow_State>(
    MigrationWorkflow_State_descriptor(), name, value);
}
enum MigrationTask_State : int {
  MigrationTask_State_STATE_UNSPECIFIED = 0,
  MigrationTask_State_PENDING = 1,
  MigrationTask_State_ORCHESTRATING = 2,
  MigrationTask_State_RUNNING = 3,
  MigrationTask_State_PAUSED = 4,
  MigrationTask_State_SUCCEEDED = 5,
  MigrationTask_State_FAILED = 6,
  MigrationTask_State_MigrationTask_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MigrationTask_State_MigrationTask_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MigrationTask_State_IsValid(int value);
constexpr MigrationTask_State MigrationTask_State_State_MIN = MigrationTask_State_STATE_UNSPECIFIED;
constexpr MigrationTask_State MigrationTask_State_State_MAX = MigrationTask_State_FAILED;
constexpr int MigrationTask_State_State_ARRAYSIZE = MigrationTask_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrationTask_State_descriptor();
template<typename T>
inline const std::string& MigrationTask_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MigrationTask_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MigrationTask_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MigrationTask_State_descriptor(), enum_t_value);
}
inline bool MigrationTask_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MigrationTask_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MigrationTask_State>(
    MigrationTask_State_descriptor(), name, value);
}
enum MigrationSubtask_State : int {
  MigrationSubtask_State_STATE_UNSPECIFIED = 0,
  MigrationSubtask_State_ACTIVE = 1,
  MigrationSubtask_State_RUNNING = 2,
  MigrationSubtask_State_SUCCEEDED = 3,
  MigrationSubtask_State_FAILED = 4,
  MigrationSubtask_State_PAUSED = 5,
  MigrationSubtask_State_MigrationSubtask_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MigrationSubtask_State_MigrationSubtask_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MigrationSubtask_State_IsValid(int value);
constexpr MigrationSubtask_State MigrationSubtask_State_State_MIN = MigrationSubtask_State_STATE_UNSPECIFIED;
constexpr MigrationSubtask_State MigrationSubtask_State_State_MAX = MigrationSubtask_State_PAUSED;
constexpr int MigrationSubtask_State_State_ARRAYSIZE = MigrationSubtask_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrationSubtask_State_descriptor();
template<typename T>
inline const std::string& MigrationSubtask_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MigrationSubtask_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MigrationSubtask_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MigrationSubtask_State_descriptor(), enum_t_value);
}
inline bool MigrationSubtask_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MigrationSubtask_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MigrationSubtask_State>(
    MigrationSubtask_State_descriptor(), name, value);
}
// ===================================================================

class MigrationWorkflow_TasksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationWorkflow_TasksEntry_DoNotUse, 
    std::string, ::google::cloud::bigquery::migration::v2::MigrationTask,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationWorkflow_TasksEntry_DoNotUse, 
    std::string, ::google::cloud::bigquery::migration::v2::MigrationTask,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MigrationWorkflow_TasksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MigrationWorkflow_TasksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MigrationWorkflow_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MigrationWorkflow_TasksEntry_DoNotUse& other);
  static const MigrationWorkflow_TasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MigrationWorkflow_TasksEntry_DoNotUse*>(&_MigrationWorkflow_TasksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.migration.v2.MigrationWorkflow.TasksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto;
};

// -------------------------------------------------------------------

class MigrationWorkflow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.MigrationWorkflow) */ {
 public:
  inline MigrationWorkflow() : MigrationWorkflow(nullptr) {}
  ~MigrationWorkflow() override;
  explicit PROTOBUF_CONSTEXPR MigrationWorkflow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrationWorkflow(const MigrationWorkflow& from);
  MigrationWorkflow(MigrationWorkflow&& from) noexcept
    : MigrationWorkflow() {
    *this = ::std::move(from);
  }

  inline MigrationWorkflow& operator=(const MigrationWorkflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrationWorkflow& operator=(MigrationWorkflow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrationWorkflow& default_instance() {
    return *internal_default_instance();
  }
  static inline const MigrationWorkflow* internal_default_instance() {
    return reinterpret_cast<const MigrationWorkflow*>(
               &_MigrationWorkflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MigrationWorkflow& a, MigrationWorkflow& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrationWorkflow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrationWorkflow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrationWorkflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrationWorkflow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrationWorkflow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrationWorkflow& from) {
    MigrationWorkflow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrationWorkflow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.MigrationWorkflow";
  }
  protected:
  explicit MigrationWorkflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef MigrationWorkflow_State State;
  static constexpr State STATE_UNSPECIFIED =
    MigrationWorkflow_State_STATE_UNSPECIFIED;
  static constexpr State DRAFT =
    MigrationWorkflow_State_DRAFT;
  static constexpr State RUNNING =
    MigrationWorkflow_State_RUNNING;
  static constexpr State PAUSED =
    MigrationWorkflow_State_PAUSED;
  static constexpr State COMPLETED =
    MigrationWorkflow_State_COMPLETED;
  static inline bool State_IsValid(int value) {
    return MigrationWorkflow_State_IsValid(value);
  }
  static constexpr State State_MIN =
    MigrationWorkflow_State_State_MIN;
  static constexpr State State_MAX =
    MigrationWorkflow_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    MigrationWorkflow_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return MigrationWorkflow_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return MigrationWorkflow_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return MigrationWorkflow_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 6,
    kCreateTimeFieldNumber = 4,
    kLastUpdateTimeFieldNumber = 5,
    kStateFieldNumber = 3,
  };
  // map<string, .google.cloud.bigquery.migration.v2.MigrationTask> tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >&
      _internal_tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >*
      _internal_mutable_tasks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >&
      tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >*
      mutable_tasks();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 6;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp last_update_time = 5;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();

  // .google.cloud.bigquery.migration.v2.MigrationWorkflow.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State state() const;
  void set_state(::google::cloud::bigquery::migration::v2::MigrationWorkflow_State value);
  private:
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::migration::v2::MigrationWorkflow_State value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.MigrationWorkflow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MigrationWorkflow_TasksEntry_DoNotUse,
        std::string, ::google::cloud::bigquery::migration::v2::MigrationTask,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto;
};
// -------------------------------------------------------------------

class MigrationTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.MigrationTask) */ {
 public:
  inline MigrationTask() : MigrationTask(nullptr) {}
  ~MigrationTask() override;
  explicit PROTOBUF_CONSTEXPR MigrationTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrationTask(const MigrationTask& from);
  MigrationTask(MigrationTask&& from) noexcept
    : MigrationTask() {
    *this = ::std::move(from);
  }

  inline MigrationTask& operator=(const MigrationTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrationTask& operator=(MigrationTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrationTask& default_instance() {
    return *internal_default_instance();
  }
  enum TaskDetailsCase {
    kTranslationConfigDetails = 14,
    TASK_DETAILS_NOT_SET = 0,
  };

  static inline const MigrationTask* internal_default_instance() {
    return reinterpret_cast<const MigrationTask*>(
               &_MigrationTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MigrationTask& a, MigrationTask& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrationTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrationTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrationTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrationTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrationTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrationTask& from) {
    MigrationTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrationTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.MigrationTask";
  }
  protected:
  explicit MigrationTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MigrationTask_State State;
  static constexpr State STATE_UNSPECIFIED =
    MigrationTask_State_STATE_UNSPECIFIED;
  static constexpr State PENDING =
    MigrationTask_State_PENDING;
  static constexpr State ORCHESTRATING =
    MigrationTask_State_ORCHESTRATING;
  static constexpr State RUNNING =
    MigrationTask_State_RUNNING;
  static constexpr State PAUSED =
    MigrationTask_State_PAUSED;
  static constexpr State SUCCEEDED =
    MigrationTask_State_SUCCEEDED;
  static constexpr State FAILED =
    MigrationTask_State_FAILED;
  static inline bool State_IsValid(int value) {
    return MigrationTask_State_IsValid(value);
  }
  static constexpr State State_MIN =
    MigrationTask_State_State_MIN;
  static constexpr State State_MAX =
    MigrationTask_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    MigrationTask_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return MigrationTask_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return MigrationTask_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return MigrationTask_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kProcessingErrorFieldNumber = 5,
    kCreateTimeFieldNumber = 6,
    kLastUpdateTimeFieldNumber = 7,
    kStateFieldNumber = 4,
    kTranslationConfigDetailsFieldNumber = 14,
  };
  // string id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.rpc.ErrorInfo processing_error = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_processing_error() const;
  private:
  bool _internal_has_processing_error() const;
  public:
  void clear_processing_error();
  const ::google::rpc::ErrorInfo& processing_error() const;
  PROTOBUF_NODISCARD ::google::rpc::ErrorInfo* release_processing_error();
  ::google::rpc::ErrorInfo* mutable_processing_error();
  void set_allocated_processing_error(::google::rpc::ErrorInfo* processing_error);
  private:
  const ::google::rpc::ErrorInfo& _internal_processing_error() const;
  ::google::rpc::ErrorInfo* _internal_mutable_processing_error();
  public:
  void unsafe_arena_set_allocated_processing_error(
      ::google::rpc::ErrorInfo* processing_error);
  ::google::rpc::ErrorInfo* unsafe_arena_release_processing_error();

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp last_update_time = 7;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();

  // .google.cloud.bigquery.migration.v2.MigrationTask.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::migration::v2::MigrationTask_State state() const;
  void set_state(::google::cloud::bigquery::migration::v2::MigrationTask_State value);
  private:
  ::google::cloud::bigquery::migration::v2::MigrationTask_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::migration::v2::MigrationTask_State value);
  public:

  // .google.cloud.bigquery.migration.v2.TranslationConfigDetails translation_config_details = 14;
  bool has_translation_config_details() const;
  private:
  bool _internal_has_translation_config_details() const;
  public:
  void clear_translation_config_details();
  const ::google::cloud::bigquery::migration::v2::TranslationConfigDetails& translation_config_details() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* release_translation_config_details();
  ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* mutable_translation_config_details();
  void set_allocated_translation_config_details(::google::cloud::bigquery::migration::v2::TranslationConfigDetails* translation_config_details);
  private:
  const ::google::cloud::bigquery::migration::v2::TranslationConfigDetails& _internal_translation_config_details() const;
  ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* _internal_mutable_translation_config_details();
  public:
  void unsafe_arena_set_allocated_translation_config_details(
      ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* translation_config_details);
  ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* unsafe_arena_release_translation_config_details();

  void clear_task_details();
  TaskDetailsCase task_details_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.MigrationTask)
 private:
  class _Internal;
  void set_has_translation_config_details();

  inline bool has_task_details() const;
  inline void clear_has_task_details();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::google::rpc::ErrorInfo* processing_error_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    int state_;
    union TaskDetailsUnion {
      constexpr TaskDetailsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* translation_config_details_;
    } task_details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto;
};
// -------------------------------------------------------------------

class MigrationSubtask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.MigrationSubtask) */ {
 public:
  inline MigrationSubtask() : MigrationSubtask(nullptr) {}
  ~MigrationSubtask() override;
  explicit PROTOBUF_CONSTEXPR MigrationSubtask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrationSubtask(const MigrationSubtask& from);
  MigrationSubtask(MigrationSubtask&& from) noexcept
    : MigrationSubtask() {
    *this = ::std::move(from);
  }

  inline MigrationSubtask& operator=(const MigrationSubtask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrationSubtask& operator=(MigrationSubtask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrationSubtask& default_instance() {
    return *internal_default_instance();
  }
  static inline const MigrationSubtask* internal_default_instance() {
    return reinterpret_cast<const MigrationSubtask*>(
               &_MigrationSubtask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MigrationSubtask& a, MigrationSubtask& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrationSubtask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrationSubtask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrationSubtask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrationSubtask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrationSubtask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrationSubtask& from) {
    MigrationSubtask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrationSubtask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.MigrationSubtask";
  }
  protected:
  explicit MigrationSubtask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MigrationSubtask_State State;
  static constexpr State STATE_UNSPECIFIED =
    MigrationSubtask_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    MigrationSubtask_State_ACTIVE;
  static constexpr State RUNNING =
    MigrationSubtask_State_RUNNING;
  static constexpr State SUCCEEDED =
    MigrationSubtask_State_SUCCEEDED;
  static constexpr State FAILED =
    MigrationSubtask_State_FAILED;
  static constexpr State PAUSED =
    MigrationSubtask_State_PAUSED;
  static inline bool State_IsValid(int value) {
    return MigrationSubtask_State_IsValid(value);
  }
  static constexpr State State_MIN =
    MigrationSubtask_State_State_MIN;
  static constexpr State State_MAX =
    MigrationSubtask_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    MigrationSubtask_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return MigrationSubtask_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return MigrationSubtask_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return MigrationSubtask_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 11,
    kResourceErrorDetailsFieldNumber = 12,
    kNameFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kProcessingErrorFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
    kLastUpdateTimeFieldNumber = 8,
    kStateFieldNumber = 5,
    kResourceErrorCountFieldNumber = 13,
  };
  // repeated .google.cloud.bigquery.migration.v2.TimeSeries metrics = 11;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::google::cloud::bigquery::migration::v2::TimeSeries* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::TimeSeries >*
      mutable_metrics();
  private:
  const ::google::cloud::bigquery::migration::v2::TimeSeries& _internal_metrics(int index) const;
  ::google::cloud::bigquery::migration::v2::TimeSeries* _internal_add_metrics();
  public:
  const ::google::cloud::bigquery::migration::v2::TimeSeries& metrics(int index) const;
  ::google::cloud::bigquery::migration::v2::TimeSeries* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::TimeSeries >&
      metrics() const;

  // repeated .google.cloud.bigquery.migration.v2.ResourceErrorDetail resource_error_details = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int resource_error_details_size() const;
  private:
  int _internal_resource_error_details_size() const;
  public:
  void clear_resource_error_details();
  ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* mutable_resource_error_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ResourceErrorDetail >*
      mutable_resource_error_details();
  private:
  const ::google::cloud::bigquery::migration::v2::ResourceErrorDetail& _internal_resource_error_details(int index) const;
  ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* _internal_add_resource_error_details();
  public:
  const ::google::cloud::bigquery::migration::v2::ResourceErrorDetail& resource_error_details(int index) const;
  ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* add_resource_error_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ResourceErrorDetail >&
      resource_error_details() const;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.rpc.ErrorInfo processing_error = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_processing_error() const;
  private:
  bool _internal_has_processing_error() const;
  public:
  void clear_processing_error();
  const ::google::rpc::ErrorInfo& processing_error() const;
  PROTOBUF_NODISCARD ::google::rpc::ErrorInfo* release_processing_error();
  ::google::rpc::ErrorInfo* mutable_processing_error();
  void set_allocated_processing_error(::google::rpc::ErrorInfo* processing_error);
  private:
  const ::google::rpc::ErrorInfo& _internal_processing_error() const;
  ::google::rpc::ErrorInfo* _internal_mutable_processing_error();
  public:
  void unsafe_arena_set_allocated_processing_error(
      ::google::rpc::ErrorInfo* processing_error);
  ::google::rpc::ErrorInfo* unsafe_arena_release_processing_error();

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp last_update_time = 8;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();

  // .google.cloud.bigquery.migration.v2.MigrationSubtask.State state = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_state();
  ::google::cloud::bigquery::migration::v2::MigrationSubtask_State state() const;
  void set_state(::google::cloud::bigquery::migration::v2::MigrationSubtask_State value);
  private:
  ::google::cloud::bigquery::migration::v2::MigrationSubtask_State _internal_state() const;
  void _internal_set_state(::google::cloud::bigquery::migration::v2::MigrationSubtask_State value);
  public:

  // int32 resource_error_count = 13;
  void clear_resource_error_count();
  int32_t resource_error_count() const;
  void set_resource_error_count(int32_t value);
  private:
  int32_t _internal_resource_error_count() const;
  void _internal_set_resource_error_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.MigrationSubtask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::TimeSeries > metrics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ResourceErrorDetail > resource_error_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::google::rpc::ErrorInfo* processing_error_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    int state_;
    int32_t resource_error_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MigrationWorkflow

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
inline void MigrationWorkflow::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MigrationWorkflow::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationWorkflow.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationWorkflow::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationWorkflow.name)
}
inline std::string* MigrationWorkflow::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationWorkflow.name)
  return _s;
}
inline const std::string& MigrationWorkflow::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MigrationWorkflow::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationWorkflow::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationWorkflow::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationWorkflow.name)
  return _impl_.name_.Release();
}
inline void MigrationWorkflow::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.name)
}

// string display_name = 6;
inline void MigrationWorkflow::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& MigrationWorkflow::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationWorkflow.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationWorkflow::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationWorkflow.display_name)
}
inline std::string* MigrationWorkflow::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationWorkflow.display_name)
  return _s;
}
inline const std::string& MigrationWorkflow::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void MigrationWorkflow::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationWorkflow::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationWorkflow::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationWorkflow.display_name)
  return _impl_.display_name_.Release();
}
inline void MigrationWorkflow::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.display_name)
}

// map<string, .google.cloud.bigquery.migration.v2.MigrationTask> tasks = 2;
inline int MigrationWorkflow::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int MigrationWorkflow::tasks_size() const {
  return _internal_tasks_size();
}
inline void MigrationWorkflow::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >&
MigrationWorkflow::_internal_tasks() const {
  return _impl_.tasks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >&
MigrationWorkflow::tasks() const {
  // @@protoc_insertion_point(field_map:google.cloud.bigquery.migration.v2.MigrationWorkflow.tasks)
  return _internal_tasks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >*
MigrationWorkflow::_internal_mutable_tasks() {
  return _impl_.tasks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::migration::v2::MigrationTask >*
MigrationWorkflow::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.bigquery.migration.v2.MigrationWorkflow.tasks)
  return _internal_mutable_tasks();
}

// .google.cloud.bigquery.migration.v2.MigrationWorkflow.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void MigrationWorkflow::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State MigrationWorkflow::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State MigrationWorkflow::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationWorkflow.state)
  return _internal_state();
}
inline void MigrationWorkflow::_internal_set_state(::google::cloud::bigquery::migration::v2::MigrationWorkflow_State value) {
  
  _impl_.state_ = value;
}
inline void MigrationWorkflow::set_state(::google::cloud::bigquery::migration::v2::MigrationWorkflow_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationWorkflow.state)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool MigrationWorkflow::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool MigrationWorkflow::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationWorkflow::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationWorkflow::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationWorkflow.create_time)
  return _internal_create_time();
}
inline void MigrationWorkflow::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationWorkflow.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationWorkflow.create_time)
  return _msg;
}
inline void MigrationWorkflow::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.create_time)
}

// .google.protobuf.Timestamp last_update_time = 5;
inline bool MigrationWorkflow::_internal_has_last_update_time() const {
  return this != internal_default_instance() && _impl_.last_update_time_ != nullptr;
}
inline bool MigrationWorkflow::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationWorkflow::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationWorkflow::last_update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationWorkflow.last_update_time)
  return _internal_last_update_time();
}
inline void MigrationWorkflow::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::release_last_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationWorkflow.last_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::_internal_mutable_last_update_time() {
  
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationWorkflow::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationWorkflow.last_update_time)
  return _msg;
}
inline void MigrationWorkflow::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationWorkflow.last_update_time)
}

// -------------------------------------------------------------------

// MigrationTask

// .google.cloud.bigquery.migration.v2.TranslationConfigDetails translation_config_details = 14;
inline bool MigrationTask::_internal_has_translation_config_details() const {
  return task_details_case() == kTranslationConfigDetails;
}
inline bool MigrationTask::has_translation_config_details() const {
  return _internal_has_translation_config_details();
}
inline void MigrationTask::set_has_translation_config_details() {
  _impl_._oneof_case_[0] = kTranslationConfigDetails;
}
inline ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* MigrationTask::release_translation_config_details() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.translation_config_details)
  if (_internal_has_translation_config_details()) {
    clear_has_task_details();
    ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* temp = _impl_.task_details_.translation_config_details_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_details_.translation_config_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::TranslationConfigDetails& MigrationTask::_internal_translation_config_details() const {
  return _internal_has_translation_config_details()
      ? *_impl_.task_details_.translation_config_details_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::TranslationConfigDetails&>(::google::cloud::bigquery::migration::v2::_TranslationConfigDetails_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::TranslationConfigDetails& MigrationTask::translation_config_details() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.translation_config_details)
  return _internal_translation_config_details();
}
inline ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* MigrationTask::unsafe_arena_release_translation_config_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.MigrationTask.translation_config_details)
  if (_internal_has_translation_config_details()) {
    clear_has_task_details();
    ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* temp = _impl_.task_details_.translation_config_details_;
    _impl_.task_details_.translation_config_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MigrationTask::unsafe_arena_set_allocated_translation_config_details(::google::cloud::bigquery::migration::v2::TranslationConfigDetails* translation_config_details) {
  clear_task_details();
  if (translation_config_details) {
    set_has_translation_config_details();
    _impl_.task_details_.translation_config_details_ = translation_config_details;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.translation_config_details)
}
inline ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* MigrationTask::_internal_mutable_translation_config_details() {
  if (!_internal_has_translation_config_details()) {
    clear_task_details();
    set_has_translation_config_details();
    _impl_.task_details_.translation_config_details_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::TranslationConfigDetails >(GetArenaForAllocation());
  }
  return _impl_.task_details_.translation_config_details_;
}
inline ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* MigrationTask::mutable_translation_config_details() {
  ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* _msg = _internal_mutable_translation_config_details();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.translation_config_details)
  return _msg;
}

// string id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
inline void MigrationTask::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MigrationTask::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationTask::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationTask.id)
}
inline std::string* MigrationTask::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.id)
  return _s;
}
inline const std::string& MigrationTask::_internal_id() const {
  return _impl_.id_.Get();
}
inline void MigrationTask::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationTask::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationTask::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.id)
  return _impl_.id_.Release();
}
inline void MigrationTask::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.id)
}

// string type = 2;
inline void MigrationTask::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& MigrationTask::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationTask::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationTask.type)
}
inline std::string* MigrationTask::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.type)
  return _s;
}
inline const std::string& MigrationTask::_internal_type() const {
  return _impl_.type_.Get();
}
inline void MigrationTask::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationTask::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationTask::release_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.type)
  return _impl_.type_.Release();
}
inline void MigrationTask::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.type)
}

// .google.cloud.bigquery.migration.v2.MigrationTask.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void MigrationTask::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::migration::v2::MigrationTask_State MigrationTask::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::migration::v2::MigrationTask_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::migration::v2::MigrationTask_State MigrationTask::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.state)
  return _internal_state();
}
inline void MigrationTask::_internal_set_state(::google::cloud::bigquery::migration::v2::MigrationTask_State value) {
  
  _impl_.state_ = value;
}
inline void MigrationTask::set_state(::google::cloud::bigquery::migration::v2::MigrationTask_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationTask.state)
}

// .google.rpc.ErrorInfo processing_error = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool MigrationTask::_internal_has_processing_error() const {
  return this != internal_default_instance() && _impl_.processing_error_ != nullptr;
}
inline bool MigrationTask::has_processing_error() const {
  return _internal_has_processing_error();
}
inline const ::google::rpc::ErrorInfo& MigrationTask::_internal_processing_error() const {
  const ::google::rpc::ErrorInfo* p = _impl_.processing_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::ErrorInfo&>(
      ::google::rpc::_ErrorInfo_default_instance_);
}
inline const ::google::rpc::ErrorInfo& MigrationTask::processing_error() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.processing_error)
  return _internal_processing_error();
}
inline void MigrationTask::unsafe_arena_set_allocated_processing_error(
    ::google::rpc::ErrorInfo* processing_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_error_);
  }
  _impl_.processing_error_ = processing_error;
  if (processing_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.processing_error)
}
inline ::google::rpc::ErrorInfo* MigrationTask::release_processing_error() {
  
  ::google::rpc::ErrorInfo* temp = _impl_.processing_error_;
  _impl_.processing_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::ErrorInfo* MigrationTask::unsafe_arena_release_processing_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.processing_error)
  
  ::google::rpc::ErrorInfo* temp = _impl_.processing_error_;
  _impl_.processing_error_ = nullptr;
  return temp;
}
inline ::google::rpc::ErrorInfo* MigrationTask::_internal_mutable_processing_error() {
  
  if (_impl_.processing_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::ErrorInfo>(GetArenaForAllocation());
    _impl_.processing_error_ = p;
  }
  return _impl_.processing_error_;
}
inline ::google::rpc::ErrorInfo* MigrationTask::mutable_processing_error() {
  ::google::rpc::ErrorInfo* _msg = _internal_mutable_processing_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.processing_error)
  return _msg;
}
inline void MigrationTask::set_allocated_processing_error(::google::rpc::ErrorInfo* processing_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_error_);
  }
  if (processing_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_error));
    if (message_arena != submessage_arena) {
      processing_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.processing_error_ = processing_error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.processing_error)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool MigrationTask::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool MigrationTask::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationTask::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationTask::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.create_time)
  return _internal_create_time();
}
inline void MigrationTask::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.create_time)
  return _msg;
}
inline void MigrationTask::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.create_time)
}

// .google.protobuf.Timestamp last_update_time = 7;
inline bool MigrationTask::_internal_has_last_update_time() const {
  return this != internal_default_instance() && _impl_.last_update_time_ != nullptr;
}
inline bool MigrationTask::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationTask::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationTask::last_update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationTask.last_update_time)
  return _internal_last_update_time();
}
inline void MigrationTask::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::release_last_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationTask.last_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::_internal_mutable_last_update_time() {
  
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationTask::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationTask.last_update_time)
  return _msg;
}
inline void MigrationTask::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationTask.last_update_time)
}

inline bool MigrationTask::has_task_details() const {
  return task_details_case() != TASK_DETAILS_NOT_SET;
}
inline void MigrationTask::clear_has_task_details() {
  _impl_._oneof_case_[0] = TASK_DETAILS_NOT_SET;
}
inline MigrationTask::TaskDetailsCase MigrationTask::task_details_case() const {
  return MigrationTask::TaskDetailsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MigrationSubtask

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY, (.google.api.field_behavior) = IMMUTABLE];
inline void MigrationSubtask::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MigrationSubtask::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationSubtask::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationSubtask.name)
}
inline std::string* MigrationSubtask::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.name)
  return _s;
}
inline const std::string& MigrationSubtask::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MigrationSubtask::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationSubtask::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationSubtask::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.name)
  return _impl_.name_.Release();
}
inline void MigrationSubtask::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.name)
}

// string task_id = 2;
inline void MigrationSubtask::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& MigrationSubtask::task_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationSubtask::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationSubtask.task_id)
}
inline std::string* MigrationSubtask::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.task_id)
  return _s;
}
inline const std::string& MigrationSubtask::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void MigrationSubtask::_internal_set_task_id(const std::string& value) {
  
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationSubtask::_internal_mutable_task_id() {
  
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationSubtask::release_task_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.task_id)
  return _impl_.task_id_.Release();
}
inline void MigrationSubtask::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.task_id)
}

// string type = 3;
inline void MigrationSubtask::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& MigrationSubtask::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MigrationSubtask::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationSubtask.type)
}
inline std::string* MigrationSubtask::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.type)
  return _s;
}
inline const std::string& MigrationSubtask::_internal_type() const {
  return _impl_.type_.Get();
}
inline void MigrationSubtask::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrationSubtask::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* MigrationSubtask::release_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.type)
  return _impl_.type_.Release();
}
inline void MigrationSubtask::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.type)
}

// .google.cloud.bigquery.migration.v2.MigrationSubtask.State state = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void MigrationSubtask::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::cloud::bigquery::migration::v2::MigrationSubtask_State MigrationSubtask::_internal_state() const {
  return static_cast< ::google::cloud::bigquery::migration::v2::MigrationSubtask_State >(_impl_.state_);
}
inline ::google::cloud::bigquery::migration::v2::MigrationSubtask_State MigrationSubtask::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.state)
  return _internal_state();
}
inline void MigrationSubtask::_internal_set_state(::google::cloud::bigquery::migration::v2::MigrationSubtask_State value) {
  
  _impl_.state_ = value;
}
inline void MigrationSubtask::set_state(::google::cloud::bigquery::migration::v2::MigrationSubtask_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationSubtask.state)
}

// .google.rpc.ErrorInfo processing_error = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool MigrationSubtask::_internal_has_processing_error() const {
  return this != internal_default_instance() && _impl_.processing_error_ != nullptr;
}
inline bool MigrationSubtask::has_processing_error() const {
  return _internal_has_processing_error();
}
inline const ::google::rpc::ErrorInfo& MigrationSubtask::_internal_processing_error() const {
  const ::google::rpc::ErrorInfo* p = _impl_.processing_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::ErrorInfo&>(
      ::google::rpc::_ErrorInfo_default_instance_);
}
inline const ::google::rpc::ErrorInfo& MigrationSubtask::processing_error() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.processing_error)
  return _internal_processing_error();
}
inline void MigrationSubtask::unsafe_arena_set_allocated_processing_error(
    ::google::rpc::ErrorInfo* processing_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_error_);
  }
  _impl_.processing_error_ = processing_error;
  if (processing_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.processing_error)
}
inline ::google::rpc::ErrorInfo* MigrationSubtask::release_processing_error() {
  
  ::google::rpc::ErrorInfo* temp = _impl_.processing_error_;
  _impl_.processing_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::ErrorInfo* MigrationSubtask::unsafe_arena_release_processing_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.processing_error)
  
  ::google::rpc::ErrorInfo* temp = _impl_.processing_error_;
  _impl_.processing_error_ = nullptr;
  return temp;
}
inline ::google::rpc::ErrorInfo* MigrationSubtask::_internal_mutable_processing_error() {
  
  if (_impl_.processing_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::ErrorInfo>(GetArenaForAllocation());
    _impl_.processing_error_ = p;
  }
  return _impl_.processing_error_;
}
inline ::google::rpc::ErrorInfo* MigrationSubtask::mutable_processing_error() {
  ::google::rpc::ErrorInfo* _msg = _internal_mutable_processing_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.processing_error)
  return _msg;
}
inline void MigrationSubtask::set_allocated_processing_error(::google::rpc::ErrorInfo* processing_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.processing_error_);
  }
  if (processing_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_error));
    if (message_arena != submessage_arena) {
      processing_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.processing_error_ = processing_error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.processing_error)
}

// repeated .google.cloud.bigquery.migration.v2.ResourceErrorDetail resource_error_details = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int MigrationSubtask::_internal_resource_error_details_size() const {
  return _impl_.resource_error_details_.size();
}
inline int MigrationSubtask::resource_error_details_size() const {
  return _internal_resource_error_details_size();
}
inline ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* MigrationSubtask::mutable_resource_error_details(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_details)
  return _impl_.resource_error_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ResourceErrorDetail >*
MigrationSubtask::mutable_resource_error_details() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_details)
  return &_impl_.resource_error_details_;
}
inline const ::google::cloud::bigquery::migration::v2::ResourceErrorDetail& MigrationSubtask::_internal_resource_error_details(int index) const {
  return _impl_.resource_error_details_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::ResourceErrorDetail& MigrationSubtask::resource_error_details(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_details)
  return _internal_resource_error_details(index);
}
inline ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* MigrationSubtask::_internal_add_resource_error_details() {
  return _impl_.resource_error_details_.Add();
}
inline ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* MigrationSubtask::add_resource_error_details() {
  ::google::cloud::bigquery::migration::v2::ResourceErrorDetail* _add = _internal_add_resource_error_details();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ResourceErrorDetail >&
MigrationSubtask::resource_error_details() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_details)
  return _impl_.resource_error_details_;
}

// int32 resource_error_count = 13;
inline void MigrationSubtask::clear_resource_error_count() {
  _impl_.resource_error_count_ = 0;
}
inline int32_t MigrationSubtask::_internal_resource_error_count() const {
  return _impl_.resource_error_count_;
}
inline int32_t MigrationSubtask::resource_error_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_count)
  return _internal_resource_error_count();
}
inline void MigrationSubtask::_internal_set_resource_error_count(int32_t value) {
  
  _impl_.resource_error_count_ = value;
}
inline void MigrationSubtask::set_resource_error_count(int32_t value) {
  _internal_set_resource_error_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.MigrationSubtask.resource_error_count)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool MigrationSubtask::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool MigrationSubtask::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationSubtask::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationSubtask::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.create_time)
  return _internal_create_time();
}
inline void MigrationSubtask::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.create_time)
  return _msg;
}
inline void MigrationSubtask::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.create_time)
}

// .google.protobuf.Timestamp last_update_time = 8;
inline bool MigrationSubtask::_internal_has_last_update_time() const {
  return this != internal_default_instance() && _impl_.last_update_time_ != nullptr;
}
inline bool MigrationSubtask::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationSubtask::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MigrationSubtask::last_update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.last_update_time)
  return _internal_last_update_time();
}
inline void MigrationSubtask::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::release_last_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.MigrationSubtask.last_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::_internal_mutable_last_update_time() {
  
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MigrationSubtask::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.last_update_time)
  return _msg;
}
inline void MigrationSubtask::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.MigrationSubtask.last_update_time)
}

// repeated .google.cloud.bigquery.migration.v2.TimeSeries metrics = 11;
inline int MigrationSubtask::_internal_metrics_size() const {
  return _impl_.metrics_.size();
}
inline int MigrationSubtask::metrics_size() const {
  return _internal_metrics_size();
}
inline ::google::cloud::bigquery::migration::v2::TimeSeries* MigrationSubtask::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.MigrationSubtask.metrics)
  return _impl_.metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::TimeSeries >*
MigrationSubtask::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.MigrationSubtask.metrics)
  return &_impl_.metrics_;
}
inline const ::google::cloud::bigquery::migration::v2::TimeSeries& MigrationSubtask::_internal_metrics(int index) const {
  return _impl_.metrics_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::TimeSeries& MigrationSubtask::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.MigrationSubtask.metrics)
  return _internal_metrics(index);
}
inline ::google::cloud::bigquery::migration::v2::TimeSeries* MigrationSubtask::_internal_add_metrics() {
  return _impl_.metrics_.Add();
}
inline ::google::cloud::bigquery::migration::v2::TimeSeries* MigrationSubtask::add_metrics() {
  ::google::cloud::bigquery::migration::v2::TimeSeries* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.MigrationSubtask.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::TimeSeries >&
MigrationSubtask::metrics() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.MigrationSubtask.metrics)
  return _impl_.metrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State>() {
  return ::google::cloud::bigquery::migration::v2::MigrationWorkflow_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::migration::v2::MigrationTask_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::migration::v2::MigrationTask_State>() {
  return ::google::cloud::bigquery::migration::v2::MigrationTask_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::migration::v2::MigrationSubtask_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::migration::v2::MigrationSubtask_State>() {
  return ::google::cloud::bigquery::migration::v2::MigrationSubtask_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fentities_2eproto
