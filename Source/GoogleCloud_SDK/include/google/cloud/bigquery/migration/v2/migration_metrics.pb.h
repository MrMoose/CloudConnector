// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/migration/v2/migration_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/distribution.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/metric.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class TimeInterval;
struct TimeIntervalDefaultTypeInternal;
extern TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
class TimeSeries;
struct TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
class TypedValue;
struct TypedValueDefaultTypeInternal;
extern TypedValueDefaultTypeInternal _TypedValue_default_instance_;
}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::migration::v2::Point* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::Point>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::TimeInterval* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TimeInterval>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::TimeSeries* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TimeSeries>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::TypedValue* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TypedValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {

// ===================================================================

class TimeSeries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.TimeSeries) */ {
 public:
  inline TimeSeries() : TimeSeries(nullptr) {}
  ~TimeSeries() override;
  explicit PROTOBUF_CONSTEXPR TimeSeries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSeries(const TimeSeries& from);
  TimeSeries(TimeSeries&& from) noexcept
    : TimeSeries() {
    *this = ::std::move(from);
  }

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeries& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
               &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSeries& a, TimeSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeSeries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeSeries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeSeries& from) {
    TimeSeries::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.TimeSeries";
  }
  protected:
  explicit TimeSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 4,
    kMetricFieldNumber = 1,
    kValueTypeFieldNumber = 2,
    kMetricKindFieldNumber = 3,
  };
  // repeated .google.cloud.bigquery.migration.v2.Point points = 4 [(.google.api.field_behavior) = REQUIRED];
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::google::cloud::bigquery::migration::v2::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::Point >*
      mutable_points();
  private:
  const ::google::cloud::bigquery::migration::v2::Point& _internal_points(int index) const;
  ::google::cloud::bigquery::migration::v2::Point* _internal_add_points();
  public:
  const ::google::cloud::bigquery::migration::v2::Point& points(int index) const;
  ::google::cloud::bigquery::migration::v2::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::Point >&
      points() const;

  // string metric = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // .google.api.MetricDescriptor.ValueType value_type = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_value_type();
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);
  private:
  ::google::api::MetricDescriptor_ValueType _internal_value_type() const;
  void _internal_set_value_type(::google::api::MetricDescriptor_ValueType value);
  public:

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_metric_kind();
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  private:
  ::google::api::MetricDescriptor_MetricKind _internal_metric_kind() const;
  void _internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.TimeSeries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::Point > points_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    int value_type_;
    int metric_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.cloud.bigquery.migration.v2.TimeInterval interval = 1;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::google::cloud::bigquery::migration::v2::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::TimeInterval* release_interval();
  ::google::cloud::bigquery::migration::v2::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::cloud::bigquery::migration::v2::TimeInterval* interval);
  private:
  const ::google::cloud::bigquery::migration::v2::TimeInterval& _internal_interval() const;
  ::google::cloud::bigquery::migration::v2::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::cloud::bigquery::migration::v2::TimeInterval* interval);
  ::google::cloud::bigquery::migration::v2::TimeInterval* unsafe_arena_release_interval();

  // .google.cloud.bigquery.migration.v2.TypedValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::cloud::bigquery::migration::v2::TypedValue& value() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::TypedValue* release_value();
  ::google::cloud::bigquery::migration::v2::TypedValue* mutable_value();
  void set_allocated_value(::google::cloud::bigquery::migration::v2::TypedValue* value);
  private:
  const ::google::cloud::bigquery::migration::v2::TypedValue& _internal_value() const;
  ::google::cloud::bigquery::migration::v2::TypedValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::cloud::bigquery::migration::v2::TypedValue* value);
  ::google::cloud::bigquery::migration::v2::TypedValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::migration::v2::TimeInterval* interval_;
    ::google::cloud::bigquery::migration::v2::TypedValue* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TimeInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.TimeInterval) */ {
 public:
  inline TimeInterval() : TimeInterval(nullptr) {}
  ~TimeInterval() override;
  explicit PROTOBUF_CONSTEXPR TimeInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeInterval(const TimeInterval& from);
  TimeInterval(TimeInterval&& from) noexcept
    : TimeInterval() {
    *this = ::std::move(from);
  }

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeInterval& operator=(TimeInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TimeInterval*>(
               &_TimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeInterval& a, TimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeInterval& from) {
    TimeInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.TimeInterval";
  }
  protected:
  explicit TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_time = 1 [(.google.api.field_behavior) = OPTIONAL];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.TimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class TypedValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.TypedValue) */ {
 public:
  inline TypedValue() : TypedValue(nullptr) {}
  ~TypedValue() override;
  explicit PROTOBUF_CONSTEXPR TypedValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypedValue(const TypedValue& from);
  TypedValue(TypedValue&& from) noexcept
    : TypedValue() {
    *this = ::std::move(from);
  }

  inline TypedValue& operator=(const TypedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedValue& operator=(TypedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypedValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 1,
    kInt64Value = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    kDistributionValue = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const TypedValue* internal_default_instance() {
    return reinterpret_cast<const TypedValue*>(
               &_TypedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TypedValue& a, TypedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypedValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypedValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypedValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TypedValue& from) {
    TypedValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypedValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.TypedValue";
  }
  protected:
  explicit TypedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kDistributionValueFieldNumber = 5,
  };
  // bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .google.api.Distribution distribution_value = 5;
  bool has_distribution_value() const;
  private:
  bool _internal_has_distribution_value() const;
  public:
  void clear_distribution_value();
  const ::google::api::Distribution& distribution_value() const;
  PROTOBUF_NODISCARD ::google::api::Distribution* release_distribution_value();
  ::google::api::Distribution* mutable_distribution_value();
  void set_allocated_distribution_value(::google::api::Distribution* distribution_value);
  private:
  const ::google::api::Distribution& _internal_distribution_value() const;
  ::google::api::Distribution* _internal_mutable_distribution_value();
  public:
  void unsafe_arena_set_allocated_distribution_value(
      ::google::api::Distribution* distribution_value);
  ::google::api::Distribution* unsafe_arena_release_distribution_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.TypedValue)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_distribution_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_value_;
      int64_t int64_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::google::api::Distribution* distribution_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSeries

// string metric = 1 [(.google.api.field_behavior) = REQUIRED];
inline void TimeSeries::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& TimeSeries::metric() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeSeries.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TimeSeries::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TimeSeries.metric)
}
inline std::string* TimeSeries::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TimeSeries.metric)
  return _s;
}
inline const std::string& TimeSeries::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void TimeSeries::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* TimeSeries::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* TimeSeries::release_metric() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TimeSeries.metric)
  return _impl_.metric_.Release();
}
inline void TimeSeries::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TimeSeries.metric)
}

// .google.api.MetricDescriptor.ValueType value_type = 2 [(.google.api.field_behavior) = REQUIRED];
inline void TimeSeries::clear_value_type() {
  _impl_.value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType TimeSeries::_internal_value_type() const {
  return static_cast< ::google::api::MetricDescriptor_ValueType >(_impl_.value_type_);
}
inline ::google::api::MetricDescriptor_ValueType TimeSeries::value_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeSeries.value_type)
  return _internal_value_type();
}
inline void TimeSeries::_internal_set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  _impl_.value_type_ = value;
}
inline void TimeSeries::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TimeSeries.value_type)
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void TimeSeries::clear_metric_kind() {
  _impl_.metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeries::_internal_metric_kind() const {
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(_impl_.metric_kind_);
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeries::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeSeries.metric_kind)
  return _internal_metric_kind();
}
inline void TimeSeries::_internal_set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  _impl_.metric_kind_ = value;
}
inline void TimeSeries::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  _internal_set_metric_kind(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TimeSeries.metric_kind)
}

// repeated .google.cloud.bigquery.migration.v2.Point points = 4 [(.google.api.field_behavior) = REQUIRED];
inline int TimeSeries::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int TimeSeries::points_size() const {
  return _internal_points_size();
}
inline void TimeSeries::clear_points() {
  _impl_.points_.Clear();
}
inline ::google::cloud::bigquery::migration::v2::Point* TimeSeries::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TimeSeries.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::Point >*
TimeSeries::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.TimeSeries.points)
  return &_impl_.points_;
}
inline const ::google::cloud::bigquery::migration::v2::Point& TimeSeries::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::Point& TimeSeries::points(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeSeries.points)
  return _internal_points(index);
}
inline ::google::cloud::bigquery::migration::v2::Point* TimeSeries::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::google::cloud::bigquery::migration::v2::Point* TimeSeries::add_points() {
  ::google::cloud::bigquery::migration::v2::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.TimeSeries.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::Point >&
TimeSeries::points() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.TimeSeries.points)
  return _impl_.points_;
}

// -------------------------------------------------------------------

// Point

// .google.cloud.bigquery.migration.v2.TimeInterval interval = 1;
inline bool Point::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool Point::has_interval() const {
  return _internal_has_interval();
}
inline void Point::clear_interval() {
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::TimeInterval& Point::_internal_interval() const {
  const ::google::cloud::bigquery::migration::v2::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::TimeInterval&>(
      ::google::cloud::bigquery::migration::v2::_TimeInterval_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::TimeInterval& Point::interval() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Point.interval)
  return _internal_interval();
}
inline void Point::unsafe_arena_set_allocated_interval(
    ::google::cloud::bigquery::migration::v2::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Point.interval)
}
inline ::google::cloud::bigquery::migration::v2::TimeInterval* Point::release_interval() {
  
  ::google::cloud::bigquery::migration::v2::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::TimeInterval* Point::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Point.interval)
  
  ::google::cloud::bigquery::migration::v2::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::TimeInterval* Point::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::cloud::bigquery::migration::v2::TimeInterval* Point::mutable_interval() {
  ::google::cloud::bigquery::migration::v2::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Point.interval)
  return _msg;
}
inline void Point::set_allocated_interval(::google::cloud::bigquery::migration::v2::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.interval_;
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.Point.interval)
}

// .google.cloud.bigquery.migration.v2.TypedValue value = 2;
inline bool Point::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool Point::has_value() const {
  return _internal_has_value();
}
inline void Point::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::TypedValue& Point::_internal_value() const {
  const ::google::cloud::bigquery::migration::v2::TypedValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::TypedValue&>(
      ::google::cloud::bigquery::migration::v2::_TypedValue_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::TypedValue& Point::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Point.value)
  return _internal_value();
}
inline void Point::unsafe_arena_set_allocated_value(
    ::google::cloud::bigquery::migration::v2::TypedValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Point.value)
}
inline ::google::cloud::bigquery::migration::v2::TypedValue* Point::release_value() {
  
  ::google::cloud::bigquery::migration::v2::TypedValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::TypedValue* Point::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Point.value)
  
  ::google::cloud::bigquery::migration::v2::TypedValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::TypedValue* Point::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TypedValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::google::cloud::bigquery::migration::v2::TypedValue* Point::mutable_value() {
  ::google::cloud::bigquery::migration::v2::TypedValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Point.value)
  return _msg;
}
inline void Point::set_allocated_value(::google::cloud::bigquery::migration::v2::TypedValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.Point.value)
}

// -------------------------------------------------------------------

// TimeInterval

// .google.protobuf.Timestamp start_time = 1 [(.google.api.field_behavior) = OPTIONAL];
inline bool TimeInterval::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool TimeInterval::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeInterval::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeInterval::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeInterval.start_time)
  return _internal_start_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TimeInterval.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TimeInterval.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TimeInterval.start_time)
  return _msg;
}
inline void TimeInterval::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TimeInterval.start_time)
}

// .google.protobuf.Timestamp end_time = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool TimeInterval::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool TimeInterval::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeInterval::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeInterval::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TimeInterval.end_time)
  return _internal_end_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TimeInterval.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TimeInterval.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeInterval::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TimeInterval.end_time)
  return _msg;
}
inline void TimeInterval::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TimeInterval.end_time)
}

// -------------------------------------------------------------------

// TypedValue

// bool bool_value = 1;
inline bool TypedValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool TypedValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void TypedValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void TypedValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool TypedValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void TypedValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool TypedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TypedValue.bool_value)
  return _internal_bool_value();
}
inline void TypedValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TypedValue.bool_value)
}

// int64 int64_value = 2;
inline bool TypedValue::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool TypedValue::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void TypedValue::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void TypedValue::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t TypedValue::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.value_.int64_value_;
  }
  return int64_t{0};
}
inline void TypedValue::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
}
inline int64_t TypedValue::int64_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TypedValue.int64_value)
  return _internal_int64_value();
}
inline void TypedValue::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TypedValue.int64_value)
}

// double double_value = 3;
inline bool TypedValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool TypedValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void TypedValue::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void TypedValue::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double TypedValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void TypedValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double TypedValue::double_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TypedValue.double_value)
  return _internal_double_value();
}
inline void TypedValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TypedValue.double_value)
}

// string string_value = 4;
inline bool TypedValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool TypedValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void TypedValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void TypedValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& TypedValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TypedValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TypedValue.string_value)
}
inline std::string* TypedValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TypedValue.string_value)
  return _s;
}
inline const std::string& TypedValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* TypedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TypedValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TypedValue.string_value)
}

// .google.api.Distribution distribution_value = 5;
inline bool TypedValue::_internal_has_distribution_value() const {
  return value_case() == kDistributionValue;
}
inline bool TypedValue::has_distribution_value() const {
  return _internal_has_distribution_value();
}
inline void TypedValue::set_has_distribution_value() {
  _impl_._oneof_case_[0] = kDistributionValue;
}
inline ::google::api::Distribution* TypedValue::release_distribution_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TypedValue.distribution_value)
  if (_internal_has_distribution_value()) {
    clear_has_value();
    ::google::api::Distribution* temp = _impl_.value_.distribution_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.distribution_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::Distribution& TypedValue::_internal_distribution_value() const {
  return _internal_has_distribution_value()
      ? *_impl_.value_.distribution_value_
      : reinterpret_cast< ::google::api::Distribution&>(::google::api::_Distribution_default_instance_);
}
inline const ::google::api::Distribution& TypedValue::distribution_value() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TypedValue.distribution_value)
  return _internal_distribution_value();
}
inline ::google::api::Distribution* TypedValue::unsafe_arena_release_distribution_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.TypedValue.distribution_value)
  if (_internal_has_distribution_value()) {
    clear_has_value();
    ::google::api::Distribution* temp = _impl_.value_.distribution_value_;
    _impl_.value_.distribution_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValue::unsafe_arena_set_allocated_distribution_value(::google::api::Distribution* distribution_value) {
  clear_value();
  if (distribution_value) {
    set_has_distribution_value();
    _impl_.value_.distribution_value_ = distribution_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TypedValue.distribution_value)
}
inline ::google::api::Distribution* TypedValue::_internal_mutable_distribution_value() {
  if (!_internal_has_distribution_value()) {
    clear_value();
    set_has_distribution_value();
    _impl_.value_.distribution_value_ = CreateMaybeMessage< ::google::api::Distribution >(GetArenaForAllocation());
  }
  return _impl_.value_.distribution_value_;
}
inline ::google::api::Distribution* TypedValue::mutable_distribution_value() {
  ::google::api::Distribution* _msg = _internal_mutable_distribution_value();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TypedValue.distribution_value)
  return _msg;
}

inline bool TypedValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypedValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline TypedValue::ValueCase TypedValue::value_case() const {
  return TypedValue::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fmetrics_2eproto
