// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/migration/v2/translation_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {
class AzureSynapseDialect;
struct AzureSynapseDialectDefaultTypeInternal;
extern AzureSynapseDialectDefaultTypeInternal _AzureSynapseDialect_default_instance_;
class BigQueryDialect;
struct BigQueryDialectDefaultTypeInternal;
extern BigQueryDialectDefaultTypeInternal _BigQueryDialect_default_instance_;
class Dialect;
struct DialectDefaultTypeInternal;
extern DialectDefaultTypeInternal _Dialect_default_instance_;
class HiveQLDialect;
struct HiveQLDialectDefaultTypeInternal;
extern HiveQLDialectDefaultTypeInternal _HiveQLDialect_default_instance_;
class MySQLDialect;
struct MySQLDialectDefaultTypeInternal;
extern MySQLDialectDefaultTypeInternal _MySQLDialect_default_instance_;
class NameMappingKey;
struct NameMappingKeyDefaultTypeInternal;
extern NameMappingKeyDefaultTypeInternal _NameMappingKey_default_instance_;
class NameMappingValue;
struct NameMappingValueDefaultTypeInternal;
extern NameMappingValueDefaultTypeInternal _NameMappingValue_default_instance_;
class NetezzaDialect;
struct NetezzaDialectDefaultTypeInternal;
extern NetezzaDialectDefaultTypeInternal _NetezzaDialect_default_instance_;
class ObjectNameMapping;
struct ObjectNameMappingDefaultTypeInternal;
extern ObjectNameMappingDefaultTypeInternal _ObjectNameMapping_default_instance_;
class ObjectNameMappingList;
struct ObjectNameMappingListDefaultTypeInternal;
extern ObjectNameMappingListDefaultTypeInternal _ObjectNameMappingList_default_instance_;
class OracleDialect;
struct OracleDialectDefaultTypeInternal;
extern OracleDialectDefaultTypeInternal _OracleDialect_default_instance_;
class PostgresqlDialect;
struct PostgresqlDialectDefaultTypeInternal;
extern PostgresqlDialectDefaultTypeInternal _PostgresqlDialect_default_instance_;
class PrestoDialect;
struct PrestoDialectDefaultTypeInternal;
extern PrestoDialectDefaultTypeInternal _PrestoDialect_default_instance_;
class RedshiftDialect;
struct RedshiftDialectDefaultTypeInternal;
extern RedshiftDialectDefaultTypeInternal _RedshiftDialect_default_instance_;
class SQLServerDialect;
struct SQLServerDialectDefaultTypeInternal;
extern SQLServerDialectDefaultTypeInternal _SQLServerDialect_default_instance_;
class SnowflakeDialect;
struct SnowflakeDialectDefaultTypeInternal;
extern SnowflakeDialectDefaultTypeInternal _SnowflakeDialect_default_instance_;
class SourceEnv;
struct SourceEnvDefaultTypeInternal;
extern SourceEnvDefaultTypeInternal _SourceEnv_default_instance_;
class SparkSQLDialect;
struct SparkSQLDialectDefaultTypeInternal;
extern SparkSQLDialectDefaultTypeInternal _SparkSQLDialect_default_instance_;
class TeradataDialect;
struct TeradataDialectDefaultTypeInternal;
extern TeradataDialectDefaultTypeInternal _TeradataDialect_default_instance_;
class TranslationConfigDetails;
struct TranslationConfigDetailsDefaultTypeInternal;
extern TranslationConfigDetailsDefaultTypeInternal _TranslationConfigDetails_default_instance_;
class VerticaDialect;
struct VerticaDialectDefaultTypeInternal;
extern VerticaDialectDefaultTypeInternal _VerticaDialect_default_instance_;
}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::AzureSynapseDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::BigQueryDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::BigQueryDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::Dialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::Dialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::HiveQLDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::HiveQLDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::MySQLDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MySQLDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::NameMappingKey* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::NameMappingKey>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::NameMappingValue* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::NameMappingValue>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::NetezzaDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::NetezzaDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ObjectNameMapping* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ObjectNameMapping>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ObjectNameMappingList>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::OracleDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::OracleDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::PostgresqlDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::PostgresqlDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::PrestoDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::PrestoDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::RedshiftDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::RedshiftDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::SQLServerDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::SQLServerDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::SnowflakeDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::SnowflakeDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::SourceEnv* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::SourceEnv>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::SparkSQLDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::SparkSQLDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::TeradataDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TeradataDialect>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::TranslationConfigDetails* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::TranslationConfigDetails>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::VerticaDialect* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::VerticaDialect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {

enum TeradataDialect_Mode : int {
  TeradataDialect_Mode_MODE_UNSPECIFIED = 0,
  TeradataDialect_Mode_SQL = 1,
  TeradataDialect_Mode_BTEQ = 2,
  TeradataDialect_Mode_TeradataDialect_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TeradataDialect_Mode_TeradataDialect_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TeradataDialect_Mode_IsValid(int value);
constexpr TeradataDialect_Mode TeradataDialect_Mode_Mode_MIN = TeradataDialect_Mode_MODE_UNSPECIFIED;
constexpr TeradataDialect_Mode TeradataDialect_Mode_Mode_MAX = TeradataDialect_Mode_BTEQ;
constexpr int TeradataDialect_Mode_Mode_ARRAYSIZE = TeradataDialect_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeradataDialect_Mode_descriptor();
template<typename T>
inline const std::string& TeradataDialect_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeradataDialect_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeradataDialect_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeradataDialect_Mode_descriptor(), enum_t_value);
}
inline bool TeradataDialect_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeradataDialect_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeradataDialect_Mode>(
    TeradataDialect_Mode_descriptor(), name, value);
}
enum NameMappingKey_Type : int {
  NameMappingKey_Type_TYPE_UNSPECIFIED = 0,
  NameMappingKey_Type_DATABASE = 1,
  NameMappingKey_Type_SCHEMA = 2,
  NameMappingKey_Type_RELATION = 3,
  NameMappingKey_Type_ATTRIBUTE = 4,
  NameMappingKey_Type_RELATION_ALIAS = 5,
  NameMappingKey_Type_ATTRIBUTE_ALIAS = 6,
  NameMappingKey_Type_FUNCTION = 7,
  NameMappingKey_Type_NameMappingKey_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NameMappingKey_Type_NameMappingKey_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NameMappingKey_Type_IsValid(int value);
constexpr NameMappingKey_Type NameMappingKey_Type_Type_MIN = NameMappingKey_Type_TYPE_UNSPECIFIED;
constexpr NameMappingKey_Type NameMappingKey_Type_Type_MAX = NameMappingKey_Type_FUNCTION;
constexpr int NameMappingKey_Type_Type_ARRAYSIZE = NameMappingKey_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameMappingKey_Type_descriptor();
template<typename T>
inline const std::string& NameMappingKey_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NameMappingKey_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NameMappingKey_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NameMappingKey_Type_descriptor(), enum_t_value);
}
inline bool NameMappingKey_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NameMappingKey_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NameMappingKey_Type>(
    NameMappingKey_Type_descriptor(), name, value);
}
// ===================================================================

class TranslationConfigDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.TranslationConfigDetails) */ {
 public:
  inline TranslationConfigDetails() : TranslationConfigDetails(nullptr) {}
  ~TranslationConfigDetails() override;
  explicit PROTOBUF_CONSTEXPR TranslationConfigDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationConfigDetails(const TranslationConfigDetails& from);
  TranslationConfigDetails(TranslationConfigDetails&& from) noexcept
    : TranslationConfigDetails() {
    *this = ::std::move(from);
  }

  inline TranslationConfigDetails& operator=(const TranslationConfigDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationConfigDetails& operator=(TranslationConfigDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationConfigDetails& default_instance() {
    return *internal_default_instance();
  }
  enum SourceLocationCase {
    kGcsSourcePath = 1,
    SOURCE_LOCATION_NOT_SET = 0,
  };

  enum TargetLocationCase {
    kGcsTargetPath = 2,
    TARGET_LOCATION_NOT_SET = 0,
  };

  enum OutputNameMappingCase {
    kNameMappingList = 5,
    OUTPUT_NAME_MAPPING_NOT_SET = 0,
  };

  static inline const TranslationConfigDetails* internal_default_instance() {
    return reinterpret_cast<const TranslationConfigDetails*>(
               &_TranslationConfigDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslationConfigDetails& a, TranslationConfigDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationConfigDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationConfigDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationConfigDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationConfigDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationConfigDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TranslationConfigDetails& from) {
    TranslationConfigDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationConfigDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.TranslationConfigDetails";
  }
  protected:
  explicit TranslationConfigDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceDialectFieldNumber = 3,
    kTargetDialectFieldNumber = 4,
    kSourceEnvFieldNumber = 6,
    kGcsSourcePathFieldNumber = 1,
    kGcsTargetPathFieldNumber = 2,
    kNameMappingListFieldNumber = 5,
  };
  // .google.cloud.bigquery.migration.v2.Dialect source_dialect = 3;
  bool has_source_dialect() const;
  private:
  bool _internal_has_source_dialect() const;
  public:
  void clear_source_dialect();
  const ::google::cloud::bigquery::migration::v2::Dialect& source_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::Dialect* release_source_dialect();
  ::google::cloud::bigquery::migration::v2::Dialect* mutable_source_dialect();
  void set_allocated_source_dialect(::google::cloud::bigquery::migration::v2::Dialect* source_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::Dialect& _internal_source_dialect() const;
  ::google::cloud::bigquery::migration::v2::Dialect* _internal_mutable_source_dialect();
  public:
  void unsafe_arena_set_allocated_source_dialect(
      ::google::cloud::bigquery::migration::v2::Dialect* source_dialect);
  ::google::cloud::bigquery::migration::v2::Dialect* unsafe_arena_release_source_dialect();

  // .google.cloud.bigquery.migration.v2.Dialect target_dialect = 4;
  bool has_target_dialect() const;
  private:
  bool _internal_has_target_dialect() const;
  public:
  void clear_target_dialect();
  const ::google::cloud::bigquery::migration::v2::Dialect& target_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::Dialect* release_target_dialect();
  ::google::cloud::bigquery::migration::v2::Dialect* mutable_target_dialect();
  void set_allocated_target_dialect(::google::cloud::bigquery::migration::v2::Dialect* target_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::Dialect& _internal_target_dialect() const;
  ::google::cloud::bigquery::migration::v2::Dialect* _internal_mutable_target_dialect();
  public:
  void unsafe_arena_set_allocated_target_dialect(
      ::google::cloud::bigquery::migration::v2::Dialect* target_dialect);
  ::google::cloud::bigquery::migration::v2::Dialect* unsafe_arena_release_target_dialect();

  // .google.cloud.bigquery.migration.v2.SourceEnv source_env = 6;
  bool has_source_env() const;
  private:
  bool _internal_has_source_env() const;
  public:
  void clear_source_env();
  const ::google::cloud::bigquery::migration::v2::SourceEnv& source_env() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::SourceEnv* release_source_env();
  ::google::cloud::bigquery::migration::v2::SourceEnv* mutable_source_env();
  void set_allocated_source_env(::google::cloud::bigquery::migration::v2::SourceEnv* source_env);
  private:
  const ::google::cloud::bigquery::migration::v2::SourceEnv& _internal_source_env() const;
  ::google::cloud::bigquery::migration::v2::SourceEnv* _internal_mutable_source_env();
  public:
  void unsafe_arena_set_allocated_source_env(
      ::google::cloud::bigquery::migration::v2::SourceEnv* source_env);
  ::google::cloud::bigquery::migration::v2::SourceEnv* unsafe_arena_release_source_env();

  // string gcs_source_path = 1;
  bool has_gcs_source_path() const;
  private:
  bool _internal_has_gcs_source_path() const;
  public:
  void clear_gcs_source_path();
  const std::string& gcs_source_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gcs_source_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gcs_source_path();
  PROTOBUF_NODISCARD std::string* release_gcs_source_path();
  void set_allocated_gcs_source_path(std::string* gcs_source_path);
  private:
  const std::string& _internal_gcs_source_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcs_source_path(const std::string& value);
  std::string* _internal_mutable_gcs_source_path();
  public:

  // string gcs_target_path = 2;
  bool has_gcs_target_path() const;
  private:
  bool _internal_has_gcs_target_path() const;
  public:
  void clear_gcs_target_path();
  const std::string& gcs_target_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gcs_target_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gcs_target_path();
  PROTOBUF_NODISCARD std::string* release_gcs_target_path();
  void set_allocated_gcs_target_path(std::string* gcs_target_path);
  private:
  const std::string& _internal_gcs_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcs_target_path(const std::string& value);
  std::string* _internal_mutable_gcs_target_path();
  public:

  // .google.cloud.bigquery.migration.v2.ObjectNameMappingList name_mapping_list = 5;
  bool has_name_mapping_list() const;
  private:
  bool _internal_has_name_mapping_list() const;
  public:
  void clear_name_mapping_list();
  const ::google::cloud::bigquery::migration::v2::ObjectNameMappingList& name_mapping_list() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* release_name_mapping_list();
  ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* mutable_name_mapping_list();
  void set_allocated_name_mapping_list(::google::cloud::bigquery::migration::v2::ObjectNameMappingList* name_mapping_list);
  private:
  const ::google::cloud::bigquery::migration::v2::ObjectNameMappingList& _internal_name_mapping_list() const;
  ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* _internal_mutable_name_mapping_list();
  public:
  void unsafe_arena_set_allocated_name_mapping_list(
      ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* name_mapping_list);
  ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* unsafe_arena_release_name_mapping_list();

  void clear_source_location();
  SourceLocationCase source_location_case() const;
  void clear_target_location();
  TargetLocationCase target_location_case() const;
  void clear_output_name_mapping();
  OutputNameMappingCase output_name_mapping_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.TranslationConfigDetails)
 private:
  class _Internal;
  void set_has_gcs_source_path();
  void set_has_gcs_target_path();
  void set_has_name_mapping_list();

  inline bool has_source_location() const;
  inline void clear_has_source_location();

  inline bool has_target_location() const;
  inline void clear_has_target_location();

  inline bool has_output_name_mapping() const;
  inline void clear_has_output_name_mapping();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::migration::v2::Dialect* source_dialect_;
    ::google::cloud::bigquery::migration::v2::Dialect* target_dialect_;
    ::google::cloud::bigquery::migration::v2::SourceEnv* source_env_;
    union SourceLocationUnion {
      constexpr SourceLocationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcs_source_path_;
    } source_location_;
    union TargetLocationUnion {
      constexpr TargetLocationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcs_target_path_;
    } target_location_;
    union OutputNameMappingUnion {
      constexpr OutputNameMappingUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* name_mapping_list_;
    } output_name_mapping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Dialect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.Dialect) */ {
 public:
  inline Dialect() : Dialect(nullptr) {}
  ~Dialect() override;
  explicit PROTOBUF_CONSTEXPR Dialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dialect(const Dialect& from);
  Dialect(Dialect&& from) noexcept
    : Dialect() {
    *this = ::std::move(from);
  }

  inline Dialect& operator=(const Dialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dialect& operator=(Dialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dialect& default_instance() {
    return *internal_default_instance();
  }
  enum DialectValueCase {
    kBigqueryDialect = 1,
    kHiveqlDialect = 2,
    kRedshiftDialect = 3,
    kTeradataDialect = 4,
    kOracleDialect = 5,
    kSparksqlDialect = 6,
    kSnowflakeDialect = 7,
    kNetezzaDialect = 8,
    kAzureSynapseDialect = 9,
    kVerticaDialect = 10,
    kSqlServerDialect = 11,
    kPostgresqlDialect = 12,
    kPrestoDialect = 13,
    kMysqlDialect = 14,
    DIALECT_VALUE_NOT_SET = 0,
  };

  static inline const Dialect* internal_default_instance() {
    return reinterpret_cast<const Dialect*>(
               &_Dialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dialect& a, Dialect& b) {
    a.Swap(&b);
  }
  inline void Swap(Dialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dialect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dialect& from) {
    Dialect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dialect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.Dialect";
  }
  protected:
  explicit Dialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBigqueryDialectFieldNumber = 1,
    kHiveqlDialectFieldNumber = 2,
    kRedshiftDialectFieldNumber = 3,
    kTeradataDialectFieldNumber = 4,
    kOracleDialectFieldNumber = 5,
    kSparksqlDialectFieldNumber = 6,
    kSnowflakeDialectFieldNumber = 7,
    kNetezzaDialectFieldNumber = 8,
    kAzureSynapseDialectFieldNumber = 9,
    kVerticaDialectFieldNumber = 10,
    kSqlServerDialectFieldNumber = 11,
    kPostgresqlDialectFieldNumber = 12,
    kPrestoDialectFieldNumber = 13,
    kMysqlDialectFieldNumber = 14,
  };
  // .google.cloud.bigquery.migration.v2.BigQueryDialect bigquery_dialect = 1;
  bool has_bigquery_dialect() const;
  private:
  bool _internal_has_bigquery_dialect() const;
  public:
  void clear_bigquery_dialect();
  const ::google::cloud::bigquery::migration::v2::BigQueryDialect& bigquery_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::BigQueryDialect* release_bigquery_dialect();
  ::google::cloud::bigquery::migration::v2::BigQueryDialect* mutable_bigquery_dialect();
  void set_allocated_bigquery_dialect(::google::cloud::bigquery::migration::v2::BigQueryDialect* bigquery_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::BigQueryDialect& _internal_bigquery_dialect() const;
  ::google::cloud::bigquery::migration::v2::BigQueryDialect* _internal_mutable_bigquery_dialect();
  public:
  void unsafe_arena_set_allocated_bigquery_dialect(
      ::google::cloud::bigquery::migration::v2::BigQueryDialect* bigquery_dialect);
  ::google::cloud::bigquery::migration::v2::BigQueryDialect* unsafe_arena_release_bigquery_dialect();

  // .google.cloud.bigquery.migration.v2.HiveQLDialect hiveql_dialect = 2;
  bool has_hiveql_dialect() const;
  private:
  bool _internal_has_hiveql_dialect() const;
  public:
  void clear_hiveql_dialect();
  const ::google::cloud::bigquery::migration::v2::HiveQLDialect& hiveql_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::HiveQLDialect* release_hiveql_dialect();
  ::google::cloud::bigquery::migration::v2::HiveQLDialect* mutable_hiveql_dialect();
  void set_allocated_hiveql_dialect(::google::cloud::bigquery::migration::v2::HiveQLDialect* hiveql_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::HiveQLDialect& _internal_hiveql_dialect() const;
  ::google::cloud::bigquery::migration::v2::HiveQLDialect* _internal_mutable_hiveql_dialect();
  public:
  void unsafe_arena_set_allocated_hiveql_dialect(
      ::google::cloud::bigquery::migration::v2::HiveQLDialect* hiveql_dialect);
  ::google::cloud::bigquery::migration::v2::HiveQLDialect* unsafe_arena_release_hiveql_dialect();

  // .google.cloud.bigquery.migration.v2.RedshiftDialect redshift_dialect = 3;
  bool has_redshift_dialect() const;
  private:
  bool _internal_has_redshift_dialect() const;
  public:
  void clear_redshift_dialect();
  const ::google::cloud::bigquery::migration::v2::RedshiftDialect& redshift_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::RedshiftDialect* release_redshift_dialect();
  ::google::cloud::bigquery::migration::v2::RedshiftDialect* mutable_redshift_dialect();
  void set_allocated_redshift_dialect(::google::cloud::bigquery::migration::v2::RedshiftDialect* redshift_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::RedshiftDialect& _internal_redshift_dialect() const;
  ::google::cloud::bigquery::migration::v2::RedshiftDialect* _internal_mutable_redshift_dialect();
  public:
  void unsafe_arena_set_allocated_redshift_dialect(
      ::google::cloud::bigquery::migration::v2::RedshiftDialect* redshift_dialect);
  ::google::cloud::bigquery::migration::v2::RedshiftDialect* unsafe_arena_release_redshift_dialect();

  // .google.cloud.bigquery.migration.v2.TeradataDialect teradata_dialect = 4;
  bool has_teradata_dialect() const;
  private:
  bool _internal_has_teradata_dialect() const;
  public:
  void clear_teradata_dialect();
  const ::google::cloud::bigquery::migration::v2::TeradataDialect& teradata_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::TeradataDialect* release_teradata_dialect();
  ::google::cloud::bigquery::migration::v2::TeradataDialect* mutable_teradata_dialect();
  void set_allocated_teradata_dialect(::google::cloud::bigquery::migration::v2::TeradataDialect* teradata_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::TeradataDialect& _internal_teradata_dialect() const;
  ::google::cloud::bigquery::migration::v2::TeradataDialect* _internal_mutable_teradata_dialect();
  public:
  void unsafe_arena_set_allocated_teradata_dialect(
      ::google::cloud::bigquery::migration::v2::TeradataDialect* teradata_dialect);
  ::google::cloud::bigquery::migration::v2::TeradataDialect* unsafe_arena_release_teradata_dialect();

  // .google.cloud.bigquery.migration.v2.OracleDialect oracle_dialect = 5;
  bool has_oracle_dialect() const;
  private:
  bool _internal_has_oracle_dialect() const;
  public:
  void clear_oracle_dialect();
  const ::google::cloud::bigquery::migration::v2::OracleDialect& oracle_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::OracleDialect* release_oracle_dialect();
  ::google::cloud::bigquery::migration::v2::OracleDialect* mutable_oracle_dialect();
  void set_allocated_oracle_dialect(::google::cloud::bigquery::migration::v2::OracleDialect* oracle_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::OracleDialect& _internal_oracle_dialect() const;
  ::google::cloud::bigquery::migration::v2::OracleDialect* _internal_mutable_oracle_dialect();
  public:
  void unsafe_arena_set_allocated_oracle_dialect(
      ::google::cloud::bigquery::migration::v2::OracleDialect* oracle_dialect);
  ::google::cloud::bigquery::migration::v2::OracleDialect* unsafe_arena_release_oracle_dialect();

  // .google.cloud.bigquery.migration.v2.SparkSQLDialect sparksql_dialect = 6;
  bool has_sparksql_dialect() const;
  private:
  bool _internal_has_sparksql_dialect() const;
  public:
  void clear_sparksql_dialect();
  const ::google::cloud::bigquery::migration::v2::SparkSQLDialect& sparksql_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::SparkSQLDialect* release_sparksql_dialect();
  ::google::cloud::bigquery::migration::v2::SparkSQLDialect* mutable_sparksql_dialect();
  void set_allocated_sparksql_dialect(::google::cloud::bigquery::migration::v2::SparkSQLDialect* sparksql_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::SparkSQLDialect& _internal_sparksql_dialect() const;
  ::google::cloud::bigquery::migration::v2::SparkSQLDialect* _internal_mutable_sparksql_dialect();
  public:
  void unsafe_arena_set_allocated_sparksql_dialect(
      ::google::cloud::bigquery::migration::v2::SparkSQLDialect* sparksql_dialect);
  ::google::cloud::bigquery::migration::v2::SparkSQLDialect* unsafe_arena_release_sparksql_dialect();

  // .google.cloud.bigquery.migration.v2.SnowflakeDialect snowflake_dialect = 7;
  bool has_snowflake_dialect() const;
  private:
  bool _internal_has_snowflake_dialect() const;
  public:
  void clear_snowflake_dialect();
  const ::google::cloud::bigquery::migration::v2::SnowflakeDialect& snowflake_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::SnowflakeDialect* release_snowflake_dialect();
  ::google::cloud::bigquery::migration::v2::SnowflakeDialect* mutable_snowflake_dialect();
  void set_allocated_snowflake_dialect(::google::cloud::bigquery::migration::v2::SnowflakeDialect* snowflake_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::SnowflakeDialect& _internal_snowflake_dialect() const;
  ::google::cloud::bigquery::migration::v2::SnowflakeDialect* _internal_mutable_snowflake_dialect();
  public:
  void unsafe_arena_set_allocated_snowflake_dialect(
      ::google::cloud::bigquery::migration::v2::SnowflakeDialect* snowflake_dialect);
  ::google::cloud::bigquery::migration::v2::SnowflakeDialect* unsafe_arena_release_snowflake_dialect();

  // .google.cloud.bigquery.migration.v2.NetezzaDialect netezza_dialect = 8;
  bool has_netezza_dialect() const;
  private:
  bool _internal_has_netezza_dialect() const;
  public:
  void clear_netezza_dialect();
  const ::google::cloud::bigquery::migration::v2::NetezzaDialect& netezza_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::NetezzaDialect* release_netezza_dialect();
  ::google::cloud::bigquery::migration::v2::NetezzaDialect* mutable_netezza_dialect();
  void set_allocated_netezza_dialect(::google::cloud::bigquery::migration::v2::NetezzaDialect* netezza_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::NetezzaDialect& _internal_netezza_dialect() const;
  ::google::cloud::bigquery::migration::v2::NetezzaDialect* _internal_mutable_netezza_dialect();
  public:
  void unsafe_arena_set_allocated_netezza_dialect(
      ::google::cloud::bigquery::migration::v2::NetezzaDialect* netezza_dialect);
  ::google::cloud::bigquery::migration::v2::NetezzaDialect* unsafe_arena_release_netezza_dialect();

  // .google.cloud.bigquery.migration.v2.AzureSynapseDialect azure_synapse_dialect = 9;
  bool has_azure_synapse_dialect() const;
  private:
  bool _internal_has_azure_synapse_dialect() const;
  public:
  void clear_azure_synapse_dialect();
  const ::google::cloud::bigquery::migration::v2::AzureSynapseDialect& azure_synapse_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* release_azure_synapse_dialect();
  ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* mutable_azure_synapse_dialect();
  void set_allocated_azure_synapse_dialect(::google::cloud::bigquery::migration::v2::AzureSynapseDialect* azure_synapse_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::AzureSynapseDialect& _internal_azure_synapse_dialect() const;
  ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* _internal_mutable_azure_synapse_dialect();
  public:
  void unsafe_arena_set_allocated_azure_synapse_dialect(
      ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* azure_synapse_dialect);
  ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* unsafe_arena_release_azure_synapse_dialect();

  // .google.cloud.bigquery.migration.v2.VerticaDialect vertica_dialect = 10;
  bool has_vertica_dialect() const;
  private:
  bool _internal_has_vertica_dialect() const;
  public:
  void clear_vertica_dialect();
  const ::google::cloud::bigquery::migration::v2::VerticaDialect& vertica_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::VerticaDialect* release_vertica_dialect();
  ::google::cloud::bigquery::migration::v2::VerticaDialect* mutable_vertica_dialect();
  void set_allocated_vertica_dialect(::google::cloud::bigquery::migration::v2::VerticaDialect* vertica_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::VerticaDialect& _internal_vertica_dialect() const;
  ::google::cloud::bigquery::migration::v2::VerticaDialect* _internal_mutable_vertica_dialect();
  public:
  void unsafe_arena_set_allocated_vertica_dialect(
      ::google::cloud::bigquery::migration::v2::VerticaDialect* vertica_dialect);
  ::google::cloud::bigquery::migration::v2::VerticaDialect* unsafe_arena_release_vertica_dialect();

  // .google.cloud.bigquery.migration.v2.SQLServerDialect sql_server_dialect = 11;
  bool has_sql_server_dialect() const;
  private:
  bool _internal_has_sql_server_dialect() const;
  public:
  void clear_sql_server_dialect();
  const ::google::cloud::bigquery::migration::v2::SQLServerDialect& sql_server_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::SQLServerDialect* release_sql_server_dialect();
  ::google::cloud::bigquery::migration::v2::SQLServerDialect* mutable_sql_server_dialect();
  void set_allocated_sql_server_dialect(::google::cloud::bigquery::migration::v2::SQLServerDialect* sql_server_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::SQLServerDialect& _internal_sql_server_dialect() const;
  ::google::cloud::bigquery::migration::v2::SQLServerDialect* _internal_mutable_sql_server_dialect();
  public:
  void unsafe_arena_set_allocated_sql_server_dialect(
      ::google::cloud::bigquery::migration::v2::SQLServerDialect* sql_server_dialect);
  ::google::cloud::bigquery::migration::v2::SQLServerDialect* unsafe_arena_release_sql_server_dialect();

  // .google.cloud.bigquery.migration.v2.PostgresqlDialect postgresql_dialect = 12;
  bool has_postgresql_dialect() const;
  private:
  bool _internal_has_postgresql_dialect() const;
  public:
  void clear_postgresql_dialect();
  const ::google::cloud::bigquery::migration::v2::PostgresqlDialect& postgresql_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::PostgresqlDialect* release_postgresql_dialect();
  ::google::cloud::bigquery::migration::v2::PostgresqlDialect* mutable_postgresql_dialect();
  void set_allocated_postgresql_dialect(::google::cloud::bigquery::migration::v2::PostgresqlDialect* postgresql_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::PostgresqlDialect& _internal_postgresql_dialect() const;
  ::google::cloud::bigquery::migration::v2::PostgresqlDialect* _internal_mutable_postgresql_dialect();
  public:
  void unsafe_arena_set_allocated_postgresql_dialect(
      ::google::cloud::bigquery::migration::v2::PostgresqlDialect* postgresql_dialect);
  ::google::cloud::bigquery::migration::v2::PostgresqlDialect* unsafe_arena_release_postgresql_dialect();

  // .google.cloud.bigquery.migration.v2.PrestoDialect presto_dialect = 13;
  bool has_presto_dialect() const;
  private:
  bool _internal_has_presto_dialect() const;
  public:
  void clear_presto_dialect();
  const ::google::cloud::bigquery::migration::v2::PrestoDialect& presto_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::PrestoDialect* release_presto_dialect();
  ::google::cloud::bigquery::migration::v2::PrestoDialect* mutable_presto_dialect();
  void set_allocated_presto_dialect(::google::cloud::bigquery::migration::v2::PrestoDialect* presto_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::PrestoDialect& _internal_presto_dialect() const;
  ::google::cloud::bigquery::migration::v2::PrestoDialect* _internal_mutable_presto_dialect();
  public:
  void unsafe_arena_set_allocated_presto_dialect(
      ::google::cloud::bigquery::migration::v2::PrestoDialect* presto_dialect);
  ::google::cloud::bigquery::migration::v2::PrestoDialect* unsafe_arena_release_presto_dialect();

  // .google.cloud.bigquery.migration.v2.MySQLDialect mysql_dialect = 14;
  bool has_mysql_dialect() const;
  private:
  bool _internal_has_mysql_dialect() const;
  public:
  void clear_mysql_dialect();
  const ::google::cloud::bigquery::migration::v2::MySQLDialect& mysql_dialect() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::MySQLDialect* release_mysql_dialect();
  ::google::cloud::bigquery::migration::v2::MySQLDialect* mutable_mysql_dialect();
  void set_allocated_mysql_dialect(::google::cloud::bigquery::migration::v2::MySQLDialect* mysql_dialect);
  private:
  const ::google::cloud::bigquery::migration::v2::MySQLDialect& _internal_mysql_dialect() const;
  ::google::cloud::bigquery::migration::v2::MySQLDialect* _internal_mutable_mysql_dialect();
  public:
  void unsafe_arena_set_allocated_mysql_dialect(
      ::google::cloud::bigquery::migration::v2::MySQLDialect* mysql_dialect);
  ::google::cloud::bigquery::migration::v2::MySQLDialect* unsafe_arena_release_mysql_dialect();

  void clear_dialect_value();
  DialectValueCase dialect_value_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.Dialect)
 private:
  class _Internal;
  void set_has_bigquery_dialect();
  void set_has_hiveql_dialect();
  void set_has_redshift_dialect();
  void set_has_teradata_dialect();
  void set_has_oracle_dialect();
  void set_has_sparksql_dialect();
  void set_has_snowflake_dialect();
  void set_has_netezza_dialect();
  void set_has_azure_synapse_dialect();
  void set_has_vertica_dialect();
  void set_has_sql_server_dialect();
  void set_has_postgresql_dialect();
  void set_has_presto_dialect();
  void set_has_mysql_dialect();

  inline bool has_dialect_value() const;
  inline void clear_has_dialect_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DialectValueUnion {
      constexpr DialectValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::migration::v2::BigQueryDialect* bigquery_dialect_;
      ::google::cloud::bigquery::migration::v2::HiveQLDialect* hiveql_dialect_;
      ::google::cloud::bigquery::migration::v2::RedshiftDialect* redshift_dialect_;
      ::google::cloud::bigquery::migration::v2::TeradataDialect* teradata_dialect_;
      ::google::cloud::bigquery::migration::v2::OracleDialect* oracle_dialect_;
      ::google::cloud::bigquery::migration::v2::SparkSQLDialect* sparksql_dialect_;
      ::google::cloud::bigquery::migration::v2::SnowflakeDialect* snowflake_dialect_;
      ::google::cloud::bigquery::migration::v2::NetezzaDialect* netezza_dialect_;
      ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* azure_synapse_dialect_;
      ::google::cloud::bigquery::migration::v2::VerticaDialect* vertica_dialect_;
      ::google::cloud::bigquery::migration::v2::SQLServerDialect* sql_server_dialect_;
      ::google::cloud::bigquery::migration::v2::PostgresqlDialect* postgresql_dialect_;
      ::google::cloud::bigquery::migration::v2::PrestoDialect* presto_dialect_;
      ::google::cloud::bigquery::migration::v2::MySQLDialect* mysql_dialect_;
    } dialect_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class BigQueryDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.BigQueryDialect) */ {
 public:
  inline BigQueryDialect() : BigQueryDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BigQueryDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryDialect(const BigQueryDialect& from);
  BigQueryDialect(BigQueryDialect&& from) noexcept
    : BigQueryDialect() {
    *this = ::std::move(from);
  }

  inline BigQueryDialect& operator=(const BigQueryDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryDialect& operator=(BigQueryDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryDialect* internal_default_instance() {
    return reinterpret_cast<const BigQueryDialect*>(
               &_BigQueryDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BigQueryDialect& a, BigQueryDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BigQueryDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BigQueryDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.BigQueryDialect";
  }
  protected:
  explicit BigQueryDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.BigQueryDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class HiveQLDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.HiveQLDialect) */ {
 public:
  inline HiveQLDialect() : HiveQLDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HiveQLDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiveQLDialect(const HiveQLDialect& from);
  HiveQLDialect(HiveQLDialect&& from) noexcept
    : HiveQLDialect() {
    *this = ::std::move(from);
  }

  inline HiveQLDialect& operator=(const HiveQLDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiveQLDialect& operator=(HiveQLDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiveQLDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiveQLDialect* internal_default_instance() {
    return reinterpret_cast<const HiveQLDialect*>(
               &_HiveQLDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HiveQLDialect& a, HiveQLDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(HiveQLDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiveQLDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HiveQLDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HiveQLDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HiveQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HiveQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.HiveQLDialect";
  }
  protected:
  explicit HiveQLDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.HiveQLDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RedshiftDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.RedshiftDialect) */ {
 public:
  inline RedshiftDialect() : RedshiftDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RedshiftDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedshiftDialect(const RedshiftDialect& from);
  RedshiftDialect(RedshiftDialect&& from) noexcept
    : RedshiftDialect() {
    *this = ::std::move(from);
  }

  inline RedshiftDialect& operator=(const RedshiftDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedshiftDialect& operator=(RedshiftDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedshiftDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedshiftDialect* internal_default_instance() {
    return reinterpret_cast<const RedshiftDialect*>(
               &_RedshiftDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RedshiftDialect& a, RedshiftDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(RedshiftDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedshiftDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedshiftDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedshiftDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RedshiftDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RedshiftDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.RedshiftDialect";
  }
  protected:
  explicit RedshiftDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.RedshiftDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TeradataDialect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.TeradataDialect) */ {
 public:
  inline TeradataDialect() : TeradataDialect(nullptr) {}
  ~TeradataDialect() override;
  explicit PROTOBUF_CONSTEXPR TeradataDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeradataDialect(const TeradataDialect& from);
  TeradataDialect(TeradataDialect&& from) noexcept
    : TeradataDialect() {
    *this = ::std::move(from);
  }

  inline TeradataDialect& operator=(const TeradataDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeradataDialect& operator=(TeradataDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeradataDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeradataDialect* internal_default_instance() {
    return reinterpret_cast<const TeradataDialect*>(
               &_TeradataDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TeradataDialect& a, TeradataDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(TeradataDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeradataDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeradataDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeradataDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeradataDialect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeradataDialect& from) {
    TeradataDialect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeradataDialect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.TeradataDialect";
  }
  protected:
  explicit TeradataDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TeradataDialect_Mode Mode;
  static constexpr Mode MODE_UNSPECIFIED =
    TeradataDialect_Mode_MODE_UNSPECIFIED;
  static constexpr Mode SQL =
    TeradataDialect_Mode_SQL;
  static constexpr Mode BTEQ =
    TeradataDialect_Mode_BTEQ;
  static inline bool Mode_IsValid(int value) {
    return TeradataDialect_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    TeradataDialect_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    TeradataDialect_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    TeradataDialect_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return TeradataDialect_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return TeradataDialect_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return TeradataDialect_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .google.cloud.bigquery.migration.v2.TeradataDialect.Mode mode = 1;
  void clear_mode();
  ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode mode() const;
  void set_mode(::google::cloud::bigquery::migration::v2::TeradataDialect_Mode value);
  private:
  ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode _internal_mode() const;
  void _internal_set_mode(::google::cloud::bigquery::migration::v2::TeradataDialect_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.TeradataDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OracleDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.OracleDialect) */ {
 public:
  inline OracleDialect() : OracleDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR OracleDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OracleDialect(const OracleDialect& from);
  OracleDialect(OracleDialect&& from) noexcept
    : OracleDialect() {
    *this = ::std::move(from);
  }

  inline OracleDialect& operator=(const OracleDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleDialect& operator=(OracleDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OracleDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const OracleDialect* internal_default_instance() {
    return reinterpret_cast<const OracleDialect*>(
               &_OracleDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OracleDialect& a, OracleDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OracleDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OracleDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OracleDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OracleDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.OracleDialect";
  }
  protected:
  explicit OracleDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.OracleDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SparkSQLDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.SparkSQLDialect) */ {
 public:
  inline SparkSQLDialect() : SparkSQLDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SparkSQLDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparkSQLDialect(const SparkSQLDialect& from);
  SparkSQLDialect(SparkSQLDialect&& from) noexcept
    : SparkSQLDialect() {
    *this = ::std::move(from);
  }

  inline SparkSQLDialect& operator=(const SparkSQLDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparkSQLDialect& operator=(SparkSQLDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparkSQLDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparkSQLDialect* internal_default_instance() {
    return reinterpret_cast<const SparkSQLDialect*>(
               &_SparkSQLDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SparkSQLDialect& a, SparkSQLDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(SparkSQLDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparkSQLDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparkSQLDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparkSQLDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SparkSQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SparkSQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.SparkSQLDialect";
  }
  protected:
  explicit SparkSQLDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.SparkSQLDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SnowflakeDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.SnowflakeDialect) */ {
 public:
  inline SnowflakeDialect() : SnowflakeDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SnowflakeDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnowflakeDialect(const SnowflakeDialect& from);
  SnowflakeDialect(SnowflakeDialect&& from) noexcept
    : SnowflakeDialect() {
    *this = ::std::move(from);
  }

  inline SnowflakeDialect& operator=(const SnowflakeDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnowflakeDialect& operator=(SnowflakeDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnowflakeDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnowflakeDialect* internal_default_instance() {
    return reinterpret_cast<const SnowflakeDialect*>(
               &_SnowflakeDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SnowflakeDialect& a, SnowflakeDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(SnowflakeDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnowflakeDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnowflakeDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnowflakeDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SnowflakeDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SnowflakeDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.SnowflakeDialect";
  }
  protected:
  explicit SnowflakeDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.SnowflakeDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NetezzaDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.NetezzaDialect) */ {
 public:
  inline NetezzaDialect() : NetezzaDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NetezzaDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetezzaDialect(const NetezzaDialect& from);
  NetezzaDialect(NetezzaDialect&& from) noexcept
    : NetezzaDialect() {
    *this = ::std::move(from);
  }

  inline NetezzaDialect& operator=(const NetezzaDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetezzaDialect& operator=(NetezzaDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetezzaDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetezzaDialect* internal_default_instance() {
    return reinterpret_cast<const NetezzaDialect*>(
               &_NetezzaDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetezzaDialect& a, NetezzaDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetezzaDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetezzaDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetezzaDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetezzaDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NetezzaDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NetezzaDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.NetezzaDialect";
  }
  protected:
  explicit NetezzaDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.NetezzaDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AzureSynapseDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.AzureSynapseDialect) */ {
 public:
  inline AzureSynapseDialect() : AzureSynapseDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AzureSynapseDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AzureSynapseDialect(const AzureSynapseDialect& from);
  AzureSynapseDialect(AzureSynapseDialect&& from) noexcept
    : AzureSynapseDialect() {
    *this = ::std::move(from);
  }

  inline AzureSynapseDialect& operator=(const AzureSynapseDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline AzureSynapseDialect& operator=(AzureSynapseDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AzureSynapseDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const AzureSynapseDialect* internal_default_instance() {
    return reinterpret_cast<const AzureSynapseDialect*>(
               &_AzureSynapseDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AzureSynapseDialect& a, AzureSynapseDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(AzureSynapseDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AzureSynapseDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AzureSynapseDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AzureSynapseDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AzureSynapseDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AzureSynapseDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.AzureSynapseDialect";
  }
  protected:
  explicit AzureSynapseDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.AzureSynapseDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VerticaDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.VerticaDialect) */ {
 public:
  inline VerticaDialect() : VerticaDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR VerticaDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerticaDialect(const VerticaDialect& from);
  VerticaDialect(VerticaDialect&& from) noexcept
    : VerticaDialect() {
    *this = ::std::move(from);
  }

  inline VerticaDialect& operator=(const VerticaDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerticaDialect& operator=(VerticaDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerticaDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerticaDialect* internal_default_instance() {
    return reinterpret_cast<const VerticaDialect*>(
               &_VerticaDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VerticaDialect& a, VerticaDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(VerticaDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerticaDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerticaDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerticaDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VerticaDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VerticaDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.VerticaDialect";
  }
  protected:
  explicit VerticaDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.VerticaDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SQLServerDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.SQLServerDialect) */ {
 public:
  inline SQLServerDialect() : SQLServerDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SQLServerDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SQLServerDialect(const SQLServerDialect& from);
  SQLServerDialect(SQLServerDialect&& from) noexcept
    : SQLServerDialect() {
    *this = ::std::move(from);
  }

  inline SQLServerDialect& operator=(const SQLServerDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQLServerDialect& operator=(SQLServerDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SQLServerDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SQLServerDialect* internal_default_instance() {
    return reinterpret_cast<const SQLServerDialect*>(
               &_SQLServerDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SQLServerDialect& a, SQLServerDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(SQLServerDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQLServerDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SQLServerDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SQLServerDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SQLServerDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SQLServerDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.SQLServerDialect";
  }
  protected:
  explicit SQLServerDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.SQLServerDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PostgresqlDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.PostgresqlDialect) */ {
 public:
  inline PostgresqlDialect() : PostgresqlDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PostgresqlDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostgresqlDialect(const PostgresqlDialect& from);
  PostgresqlDialect(PostgresqlDialect&& from) noexcept
    : PostgresqlDialect() {
    *this = ::std::move(from);
  }

  inline PostgresqlDialect& operator=(const PostgresqlDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostgresqlDialect& operator=(PostgresqlDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostgresqlDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostgresqlDialect* internal_default_instance() {
    return reinterpret_cast<const PostgresqlDialect*>(
               &_PostgresqlDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PostgresqlDialect& a, PostgresqlDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(PostgresqlDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostgresqlDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostgresqlDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostgresqlDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PostgresqlDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PostgresqlDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.PostgresqlDialect";
  }
  protected:
  explicit PostgresqlDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.PostgresqlDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PrestoDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.PrestoDialect) */ {
 public:
  inline PrestoDialect() : PrestoDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PrestoDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrestoDialect(const PrestoDialect& from);
  PrestoDialect(PrestoDialect&& from) noexcept
    : PrestoDialect() {
    *this = ::std::move(from);
  }

  inline PrestoDialect& operator=(const PrestoDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrestoDialect& operator=(PrestoDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrestoDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrestoDialect* internal_default_instance() {
    return reinterpret_cast<const PrestoDialect*>(
               &_PrestoDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PrestoDialect& a, PrestoDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(PrestoDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrestoDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrestoDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrestoDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PrestoDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PrestoDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.PrestoDialect";
  }
  protected:
  explicit PrestoDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.PrestoDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MySQLDialect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.MySQLDialect) */ {
 public:
  inline MySQLDialect() : MySQLDialect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MySQLDialect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MySQLDialect(const MySQLDialect& from);
  MySQLDialect(MySQLDialect&& from) noexcept
    : MySQLDialect() {
    *this = ::std::move(from);
  }

  inline MySQLDialect& operator=(const MySQLDialect& from) {
    CopyFrom(from);
    return *this;
  }
  inline MySQLDialect& operator=(MySQLDialect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MySQLDialect& default_instance() {
    return *internal_default_instance();
  }
  static inline const MySQLDialect* internal_default_instance() {
    return reinterpret_cast<const MySQLDialect*>(
               &_MySQLDialect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MySQLDialect& a, MySQLDialect& b) {
    a.Swap(&b);
  }
  inline void Swap(MySQLDialect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MySQLDialect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MySQLDialect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MySQLDialect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MySQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MySQLDialect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.MySQLDialect";
  }
  protected:
  explicit MySQLDialect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.MySQLDialect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ObjectNameMappingList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ObjectNameMappingList) */ {
 public:
  inline ObjectNameMappingList() : ObjectNameMappingList(nullptr) {}
  ~ObjectNameMappingList() override;
  explicit PROTOBUF_CONSTEXPR ObjectNameMappingList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectNameMappingList(const ObjectNameMappingList& from);
  ObjectNameMappingList(ObjectNameMappingList&& from) noexcept
    : ObjectNameMappingList() {
    *this = ::std::move(from);
  }

  inline ObjectNameMappingList& operator=(const ObjectNameMappingList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectNameMappingList& operator=(ObjectNameMappingList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectNameMappingList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectNameMappingList* internal_default_instance() {
    return reinterpret_cast<const ObjectNameMappingList*>(
               &_ObjectNameMappingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ObjectNameMappingList& a, ObjectNameMappingList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectNameMappingList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectNameMappingList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectNameMappingList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectNameMappingList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectNameMappingList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectNameMappingList& from) {
    ObjectNameMappingList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectNameMappingList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ObjectNameMappingList";
  }
  protected:
  explicit ObjectNameMappingList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameMapFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.migration.v2.ObjectNameMapping name_map = 1;
  int name_map_size() const;
  private:
  int _internal_name_map_size() const;
  public:
  void clear_name_map();
  ::google::cloud::bigquery::migration::v2::ObjectNameMapping* mutable_name_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ObjectNameMapping >*
      mutable_name_map();
  private:
  const ::google::cloud::bigquery::migration::v2::ObjectNameMapping& _internal_name_map(int index) const;
  ::google::cloud::bigquery::migration::v2::ObjectNameMapping* _internal_add_name_map();
  public:
  const ::google::cloud::bigquery::migration::v2::ObjectNameMapping& name_map(int index) const;
  ::google::cloud::bigquery::migration::v2::ObjectNameMapping* add_name_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ObjectNameMapping >&
      name_map() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ObjectNameMappingList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ObjectNameMapping > name_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ObjectNameMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ObjectNameMapping) */ {
 public:
  inline ObjectNameMapping() : ObjectNameMapping(nullptr) {}
  ~ObjectNameMapping() override;
  explicit PROTOBUF_CONSTEXPR ObjectNameMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectNameMapping(const ObjectNameMapping& from);
  ObjectNameMapping(ObjectNameMapping&& from) noexcept
    : ObjectNameMapping() {
    *this = ::std::move(from);
  }

  inline ObjectNameMapping& operator=(const ObjectNameMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectNameMapping& operator=(ObjectNameMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectNameMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectNameMapping* internal_default_instance() {
    return reinterpret_cast<const ObjectNameMapping*>(
               &_ObjectNameMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjectNameMapping& a, ObjectNameMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectNameMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectNameMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectNameMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectNameMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectNameMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectNameMapping& from) {
    ObjectNameMapping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectNameMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ObjectNameMapping";
  }
  protected:
  explicit ObjectNameMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // .google.cloud.bigquery.migration.v2.NameMappingKey source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::google::cloud::bigquery::migration::v2::NameMappingKey& source() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::NameMappingKey* release_source();
  ::google::cloud::bigquery::migration::v2::NameMappingKey* mutable_source();
  void set_allocated_source(::google::cloud::bigquery::migration::v2::NameMappingKey* source);
  private:
  const ::google::cloud::bigquery::migration::v2::NameMappingKey& _internal_source() const;
  ::google::cloud::bigquery::migration::v2::NameMappingKey* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::google::cloud::bigquery::migration::v2::NameMappingKey* source);
  ::google::cloud::bigquery::migration::v2::NameMappingKey* unsafe_arena_release_source();

  // .google.cloud.bigquery.migration.v2.NameMappingValue target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::google::cloud::bigquery::migration::v2::NameMappingValue& target() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::NameMappingValue* release_target();
  ::google::cloud::bigquery::migration::v2::NameMappingValue* mutable_target();
  void set_allocated_target(::google::cloud::bigquery::migration::v2::NameMappingValue* target);
  private:
  const ::google::cloud::bigquery::migration::v2::NameMappingValue& _internal_target() const;
  ::google::cloud::bigquery::migration::v2::NameMappingValue* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::google::cloud::bigquery::migration::v2::NameMappingValue* target);
  ::google::cloud::bigquery::migration::v2::NameMappingValue* unsafe_arena_release_target();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ObjectNameMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::migration::v2::NameMappingKey* source_;
    ::google::cloud::bigquery::migration::v2::NameMappingValue* target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NameMappingKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.NameMappingKey) */ {
 public:
  inline NameMappingKey() : NameMappingKey(nullptr) {}
  ~NameMappingKey() override;
  explicit PROTOBUF_CONSTEXPR NameMappingKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NameMappingKey(const NameMappingKey& from);
  NameMappingKey(NameMappingKey&& from) noexcept
    : NameMappingKey() {
    *this = ::std::move(from);
  }

  inline NameMappingKey& operator=(const NameMappingKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameMappingKey& operator=(NameMappingKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameMappingKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameMappingKey* internal_default_instance() {
    return reinterpret_cast<const NameMappingKey*>(
               &_NameMappingKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NameMappingKey& a, NameMappingKey& b) {
    a.Swap(&b);
  }
  inline void Swap(NameMappingKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameMappingKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameMappingKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NameMappingKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NameMappingKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NameMappingKey& from) {
    NameMappingKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameMappingKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.NameMappingKey";
  }
  protected:
  explicit NameMappingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NameMappingKey_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    NameMappingKey_Type_TYPE_UNSPECIFIED;
  static constexpr Type DATABASE =
    NameMappingKey_Type_DATABASE;
  static constexpr Type SCHEMA =
    NameMappingKey_Type_SCHEMA;
  static constexpr Type RELATION =
    NameMappingKey_Type_RELATION;
  static constexpr Type ATTRIBUTE =
    NameMappingKey_Type_ATTRIBUTE;
  static constexpr Type RELATION_ALIAS =
    NameMappingKey_Type_RELATION_ALIAS;
  static constexpr Type ATTRIBUTE_ALIAS =
    NameMappingKey_Type_ATTRIBUTE_ALIAS;
  static constexpr Type FUNCTION =
    NameMappingKey_Type_FUNCTION;
  static inline bool Type_IsValid(int value) {
    return NameMappingKey_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    NameMappingKey_Type_Type_MIN;
  static constexpr Type Type_MAX =
    NameMappingKey_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    NameMappingKey_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return NameMappingKey_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return NameMappingKey_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return NameMappingKey_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 2,
    kSchemaFieldNumber = 3,
    kRelationFieldNumber = 4,
    kAttributeFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string database = 2;
  void clear_database();
  const std::string& database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database();
  PROTOBUF_NODISCARD std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string schema = 3;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // string relation = 4;
  void clear_relation();
  const std::string& relation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relation();
  PROTOBUF_NODISCARD std::string* release_relation();
  void set_allocated_relation(std::string* relation);
  private:
  const std::string& _internal_relation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relation(const std::string& value);
  std::string* _internal_mutable_relation();
  public:

  // string attribute = 5;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_NODISCARD std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // .google.cloud.bigquery.migration.v2.NameMappingKey.Type type = 1;
  void clear_type();
  ::google::cloud::bigquery::migration::v2::NameMappingKey_Type type() const;
  void set_type(::google::cloud::bigquery::migration::v2::NameMappingKey_Type value);
  private:
  ::google::cloud::bigquery::migration::v2::NameMappingKey_Type _internal_type() const;
  void _internal_set_type(::google::cloud::bigquery::migration::v2::NameMappingKey_Type value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.NameMappingKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NameMappingValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.NameMappingValue) */ {
 public:
  inline NameMappingValue() : NameMappingValue(nullptr) {}
  ~NameMappingValue() override;
  explicit PROTOBUF_CONSTEXPR NameMappingValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NameMappingValue(const NameMappingValue& from);
  NameMappingValue(NameMappingValue&& from) noexcept
    : NameMappingValue() {
    *this = ::std::move(from);
  }

  inline NameMappingValue& operator=(const NameMappingValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameMappingValue& operator=(NameMappingValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameMappingValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameMappingValue* internal_default_instance() {
    return reinterpret_cast<const NameMappingValue*>(
               &_NameMappingValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(NameMappingValue& a, NameMappingValue& b) {
    a.Swap(&b);
  }
  inline void Swap(NameMappingValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameMappingValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameMappingValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NameMappingValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NameMappingValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NameMappingValue& from) {
    NameMappingValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameMappingValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.NameMappingValue";
  }
  protected:
  explicit NameMappingValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kSchemaFieldNumber = 2,
    kRelationFieldNumber = 3,
    kAttributeFieldNumber = 4,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database();
  PROTOBUF_NODISCARD std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string schema = 2;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // string relation = 3;
  void clear_relation();
  const std::string& relation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relation();
  PROTOBUF_NODISCARD std::string* release_relation();
  void set_allocated_relation(std::string* relation);
  private:
  const std::string& _internal_relation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relation(const std::string& value);
  std::string* _internal_mutable_relation();
  public:

  // string attribute = 4;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_NODISCARD std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.NameMappingValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SourceEnv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.SourceEnv) */ {
 public:
  inline SourceEnv() : SourceEnv(nullptr) {}
  ~SourceEnv() override;
  explicit PROTOBUF_CONSTEXPR SourceEnv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceEnv(const SourceEnv& from);
  SourceEnv(SourceEnv&& from) noexcept
    : SourceEnv() {
    *this = ::std::move(from);
  }

  inline SourceEnv& operator=(const SourceEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceEnv& operator=(SourceEnv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceEnv& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceEnv* internal_default_instance() {
    return reinterpret_cast<const SourceEnv*>(
               &_SourceEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SourceEnv& a, SourceEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceEnv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceEnv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceEnv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceEnv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceEnv& from) {
    SourceEnv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceEnv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.SourceEnv";
  }
  protected:
  explicit SourceEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaSearchPathFieldNumber = 2,
    kDefaultDatabaseFieldNumber = 1,
  };
  // repeated string schema_search_path = 2;
  int schema_search_path_size() const;
  private:
  int _internal_schema_search_path_size() const;
  public:
  void clear_schema_search_path();
  const std::string& schema_search_path(int index) const;
  std::string* mutable_schema_search_path(int index);
  void set_schema_search_path(int index, const std::string& value);
  void set_schema_search_path(int index, std::string&& value);
  void set_schema_search_path(int index, const char* value);
  void set_schema_search_path(int index, const char* value, size_t size);
  std::string* add_schema_search_path();
  void add_schema_search_path(const std::string& value);
  void add_schema_search_path(std::string&& value);
  void add_schema_search_path(const char* value);
  void add_schema_search_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& schema_search_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_schema_search_path();
  private:
  const std::string& _internal_schema_search_path(int index) const;
  std::string* _internal_add_schema_search_path();
  public:

  // string default_database = 1;
  void clear_default_database();
  const std::string& default_database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_database();
  PROTOBUF_NODISCARD std::string* release_default_database();
  void set_allocated_default_database(std::string* default_database);
  private:
  const std::string& _internal_default_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_database(const std::string& value);
  std::string* _internal_mutable_default_database();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.SourceEnv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> schema_search_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_database_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslationConfigDetails

// string gcs_source_path = 1;
inline bool TranslationConfigDetails::_internal_has_gcs_source_path() const {
  return source_location_case() == kGcsSourcePath;
}
inline bool TranslationConfigDetails::has_gcs_source_path() const {
  return _internal_has_gcs_source_path();
}
inline void TranslationConfigDetails::set_has_gcs_source_path() {
  _impl_._oneof_case_[0] = kGcsSourcePath;
}
inline void TranslationConfigDetails::clear_gcs_source_path() {
  if (_internal_has_gcs_source_path()) {
    _impl_.source_location_.gcs_source_path_.Destroy();
    clear_has_source_location();
  }
}
inline const std::string& TranslationConfigDetails::gcs_source_path() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_source_path)
  return _internal_gcs_source_path();
}
template <typename ArgT0, typename... ArgT>
inline void TranslationConfigDetails::set_gcs_source_path(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_gcs_source_path()) {
    clear_source_location();
    set_has_gcs_source_path();
    _impl_.source_location_.gcs_source_path_.InitDefault();
  }
  _impl_.source_location_.gcs_source_path_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_source_path)
}
inline std::string* TranslationConfigDetails::mutable_gcs_source_path() {
  std::string* _s = _internal_mutable_gcs_source_path();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_source_path)
  return _s;
}
inline const std::string& TranslationConfigDetails::_internal_gcs_source_path() const {
  if (_internal_has_gcs_source_path()) {
    return _impl_.source_location_.gcs_source_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TranslationConfigDetails::_internal_set_gcs_source_path(const std::string& value) {
  if (!_internal_has_gcs_source_path()) {
    clear_source_location();
    set_has_gcs_source_path();
    _impl_.source_location_.gcs_source_path_.InitDefault();
  }
  _impl_.source_location_.gcs_source_path_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslationConfigDetails::_internal_mutable_gcs_source_path() {
  if (!_internal_has_gcs_source_path()) {
    clear_source_location();
    set_has_gcs_source_path();
    _impl_.source_location_.gcs_source_path_.InitDefault();
  }
  return _impl_.source_location_.gcs_source_path_.Mutable(      GetArenaForAllocation());
}
inline std::string* TranslationConfigDetails::release_gcs_source_path() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_source_path)
  if (_internal_has_gcs_source_path()) {
    clear_has_source_location();
    return _impl_.source_location_.gcs_source_path_.Release();
  } else {
    return nullptr;
  }
}
inline void TranslationConfigDetails::set_allocated_gcs_source_path(std::string* gcs_source_path) {
  if (has_source_location()) {
    clear_source_location();
  }
  if (gcs_source_path != nullptr) {
    set_has_gcs_source_path();
    _impl_.source_location_.gcs_source_path_.InitAllocated(gcs_source_path, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_source_path)
}

// string gcs_target_path = 2;
inline bool TranslationConfigDetails::_internal_has_gcs_target_path() const {
  return target_location_case() == kGcsTargetPath;
}
inline bool TranslationConfigDetails::has_gcs_target_path() const {
  return _internal_has_gcs_target_path();
}
inline void TranslationConfigDetails::set_has_gcs_target_path() {
  _impl_._oneof_case_[1] = kGcsTargetPath;
}
inline void TranslationConfigDetails::clear_gcs_target_path() {
  if (_internal_has_gcs_target_path()) {
    _impl_.target_location_.gcs_target_path_.Destroy();
    clear_has_target_location();
  }
}
inline const std::string& TranslationConfigDetails::gcs_target_path() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_target_path)
  return _internal_gcs_target_path();
}
template <typename ArgT0, typename... ArgT>
inline void TranslationConfigDetails::set_gcs_target_path(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_gcs_target_path()) {
    clear_target_location();
    set_has_gcs_target_path();
    _impl_.target_location_.gcs_target_path_.InitDefault();
  }
  _impl_.target_location_.gcs_target_path_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_target_path)
}
inline std::string* TranslationConfigDetails::mutable_gcs_target_path() {
  std::string* _s = _internal_mutable_gcs_target_path();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_target_path)
  return _s;
}
inline const std::string& TranslationConfigDetails::_internal_gcs_target_path() const {
  if (_internal_has_gcs_target_path()) {
    return _impl_.target_location_.gcs_target_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TranslationConfigDetails::_internal_set_gcs_target_path(const std::string& value) {
  if (!_internal_has_gcs_target_path()) {
    clear_target_location();
    set_has_gcs_target_path();
    _impl_.target_location_.gcs_target_path_.InitDefault();
  }
  _impl_.target_location_.gcs_target_path_.Set(value, GetArenaForAllocation());
}
inline std::string* TranslationConfigDetails::_internal_mutable_gcs_target_path() {
  if (!_internal_has_gcs_target_path()) {
    clear_target_location();
    set_has_gcs_target_path();
    _impl_.target_location_.gcs_target_path_.InitDefault();
  }
  return _impl_.target_location_.gcs_target_path_.Mutable(      GetArenaForAllocation());
}
inline std::string* TranslationConfigDetails::release_gcs_target_path() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_target_path)
  if (_internal_has_gcs_target_path()) {
    clear_has_target_location();
    return _impl_.target_location_.gcs_target_path_.Release();
  } else {
    return nullptr;
  }
}
inline void TranslationConfigDetails::set_allocated_gcs_target_path(std::string* gcs_target_path) {
  if (has_target_location()) {
    clear_target_location();
  }
  if (gcs_target_path != nullptr) {
    set_has_gcs_target_path();
    _impl_.target_location_.gcs_target_path_.InitAllocated(gcs_target_path, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.gcs_target_path)
}

// .google.cloud.bigquery.migration.v2.Dialect source_dialect = 3;
inline bool TranslationConfigDetails::_internal_has_source_dialect() const {
  return this != internal_default_instance() && _impl_.source_dialect_ != nullptr;
}
inline bool TranslationConfigDetails::has_source_dialect() const {
  return _internal_has_source_dialect();
}
inline void TranslationConfigDetails::clear_source_dialect() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_dialect_ != nullptr) {
    delete _impl_.source_dialect_;
  }
  _impl_.source_dialect_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::Dialect& TranslationConfigDetails::_internal_source_dialect() const {
  const ::google::cloud::bigquery::migration::v2::Dialect* p = _impl_.source_dialect_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::Dialect&>(
      ::google::cloud::bigquery::migration::v2::_Dialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::Dialect& TranslationConfigDetails::source_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_dialect)
  return _internal_source_dialect();
}
inline void TranslationConfigDetails::unsafe_arena_set_allocated_source_dialect(
    ::google::cloud::bigquery::migration::v2::Dialect* source_dialect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_dialect_);
  }
  _impl_.source_dialect_ = source_dialect;
  if (source_dialect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_dialect)
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::release_source_dialect() {
  
  ::google::cloud::bigquery::migration::v2::Dialect* temp = _impl_.source_dialect_;
  _impl_.source_dialect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::unsafe_arena_release_source_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_dialect)
  
  ::google::cloud::bigquery::migration::v2::Dialect* temp = _impl_.source_dialect_;
  _impl_.source_dialect_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::_internal_mutable_source_dialect() {
  
  if (_impl_.source_dialect_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::Dialect>(GetArenaForAllocation());
    _impl_.source_dialect_ = p;
  }
  return _impl_.source_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::mutable_source_dialect() {
  ::google::cloud::bigquery::migration::v2::Dialect* _msg = _internal_mutable_source_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_dialect)
  return _msg;
}
inline void TranslationConfigDetails::set_allocated_source_dialect(::google::cloud::bigquery::migration::v2::Dialect* source_dialect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_dialect_;
  }
  if (source_dialect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_dialect);
    if (message_arena != submessage_arena) {
      source_dialect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_dialect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_dialect_ = source_dialect;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_dialect)
}

// .google.cloud.bigquery.migration.v2.Dialect target_dialect = 4;
inline bool TranslationConfigDetails::_internal_has_target_dialect() const {
  return this != internal_default_instance() && _impl_.target_dialect_ != nullptr;
}
inline bool TranslationConfigDetails::has_target_dialect() const {
  return _internal_has_target_dialect();
}
inline void TranslationConfigDetails::clear_target_dialect() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_dialect_ != nullptr) {
    delete _impl_.target_dialect_;
  }
  _impl_.target_dialect_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::Dialect& TranslationConfigDetails::_internal_target_dialect() const {
  const ::google::cloud::bigquery::migration::v2::Dialect* p = _impl_.target_dialect_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::Dialect&>(
      ::google::cloud::bigquery::migration::v2::_Dialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::Dialect& TranslationConfigDetails::target_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_dialect)
  return _internal_target_dialect();
}
inline void TranslationConfigDetails::unsafe_arena_set_allocated_target_dialect(
    ::google::cloud::bigquery::migration::v2::Dialect* target_dialect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_dialect_);
  }
  _impl_.target_dialect_ = target_dialect;
  if (target_dialect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_dialect)
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::release_target_dialect() {
  
  ::google::cloud::bigquery::migration::v2::Dialect* temp = _impl_.target_dialect_;
  _impl_.target_dialect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::unsafe_arena_release_target_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_dialect)
  
  ::google::cloud::bigquery::migration::v2::Dialect* temp = _impl_.target_dialect_;
  _impl_.target_dialect_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::_internal_mutable_target_dialect() {
  
  if (_impl_.target_dialect_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::Dialect>(GetArenaForAllocation());
    _impl_.target_dialect_ = p;
  }
  return _impl_.target_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::Dialect* TranslationConfigDetails::mutable_target_dialect() {
  ::google::cloud::bigquery::migration::v2::Dialect* _msg = _internal_mutable_target_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_dialect)
  return _msg;
}
inline void TranslationConfigDetails::set_allocated_target_dialect(::google::cloud::bigquery::migration::v2::Dialect* target_dialect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_dialect_;
  }
  if (target_dialect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_dialect);
    if (message_arena != submessage_arena) {
      target_dialect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_dialect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_dialect_ = target_dialect;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_dialect)
}

// .google.cloud.bigquery.migration.v2.ObjectNameMappingList name_mapping_list = 5;
inline bool TranslationConfigDetails::_internal_has_name_mapping_list() const {
  return output_name_mapping_case() == kNameMappingList;
}
inline bool TranslationConfigDetails::has_name_mapping_list() const {
  return _internal_has_name_mapping_list();
}
inline void TranslationConfigDetails::set_has_name_mapping_list() {
  _impl_._oneof_case_[2] = kNameMappingList;
}
inline void TranslationConfigDetails::clear_name_mapping_list() {
  if (_internal_has_name_mapping_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.output_name_mapping_.name_mapping_list_;
    }
    clear_has_output_name_mapping();
  }
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* TranslationConfigDetails::release_name_mapping_list() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.name_mapping_list)
  if (_internal_has_name_mapping_list()) {
    clear_has_output_name_mapping();
    ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* temp = _impl_.output_name_mapping_.name_mapping_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.output_name_mapping_.name_mapping_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::ObjectNameMappingList& TranslationConfigDetails::_internal_name_mapping_list() const {
  return _internal_has_name_mapping_list()
      ? *_impl_.output_name_mapping_.name_mapping_list_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::ObjectNameMappingList&>(::google::cloud::bigquery::migration::v2::_ObjectNameMappingList_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::ObjectNameMappingList& TranslationConfigDetails::name_mapping_list() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.name_mapping_list)
  return _internal_name_mapping_list();
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* TranslationConfigDetails::unsafe_arena_release_name_mapping_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.name_mapping_list)
  if (_internal_has_name_mapping_list()) {
    clear_has_output_name_mapping();
    ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* temp = _impl_.output_name_mapping_.name_mapping_list_;
    _impl_.output_name_mapping_.name_mapping_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationConfigDetails::unsafe_arena_set_allocated_name_mapping_list(::google::cloud::bigquery::migration::v2::ObjectNameMappingList* name_mapping_list) {
  clear_output_name_mapping();
  if (name_mapping_list) {
    set_has_name_mapping_list();
    _impl_.output_name_mapping_.name_mapping_list_ = name_mapping_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.name_mapping_list)
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* TranslationConfigDetails::_internal_mutable_name_mapping_list() {
  if (!_internal_has_name_mapping_list()) {
    clear_output_name_mapping();
    set_has_name_mapping_list();
    _impl_.output_name_mapping_.name_mapping_list_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::ObjectNameMappingList >(GetArenaForAllocation());
  }
  return _impl_.output_name_mapping_.name_mapping_list_;
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* TranslationConfigDetails::mutable_name_mapping_list() {
  ::google::cloud::bigquery::migration::v2::ObjectNameMappingList* _msg = _internal_mutable_name_mapping_list();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.name_mapping_list)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.SourceEnv source_env = 6;
inline bool TranslationConfigDetails::_internal_has_source_env() const {
  return this != internal_default_instance() && _impl_.source_env_ != nullptr;
}
inline bool TranslationConfigDetails::has_source_env() const {
  return _internal_has_source_env();
}
inline void TranslationConfigDetails::clear_source_env() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_env_ != nullptr) {
    delete _impl_.source_env_;
  }
  _impl_.source_env_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::SourceEnv& TranslationConfigDetails::_internal_source_env() const {
  const ::google::cloud::bigquery::migration::v2::SourceEnv* p = _impl_.source_env_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::SourceEnv&>(
      ::google::cloud::bigquery::migration::v2::_SourceEnv_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::SourceEnv& TranslationConfigDetails::source_env() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_env)
  return _internal_source_env();
}
inline void TranslationConfigDetails::unsafe_arena_set_allocated_source_env(
    ::google::cloud::bigquery::migration::v2::SourceEnv* source_env) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_env_);
  }
  _impl_.source_env_ = source_env;
  if (source_env) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_env)
}
inline ::google::cloud::bigquery::migration::v2::SourceEnv* TranslationConfigDetails::release_source_env() {
  
  ::google::cloud::bigquery::migration::v2::SourceEnv* temp = _impl_.source_env_;
  _impl_.source_env_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::SourceEnv* TranslationConfigDetails::unsafe_arena_release_source_env() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_env)
  
  ::google::cloud::bigquery::migration::v2::SourceEnv* temp = _impl_.source_env_;
  _impl_.source_env_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::SourceEnv* TranslationConfigDetails::_internal_mutable_source_env() {
  
  if (_impl_.source_env_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::SourceEnv>(GetArenaForAllocation());
    _impl_.source_env_ = p;
  }
  return _impl_.source_env_;
}
inline ::google::cloud::bigquery::migration::v2::SourceEnv* TranslationConfigDetails::mutable_source_env() {
  ::google::cloud::bigquery::migration::v2::SourceEnv* _msg = _internal_mutable_source_env();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_env)
  return _msg;
}
inline void TranslationConfigDetails::set_allocated_source_env(::google::cloud::bigquery::migration::v2::SourceEnv* source_env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_env_;
  }
  if (source_env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_env);
    if (message_arena != submessage_arena) {
      source_env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_env, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_env_ = source_env;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_env)
}

inline bool TranslationConfigDetails::has_source_location() const {
  return source_location_case() != SOURCE_LOCATION_NOT_SET;
}
inline void TranslationConfigDetails::clear_has_source_location() {
  _impl_._oneof_case_[0] = SOURCE_LOCATION_NOT_SET;
}
inline bool TranslationConfigDetails::has_target_location() const {
  return target_location_case() != TARGET_LOCATION_NOT_SET;
}
inline void TranslationConfigDetails::clear_has_target_location() {
  _impl_._oneof_case_[1] = TARGET_LOCATION_NOT_SET;
}
inline bool TranslationConfigDetails::has_output_name_mapping() const {
  return output_name_mapping_case() != OUTPUT_NAME_MAPPING_NOT_SET;
}
inline void TranslationConfigDetails::clear_has_output_name_mapping() {
  _impl_._oneof_case_[2] = OUTPUT_NAME_MAPPING_NOT_SET;
}
inline TranslationConfigDetails::SourceLocationCase TranslationConfigDetails::source_location_case() const {
  return TranslationConfigDetails::SourceLocationCase(_impl_._oneof_case_[0]);
}
inline TranslationConfigDetails::TargetLocationCase TranslationConfigDetails::target_location_case() const {
  return TranslationConfigDetails::TargetLocationCase(_impl_._oneof_case_[1]);
}
inline TranslationConfigDetails::OutputNameMappingCase TranslationConfigDetails::output_name_mapping_case() const {
  return TranslationConfigDetails::OutputNameMappingCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// Dialect

// .google.cloud.bigquery.migration.v2.BigQueryDialect bigquery_dialect = 1;
inline bool Dialect::_internal_has_bigquery_dialect() const {
  return dialect_value_case() == kBigqueryDialect;
}
inline bool Dialect::has_bigquery_dialect() const {
  return _internal_has_bigquery_dialect();
}
inline void Dialect::set_has_bigquery_dialect() {
  _impl_._oneof_case_[0] = kBigqueryDialect;
}
inline void Dialect::clear_bigquery_dialect() {
  if (_internal_has_bigquery_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.bigquery_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::BigQueryDialect* Dialect::release_bigquery_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.bigquery_dialect)
  if (_internal_has_bigquery_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::BigQueryDialect* temp = _impl_.dialect_value_.bigquery_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.bigquery_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::BigQueryDialect& Dialect::_internal_bigquery_dialect() const {
  return _internal_has_bigquery_dialect()
      ? *_impl_.dialect_value_.bigquery_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::BigQueryDialect&>(::google::cloud::bigquery::migration::v2::_BigQueryDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::BigQueryDialect& Dialect::bigquery_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.bigquery_dialect)
  return _internal_bigquery_dialect();
}
inline ::google::cloud::bigquery::migration::v2::BigQueryDialect* Dialect::unsafe_arena_release_bigquery_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.bigquery_dialect)
  if (_internal_has_bigquery_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::BigQueryDialect* temp = _impl_.dialect_value_.bigquery_dialect_;
    _impl_.dialect_value_.bigquery_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_bigquery_dialect(::google::cloud::bigquery::migration::v2::BigQueryDialect* bigquery_dialect) {
  clear_dialect_value();
  if (bigquery_dialect) {
    set_has_bigquery_dialect();
    _impl_.dialect_value_.bigquery_dialect_ = bigquery_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.bigquery_dialect)
}
inline ::google::cloud::bigquery::migration::v2::BigQueryDialect* Dialect::_internal_mutable_bigquery_dialect() {
  if (!_internal_has_bigquery_dialect()) {
    clear_dialect_value();
    set_has_bigquery_dialect();
    _impl_.dialect_value_.bigquery_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::BigQueryDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.bigquery_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::BigQueryDialect* Dialect::mutable_bigquery_dialect() {
  ::google::cloud::bigquery::migration::v2::BigQueryDialect* _msg = _internal_mutable_bigquery_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.bigquery_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.HiveQLDialect hiveql_dialect = 2;
inline bool Dialect::_internal_has_hiveql_dialect() const {
  return dialect_value_case() == kHiveqlDialect;
}
inline bool Dialect::has_hiveql_dialect() const {
  return _internal_has_hiveql_dialect();
}
inline void Dialect::set_has_hiveql_dialect() {
  _impl_._oneof_case_[0] = kHiveqlDialect;
}
inline void Dialect::clear_hiveql_dialect() {
  if (_internal_has_hiveql_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.hiveql_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::HiveQLDialect* Dialect::release_hiveql_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.hiveql_dialect)
  if (_internal_has_hiveql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::HiveQLDialect* temp = _impl_.dialect_value_.hiveql_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.hiveql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::HiveQLDialect& Dialect::_internal_hiveql_dialect() const {
  return _internal_has_hiveql_dialect()
      ? *_impl_.dialect_value_.hiveql_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::HiveQLDialect&>(::google::cloud::bigquery::migration::v2::_HiveQLDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::HiveQLDialect& Dialect::hiveql_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.hiveql_dialect)
  return _internal_hiveql_dialect();
}
inline ::google::cloud::bigquery::migration::v2::HiveQLDialect* Dialect::unsafe_arena_release_hiveql_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.hiveql_dialect)
  if (_internal_has_hiveql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::HiveQLDialect* temp = _impl_.dialect_value_.hiveql_dialect_;
    _impl_.dialect_value_.hiveql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_hiveql_dialect(::google::cloud::bigquery::migration::v2::HiveQLDialect* hiveql_dialect) {
  clear_dialect_value();
  if (hiveql_dialect) {
    set_has_hiveql_dialect();
    _impl_.dialect_value_.hiveql_dialect_ = hiveql_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.hiveql_dialect)
}
inline ::google::cloud::bigquery::migration::v2::HiveQLDialect* Dialect::_internal_mutable_hiveql_dialect() {
  if (!_internal_has_hiveql_dialect()) {
    clear_dialect_value();
    set_has_hiveql_dialect();
    _impl_.dialect_value_.hiveql_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::HiveQLDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.hiveql_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::HiveQLDialect* Dialect::mutable_hiveql_dialect() {
  ::google::cloud::bigquery::migration::v2::HiveQLDialect* _msg = _internal_mutable_hiveql_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.hiveql_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.RedshiftDialect redshift_dialect = 3;
inline bool Dialect::_internal_has_redshift_dialect() const {
  return dialect_value_case() == kRedshiftDialect;
}
inline bool Dialect::has_redshift_dialect() const {
  return _internal_has_redshift_dialect();
}
inline void Dialect::set_has_redshift_dialect() {
  _impl_._oneof_case_[0] = kRedshiftDialect;
}
inline void Dialect::clear_redshift_dialect() {
  if (_internal_has_redshift_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.redshift_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::RedshiftDialect* Dialect::release_redshift_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.redshift_dialect)
  if (_internal_has_redshift_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::RedshiftDialect* temp = _impl_.dialect_value_.redshift_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.redshift_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::RedshiftDialect& Dialect::_internal_redshift_dialect() const {
  return _internal_has_redshift_dialect()
      ? *_impl_.dialect_value_.redshift_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::RedshiftDialect&>(::google::cloud::bigquery::migration::v2::_RedshiftDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::RedshiftDialect& Dialect::redshift_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.redshift_dialect)
  return _internal_redshift_dialect();
}
inline ::google::cloud::bigquery::migration::v2::RedshiftDialect* Dialect::unsafe_arena_release_redshift_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.redshift_dialect)
  if (_internal_has_redshift_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::RedshiftDialect* temp = _impl_.dialect_value_.redshift_dialect_;
    _impl_.dialect_value_.redshift_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_redshift_dialect(::google::cloud::bigquery::migration::v2::RedshiftDialect* redshift_dialect) {
  clear_dialect_value();
  if (redshift_dialect) {
    set_has_redshift_dialect();
    _impl_.dialect_value_.redshift_dialect_ = redshift_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.redshift_dialect)
}
inline ::google::cloud::bigquery::migration::v2::RedshiftDialect* Dialect::_internal_mutable_redshift_dialect() {
  if (!_internal_has_redshift_dialect()) {
    clear_dialect_value();
    set_has_redshift_dialect();
    _impl_.dialect_value_.redshift_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::RedshiftDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.redshift_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::RedshiftDialect* Dialect::mutable_redshift_dialect() {
  ::google::cloud::bigquery::migration::v2::RedshiftDialect* _msg = _internal_mutable_redshift_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.redshift_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.TeradataDialect teradata_dialect = 4;
inline bool Dialect::_internal_has_teradata_dialect() const {
  return dialect_value_case() == kTeradataDialect;
}
inline bool Dialect::has_teradata_dialect() const {
  return _internal_has_teradata_dialect();
}
inline void Dialect::set_has_teradata_dialect() {
  _impl_._oneof_case_[0] = kTeradataDialect;
}
inline void Dialect::clear_teradata_dialect() {
  if (_internal_has_teradata_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.teradata_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect* Dialect::release_teradata_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.teradata_dialect)
  if (_internal_has_teradata_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::TeradataDialect* temp = _impl_.dialect_value_.teradata_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.teradata_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::TeradataDialect& Dialect::_internal_teradata_dialect() const {
  return _internal_has_teradata_dialect()
      ? *_impl_.dialect_value_.teradata_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::TeradataDialect&>(::google::cloud::bigquery::migration::v2::_TeradataDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::TeradataDialect& Dialect::teradata_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.teradata_dialect)
  return _internal_teradata_dialect();
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect* Dialect::unsafe_arena_release_teradata_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.teradata_dialect)
  if (_internal_has_teradata_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::TeradataDialect* temp = _impl_.dialect_value_.teradata_dialect_;
    _impl_.dialect_value_.teradata_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_teradata_dialect(::google::cloud::bigquery::migration::v2::TeradataDialect* teradata_dialect) {
  clear_dialect_value();
  if (teradata_dialect) {
    set_has_teradata_dialect();
    _impl_.dialect_value_.teradata_dialect_ = teradata_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.teradata_dialect)
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect* Dialect::_internal_mutable_teradata_dialect() {
  if (!_internal_has_teradata_dialect()) {
    clear_dialect_value();
    set_has_teradata_dialect();
    _impl_.dialect_value_.teradata_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::TeradataDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.teradata_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect* Dialect::mutable_teradata_dialect() {
  ::google::cloud::bigquery::migration::v2::TeradataDialect* _msg = _internal_mutable_teradata_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.teradata_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.OracleDialect oracle_dialect = 5;
inline bool Dialect::_internal_has_oracle_dialect() const {
  return dialect_value_case() == kOracleDialect;
}
inline bool Dialect::has_oracle_dialect() const {
  return _internal_has_oracle_dialect();
}
inline void Dialect::set_has_oracle_dialect() {
  _impl_._oneof_case_[0] = kOracleDialect;
}
inline void Dialect::clear_oracle_dialect() {
  if (_internal_has_oracle_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.oracle_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::OracleDialect* Dialect::release_oracle_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.oracle_dialect)
  if (_internal_has_oracle_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::OracleDialect* temp = _impl_.dialect_value_.oracle_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.oracle_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::OracleDialect& Dialect::_internal_oracle_dialect() const {
  return _internal_has_oracle_dialect()
      ? *_impl_.dialect_value_.oracle_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::OracleDialect&>(::google::cloud::bigquery::migration::v2::_OracleDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::OracleDialect& Dialect::oracle_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.oracle_dialect)
  return _internal_oracle_dialect();
}
inline ::google::cloud::bigquery::migration::v2::OracleDialect* Dialect::unsafe_arena_release_oracle_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.oracle_dialect)
  if (_internal_has_oracle_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::OracleDialect* temp = _impl_.dialect_value_.oracle_dialect_;
    _impl_.dialect_value_.oracle_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_oracle_dialect(::google::cloud::bigquery::migration::v2::OracleDialect* oracle_dialect) {
  clear_dialect_value();
  if (oracle_dialect) {
    set_has_oracle_dialect();
    _impl_.dialect_value_.oracle_dialect_ = oracle_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.oracle_dialect)
}
inline ::google::cloud::bigquery::migration::v2::OracleDialect* Dialect::_internal_mutable_oracle_dialect() {
  if (!_internal_has_oracle_dialect()) {
    clear_dialect_value();
    set_has_oracle_dialect();
    _impl_.dialect_value_.oracle_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::OracleDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.oracle_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::OracleDialect* Dialect::mutable_oracle_dialect() {
  ::google::cloud::bigquery::migration::v2::OracleDialect* _msg = _internal_mutable_oracle_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.oracle_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.SparkSQLDialect sparksql_dialect = 6;
inline bool Dialect::_internal_has_sparksql_dialect() const {
  return dialect_value_case() == kSparksqlDialect;
}
inline bool Dialect::has_sparksql_dialect() const {
  return _internal_has_sparksql_dialect();
}
inline void Dialect::set_has_sparksql_dialect() {
  _impl_._oneof_case_[0] = kSparksqlDialect;
}
inline void Dialect::clear_sparksql_dialect() {
  if (_internal_has_sparksql_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.sparksql_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::SparkSQLDialect* Dialect::release_sparksql_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.sparksql_dialect)
  if (_internal_has_sparksql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SparkSQLDialect* temp = _impl_.dialect_value_.sparksql_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.sparksql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::SparkSQLDialect& Dialect::_internal_sparksql_dialect() const {
  return _internal_has_sparksql_dialect()
      ? *_impl_.dialect_value_.sparksql_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::SparkSQLDialect&>(::google::cloud::bigquery::migration::v2::_SparkSQLDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::SparkSQLDialect& Dialect::sparksql_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.sparksql_dialect)
  return _internal_sparksql_dialect();
}
inline ::google::cloud::bigquery::migration::v2::SparkSQLDialect* Dialect::unsafe_arena_release_sparksql_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.sparksql_dialect)
  if (_internal_has_sparksql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SparkSQLDialect* temp = _impl_.dialect_value_.sparksql_dialect_;
    _impl_.dialect_value_.sparksql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_sparksql_dialect(::google::cloud::bigquery::migration::v2::SparkSQLDialect* sparksql_dialect) {
  clear_dialect_value();
  if (sparksql_dialect) {
    set_has_sparksql_dialect();
    _impl_.dialect_value_.sparksql_dialect_ = sparksql_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.sparksql_dialect)
}
inline ::google::cloud::bigquery::migration::v2::SparkSQLDialect* Dialect::_internal_mutable_sparksql_dialect() {
  if (!_internal_has_sparksql_dialect()) {
    clear_dialect_value();
    set_has_sparksql_dialect();
    _impl_.dialect_value_.sparksql_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::SparkSQLDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.sparksql_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::SparkSQLDialect* Dialect::mutable_sparksql_dialect() {
  ::google::cloud::bigquery::migration::v2::SparkSQLDialect* _msg = _internal_mutable_sparksql_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.sparksql_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.SnowflakeDialect snowflake_dialect = 7;
inline bool Dialect::_internal_has_snowflake_dialect() const {
  return dialect_value_case() == kSnowflakeDialect;
}
inline bool Dialect::has_snowflake_dialect() const {
  return _internal_has_snowflake_dialect();
}
inline void Dialect::set_has_snowflake_dialect() {
  _impl_._oneof_case_[0] = kSnowflakeDialect;
}
inline void Dialect::clear_snowflake_dialect() {
  if (_internal_has_snowflake_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.snowflake_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::SnowflakeDialect* Dialect::release_snowflake_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.snowflake_dialect)
  if (_internal_has_snowflake_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SnowflakeDialect* temp = _impl_.dialect_value_.snowflake_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.snowflake_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::SnowflakeDialect& Dialect::_internal_snowflake_dialect() const {
  return _internal_has_snowflake_dialect()
      ? *_impl_.dialect_value_.snowflake_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::SnowflakeDialect&>(::google::cloud::bigquery::migration::v2::_SnowflakeDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::SnowflakeDialect& Dialect::snowflake_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.snowflake_dialect)
  return _internal_snowflake_dialect();
}
inline ::google::cloud::bigquery::migration::v2::SnowflakeDialect* Dialect::unsafe_arena_release_snowflake_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.snowflake_dialect)
  if (_internal_has_snowflake_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SnowflakeDialect* temp = _impl_.dialect_value_.snowflake_dialect_;
    _impl_.dialect_value_.snowflake_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_snowflake_dialect(::google::cloud::bigquery::migration::v2::SnowflakeDialect* snowflake_dialect) {
  clear_dialect_value();
  if (snowflake_dialect) {
    set_has_snowflake_dialect();
    _impl_.dialect_value_.snowflake_dialect_ = snowflake_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.snowflake_dialect)
}
inline ::google::cloud::bigquery::migration::v2::SnowflakeDialect* Dialect::_internal_mutable_snowflake_dialect() {
  if (!_internal_has_snowflake_dialect()) {
    clear_dialect_value();
    set_has_snowflake_dialect();
    _impl_.dialect_value_.snowflake_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::SnowflakeDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.snowflake_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::SnowflakeDialect* Dialect::mutable_snowflake_dialect() {
  ::google::cloud::bigquery::migration::v2::SnowflakeDialect* _msg = _internal_mutable_snowflake_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.snowflake_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.NetezzaDialect netezza_dialect = 8;
inline bool Dialect::_internal_has_netezza_dialect() const {
  return dialect_value_case() == kNetezzaDialect;
}
inline bool Dialect::has_netezza_dialect() const {
  return _internal_has_netezza_dialect();
}
inline void Dialect::set_has_netezza_dialect() {
  _impl_._oneof_case_[0] = kNetezzaDialect;
}
inline void Dialect::clear_netezza_dialect() {
  if (_internal_has_netezza_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.netezza_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::NetezzaDialect* Dialect::release_netezza_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.netezza_dialect)
  if (_internal_has_netezza_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::NetezzaDialect* temp = _impl_.dialect_value_.netezza_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.netezza_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::NetezzaDialect& Dialect::_internal_netezza_dialect() const {
  return _internal_has_netezza_dialect()
      ? *_impl_.dialect_value_.netezza_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::NetezzaDialect&>(::google::cloud::bigquery::migration::v2::_NetezzaDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::NetezzaDialect& Dialect::netezza_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.netezza_dialect)
  return _internal_netezza_dialect();
}
inline ::google::cloud::bigquery::migration::v2::NetezzaDialect* Dialect::unsafe_arena_release_netezza_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.netezza_dialect)
  if (_internal_has_netezza_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::NetezzaDialect* temp = _impl_.dialect_value_.netezza_dialect_;
    _impl_.dialect_value_.netezza_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_netezza_dialect(::google::cloud::bigquery::migration::v2::NetezzaDialect* netezza_dialect) {
  clear_dialect_value();
  if (netezza_dialect) {
    set_has_netezza_dialect();
    _impl_.dialect_value_.netezza_dialect_ = netezza_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.netezza_dialect)
}
inline ::google::cloud::bigquery::migration::v2::NetezzaDialect* Dialect::_internal_mutable_netezza_dialect() {
  if (!_internal_has_netezza_dialect()) {
    clear_dialect_value();
    set_has_netezza_dialect();
    _impl_.dialect_value_.netezza_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::NetezzaDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.netezza_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::NetezzaDialect* Dialect::mutable_netezza_dialect() {
  ::google::cloud::bigquery::migration::v2::NetezzaDialect* _msg = _internal_mutable_netezza_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.netezza_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.AzureSynapseDialect azure_synapse_dialect = 9;
inline bool Dialect::_internal_has_azure_synapse_dialect() const {
  return dialect_value_case() == kAzureSynapseDialect;
}
inline bool Dialect::has_azure_synapse_dialect() const {
  return _internal_has_azure_synapse_dialect();
}
inline void Dialect::set_has_azure_synapse_dialect() {
  _impl_._oneof_case_[0] = kAzureSynapseDialect;
}
inline void Dialect::clear_azure_synapse_dialect() {
  if (_internal_has_azure_synapse_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.azure_synapse_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* Dialect::release_azure_synapse_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.azure_synapse_dialect)
  if (_internal_has_azure_synapse_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* temp = _impl_.dialect_value_.azure_synapse_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.azure_synapse_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::AzureSynapseDialect& Dialect::_internal_azure_synapse_dialect() const {
  return _internal_has_azure_synapse_dialect()
      ? *_impl_.dialect_value_.azure_synapse_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::AzureSynapseDialect&>(::google::cloud::bigquery::migration::v2::_AzureSynapseDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::AzureSynapseDialect& Dialect::azure_synapse_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.azure_synapse_dialect)
  return _internal_azure_synapse_dialect();
}
inline ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* Dialect::unsafe_arena_release_azure_synapse_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.azure_synapse_dialect)
  if (_internal_has_azure_synapse_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* temp = _impl_.dialect_value_.azure_synapse_dialect_;
    _impl_.dialect_value_.azure_synapse_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_azure_synapse_dialect(::google::cloud::bigquery::migration::v2::AzureSynapseDialect* azure_synapse_dialect) {
  clear_dialect_value();
  if (azure_synapse_dialect) {
    set_has_azure_synapse_dialect();
    _impl_.dialect_value_.azure_synapse_dialect_ = azure_synapse_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.azure_synapse_dialect)
}
inline ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* Dialect::_internal_mutable_azure_synapse_dialect() {
  if (!_internal_has_azure_synapse_dialect()) {
    clear_dialect_value();
    set_has_azure_synapse_dialect();
    _impl_.dialect_value_.azure_synapse_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::AzureSynapseDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.azure_synapse_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* Dialect::mutable_azure_synapse_dialect() {
  ::google::cloud::bigquery::migration::v2::AzureSynapseDialect* _msg = _internal_mutable_azure_synapse_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.azure_synapse_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.VerticaDialect vertica_dialect = 10;
inline bool Dialect::_internal_has_vertica_dialect() const {
  return dialect_value_case() == kVerticaDialect;
}
inline bool Dialect::has_vertica_dialect() const {
  return _internal_has_vertica_dialect();
}
inline void Dialect::set_has_vertica_dialect() {
  _impl_._oneof_case_[0] = kVerticaDialect;
}
inline void Dialect::clear_vertica_dialect() {
  if (_internal_has_vertica_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.vertica_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::VerticaDialect* Dialect::release_vertica_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.vertica_dialect)
  if (_internal_has_vertica_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::VerticaDialect* temp = _impl_.dialect_value_.vertica_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.vertica_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::VerticaDialect& Dialect::_internal_vertica_dialect() const {
  return _internal_has_vertica_dialect()
      ? *_impl_.dialect_value_.vertica_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::VerticaDialect&>(::google::cloud::bigquery::migration::v2::_VerticaDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::VerticaDialect& Dialect::vertica_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.vertica_dialect)
  return _internal_vertica_dialect();
}
inline ::google::cloud::bigquery::migration::v2::VerticaDialect* Dialect::unsafe_arena_release_vertica_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.vertica_dialect)
  if (_internal_has_vertica_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::VerticaDialect* temp = _impl_.dialect_value_.vertica_dialect_;
    _impl_.dialect_value_.vertica_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_vertica_dialect(::google::cloud::bigquery::migration::v2::VerticaDialect* vertica_dialect) {
  clear_dialect_value();
  if (vertica_dialect) {
    set_has_vertica_dialect();
    _impl_.dialect_value_.vertica_dialect_ = vertica_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.vertica_dialect)
}
inline ::google::cloud::bigquery::migration::v2::VerticaDialect* Dialect::_internal_mutable_vertica_dialect() {
  if (!_internal_has_vertica_dialect()) {
    clear_dialect_value();
    set_has_vertica_dialect();
    _impl_.dialect_value_.vertica_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::VerticaDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.vertica_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::VerticaDialect* Dialect::mutable_vertica_dialect() {
  ::google::cloud::bigquery::migration::v2::VerticaDialect* _msg = _internal_mutable_vertica_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.vertica_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.SQLServerDialect sql_server_dialect = 11;
inline bool Dialect::_internal_has_sql_server_dialect() const {
  return dialect_value_case() == kSqlServerDialect;
}
inline bool Dialect::has_sql_server_dialect() const {
  return _internal_has_sql_server_dialect();
}
inline void Dialect::set_has_sql_server_dialect() {
  _impl_._oneof_case_[0] = kSqlServerDialect;
}
inline void Dialect::clear_sql_server_dialect() {
  if (_internal_has_sql_server_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.sql_server_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::SQLServerDialect* Dialect::release_sql_server_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.sql_server_dialect)
  if (_internal_has_sql_server_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SQLServerDialect* temp = _impl_.dialect_value_.sql_server_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.sql_server_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::SQLServerDialect& Dialect::_internal_sql_server_dialect() const {
  return _internal_has_sql_server_dialect()
      ? *_impl_.dialect_value_.sql_server_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::SQLServerDialect&>(::google::cloud::bigquery::migration::v2::_SQLServerDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::SQLServerDialect& Dialect::sql_server_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.sql_server_dialect)
  return _internal_sql_server_dialect();
}
inline ::google::cloud::bigquery::migration::v2::SQLServerDialect* Dialect::unsafe_arena_release_sql_server_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.sql_server_dialect)
  if (_internal_has_sql_server_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::SQLServerDialect* temp = _impl_.dialect_value_.sql_server_dialect_;
    _impl_.dialect_value_.sql_server_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_sql_server_dialect(::google::cloud::bigquery::migration::v2::SQLServerDialect* sql_server_dialect) {
  clear_dialect_value();
  if (sql_server_dialect) {
    set_has_sql_server_dialect();
    _impl_.dialect_value_.sql_server_dialect_ = sql_server_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.sql_server_dialect)
}
inline ::google::cloud::bigquery::migration::v2::SQLServerDialect* Dialect::_internal_mutable_sql_server_dialect() {
  if (!_internal_has_sql_server_dialect()) {
    clear_dialect_value();
    set_has_sql_server_dialect();
    _impl_.dialect_value_.sql_server_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::SQLServerDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.sql_server_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::SQLServerDialect* Dialect::mutable_sql_server_dialect() {
  ::google::cloud::bigquery::migration::v2::SQLServerDialect* _msg = _internal_mutable_sql_server_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.sql_server_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.PostgresqlDialect postgresql_dialect = 12;
inline bool Dialect::_internal_has_postgresql_dialect() const {
  return dialect_value_case() == kPostgresqlDialect;
}
inline bool Dialect::has_postgresql_dialect() const {
  return _internal_has_postgresql_dialect();
}
inline void Dialect::set_has_postgresql_dialect() {
  _impl_._oneof_case_[0] = kPostgresqlDialect;
}
inline void Dialect::clear_postgresql_dialect() {
  if (_internal_has_postgresql_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.postgresql_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::PostgresqlDialect* Dialect::release_postgresql_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.postgresql_dialect)
  if (_internal_has_postgresql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::PostgresqlDialect* temp = _impl_.dialect_value_.postgresql_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.postgresql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::PostgresqlDialect& Dialect::_internal_postgresql_dialect() const {
  return _internal_has_postgresql_dialect()
      ? *_impl_.dialect_value_.postgresql_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::PostgresqlDialect&>(::google::cloud::bigquery::migration::v2::_PostgresqlDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::PostgresqlDialect& Dialect::postgresql_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.postgresql_dialect)
  return _internal_postgresql_dialect();
}
inline ::google::cloud::bigquery::migration::v2::PostgresqlDialect* Dialect::unsafe_arena_release_postgresql_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.postgresql_dialect)
  if (_internal_has_postgresql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::PostgresqlDialect* temp = _impl_.dialect_value_.postgresql_dialect_;
    _impl_.dialect_value_.postgresql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_postgresql_dialect(::google::cloud::bigquery::migration::v2::PostgresqlDialect* postgresql_dialect) {
  clear_dialect_value();
  if (postgresql_dialect) {
    set_has_postgresql_dialect();
    _impl_.dialect_value_.postgresql_dialect_ = postgresql_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.postgresql_dialect)
}
inline ::google::cloud::bigquery::migration::v2::PostgresqlDialect* Dialect::_internal_mutable_postgresql_dialect() {
  if (!_internal_has_postgresql_dialect()) {
    clear_dialect_value();
    set_has_postgresql_dialect();
    _impl_.dialect_value_.postgresql_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::PostgresqlDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.postgresql_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::PostgresqlDialect* Dialect::mutable_postgresql_dialect() {
  ::google::cloud::bigquery::migration::v2::PostgresqlDialect* _msg = _internal_mutable_postgresql_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.postgresql_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.PrestoDialect presto_dialect = 13;
inline bool Dialect::_internal_has_presto_dialect() const {
  return dialect_value_case() == kPrestoDialect;
}
inline bool Dialect::has_presto_dialect() const {
  return _internal_has_presto_dialect();
}
inline void Dialect::set_has_presto_dialect() {
  _impl_._oneof_case_[0] = kPrestoDialect;
}
inline void Dialect::clear_presto_dialect() {
  if (_internal_has_presto_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.presto_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::PrestoDialect* Dialect::release_presto_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.presto_dialect)
  if (_internal_has_presto_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::PrestoDialect* temp = _impl_.dialect_value_.presto_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.presto_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::PrestoDialect& Dialect::_internal_presto_dialect() const {
  return _internal_has_presto_dialect()
      ? *_impl_.dialect_value_.presto_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::PrestoDialect&>(::google::cloud::bigquery::migration::v2::_PrestoDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::PrestoDialect& Dialect::presto_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.presto_dialect)
  return _internal_presto_dialect();
}
inline ::google::cloud::bigquery::migration::v2::PrestoDialect* Dialect::unsafe_arena_release_presto_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.presto_dialect)
  if (_internal_has_presto_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::PrestoDialect* temp = _impl_.dialect_value_.presto_dialect_;
    _impl_.dialect_value_.presto_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_presto_dialect(::google::cloud::bigquery::migration::v2::PrestoDialect* presto_dialect) {
  clear_dialect_value();
  if (presto_dialect) {
    set_has_presto_dialect();
    _impl_.dialect_value_.presto_dialect_ = presto_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.presto_dialect)
}
inline ::google::cloud::bigquery::migration::v2::PrestoDialect* Dialect::_internal_mutable_presto_dialect() {
  if (!_internal_has_presto_dialect()) {
    clear_dialect_value();
    set_has_presto_dialect();
    _impl_.dialect_value_.presto_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::PrestoDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.presto_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::PrestoDialect* Dialect::mutable_presto_dialect() {
  ::google::cloud::bigquery::migration::v2::PrestoDialect* _msg = _internal_mutable_presto_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.presto_dialect)
  return _msg;
}

// .google.cloud.bigquery.migration.v2.MySQLDialect mysql_dialect = 14;
inline bool Dialect::_internal_has_mysql_dialect() const {
  return dialect_value_case() == kMysqlDialect;
}
inline bool Dialect::has_mysql_dialect() const {
  return _internal_has_mysql_dialect();
}
inline void Dialect::set_has_mysql_dialect() {
  _impl_._oneof_case_[0] = kMysqlDialect;
}
inline void Dialect::clear_mysql_dialect() {
  if (_internal_has_mysql_dialect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.dialect_value_.mysql_dialect_;
    }
    clear_has_dialect_value();
  }
}
inline ::google::cloud::bigquery::migration::v2::MySQLDialect* Dialect::release_mysql_dialect() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.Dialect.mysql_dialect)
  if (_internal_has_mysql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::MySQLDialect* temp = _impl_.dialect_value_.mysql_dialect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.dialect_value_.mysql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::migration::v2::MySQLDialect& Dialect::_internal_mysql_dialect() const {
  return _internal_has_mysql_dialect()
      ? *_impl_.dialect_value_.mysql_dialect_
      : reinterpret_cast< ::google::cloud::bigquery::migration::v2::MySQLDialect&>(::google::cloud::bigquery::migration::v2::_MySQLDialect_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::MySQLDialect& Dialect::mysql_dialect() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.Dialect.mysql_dialect)
  return _internal_mysql_dialect();
}
inline ::google::cloud::bigquery::migration::v2::MySQLDialect* Dialect::unsafe_arena_release_mysql_dialect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.migration.v2.Dialect.mysql_dialect)
  if (_internal_has_mysql_dialect()) {
    clear_has_dialect_value();
    ::google::cloud::bigquery::migration::v2::MySQLDialect* temp = _impl_.dialect_value_.mysql_dialect_;
    _impl_.dialect_value_.mysql_dialect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dialect::unsafe_arena_set_allocated_mysql_dialect(::google::cloud::bigquery::migration::v2::MySQLDialect* mysql_dialect) {
  clear_dialect_value();
  if (mysql_dialect) {
    set_has_mysql_dialect();
    _impl_.dialect_value_.mysql_dialect_ = mysql_dialect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.Dialect.mysql_dialect)
}
inline ::google::cloud::bigquery::migration::v2::MySQLDialect* Dialect::_internal_mutable_mysql_dialect() {
  if (!_internal_has_mysql_dialect()) {
    clear_dialect_value();
    set_has_mysql_dialect();
    _impl_.dialect_value_.mysql_dialect_ = CreateMaybeMessage< ::google::cloud::bigquery::migration::v2::MySQLDialect >(GetArenaForAllocation());
  }
  return _impl_.dialect_value_.mysql_dialect_;
}
inline ::google::cloud::bigquery::migration::v2::MySQLDialect* Dialect::mutable_mysql_dialect() {
  ::google::cloud::bigquery::migration::v2::MySQLDialect* _msg = _internal_mutable_mysql_dialect();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.Dialect.mysql_dialect)
  return _msg;
}

inline bool Dialect::has_dialect_value() const {
  return dialect_value_case() != DIALECT_VALUE_NOT_SET;
}
inline void Dialect::clear_has_dialect_value() {
  _impl_._oneof_case_[0] = DIALECT_VALUE_NOT_SET;
}
inline Dialect::DialectValueCase Dialect::dialect_value_case() const {
  return Dialect::DialectValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BigQueryDialect

// -------------------------------------------------------------------

// HiveQLDialect

// -------------------------------------------------------------------

// RedshiftDialect

// -------------------------------------------------------------------

// TeradataDialect

// .google.cloud.bigquery.migration.v2.TeradataDialect.Mode mode = 1;
inline void TeradataDialect::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode TeradataDialect::_internal_mode() const {
  return static_cast< ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode >(_impl_.mode_);
}
inline ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode TeradataDialect::mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.TeradataDialect.mode)
  return _internal_mode();
}
inline void TeradataDialect::_internal_set_mode(::google::cloud::bigquery::migration::v2::TeradataDialect_Mode value) {
  
  _impl_.mode_ = value;
}
inline void TeradataDialect::set_mode(::google::cloud::bigquery::migration::v2::TeradataDialect_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.TeradataDialect.mode)
}

// -------------------------------------------------------------------

// OracleDialect

// -------------------------------------------------------------------

// SparkSQLDialect

// -------------------------------------------------------------------

// SnowflakeDialect

// -------------------------------------------------------------------

// NetezzaDialect

// -------------------------------------------------------------------

// AzureSynapseDialect

// -------------------------------------------------------------------

// VerticaDialect

// -------------------------------------------------------------------

// SQLServerDialect

// -------------------------------------------------------------------

// PostgresqlDialect

// -------------------------------------------------------------------

// PrestoDialect

// -------------------------------------------------------------------

// MySQLDialect

// -------------------------------------------------------------------

// ObjectNameMappingList

// repeated .google.cloud.bigquery.migration.v2.ObjectNameMapping name_map = 1;
inline int ObjectNameMappingList::_internal_name_map_size() const {
  return _impl_.name_map_.size();
}
inline int ObjectNameMappingList::name_map_size() const {
  return _internal_name_map_size();
}
inline void ObjectNameMappingList::clear_name_map() {
  _impl_.name_map_.Clear();
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMapping* ObjectNameMappingList::mutable_name_map(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ObjectNameMappingList.name_map)
  return _impl_.name_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ObjectNameMapping >*
ObjectNameMappingList::mutable_name_map() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.ObjectNameMappingList.name_map)
  return &_impl_.name_map_;
}
inline const ::google::cloud::bigquery::migration::v2::ObjectNameMapping& ObjectNameMappingList::_internal_name_map(int index) const {
  return _impl_.name_map_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::ObjectNameMapping& ObjectNameMappingList::name_map(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ObjectNameMappingList.name_map)
  return _internal_name_map(index);
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMapping* ObjectNameMappingList::_internal_add_name_map() {
  return _impl_.name_map_.Add();
}
inline ::google::cloud::bigquery::migration::v2::ObjectNameMapping* ObjectNameMappingList::add_name_map() {
  ::google::cloud::bigquery::migration::v2::ObjectNameMapping* _add = _internal_add_name_map();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.ObjectNameMappingList.name_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::ObjectNameMapping >&
ObjectNameMappingList::name_map() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.ObjectNameMappingList.name_map)
  return _impl_.name_map_;
}

// -------------------------------------------------------------------

// ObjectNameMapping

// .google.cloud.bigquery.migration.v2.NameMappingKey source = 1;
inline bool ObjectNameMapping::_internal_has_source() const {
  return this != internal_default_instance() && _impl_.source_ != nullptr;
}
inline bool ObjectNameMapping::has_source() const {
  return _internal_has_source();
}
inline void ObjectNameMapping::clear_source() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::NameMappingKey& ObjectNameMapping::_internal_source() const {
  const ::google::cloud::bigquery::migration::v2::NameMappingKey* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::NameMappingKey&>(
      ::google::cloud::bigquery::migration::v2::_NameMappingKey_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::NameMappingKey& ObjectNameMapping::source() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ObjectNameMapping.source)
  return _internal_source();
}
inline void ObjectNameMapping::unsafe_arena_set_allocated_source(
    ::google::cloud::bigquery::migration::v2::NameMappingKey* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.ObjectNameMapping.source)
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey* ObjectNameMapping::release_source() {
  
  ::google::cloud::bigquery::migration::v2::NameMappingKey* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey* ObjectNameMapping::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ObjectNameMapping.source)
  
  ::google::cloud::bigquery::migration::v2::NameMappingKey* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey* ObjectNameMapping::_internal_mutable_source() {
  
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::NameMappingKey>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey* ObjectNameMapping::mutable_source() {
  ::google::cloud::bigquery::migration::v2::NameMappingKey* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ObjectNameMapping.source)
  return _msg;
}
inline void ObjectNameMapping::set_allocated_source(::google::cloud::bigquery::migration::v2::NameMappingKey* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ObjectNameMapping.source)
}

// .google.cloud.bigquery.migration.v2.NameMappingValue target = 2;
inline bool ObjectNameMapping::_internal_has_target() const {
  return this != internal_default_instance() && _impl_.target_ != nullptr;
}
inline bool ObjectNameMapping::has_target() const {
  return _internal_has_target();
}
inline void ObjectNameMapping::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
inline const ::google::cloud::bigquery::migration::v2::NameMappingValue& ObjectNameMapping::_internal_target() const {
  const ::google::cloud::bigquery::migration::v2::NameMappingValue* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::NameMappingValue&>(
      ::google::cloud::bigquery::migration::v2::_NameMappingValue_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::NameMappingValue& ObjectNameMapping::target() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ObjectNameMapping.target)
  return _internal_target();
}
inline void ObjectNameMapping::unsafe_arena_set_allocated_target(
    ::google::cloud::bigquery::migration::v2::NameMappingValue* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.ObjectNameMapping.target)
}
inline ::google::cloud::bigquery::migration::v2::NameMappingValue* ObjectNameMapping::release_target() {
  
  ::google::cloud::bigquery::migration::v2::NameMappingValue* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingValue* ObjectNameMapping::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ObjectNameMapping.target)
  
  ::google::cloud::bigquery::migration::v2::NameMappingValue* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingValue* ObjectNameMapping::_internal_mutable_target() {
  
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::NameMappingValue>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingValue* ObjectNameMapping::mutable_target() {
  ::google::cloud::bigquery::migration::v2::NameMappingValue* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ObjectNameMapping.target)
  return _msg;
}
inline void ObjectNameMapping::set_allocated_target(::google::cloud::bigquery::migration::v2::NameMappingValue* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ObjectNameMapping.target)
}

// -------------------------------------------------------------------

// NameMappingKey

// .google.cloud.bigquery.migration.v2.NameMappingKey.Type type = 1;
inline void NameMappingKey::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey_Type NameMappingKey::_internal_type() const {
  return static_cast< ::google::cloud::bigquery::migration::v2::NameMappingKey_Type >(_impl_.type_);
}
inline ::google::cloud::bigquery::migration::v2::NameMappingKey_Type NameMappingKey::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingKey.type)
  return _internal_type();
}
inline void NameMappingKey::_internal_set_type(::google::cloud::bigquery::migration::v2::NameMappingKey_Type value) {
  
  _impl_.type_ = value;
}
inline void NameMappingKey::set_type(::google::cloud::bigquery::migration::v2::NameMappingKey_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingKey.type)
}

// string database = 2;
inline void NameMappingKey::clear_database() {
  _impl_.database_.ClearToEmpty();
}
inline const std::string& NameMappingKey::database() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingKey.database)
  return _internal_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingKey::set_database(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingKey.database)
}
inline std::string* NameMappingKey::mutable_database() {
  std::string* _s = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingKey.database)
  return _s;
}
inline const std::string& NameMappingKey::_internal_database() const {
  return _impl_.database_.Get();
}
inline void NameMappingKey::_internal_set_database(const std::string& value) {
  
  _impl_.database_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingKey::_internal_mutable_database() {
  
  return _impl_.database_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingKey::release_database() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingKey.database)
  return _impl_.database_.Release();
}
inline void NameMappingKey::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  _impl_.database_.SetAllocated(database, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_.IsDefault()) {
    _impl_.database_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingKey.database)
}

// string schema = 3;
inline void NameMappingKey::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& NameMappingKey::schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingKey.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingKey::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingKey.schema)
}
inline std::string* NameMappingKey::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingKey.schema)
  return _s;
}
inline const std::string& NameMappingKey::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void NameMappingKey::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingKey::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingKey::release_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingKey.schema)
  return _impl_.schema_.Release();
}
inline void NameMappingKey::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingKey.schema)
}

// string relation = 4;
inline void NameMappingKey::clear_relation() {
  _impl_.relation_.ClearToEmpty();
}
inline const std::string& NameMappingKey::relation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingKey.relation)
  return _internal_relation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingKey::set_relation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingKey.relation)
}
inline std::string* NameMappingKey::mutable_relation() {
  std::string* _s = _internal_mutable_relation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingKey.relation)
  return _s;
}
inline const std::string& NameMappingKey::_internal_relation() const {
  return _impl_.relation_.Get();
}
inline void NameMappingKey::_internal_set_relation(const std::string& value) {
  
  _impl_.relation_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingKey::_internal_mutable_relation() {
  
  return _impl_.relation_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingKey::release_relation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingKey.relation)
  return _impl_.relation_.Release();
}
inline void NameMappingKey::set_allocated_relation(std::string* relation) {
  if (relation != nullptr) {
    
  } else {
    
  }
  _impl_.relation_.SetAllocated(relation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relation_.IsDefault()) {
    _impl_.relation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingKey.relation)
}

// string attribute = 5;
inline void NameMappingKey::clear_attribute() {
  _impl_.attribute_.ClearToEmpty();
}
inline const std::string& NameMappingKey::attribute() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingKey.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingKey::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attribute_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingKey.attribute)
}
inline std::string* NameMappingKey::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingKey.attribute)
  return _s;
}
inline const std::string& NameMappingKey::_internal_attribute() const {
  return _impl_.attribute_.Get();
}
inline void NameMappingKey::_internal_set_attribute(const std::string& value) {
  
  _impl_.attribute_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingKey::_internal_mutable_attribute() {
  
  return _impl_.attribute_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingKey::release_attribute() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingKey.attribute)
  return _impl_.attribute_.Release();
}
inline void NameMappingKey::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  _impl_.attribute_.SetAllocated(attribute, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attribute_.IsDefault()) {
    _impl_.attribute_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingKey.attribute)
}

// -------------------------------------------------------------------

// NameMappingValue

// string database = 1;
inline void NameMappingValue::clear_database() {
  _impl_.database_.ClearToEmpty();
}
inline const std::string& NameMappingValue::database() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingValue.database)
  return _internal_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingValue::set_database(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingValue.database)
}
inline std::string* NameMappingValue::mutable_database() {
  std::string* _s = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingValue.database)
  return _s;
}
inline const std::string& NameMappingValue::_internal_database() const {
  return _impl_.database_.Get();
}
inline void NameMappingValue::_internal_set_database(const std::string& value) {
  
  _impl_.database_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingValue::_internal_mutable_database() {
  
  return _impl_.database_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingValue::release_database() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingValue.database)
  return _impl_.database_.Release();
}
inline void NameMappingValue::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  _impl_.database_.SetAllocated(database, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_.IsDefault()) {
    _impl_.database_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingValue.database)
}

// string schema = 2;
inline void NameMappingValue::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& NameMappingValue::schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingValue.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingValue::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingValue.schema)
}
inline std::string* NameMappingValue::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingValue.schema)
  return _s;
}
inline const std::string& NameMappingValue::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void NameMappingValue::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingValue::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingValue::release_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingValue.schema)
  return _impl_.schema_.Release();
}
inline void NameMappingValue::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingValue.schema)
}

// string relation = 3;
inline void NameMappingValue::clear_relation() {
  _impl_.relation_.ClearToEmpty();
}
inline const std::string& NameMappingValue::relation() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingValue.relation)
  return _internal_relation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingValue::set_relation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingValue.relation)
}
inline std::string* NameMappingValue::mutable_relation() {
  std::string* _s = _internal_mutable_relation();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingValue.relation)
  return _s;
}
inline const std::string& NameMappingValue::_internal_relation() const {
  return _impl_.relation_.Get();
}
inline void NameMappingValue::_internal_set_relation(const std::string& value) {
  
  _impl_.relation_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingValue::_internal_mutable_relation() {
  
  return _impl_.relation_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingValue::release_relation() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingValue.relation)
  return _impl_.relation_.Release();
}
inline void NameMappingValue::set_allocated_relation(std::string* relation) {
  if (relation != nullptr) {
    
  } else {
    
  }
  _impl_.relation_.SetAllocated(relation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relation_.IsDefault()) {
    _impl_.relation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingValue.relation)
}

// string attribute = 4;
inline void NameMappingValue::clear_attribute() {
  _impl_.attribute_.ClearToEmpty();
}
inline const std::string& NameMappingValue::attribute() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.NameMappingValue.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameMappingValue::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attribute_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.NameMappingValue.attribute)
}
inline std::string* NameMappingValue::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.NameMappingValue.attribute)
  return _s;
}
inline const std::string& NameMappingValue::_internal_attribute() const {
  return _impl_.attribute_.Get();
}
inline void NameMappingValue::_internal_set_attribute(const std::string& value) {
  
  _impl_.attribute_.Set(value, GetArenaForAllocation());
}
inline std::string* NameMappingValue::_internal_mutable_attribute() {
  
  return _impl_.attribute_.Mutable(GetArenaForAllocation());
}
inline std::string* NameMappingValue::release_attribute() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.NameMappingValue.attribute)
  return _impl_.attribute_.Release();
}
inline void NameMappingValue::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  _impl_.attribute_.SetAllocated(attribute, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attribute_.IsDefault()) {
    _impl_.attribute_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.NameMappingValue.attribute)
}

// -------------------------------------------------------------------

// SourceEnv

// string default_database = 1;
inline void SourceEnv::clear_default_database() {
  _impl_.default_database_.ClearToEmpty();
}
inline const std::string& SourceEnv::default_database() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.SourceEnv.default_database)
  return _internal_default_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceEnv::set_default_database(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default_database_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.SourceEnv.default_database)
}
inline std::string* SourceEnv::mutable_default_database() {
  std::string* _s = _internal_mutable_default_database();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.SourceEnv.default_database)
  return _s;
}
inline const std::string& SourceEnv::_internal_default_database() const {
  return _impl_.default_database_.Get();
}
inline void SourceEnv::_internal_set_default_database(const std::string& value) {
  
  _impl_.default_database_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceEnv::_internal_mutable_default_database() {
  
  return _impl_.default_database_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceEnv::release_default_database() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.SourceEnv.default_database)
  return _impl_.default_database_.Release();
}
inline void SourceEnv::set_allocated_default_database(std::string* default_database) {
  if (default_database != nullptr) {
    
  } else {
    
  }
  _impl_.default_database_.SetAllocated(default_database, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_database_.IsDefault()) {
    _impl_.default_database_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.SourceEnv.default_database)
}

// repeated string schema_search_path = 2;
inline int SourceEnv::_internal_schema_search_path_size() const {
  return _impl_.schema_search_path_.size();
}
inline int SourceEnv::schema_search_path_size() const {
  return _internal_schema_search_path_size();
}
inline void SourceEnv::clear_schema_search_path() {
  _impl_.schema_search_path_.Clear();
}
inline std::string* SourceEnv::add_schema_search_path() {
  std::string* _s = _internal_add_schema_search_path();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
  return _s;
}
inline const std::string& SourceEnv::_internal_schema_search_path(int index) const {
  return _impl_.schema_search_path_.Get(index);
}
inline const std::string& SourceEnv::schema_search_path(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
  return _internal_schema_search_path(index);
}
inline std::string* SourceEnv::mutable_schema_search_path(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
  return _impl_.schema_search_path_.Mutable(index);
}
inline void SourceEnv::set_schema_search_path(int index, const std::string& value) {
  _impl_.schema_search_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::set_schema_search_path(int index, std::string&& value) {
  _impl_.schema_search_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::set_schema_search_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.schema_search_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::set_schema_search_path(int index, const char* value, size_t size) {
  _impl_.schema_search_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline std::string* SourceEnv::_internal_add_schema_search_path() {
  return _impl_.schema_search_path_.Add();
}
inline void SourceEnv::add_schema_search_path(const std::string& value) {
  _impl_.schema_search_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::add_schema_search_path(std::string&& value) {
  _impl_.schema_search_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::add_schema_search_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.schema_search_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline void SourceEnv::add_schema_search_path(const char* value, size_t size) {
  _impl_.schema_search_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SourceEnv::schema_search_path() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
  return _impl_.schema_search_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SourceEnv::mutable_schema_search_path() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.SourceEnv.schema_search_path)
  return &_impl_.schema_search_path_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode>() {
  return ::google::cloud::bigquery::migration::v2::TeradataDialect_Mode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::migration::v2::NameMappingKey_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::migration::v2::NameMappingKey_Type>() {
  return ::google::cloud::bigquery::migration::v2::NameMappingKey_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2ftranslation_5fconfig_2eproto
