// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/migration/v2/migration_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/migration/v2/migration_entities.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {
class CreateMigrationWorkflowRequest;
struct CreateMigrationWorkflowRequestDefaultTypeInternal;
extern CreateMigrationWorkflowRequestDefaultTypeInternal _CreateMigrationWorkflowRequest_default_instance_;
class DeleteMigrationWorkflowRequest;
struct DeleteMigrationWorkflowRequestDefaultTypeInternal;
extern DeleteMigrationWorkflowRequestDefaultTypeInternal _DeleteMigrationWorkflowRequest_default_instance_;
class GetMigrationSubtaskRequest;
struct GetMigrationSubtaskRequestDefaultTypeInternal;
extern GetMigrationSubtaskRequestDefaultTypeInternal _GetMigrationSubtaskRequest_default_instance_;
class GetMigrationWorkflowRequest;
struct GetMigrationWorkflowRequestDefaultTypeInternal;
extern GetMigrationWorkflowRequestDefaultTypeInternal _GetMigrationWorkflowRequest_default_instance_;
class ListMigrationSubtasksRequest;
struct ListMigrationSubtasksRequestDefaultTypeInternal;
extern ListMigrationSubtasksRequestDefaultTypeInternal _ListMigrationSubtasksRequest_default_instance_;
class ListMigrationSubtasksResponse;
struct ListMigrationSubtasksResponseDefaultTypeInternal;
extern ListMigrationSubtasksResponseDefaultTypeInternal _ListMigrationSubtasksResponse_default_instance_;
class ListMigrationWorkflowsRequest;
struct ListMigrationWorkflowsRequestDefaultTypeInternal;
extern ListMigrationWorkflowsRequestDefaultTypeInternal _ListMigrationWorkflowsRequest_default_instance_;
class ListMigrationWorkflowsResponse;
struct ListMigrationWorkflowsResponseDefaultTypeInternal;
extern ListMigrationWorkflowsResponseDefaultTypeInternal _ListMigrationWorkflowsResponse_default_instance_;
class StartMigrationWorkflowRequest;
struct StartMigrationWorkflowRequestDefaultTypeInternal;
extern StartMigrationWorkflowRequestDefaultTypeInternal _StartMigrationWorkflowRequest_default_instance_;
}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::migration::v2::CreateMigrationWorkflowRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::CreateMigrationWorkflowRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::DeleteMigrationWorkflowRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::DeleteMigrationWorkflowRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::GetMigrationSubtaskRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::GetMigrationSubtaskRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::GetMigrationWorkflowRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::GetMigrationWorkflowRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ListMigrationSubtasksRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ListMigrationSubtasksRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ListMigrationSubtasksResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ListMigrationSubtasksResponse>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ListMigrationWorkflowsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ListMigrationWorkflowsRequest>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::ListMigrationWorkflowsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::ListMigrationWorkflowsResponse>(Arena*);
template<> ::google::cloud::bigquery::migration::v2::StartMigrationWorkflowRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::migration::v2::StartMigrationWorkflowRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace migration {
namespace v2 {

// ===================================================================

class CreateMigrationWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest) */ {
 public:
  inline CreateMigrationWorkflowRequest() : CreateMigrationWorkflowRequest(nullptr) {}
  ~CreateMigrationWorkflowRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMigrationWorkflowRequest(const CreateMigrationWorkflowRequest& from);
  CreateMigrationWorkflowRequest(CreateMigrationWorkflowRequest&& from) noexcept
    : CreateMigrationWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline CreateMigrationWorkflowRequest& operator=(const CreateMigrationWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMigrationWorkflowRequest& operator=(CreateMigrationWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMigrationWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMigrationWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMigrationWorkflowRequest*>(
               &_CreateMigrationWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateMigrationWorkflowRequest& a, CreateMigrationWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMigrationWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMigrationWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMigrationWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMigrationWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMigrationWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateMigrationWorkflowRequest& from) {
    CreateMigrationWorkflowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMigrationWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest";
  }
  protected:
  explicit CreateMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kMigrationWorkflowFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.migration.v2.MigrationWorkflow migration_workflow = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_migration_workflow() const;
  private:
  bool _internal_has_migration_workflow() const;
  public:
  void clear_migration_workflow();
  const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& migration_workflow() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::migration::v2::MigrationWorkflow* release_migration_workflow();
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* mutable_migration_workflow();
  void set_allocated_migration_workflow(::google::cloud::bigquery::migration::v2::MigrationWorkflow* migration_workflow);
  private:
  const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& _internal_migration_workflow() const;
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* _internal_mutable_migration_workflow();
  public:
  void unsafe_arena_set_allocated_migration_workflow(
      ::google::cloud::bigquery::migration::v2::MigrationWorkflow* migration_workflow);
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* unsafe_arena_release_migration_workflow();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::bigquery::migration::v2::MigrationWorkflow* migration_workflow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMigrationWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest) */ {
 public:
  inline GetMigrationWorkflowRequest() : GetMigrationWorkflowRequest(nullptr) {}
  ~GetMigrationWorkflowRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMigrationWorkflowRequest(const GetMigrationWorkflowRequest& from);
  GetMigrationWorkflowRequest(GetMigrationWorkflowRequest&& from) noexcept
    : GetMigrationWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline GetMigrationWorkflowRequest& operator=(const GetMigrationWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMigrationWorkflowRequest& operator=(GetMigrationWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMigrationWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMigrationWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const GetMigrationWorkflowRequest*>(
               &_GetMigrationWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMigrationWorkflowRequest& a, GetMigrationWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMigrationWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMigrationWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMigrationWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMigrationWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMigrationWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMigrationWorkflowRequest& from) {
    GetMigrationWorkflowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMigrationWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest";
  }
  protected:
  explicit GetMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReadMaskFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.FieldMask read_mask = 2;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMigrationWorkflowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest) */ {
 public:
  inline ListMigrationWorkflowsRequest() : ListMigrationWorkflowsRequest(nullptr) {}
  ~ListMigrationWorkflowsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListMigrationWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMigrationWorkflowsRequest(const ListMigrationWorkflowsRequest& from);
  ListMigrationWorkflowsRequest(ListMigrationWorkflowsRequest&& from) noexcept
    : ListMigrationWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline ListMigrationWorkflowsRequest& operator=(const ListMigrationWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMigrationWorkflowsRequest& operator=(ListMigrationWorkflowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMigrationWorkflowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMigrationWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMigrationWorkflowsRequest*>(
               &_ListMigrationWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListMigrationWorkflowsRequest& a, ListMigrationWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMigrationWorkflowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMigrationWorkflowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMigrationWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMigrationWorkflowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMigrationWorkflowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMigrationWorkflowsRequest& from) {
    ListMigrationWorkflowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMigrationWorkflowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest";
  }
  protected:
  explicit ListMigrationWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kReadMaskFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .google.protobuf.FieldMask read_mask = 2;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMigrationWorkflowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse) */ {
 public:
  inline ListMigrationWorkflowsResponse() : ListMigrationWorkflowsResponse(nullptr) {}
  ~ListMigrationWorkflowsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListMigrationWorkflowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMigrationWorkflowsResponse(const ListMigrationWorkflowsResponse& from);
  ListMigrationWorkflowsResponse(ListMigrationWorkflowsResponse&& from) noexcept
    : ListMigrationWorkflowsResponse() {
    *this = ::std::move(from);
  }

  inline ListMigrationWorkflowsResponse& operator=(const ListMigrationWorkflowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMigrationWorkflowsResponse& operator=(ListMigrationWorkflowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMigrationWorkflowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMigrationWorkflowsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMigrationWorkflowsResponse*>(
               &_ListMigrationWorkflowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListMigrationWorkflowsResponse& a, ListMigrationWorkflowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMigrationWorkflowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMigrationWorkflowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMigrationWorkflowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMigrationWorkflowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMigrationWorkflowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMigrationWorkflowsResponse& from) {
    ListMigrationWorkflowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMigrationWorkflowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse";
  }
  protected:
  explicit ListMigrationWorkflowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMigrationWorkflowsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.migration.v2.MigrationWorkflow migration_workflows = 1;
  int migration_workflows_size() const;
  private:
  int _internal_migration_workflows_size() const;
  public:
  void clear_migration_workflows();
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* mutable_migration_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationWorkflow >*
      mutable_migration_workflows();
  private:
  const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& _internal_migration_workflows(int index) const;
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* _internal_add_migration_workflows();
  public:
  const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& migration_workflows(int index) const;
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* add_migration_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationWorkflow >&
      migration_workflows() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationWorkflow > migration_workflows_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteMigrationWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest) */ {
 public:
  inline DeleteMigrationWorkflowRequest() : DeleteMigrationWorkflowRequest(nullptr) {}
  ~DeleteMigrationWorkflowRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMigrationWorkflowRequest(const DeleteMigrationWorkflowRequest& from);
  DeleteMigrationWorkflowRequest(DeleteMigrationWorkflowRequest&& from) noexcept
    : DeleteMigrationWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMigrationWorkflowRequest& operator=(const DeleteMigrationWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMigrationWorkflowRequest& operator=(DeleteMigrationWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMigrationWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMigrationWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMigrationWorkflowRequest*>(
               &_DeleteMigrationWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteMigrationWorkflowRequest& a, DeleteMigrationWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMigrationWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMigrationWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMigrationWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMigrationWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMigrationWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMigrationWorkflowRequest& from) {
    DeleteMigrationWorkflowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMigrationWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest";
  }
  protected:
  explicit DeleteMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartMigrationWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest) */ {
 public:
  inline StartMigrationWorkflowRequest() : StartMigrationWorkflowRequest(nullptr) {}
  ~StartMigrationWorkflowRequest() override;
  explicit PROTOBUF_CONSTEXPR StartMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMigrationWorkflowRequest(const StartMigrationWorkflowRequest& from);
  StartMigrationWorkflowRequest(StartMigrationWorkflowRequest&& from) noexcept
    : StartMigrationWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline StartMigrationWorkflowRequest& operator=(const StartMigrationWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMigrationWorkflowRequest& operator=(StartMigrationWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartMigrationWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMigrationWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const StartMigrationWorkflowRequest*>(
               &_StartMigrationWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartMigrationWorkflowRequest& a, StartMigrationWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMigrationWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMigrationWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMigrationWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMigrationWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartMigrationWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartMigrationWorkflowRequest& from) {
    StartMigrationWorkflowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMigrationWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest";
  }
  protected:
  explicit StartMigrationWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMigrationSubtaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest) */ {
 public:
  inline GetMigrationSubtaskRequest() : GetMigrationSubtaskRequest(nullptr) {}
  ~GetMigrationSubtaskRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMigrationSubtaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMigrationSubtaskRequest(const GetMigrationSubtaskRequest& from);
  GetMigrationSubtaskRequest(GetMigrationSubtaskRequest&& from) noexcept
    : GetMigrationSubtaskRequest() {
    *this = ::std::move(from);
  }

  inline GetMigrationSubtaskRequest& operator=(const GetMigrationSubtaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMigrationSubtaskRequest& operator=(GetMigrationSubtaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMigrationSubtaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMigrationSubtaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetMigrationSubtaskRequest*>(
               &_GetMigrationSubtaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetMigrationSubtaskRequest& a, GetMigrationSubtaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMigrationSubtaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMigrationSubtaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMigrationSubtaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMigrationSubtaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMigrationSubtaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMigrationSubtaskRequest& from) {
    GetMigrationSubtaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMigrationSubtaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest";
  }
  protected:
  explicit GetMigrationSubtaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReadMaskFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.FieldMask read_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMigrationSubtasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest) */ {
 public:
  inline ListMigrationSubtasksRequest() : ListMigrationSubtasksRequest(nullptr) {}
  ~ListMigrationSubtasksRequest() override;
  explicit PROTOBUF_CONSTEXPR ListMigrationSubtasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMigrationSubtasksRequest(const ListMigrationSubtasksRequest& from);
  ListMigrationSubtasksRequest(ListMigrationSubtasksRequest&& from) noexcept
    : ListMigrationSubtasksRequest() {
    *this = ::std::move(from);
  }

  inline ListMigrationSubtasksRequest& operator=(const ListMigrationSubtasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMigrationSubtasksRequest& operator=(ListMigrationSubtasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMigrationSubtasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMigrationSubtasksRequest* internal_default_instance() {
    return reinterpret_cast<const ListMigrationSubtasksRequest*>(
               &_ListMigrationSubtasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListMigrationSubtasksRequest& a, ListMigrationSubtasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMigrationSubtasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMigrationSubtasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMigrationSubtasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMigrationSubtasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMigrationSubtasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMigrationSubtasksRequest& from) {
    ListMigrationSubtasksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMigrationSubtasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest";
  }
  protected:
  explicit ListMigrationSubtasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kFilterFieldNumber = 5,
    kReadMaskFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.protobuf.FieldMask read_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListMigrationSubtasksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse) */ {
 public:
  inline ListMigrationSubtasksResponse() : ListMigrationSubtasksResponse(nullptr) {}
  ~ListMigrationSubtasksResponse() override;
  explicit PROTOBUF_CONSTEXPR ListMigrationSubtasksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMigrationSubtasksResponse(const ListMigrationSubtasksResponse& from);
  ListMigrationSubtasksResponse(ListMigrationSubtasksResponse&& from) noexcept
    : ListMigrationSubtasksResponse() {
    *this = ::std::move(from);
  }

  inline ListMigrationSubtasksResponse& operator=(const ListMigrationSubtasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMigrationSubtasksResponse& operator=(ListMigrationSubtasksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMigrationSubtasksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMigrationSubtasksResponse* internal_default_instance() {
    return reinterpret_cast<const ListMigrationSubtasksResponse*>(
               &_ListMigrationSubtasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListMigrationSubtasksResponse& a, ListMigrationSubtasksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMigrationSubtasksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMigrationSubtasksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMigrationSubtasksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMigrationSubtasksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMigrationSubtasksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListMigrationSubtasksResponse& from) {
    ListMigrationSubtasksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMigrationSubtasksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse";
  }
  protected:
  explicit ListMigrationSubtasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMigrationSubtasksFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.migration.v2.MigrationSubtask migration_subtasks = 1;
  int migration_subtasks_size() const;
  private:
  int _internal_migration_subtasks_size() const;
  public:
  void clear_migration_subtasks();
  ::google::cloud::bigquery::migration::v2::MigrationSubtask* mutable_migration_subtasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationSubtask >*
      mutable_migration_subtasks();
  private:
  const ::google::cloud::bigquery::migration::v2::MigrationSubtask& _internal_migration_subtasks(int index) const;
  ::google::cloud::bigquery::migration::v2::MigrationSubtask* _internal_add_migration_subtasks();
  public:
  const ::google::cloud::bigquery::migration::v2::MigrationSubtask& migration_subtasks(int index) const;
  ::google::cloud::bigquery::migration::v2::MigrationSubtask* add_migration_subtasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationSubtask >&
      migration_subtasks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationSubtask > migration_subtasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateMigrationWorkflowRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateMigrationWorkflowRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateMigrationWorkflowRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMigrationWorkflowRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.parent)
}
inline std::string* CreateMigrationWorkflowRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.parent)
  return _s;
}
inline const std::string& CreateMigrationWorkflowRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateMigrationWorkflowRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMigrationWorkflowRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMigrationWorkflowRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateMigrationWorkflowRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.parent)
}

// .google.cloud.bigquery.migration.v2.MigrationWorkflow migration_workflow = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateMigrationWorkflowRequest::_internal_has_migration_workflow() const {
  return this != internal_default_instance() && _impl_.migration_workflow_ != nullptr;
}
inline bool CreateMigrationWorkflowRequest::has_migration_workflow() const {
  return _internal_has_migration_workflow();
}
inline const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& CreateMigrationWorkflowRequest::_internal_migration_workflow() const {
  const ::google::cloud::bigquery::migration::v2::MigrationWorkflow* p = _impl_.migration_workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::migration::v2::MigrationWorkflow&>(
      ::google::cloud::bigquery::migration::v2::_MigrationWorkflow_default_instance_);
}
inline const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& CreateMigrationWorkflowRequest::migration_workflow() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.migration_workflow)
  return _internal_migration_workflow();
}
inline void CreateMigrationWorkflowRequest::unsafe_arena_set_allocated_migration_workflow(
    ::google::cloud::bigquery::migration::v2::MigrationWorkflow* migration_workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.migration_workflow_);
  }
  _impl_.migration_workflow_ = migration_workflow;
  if (migration_workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.migration_workflow)
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* CreateMigrationWorkflowRequest::release_migration_workflow() {
  
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* temp = _impl_.migration_workflow_;
  _impl_.migration_workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* CreateMigrationWorkflowRequest::unsafe_arena_release_migration_workflow() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.migration_workflow)
  
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* temp = _impl_.migration_workflow_;
  _impl_.migration_workflow_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* CreateMigrationWorkflowRequest::_internal_mutable_migration_workflow() {
  
  if (_impl_.migration_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::migration::v2::MigrationWorkflow>(GetArenaForAllocation());
    _impl_.migration_workflow_ = p;
  }
  return _impl_.migration_workflow_;
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* CreateMigrationWorkflowRequest::mutable_migration_workflow() {
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* _msg = _internal_mutable_migration_workflow();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.migration_workflow)
  return _msg;
}
inline void CreateMigrationWorkflowRequest::set_allocated_migration_workflow(::google::cloud::bigquery::migration::v2::MigrationWorkflow* migration_workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.migration_workflow_);
  }
  if (migration_workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migration_workflow));
    if (message_arena != submessage_arena) {
      migration_workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migration_workflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.migration_workflow_ = migration_workflow;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest.migration_workflow)
}

// -------------------------------------------------------------------

// GetMigrationWorkflowRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetMigrationWorkflowRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetMigrationWorkflowRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMigrationWorkflowRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.name)
}
inline std::string* GetMigrationWorkflowRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.name)
  return _s;
}
inline const std::string& GetMigrationWorkflowRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetMigrationWorkflowRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMigrationWorkflowRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMigrationWorkflowRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.name)
  return _impl_.name_.Release();
}
inline void GetMigrationWorkflowRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.name)
}

// .google.protobuf.FieldMask read_mask = 2;
inline bool GetMigrationWorkflowRequest::_internal_has_read_mask() const {
  return this != internal_default_instance() && _impl_.read_mask_ != nullptr;
}
inline bool GetMigrationWorkflowRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetMigrationWorkflowRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetMigrationWorkflowRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.read_mask)
  return _internal_read_mask();
}
inline void GetMigrationWorkflowRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationWorkflowRequest::release_read_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationWorkflowRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.read_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationWorkflowRequest::_internal_mutable_read_mask() {
  
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationWorkflowRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.read_mask)
  return _msg;
}
inline void GetMigrationWorkflowRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest.read_mask)
}

// -------------------------------------------------------------------

// ListMigrationWorkflowsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMigrationWorkflowsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListMigrationWorkflowsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationWorkflowsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.parent)
}
inline std::string* ListMigrationWorkflowsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.parent)
  return _s;
}
inline const std::string& ListMigrationWorkflowsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListMigrationWorkflowsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListMigrationWorkflowsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.parent)
}

// .google.protobuf.FieldMask read_mask = 2;
inline bool ListMigrationWorkflowsRequest::_internal_has_read_mask() const {
  return this != internal_default_instance() && _impl_.read_mask_ != nullptr;
}
inline bool ListMigrationWorkflowsRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListMigrationWorkflowsRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListMigrationWorkflowsRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.read_mask)
  return _internal_read_mask();
}
inline void ListMigrationWorkflowsRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationWorkflowsRequest::release_read_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationWorkflowsRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.read_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationWorkflowsRequest::_internal_mutable_read_mask() {
  
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationWorkflowsRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.read_mask)
  return _msg;
}
inline void ListMigrationWorkflowsRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.read_mask)
}

// int32 page_size = 3;
inline void ListMigrationWorkflowsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListMigrationWorkflowsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListMigrationWorkflowsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_size)
  return _internal_page_size();
}
inline void ListMigrationWorkflowsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListMigrationWorkflowsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_size)
}

// string page_token = 4;
inline void ListMigrationWorkflowsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListMigrationWorkflowsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationWorkflowsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_token)
}
inline std::string* ListMigrationWorkflowsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_token)
  return _s;
}
inline const std::string& ListMigrationWorkflowsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListMigrationWorkflowsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListMigrationWorkflowsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest.page_token)
}

// -------------------------------------------------------------------

// ListMigrationWorkflowsResponse

// repeated .google.cloud.bigquery.migration.v2.MigrationWorkflow migration_workflows = 1;
inline int ListMigrationWorkflowsResponse::_internal_migration_workflows_size() const {
  return _impl_.migration_workflows_.size();
}
inline int ListMigrationWorkflowsResponse::migration_workflows_size() const {
  return _internal_migration_workflows_size();
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* ListMigrationWorkflowsResponse::mutable_migration_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.migration_workflows)
  return _impl_.migration_workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationWorkflow >*
ListMigrationWorkflowsResponse::mutable_migration_workflows() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.migration_workflows)
  return &_impl_.migration_workflows_;
}
inline const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& ListMigrationWorkflowsResponse::_internal_migration_workflows(int index) const {
  return _impl_.migration_workflows_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::MigrationWorkflow& ListMigrationWorkflowsResponse::migration_workflows(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.migration_workflows)
  return _internal_migration_workflows(index);
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* ListMigrationWorkflowsResponse::_internal_add_migration_workflows() {
  return _impl_.migration_workflows_.Add();
}
inline ::google::cloud::bigquery::migration::v2::MigrationWorkflow* ListMigrationWorkflowsResponse::add_migration_workflows() {
  ::google::cloud::bigquery::migration::v2::MigrationWorkflow* _add = _internal_add_migration_workflows();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.migration_workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationWorkflow >&
ListMigrationWorkflowsResponse::migration_workflows() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.migration_workflows)
  return _impl_.migration_workflows_;
}

// string next_page_token = 2;
inline void ListMigrationWorkflowsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListMigrationWorkflowsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationWorkflowsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.next_page_token)
}
inline std::string* ListMigrationWorkflowsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.next_page_token)
  return _s;
}
inline const std::string& ListMigrationWorkflowsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListMigrationWorkflowsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationWorkflowsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListMigrationWorkflowsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationWorkflowsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteMigrationWorkflowRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteMigrationWorkflowRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteMigrationWorkflowRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMigrationWorkflowRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest.name)
}
inline std::string* DeleteMigrationWorkflowRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest.name)
  return _s;
}
inline const std::string& DeleteMigrationWorkflowRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteMigrationWorkflowRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMigrationWorkflowRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMigrationWorkflowRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteMigrationWorkflowRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest.name)
}

// -------------------------------------------------------------------

// StartMigrationWorkflowRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StartMigrationWorkflowRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StartMigrationWorkflowRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartMigrationWorkflowRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest.name)
}
inline std::string* StartMigrationWorkflowRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest.name)
  return _s;
}
inline const std::string& StartMigrationWorkflowRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StartMigrationWorkflowRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StartMigrationWorkflowRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StartMigrationWorkflowRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest.name)
  return _impl_.name_.Release();
}
inline void StartMigrationWorkflowRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest.name)
}

// -------------------------------------------------------------------

// GetMigrationSubtaskRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetMigrationSubtaskRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetMigrationSubtaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMigrationSubtaskRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.name)
}
inline std::string* GetMigrationSubtaskRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.name)
  return _s;
}
inline const std::string& GetMigrationSubtaskRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetMigrationSubtaskRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMigrationSubtaskRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMigrationSubtaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.name)
  return _impl_.name_.Release();
}
inline void GetMigrationSubtaskRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.name)
}

// .google.protobuf.FieldMask read_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool GetMigrationSubtaskRequest::_internal_has_read_mask() const {
  return this != internal_default_instance() && _impl_.read_mask_ != nullptr;
}
inline bool GetMigrationSubtaskRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetMigrationSubtaskRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetMigrationSubtaskRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.read_mask)
  return _internal_read_mask();
}
inline void GetMigrationSubtaskRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationSubtaskRequest::release_read_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationSubtaskRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.read_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationSubtaskRequest::_internal_mutable_read_mask() {
  
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetMigrationSubtaskRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.read_mask)
  return _msg;
}
inline void GetMigrationSubtaskRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest.read_mask)
}

// -------------------------------------------------------------------

// ListMigrationSubtasksRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMigrationSubtasksRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListMigrationSubtasksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationSubtasksRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.parent)
}
inline std::string* ListMigrationSubtasksRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.parent)
  return _s;
}
inline const std::string& ListMigrationSubtasksRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListMigrationSubtasksRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListMigrationSubtasksRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.parent)
}

// .google.protobuf.FieldMask read_mask = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool ListMigrationSubtasksRequest::_internal_has_read_mask() const {
  return this != internal_default_instance() && _impl_.read_mask_ != nullptr;
}
inline bool ListMigrationSubtasksRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListMigrationSubtasksRequest::_internal_read_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& ListMigrationSubtasksRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.read_mask)
  return _internal_read_mask();
}
inline void ListMigrationSubtasksRequest::unsafe_arena_set_allocated_read_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  _impl_.read_mask_ = read_mask;
  if (read_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.read_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationSubtasksRequest::release_read_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationSubtasksRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.read_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.read_mask_;
  _impl_.read_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationSubtasksRequest::_internal_mutable_read_mask() {
  
  if (_impl_.read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.read_mask_ = p;
  }
  return _impl_.read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* ListMigrationSubtasksRequest::mutable_read_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_read_mask();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.read_mask)
  return _msg;
}
inline void ListMigrationSubtasksRequest::set_allocated_read_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask));
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.read_mask)
}

// int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMigrationSubtasksRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListMigrationSubtasksRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListMigrationSubtasksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_size)
  return _internal_page_size();
}
inline void ListMigrationSubtasksRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListMigrationSubtasksRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_size)
}

// string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMigrationSubtasksRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListMigrationSubtasksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationSubtasksRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_token)
}
inline std::string* ListMigrationSubtasksRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_token)
  return _s;
}
inline const std::string& ListMigrationSubtasksRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListMigrationSubtasksRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListMigrationSubtasksRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.page_token)
}

// string filter = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void ListMigrationSubtasksRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListMigrationSubtasksRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationSubtasksRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.filter)
}
inline std::string* ListMigrationSubtasksRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.filter)
  return _s;
}
inline const std::string& ListMigrationSubtasksRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListMigrationSubtasksRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListMigrationSubtasksRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest.filter)
}

// -------------------------------------------------------------------

// ListMigrationSubtasksResponse

// repeated .google.cloud.bigquery.migration.v2.MigrationSubtask migration_subtasks = 1;
inline int ListMigrationSubtasksResponse::_internal_migration_subtasks_size() const {
  return _impl_.migration_subtasks_.size();
}
inline int ListMigrationSubtasksResponse::migration_subtasks_size() const {
  return _internal_migration_subtasks_size();
}
inline ::google::cloud::bigquery::migration::v2::MigrationSubtask* ListMigrationSubtasksResponse::mutable_migration_subtasks(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.migration_subtasks)
  return _impl_.migration_subtasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationSubtask >*
ListMigrationSubtasksResponse::mutable_migration_subtasks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.migration_subtasks)
  return &_impl_.migration_subtasks_;
}
inline const ::google::cloud::bigquery::migration::v2::MigrationSubtask& ListMigrationSubtasksResponse::_internal_migration_subtasks(int index) const {
  return _impl_.migration_subtasks_.Get(index);
}
inline const ::google::cloud::bigquery::migration::v2::MigrationSubtask& ListMigrationSubtasksResponse::migration_subtasks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.migration_subtasks)
  return _internal_migration_subtasks(index);
}
inline ::google::cloud::bigquery::migration::v2::MigrationSubtask* ListMigrationSubtasksResponse::_internal_add_migration_subtasks() {
  return _impl_.migration_subtasks_.Add();
}
inline ::google::cloud::bigquery::migration::v2::MigrationSubtask* ListMigrationSubtasksResponse::add_migration_subtasks() {
  ::google::cloud::bigquery::migration::v2::MigrationSubtask* _add = _internal_add_migration_subtasks();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.migration_subtasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::migration::v2::MigrationSubtask >&
ListMigrationSubtasksResponse::migration_subtasks() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.migration_subtasks)
  return _impl_.migration_subtasks_;
}

// string next_page_token = 2;
inline void ListMigrationSubtasksResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListMigrationSubtasksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMigrationSubtasksResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.next_page_token)
}
inline std::string* ListMigrationSubtasksResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.next_page_token)
  return _s;
}
inline const std::string& ListMigrationSubtasksResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListMigrationSubtasksResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListMigrationSubtasksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListMigrationSubtasksResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.migration.v2.ListMigrationSubtasksResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace migration
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fmigration_2fv2_2fmigration_5fservice_2eproto
