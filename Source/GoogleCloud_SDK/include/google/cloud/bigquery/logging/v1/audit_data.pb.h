// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/logging/v1/audit_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace logging {
namespace v1 {
class AuditData;
struct AuditDataDefaultTypeInternal;
extern AuditDataDefaultTypeInternal _AuditData_default_instance_;
class BigQueryAcl;
struct BigQueryAclDefaultTypeInternal;
extern BigQueryAclDefaultTypeInternal _BigQueryAcl_default_instance_;
class BigQueryAcl_Entry;
struct BigQueryAcl_EntryDefaultTypeInternal;
extern BigQueryAcl_EntryDefaultTypeInternal _BigQueryAcl_Entry_default_instance_;
class Dataset;
struct DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
class DatasetInfo;
struct DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class DatasetInfo_LabelsEntry_DoNotUse;
struct DatasetInfo_LabelsEntry_DoNotUseDefaultTypeInternal;
extern DatasetInfo_LabelsEntry_DoNotUseDefaultTypeInternal _DatasetInfo_LabelsEntry_DoNotUse_default_instance_;
class DatasetInsertRequest;
struct DatasetInsertRequestDefaultTypeInternal;
extern DatasetInsertRequestDefaultTypeInternal _DatasetInsertRequest_default_instance_;
class DatasetInsertResponse;
struct DatasetInsertResponseDefaultTypeInternal;
extern DatasetInsertResponseDefaultTypeInternal _DatasetInsertResponse_default_instance_;
class DatasetListRequest;
struct DatasetListRequestDefaultTypeInternal;
extern DatasetListRequestDefaultTypeInternal _DatasetListRequest_default_instance_;
class DatasetName;
struct DatasetNameDefaultTypeInternal;
extern DatasetNameDefaultTypeInternal _DatasetName_default_instance_;
class DatasetUpdateRequest;
struct DatasetUpdateRequestDefaultTypeInternal;
extern DatasetUpdateRequestDefaultTypeInternal _DatasetUpdateRequest_default_instance_;
class DatasetUpdateResponse;
struct DatasetUpdateResponseDefaultTypeInternal;
extern DatasetUpdateResponseDefaultTypeInternal _DatasetUpdateResponse_default_instance_;
class EncryptionInfo;
struct EncryptionInfoDefaultTypeInternal;
extern EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
class Job;
struct JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobCompletedEvent;
struct JobCompletedEventDefaultTypeInternal;
extern JobCompletedEventDefaultTypeInternal _JobCompletedEvent_default_instance_;
class JobConfiguration;
struct JobConfigurationDefaultTypeInternal;
extern JobConfigurationDefaultTypeInternal _JobConfiguration_default_instance_;
class JobConfiguration_Extract;
struct JobConfiguration_ExtractDefaultTypeInternal;
extern JobConfiguration_ExtractDefaultTypeInternal _JobConfiguration_Extract_default_instance_;
class JobConfiguration_LabelsEntry_DoNotUse;
struct JobConfiguration_LabelsEntry_DoNotUseDefaultTypeInternal;
extern JobConfiguration_LabelsEntry_DoNotUseDefaultTypeInternal _JobConfiguration_LabelsEntry_DoNotUse_default_instance_;
class JobConfiguration_Load;
struct JobConfiguration_LoadDefaultTypeInternal;
extern JobConfiguration_LoadDefaultTypeInternal _JobConfiguration_Load_default_instance_;
class JobConfiguration_Query;
struct JobConfiguration_QueryDefaultTypeInternal;
extern JobConfiguration_QueryDefaultTypeInternal _JobConfiguration_Query_default_instance_;
class JobConfiguration_TableCopy;
struct JobConfiguration_TableCopyDefaultTypeInternal;
extern JobConfiguration_TableCopyDefaultTypeInternal _JobConfiguration_TableCopy_default_instance_;
class JobGetQueryResultsRequest;
struct JobGetQueryResultsRequestDefaultTypeInternal;
extern JobGetQueryResultsRequestDefaultTypeInternal _JobGetQueryResultsRequest_default_instance_;
class JobGetQueryResultsResponse;
struct JobGetQueryResultsResponseDefaultTypeInternal;
extern JobGetQueryResultsResponseDefaultTypeInternal _JobGetQueryResultsResponse_default_instance_;
class JobInsertRequest;
struct JobInsertRequestDefaultTypeInternal;
extern JobInsertRequestDefaultTypeInternal _JobInsertRequest_default_instance_;
class JobInsertResponse;
struct JobInsertResponseDefaultTypeInternal;
extern JobInsertResponseDefaultTypeInternal _JobInsertResponse_default_instance_;
class JobName;
struct JobNameDefaultTypeInternal;
extern JobNameDefaultTypeInternal _JobName_default_instance_;
class JobQueryDoneResponse;
struct JobQueryDoneResponseDefaultTypeInternal;
extern JobQueryDoneResponseDefaultTypeInternal _JobQueryDoneResponse_default_instance_;
class JobQueryRequest;
struct JobQueryRequestDefaultTypeInternal;
extern JobQueryRequestDefaultTypeInternal _JobQueryRequest_default_instance_;
class JobQueryResponse;
struct JobQueryResponseDefaultTypeInternal;
extern JobQueryResponseDefaultTypeInternal _JobQueryResponse_default_instance_;
class JobStatistics;
struct JobStatisticsDefaultTypeInternal;
extern JobStatisticsDefaultTypeInternal _JobStatistics_default_instance_;
class JobStatistics_ReservationResourceUsage;
struct JobStatistics_ReservationResourceUsageDefaultTypeInternal;
extern JobStatistics_ReservationResourceUsageDefaultTypeInternal _JobStatistics_ReservationResourceUsage_default_instance_;
class JobStatus;
struct JobStatusDefaultTypeInternal;
extern JobStatusDefaultTypeInternal _JobStatus_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableDataListRequest;
struct TableDataListRequestDefaultTypeInternal;
extern TableDataListRequestDefaultTypeInternal _TableDataListRequest_default_instance_;
class TableDataReadEvent;
struct TableDataReadEventDefaultTypeInternal;
extern TableDataReadEventDefaultTypeInternal _TableDataReadEvent_default_instance_;
class TableDefinition;
struct TableDefinitionDefaultTypeInternal;
extern TableDefinitionDefaultTypeInternal _TableDefinition_default_instance_;
class TableInfo;
struct TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TableInfo_LabelsEntry_DoNotUse;
struct TableInfo_LabelsEntry_DoNotUseDefaultTypeInternal;
extern TableInfo_LabelsEntry_DoNotUseDefaultTypeInternal _TableInfo_LabelsEntry_DoNotUse_default_instance_;
class TableInsertRequest;
struct TableInsertRequestDefaultTypeInternal;
extern TableInsertRequestDefaultTypeInternal _TableInsertRequest_default_instance_;
class TableInsertResponse;
struct TableInsertResponseDefaultTypeInternal;
extern TableInsertResponseDefaultTypeInternal _TableInsertResponse_default_instance_;
class TableName;
struct TableNameDefaultTypeInternal;
extern TableNameDefaultTypeInternal _TableName_default_instance_;
class TableUpdateRequest;
struct TableUpdateRequestDefaultTypeInternal;
extern TableUpdateRequestDefaultTypeInternal _TableUpdateRequest_default_instance_;
class TableUpdateResponse;
struct TableUpdateResponseDefaultTypeInternal;
extern TableUpdateResponseDefaultTypeInternal _TableUpdateResponse_default_instance_;
class TableViewDefinition;
struct TableViewDefinitionDefaultTypeInternal;
extern TableViewDefinitionDefaultTypeInternal _TableViewDefinition_default_instance_;
}  // namespace v1
}  // namespace logging
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::logging::v1::AuditData* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::AuditData>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::BigQueryAcl* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::BigQueryAcl>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::Dataset* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Dataset>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetInfo* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetInfo>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetInfo_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetInsertRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetInsertResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetListRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetListRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetName* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetName>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetUpdateRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetUpdateResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::EncryptionInfo* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::EncryptionInfo>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::Job* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobCompletedEvent* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobCompletedEvent>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration_Extract>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration_Load>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration_Query>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobInsertRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobInsertRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobInsertResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobInsertResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobName* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobName>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobQueryDoneResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobQueryRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobQueryRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobQueryResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobQueryResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobStatistics* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobStatistics>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::JobStatus* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobStatus>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::Table* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Table>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableDataListRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableDataListRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableDataReadEvent* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableDataReadEvent>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableDefinition* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableDefinition>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableInfo* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableInfo>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableInfo_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableInsertRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableInsertRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableInsertResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableInsertResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableName* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableUpdateRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableUpdateRequest>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableUpdateResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableUpdateResponse>(Arena*);
template<> ::google::cloud::bigquery::logging::v1::TableViewDefinition* Arena::CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableViewDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace logging {
namespace v1 {

// ===================================================================

class AuditData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.AuditData) */ {
 public:
  inline AuditData() : AuditData(nullptr) {}
  ~AuditData() override;
  explicit PROTOBUF_CONSTEXPR AuditData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuditData(const AuditData& from);
  AuditData(AuditData&& from) noexcept
    : AuditData() {
    *this = ::std::move(from);
  }

  inline AuditData& operator=(const AuditData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditData& operator=(AuditData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditData& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kTableInsertRequest = 1,
    kTableUpdateRequest = 16,
    kDatasetListRequest = 2,
    kDatasetInsertRequest = 3,
    kDatasetUpdateRequest = 4,
    kJobInsertRequest = 5,
    kJobQueryRequest = 6,
    kJobGetQueryResultsRequest = 7,
    kTableDataListRequest = 8,
    kSetIamPolicyRequest = 20,
    REQUEST_NOT_SET = 0,
  };

  enum ResponseCase {
    kTableInsertResponse = 9,
    kTableUpdateResponse = 10,
    kDatasetInsertResponse = 11,
    kDatasetUpdateResponse = 12,
    kJobInsertResponse = 18,
    kJobQueryResponse = 13,
    kJobGetQueryResultsResponse = 14,
    kJobQueryDoneResponse = 15,
    kPolicyResponse = 21,
    RESPONSE_NOT_SET = 0,
  };

  static inline const AuditData* internal_default_instance() {
    return reinterpret_cast<const AuditData*>(
               &_AuditData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuditData& a, AuditData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuditData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuditData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuditData& from) {
    AuditData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.AuditData";
  }
  protected:
  explicit AuditData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableDataReadEventsFieldNumber = 19,
    kJobCompletedEventFieldNumber = 17,
    kTableInsertRequestFieldNumber = 1,
    kTableUpdateRequestFieldNumber = 16,
    kDatasetListRequestFieldNumber = 2,
    kDatasetInsertRequestFieldNumber = 3,
    kDatasetUpdateRequestFieldNumber = 4,
    kJobInsertRequestFieldNumber = 5,
    kJobQueryRequestFieldNumber = 6,
    kJobGetQueryResultsRequestFieldNumber = 7,
    kTableDataListRequestFieldNumber = 8,
    kSetIamPolicyRequestFieldNumber = 20,
    kTableInsertResponseFieldNumber = 9,
    kTableUpdateResponseFieldNumber = 10,
    kDatasetInsertResponseFieldNumber = 11,
    kDatasetUpdateResponseFieldNumber = 12,
    kJobInsertResponseFieldNumber = 18,
    kJobQueryResponseFieldNumber = 13,
    kJobGetQueryResultsResponseFieldNumber = 14,
    kJobQueryDoneResponseFieldNumber = 15,
    kPolicyResponseFieldNumber = 21,
  };
  // repeated .google.cloud.bigquery.logging.v1.TableDataReadEvent table_data_read_events = 19;
  int table_data_read_events_size() const;
  private:
  int _internal_table_data_read_events_size() const;
  public:
  void clear_table_data_read_events();
  ::google::cloud::bigquery::logging::v1::TableDataReadEvent* mutable_table_data_read_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDataReadEvent >*
      mutable_table_data_read_events();
  private:
  const ::google::cloud::bigquery::logging::v1::TableDataReadEvent& _internal_table_data_read_events(int index) const;
  ::google::cloud::bigquery::logging::v1::TableDataReadEvent* _internal_add_table_data_read_events();
  public:
  const ::google::cloud::bigquery::logging::v1::TableDataReadEvent& table_data_read_events(int index) const;
  ::google::cloud::bigquery::logging::v1::TableDataReadEvent* add_table_data_read_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDataReadEvent >&
      table_data_read_events() const;

  // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
  bool has_job_completed_event() const;
  private:
  bool _internal_has_job_completed_event() const;
  public:
  void clear_job_completed_event();
  const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& job_completed_event() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobCompletedEvent* release_job_completed_event();
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* mutable_job_completed_event();
  void set_allocated_job_completed_event(::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event);
  private:
  const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& _internal_job_completed_event() const;
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* _internal_mutable_job_completed_event();
  public:
  void unsafe_arena_set_allocated_job_completed_event(
      ::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event);
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* unsafe_arena_release_job_completed_event();

  // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
  bool has_table_insert_request() const;
  private:
  bool _internal_has_table_insert_request() const;
  public:
  void clear_table_insert_request();
  const ::google::cloud::bigquery::logging::v1::TableInsertRequest& table_insert_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableInsertRequest* release_table_insert_request();
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* mutable_table_insert_request();
  void set_allocated_table_insert_request(::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request);
  private:
  const ::google::cloud::bigquery::logging::v1::TableInsertRequest& _internal_table_insert_request() const;
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* _internal_mutable_table_insert_request();
  public:
  void unsafe_arena_set_allocated_table_insert_request(
      ::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request);
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* unsafe_arena_release_table_insert_request();

  // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
  bool has_table_update_request() const;
  private:
  bool _internal_has_table_update_request() const;
  public:
  void clear_table_update_request();
  const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& table_update_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableUpdateRequest* release_table_update_request();
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* mutable_table_update_request();
  void set_allocated_table_update_request(::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request);
  private:
  const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& _internal_table_update_request() const;
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* _internal_mutable_table_update_request();
  public:
  void unsafe_arena_set_allocated_table_update_request(
      ::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request);
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* unsafe_arena_release_table_update_request();

  // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
  bool has_dataset_list_request() const;
  private:
  bool _internal_has_dataset_list_request() const;
  public:
  void clear_dataset_list_request();
  const ::google::cloud::bigquery::logging::v1::DatasetListRequest& dataset_list_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetListRequest* release_dataset_list_request();
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* mutable_dataset_list_request();
  void set_allocated_dataset_list_request(::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetListRequest& _internal_dataset_list_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* _internal_mutable_dataset_list_request();
  public:
  void unsafe_arena_set_allocated_dataset_list_request(
      ::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request);
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* unsafe_arena_release_dataset_list_request();

  // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
  bool has_dataset_insert_request() const;
  private:
  bool _internal_has_dataset_insert_request() const;
  public:
  void clear_dataset_insert_request();
  const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& dataset_insert_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* release_dataset_insert_request();
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* mutable_dataset_insert_request();
  void set_allocated_dataset_insert_request(::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& _internal_dataset_insert_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* _internal_mutable_dataset_insert_request();
  public:
  void unsafe_arena_set_allocated_dataset_insert_request(
      ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request);
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* unsafe_arena_release_dataset_insert_request();

  // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
  bool has_dataset_update_request() const;
  private:
  bool _internal_has_dataset_update_request() const;
  public:
  void clear_dataset_update_request();
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& dataset_update_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* release_dataset_update_request();
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* mutable_dataset_update_request();
  void set_allocated_dataset_update_request(::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& _internal_dataset_update_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* _internal_mutable_dataset_update_request();
  public:
  void unsafe_arena_set_allocated_dataset_update_request(
      ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request);
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* unsafe_arena_release_dataset_update_request();

  // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
  bool has_job_insert_request() const;
  private:
  bool _internal_has_job_insert_request() const;
  public:
  void clear_job_insert_request();
  const ::google::cloud::bigquery::logging::v1::JobInsertRequest& job_insert_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobInsertRequest* release_job_insert_request();
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* mutable_job_insert_request();
  void set_allocated_job_insert_request(::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request);
  private:
  const ::google::cloud::bigquery::logging::v1::JobInsertRequest& _internal_job_insert_request() const;
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* _internal_mutable_job_insert_request();
  public:
  void unsafe_arena_set_allocated_job_insert_request(
      ::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request);
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* unsafe_arena_release_job_insert_request();

  // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
  bool has_job_query_request() const;
  private:
  bool _internal_has_job_query_request() const;
  public:
  void clear_job_query_request();
  const ::google::cloud::bigquery::logging::v1::JobQueryRequest& job_query_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobQueryRequest* release_job_query_request();
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* mutable_job_query_request();
  void set_allocated_job_query_request(::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request);
  private:
  const ::google::cloud::bigquery::logging::v1::JobQueryRequest& _internal_job_query_request() const;
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* _internal_mutable_job_query_request();
  public:
  void unsafe_arena_set_allocated_job_query_request(
      ::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request);
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* unsafe_arena_release_job_query_request();

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
  bool has_job_get_query_results_request() const;
  private:
  bool _internal_has_job_get_query_results_request() const;
  public:
  void clear_job_get_query_results_request();
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& job_get_query_results_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* release_job_get_query_results_request();
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* mutable_job_get_query_results_request();
  void set_allocated_job_get_query_results_request(::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request);
  private:
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& _internal_job_get_query_results_request() const;
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* _internal_mutable_job_get_query_results_request();
  public:
  void unsafe_arena_set_allocated_job_get_query_results_request(
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request);
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* unsafe_arena_release_job_get_query_results_request();

  // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
  bool has_table_data_list_request() const;
  private:
  bool _internal_has_table_data_list_request() const;
  public:
  void clear_table_data_list_request();
  const ::google::cloud::bigquery::logging::v1::TableDataListRequest& table_data_list_request() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableDataListRequest* release_table_data_list_request();
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* mutable_table_data_list_request();
  void set_allocated_table_data_list_request(::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request);
  private:
  const ::google::cloud::bigquery::logging::v1::TableDataListRequest& _internal_table_data_list_request() const;
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* _internal_mutable_table_data_list_request();
  public:
  void unsafe_arena_set_allocated_table_data_list_request(
      ::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request);
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* unsafe_arena_release_table_data_list_request();

  // .google.iam.v1.SetIamPolicyRequest set_iam_policy_request = 20;
  bool has_set_iam_policy_request() const;
  private:
  bool _internal_has_set_iam_policy_request() const;
  public:
  void clear_set_iam_policy_request();
  const ::google::iam::v1::SetIamPolicyRequest& set_iam_policy_request() const;
  PROTOBUF_NODISCARD ::google::iam::v1::SetIamPolicyRequest* release_set_iam_policy_request();
  ::google::iam::v1::SetIamPolicyRequest* mutable_set_iam_policy_request();
  void set_allocated_set_iam_policy_request(::google::iam::v1::SetIamPolicyRequest* set_iam_policy_request);
  private:
  const ::google::iam::v1::SetIamPolicyRequest& _internal_set_iam_policy_request() const;
  ::google::iam::v1::SetIamPolicyRequest* _internal_mutable_set_iam_policy_request();
  public:
  void unsafe_arena_set_allocated_set_iam_policy_request(
      ::google::iam::v1::SetIamPolicyRequest* set_iam_policy_request);
  ::google::iam::v1::SetIamPolicyRequest* unsafe_arena_release_set_iam_policy_request();

  // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
  bool has_table_insert_response() const;
  private:
  bool _internal_has_table_insert_response() const;
  public:
  void clear_table_insert_response();
  const ::google::cloud::bigquery::logging::v1::TableInsertResponse& table_insert_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableInsertResponse* release_table_insert_response();
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* mutable_table_insert_response();
  void set_allocated_table_insert_response(::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response);
  private:
  const ::google::cloud::bigquery::logging::v1::TableInsertResponse& _internal_table_insert_response() const;
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* _internal_mutable_table_insert_response();
  public:
  void unsafe_arena_set_allocated_table_insert_response(
      ::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response);
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* unsafe_arena_release_table_insert_response();

  // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
  bool has_table_update_response() const;
  private:
  bool _internal_has_table_update_response() const;
  public:
  void clear_table_update_response();
  const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& table_update_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableUpdateResponse* release_table_update_response();
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* mutable_table_update_response();
  void set_allocated_table_update_response(::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response);
  private:
  const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& _internal_table_update_response() const;
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* _internal_mutable_table_update_response();
  public:
  void unsafe_arena_set_allocated_table_update_response(
      ::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response);
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* unsafe_arena_release_table_update_response();

  // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
  bool has_dataset_insert_response() const;
  private:
  bool _internal_has_dataset_insert_response() const;
  public:
  void clear_dataset_insert_response();
  const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& dataset_insert_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* release_dataset_insert_response();
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* mutable_dataset_insert_response();
  void set_allocated_dataset_insert_response(::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& _internal_dataset_insert_response() const;
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* _internal_mutable_dataset_insert_response();
  public:
  void unsafe_arena_set_allocated_dataset_insert_response(
      ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response);
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* unsafe_arena_release_dataset_insert_response();

  // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
  bool has_dataset_update_response() const;
  private:
  bool _internal_has_dataset_update_response() const;
  public:
  void clear_dataset_update_response();
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& dataset_update_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* release_dataset_update_response();
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* mutable_dataset_update_response();
  void set_allocated_dataset_update_response(::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& _internal_dataset_update_response() const;
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* _internal_mutable_dataset_update_response();
  public:
  void unsafe_arena_set_allocated_dataset_update_response(
      ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response);
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* unsafe_arena_release_dataset_update_response();

  // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
  bool has_job_insert_response() const;
  private:
  bool _internal_has_job_insert_response() const;
  public:
  void clear_job_insert_response();
  const ::google::cloud::bigquery::logging::v1::JobInsertResponse& job_insert_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobInsertResponse* release_job_insert_response();
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* mutable_job_insert_response();
  void set_allocated_job_insert_response(::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response);
  private:
  const ::google::cloud::bigquery::logging::v1::JobInsertResponse& _internal_job_insert_response() const;
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* _internal_mutable_job_insert_response();
  public:
  void unsafe_arena_set_allocated_job_insert_response(
      ::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response);
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* unsafe_arena_release_job_insert_response();

  // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
  bool has_job_query_response() const;
  private:
  bool _internal_has_job_query_response() const;
  public:
  void clear_job_query_response();
  const ::google::cloud::bigquery::logging::v1::JobQueryResponse& job_query_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobQueryResponse* release_job_query_response();
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* mutable_job_query_response();
  void set_allocated_job_query_response(::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response);
  private:
  const ::google::cloud::bigquery::logging::v1::JobQueryResponse& _internal_job_query_response() const;
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* _internal_mutable_job_query_response();
  public:
  void unsafe_arena_set_allocated_job_query_response(
      ::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response);
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* unsafe_arena_release_job_query_response();

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
  bool has_job_get_query_results_response() const;
  private:
  bool _internal_has_job_get_query_results_response() const;
  public:
  void clear_job_get_query_results_response();
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& job_get_query_results_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* release_job_get_query_results_response();
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* mutable_job_get_query_results_response();
  void set_allocated_job_get_query_results_response(::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response);
  private:
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& _internal_job_get_query_results_response() const;
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* _internal_mutable_job_get_query_results_response();
  public:
  void unsafe_arena_set_allocated_job_get_query_results_response(
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response);
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* unsafe_arena_release_job_get_query_results_response();

  // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
  bool has_job_query_done_response() const;
  private:
  bool _internal_has_job_query_done_response() const;
  public:
  void clear_job_query_done_response();
  const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& job_query_done_response() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* release_job_query_done_response();
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* mutable_job_query_done_response();
  void set_allocated_job_query_done_response(::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response);
  private:
  const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& _internal_job_query_done_response() const;
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* _internal_mutable_job_query_done_response();
  public:
  void unsafe_arena_set_allocated_job_query_done_response(
      ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response);
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* unsafe_arena_release_job_query_done_response();

  // .google.iam.v1.Policy policy_response = 21;
  bool has_policy_response() const;
  private:
  bool _internal_has_policy_response() const;
  public:
  void clear_policy_response();
  const ::google::iam::v1::Policy& policy_response() const;
  PROTOBUF_NODISCARD ::google::iam::v1::Policy* release_policy_response();
  ::google::iam::v1::Policy* mutable_policy_response();
  void set_allocated_policy_response(::google::iam::v1::Policy* policy_response);
  private:
  const ::google::iam::v1::Policy& _internal_policy_response() const;
  ::google::iam::v1::Policy* _internal_mutable_policy_response();
  public:
  void unsafe_arena_set_allocated_policy_response(
      ::google::iam::v1::Policy* policy_response);
  ::google::iam::v1::Policy* unsafe_arena_release_policy_response();

  void clear_request();
  RequestCase request_case() const;
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.AuditData)
 private:
  class _Internal;
  void set_has_table_insert_request();
  void set_has_table_update_request();
  void set_has_dataset_list_request();
  void set_has_dataset_insert_request();
  void set_has_dataset_update_request();
  void set_has_job_insert_request();
  void set_has_job_query_request();
  void set_has_job_get_query_results_request();
  void set_has_table_data_list_request();
  void set_has_set_iam_policy_request();
  void set_has_table_insert_response();
  void set_has_table_update_response();
  void set_has_dataset_insert_response();
  void set_has_dataset_update_response();
  void set_has_job_insert_response();
  void set_has_job_query_response();
  void set_has_job_get_query_results_response();
  void set_has_job_query_done_response();
  void set_has_policy_response();

  inline bool has_request() const;
  inline void clear_has_request();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDataReadEvent > table_data_read_events_;
    ::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event_;
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request_;
      ::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request_;
      ::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request_;
      ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request_;
      ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request_;
      ::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request_;
      ::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request_;
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request_;
      ::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request_;
      ::google::iam::v1::SetIamPolicyRequest* set_iam_policy_request_;
    } request_;
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response_;
      ::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response_;
      ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response_;
      ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response_;
      ::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response_;
      ::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response_;
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response_;
      ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response_;
      ::google::iam::v1::Policy* policy_response_;
    } response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableInsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInsertRequest) */ {
 public:
  inline TableInsertRequest() : TableInsertRequest(nullptr) {}
  ~TableInsertRequest() override;
  explicit PROTOBUF_CONSTEXPR TableInsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInsertRequest(const TableInsertRequest& from);
  TableInsertRequest(TableInsertRequest&& from) noexcept
    : TableInsertRequest() {
    *this = ::std::move(from);
  }

  inline TableInsertRequest& operator=(const TableInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInsertRequest& operator=(TableInsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInsertRequest* internal_default_instance() {
    return reinterpret_cast<const TableInsertRequest*>(
               &_TableInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TableInsertRequest& a, TableInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableInsertRequest& from) {
    TableInsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableInsertRequest";
  }
  protected:
  explicit TableInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Table& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Table* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Table* resource);
  ::google::cloud::bigquery::logging::v1::Table* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Table* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableUpdateRequest) */ {
 public:
  inline TableUpdateRequest() : TableUpdateRequest(nullptr) {}
  ~TableUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR TableUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableUpdateRequest(const TableUpdateRequest& from);
  TableUpdateRequest(TableUpdateRequest&& from) noexcept
    : TableUpdateRequest() {
    *this = ::std::move(from);
  }

  inline TableUpdateRequest& operator=(const TableUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableUpdateRequest& operator=(TableUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const TableUpdateRequest*>(
               &_TableUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TableUpdateRequest& a, TableUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TableUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableUpdateRequest& from) {
    TableUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableUpdateRequest";
  }
  protected:
  explicit TableUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Table& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Table* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Table* resource);
  ::google::cloud::bigquery::logging::v1::Table* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Table* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableInsertResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInsertResponse) */ {
 public:
  inline TableInsertResponse() : TableInsertResponse(nullptr) {}
  ~TableInsertResponse() override;
  explicit PROTOBUF_CONSTEXPR TableInsertResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInsertResponse(const TableInsertResponse& from);
  TableInsertResponse(TableInsertResponse&& from) noexcept
    : TableInsertResponse() {
    *this = ::std::move(from);
  }

  inline TableInsertResponse& operator=(const TableInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInsertResponse& operator=(TableInsertResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInsertResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInsertResponse* internal_default_instance() {
    return reinterpret_cast<const TableInsertResponse*>(
               &_TableInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TableInsertResponse& a, TableInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInsertResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInsertResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInsertResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableInsertResponse& from) {
    TableInsertResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInsertResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableInsertResponse";
  }
  protected:
  explicit TableInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Table& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Table* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Table* resource);
  ::google::cloud::bigquery::logging::v1::Table* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Table* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableUpdateResponse) */ {
 public:
  inline TableUpdateResponse() : TableUpdateResponse(nullptr) {}
  ~TableUpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR TableUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableUpdateResponse(const TableUpdateResponse& from);
  TableUpdateResponse(TableUpdateResponse&& from) noexcept
    : TableUpdateResponse() {
    *this = ::std::move(from);
  }

  inline TableUpdateResponse& operator=(const TableUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableUpdateResponse& operator=(TableUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const TableUpdateResponse*>(
               &_TableUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TableUpdateResponse& a, TableUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TableUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableUpdateResponse& from) {
    TableUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableUpdateResponse";
  }
  protected:
  explicit TableUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Table& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Table* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Table* resource);
  ::google::cloud::bigquery::logging::v1::Table* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Table* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetListRequest) */ {
 public:
  inline DatasetListRequest() : DatasetListRequest(nullptr) {}
  ~DatasetListRequest() override;
  explicit PROTOBUF_CONSTEXPR DatasetListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetListRequest(const DatasetListRequest& from);
  DatasetListRequest(DatasetListRequest&& from) noexcept
    : DatasetListRequest() {
    *this = ::std::move(from);
  }

  inline DatasetListRequest& operator=(const DatasetListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetListRequest& operator=(DatasetListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetListRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetListRequest*>(
               &_DatasetListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DatasetListRequest& a, DatasetListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetListRequest& from) {
    DatasetListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetListRequest";
  }
  protected:
  explicit DatasetListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListAllFieldNumber = 1,
  };
  // bool list_all = 1;
  void clear_list_all();
  bool list_all() const;
  void set_list_all(bool value);
  private:
  bool _internal_list_all() const;
  void _internal_set_list_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool list_all_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetInsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInsertRequest) */ {
 public:
  inline DatasetInsertRequest() : DatasetInsertRequest(nullptr) {}
  ~DatasetInsertRequest() override;
  explicit PROTOBUF_CONSTEXPR DatasetInsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetInsertRequest(const DatasetInsertRequest& from);
  DatasetInsertRequest(DatasetInsertRequest&& from) noexcept
    : DatasetInsertRequest() {
    *this = ::std::move(from);
  }

  inline DatasetInsertRequest& operator=(const DatasetInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInsertRequest& operator=(DatasetInsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetInsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetInsertRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetInsertRequest*>(
               &_DatasetInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DatasetInsertRequest& a, DatasetInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetInsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetInsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetInsertRequest& from) {
    DatasetInsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetInsertRequest";
  }
  protected:
  explicit DatasetInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Dataset& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Dataset* resource);
  ::google::cloud::bigquery::logging::v1::Dataset* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Dataset* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetInsertResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInsertResponse) */ {
 public:
  inline DatasetInsertResponse() : DatasetInsertResponse(nullptr) {}
  ~DatasetInsertResponse() override;
  explicit PROTOBUF_CONSTEXPR DatasetInsertResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetInsertResponse(const DatasetInsertResponse& from);
  DatasetInsertResponse(DatasetInsertResponse&& from) noexcept
    : DatasetInsertResponse() {
    *this = ::std::move(from);
  }

  inline DatasetInsertResponse& operator=(const DatasetInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInsertResponse& operator=(DatasetInsertResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetInsertResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetInsertResponse* internal_default_instance() {
    return reinterpret_cast<const DatasetInsertResponse*>(
               &_DatasetInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DatasetInsertResponse& a, DatasetInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInsertResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetInsertResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetInsertResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetInsertResponse& from) {
    DatasetInsertResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInsertResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetInsertResponse";
  }
  protected:
  explicit DatasetInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Dataset& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Dataset* resource);
  ::google::cloud::bigquery::logging::v1::Dataset* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Dataset* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetUpdateRequest) */ {
 public:
  inline DatasetUpdateRequest() : DatasetUpdateRequest(nullptr) {}
  ~DatasetUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR DatasetUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetUpdateRequest(const DatasetUpdateRequest& from);
  DatasetUpdateRequest(DatasetUpdateRequest&& from) noexcept
    : DatasetUpdateRequest() {
    *this = ::std::move(from);
  }

  inline DatasetUpdateRequest& operator=(const DatasetUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetUpdateRequest& operator=(DatasetUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetUpdateRequest*>(
               &_DatasetUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DatasetUpdateRequest& a, DatasetUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetUpdateRequest& from) {
    DatasetUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetUpdateRequest";
  }
  protected:
  explicit DatasetUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Dataset& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Dataset* resource);
  ::google::cloud::bigquery::logging::v1::Dataset* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Dataset* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetUpdateResponse) */ {
 public:
  inline DatasetUpdateResponse() : DatasetUpdateResponse(nullptr) {}
  ~DatasetUpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR DatasetUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetUpdateResponse(const DatasetUpdateResponse& from);
  DatasetUpdateResponse(DatasetUpdateResponse&& from) noexcept
    : DatasetUpdateResponse() {
    *this = ::std::move(from);
  }

  inline DatasetUpdateResponse& operator=(const DatasetUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetUpdateResponse& operator=(DatasetUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const DatasetUpdateResponse*>(
               &_DatasetUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DatasetUpdateResponse& a, DatasetUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetUpdateResponse& from) {
    DatasetUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetUpdateResponse";
  }
  protected:
  explicit DatasetUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Dataset& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Dataset* resource);
  ::google::cloud::bigquery::logging::v1::Dataset* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Dataset* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobInsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobInsertRequest) */ {
 public:
  inline JobInsertRequest() : JobInsertRequest(nullptr) {}
  ~JobInsertRequest() override;
  explicit PROTOBUF_CONSTEXPR JobInsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobInsertRequest(const JobInsertRequest& from);
  JobInsertRequest(JobInsertRequest&& from) noexcept
    : JobInsertRequest() {
    *this = ::std::move(from);
  }

  inline JobInsertRequest& operator=(const JobInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobInsertRequest& operator=(JobInsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobInsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobInsertRequest* internal_default_instance() {
    return reinterpret_cast<const JobInsertRequest*>(
               &_JobInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(JobInsertRequest& a, JobInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobInsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobInsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobInsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobInsertRequest& from) {
    JobInsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobInsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobInsertRequest";
  }
  protected:
  explicit JobInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Job& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_resource();
  ::google::cloud::bigquery::logging::v1::Job* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Job* resource);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Job* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobInsertResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobInsertResponse) */ {
 public:
  inline JobInsertResponse() : JobInsertResponse(nullptr) {}
  ~JobInsertResponse() override;
  explicit PROTOBUF_CONSTEXPR JobInsertResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobInsertResponse(const JobInsertResponse& from);
  JobInsertResponse(JobInsertResponse&& from) noexcept
    : JobInsertResponse() {
    *this = ::std::move(from);
  }

  inline JobInsertResponse& operator=(const JobInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobInsertResponse& operator=(JobInsertResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobInsertResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobInsertResponse* internal_default_instance() {
    return reinterpret_cast<const JobInsertResponse*>(
               &_JobInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(JobInsertResponse& a, JobInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobInsertResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobInsertResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobInsertResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobInsertResponse& from) {
    JobInsertResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobInsertResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobInsertResponse";
  }
  protected:
  explicit JobInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::cloud::bigquery::logging::v1::Job& resource() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_resource();
  ::google::cloud::bigquery::logging::v1::Job* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_resource() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::cloud::bigquery::logging::v1::Job* resource);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Job* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryRequest) */ {
 public:
  inline JobQueryRequest() : JobQueryRequest(nullptr) {}
  ~JobQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR JobQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobQueryRequest(const JobQueryRequest& from);
  JobQueryRequest(JobQueryRequest&& from) noexcept
    : JobQueryRequest() {
    *this = ::std::move(from);
  }

  inline JobQueryRequest& operator=(const JobQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobQueryRequest& operator=(JobQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobQueryRequest* internal_default_instance() {
    return reinterpret_cast<const JobQueryRequest*>(
               &_JobQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(JobQueryRequest& a, JobQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobQueryRequest& from) {
    JobQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobQueryRequest";
  }
  protected:
  explicit JobQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kProjectIdFieldNumber = 4,
    kDefaultDatasetFieldNumber = 3,
    kMaxResultsFieldNumber = 2,
    kDryRunFieldNumber = 5,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string project_id = 4;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
  bool has_default_dataset() const;
  private:
  bool _internal_has_default_dataset() const;
  public:
  void clear_default_dataset();
  const ::google::cloud::bigquery::logging::v1::DatasetName& default_dataset() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetName* release_default_dataset();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_default_dataset();
  void set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetName& _internal_default_dataset() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* _internal_mutable_default_dataset();
  public:
  void unsafe_arena_set_allocated_default_dataset(
      ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);
  ::google::cloud::bigquery::logging::v1::DatasetName* unsafe_arena_release_default_dataset();

  // uint32 max_results = 2;
  void clear_max_results();
  uint32_t max_results() const;
  void set_max_results(uint32_t value);
  private:
  uint32_t _internal_max_results() const;
  void _internal_set_max_results(uint32_t value);
  public:

  // bool dry_run = 5;
  void clear_dry_run();
  bool dry_run() const;
  void set_dry_run(bool value);
  private:
  bool _internal_dry_run() const;
  void _internal_set_dry_run(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset_;
    uint32_t max_results_;
    bool dry_run_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryResponse) */ {
 public:
  inline JobQueryResponse() : JobQueryResponse(nullptr) {}
  ~JobQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR JobQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobQueryResponse(const JobQueryResponse& from);
  JobQueryResponse(JobQueryResponse&& from) noexcept
    : JobQueryResponse() {
    *this = ::std::move(from);
  }

  inline JobQueryResponse& operator=(const JobQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobQueryResponse& operator=(JobQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobQueryResponse* internal_default_instance() {
    return reinterpret_cast<const JobQueryResponse*>(
               &_JobQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JobQueryResponse& a, JobQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobQueryResponse& from) {
    JobQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobQueryResponse";
  }
  protected:
  explicit JobQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 2,
    kTotalResultsFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_job() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::google::cloud::bigquery::logging::v1::Job* job);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_job();

  // uint64 total_results = 1;
  void clear_total_results();
  uint64_t total_results() const;
  void set_total_results(uint64_t value);
  private:
  uint64_t _internal_total_results() const;
  void _internal_set_total_results(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Job* job_;
    uint64_t total_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobGetQueryResultsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest) */ {
 public:
  inline JobGetQueryResultsRequest() : JobGetQueryResultsRequest(nullptr) {}
  ~JobGetQueryResultsRequest() override;
  explicit PROTOBUF_CONSTEXPR JobGetQueryResultsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobGetQueryResultsRequest(const JobGetQueryResultsRequest& from);
  JobGetQueryResultsRequest(JobGetQueryResultsRequest&& from) noexcept
    : JobGetQueryResultsRequest() {
    *this = ::std::move(from);
  }

  inline JobGetQueryResultsRequest& operator=(const JobGetQueryResultsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobGetQueryResultsRequest& operator=(JobGetQueryResultsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobGetQueryResultsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobGetQueryResultsRequest* internal_default_instance() {
    return reinterpret_cast<const JobGetQueryResultsRequest*>(
               &_JobGetQueryResultsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(JobGetQueryResultsRequest& a, JobGetQueryResultsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobGetQueryResultsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobGetQueryResultsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobGetQueryResultsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobGetQueryResultsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobGetQueryResultsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobGetQueryResultsRequest& from) {
    JobGetQueryResultsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobGetQueryResultsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest";
  }
  protected:
  explicit JobGetQueryResultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartRowFieldNumber = 2,
    kMaxResultsFieldNumber = 1,
  };
  // uint64 start_row = 2;
  void clear_start_row();
  uint64_t start_row() const;
  void set_start_row(uint64_t value);
  private:
  uint64_t _internal_start_row() const;
  void _internal_set_start_row(uint64_t value);
  public:

  // uint32 max_results = 1;
  void clear_max_results();
  uint32_t max_results() const;
  void set_max_results(uint32_t value);
  private:
  uint32_t _internal_max_results() const;
  void _internal_set_max_results(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t start_row_;
    uint32_t max_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobGetQueryResultsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse) */ {
 public:
  inline JobGetQueryResultsResponse() : JobGetQueryResultsResponse(nullptr) {}
  ~JobGetQueryResultsResponse() override;
  explicit PROTOBUF_CONSTEXPR JobGetQueryResultsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobGetQueryResultsResponse(const JobGetQueryResultsResponse& from);
  JobGetQueryResultsResponse(JobGetQueryResultsResponse&& from) noexcept
    : JobGetQueryResultsResponse() {
    *this = ::std::move(from);
  }

  inline JobGetQueryResultsResponse& operator=(const JobGetQueryResultsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobGetQueryResultsResponse& operator=(JobGetQueryResultsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobGetQueryResultsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobGetQueryResultsResponse* internal_default_instance() {
    return reinterpret_cast<const JobGetQueryResultsResponse*>(
               &_JobGetQueryResultsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(JobGetQueryResultsResponse& a, JobGetQueryResultsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobGetQueryResultsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobGetQueryResultsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobGetQueryResultsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobGetQueryResultsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobGetQueryResultsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobGetQueryResultsResponse& from) {
    JobGetQueryResultsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobGetQueryResultsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse";
  }
  protected:
  explicit JobGetQueryResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 2,
    kTotalResultsFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_job() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::google::cloud::bigquery::logging::v1::Job* job);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_job();

  // uint64 total_results = 1;
  void clear_total_results();
  uint64_t total_results() const;
  void set_total_results(uint64_t value);
  private:
  uint64_t _internal_total_results() const;
  void _internal_set_total_results(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Job* job_;
    uint64_t total_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobQueryDoneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryDoneResponse) */ {
 public:
  inline JobQueryDoneResponse() : JobQueryDoneResponse(nullptr) {}
  ~JobQueryDoneResponse() override;
  explicit PROTOBUF_CONSTEXPR JobQueryDoneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobQueryDoneResponse(const JobQueryDoneResponse& from);
  JobQueryDoneResponse(JobQueryDoneResponse&& from) noexcept
    : JobQueryDoneResponse() {
    *this = ::std::move(from);
  }

  inline JobQueryDoneResponse& operator=(const JobQueryDoneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobQueryDoneResponse& operator=(JobQueryDoneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobQueryDoneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobQueryDoneResponse* internal_default_instance() {
    return reinterpret_cast<const JobQueryDoneResponse*>(
               &_JobQueryDoneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(JobQueryDoneResponse& a, JobQueryDoneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobQueryDoneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobQueryDoneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobQueryDoneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobQueryDoneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobQueryDoneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobQueryDoneResponse& from) {
    JobQueryDoneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobQueryDoneResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobQueryDoneResponse";
  }
  protected:
  explicit JobQueryDoneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 1,
  };
  // .google.cloud.bigquery.logging.v1.Job job = 1;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_job() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::google::cloud::bigquery::logging::v1::Job* job);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_job();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::Job* job_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobCompletedEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobCompletedEvent) */ {
 public:
  inline JobCompletedEvent() : JobCompletedEvent(nullptr) {}
  ~JobCompletedEvent() override;
  explicit PROTOBUF_CONSTEXPR JobCompletedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobCompletedEvent(const JobCompletedEvent& from);
  JobCompletedEvent(JobCompletedEvent&& from) noexcept
    : JobCompletedEvent() {
    *this = ::std::move(from);
  }

  inline JobCompletedEvent& operator=(const JobCompletedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobCompletedEvent& operator=(JobCompletedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobCompletedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobCompletedEvent* internal_default_instance() {
    return reinterpret_cast<const JobCompletedEvent*>(
               &_JobCompletedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JobCompletedEvent& a, JobCompletedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(JobCompletedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobCompletedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobCompletedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobCompletedEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobCompletedEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobCompletedEvent& from) {
    JobCompletedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobCompletedEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobCompletedEvent";
  }
  protected:
  explicit JobCompletedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 1,
    kJobFieldNumber = 2,
  };
  // string event_name = 1;
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);
  private:
  const ::google::cloud::bigquery::logging::v1::Job& _internal_job() const;
  ::google::cloud::bigquery::logging::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::google::cloud::bigquery::logging::v1::Job* job);
  ::google::cloud::bigquery::logging::v1::Job* unsafe_arena_release_job();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobCompletedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
    ::google::cloud::bigquery::logging::v1::Job* job_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableDataReadEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableDataReadEvent) */ {
 public:
  inline TableDataReadEvent() : TableDataReadEvent(nullptr) {}
  ~TableDataReadEvent() override;
  explicit PROTOBUF_CONSTEXPR TableDataReadEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDataReadEvent(const TableDataReadEvent& from);
  TableDataReadEvent(TableDataReadEvent&& from) noexcept
    : TableDataReadEvent() {
    *this = ::std::move(from);
  }

  inline TableDataReadEvent& operator=(const TableDataReadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDataReadEvent& operator=(TableDataReadEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDataReadEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDataReadEvent* internal_default_instance() {
    return reinterpret_cast<const TableDataReadEvent*>(
               &_TableDataReadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TableDataReadEvent& a, TableDataReadEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDataReadEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDataReadEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableDataReadEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableDataReadEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableDataReadEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableDataReadEvent& from) {
    TableDataReadEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDataReadEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableDataReadEvent";
  }
  protected:
  explicit TableDataReadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencedFieldsFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated string referenced_fields = 2;
  int referenced_fields_size() const;
  private:
  int _internal_referenced_fields_size() const;
  public:
  void clear_referenced_fields();
  const std::string& referenced_fields(int index) const;
  std::string* mutable_referenced_fields(int index);
  void set_referenced_fields(int index, const std::string& value);
  void set_referenced_fields(int index, std::string&& value);
  void set_referenced_fields(int index, const char* value);
  void set_referenced_fields(int index, const char* value, size_t size);
  std::string* add_referenced_fields();
  void add_referenced_fields(const std::string& value);
  void add_referenced_fields(std::string&& value);
  void add_referenced_fields(const char* value);
  void add_referenced_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& referenced_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_referenced_fields();
  private:
  const std::string& _internal_referenced_fields(int index) const;
  std::string* _internal_add_referenced_fields();
  public:

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  bool has_table_name() const;
  private:
  bool _internal_has_table_name() const;
  public:
  void clear_table_name();
  const ::google::cloud::bigquery::logging::v1::TableName& table_name() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_table_name();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_table_name();
  void set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_table_name() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_table_name();
  public:
  void unsafe_arena_set_allocated_table_name(
      ::google::cloud::bigquery::logging::v1::TableName* table_name);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_table_name();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableDataReadEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> referenced_fields_;
    ::google::cloud::bigquery::logging::v1::TableName* table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableDataListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableDataListRequest) */ {
 public:
  inline TableDataListRequest() : TableDataListRequest(nullptr) {}
  ~TableDataListRequest() override;
  explicit PROTOBUF_CONSTEXPR TableDataListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDataListRequest(const TableDataListRequest& from);
  TableDataListRequest(TableDataListRequest&& from) noexcept
    : TableDataListRequest() {
    *this = ::std::move(from);
  }

  inline TableDataListRequest& operator=(const TableDataListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDataListRequest& operator=(TableDataListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDataListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDataListRequest* internal_default_instance() {
    return reinterpret_cast<const TableDataListRequest*>(
               &_TableDataListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TableDataListRequest& a, TableDataListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDataListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDataListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableDataListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableDataListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableDataListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableDataListRequest& from) {
    TableDataListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDataListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableDataListRequest";
  }
  protected:
  explicit TableDataListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartRowFieldNumber = 1,
    kMaxResultsFieldNumber = 2,
  };
  // uint64 start_row = 1;
  void clear_start_row();
  uint64_t start_row() const;
  void set_start_row(uint64_t value);
  private:
  uint64_t _internal_start_row() const;
  void _internal_set_start_row(uint64_t value);
  public:

  // uint32 max_results = 2;
  void clear_max_results();
  uint32_t max_results() const;
  void set_max_results(uint32_t value);
  private:
  uint32_t _internal_max_results() const;
  void _internal_set_max_results(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableDataListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t start_row_;
    uint32_t max_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit PROTOBUF_CONSTEXPR Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Table& from) {
    Table::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaJsonFieldNumber = 8,
    kTableNameFieldNumber = 1,
    kInfoFieldNumber = 2,
    kViewFieldNumber = 4,
    kExpireTimeFieldNumber = 5,
    kCreateTimeFieldNumber = 6,
    kTruncateTimeFieldNumber = 7,
    kUpdateTimeFieldNumber = 9,
    kEncryptionFieldNumber = 10,
  };
  // string schema_json = 8;
  void clear_schema_json();
  const std::string& schema_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_json();
  PROTOBUF_NODISCARD std::string* release_schema_json();
  void set_allocated_schema_json(std::string* schema_json);
  private:
  const std::string& _internal_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_json(const std::string& value);
  std::string* _internal_mutable_schema_json();
  public:

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  bool has_table_name() const;
  private:
  bool _internal_has_table_name() const;
  public:
  void clear_table_name();
  const ::google::cloud::bigquery::logging::v1::TableName& table_name() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_table_name();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_table_name();
  void set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_table_name() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_table_name();
  public:
  void unsafe_arena_set_allocated_table_name(
      ::google::cloud::bigquery::logging::v1::TableName* table_name);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_table_name();

  // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::google::cloud::bigquery::logging::v1::TableInfo& info() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableInfo* release_info();
  ::google::cloud::bigquery::logging::v1::TableInfo* mutable_info();
  void set_allocated_info(::google::cloud::bigquery::logging::v1::TableInfo* info);
  private:
  const ::google::cloud::bigquery::logging::v1::TableInfo& _internal_info() const;
  ::google::cloud::bigquery::logging::v1::TableInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::google::cloud::bigquery::logging::v1::TableInfo* info);
  ::google::cloud::bigquery::logging::v1::TableInfo* unsafe_arena_release_info();

  // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::google::cloud::bigquery::logging::v1::TableViewDefinition& view() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableViewDefinition* release_view();
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* mutable_view();
  void set_allocated_view(::google::cloud::bigquery::logging::v1::TableViewDefinition* view);
  private:
  const ::google::cloud::bigquery::logging::v1::TableViewDefinition& _internal_view() const;
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* _internal_mutable_view();
  public:
  void unsafe_arena_set_allocated_view(
      ::google::cloud::bigquery::logging::v1::TableViewDefinition* view);
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* unsafe_arena_release_view();

  // .google.protobuf.Timestamp expire_time = 5;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp truncate_time = 7;
  bool has_truncate_time() const;
  private:
  bool _internal_has_truncate_time() const;
  public:
  void clear_truncate_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& truncate_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_truncate_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_truncate_time();
  void set_allocated_truncate_time(::PROTOBUF_NAMESPACE_ID::Timestamp* truncate_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_truncate_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_truncate_time();
  public:
  void unsafe_arena_set_allocated_truncate_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* truncate_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_truncate_time();

  // .google.protobuf.Timestamp update_time = 9;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.cloud.bigquery.logging.v1.EncryptionInfo encryption = 10;
  bool has_encryption() const;
  private:
  bool _internal_has_encryption() const;
  public:
  void clear_encryption();
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& encryption() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::EncryptionInfo* release_encryption();
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* mutable_encryption();
  void set_allocated_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* encryption);
  private:
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& _internal_encryption() const;
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _internal_mutable_encryption();
  public:
  void unsafe_arena_set_allocated_encryption(
      ::google::cloud::bigquery::logging::v1::EncryptionInfo* encryption);
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* unsafe_arena_release_encryption();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_json_;
    ::google::cloud::bigquery::logging::v1::TableName* table_name_;
    ::google::cloud::bigquery::logging::v1::TableInfo* info_;
    ::google::cloud::bigquery::logging::v1::TableViewDefinition* view_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* truncate_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableInfo_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TableInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TableInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TableInfo_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TableInfo_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TableInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TableInfo_LabelsEntry_DoNotUse& other);
  static const TableInfo_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TableInfo_LabelsEntry_DoNotUse*>(&_TableInfo_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.TableInfo.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.TableInfo.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};

// -------------------------------------------------------------------

class TableInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInfo) */ {
 public:
  inline TableInfo() : TableInfo(nullptr) {}
  ~TableInfo() override;
  explicit PROTOBUF_CONSTEXPR TableInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfo(const TableInfo& from);
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableInfo& from) {
    TableInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableInfo";
  }
  protected:
  explicit TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kFriendlyNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string friendly_name = 1;
  void clear_friendly_name();
  const std::string& friendly_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendly_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendly_name();
  PROTOBUF_NODISCARD std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TableInfo_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableViewDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableViewDefinition) */ {
 public:
  inline TableViewDefinition() : TableViewDefinition(nullptr) {}
  ~TableViewDefinition() override;
  explicit PROTOBUF_CONSTEXPR TableViewDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableViewDefinition(const TableViewDefinition& from);
  TableViewDefinition(TableViewDefinition&& from) noexcept
    : TableViewDefinition() {
    *this = ::std::move(from);
  }

  inline TableViewDefinition& operator=(const TableViewDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableViewDefinition& operator=(TableViewDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableViewDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableViewDefinition* internal_default_instance() {
    return reinterpret_cast<const TableViewDefinition*>(
               &_TableViewDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TableViewDefinition& a, TableViewDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TableViewDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableViewDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableViewDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableViewDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableViewDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableViewDefinition& from) {
    TableViewDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableViewDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableViewDefinition";
  }
  protected:
  explicit TableViewDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableViewDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Dataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Dataset) */ {
 public:
  inline Dataset() : Dataset(nullptr) {}
  ~Dataset() override;
  explicit PROTOBUF_CONSTEXPR Dataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dataset(const Dataset& from);
  Dataset(Dataset&& from) noexcept
    : Dataset() {
    *this = ::std::move(from);
  }

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dataset& operator=(Dataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
               &_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Dataset& a, Dataset& b) {
    a.Swap(&b);
  }
  inline void Swap(Dataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dataset& from) {
    Dataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.Dataset";
  }
  protected:
  explicit Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetNameFieldNumber = 1,
    kInfoFieldNumber = 2,
    kCreateTimeFieldNumber = 4,
    kUpdateTimeFieldNumber = 5,
    kAclFieldNumber = 6,
    kDefaultTableExpireDurationFieldNumber = 8,
  };
  // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
  bool has_dataset_name() const;
  private:
  bool _internal_has_dataset_name() const;
  public:
  void clear_dataset_name();
  const ::google::cloud::bigquery::logging::v1::DatasetName& dataset_name() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetName* release_dataset_name();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_dataset_name();
  void set_allocated_dataset_name(::google::cloud::bigquery::logging::v1::DatasetName* dataset_name);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetName& _internal_dataset_name() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* _internal_mutable_dataset_name();
  public:
  void unsafe_arena_set_allocated_dataset_name(
      ::google::cloud::bigquery::logging::v1::DatasetName* dataset_name);
  ::google::cloud::bigquery::logging::v1::DatasetName* unsafe_arena_release_dataset_name();

  // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::google::cloud::bigquery::logging::v1::DatasetInfo& info() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetInfo* release_info();
  ::google::cloud::bigquery::logging::v1::DatasetInfo* mutable_info();
  void set_allocated_info(::google::cloud::bigquery::logging::v1::DatasetInfo* info);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetInfo& _internal_info() const;
  ::google::cloud::bigquery::logging::v1::DatasetInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::google::cloud::bigquery::logging::v1::DatasetInfo* info);
  ::google::cloud::bigquery::logging::v1::DatasetInfo* unsafe_arena_release_info();

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
  bool has_acl() const;
  private:
  bool _internal_has_acl() const;
  public:
  void clear_acl();
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl& acl() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::BigQueryAcl* release_acl();
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* mutable_acl();
  void set_allocated_acl(::google::cloud::bigquery::logging::v1::BigQueryAcl* acl);
  private:
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl& _internal_acl() const;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* _internal_mutable_acl();
  public:
  void unsafe_arena_set_allocated_acl(
      ::google::cloud::bigquery::logging::v1::BigQueryAcl* acl);
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* unsafe_arena_release_acl();

  // .google.protobuf.Duration default_table_expire_duration = 8;
  bool has_default_table_expire_duration() const;
  private:
  bool _internal_has_default_table_expire_duration() const;
  public:
  void clear_default_table_expire_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& default_table_expire_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_default_table_expire_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_default_table_expire_duration();
  void set_allocated_default_table_expire_duration(::PROTOBUF_NAMESPACE_ID::Duration* default_table_expire_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_default_table_expire_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_default_table_expire_duration();
  public:
  void unsafe_arena_set_allocated_default_table_expire_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* default_table_expire_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_default_table_expire_duration();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Dataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::DatasetName* dataset_name_;
    ::google::cloud::bigquery::logging::v1::DatasetInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::google::cloud::bigquery::logging::v1::BigQueryAcl* acl_;
    ::PROTOBUF_NAMESPACE_ID::Duration* default_table_expire_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetInfo_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DatasetInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DatasetInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DatasetInfo_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DatasetInfo_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DatasetInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DatasetInfo_LabelsEntry_DoNotUse& other);
  static const DatasetInfo_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DatasetInfo_LabelsEntry_DoNotUse*>(&_DatasetInfo_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.DatasetInfo.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.DatasetInfo.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};

// -------------------------------------------------------------------

class DatasetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInfo) */ {
 public:
  inline DatasetInfo() : DatasetInfo(nullptr) {}
  ~DatasetInfo() override;
  explicit PROTOBUF_CONSTEXPR DatasetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetInfo(const DatasetInfo& from);
  DatasetInfo(DatasetInfo&& from) noexcept
    : DatasetInfo() {
    *this = ::std::move(from);
  }

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
               &_DatasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DatasetInfo& a, DatasetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetInfo& from) {
    DatasetInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetInfo";
  }
  protected:
  explicit DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kFriendlyNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string friendly_name = 1;
  void clear_friendly_name();
  const std::string& friendly_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendly_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendly_name();
  PROTOBUF_NODISCARD std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DatasetInfo_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class BigQueryAcl_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry) */ {
 public:
  inline BigQueryAcl_Entry() : BigQueryAcl_Entry(nullptr) {}
  ~BigQueryAcl_Entry() override;
  explicit PROTOBUF_CONSTEXPR BigQueryAcl_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryAcl_Entry(const BigQueryAcl_Entry& from);
  BigQueryAcl_Entry(BigQueryAcl_Entry&& from) noexcept
    : BigQueryAcl_Entry() {
    *this = ::std::move(from);
  }

  inline BigQueryAcl_Entry& operator=(const BigQueryAcl_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryAcl_Entry& operator=(BigQueryAcl_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryAcl_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryAcl_Entry* internal_default_instance() {
    return reinterpret_cast<const BigQueryAcl_Entry*>(
               &_BigQueryAcl_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BigQueryAcl_Entry& a, BigQueryAcl_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryAcl_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryAcl_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryAcl_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryAcl_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQueryAcl_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigQueryAcl_Entry& from) {
    BigQueryAcl_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQueryAcl_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry";
  }
  protected:
  explicit BigQueryAcl_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kGroupEmailFieldNumber = 2,
    kUserEmailFieldNumber = 3,
    kDomainFieldNumber = 4,
    kSpecialGroupFieldNumber = 5,
    kViewNameFieldNumber = 6,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string group_email = 2;
  void clear_group_email();
  const std::string& group_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_email();
  PROTOBUF_NODISCARD std::string* release_group_email();
  void set_allocated_group_email(std::string* group_email);
  private:
  const std::string& _internal_group_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_email(const std::string& value);
  std::string* _internal_mutable_group_email();
  public:

  // string user_email = 3;
  void clear_user_email();
  const std::string& user_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_email();
  PROTOBUF_NODISCARD std::string* release_user_email();
  void set_allocated_user_email(std::string* user_email);
  private:
  const std::string& _internal_user_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_email(const std::string& value);
  std::string* _internal_mutable_user_email();
  public:

  // string domain = 4;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string special_group = 5;
  void clear_special_group();
  const std::string& special_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_special_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_special_group();
  PROTOBUF_NODISCARD std::string* release_special_group();
  void set_allocated_special_group(std::string* special_group);
  private:
  const std::string& _internal_special_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_special_group(const std::string& value);
  std::string* _internal_mutable_special_group();
  public:

  // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
  bool has_view_name() const;
  private:
  bool _internal_has_view_name() const;
  public:
  void clear_view_name();
  const ::google::cloud::bigquery::logging::v1::TableName& view_name() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_view_name();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_view_name();
  void set_allocated_view_name(::google::cloud::bigquery::logging::v1::TableName* view_name);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_view_name() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_view_name();
  public:
  void unsafe_arena_set_allocated_view_name(
      ::google::cloud::bigquery::logging::v1::TableName* view_name);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_view_name();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr special_group_;
    ::google::cloud::bigquery::logging::v1::TableName* view_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class BigQueryAcl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.BigQueryAcl) */ {
 public:
  inline BigQueryAcl() : BigQueryAcl(nullptr) {}
  ~BigQueryAcl() override;
  explicit PROTOBUF_CONSTEXPR BigQueryAcl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryAcl(const BigQueryAcl& from);
  BigQueryAcl(BigQueryAcl&& from) noexcept
    : BigQueryAcl() {
    *this = ::std::move(from);
  }

  inline BigQueryAcl& operator=(const BigQueryAcl& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryAcl& operator=(BigQueryAcl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryAcl& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryAcl* internal_default_instance() {
    return reinterpret_cast<const BigQueryAcl*>(
               &_BigQueryAcl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BigQueryAcl& a, BigQueryAcl& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryAcl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryAcl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryAcl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryAcl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQueryAcl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigQueryAcl& from) {
    BigQueryAcl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQueryAcl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.BigQueryAcl";
  }
  protected:
  explicit BigQueryAcl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BigQueryAcl_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >*
      mutable_entries();
  private:
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& _internal_entries(int index) const;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* _internal_add_entries();
  public:
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& entries(int index) const;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.BigQueryAcl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Job final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Job) */ {
 public:
  inline Job() : Job(nullptr) {}
  ~Job() override;
  explicit PROTOBUF_CONSTEXPR Job(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Job& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Job& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Job& from) {
    Job::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.Job";
  }
  protected:
  explicit Job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 1,
    kJobConfigurationFieldNumber = 2,
    kJobStatusFieldNumber = 3,
    kJobStatisticsFieldNumber = 4,
  };
  // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
  bool has_job_name() const;
  private:
  bool _internal_has_job_name() const;
  public:
  void clear_job_name();
  const ::google::cloud::bigquery::logging::v1::JobName& job_name() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobName* release_job_name();
  ::google::cloud::bigquery::logging::v1::JobName* mutable_job_name();
  void set_allocated_job_name(::google::cloud::bigquery::logging::v1::JobName* job_name);
  private:
  const ::google::cloud::bigquery::logging::v1::JobName& _internal_job_name() const;
  ::google::cloud::bigquery::logging::v1::JobName* _internal_mutable_job_name();
  public:
  void unsafe_arena_set_allocated_job_name(
      ::google::cloud::bigquery::logging::v1::JobName* job_name);
  ::google::cloud::bigquery::logging::v1::JobName* unsafe_arena_release_job_name();

  // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
  bool has_job_configuration() const;
  private:
  bool _internal_has_job_configuration() const;
  public:
  void clear_job_configuration();
  const ::google::cloud::bigquery::logging::v1::JobConfiguration& job_configuration() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobConfiguration* release_job_configuration();
  ::google::cloud::bigquery::logging::v1::JobConfiguration* mutable_job_configuration();
  void set_allocated_job_configuration(::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration);
  private:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration& _internal_job_configuration() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration* _internal_mutable_job_configuration();
  public:
  void unsafe_arena_set_allocated_job_configuration(
      ::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration);
  ::google::cloud::bigquery::logging::v1::JobConfiguration* unsafe_arena_release_job_configuration();

  // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
  bool has_job_status() const;
  private:
  bool _internal_has_job_status() const;
  public:
  void clear_job_status();
  const ::google::cloud::bigquery::logging::v1::JobStatus& job_status() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobStatus* release_job_status();
  ::google::cloud::bigquery::logging::v1::JobStatus* mutable_job_status();
  void set_allocated_job_status(::google::cloud::bigquery::logging::v1::JobStatus* job_status);
  private:
  const ::google::cloud::bigquery::logging::v1::JobStatus& _internal_job_status() const;
  ::google::cloud::bigquery::logging::v1::JobStatus* _internal_mutable_job_status();
  public:
  void unsafe_arena_set_allocated_job_status(
      ::google::cloud::bigquery::logging::v1::JobStatus* job_status);
  ::google::cloud::bigquery::logging::v1::JobStatus* unsafe_arena_release_job_status();

  // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
  bool has_job_statistics() const;
  private:
  bool _internal_has_job_statistics() const;
  public:
  void clear_job_statistics();
  const ::google::cloud::bigquery::logging::v1::JobStatistics& job_statistics() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobStatistics* release_job_statistics();
  ::google::cloud::bigquery::logging::v1::JobStatistics* mutable_job_statistics();
  void set_allocated_job_statistics(::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics);
  private:
  const ::google::cloud::bigquery::logging::v1::JobStatistics& _internal_job_statistics() const;
  ::google::cloud::bigquery::logging::v1::JobStatistics* _internal_mutable_job_statistics();
  public:
  void unsafe_arena_set_allocated_job_statistics(
      ::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics);
  ::google::cloud::bigquery::logging::v1::JobStatistics* unsafe_arena_release_job_statistics();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::logging::v1::JobName* job_name_;
    ::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration_;
    ::google::cloud::bigquery::logging::v1::JobStatus* job_status_;
    ::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobConfiguration_Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Query) */ {
 public:
  inline JobConfiguration_Query() : JobConfiguration_Query(nullptr) {}
  ~JobConfiguration_Query() override;
  explicit PROTOBUF_CONSTEXPR JobConfiguration_Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobConfiguration_Query(const JobConfiguration_Query& from);
  JobConfiguration_Query(JobConfiguration_Query&& from) noexcept
    : JobConfiguration_Query() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Query& operator=(const JobConfiguration_Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfiguration_Query& operator=(JobConfiguration_Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobConfiguration_Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobConfiguration_Query* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Query*>(
               &_JobConfiguration_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(JobConfiguration_Query& a, JobConfiguration_Query& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfiguration_Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobConfiguration_Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobConfiguration_Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobConfiguration_Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobConfiguration_Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobConfiguration_Query& from) {
    JobConfiguration_Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfiguration_Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobConfiguration.Query";
  }
  protected:
  explicit JobConfiguration_Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableDefinitionsFieldNumber = 6,
    kQueryFieldNumber = 1,
    kCreateDispositionFieldNumber = 3,
    kWriteDispositionFieldNumber = 4,
    kQueryPriorityFieldNumber = 7,
    kStatementTypeFieldNumber = 9,
    kDestinationTableFieldNumber = 2,
    kDefaultDatasetFieldNumber = 5,
    kDestinationTableEncryptionFieldNumber = 8,
  };
  // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
  int table_definitions_size() const;
  private:
  int _internal_table_definitions_size() const;
  public:
  void clear_table_definitions();
  ::google::cloud::bigquery::logging::v1::TableDefinition* mutable_table_definitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >*
      mutable_table_definitions();
  private:
  const ::google::cloud::bigquery::logging::v1::TableDefinition& _internal_table_definitions(int index) const;
  ::google::cloud::bigquery::logging::v1::TableDefinition* _internal_add_table_definitions();
  public:
  const ::google::cloud::bigquery::logging::v1::TableDefinition& table_definitions(int index) const;
  ::google::cloud::bigquery::logging::v1::TableDefinition* add_table_definitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >&
      table_definitions() const;

  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string create_disposition = 3;
  void clear_create_disposition();
  const std::string& create_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_disposition();
  PROTOBUF_NODISCARD std::string* release_create_disposition();
  void set_allocated_create_disposition(std::string* create_disposition);
  private:
  const std::string& _internal_create_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_disposition(const std::string& value);
  std::string* _internal_mutable_create_disposition();
  public:

  // string write_disposition = 4;
  void clear_write_disposition();
  const std::string& write_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_disposition();
  PROTOBUF_NODISCARD std::string* release_write_disposition();
  void set_allocated_write_disposition(std::string* write_disposition);
  private:
  const std::string& _internal_write_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_disposition(const std::string& value);
  std::string* _internal_mutable_write_disposition();
  public:

  // string query_priority = 7;
  void clear_query_priority();
  const std::string& query_priority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_priority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_priority();
  PROTOBUF_NODISCARD std::string* release_query_priority();
  void set_allocated_query_priority(std::string* query_priority);
  private:
  const std::string& _internal_query_priority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_priority(const std::string& value);
  std::string* _internal_mutable_query_priority();
  public:

  // string statement_type = 9;
  void clear_statement_type();
  const std::string& statement_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statement_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statement_type();
  PROTOBUF_NODISCARD std::string* release_statement_type();
  void set_allocated_statement_type(std::string* statement_type);
  private:
  const std::string& _internal_statement_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statement_type(const std::string& value);
  std::string* _internal_mutable_statement_type();
  public:

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  bool has_destination_table() const;
  private:
  bool _internal_has_destination_table() const;
  public:
  void clear_destination_table();
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_destination_table();
  public:
  void unsafe_arena_set_allocated_destination_table(
      ::google::cloud::bigquery::logging::v1::TableName* destination_table);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_destination_table();

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
  bool has_default_dataset() const;
  private:
  bool _internal_has_default_dataset() const;
  public:
  void clear_default_dataset();
  const ::google::cloud::bigquery::logging::v1::DatasetName& default_dataset() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::DatasetName* release_default_dataset();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_default_dataset();
  void set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);
  private:
  const ::google::cloud::bigquery::logging::v1::DatasetName& _internal_default_dataset() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* _internal_mutable_default_dataset();
  public:
  void unsafe_arena_set_allocated_default_dataset(
      ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);
  ::google::cloud::bigquery::logging::v1::DatasetName* unsafe_arena_release_default_dataset();

  // .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 8;
  bool has_destination_table_encryption() const;
  private:
  bool _internal_has_destination_table_encryption() const;
  public:
  void clear_destination_table_encryption();
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& destination_table_encryption() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::EncryptionInfo* release_destination_table_encryption();
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* mutable_destination_table_encryption();
  void set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  private:
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& _internal_destination_table_encryption() const;
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _internal_mutable_destination_table_encryption();
  public:
  void unsafe_arena_set_allocated_destination_table_encryption(
      ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* unsafe_arena_release_destination_table_encryption();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition > table_definitions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_priority_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statement_type_;
    ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
    ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset_;
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobConfiguration_Load final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Load) */ {
 public:
  inline JobConfiguration_Load() : JobConfiguration_Load(nullptr) {}
  ~JobConfiguration_Load() override;
  explicit PROTOBUF_CONSTEXPR JobConfiguration_Load(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobConfiguration_Load(const JobConfiguration_Load& from);
  JobConfiguration_Load(JobConfiguration_Load&& from) noexcept
    : JobConfiguration_Load() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Load& operator=(const JobConfiguration_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfiguration_Load& operator=(JobConfiguration_Load&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobConfiguration_Load& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobConfiguration_Load* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Load*>(
               &_JobConfiguration_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(JobConfiguration_Load& a, JobConfiguration_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfiguration_Load* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobConfiguration_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobConfiguration_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobConfiguration_Load>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobConfiguration_Load& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobConfiguration_Load& from) {
    JobConfiguration_Load::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfiguration_Load* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobConfiguration.Load";
  }
  protected:
  explicit JobConfiguration_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUrisFieldNumber = 1,
    kCreateDispositionFieldNumber = 4,
    kWriteDispositionFieldNumber = 5,
    kSchemaJsonFieldNumber = 6,
    kDestinationTableFieldNumber = 3,
    kDestinationTableEncryptionFieldNumber = 7,
  };
  // repeated string source_uris = 1;
  int source_uris_size() const;
  private:
  int _internal_source_uris_size() const;
  public:
  void clear_source_uris();
  const std::string& source_uris(int index) const;
  std::string* mutable_source_uris(int index);
  void set_source_uris(int index, const std::string& value);
  void set_source_uris(int index, std::string&& value);
  void set_source_uris(int index, const char* value);
  void set_source_uris(int index, const char* value, size_t size);
  std::string* add_source_uris();
  void add_source_uris(const std::string& value);
  void add_source_uris(std::string&& value);
  void add_source_uris(const char* value);
  void add_source_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& source_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_source_uris();
  private:
  const std::string& _internal_source_uris(int index) const;
  std::string* _internal_add_source_uris();
  public:

  // string create_disposition = 4;
  void clear_create_disposition();
  const std::string& create_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_disposition();
  PROTOBUF_NODISCARD std::string* release_create_disposition();
  void set_allocated_create_disposition(std::string* create_disposition);
  private:
  const std::string& _internal_create_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_disposition(const std::string& value);
  std::string* _internal_mutable_create_disposition();
  public:

  // string write_disposition = 5;
  void clear_write_disposition();
  const std::string& write_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_disposition();
  PROTOBUF_NODISCARD std::string* release_write_disposition();
  void set_allocated_write_disposition(std::string* write_disposition);
  private:
  const std::string& _internal_write_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_disposition(const std::string& value);
  std::string* _internal_mutable_write_disposition();
  public:

  // string schema_json = 6;
  void clear_schema_json();
  const std::string& schema_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_json();
  PROTOBUF_NODISCARD std::string* release_schema_json();
  void set_allocated_schema_json(std::string* schema_json);
  private:
  const std::string& _internal_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_json(const std::string& value);
  std::string* _internal_mutable_schema_json();
  public:

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
  bool has_destination_table() const;
  private:
  bool _internal_has_destination_table() const;
  public:
  void clear_destination_table();
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_destination_table();
  public:
  void unsafe_arena_set_allocated_destination_table(
      ::google::cloud::bigquery::logging::v1::TableName* destination_table);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_destination_table();

  // .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 7;
  bool has_destination_table_encryption() const;
  private:
  bool _internal_has_destination_table_encryption() const;
  public:
  void clear_destination_table_encryption();
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& destination_table_encryption() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::EncryptionInfo* release_destination_table_encryption();
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* mutable_destination_table_encryption();
  void set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  private:
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& _internal_destination_table_encryption() const;
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _internal_mutable_destination_table_encryption();
  public:
  void unsafe_arena_set_allocated_destination_table_encryption(
      ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* unsafe_arena_release_destination_table_encryption();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> source_uris_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_json_;
    ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobConfiguration_Extract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Extract) */ {
 public:
  inline JobConfiguration_Extract() : JobConfiguration_Extract(nullptr) {}
  ~JobConfiguration_Extract() override;
  explicit PROTOBUF_CONSTEXPR JobConfiguration_Extract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobConfiguration_Extract(const JobConfiguration_Extract& from);
  JobConfiguration_Extract(JobConfiguration_Extract&& from) noexcept
    : JobConfiguration_Extract() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Extract& operator=(const JobConfiguration_Extract& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfiguration_Extract& operator=(JobConfiguration_Extract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobConfiguration_Extract& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobConfiguration_Extract* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Extract*>(
               &_JobConfiguration_Extract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(JobConfiguration_Extract& a, JobConfiguration_Extract& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfiguration_Extract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobConfiguration_Extract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobConfiguration_Extract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobConfiguration_Extract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobConfiguration_Extract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobConfiguration_Extract& from) {
    JobConfiguration_Extract::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfiguration_Extract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobConfiguration.Extract";
  }
  protected:
  explicit JobConfiguration_Extract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationUrisFieldNumber = 1,
    kSourceTableFieldNumber = 2,
  };
  // repeated string destination_uris = 1;
  int destination_uris_size() const;
  private:
  int _internal_destination_uris_size() const;
  public:
  void clear_destination_uris();
  const std::string& destination_uris(int index) const;
  std::string* mutable_destination_uris(int index);
  void set_destination_uris(int index, const std::string& value);
  void set_destination_uris(int index, std::string&& value);
  void set_destination_uris(int index, const char* value);
  void set_destination_uris(int index, const char* value, size_t size);
  std::string* add_destination_uris();
  void add_destination_uris(const std::string& value);
  void add_destination_uris(std::string&& value);
  void add_destination_uris(const char* value);
  void add_destination_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& destination_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_destination_uris();
  private:
  const std::string& _internal_destination_uris(int index) const;
  std::string* _internal_add_destination_uris();
  public:

  // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
  bool has_source_table() const;
  private:
  bool _internal_has_source_table() const;
  public:
  void clear_source_table();
  const ::google::cloud::bigquery::logging::v1::TableName& source_table() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_source_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_source_table();
  void set_allocated_source_table(::google::cloud::bigquery::logging::v1::TableName* source_table);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_source_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_source_table();
  public:
  void unsafe_arena_set_allocated_source_table(
      ::google::cloud::bigquery::logging::v1::TableName* source_table);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_source_table();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> destination_uris_;
    ::google::cloud::bigquery::logging::v1::TableName* source_table_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobConfiguration_TableCopy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy) */ {
 public:
  inline JobConfiguration_TableCopy() : JobConfiguration_TableCopy(nullptr) {}
  ~JobConfiguration_TableCopy() override;
  explicit PROTOBUF_CONSTEXPR JobConfiguration_TableCopy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobConfiguration_TableCopy(const JobConfiguration_TableCopy& from);
  JobConfiguration_TableCopy(JobConfiguration_TableCopy&& from) noexcept
    : JobConfiguration_TableCopy() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_TableCopy& operator=(const JobConfiguration_TableCopy& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfiguration_TableCopy& operator=(JobConfiguration_TableCopy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobConfiguration_TableCopy& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobConfiguration_TableCopy* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_TableCopy*>(
               &_JobConfiguration_TableCopy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(JobConfiguration_TableCopy& a, JobConfiguration_TableCopy& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfiguration_TableCopy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobConfiguration_TableCopy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobConfiguration_TableCopy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobConfiguration_TableCopy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobConfiguration_TableCopy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobConfiguration_TableCopy& from) {
    JobConfiguration_TableCopy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfiguration_TableCopy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy";
  }
  protected:
  explicit JobConfiguration_TableCopy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTablesFieldNumber = 1,
    kCreateDispositionFieldNumber = 3,
    kWriteDispositionFieldNumber = 4,
    kDestinationTableFieldNumber = 2,
    kDestinationTableEncryptionFieldNumber = 5,
  };
  // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
  int source_tables_size() const;
  private:
  int _internal_source_tables_size() const;
  public:
  void clear_source_tables();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_source_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
      mutable_source_tables();
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_source_tables(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_add_source_tables();
  public:
  const ::google::cloud::bigquery::logging::v1::TableName& source_tables(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* add_source_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
      source_tables() const;

  // string create_disposition = 3;
  void clear_create_disposition();
  const std::string& create_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_disposition();
  PROTOBUF_NODISCARD std::string* release_create_disposition();
  void set_allocated_create_disposition(std::string* create_disposition);
  private:
  const std::string& _internal_create_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_disposition(const std::string& value);
  std::string* _internal_mutable_create_disposition();
  public:

  // string write_disposition = 4;
  void clear_write_disposition();
  const std::string& write_disposition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_disposition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_disposition();
  PROTOBUF_NODISCARD std::string* release_write_disposition();
  void set_allocated_write_disposition(std::string* write_disposition);
  private:
  const std::string& _internal_write_disposition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_disposition(const std::string& value);
  std::string* _internal_mutable_write_disposition();
  public:

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  bool has_destination_table() const;
  private:
  bool _internal_has_destination_table() const;
  public:
  void clear_destination_table();
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_mutable_destination_table();
  public:
  void unsafe_arena_set_allocated_destination_table(
      ::google::cloud::bigquery::logging::v1::TableName* destination_table);
  ::google::cloud::bigquery::logging::v1::TableName* unsafe_arena_release_destination_table();

  // .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 5;
  bool has_destination_table_encryption() const;
  private:
  bool _internal_has_destination_table_encryption() const;
  public:
  void clear_destination_table_encryption();
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& destination_table_encryption() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::EncryptionInfo* release_destination_table_encryption();
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* mutable_destination_table_encryption();
  void set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  private:
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo& _internal_destination_table_encryption() const;
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _internal_mutable_destination_table_encryption();
  public:
  void unsafe_arena_set_allocated_destination_table_encryption(
      ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption);
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* unsafe_arena_release_destination_table_encryption();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName > source_tables_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_disposition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_disposition_;
    ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobConfiguration_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JobConfiguration_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JobConfiguration_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  JobConfiguration_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR JobConfiguration_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit JobConfiguration_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JobConfiguration_LabelsEntry_DoNotUse& other);
  static const JobConfiguration_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JobConfiguration_LabelsEntry_DoNotUse*>(&_JobConfiguration_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.JobConfiguration.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.cloud.bigquery.logging.v1.JobConfiguration.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};

// -------------------------------------------------------------------

class JobConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration) */ {
 public:
  inline JobConfiguration() : JobConfiguration(nullptr) {}
  ~JobConfiguration() override;
  explicit PROTOBUF_CONSTEXPR JobConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobConfiguration(const JobConfiguration& from);
  JobConfiguration(JobConfiguration&& from) noexcept
    : JobConfiguration() {
    *this = ::std::move(from);
  }

  inline JobConfiguration& operator=(const JobConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfiguration& operator=(JobConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobConfiguration& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigurationCase {
    kQuery = 5,
    kLoad = 6,
    kExtract = 7,
    kTableCopy = 8,
    CONFIGURATION_NOT_SET = 0,
  };

  static inline const JobConfiguration* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration*>(
               &_JobConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(JobConfiguration& a, JobConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobConfiguration& from) {
    JobConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobConfiguration";
  }
  protected:
  explicit JobConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JobConfiguration_Query Query;
  typedef JobConfiguration_Load Load;
  typedef JobConfiguration_Extract Extract;
  typedef JobConfiguration_TableCopy TableCopy;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kDryRunFieldNumber = 9,
    kQueryFieldNumber = 5,
    kLoadFieldNumber = 6,
    kExtractFieldNumber = 7,
    kTableCopyFieldNumber = 8,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // bool dry_run = 9;
  void clear_dry_run();
  bool dry_run() const;
  void set_dry_run(bool value);
  private:
  bool _internal_dry_run() const;
  void _internal_set_dry_run(bool value);
  public:

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& query() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* release_query();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* mutable_query();
  void set_allocated_query(::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query);
  private:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& _internal_query() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query);
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* unsafe_arena_release_query();

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& load() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* release_load();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* mutable_load();
  void set_allocated_load(::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load);
  private:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& _internal_load() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load);
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* unsafe_arena_release_load();

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
  bool has_extract() const;
  private:
  bool _internal_has_extract() const;
  public:
  void clear_extract();
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& extract() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* release_extract();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* mutable_extract();
  void set_allocated_extract(::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract);
  private:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& _internal_extract() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* _internal_mutable_extract();
  public:
  void unsafe_arena_set_allocated_extract(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract);
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* unsafe_arena_release_extract();

  // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
  bool has_table_copy() const;
  private:
  bool _internal_has_table_copy() const;
  public:
  void clear_table_copy();
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& table_copy() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* release_table_copy();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* mutable_table_copy();
  void set_allocated_table_copy(::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy);
  private:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& _internal_table_copy() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* _internal_mutable_table_copy();
  public:
  void unsafe_arena_set_allocated_table_copy(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy);
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* unsafe_arena_release_table_copy();

  void clear_configuration();
  ConfigurationCase configuration_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration)
 private:
  class _Internal;
  void set_has_query();
  void set_has_load();
  void set_has_extract();
  void set_has_table_copy();

  inline bool has_configuration() const;
  inline void clear_has_configuration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        JobConfiguration_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    bool dry_run_;
    union ConfigurationUnion {
      constexpr ConfigurationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query_;
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load_;
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract_;
      ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy_;
    } configuration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableDefinition) */ {
 public:
  inline TableDefinition() : TableDefinition(nullptr) {}
  ~TableDefinition() override;
  explicit PROTOBUF_CONSTEXPR TableDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDefinition(const TableDefinition& from);
  TableDefinition(TableDefinition&& from) noexcept
    : TableDefinition() {
    *this = ::std::move(from);
  }

  inline TableDefinition& operator=(const TableDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDefinition& operator=(TableDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDefinition* internal_default_instance() {
    return reinterpret_cast<const TableDefinition*>(
               &_TableDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TableDefinition& a, TableDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableDefinition& from) {
    TableDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableDefinition";
  }
  protected:
  explicit TableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceUrisFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string source_uris = 2;
  int source_uris_size() const;
  private:
  int _internal_source_uris_size() const;
  public:
  void clear_source_uris();
  const std::string& source_uris(int index) const;
  std::string* mutable_source_uris(int index);
  void set_source_uris(int index, const std::string& value);
  void set_source_uris(int index, std::string&& value);
  void set_source_uris(int index, const char* value);
  void set_source_uris(int index, const char* value, size_t size);
  std::string* add_source_uris();
  void add_source_uris(const std::string& value);
  void add_source_uris(std::string&& value);
  void add_source_uris(const char* value);
  void add_source_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& source_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_source_uris();
  private:
  const std::string& _internal_source_uris(int index) const;
  std::string* _internal_add_source_uris();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> source_uris_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobStatus) */ {
 public:
  inline JobStatus() : JobStatus(nullptr) {}
  ~JobStatus() override;
  explicit PROTOBUF_CONSTEXPR JobStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobStatus(const JobStatus& from);
  JobStatus(JobStatus&& from) noexcept
    : JobStatus() {
    *this = ::std::move(from);
  }

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatus& operator=(JobStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobStatus* internal_default_instance() {
    return reinterpret_cast<const JobStatus*>(
               &_JobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(JobStatus& a, JobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobStatus& from) {
    JobStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobStatus";
  }
  protected:
  explicit JobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalErrorsFieldNumber = 3,
    kStateFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // repeated .google.rpc.Status additional_errors = 3;
  int additional_errors_size() const;
  private:
  int _internal_additional_errors_size() const;
  public:
  void clear_additional_errors();
  ::google::rpc::Status* mutable_additional_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
      mutable_additional_errors();
  private:
  const ::google::rpc::Status& _internal_additional_errors(int index) const;
  ::google::rpc::Status* _internal_add_additional_errors();
  public:
  const ::google::rpc::Status& additional_errors(int index) const;
  ::google::rpc::Status* add_additional_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
      additional_errors() const;

  // string state = 1;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .google.rpc.Status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status > additional_errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::google::rpc::Status* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobStatistics_ReservationResourceUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage) */ {
 public:
  inline JobStatistics_ReservationResourceUsage() : JobStatistics_ReservationResourceUsage(nullptr) {}
  ~JobStatistics_ReservationResourceUsage() override;
  explicit PROTOBUF_CONSTEXPR JobStatistics_ReservationResourceUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobStatistics_ReservationResourceUsage(const JobStatistics_ReservationResourceUsage& from);
  JobStatistics_ReservationResourceUsage(JobStatistics_ReservationResourceUsage&& from) noexcept
    : JobStatistics_ReservationResourceUsage() {
    *this = ::std::move(from);
  }

  inline JobStatistics_ReservationResourceUsage& operator=(const JobStatistics_ReservationResourceUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatistics_ReservationResourceUsage& operator=(JobStatistics_ReservationResourceUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobStatistics_ReservationResourceUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobStatistics_ReservationResourceUsage* internal_default_instance() {
    return reinterpret_cast<const JobStatistics_ReservationResourceUsage*>(
               &_JobStatistics_ReservationResourceUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(JobStatistics_ReservationResourceUsage& a, JobStatistics_ReservationResourceUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatistics_ReservationResourceUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatistics_ReservationResourceUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobStatistics_ReservationResourceUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobStatistics_ReservationResourceUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobStatistics_ReservationResourceUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobStatistics_ReservationResourceUsage& from) {
    JobStatistics_ReservationResourceUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatistics_ReservationResourceUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage";
  }
  protected:
  explicit JobStatistics_ReservationResourceUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSlotMsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 slot_ms = 2;
  void clear_slot_ms();
  int64_t slot_ms() const;
  void set_slot_ms(int64_t value);
  private:
  int64_t _internal_slot_ms() const;
  void _internal_set_slot_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t slot_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobStatistics) */ {
 public:
  inline JobStatistics() : JobStatistics(nullptr) {}
  ~JobStatistics() override;
  explicit PROTOBUF_CONSTEXPR JobStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobStatistics(const JobStatistics& from);
  JobStatistics(JobStatistics&& from) noexcept
    : JobStatistics() {
    *this = ::std::move(from);
  }

  inline JobStatistics& operator=(const JobStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatistics& operator=(JobStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobStatistics* internal_default_instance() {
    return reinterpret_cast<const JobStatistics*>(
               &_JobStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(JobStatistics& a, JobStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobStatistics& from) {
    JobStatistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobStatistics";
  }
  protected:
  explicit JobStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JobStatistics_ReservationResourceUsage ReservationResourceUsage;

  // accessors -------------------------------------------------------

  enum : int {
    kReferencedTablesFieldNumber = 9,
    kReferencedViewsFieldNumber = 11,
    kReservationUsageFieldNumber = 14,
    kCreateTimeFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kTotalProcessedBytesFieldNumber = 4,
    kTotalBilledBytesFieldNumber = 5,
    kTotalSlotMsFieldNumber = 8,
    kBillingTierFieldNumber = 7,
    kTotalTablesProcessedFieldNumber = 10,
    kTotalLoadOutputBytesFieldNumber = 13,
    kQueryOutputRowCountFieldNumber = 15,
    kTotalViewsProcessedFieldNumber = 12,
  };
  // repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;
  int referenced_tables_size() const;
  private:
  int _internal_referenced_tables_size() const;
  public:
  void clear_referenced_tables();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_referenced_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
      mutable_referenced_tables();
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_referenced_tables(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_add_referenced_tables();
  public:
  const ::google::cloud::bigquery::logging::v1::TableName& referenced_tables(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* add_referenced_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
      referenced_tables() const;

  // repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;
  int referenced_views_size() const;
  private:
  int _internal_referenced_views_size() const;
  public:
  void clear_referenced_views();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_referenced_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
      mutable_referenced_views();
  private:
  const ::google::cloud::bigquery::logging::v1::TableName& _internal_referenced_views(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* _internal_add_referenced_views();
  public:
  const ::google::cloud::bigquery::logging::v1::TableName& referenced_views(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* add_referenced_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
      referenced_views() const;

  // repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;
  int reservation_usage_size() const;
  private:
  int _internal_reservation_usage_size() const;
  public:
  void clear_reservation_usage();
  ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* mutable_reservation_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage >*
      mutable_reservation_usage();
  private:
  const ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage& _internal_reservation_usage(int index) const;
  ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* _internal_add_reservation_usage();
  public:
  const ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage& reservation_usage(int index) const;
  ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* add_reservation_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage >&
      reservation_usage() const;

  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // int64 total_processed_bytes = 4;
  void clear_total_processed_bytes();
  int64_t total_processed_bytes() const;
  void set_total_processed_bytes(int64_t value);
  private:
  int64_t _internal_total_processed_bytes() const;
  void _internal_set_total_processed_bytes(int64_t value);
  public:

  // int64 total_billed_bytes = 5;
  void clear_total_billed_bytes();
  int64_t total_billed_bytes() const;
  void set_total_billed_bytes(int64_t value);
  private:
  int64_t _internal_total_billed_bytes() const;
  void _internal_set_total_billed_bytes(int64_t value);
  public:

  // int64 total_slot_ms = 8;
  void clear_total_slot_ms();
  int64_t total_slot_ms() const;
  void set_total_slot_ms(int64_t value);
  private:
  int64_t _internal_total_slot_ms() const;
  void _internal_set_total_slot_ms(int64_t value);
  public:

  // int32 billing_tier = 7;
  void clear_billing_tier();
  int32_t billing_tier() const;
  void set_billing_tier(int32_t value);
  private:
  int32_t _internal_billing_tier() const;
  void _internal_set_billing_tier(int32_t value);
  public:

  // int32 total_tables_processed = 10;
  void clear_total_tables_processed();
  int32_t total_tables_processed() const;
  void set_total_tables_processed(int32_t value);
  private:
  int32_t _internal_total_tables_processed() const;
  void _internal_set_total_tables_processed(int32_t value);
  public:

  // int64 total_load_output_bytes = 13;
  void clear_total_load_output_bytes();
  int64_t total_load_output_bytes() const;
  void set_total_load_output_bytes(int64_t value);
  private:
  int64_t _internal_total_load_output_bytes() const;
  void _internal_set_total_load_output_bytes(int64_t value);
  public:

  // int64 query_output_row_count = 15;
  void clear_query_output_row_count();
  int64_t query_output_row_count() const;
  void set_query_output_row_count(int64_t value);
  private:
  int64_t _internal_query_output_row_count() const;
  void _internal_set_query_output_row_count(int64_t value);
  public:

  // int32 total_views_processed = 12;
  void clear_total_views_processed();
  int32_t total_views_processed() const;
  void set_total_views_processed(int32_t value);
  private:
  int32_t _internal_total_views_processed() const;
  void _internal_set_total_views_processed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName > referenced_tables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName > referenced_views_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage > reservation_usage_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    int64_t total_processed_bytes_;
    int64_t total_billed_bytes_;
    int64_t total_slot_ms_;
    int32_t billing_tier_;
    int32_t total_tables_processed_;
    int64_t total_load_output_bytes_;
    int64_t query_output_row_count_;
    int32_t total_views_processed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DatasetName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetName) */ {
 public:
  inline DatasetName() : DatasetName(nullptr) {}
  ~DatasetName() override;
  explicit PROTOBUF_CONSTEXPR DatasetName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetName(const DatasetName& from);
  DatasetName(DatasetName&& from) noexcept
    : DatasetName() {
    *this = ::std::move(from);
  }

  inline DatasetName& operator=(const DatasetName& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetName& operator=(DatasetName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetName& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetName* internal_default_instance() {
    return reinterpret_cast<const DatasetName*>(
               &_DatasetName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DatasetName& a, DatasetName& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetName& from) {
    DatasetName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.DatasetName";
  }
  protected:
  explicit DatasetName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kDatasetIdFieldNumber = 2,
  };
  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TableName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableName) */ {
 public:
  inline TableName() : TableName(nullptr) {}
  ~TableName() override;
  explicit PROTOBUF_CONSTEXPR TableName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableName(const TableName& from);
  TableName(TableName&& from) noexcept
    : TableName() {
    *this = ::std::move(from);
  }

  inline TableName& operator=(const TableName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableName& operator=(TableName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableName* internal_default_instance() {
    return reinterpret_cast<const TableName*>(
               &_TableName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TableName& a, TableName& b) {
    a.Swap(&b);
  }
  inline void Swap(TableName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableName& from) {
    TableName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.TableName";
  }
  protected:
  explicit TableName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kDatasetIdFieldNumber = 2,
    kTableIdFieldNumber = 3,
  };
  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string table_id = 3;
  void clear_table_id();
  const std::string& table_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_id();
  PROTOBUF_NODISCARD std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class JobName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobName) */ {
 public:
  inline JobName() : JobName(nullptr) {}
  ~JobName() override;
  explicit PROTOBUF_CONSTEXPR JobName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobName(const JobName& from);
  JobName(JobName&& from) noexcept
    : JobName() {
    *this = ::std::move(from);
  }

  inline JobName& operator=(const JobName& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobName& operator=(JobName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobName& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobName* internal_default_instance() {
    return reinterpret_cast<const JobName*>(
               &_JobName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(JobName& a, JobName& b) {
    a.Swap(&b);
  }
  inline void Swap(JobName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JobName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JobName& from) {
    JobName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.JobName";
  }
  protected:
  explicit JobName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kLocationFieldNumber = 3,
  };
  // string project_id = 1;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string job_id = 2;
  void clear_job_id();
  const std::string& job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job_id();
  PROTOBUF_NODISCARD std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string location = 3;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class EncryptionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.EncryptionInfo) */ {
 public:
  inline EncryptionInfo() : EncryptionInfo(nullptr) {}
  ~EncryptionInfo() override;
  explicit PROTOBUF_CONSTEXPR EncryptionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptionInfo(const EncryptionInfo& from);
  EncryptionInfo(EncryptionInfo&& from) noexcept
    : EncryptionInfo() {
    *this = ::std::move(from);
  }

  inline EncryptionInfo& operator=(const EncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionInfo& operator=(EncryptionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const EncryptionInfo*>(
               &_EncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(EncryptionInfo& a, EncryptionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptionInfo& from) {
    EncryptionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.logging.v1.EncryptionInfo";
  }
  protected:
  explicit EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyNameFieldNumber = 1,
  };
  // string kms_key_name = 1;
  void clear_kms_key_name();
  const std::string& kms_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kms_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kms_key_name();
  PROTOBUF_NODISCARD std::string* release_kms_key_name();
  void set_allocated_kms_key_name(std::string* kms_key_name);
  private:
  const std::string& _internal_kms_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kms_key_name(const std::string& value);
  std::string* _internal_mutable_kms_key_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.EncryptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuditData

// .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
inline bool AuditData::_internal_has_table_insert_request() const {
  return request_case() == kTableInsertRequest;
}
inline bool AuditData::has_table_insert_request() const {
  return _internal_has_table_insert_request();
}
inline void AuditData::set_has_table_insert_request() {
  _impl_._oneof_case_[0] = kTableInsertRequest;
}
inline void AuditData::clear_table_insert_request() {
  if (_internal_has_table_insert_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.table_insert_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::release_table_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  if (_internal_has_table_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableInsertRequest* temp = _impl_.request_.table_insert_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.table_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertRequest& AuditData::_internal_table_insert_request() const {
  return _internal_has_table_insert_request()
      ? *_impl_.request_.table_insert_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableInsertRequest&>(::google::cloud::bigquery::logging::v1::_TableInsertRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertRequest& AuditData::table_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return _internal_table_insert_request();
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::unsafe_arena_release_table_insert_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  if (_internal_has_table_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableInsertRequest* temp = _impl_.request_.table_insert_request_;
    _impl_.request_.table_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_table_insert_request(::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request) {
  clear_request();
  if (table_insert_request) {
    set_has_table_insert_request();
    _impl_.request_.table_insert_request_ = table_insert_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::_internal_mutable_table_insert_request() {
  if (!_internal_has_table_insert_request()) {
    clear_request();
    set_has_table_insert_request();
    _impl_.request_.table_insert_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::TableInsertRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.table_insert_request_;
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::mutable_table_insert_request() {
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* _msg = _internal_mutable_table_insert_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
inline bool AuditData::_internal_has_table_update_request() const {
  return request_case() == kTableUpdateRequest;
}
inline bool AuditData::has_table_update_request() const {
  return _internal_has_table_update_request();
}
inline void AuditData::set_has_table_update_request() {
  _impl_._oneof_case_[0] = kTableUpdateRequest;
}
inline void AuditData::clear_table_update_request() {
  if (_internal_has_table_update_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.table_update_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::release_table_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  if (_internal_has_table_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableUpdateRequest* temp = _impl_.request_.table_update_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.table_update_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& AuditData::_internal_table_update_request() const {
  return _internal_has_table_update_request()
      ? *_impl_.request_.table_update_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableUpdateRequest&>(::google::cloud::bigquery::logging::v1::_TableUpdateRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& AuditData::table_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return _internal_table_update_request();
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::unsafe_arena_release_table_update_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  if (_internal_has_table_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableUpdateRequest* temp = _impl_.request_.table_update_request_;
    _impl_.request_.table_update_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_table_update_request(::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request) {
  clear_request();
  if (table_update_request) {
    set_has_table_update_request();
    _impl_.request_.table_update_request_ = table_update_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::_internal_mutable_table_update_request() {
  if (!_internal_has_table_update_request()) {
    clear_request();
    set_has_table_update_request();
    _impl_.request_.table_update_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::TableUpdateRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.table_update_request_;
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::mutable_table_update_request() {
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* _msg = _internal_mutable_table_update_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
inline bool AuditData::_internal_has_dataset_list_request() const {
  return request_case() == kDatasetListRequest;
}
inline bool AuditData::has_dataset_list_request() const {
  return _internal_has_dataset_list_request();
}
inline void AuditData::set_has_dataset_list_request() {
  _impl_._oneof_case_[0] = kDatasetListRequest;
}
inline void AuditData::clear_dataset_list_request() {
  if (_internal_has_dataset_list_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.dataset_list_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::release_dataset_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  if (_internal_has_dataset_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetListRequest* temp = _impl_.request_.dataset_list_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.dataset_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetListRequest& AuditData::_internal_dataset_list_request() const {
  return _internal_has_dataset_list_request()
      ? *_impl_.request_.dataset_list_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetListRequest&>(::google::cloud::bigquery::logging::v1::_DatasetListRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetListRequest& AuditData::dataset_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return _internal_dataset_list_request();
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::unsafe_arena_release_dataset_list_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  if (_internal_has_dataset_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetListRequest* temp = _impl_.request_.dataset_list_request_;
    _impl_.request_.dataset_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_dataset_list_request(::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request) {
  clear_request();
  if (dataset_list_request) {
    set_has_dataset_list_request();
    _impl_.request_.dataset_list_request_ = dataset_list_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::_internal_mutable_dataset_list_request() {
  if (!_internal_has_dataset_list_request()) {
    clear_request();
    set_has_dataset_list_request();
    _impl_.request_.dataset_list_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::DatasetListRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.dataset_list_request_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::mutable_dataset_list_request() {
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* _msg = _internal_mutable_dataset_list_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
inline bool AuditData::_internal_has_dataset_insert_request() const {
  return request_case() == kDatasetInsertRequest;
}
inline bool AuditData::has_dataset_insert_request() const {
  return _internal_has_dataset_insert_request();
}
inline void AuditData::set_has_dataset_insert_request() {
  _impl_._oneof_case_[0] = kDatasetInsertRequest;
}
inline void AuditData::clear_dataset_insert_request() {
  if (_internal_has_dataset_insert_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.dataset_insert_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::release_dataset_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  if (_internal_has_dataset_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* temp = _impl_.request_.dataset_insert_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.dataset_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& AuditData::_internal_dataset_insert_request() const {
  return _internal_has_dataset_insert_request()
      ? *_impl_.request_.dataset_insert_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertRequest&>(::google::cloud::bigquery::logging::v1::_DatasetInsertRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& AuditData::dataset_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return _internal_dataset_insert_request();
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::unsafe_arena_release_dataset_insert_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  if (_internal_has_dataset_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* temp = _impl_.request_.dataset_insert_request_;
    _impl_.request_.dataset_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_dataset_insert_request(::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request) {
  clear_request();
  if (dataset_insert_request) {
    set_has_dataset_insert_request();
    _impl_.request_.dataset_insert_request_ = dataset_insert_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::_internal_mutable_dataset_insert_request() {
  if (!_internal_has_dataset_insert_request()) {
    clear_request();
    set_has_dataset_insert_request();
    _impl_.request_.dataset_insert_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::DatasetInsertRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.dataset_insert_request_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::mutable_dataset_insert_request() {
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* _msg = _internal_mutable_dataset_insert_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
inline bool AuditData::_internal_has_dataset_update_request() const {
  return request_case() == kDatasetUpdateRequest;
}
inline bool AuditData::has_dataset_update_request() const {
  return _internal_has_dataset_update_request();
}
inline void AuditData::set_has_dataset_update_request() {
  _impl_._oneof_case_[0] = kDatasetUpdateRequest;
}
inline void AuditData::clear_dataset_update_request() {
  if (_internal_has_dataset_update_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.dataset_update_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::release_dataset_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  if (_internal_has_dataset_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* temp = _impl_.request_.dataset_update_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.dataset_update_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& AuditData::_internal_dataset_update_request() const {
  return _internal_has_dataset_update_request()
      ? *_impl_.request_.dataset_update_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest&>(::google::cloud::bigquery::logging::v1::_DatasetUpdateRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& AuditData::dataset_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return _internal_dataset_update_request();
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::unsafe_arena_release_dataset_update_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  if (_internal_has_dataset_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* temp = _impl_.request_.dataset_update_request_;
    _impl_.request_.dataset_update_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_dataset_update_request(::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request) {
  clear_request();
  if (dataset_update_request) {
    set_has_dataset_update_request();
    _impl_.request_.dataset_update_request_ = dataset_update_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::_internal_mutable_dataset_update_request() {
  if (!_internal_has_dataset_update_request()) {
    clear_request();
    set_has_dataset_update_request();
    _impl_.request_.dataset_update_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.dataset_update_request_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::mutable_dataset_update_request() {
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* _msg = _internal_mutable_dataset_update_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
inline bool AuditData::_internal_has_job_insert_request() const {
  return request_case() == kJobInsertRequest;
}
inline bool AuditData::has_job_insert_request() const {
  return _internal_has_job_insert_request();
}
inline void AuditData::set_has_job_insert_request() {
  _impl_._oneof_case_[0] = kJobInsertRequest;
}
inline void AuditData::clear_job_insert_request() {
  if (_internal_has_job_insert_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.job_insert_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::release_job_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  if (_internal_has_job_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobInsertRequest* temp = _impl_.request_.job_insert_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.job_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertRequest& AuditData::_internal_job_insert_request() const {
  return _internal_has_job_insert_request()
      ? *_impl_.request_.job_insert_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobInsertRequest&>(::google::cloud::bigquery::logging::v1::_JobInsertRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertRequest& AuditData::job_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return _internal_job_insert_request();
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::unsafe_arena_release_job_insert_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  if (_internal_has_job_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobInsertRequest* temp = _impl_.request_.job_insert_request_;
    _impl_.request_.job_insert_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_insert_request(::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request) {
  clear_request();
  if (job_insert_request) {
    set_has_job_insert_request();
    _impl_.request_.job_insert_request_ = job_insert_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::_internal_mutable_job_insert_request() {
  if (!_internal_has_job_insert_request()) {
    clear_request();
    set_has_job_insert_request();
    _impl_.request_.job_insert_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobInsertRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.job_insert_request_;
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::mutable_job_insert_request() {
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* _msg = _internal_mutable_job_insert_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
inline bool AuditData::_internal_has_job_query_request() const {
  return request_case() == kJobQueryRequest;
}
inline bool AuditData::has_job_query_request() const {
  return _internal_has_job_query_request();
}
inline void AuditData::set_has_job_query_request() {
  _impl_._oneof_case_[0] = kJobQueryRequest;
}
inline void AuditData::clear_job_query_request() {
  if (_internal_has_job_query_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.job_query_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::release_job_query_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  if (_internal_has_job_query_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobQueryRequest* temp = _impl_.request_.job_query_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.job_query_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryRequest& AuditData::_internal_job_query_request() const {
  return _internal_has_job_query_request()
      ? *_impl_.request_.job_query_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryRequest&>(::google::cloud::bigquery::logging::v1::_JobQueryRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryRequest& AuditData::job_query_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return _internal_job_query_request();
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::unsafe_arena_release_job_query_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  if (_internal_has_job_query_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobQueryRequest* temp = _impl_.request_.job_query_request_;
    _impl_.request_.job_query_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_query_request(::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request) {
  clear_request();
  if (job_query_request) {
    set_has_job_query_request();
    _impl_.request_.job_query_request_ = job_query_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::_internal_mutable_job_query_request() {
  if (!_internal_has_job_query_request()) {
    clear_request();
    set_has_job_query_request();
    _impl_.request_.job_query_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobQueryRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.job_query_request_;
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::mutable_job_query_request() {
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* _msg = _internal_mutable_job_query_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
inline bool AuditData::_internal_has_job_get_query_results_request() const {
  return request_case() == kJobGetQueryResultsRequest;
}
inline bool AuditData::has_job_get_query_results_request() const {
  return _internal_has_job_get_query_results_request();
}
inline void AuditData::set_has_job_get_query_results_request() {
  _impl_._oneof_case_[0] = kJobGetQueryResultsRequest;
}
inline void AuditData::clear_job_get_query_results_request() {
  if (_internal_has_job_get_query_results_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.job_get_query_results_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::release_job_get_query_results_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  if (_internal_has_job_get_query_results_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* temp = _impl_.request_.job_get_query_results_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.job_get_query_results_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& AuditData::_internal_job_get_query_results_request() const {
  return _internal_has_job_get_query_results_request()
      ? *_impl_.request_.job_get_query_results_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest&>(::google::cloud::bigquery::logging::v1::_JobGetQueryResultsRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& AuditData::job_get_query_results_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return _internal_job_get_query_results_request();
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::unsafe_arena_release_job_get_query_results_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  if (_internal_has_job_get_query_results_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* temp = _impl_.request_.job_get_query_results_request_;
    _impl_.request_.job_get_query_results_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_get_query_results_request(::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request) {
  clear_request();
  if (job_get_query_results_request) {
    set_has_job_get_query_results_request();
    _impl_.request_.job_get_query_results_request_ = job_get_query_results_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::_internal_mutable_job_get_query_results_request() {
  if (!_internal_has_job_get_query_results_request()) {
    clear_request();
    set_has_job_get_query_results_request();
    _impl_.request_.job_get_query_results_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.job_get_query_results_request_;
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::mutable_job_get_query_results_request() {
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* _msg = _internal_mutable_job_get_query_results_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
inline bool AuditData::_internal_has_table_data_list_request() const {
  return request_case() == kTableDataListRequest;
}
inline bool AuditData::has_table_data_list_request() const {
  return _internal_has_table_data_list_request();
}
inline void AuditData::set_has_table_data_list_request() {
  _impl_._oneof_case_[0] = kTableDataListRequest;
}
inline void AuditData::clear_table_data_list_request() {
  if (_internal_has_table_data_list_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.table_data_list_request_;
    }
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::release_table_data_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  if (_internal_has_table_data_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableDataListRequest* temp = _impl_.request_.table_data_list_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.table_data_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableDataListRequest& AuditData::_internal_table_data_list_request() const {
  return _internal_has_table_data_list_request()
      ? *_impl_.request_.table_data_list_request_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableDataListRequest&>(::google::cloud::bigquery::logging::v1::_TableDataListRequest_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableDataListRequest& AuditData::table_data_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return _internal_table_data_list_request();
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::unsafe_arena_release_table_data_list_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  if (_internal_has_table_data_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableDataListRequest* temp = _impl_.request_.table_data_list_request_;
    _impl_.request_.table_data_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_table_data_list_request(::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request) {
  clear_request();
  if (table_data_list_request) {
    set_has_table_data_list_request();
    _impl_.request_.table_data_list_request_ = table_data_list_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::_internal_mutable_table_data_list_request() {
  if (!_internal_has_table_data_list_request()) {
    clear_request();
    set_has_table_data_list_request();
    _impl_.request_.table_data_list_request_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::TableDataListRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.table_data_list_request_;
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::mutable_table_data_list_request() {
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* _msg = _internal_mutable_table_data_list_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return _msg;
}

// .google.iam.v1.SetIamPolicyRequest set_iam_policy_request = 20;
inline bool AuditData::_internal_has_set_iam_policy_request() const {
  return request_case() == kSetIamPolicyRequest;
}
inline bool AuditData::has_set_iam_policy_request() const {
  return _internal_has_set_iam_policy_request();
}
inline void AuditData::set_has_set_iam_policy_request() {
  _impl_._oneof_case_[0] = kSetIamPolicyRequest;
}
inline ::google::iam::v1::SetIamPolicyRequest* AuditData::release_set_iam_policy_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.set_iam_policy_request)
  if (_internal_has_set_iam_policy_request()) {
    clear_has_request();
    ::google::iam::v1::SetIamPolicyRequest* temp = _impl_.request_.set_iam_policy_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.set_iam_policy_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::iam::v1::SetIamPolicyRequest& AuditData::_internal_set_iam_policy_request() const {
  return _internal_has_set_iam_policy_request()
      ? *_impl_.request_.set_iam_policy_request_
      : reinterpret_cast< ::google::iam::v1::SetIamPolicyRequest&>(::google::iam::v1::_SetIamPolicyRequest_default_instance_);
}
inline const ::google::iam::v1::SetIamPolicyRequest& AuditData::set_iam_policy_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.set_iam_policy_request)
  return _internal_set_iam_policy_request();
}
inline ::google::iam::v1::SetIamPolicyRequest* AuditData::unsafe_arena_release_set_iam_policy_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.set_iam_policy_request)
  if (_internal_has_set_iam_policy_request()) {
    clear_has_request();
    ::google::iam::v1::SetIamPolicyRequest* temp = _impl_.request_.set_iam_policy_request_;
    _impl_.request_.set_iam_policy_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_set_iam_policy_request(::google::iam::v1::SetIamPolicyRequest* set_iam_policy_request) {
  clear_request();
  if (set_iam_policy_request) {
    set_has_set_iam_policy_request();
    _impl_.request_.set_iam_policy_request_ = set_iam_policy_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.set_iam_policy_request)
}
inline ::google::iam::v1::SetIamPolicyRequest* AuditData::_internal_mutable_set_iam_policy_request() {
  if (!_internal_has_set_iam_policy_request()) {
    clear_request();
    set_has_set_iam_policy_request();
    _impl_.request_.set_iam_policy_request_ = CreateMaybeMessage< ::google::iam::v1::SetIamPolicyRequest >(GetArenaForAllocation());
  }
  return _impl_.request_.set_iam_policy_request_;
}
inline ::google::iam::v1::SetIamPolicyRequest* AuditData::mutable_set_iam_policy_request() {
  ::google::iam::v1::SetIamPolicyRequest* _msg = _internal_mutable_set_iam_policy_request();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.set_iam_policy_request)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
inline bool AuditData::_internal_has_table_insert_response() const {
  return response_case() == kTableInsertResponse;
}
inline bool AuditData::has_table_insert_response() const {
  return _internal_has_table_insert_response();
}
inline void AuditData::set_has_table_insert_response() {
  _impl_._oneof_case_[1] = kTableInsertResponse;
}
inline void AuditData::clear_table_insert_response() {
  if (_internal_has_table_insert_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.table_insert_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::release_table_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  if (_internal_has_table_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableInsertResponse* temp = _impl_.response_.table_insert_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.table_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertResponse& AuditData::_internal_table_insert_response() const {
  return _internal_has_table_insert_response()
      ? *_impl_.response_.table_insert_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableInsertResponse&>(::google::cloud::bigquery::logging::v1::_TableInsertResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertResponse& AuditData::table_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return _internal_table_insert_response();
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::unsafe_arena_release_table_insert_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  if (_internal_has_table_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableInsertResponse* temp = _impl_.response_.table_insert_response_;
    _impl_.response_.table_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_table_insert_response(::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response) {
  clear_response();
  if (table_insert_response) {
    set_has_table_insert_response();
    _impl_.response_.table_insert_response_ = table_insert_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::_internal_mutable_table_insert_response() {
  if (!_internal_has_table_insert_response()) {
    clear_response();
    set_has_table_insert_response();
    _impl_.response_.table_insert_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::TableInsertResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.table_insert_response_;
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::mutable_table_insert_response() {
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* _msg = _internal_mutable_table_insert_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
inline bool AuditData::_internal_has_table_update_response() const {
  return response_case() == kTableUpdateResponse;
}
inline bool AuditData::has_table_update_response() const {
  return _internal_has_table_update_response();
}
inline void AuditData::set_has_table_update_response() {
  _impl_._oneof_case_[1] = kTableUpdateResponse;
}
inline void AuditData::clear_table_update_response() {
  if (_internal_has_table_update_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.table_update_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::release_table_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  if (_internal_has_table_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableUpdateResponse* temp = _impl_.response_.table_update_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.table_update_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& AuditData::_internal_table_update_response() const {
  return _internal_has_table_update_response()
      ? *_impl_.response_.table_update_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableUpdateResponse&>(::google::cloud::bigquery::logging::v1::_TableUpdateResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& AuditData::table_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return _internal_table_update_response();
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::unsafe_arena_release_table_update_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  if (_internal_has_table_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableUpdateResponse* temp = _impl_.response_.table_update_response_;
    _impl_.response_.table_update_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_table_update_response(::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response) {
  clear_response();
  if (table_update_response) {
    set_has_table_update_response();
    _impl_.response_.table_update_response_ = table_update_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::_internal_mutable_table_update_response() {
  if (!_internal_has_table_update_response()) {
    clear_response();
    set_has_table_update_response();
    _impl_.response_.table_update_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::TableUpdateResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.table_update_response_;
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::mutable_table_update_response() {
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* _msg = _internal_mutable_table_update_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
inline bool AuditData::_internal_has_dataset_insert_response() const {
  return response_case() == kDatasetInsertResponse;
}
inline bool AuditData::has_dataset_insert_response() const {
  return _internal_has_dataset_insert_response();
}
inline void AuditData::set_has_dataset_insert_response() {
  _impl_._oneof_case_[1] = kDatasetInsertResponse;
}
inline void AuditData::clear_dataset_insert_response() {
  if (_internal_has_dataset_insert_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.dataset_insert_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::release_dataset_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  if (_internal_has_dataset_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* temp = _impl_.response_.dataset_insert_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.dataset_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& AuditData::_internal_dataset_insert_response() const {
  return _internal_has_dataset_insert_response()
      ? *_impl_.response_.dataset_insert_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertResponse&>(::google::cloud::bigquery::logging::v1::_DatasetInsertResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& AuditData::dataset_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return _internal_dataset_insert_response();
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::unsafe_arena_release_dataset_insert_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  if (_internal_has_dataset_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* temp = _impl_.response_.dataset_insert_response_;
    _impl_.response_.dataset_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_dataset_insert_response(::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response) {
  clear_response();
  if (dataset_insert_response) {
    set_has_dataset_insert_response();
    _impl_.response_.dataset_insert_response_ = dataset_insert_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::_internal_mutable_dataset_insert_response() {
  if (!_internal_has_dataset_insert_response()) {
    clear_response();
    set_has_dataset_insert_response();
    _impl_.response_.dataset_insert_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::DatasetInsertResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.dataset_insert_response_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::mutable_dataset_insert_response() {
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* _msg = _internal_mutable_dataset_insert_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
inline bool AuditData::_internal_has_dataset_update_response() const {
  return response_case() == kDatasetUpdateResponse;
}
inline bool AuditData::has_dataset_update_response() const {
  return _internal_has_dataset_update_response();
}
inline void AuditData::set_has_dataset_update_response() {
  _impl_._oneof_case_[1] = kDatasetUpdateResponse;
}
inline void AuditData::clear_dataset_update_response() {
  if (_internal_has_dataset_update_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.dataset_update_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::release_dataset_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  if (_internal_has_dataset_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* temp = _impl_.response_.dataset_update_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.dataset_update_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& AuditData::_internal_dataset_update_response() const {
  return _internal_has_dataset_update_response()
      ? *_impl_.response_.dataset_update_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse&>(::google::cloud::bigquery::logging::v1::_DatasetUpdateResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& AuditData::dataset_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return _internal_dataset_update_response();
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::unsafe_arena_release_dataset_update_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  if (_internal_has_dataset_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* temp = _impl_.response_.dataset_update_response_;
    _impl_.response_.dataset_update_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_dataset_update_response(::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response) {
  clear_response();
  if (dataset_update_response) {
    set_has_dataset_update_response();
    _impl_.response_.dataset_update_response_ = dataset_update_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::_internal_mutable_dataset_update_response() {
  if (!_internal_has_dataset_update_response()) {
    clear_response();
    set_has_dataset_update_response();
    _impl_.response_.dataset_update_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.dataset_update_response_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::mutable_dataset_update_response() {
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* _msg = _internal_mutable_dataset_update_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
inline bool AuditData::_internal_has_job_insert_response() const {
  return response_case() == kJobInsertResponse;
}
inline bool AuditData::has_job_insert_response() const {
  return _internal_has_job_insert_response();
}
inline void AuditData::set_has_job_insert_response() {
  _impl_._oneof_case_[1] = kJobInsertResponse;
}
inline void AuditData::clear_job_insert_response() {
  if (_internal_has_job_insert_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.job_insert_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::release_job_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  if (_internal_has_job_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobInsertResponse* temp = _impl_.response_.job_insert_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.job_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertResponse& AuditData::_internal_job_insert_response() const {
  return _internal_has_job_insert_response()
      ? *_impl_.response_.job_insert_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobInsertResponse&>(::google::cloud::bigquery::logging::v1::_JobInsertResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertResponse& AuditData::job_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return _internal_job_insert_response();
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::unsafe_arena_release_job_insert_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  if (_internal_has_job_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobInsertResponse* temp = _impl_.response_.job_insert_response_;
    _impl_.response_.job_insert_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_insert_response(::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response) {
  clear_response();
  if (job_insert_response) {
    set_has_job_insert_response();
    _impl_.response_.job_insert_response_ = job_insert_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::_internal_mutable_job_insert_response() {
  if (!_internal_has_job_insert_response()) {
    clear_response();
    set_has_job_insert_response();
    _impl_.response_.job_insert_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobInsertResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.job_insert_response_;
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::mutable_job_insert_response() {
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* _msg = _internal_mutable_job_insert_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
inline bool AuditData::_internal_has_job_query_response() const {
  return response_case() == kJobQueryResponse;
}
inline bool AuditData::has_job_query_response() const {
  return _internal_has_job_query_response();
}
inline void AuditData::set_has_job_query_response() {
  _impl_._oneof_case_[1] = kJobQueryResponse;
}
inline void AuditData::clear_job_query_response() {
  if (_internal_has_job_query_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.job_query_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::release_job_query_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  if (_internal_has_job_query_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryResponse* temp = _impl_.response_.job_query_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.job_query_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryResponse& AuditData::_internal_job_query_response() const {
  return _internal_has_job_query_response()
      ? *_impl_.response_.job_query_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryResponse&>(::google::cloud::bigquery::logging::v1::_JobQueryResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryResponse& AuditData::job_query_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return _internal_job_query_response();
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::unsafe_arena_release_job_query_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  if (_internal_has_job_query_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryResponse* temp = _impl_.response_.job_query_response_;
    _impl_.response_.job_query_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_query_response(::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response) {
  clear_response();
  if (job_query_response) {
    set_has_job_query_response();
    _impl_.response_.job_query_response_ = job_query_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::_internal_mutable_job_query_response() {
  if (!_internal_has_job_query_response()) {
    clear_response();
    set_has_job_query_response();
    _impl_.response_.job_query_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobQueryResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.job_query_response_;
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::mutable_job_query_response() {
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* _msg = _internal_mutable_job_query_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
inline bool AuditData::_internal_has_job_get_query_results_response() const {
  return response_case() == kJobGetQueryResultsResponse;
}
inline bool AuditData::has_job_get_query_results_response() const {
  return _internal_has_job_get_query_results_response();
}
inline void AuditData::set_has_job_get_query_results_response() {
  _impl_._oneof_case_[1] = kJobGetQueryResultsResponse;
}
inline void AuditData::clear_job_get_query_results_response() {
  if (_internal_has_job_get_query_results_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.job_get_query_results_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::release_job_get_query_results_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  if (_internal_has_job_get_query_results_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* temp = _impl_.response_.job_get_query_results_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.job_get_query_results_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& AuditData::_internal_job_get_query_results_response() const {
  return _internal_has_job_get_query_results_response()
      ? *_impl_.response_.job_get_query_results_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse&>(::google::cloud::bigquery::logging::v1::_JobGetQueryResultsResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& AuditData::job_get_query_results_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return _internal_job_get_query_results_response();
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::unsafe_arena_release_job_get_query_results_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  if (_internal_has_job_get_query_results_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* temp = _impl_.response_.job_get_query_results_response_;
    _impl_.response_.job_get_query_results_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_get_query_results_response(::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response) {
  clear_response();
  if (job_get_query_results_response) {
    set_has_job_get_query_results_response();
    _impl_.response_.job_get_query_results_response_ = job_get_query_results_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::_internal_mutable_job_get_query_results_response() {
  if (!_internal_has_job_get_query_results_response()) {
    clear_response();
    set_has_job_get_query_results_response();
    _impl_.response_.job_get_query_results_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.job_get_query_results_response_;
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::mutable_job_get_query_results_response() {
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* _msg = _internal_mutable_job_get_query_results_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
inline bool AuditData::_internal_has_job_query_done_response() const {
  return response_case() == kJobQueryDoneResponse;
}
inline bool AuditData::has_job_query_done_response() const {
  return _internal_has_job_query_done_response();
}
inline void AuditData::set_has_job_query_done_response() {
  _impl_._oneof_case_[1] = kJobQueryDoneResponse;
}
inline void AuditData::clear_job_query_done_response() {
  if (_internal_has_job_query_done_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.job_query_done_response_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::release_job_query_done_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  if (_internal_has_job_query_done_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* temp = _impl_.response_.job_query_done_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.job_query_done_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& AuditData::_internal_job_query_done_response() const {
  return _internal_has_job_query_done_response()
      ? *_impl_.response_.job_query_done_response_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse&>(::google::cloud::bigquery::logging::v1::_JobQueryDoneResponse_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& AuditData::job_query_done_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return _internal_job_query_done_response();
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::unsafe_arena_release_job_query_done_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  if (_internal_has_job_query_done_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* temp = _impl_.response_.job_query_done_response_;
    _impl_.response_.job_query_done_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_job_query_done_response(::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response) {
  clear_response();
  if (job_query_done_response) {
    set_has_job_query_done_response();
    _impl_.response_.job_query_done_response_ = job_query_done_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::_internal_mutable_job_query_done_response() {
  if (!_internal_has_job_query_done_response()) {
    clear_response();
    set_has_job_query_done_response();
    _impl_.response_.job_query_done_response_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.job_query_done_response_;
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::mutable_job_query_done_response() {
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* _msg = _internal_mutable_job_query_done_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return _msg;
}

// .google.iam.v1.Policy policy_response = 21;
inline bool AuditData::_internal_has_policy_response() const {
  return response_case() == kPolicyResponse;
}
inline bool AuditData::has_policy_response() const {
  return _internal_has_policy_response();
}
inline void AuditData::set_has_policy_response() {
  _impl_._oneof_case_[1] = kPolicyResponse;
}
inline ::google::iam::v1::Policy* AuditData::release_policy_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.policy_response)
  if (_internal_has_policy_response()) {
    clear_has_response();
    ::google::iam::v1::Policy* temp = _impl_.response_.policy_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.policy_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::iam::v1::Policy& AuditData::_internal_policy_response() const {
  return _internal_has_policy_response()
      ? *_impl_.response_.policy_response_
      : reinterpret_cast< ::google::iam::v1::Policy&>(::google::iam::v1::_Policy_default_instance_);
}
inline const ::google::iam::v1::Policy& AuditData::policy_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.policy_response)
  return _internal_policy_response();
}
inline ::google::iam::v1::Policy* AuditData::unsafe_arena_release_policy_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.AuditData.policy_response)
  if (_internal_has_policy_response()) {
    clear_has_response();
    ::google::iam::v1::Policy* temp = _impl_.response_.policy_response_;
    _impl_.response_.policy_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuditData::unsafe_arena_set_allocated_policy_response(::google::iam::v1::Policy* policy_response) {
  clear_response();
  if (policy_response) {
    set_has_policy_response();
    _impl_.response_.policy_response_ = policy_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.policy_response)
}
inline ::google::iam::v1::Policy* AuditData::_internal_mutable_policy_response() {
  if (!_internal_has_policy_response()) {
    clear_response();
    set_has_policy_response();
    _impl_.response_.policy_response_ = CreateMaybeMessage< ::google::iam::v1::Policy >(GetArenaForAllocation());
  }
  return _impl_.response_.policy_response_;
}
inline ::google::iam::v1::Policy* AuditData::mutable_policy_response() {
  ::google::iam::v1::Policy* _msg = _internal_mutable_policy_response();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.policy_response)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
inline bool AuditData::_internal_has_job_completed_event() const {
  return this != internal_default_instance() && _impl_.job_completed_event_ != nullptr;
}
inline bool AuditData::has_job_completed_event() const {
  return _internal_has_job_completed_event();
}
inline void AuditData::clear_job_completed_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_completed_event_ != nullptr) {
    delete _impl_.job_completed_event_;
  }
  _impl_.job_completed_event_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& AuditData::_internal_job_completed_event() const {
  const ::google::cloud::bigquery::logging::v1::JobCompletedEvent* p = _impl_.job_completed_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobCompletedEvent&>(
      ::google::cloud::bigquery::logging::v1::_JobCompletedEvent_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& AuditData::job_completed_event() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return _internal_job_completed_event();
}
inline void AuditData::unsafe_arena_set_allocated_job_completed_event(
    ::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_completed_event_);
  }
  _impl_.job_completed_event_ = job_completed_event;
  if (job_completed_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::release_job_completed_event() {
  
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* temp = _impl_.job_completed_event_;
  _impl_.job_completed_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::unsafe_arena_release_job_completed_event() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* temp = _impl_.job_completed_event_;
  _impl_.job_completed_event_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::_internal_mutable_job_completed_event() {
  
  if (_impl_.job_completed_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobCompletedEvent>(GetArenaForAllocation());
    _impl_.job_completed_event_ = p;
  }
  return _impl_.job_completed_event_;
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::mutable_job_completed_event() {
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* _msg = _internal_mutable_job_completed_event();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return _msg;
}
inline void AuditData::set_allocated_job_completed_event(::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_completed_event_;
  }
  if (job_completed_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job_completed_event);
    if (message_arena != submessage_arena) {
      job_completed_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_completed_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_completed_event_ = job_completed_event;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
}

// repeated .google.cloud.bigquery.logging.v1.TableDataReadEvent table_data_read_events = 19;
inline int AuditData::_internal_table_data_read_events_size() const {
  return _impl_.table_data_read_events_.size();
}
inline int AuditData::table_data_read_events_size() const {
  return _internal_table_data_read_events_size();
}
inline void AuditData::clear_table_data_read_events() {
  _impl_.table_data_read_events_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::TableDataReadEvent* AuditData::mutable_table_data_read_events(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_data_read_events)
  return _impl_.table_data_read_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDataReadEvent >*
AuditData::mutable_table_data_read_events() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.AuditData.table_data_read_events)
  return &_impl_.table_data_read_events_;
}
inline const ::google::cloud::bigquery::logging::v1::TableDataReadEvent& AuditData::_internal_table_data_read_events(int index) const {
  return _impl_.table_data_read_events_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::TableDataReadEvent& AuditData::table_data_read_events(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_data_read_events)
  return _internal_table_data_read_events(index);
}
inline ::google::cloud::bigquery::logging::v1::TableDataReadEvent* AuditData::_internal_add_table_data_read_events() {
  return _impl_.table_data_read_events_.Add();
}
inline ::google::cloud::bigquery::logging::v1::TableDataReadEvent* AuditData::add_table_data_read_events() {
  ::google::cloud::bigquery::logging::v1::TableDataReadEvent* _add = _internal_add_table_data_read_events();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.AuditData.table_data_read_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDataReadEvent >&
AuditData::table_data_read_events() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.AuditData.table_data_read_events)
  return _impl_.table_data_read_events_;
}

inline bool AuditData::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void AuditData::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline bool AuditData::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void AuditData::clear_has_response() {
  _impl_._oneof_case_[1] = RESPONSE_NOT_SET;
}
inline AuditData::RequestCase AuditData::request_case() const {
  return AuditData::RequestCase(_impl_._oneof_case_[0]);
}
inline AuditData::ResponseCase AuditData::response_case() const {
  return AuditData::ResponseCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// TableInsertRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableInsertRequest::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool TableInsertRequest::has_resource() const {
  return _internal_has_resource();
}
inline void TableInsertRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertRequest::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table&>(
      ::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return _internal_resource();
}
inline void TableInsertRequest::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Table* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Table>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Table* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return _msg;
}
inline void TableInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
}

// -------------------------------------------------------------------

// TableUpdateRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableUpdateRequest::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool TableUpdateRequest::has_resource() const {
  return _internal_has_resource();
}
inline void TableUpdateRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateRequest::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table&>(
      ::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return _internal_resource();
}
inline void TableUpdateRequest::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Table* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Table>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Table* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return _msg;
}
inline void TableUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
}

// -------------------------------------------------------------------

// TableInsertResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableInsertResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool TableInsertResponse::has_resource() const {
  return _internal_has_resource();
}
inline void TableInsertResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertResponse::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table&>(
      ::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return _internal_resource();
}
inline void TableInsertResponse::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Table* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Table>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Table* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return _msg;
}
inline void TableInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
}

// -------------------------------------------------------------------

// TableUpdateResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableUpdateResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool TableUpdateResponse::has_resource() const {
  return _internal_has_resource();
}
inline void TableUpdateResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateResponse::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table&>(
      ::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return _internal_resource();
}
inline void TableUpdateResponse::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Table* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Table>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Table* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return _msg;
}
inline void TableUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
}

// -------------------------------------------------------------------

// DatasetListRequest

// bool list_all = 1;
inline void DatasetListRequest::clear_list_all() {
  _impl_.list_all_ = false;
}
inline bool DatasetListRequest::_internal_list_all() const {
  return _impl_.list_all_;
}
inline bool DatasetListRequest::list_all() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
  return _internal_list_all();
}
inline void DatasetListRequest::_internal_set_list_all(bool value) {
  
  _impl_.list_all_ = value;
}
inline void DatasetListRequest::set_list_all(bool value) {
  _internal_set_list_all(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
}

// -------------------------------------------------------------------

// DatasetInsertRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetInsertRequest::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool DatasetInsertRequest::has_resource() const {
  return _internal_has_resource();
}
inline void DatasetInsertRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertRequest::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset&>(
      ::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return _internal_resource();
}
inline void DatasetInsertRequest::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Dataset* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Dataset>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Dataset* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return _msg;
}
inline void DatasetInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
}

// -------------------------------------------------------------------

// DatasetInsertResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetInsertResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool DatasetInsertResponse::has_resource() const {
  return _internal_has_resource();
}
inline void DatasetInsertResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertResponse::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset&>(
      ::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return _internal_resource();
}
inline void DatasetInsertResponse::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Dataset* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Dataset>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Dataset* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return _msg;
}
inline void DatasetInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
}

// -------------------------------------------------------------------

// DatasetUpdateRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetUpdateRequest::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool DatasetUpdateRequest::has_resource() const {
  return _internal_has_resource();
}
inline void DatasetUpdateRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateRequest::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset&>(
      ::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return _internal_resource();
}
inline void DatasetUpdateRequest::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Dataset* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Dataset>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Dataset* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return _msg;
}
inline void DatasetUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
}

// -------------------------------------------------------------------

// DatasetUpdateResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetUpdateResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool DatasetUpdateResponse::has_resource() const {
  return _internal_has_resource();
}
inline void DatasetUpdateResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateResponse::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset&>(
      ::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return _internal_resource();
}
inline void DatasetUpdateResponse::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Dataset* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Dataset>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Dataset* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return _msg;
}
inline void DatasetUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
}

// -------------------------------------------------------------------

// JobInsertRequest

// .google.cloud.bigquery.logging.v1.Job resource = 1;
inline bool JobInsertRequest::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool JobInsertRequest::has_resource() const {
  return _internal_has_resource();
}
inline void JobInsertRequest::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertRequest::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return _internal_resource();
}
inline void JobInsertRequest::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Job* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return _msg;
}
inline void JobInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
}

// -------------------------------------------------------------------

// JobInsertResponse

// .google.cloud.bigquery.logging.v1.Job resource = 1;
inline bool JobInsertResponse::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool JobInsertResponse::has_resource() const {
  return _internal_has_resource();
}
inline void JobInsertResponse::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertResponse::_internal_resource() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return _internal_resource();
}
inline void JobInsertResponse::unsafe_arena_set_allocated_resource(
    ::google::cloud::bigquery::logging::v1::Job* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::release_resource() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::mutable_resource() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return _msg;
}
inline void JobInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
}

// -------------------------------------------------------------------

// JobQueryRequest

// string query = 1;
inline void JobQueryRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& JobQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobQueryRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
inline std::string* JobQueryRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return _s;
}
inline const std::string& JobQueryRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void JobQueryRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* JobQueryRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* JobQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return _impl_.query_.Release();
}
inline void JobQueryRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}

// uint32 max_results = 2;
inline void JobQueryRequest::clear_max_results() {
  _impl_.max_results_ = 0u;
}
inline uint32_t JobQueryRequest::_internal_max_results() const {
  return _impl_.max_results_;
}
inline uint32_t JobQueryRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
  return _internal_max_results();
}
inline void JobQueryRequest::_internal_set_max_results(uint32_t value) {
  
  _impl_.max_results_ = value;
}
inline void JobQueryRequest::set_max_results(uint32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
inline bool JobQueryRequest::_internal_has_default_dataset() const {
  return this != internal_default_instance() && _impl_.default_dataset_ != nullptr;
}
inline bool JobQueryRequest::has_default_dataset() const {
  return _internal_has_default_dataset();
}
inline void JobQueryRequest::clear_default_dataset() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_dataset_ != nullptr) {
    delete _impl_.default_dataset_;
  }
  _impl_.default_dataset_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobQueryRequest::_internal_default_dataset() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = _impl_.default_dataset_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName&>(
      ::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobQueryRequest::default_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return _internal_default_dataset();
}
inline void JobQueryRequest::unsafe_arena_set_allocated_default_dataset(
    ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_dataset_);
  }
  _impl_.default_dataset_ = default_dataset;
  if (default_dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::release_default_dataset() {
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.default_dataset_;
  _impl_.default_dataset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::unsafe_arena_release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.default_dataset_;
  _impl_.default_dataset_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::_internal_mutable_default_dataset() {
  
  if (_impl_.default_dataset_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetName>(GetArenaForAllocation());
    _impl_.default_dataset_ = p;
  }
  return _impl_.default_dataset_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::mutable_default_dataset() {
  ::google::cloud::bigquery::logging::v1::DatasetName* _msg = _internal_mutable_default_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return _msg;
}
inline void JobQueryRequest::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_dataset_;
  }
  if (default_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_dataset);
    if (message_arena != submessage_arena) {
      default_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_dataset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_dataset_ = default_dataset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
}

// string project_id = 4;
inline void JobQueryRequest::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& JobQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobQueryRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
inline std::string* JobQueryRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return _s;
}
inline const std::string& JobQueryRequest::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void JobQueryRequest::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JobQueryRequest::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JobQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return _impl_.project_id_.Release();
}
inline void JobQueryRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}

// bool dry_run = 5;
inline void JobQueryRequest::clear_dry_run() {
  _impl_.dry_run_ = false;
}
inline bool JobQueryRequest::_internal_dry_run() const {
  return _impl_.dry_run_;
}
inline bool JobQueryRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
  return _internal_dry_run();
}
inline void JobQueryRequest::_internal_set_dry_run(bool value) {
  
  _impl_.dry_run_ = value;
}
inline void JobQueryRequest::set_dry_run(bool value) {
  _internal_set_dry_run(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
}

// -------------------------------------------------------------------

// JobQueryResponse

// uint64 total_results = 1;
inline void JobQueryResponse::clear_total_results() {
  _impl_.total_results_ = uint64_t{0u};
}
inline uint64_t JobQueryResponse::_internal_total_results() const {
  return _impl_.total_results_;
}
inline uint64_t JobQueryResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
  return _internal_total_results();
}
inline void JobQueryResponse::_internal_set_total_results(uint64_t value) {
  
  _impl_.total_results_ = value;
}
inline void JobQueryResponse::set_total_results(uint64_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobQueryResponse::_internal_has_job() const {
  return this != internal_default_instance() && _impl_.job_ != nullptr;
}
inline bool JobQueryResponse::has_job() const {
  return _internal_has_job();
}
inline void JobQueryResponse::clear_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryResponse::_internal_job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.job_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return _internal_job();
}
inline void JobQueryResponse::unsafe_arena_set_allocated_job(
    ::google::cloud::bigquery::logging::v1::Job* job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_);
  }
  _impl_.job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::release_job() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::_internal_mutable_job() {
  
  if (_impl_.job_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.job_ = p;
  }
  return _impl_.job_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::mutable_job() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return _msg;
}
inline void JobQueryResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
}

// -------------------------------------------------------------------

// JobGetQueryResultsRequest

// uint32 max_results = 1;
inline void JobGetQueryResultsRequest::clear_max_results() {
  _impl_.max_results_ = 0u;
}
inline uint32_t JobGetQueryResultsRequest::_internal_max_results() const {
  return _impl_.max_results_;
}
inline uint32_t JobGetQueryResultsRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
  return _internal_max_results();
}
inline void JobGetQueryResultsRequest::_internal_set_max_results(uint32_t value) {
  
  _impl_.max_results_ = value;
}
inline void JobGetQueryResultsRequest::set_max_results(uint32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
}

// uint64 start_row = 2;
inline void JobGetQueryResultsRequest::clear_start_row() {
  _impl_.start_row_ = uint64_t{0u};
}
inline uint64_t JobGetQueryResultsRequest::_internal_start_row() const {
  return _impl_.start_row_;
}
inline uint64_t JobGetQueryResultsRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
  return _internal_start_row();
}
inline void JobGetQueryResultsRequest::_internal_set_start_row(uint64_t value) {
  
  _impl_.start_row_ = value;
}
inline void JobGetQueryResultsRequest::set_start_row(uint64_t value) {
  _internal_set_start_row(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
}

// -------------------------------------------------------------------

// JobGetQueryResultsResponse

// uint64 total_results = 1;
inline void JobGetQueryResultsResponse::clear_total_results() {
  _impl_.total_results_ = uint64_t{0u};
}
inline uint64_t JobGetQueryResultsResponse::_internal_total_results() const {
  return _impl_.total_results_;
}
inline uint64_t JobGetQueryResultsResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
  return _internal_total_results();
}
inline void JobGetQueryResultsResponse::_internal_set_total_results(uint64_t value) {
  
  _impl_.total_results_ = value;
}
inline void JobGetQueryResultsResponse::set_total_results(uint64_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobGetQueryResultsResponse::_internal_has_job() const {
  return this != internal_default_instance() && _impl_.job_ != nullptr;
}
inline bool JobGetQueryResultsResponse::has_job() const {
  return _internal_has_job();
}
inline void JobGetQueryResultsResponse::clear_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobGetQueryResultsResponse::_internal_job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.job_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobGetQueryResultsResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return _internal_job();
}
inline void JobGetQueryResultsResponse::unsafe_arena_set_allocated_job(
    ::google::cloud::bigquery::logging::v1::Job* job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_);
  }
  _impl_.job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::release_job() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::_internal_mutable_job() {
  
  if (_impl_.job_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.job_ = p;
  }
  return _impl_.job_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::mutable_job() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return _msg;
}
inline void JobGetQueryResultsResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
}

// -------------------------------------------------------------------

// JobQueryDoneResponse

// .google.cloud.bigquery.logging.v1.Job job = 1;
inline bool JobQueryDoneResponse::_internal_has_job() const {
  return this != internal_default_instance() && _impl_.job_ != nullptr;
}
inline bool JobQueryDoneResponse::has_job() const {
  return _internal_has_job();
}
inline void JobQueryDoneResponse::clear_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryDoneResponse::_internal_job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.job_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryDoneResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return _internal_job();
}
inline void JobQueryDoneResponse::unsafe_arena_set_allocated_job(
    ::google::cloud::bigquery::logging::v1::Job* job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_);
  }
  _impl_.job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::release_job() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::_internal_mutable_job() {
  
  if (_impl_.job_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.job_ = p;
  }
  return _impl_.job_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::mutable_job() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return _msg;
}
inline void JobQueryDoneResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
}

// -------------------------------------------------------------------

// JobCompletedEvent

// string event_name = 1;
inline void JobCompletedEvent::clear_event_name() {
  _impl_.event_name_.ClearToEmpty();
}
inline const std::string& JobCompletedEvent::event_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobCompletedEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
inline std::string* JobCompletedEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return _s;
}
inline const std::string& JobCompletedEvent::_internal_event_name() const {
  return _impl_.event_name_.Get();
}
inline void JobCompletedEvent::_internal_set_event_name(const std::string& value) {
  
  _impl_.event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* JobCompletedEvent::_internal_mutable_event_name() {
  
  return _impl_.event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* JobCompletedEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return _impl_.event_name_.Release();
}
inline void JobCompletedEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  _impl_.event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobCompletedEvent::_internal_has_job() const {
  return this != internal_default_instance() && _impl_.job_ != nullptr;
}
inline bool JobCompletedEvent::has_job() const {
  return _internal_has_job();
}
inline void JobCompletedEvent::clear_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobCompletedEvent::_internal_job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = _impl_.job_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job&>(
      ::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobCompletedEvent::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return _internal_job();
}
inline void JobCompletedEvent::unsafe_arena_set_allocated_job(
    ::google::cloud::bigquery::logging::v1::Job* job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_);
  }
  _impl_.job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::release_job() {
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = _impl_.job_;
  _impl_.job_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::_internal_mutable_job() {
  
  if (_impl_.job_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::Job>(GetArenaForAllocation());
    _impl_.job_ = p;
  }
  return _impl_.job_;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::mutable_job() {
  ::google::cloud::bigquery::logging::v1::Job* _msg = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return _msg;
}
inline void JobCompletedEvent::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
}

// -------------------------------------------------------------------

// TableDataReadEvent

// .google.cloud.bigquery.logging.v1.TableName table_name = 1;
inline bool TableDataReadEvent::_internal_has_table_name() const {
  return this != internal_default_instance() && _impl_.table_name_ != nullptr;
}
inline bool TableDataReadEvent::has_table_name() const {
  return _internal_has_table_name();
}
inline void TableDataReadEvent::clear_table_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_name_ != nullptr) {
    delete _impl_.table_name_;
  }
  _impl_.table_name_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& TableDataReadEvent::_internal_table_name() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.table_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& TableDataReadEvent::table_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataReadEvent.table_name)
  return _internal_table_name();
}
inline void TableDataReadEvent::unsafe_arena_set_allocated_table_name(
    ::google::cloud::bigquery::logging::v1::TableName* table_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_name_);
  }
  _impl_.table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.TableDataReadEvent.table_name)
}
inline ::google::cloud::bigquery::logging::v1::TableName* TableDataReadEvent::release_table_name() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.table_name_;
  _impl_.table_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* TableDataReadEvent::unsafe_arena_release_table_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableDataReadEvent.table_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.table_name_;
  _impl_.table_name_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* TableDataReadEvent::_internal_mutable_table_name() {
  
  if (_impl_.table_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.table_name_ = p;
  }
  return _impl_.table_name_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* TableDataReadEvent::mutable_table_name() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDataReadEvent.table_name)
  return _msg;
}
inline void TableDataReadEvent::set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_name_;
  }
  if (table_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_name);
    if (message_arena != submessage_arena) {
      table_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_name_ = table_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableDataReadEvent.table_name)
}

// repeated string referenced_fields = 2;
inline int TableDataReadEvent::_internal_referenced_fields_size() const {
  return _impl_.referenced_fields_.size();
}
inline int TableDataReadEvent::referenced_fields_size() const {
  return _internal_referenced_fields_size();
}
inline void TableDataReadEvent::clear_referenced_fields() {
  _impl_.referenced_fields_.Clear();
}
inline std::string* TableDataReadEvent::add_referenced_fields() {
  std::string* _s = _internal_add_referenced_fields();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
  return _s;
}
inline const std::string& TableDataReadEvent::_internal_referenced_fields(int index) const {
  return _impl_.referenced_fields_.Get(index);
}
inline const std::string& TableDataReadEvent::referenced_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
  return _internal_referenced_fields(index);
}
inline std::string* TableDataReadEvent::mutable_referenced_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
  return _impl_.referenced_fields_.Mutable(index);
}
inline void TableDataReadEvent::set_referenced_fields(int index, const std::string& value) {
  _impl_.referenced_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::set_referenced_fields(int index, std::string&& value) {
  _impl_.referenced_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::set_referenced_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.referenced_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::set_referenced_fields(int index, const char* value, size_t size) {
  _impl_.referenced_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline std::string* TableDataReadEvent::_internal_add_referenced_fields() {
  return _impl_.referenced_fields_.Add();
}
inline void TableDataReadEvent::add_referenced_fields(const std::string& value) {
  _impl_.referenced_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::add_referenced_fields(std::string&& value) {
  _impl_.referenced_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::add_referenced_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.referenced_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline void TableDataReadEvent::add_referenced_fields(const char* value, size_t size) {
  _impl_.referenced_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableDataReadEvent::referenced_fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
  return _impl_.referenced_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableDataReadEvent::mutable_referenced_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.TableDataReadEvent.referenced_fields)
  return &_impl_.referenced_fields_;
}

// -------------------------------------------------------------------

// TableDataListRequest

// uint64 start_row = 1;
inline void TableDataListRequest::clear_start_row() {
  _impl_.start_row_ = uint64_t{0u};
}
inline uint64_t TableDataListRequest::_internal_start_row() const {
  return _impl_.start_row_;
}
inline uint64_t TableDataListRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
  return _internal_start_row();
}
inline void TableDataListRequest::_internal_set_start_row(uint64_t value) {
  
  _impl_.start_row_ = value;
}
inline void TableDataListRequest::set_start_row(uint64_t value) {
  _internal_set_start_row(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
}

// uint32 max_results = 2;
inline void TableDataListRequest::clear_max_results() {
  _impl_.max_results_ = 0u;
}
inline uint32_t TableDataListRequest::_internal_max_results() const {
  return _impl_.max_results_;
}
inline uint32_t TableDataListRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
  return _internal_max_results();
}
inline void TableDataListRequest::_internal_set_max_results(uint32_t value) {
  
  _impl_.max_results_ = value;
}
inline void TableDataListRequest::set_max_results(uint32_t value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
}

// -------------------------------------------------------------------

// Table

// .google.cloud.bigquery.logging.v1.TableName table_name = 1;
inline bool Table::_internal_has_table_name() const {
  return this != internal_default_instance() && _impl_.table_name_ != nullptr;
}
inline bool Table::has_table_name() const {
  return _internal_has_table_name();
}
inline void Table::clear_table_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_name_ != nullptr) {
    delete _impl_.table_name_;
  }
  _impl_.table_name_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& Table::_internal_table_name() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.table_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& Table::table_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.table_name)
  return _internal_table_name();
}
inline void Table::unsafe_arena_set_allocated_table_name(
    ::google::cloud::bigquery::logging::v1::TableName* table_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_name_);
  }
  _impl_.table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.table_name)
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::release_table_name() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.table_name_;
  _impl_.table_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::unsafe_arena_release_table_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.table_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.table_name_;
  _impl_.table_name_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::_internal_mutable_table_name() {
  
  if (_impl_.table_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.table_name_ = p;
  }
  return _impl_.table_name_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::mutable_table_name() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.table_name)
  return _msg;
}
inline void Table::set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_name_;
  }
  if (table_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_name);
    if (message_arena != submessage_arena) {
      table_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_name_ = table_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.table_name)
}

// .google.cloud.bigquery.logging.v1.TableInfo info = 2;
inline bool Table::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool Table::has_info() const {
  return _internal_has_info();
}
inline void Table::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableInfo& Table::_internal_info() const {
  const ::google::cloud::bigquery::logging::v1::TableInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableInfo&>(
      ::google::cloud::bigquery::logging::v1::_TableInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableInfo& Table::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.info)
  return _internal_info();
}
inline void Table::unsafe_arena_set_allocated_info(
    ::google::cloud::bigquery::logging::v1::TableInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.info)
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::release_info() {
  
  ::google::cloud::bigquery::logging::v1::TableInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.info)
  
  ::google::cloud::bigquery::logging::v1::TableInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::mutable_info() {
  ::google::cloud::bigquery::logging::v1::TableInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.info)
  return _msg;
}
inline void Table::set_allocated_info(::google::cloud::bigquery::logging::v1::TableInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.info)
}

// string schema_json = 8;
inline void Table::clear_schema_json() {
  _impl_.schema_json_.ClearToEmpty();
}
inline const std::string& Table::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.schema_json)
  return _internal_schema_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Table::set_schema_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.Table.schema_json)
}
inline std::string* Table::mutable_schema_json() {
  std::string* _s = _internal_mutable_schema_json();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.schema_json)
  return _s;
}
inline const std::string& Table::_internal_schema_json() const {
  return _impl_.schema_json_.Get();
}
inline void Table::_internal_set_schema_json(const std::string& value) {
  
  _impl_.schema_json_.Set(value, GetArenaForAllocation());
}
inline std::string* Table::_internal_mutable_schema_json() {
  
  return _impl_.schema_json_.Mutable(GetArenaForAllocation());
}
inline std::string* Table::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.schema_json)
  return _impl_.schema_json_.Release();
}
inline void Table::set_allocated_schema_json(std::string* schema_json) {
  if (schema_json != nullptr) {
    
  } else {
    
  }
  _impl_.schema_json_.SetAllocated(schema_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_json_.IsDefault()) {
    _impl_.schema_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
inline bool Table::_internal_has_view() const {
  return this != internal_default_instance() && _impl_.view_ != nullptr;
}
inline bool Table::has_view() const {
  return _internal_has_view();
}
inline void Table::clear_view() {
  if (GetArenaForAllocation() == nullptr && _impl_.view_ != nullptr) {
    delete _impl_.view_;
  }
  _impl_.view_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableViewDefinition& Table::_internal_view() const {
  const ::google::cloud::bigquery::logging::v1::TableViewDefinition* p = _impl_.view_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableViewDefinition&>(
      ::google::cloud::bigquery::logging::v1::_TableViewDefinition_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableViewDefinition& Table::view() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.view)
  return _internal_view();
}
inline void Table::unsafe_arena_set_allocated_view(
    ::google::cloud::bigquery::logging::v1::TableViewDefinition* view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_);
  }
  _impl_.view_ = view;
  if (view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.view)
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::release_view() {
  
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* temp = _impl_.view_;
  _impl_.view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::unsafe_arena_release_view() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.view)
  
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* temp = _impl_.view_;
  _impl_.view_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::_internal_mutable_view() {
  
  if (_impl_.view_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableViewDefinition>(GetArenaForAllocation());
    _impl_.view_ = p;
  }
  return _impl_.view_;
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::mutable_view() {
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* _msg = _internal_mutable_view();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.view)
  return _msg;
}
inline void Table::set_allocated_view(::google::cloud::bigquery::logging::v1::TableViewDefinition* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.view_;
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.view_ = view;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.view)
}

// .google.protobuf.Timestamp expire_time = 5;
inline bool Table::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool Table::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.expire_time)
  return _internal_expire_time();
}
inline void Table::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.expire_time)
  return _msg;
}
inline void Table::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.expire_time)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Table::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Table::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.create_time)
  return _internal_create_time();
}
inline void Table::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.create_time)
  return _msg;
}
inline void Table::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.create_time)
}

// .google.protobuf.Timestamp truncate_time = 7;
inline bool Table::_internal_has_truncate_time() const {
  return this != internal_default_instance() && _impl_.truncate_time_ != nullptr;
}
inline bool Table::has_truncate_time() const {
  return _internal_has_truncate_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::_internal_truncate_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.truncate_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::truncate_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return _internal_truncate_time();
}
inline void Table::unsafe_arena_set_allocated_truncate_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* truncate_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.truncate_time_);
  }
  _impl_.truncate_time_ = truncate_time;
  if (truncate_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.truncate_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::release_truncate_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.truncate_time_;
  _impl_.truncate_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::unsafe_arena_release_truncate_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.truncate_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.truncate_time_;
  _impl_.truncate_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::_internal_mutable_truncate_time() {
  
  if (_impl_.truncate_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.truncate_time_ = p;
  }
  return _impl_.truncate_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::mutable_truncate_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_truncate_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return _msg;
}
inline void Table::set_allocated_truncate_time(::PROTOBUF_NAMESPACE_ID::Timestamp* truncate_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.truncate_time_);
  }
  if (truncate_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(truncate_time));
    if (message_arena != submessage_arena) {
      truncate_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truncate_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.truncate_time_ = truncate_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.truncate_time)
}

// .google.protobuf.Timestamp update_time = 9;
inline bool Table::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Table::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Table::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.update_time)
  return _internal_update_time();
}
inline void Table::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Table::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.update_time)
  return _msg;
}
inline void Table::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.update_time)
}

// .google.cloud.bigquery.logging.v1.EncryptionInfo encryption = 10;
inline bool Table::_internal_has_encryption() const {
  return this != internal_default_instance() && _impl_.encryption_ != nullptr;
}
inline bool Table::has_encryption() const {
  return _internal_has_encryption();
}
inline void Table::clear_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.encryption_ != nullptr) {
    delete _impl_.encryption_;
  }
  _impl_.encryption_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& Table::_internal_encryption() const {
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo* p = _impl_.encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::EncryptionInfo&>(
      ::google::cloud::bigquery::logging::v1::_EncryptionInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& Table::encryption() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.encryption)
  return _internal_encryption();
}
inline void Table::unsafe_arena_set_allocated_encryption(
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encryption_);
  }
  _impl_.encryption_ = encryption;
  if (encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Table.encryption)
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* Table::release_encryption() {
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.encryption_;
  _impl_.encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* Table::unsafe_arena_release_encryption() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.encryption)
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.encryption_;
  _impl_.encryption_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* Table::_internal_mutable_encryption() {
  
  if (_impl_.encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::EncryptionInfo>(GetArenaForAllocation());
    _impl_.encryption_ = p;
  }
  return _impl_.encryption_;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* Table::mutable_encryption() {
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _msg = _internal_mutable_encryption();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.encryption)
  return _msg;
}
inline void Table::set_allocated_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encryption_;
  }
  if (encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryption);
    if (message_arena != submessage_arena) {
      encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.encryption_ = encryption;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.encryption)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TableInfo

// string friendly_name = 1;
inline void TableInfo::clear_friendly_name() {
  _impl_.friendly_name_.ClearToEmpty();
}
inline const std::string& TableInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return _internal_friendly_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableInfo::set_friendly_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.friendly_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
inline std::string* TableInfo::mutable_friendly_name() {
  std::string* _s = _internal_mutable_friendly_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return _s;
}
inline const std::string& TableInfo::_internal_friendly_name() const {
  return _impl_.friendly_name_.Get();
}
inline void TableInfo::_internal_set_friendly_name(const std::string& value) {
  
  _impl_.friendly_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TableInfo::_internal_mutable_friendly_name() {
  
  return _impl_.friendly_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TableInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return _impl_.friendly_name_.Release();
}
inline void TableInfo::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    
  } else {
    
  }
  _impl_.friendly_name_.SetAllocated(friendly_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.friendly_name_.IsDefault()) {
    _impl_.friendly_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}

// string description = 2;
inline void TableInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& TableInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.description)
}
inline std::string* TableInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.description)
  return _s;
}
inline const std::string& TableInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void TableInfo::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* TableInfo::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* TableInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.description)
  return _impl_.description_.Release();
}
inline void TableInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.description)
}

// map<string, string> labels = 3;
inline int TableInfo::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int TableInfo::labels_size() const {
  return _internal_labels_size();
}
inline void TableInfo::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TableInfo::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TableInfo::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.bigquery.logging.v1.TableInfo.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TableInfo::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TableInfo::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.bigquery.logging.v1.TableInfo.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// TableViewDefinition

// string query = 1;
inline void TableViewDefinition::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& TableViewDefinition::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableViewDefinition::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
inline std::string* TableViewDefinition::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return _s;
}
inline const std::string& TableViewDefinition::_internal_query() const {
  return _impl_.query_.Get();
}
inline void TableViewDefinition::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* TableViewDefinition::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* TableViewDefinition::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return _impl_.query_.Release();
}
inline void TableViewDefinition::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}

// -------------------------------------------------------------------

// Dataset

// .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
inline bool Dataset::_internal_has_dataset_name() const {
  return this != internal_default_instance() && _impl_.dataset_name_ != nullptr;
}
inline bool Dataset::has_dataset_name() const {
  return _internal_has_dataset_name();
}
inline void Dataset::clear_dataset_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_name_ != nullptr) {
    delete _impl_.dataset_name_;
  }
  _impl_.dataset_name_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& Dataset::_internal_dataset_name() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = _impl_.dataset_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName&>(
      ::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& Dataset::dataset_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return _internal_dataset_name();
}
inline void Dataset::unsafe_arena_set_allocated_dataset_name(
    ::google::cloud::bigquery::logging::v1::DatasetName* dataset_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataset_name_);
  }
  _impl_.dataset_name_ = dataset_name;
  if (dataset_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::release_dataset_name() {
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.dataset_name_;
  _impl_.dataset_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::unsafe_arena_release_dataset_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.dataset_name_;
  _impl_.dataset_name_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::_internal_mutable_dataset_name() {
  
  if (_impl_.dataset_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetName>(GetArenaForAllocation());
    _impl_.dataset_name_ = p;
  }
  return _impl_.dataset_name_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::mutable_dataset_name() {
  ::google::cloud::bigquery::logging::v1::DatasetName* _msg = _internal_mutable_dataset_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return _msg;
}
inline void Dataset::set_allocated_dataset_name(::google::cloud::bigquery::logging::v1::DatasetName* dataset_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dataset_name_;
  }
  if (dataset_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dataset_name);
    if (message_arena != submessage_arena) {
      dataset_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dataset_name_ = dataset_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
}

// .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
inline bool Dataset::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool Dataset::has_info() const {
  return _internal_has_info();
}
inline void Dataset::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInfo& Dataset::_internal_info() const {
  const ::google::cloud::bigquery::logging::v1::DatasetInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetInfo&>(
      ::google::cloud::bigquery::logging::v1::_DatasetInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInfo& Dataset::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.info)
  return _internal_info();
}
inline void Dataset::unsafe_arena_set_allocated_info(
    ::google::cloud::bigquery::logging::v1::DatasetInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.info)
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::release_info() {
  
  ::google::cloud::bigquery::logging::v1::DatasetInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.info)
  
  ::google::cloud::bigquery::logging::v1::DatasetInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::mutable_info() {
  ::google::cloud::bigquery::logging::v1::DatasetInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.info)
  return _msg;
}
inline void Dataset::set_allocated_info(::google::cloud::bigquery::logging::v1::DatasetInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.info)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool Dataset::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Dataset::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return _internal_create_time();
}
inline void Dataset::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return _msg;
}
inline void Dataset::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool Dataset::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Dataset::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return _internal_update_time();
}
inline void Dataset::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return _msg;
}
inline void Dataset::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.update_time)
}

// .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
inline bool Dataset::_internal_has_acl() const {
  return this != internal_default_instance() && _impl_.acl_ != nullptr;
}
inline bool Dataset::has_acl() const {
  return _internal_has_acl();
}
inline void Dataset::clear_acl() {
  if (GetArenaForAllocation() == nullptr && _impl_.acl_ != nullptr) {
    delete _impl_.acl_;
  }
  _impl_.acl_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl& Dataset::_internal_acl() const {
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl* p = _impl_.acl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::BigQueryAcl&>(
      ::google::cloud::bigquery::logging::v1::_BigQueryAcl_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl& Dataset::acl() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.acl)
  return _internal_acl();
}
inline void Dataset::unsafe_arena_set_allocated_acl(
    ::google::cloud::bigquery::logging::v1::BigQueryAcl* acl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acl_);
  }
  _impl_.acl_ = acl;
  if (acl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.acl)
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::release_acl() {
  
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* temp = _impl_.acl_;
  _impl_.acl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::unsafe_arena_release_acl() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.acl)
  
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* temp = _impl_.acl_;
  _impl_.acl_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::_internal_mutable_acl() {
  
  if (_impl_.acl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::BigQueryAcl>(GetArenaForAllocation());
    _impl_.acl_ = p;
  }
  return _impl_.acl_;
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::mutable_acl() {
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* _msg = _internal_mutable_acl();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.acl)
  return _msg;
}
inline void Dataset::set_allocated_acl(::google::cloud::bigquery::logging::v1::BigQueryAcl* acl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.acl_;
  }
  if (acl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acl);
    if (message_arena != submessage_arena) {
      acl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acl, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acl_ = acl;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.acl)
}

// .google.protobuf.Duration default_table_expire_duration = 8;
inline bool Dataset::_internal_has_default_table_expire_duration() const {
  return this != internal_default_instance() && _impl_.default_table_expire_duration_ != nullptr;
}
inline bool Dataset::has_default_table_expire_duration() const {
  return _internal_has_default_table_expire_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Dataset::_internal_default_table_expire_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.default_table_expire_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Dataset::default_table_expire_duration() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return _internal_default_table_expire_duration();
}
inline void Dataset::unsafe_arena_set_allocated_default_table_expire_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* default_table_expire_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_table_expire_duration_);
  }
  _impl_.default_table_expire_duration_ = default_table_expire_duration;
  if (default_table_expire_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Dataset::release_default_table_expire_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.default_table_expire_duration_;
  _impl_.default_table_expire_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Dataset::unsafe_arena_release_default_table_expire_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.default_table_expire_duration_;
  _impl_.default_table_expire_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Dataset::_internal_mutable_default_table_expire_duration() {
  
  if (_impl_.default_table_expire_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.default_table_expire_duration_ = p;
  }
  return _impl_.default_table_expire_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Dataset::mutable_default_table_expire_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_default_table_expire_duration();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return _msg;
}
inline void Dataset::set_allocated_default_table_expire_duration(::PROTOBUF_NAMESPACE_ID::Duration* default_table_expire_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_table_expire_duration_);
  }
  if (default_table_expire_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_table_expire_duration));
    if (message_arena != submessage_arena) {
      default_table_expire_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_table_expire_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_table_expire_duration_ = default_table_expire_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DatasetInfo

// string friendly_name = 1;
inline void DatasetInfo::clear_friendly_name() {
  _impl_.friendly_name_.ClearToEmpty();
}
inline const std::string& DatasetInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return _internal_friendly_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetInfo::set_friendly_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.friendly_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
inline std::string* DatasetInfo::mutable_friendly_name() {
  std::string* _s = _internal_mutable_friendly_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return _s;
}
inline const std::string& DatasetInfo::_internal_friendly_name() const {
  return _impl_.friendly_name_.Get();
}
inline void DatasetInfo::_internal_set_friendly_name(const std::string& value) {
  
  _impl_.friendly_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetInfo::_internal_mutable_friendly_name() {
  
  return _impl_.friendly_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return _impl_.friendly_name_.Release();
}
inline void DatasetInfo::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    
  } else {
    
  }
  _impl_.friendly_name_.SetAllocated(friendly_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.friendly_name_.IsDefault()) {
    _impl_.friendly_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}

// string description = 2;
inline void DatasetInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DatasetInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
inline std::string* DatasetInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return _s;
}
inline const std::string& DatasetInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DatasetInfo::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetInfo::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return _impl_.description_.Release();
}
inline void DatasetInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}

// map<string, string> labels = 3;
inline int DatasetInfo::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int DatasetInfo::labels_size() const {
  return _internal_labels_size();
}
inline void DatasetInfo::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DatasetInfo::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DatasetInfo::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.bigquery.logging.v1.DatasetInfo.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DatasetInfo::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DatasetInfo::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.bigquery.logging.v1.DatasetInfo.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// BigQueryAcl_Entry

// string role = 1;
inline void BigQueryAcl_Entry::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& BigQueryAcl_Entry::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryAcl_Entry::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
inline std::string* BigQueryAcl_Entry::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return _s;
}
inline const std::string& BigQueryAcl_Entry::_internal_role() const {
  return _impl_.role_.Get();
}
inline void BigQueryAcl_Entry::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::release_role() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return _impl_.role_.Release();
}
inline void BigQueryAcl_Entry::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}

// string group_email = 2;
inline void BigQueryAcl_Entry::clear_group_email() {
  _impl_.group_email_.ClearToEmpty();
}
inline const std::string& BigQueryAcl_Entry::group_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return _internal_group_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryAcl_Entry::set_group_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
inline std::string* BigQueryAcl_Entry::mutable_group_email() {
  std::string* _s = _internal_mutable_group_email();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return _s;
}
inline const std::string& BigQueryAcl_Entry::_internal_group_email() const {
  return _impl_.group_email_.Get();
}
inline void BigQueryAcl_Entry::_internal_set_group_email(const std::string& value) {
  
  _impl_.group_email_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::_internal_mutable_group_email() {
  
  return _impl_.group_email_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::release_group_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return _impl_.group_email_.Release();
}
inline void BigQueryAcl_Entry::set_allocated_group_email(std::string* group_email) {
  if (group_email != nullptr) {
    
  } else {
    
  }
  _impl_.group_email_.SetAllocated(group_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_email_.IsDefault()) {
    _impl_.group_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}

// string user_email = 3;
inline void BigQueryAcl_Entry::clear_user_email() {
  _impl_.user_email_.ClearToEmpty();
}
inline const std::string& BigQueryAcl_Entry::user_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return _internal_user_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryAcl_Entry::set_user_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
inline std::string* BigQueryAcl_Entry::mutable_user_email() {
  std::string* _s = _internal_mutable_user_email();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return _s;
}
inline const std::string& BigQueryAcl_Entry::_internal_user_email() const {
  return _impl_.user_email_.Get();
}
inline void BigQueryAcl_Entry::_internal_set_user_email(const std::string& value) {
  
  _impl_.user_email_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::_internal_mutable_user_email() {
  
  return _impl_.user_email_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::release_user_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return _impl_.user_email_.Release();
}
inline void BigQueryAcl_Entry::set_allocated_user_email(std::string* user_email) {
  if (user_email != nullptr) {
    
  } else {
    
  }
  _impl_.user_email_.SetAllocated(user_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_email_.IsDefault()) {
    _impl_.user_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}

// string domain = 4;
inline void BigQueryAcl_Entry::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& BigQueryAcl_Entry::domain() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryAcl_Entry::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
inline std::string* BigQueryAcl_Entry::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return _s;
}
inline const std::string& BigQueryAcl_Entry::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void BigQueryAcl_Entry::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::release_domain() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return _impl_.domain_.Release();
}
inline void BigQueryAcl_Entry::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}

// string special_group = 5;
inline void BigQueryAcl_Entry::clear_special_group() {
  _impl_.special_group_.ClearToEmpty();
}
inline const std::string& BigQueryAcl_Entry::special_group() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return _internal_special_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQueryAcl_Entry::set_special_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.special_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
inline std::string* BigQueryAcl_Entry::mutable_special_group() {
  std::string* _s = _internal_mutable_special_group();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return _s;
}
inline const std::string& BigQueryAcl_Entry::_internal_special_group() const {
  return _impl_.special_group_.Get();
}
inline void BigQueryAcl_Entry::_internal_set_special_group(const std::string& value) {
  
  _impl_.special_group_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::_internal_mutable_special_group() {
  
  return _impl_.special_group_.Mutable(GetArenaForAllocation());
}
inline std::string* BigQueryAcl_Entry::release_special_group() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return _impl_.special_group_.Release();
}
inline void BigQueryAcl_Entry::set_allocated_special_group(std::string* special_group) {
  if (special_group != nullptr) {
    
  } else {
    
  }
  _impl_.special_group_.SetAllocated(special_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.special_group_.IsDefault()) {
    _impl_.special_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}

// .google.cloud.bigquery.logging.v1.TableName view_name = 6;
inline bool BigQueryAcl_Entry::_internal_has_view_name() const {
  return this != internal_default_instance() && _impl_.view_name_ != nullptr;
}
inline bool BigQueryAcl_Entry::has_view_name() const {
  return _internal_has_view_name();
}
inline void BigQueryAcl_Entry::clear_view_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.view_name_ != nullptr) {
    delete _impl_.view_name_;
  }
  _impl_.view_name_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& BigQueryAcl_Entry::_internal_view_name() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.view_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& BigQueryAcl_Entry::view_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return _internal_view_name();
}
inline void BigQueryAcl_Entry::unsafe_arena_set_allocated_view_name(
    ::google::cloud::bigquery::logging::v1::TableName* view_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_name_);
  }
  _impl_.view_name_ = view_name;
  if (view_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::release_view_name() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.view_name_;
  _impl_.view_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::unsafe_arena_release_view_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.view_name_;
  _impl_.view_name_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::_internal_mutable_view_name() {
  
  if (_impl_.view_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.view_name_ = p;
  }
  return _impl_.view_name_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::mutable_view_name() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_view_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return _msg;
}
inline void BigQueryAcl_Entry::set_allocated_view_name(::google::cloud::bigquery::logging::v1::TableName* view_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.view_name_;
  }
  if (view_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view_name);
    if (message_arena != submessage_arena) {
      view_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.view_name_ = view_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
}

// -------------------------------------------------------------------

// BigQueryAcl

// repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
inline int BigQueryAcl::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int BigQueryAcl::entries_size() const {
  return _internal_entries_size();
}
inline void BigQueryAcl::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >*
BigQueryAcl::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return &_impl_.entries_;
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& BigQueryAcl::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& BigQueryAcl::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return _internal_entries(index);
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::add_entries() {
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >&
BigQueryAcl::entries() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// Job

// .google.cloud.bigquery.logging.v1.JobName job_name = 1;
inline bool Job::_internal_has_job_name() const {
  return this != internal_default_instance() && _impl_.job_name_ != nullptr;
}
inline bool Job::has_job_name() const {
  return _internal_has_job_name();
}
inline void Job::clear_job_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_name_ != nullptr) {
    delete _impl_.job_name_;
  }
  _impl_.job_name_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::JobName& Job::_internal_job_name() const {
  const ::google::cloud::bigquery::logging::v1::JobName* p = _impl_.job_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobName&>(
      ::google::cloud::bigquery::logging::v1::_JobName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobName& Job::job_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_name)
  return _internal_job_name();
}
inline void Job::unsafe_arena_set_allocated_job_name(
    ::google::cloud::bigquery::logging::v1::JobName* job_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_name_);
  }
  _impl_.job_name_ = job_name;
  if (job_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Job.job_name)
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::release_job_name() {
  
  ::google::cloud::bigquery::logging::v1::JobName* temp = _impl_.job_name_;
  _impl_.job_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::unsafe_arena_release_job_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_name)
  
  ::google::cloud::bigquery::logging::v1::JobName* temp = _impl_.job_name_;
  _impl_.job_name_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::_internal_mutable_job_name() {
  
  if (_impl_.job_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobName>(GetArenaForAllocation());
    _impl_.job_name_ = p;
  }
  return _impl_.job_name_;
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::mutable_job_name() {
  ::google::cloud::bigquery::logging::v1::JobName* _msg = _internal_mutable_job_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_name)
  return _msg;
}
inline void Job::set_allocated_job_name(::google::cloud::bigquery::logging::v1::JobName* job_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_name_;
  }
  if (job_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job_name);
    if (message_arena != submessage_arena) {
      job_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_name_ = job_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_name)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
inline bool Job::_internal_has_job_configuration() const {
  return this != internal_default_instance() && _impl_.job_configuration_ != nullptr;
}
inline bool Job::has_job_configuration() const {
  return _internal_has_job_configuration();
}
inline void Job::clear_job_configuration() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_configuration_ != nullptr) {
    delete _impl_.job_configuration_;
  }
  _impl_.job_configuration_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration& Job::_internal_job_configuration() const {
  const ::google::cloud::bigquery::logging::v1::JobConfiguration* p = _impl_.job_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobConfiguration&>(
      ::google::cloud::bigquery::logging::v1::_JobConfiguration_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration& Job::job_configuration() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return _internal_job_configuration();
}
inline void Job::unsafe_arena_set_allocated_job_configuration(
    ::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_configuration_);
  }
  _impl_.job_configuration_ = job_configuration;
  if (job_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Job.job_configuration)
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::release_job_configuration() {
  
  ::google::cloud::bigquery::logging::v1::JobConfiguration* temp = _impl_.job_configuration_;
  _impl_.job_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::unsafe_arena_release_job_configuration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_configuration)
  
  ::google::cloud::bigquery::logging::v1::JobConfiguration* temp = _impl_.job_configuration_;
  _impl_.job_configuration_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::_internal_mutable_job_configuration() {
  
  if (_impl_.job_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobConfiguration>(GetArenaForAllocation());
    _impl_.job_configuration_ = p;
  }
  return _impl_.job_configuration_;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::mutable_job_configuration() {
  ::google::cloud::bigquery::logging::v1::JobConfiguration* _msg = _internal_mutable_job_configuration();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return _msg;
}
inline void Job::set_allocated_job_configuration(::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_configuration_;
  }
  if (job_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job_configuration);
    if (message_arena != submessage_arena) {
      job_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_configuration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_configuration_ = job_configuration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_configuration)
}

// .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
inline bool Job::_internal_has_job_status() const {
  return this != internal_default_instance() && _impl_.job_status_ != nullptr;
}
inline bool Job::has_job_status() const {
  return _internal_has_job_status();
}
inline void Job::clear_job_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_status_ != nullptr) {
    delete _impl_.job_status_;
  }
  _impl_.job_status_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::JobStatus& Job::_internal_job_status() const {
  const ::google::cloud::bigquery::logging::v1::JobStatus* p = _impl_.job_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobStatus&>(
      ::google::cloud::bigquery::logging::v1::_JobStatus_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobStatus& Job::job_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_status)
  return _internal_job_status();
}
inline void Job::unsafe_arena_set_allocated_job_status(
    ::google::cloud::bigquery::logging::v1::JobStatus* job_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_status_);
  }
  _impl_.job_status_ = job_status;
  if (job_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Job.job_status)
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::release_job_status() {
  
  ::google::cloud::bigquery::logging::v1::JobStatus* temp = _impl_.job_status_;
  _impl_.job_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::unsafe_arena_release_job_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_status)
  
  ::google::cloud::bigquery::logging::v1::JobStatus* temp = _impl_.job_status_;
  _impl_.job_status_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::_internal_mutable_job_status() {
  
  if (_impl_.job_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobStatus>(GetArenaForAllocation());
    _impl_.job_status_ = p;
  }
  return _impl_.job_status_;
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::mutable_job_status() {
  ::google::cloud::bigquery::logging::v1::JobStatus* _msg = _internal_mutable_job_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_status)
  return _msg;
}
inline void Job::set_allocated_job_status(::google::cloud::bigquery::logging::v1::JobStatus* job_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_status_;
  }
  if (job_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job_status);
    if (message_arena != submessage_arena) {
      job_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_status_ = job_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_status)
}

// .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
inline bool Job::_internal_has_job_statistics() const {
  return this != internal_default_instance() && _impl_.job_statistics_ != nullptr;
}
inline bool Job::has_job_statistics() const {
  return _internal_has_job_statistics();
}
inline void Job::clear_job_statistics() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_statistics_ != nullptr) {
    delete _impl_.job_statistics_;
  }
  _impl_.job_statistics_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::JobStatistics& Job::_internal_job_statistics() const {
  const ::google::cloud::bigquery::logging::v1::JobStatistics* p = _impl_.job_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobStatistics&>(
      ::google::cloud::bigquery::logging::v1::_JobStatistics_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobStatistics& Job::job_statistics() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return _internal_job_statistics();
}
inline void Job::unsafe_arena_set_allocated_job_statistics(
    ::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.job_statistics_);
  }
  _impl_.job_statistics_ = job_statistics;
  if (job_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.Job.job_statistics)
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::release_job_statistics() {
  
  ::google::cloud::bigquery::logging::v1::JobStatistics* temp = _impl_.job_statistics_;
  _impl_.job_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::unsafe_arena_release_job_statistics() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_statistics)
  
  ::google::cloud::bigquery::logging::v1::JobStatistics* temp = _impl_.job_statistics_;
  _impl_.job_statistics_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::_internal_mutable_job_statistics() {
  
  if (_impl_.job_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::JobStatistics>(GetArenaForAllocation());
    _impl_.job_statistics_ = p;
  }
  return _impl_.job_statistics_;
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::mutable_job_statistics() {
  ::google::cloud::bigquery::logging::v1::JobStatistics* _msg = _internal_mutable_job_statistics();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return _msg;
}
inline void Job::set_allocated_job_statistics(::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.job_statistics_;
  }
  if (job_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(job_statistics);
    if (message_arena != submessage_arena) {
      job_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_statistics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.job_statistics_ = job_statistics;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_statistics)
}

// -------------------------------------------------------------------

// JobConfiguration_Query

// string query = 1;
inline void JobConfiguration_Query::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Query::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Query::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
inline std::string* JobConfiguration_Query::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return _s;
}
inline const std::string& JobConfiguration_Query::_internal_query() const {
  return _impl_.query_.Get();
}
inline void JobConfiguration_Query::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return _impl_.query_.Release();
}
inline void JobConfiguration_Query::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
inline bool JobConfiguration_Query::_internal_has_destination_table() const {
  return this != internal_default_instance() && _impl_.destination_table_ != nullptr;
}
inline bool JobConfiguration_Query::has_destination_table() const {
  return _internal_has_destination_table();
}
inline void JobConfiguration_Query::clear_destination_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_ != nullptr) {
    delete _impl_.destination_table_;
  }
  _impl_.destination_table_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Query::_internal_destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.destination_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Query::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return _internal_destination_table();
}
inline void JobConfiguration_Query::unsafe_arena_set_allocated_destination_table(
    ::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_);
  }
  _impl_.destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::release_destination_table() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::unsafe_arena_release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::_internal_mutable_destination_table() {
  
  if (_impl_.destination_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.destination_table_ = p;
  }
  return _impl_.destination_table_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::mutable_destination_table() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_destination_table();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return _msg;
}
inline void JobConfiguration_Query::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_;
  }
  if (destination_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table);
    if (message_arena != submessage_arena) {
      destination_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
}

// string create_disposition = 3;
inline void JobConfiguration_Query::clear_create_disposition() {
  _impl_.create_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Query::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return _internal_create_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Query::set_create_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
inline std::string* JobConfiguration_Query::mutable_create_disposition() {
  std::string* _s = _internal_mutable_create_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return _s;
}
inline const std::string& JobConfiguration_Query::_internal_create_disposition() const {
  return _impl_.create_disposition_.Get();
}
inline void JobConfiguration_Query::_internal_set_create_disposition(const std::string& value) {
  
  _impl_.create_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::_internal_mutable_create_disposition() {
  
  return _impl_.create_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return _impl_.create_disposition_.Release();
}
inline void JobConfiguration_Query::set_allocated_create_disposition(std::string* create_disposition) {
  if (create_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.create_disposition_.SetAllocated(create_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_disposition_.IsDefault()) {
    _impl_.create_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}

// string write_disposition = 4;
inline void JobConfiguration_Query::clear_write_disposition() {
  _impl_.write_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Query::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return _internal_write_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Query::set_write_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
inline std::string* JobConfiguration_Query::mutable_write_disposition() {
  std::string* _s = _internal_mutable_write_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return _s;
}
inline const std::string& JobConfiguration_Query::_internal_write_disposition() const {
  return _impl_.write_disposition_.Get();
}
inline void JobConfiguration_Query::_internal_set_write_disposition(const std::string& value) {
  
  _impl_.write_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::_internal_mutable_write_disposition() {
  
  return _impl_.write_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return _impl_.write_disposition_.Release();
}
inline void JobConfiguration_Query::set_allocated_write_disposition(std::string* write_disposition) {
  if (write_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.write_disposition_.SetAllocated(write_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_disposition_.IsDefault()) {
    _impl_.write_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
inline bool JobConfiguration_Query::_internal_has_default_dataset() const {
  return this != internal_default_instance() && _impl_.default_dataset_ != nullptr;
}
inline bool JobConfiguration_Query::has_default_dataset() const {
  return _internal_has_default_dataset();
}
inline void JobConfiguration_Query::clear_default_dataset() {
  if (GetArenaForAllocation() == nullptr && _impl_.default_dataset_ != nullptr) {
    delete _impl_.default_dataset_;
  }
  _impl_.default_dataset_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobConfiguration_Query::_internal_default_dataset() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = _impl_.default_dataset_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName&>(
      ::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobConfiguration_Query::default_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return _internal_default_dataset();
}
inline void JobConfiguration_Query::unsafe_arena_set_allocated_default_dataset(
    ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_dataset_);
  }
  _impl_.default_dataset_ = default_dataset;
  if (default_dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::release_default_dataset() {
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.default_dataset_;
  _impl_.default_dataset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::unsafe_arena_release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = _impl_.default_dataset_;
  _impl_.default_dataset_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::_internal_mutable_default_dataset() {
  
  if (_impl_.default_dataset_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::DatasetName>(GetArenaForAllocation());
    _impl_.default_dataset_ = p;
  }
  return _impl_.default_dataset_;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::mutable_default_dataset() {
  ::google::cloud::bigquery::logging::v1::DatasetName* _msg = _internal_mutable_default_dataset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return _msg;
}
inline void JobConfiguration_Query::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_dataset_;
  }
  if (default_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_dataset);
    if (message_arena != submessage_arena) {
      default_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_dataset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default_dataset_ = default_dataset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
}

// repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
inline int JobConfiguration_Query::_internal_table_definitions_size() const {
  return _impl_.table_definitions_.size();
}
inline int JobConfiguration_Query::table_definitions_size() const {
  return _internal_table_definitions_size();
}
inline void JobConfiguration_Query::clear_table_definitions() {
  _impl_.table_definitions_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::mutable_table_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return _impl_.table_definitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >*
JobConfiguration_Query::mutable_table_definitions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return &_impl_.table_definitions_;
}
inline const ::google::cloud::bigquery::logging::v1::TableDefinition& JobConfiguration_Query::_internal_table_definitions(int index) const {
  return _impl_.table_definitions_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::TableDefinition& JobConfiguration_Query::table_definitions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return _internal_table_definitions(index);
}
inline ::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::_internal_add_table_definitions() {
  return _impl_.table_definitions_.Add();
}
inline ::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::add_table_definitions() {
  ::google::cloud::bigquery::logging::v1::TableDefinition* _add = _internal_add_table_definitions();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >&
JobConfiguration_Query::table_definitions() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return _impl_.table_definitions_;
}

// string query_priority = 7;
inline void JobConfiguration_Query::clear_query_priority() {
  _impl_.query_priority_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Query::query_priority() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query_priority)
  return _internal_query_priority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Query::set_query_priority(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_priority_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query_priority)
}
inline std::string* JobConfiguration_Query::mutable_query_priority() {
  std::string* _s = _internal_mutable_query_priority();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query_priority)
  return _s;
}
inline const std::string& JobConfiguration_Query::_internal_query_priority() const {
  return _impl_.query_priority_.Get();
}
inline void JobConfiguration_Query::_internal_set_query_priority(const std::string& value) {
  
  _impl_.query_priority_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::_internal_mutable_query_priority() {
  
  return _impl_.query_priority_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::release_query_priority() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query_priority)
  return _impl_.query_priority_.Release();
}
inline void JobConfiguration_Query::set_allocated_query_priority(std::string* query_priority) {
  if (query_priority != nullptr) {
    
  } else {
    
  }
  _impl_.query_priority_.SetAllocated(query_priority, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_priority_.IsDefault()) {
    _impl_.query_priority_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query_priority)
}

// .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 8;
inline bool JobConfiguration_Query::_internal_has_destination_table_encryption() const {
  return this != internal_default_instance() && _impl_.destination_table_encryption_ != nullptr;
}
inline bool JobConfiguration_Query::has_destination_table_encryption() const {
  return _internal_has_destination_table_encryption();
}
inline void JobConfiguration_Query::clear_destination_table_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_encryption_ != nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  _impl_.destination_table_encryption_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_Query::_internal_destination_table_encryption() const {
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo* p = _impl_.destination_table_encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::EncryptionInfo&>(
      ::google::cloud::bigquery::logging::v1::_EncryptionInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_Query::destination_table_encryption() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table_encryption)
  return _internal_destination_table_encryption();
}
inline void JobConfiguration_Query::unsafe_arena_set_allocated_destination_table_encryption(
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_encryption_);
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  if (destination_table_encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table_encryption)
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Query::release_destination_table_encryption() {
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Query::unsafe_arena_release_destination_table_encryption() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table_encryption)
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Query::_internal_mutable_destination_table_encryption() {
  
  if (_impl_.destination_table_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::EncryptionInfo>(GetArenaForAllocation());
    _impl_.destination_table_encryption_ = p;
  }
  return _impl_.destination_table_encryption_;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Query::mutable_destination_table_encryption() {
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _msg = _internal_mutable_destination_table_encryption();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table_encryption)
  return _msg;
}
inline void JobConfiguration_Query::set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  if (destination_table_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table_encryption);
    if (message_arena != submessage_arena) {
      destination_table_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table_encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table_encryption)
}

// string statement_type = 9;
inline void JobConfiguration_Query::clear_statement_type() {
  _impl_.statement_type_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Query::statement_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.statement_type)
  return _internal_statement_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Query::set_statement_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.statement_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.statement_type)
}
inline std::string* JobConfiguration_Query::mutable_statement_type() {
  std::string* _s = _internal_mutable_statement_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.statement_type)
  return _s;
}
inline const std::string& JobConfiguration_Query::_internal_statement_type() const {
  return _impl_.statement_type_.Get();
}
inline void JobConfiguration_Query::_internal_set_statement_type(const std::string& value) {
  
  _impl_.statement_type_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::_internal_mutable_statement_type() {
  
  return _impl_.statement_type_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Query::release_statement_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.statement_type)
  return _impl_.statement_type_.Release();
}
inline void JobConfiguration_Query::set_allocated_statement_type(std::string* statement_type) {
  if (statement_type != nullptr) {
    
  } else {
    
  }
  _impl_.statement_type_.SetAllocated(statement_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statement_type_.IsDefault()) {
    _impl_.statement_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.statement_type)
}

// -------------------------------------------------------------------

// JobConfiguration_Load

// repeated string source_uris = 1;
inline int JobConfiguration_Load::_internal_source_uris_size() const {
  return _impl_.source_uris_.size();
}
inline int JobConfiguration_Load::source_uris_size() const {
  return _internal_source_uris_size();
}
inline void JobConfiguration_Load::clear_source_uris() {
  _impl_.source_uris_.Clear();
}
inline std::string* JobConfiguration_Load::add_source_uris() {
  std::string* _s = _internal_add_source_uris();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return _s;
}
inline const std::string& JobConfiguration_Load::_internal_source_uris(int index) const {
  return _impl_.source_uris_.Get(index);
}
inline const std::string& JobConfiguration_Load::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return _internal_source_uris(index);
}
inline std::string* JobConfiguration_Load::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return _impl_.source_uris_.Mutable(index);
}
inline void JobConfiguration_Load::set_source_uris(int index, const std::string& value) {
  _impl_.source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::set_source_uris(int index, std::string&& value) {
  _impl_.source_uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::set_source_uris(int index, const char* value, size_t size) {
  _impl_.source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline std::string* JobConfiguration_Load::_internal_add_source_uris() {
  return _impl_.source_uris_.Add();
}
inline void JobConfiguration_Load::add_source_uris(const std::string& value) {
  _impl_.source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::add_source_uris(std::string&& value) {
  _impl_.source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::add_source_uris(const char* value, size_t size) {
  _impl_.source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JobConfiguration_Load::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return _impl_.source_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JobConfiguration_Load::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return &_impl_.source_uris_;
}

// string schema_json = 6;
inline void JobConfiguration_Load::clear_schema_json() {
  _impl_.schema_json_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Load::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return _internal_schema_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Load::set_schema_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
inline std::string* JobConfiguration_Load::mutable_schema_json() {
  std::string* _s = _internal_mutable_schema_json();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return _s;
}
inline const std::string& JobConfiguration_Load::_internal_schema_json() const {
  return _impl_.schema_json_.Get();
}
inline void JobConfiguration_Load::_internal_set_schema_json(const std::string& value) {
  
  _impl_.schema_json_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::_internal_mutable_schema_json() {
  
  return _impl_.schema_json_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return _impl_.schema_json_.Release();
}
inline void JobConfiguration_Load::set_allocated_schema_json(std::string* schema_json) {
  if (schema_json != nullptr) {
    
  } else {
    
  }
  _impl_.schema_json_.SetAllocated(schema_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_json_.IsDefault()) {
    _impl_.schema_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
inline bool JobConfiguration_Load::_internal_has_destination_table() const {
  return this != internal_default_instance() && _impl_.destination_table_ != nullptr;
}
inline bool JobConfiguration_Load::has_destination_table() const {
  return _internal_has_destination_table();
}
inline void JobConfiguration_Load::clear_destination_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_ != nullptr) {
    delete _impl_.destination_table_;
  }
  _impl_.destination_table_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Load::_internal_destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.destination_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Load::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return _internal_destination_table();
}
inline void JobConfiguration_Load::unsafe_arena_set_allocated_destination_table(
    ::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_);
  }
  _impl_.destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::release_destination_table() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::unsafe_arena_release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::_internal_mutable_destination_table() {
  
  if (_impl_.destination_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.destination_table_ = p;
  }
  return _impl_.destination_table_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::mutable_destination_table() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_destination_table();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return _msg;
}
inline void JobConfiguration_Load::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_;
  }
  if (destination_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table);
    if (message_arena != submessage_arena) {
      destination_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
}

// string create_disposition = 4;
inline void JobConfiguration_Load::clear_create_disposition() {
  _impl_.create_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Load::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return _internal_create_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Load::set_create_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
inline std::string* JobConfiguration_Load::mutable_create_disposition() {
  std::string* _s = _internal_mutable_create_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return _s;
}
inline const std::string& JobConfiguration_Load::_internal_create_disposition() const {
  return _impl_.create_disposition_.Get();
}
inline void JobConfiguration_Load::_internal_set_create_disposition(const std::string& value) {
  
  _impl_.create_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::_internal_mutable_create_disposition() {
  
  return _impl_.create_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return _impl_.create_disposition_.Release();
}
inline void JobConfiguration_Load::set_allocated_create_disposition(std::string* create_disposition) {
  if (create_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.create_disposition_.SetAllocated(create_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_disposition_.IsDefault()) {
    _impl_.create_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}

// string write_disposition = 5;
inline void JobConfiguration_Load::clear_write_disposition() {
  _impl_.write_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_Load::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return _internal_write_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_Load::set_write_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
inline std::string* JobConfiguration_Load::mutable_write_disposition() {
  std::string* _s = _internal_mutable_write_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return _s;
}
inline const std::string& JobConfiguration_Load::_internal_write_disposition() const {
  return _impl_.write_disposition_.Get();
}
inline void JobConfiguration_Load::_internal_set_write_disposition(const std::string& value) {
  
  _impl_.write_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::_internal_mutable_write_disposition() {
  
  return _impl_.write_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_Load::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return _impl_.write_disposition_.Release();
}
inline void JobConfiguration_Load::set_allocated_write_disposition(std::string* write_disposition) {
  if (write_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.write_disposition_.SetAllocated(write_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_disposition_.IsDefault()) {
    _impl_.write_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}

// .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 7;
inline bool JobConfiguration_Load::_internal_has_destination_table_encryption() const {
  return this != internal_default_instance() && _impl_.destination_table_encryption_ != nullptr;
}
inline bool JobConfiguration_Load::has_destination_table_encryption() const {
  return _internal_has_destination_table_encryption();
}
inline void JobConfiguration_Load::clear_destination_table_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_encryption_ != nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  _impl_.destination_table_encryption_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_Load::_internal_destination_table_encryption() const {
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo* p = _impl_.destination_table_encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::EncryptionInfo&>(
      ::google::cloud::bigquery::logging::v1::_EncryptionInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_Load::destination_table_encryption() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table_encryption)
  return _internal_destination_table_encryption();
}
inline void JobConfiguration_Load::unsafe_arena_set_allocated_destination_table_encryption(
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_encryption_);
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  if (destination_table_encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table_encryption)
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Load::release_destination_table_encryption() {
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Load::unsafe_arena_release_destination_table_encryption() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table_encryption)
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Load::_internal_mutable_destination_table_encryption() {
  
  if (_impl_.destination_table_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::EncryptionInfo>(GetArenaForAllocation());
    _impl_.destination_table_encryption_ = p;
  }
  return _impl_.destination_table_encryption_;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_Load::mutable_destination_table_encryption() {
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _msg = _internal_mutable_destination_table_encryption();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table_encryption)
  return _msg;
}
inline void JobConfiguration_Load::set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  if (destination_table_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table_encryption);
    if (message_arena != submessage_arena) {
      destination_table_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table_encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table_encryption)
}

// -------------------------------------------------------------------

// JobConfiguration_Extract

// repeated string destination_uris = 1;
inline int JobConfiguration_Extract::_internal_destination_uris_size() const {
  return _impl_.destination_uris_.size();
}
inline int JobConfiguration_Extract::destination_uris_size() const {
  return _internal_destination_uris_size();
}
inline void JobConfiguration_Extract::clear_destination_uris() {
  _impl_.destination_uris_.Clear();
}
inline std::string* JobConfiguration_Extract::add_destination_uris() {
  std::string* _s = _internal_add_destination_uris();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return _s;
}
inline const std::string& JobConfiguration_Extract::_internal_destination_uris(int index) const {
  return _impl_.destination_uris_.Get(index);
}
inline const std::string& JobConfiguration_Extract::destination_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return _internal_destination_uris(index);
}
inline std::string* JobConfiguration_Extract::mutable_destination_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return _impl_.destination_uris_.Mutable(index);
}
inline void JobConfiguration_Extract::set_destination_uris(int index, const std::string& value) {
  _impl_.destination_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::set_destination_uris(int index, std::string&& value) {
  _impl_.destination_uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::set_destination_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.destination_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::set_destination_uris(int index, const char* value, size_t size) {
  _impl_.destination_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline std::string* JobConfiguration_Extract::_internal_add_destination_uris() {
  return _impl_.destination_uris_.Add();
}
inline void JobConfiguration_Extract::add_destination_uris(const std::string& value) {
  _impl_.destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::add_destination_uris(std::string&& value) {
  _impl_.destination_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::add_destination_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::add_destination_uris(const char* value, size_t size) {
  _impl_.destination_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JobConfiguration_Extract::destination_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return _impl_.destination_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JobConfiguration_Extract::mutable_destination_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return &_impl_.destination_uris_;
}

// .google.cloud.bigquery.logging.v1.TableName source_table = 2;
inline bool JobConfiguration_Extract::_internal_has_source_table() const {
  return this != internal_default_instance() && _impl_.source_table_ != nullptr;
}
inline bool JobConfiguration_Extract::has_source_table() const {
  return _internal_has_source_table();
}
inline void JobConfiguration_Extract::clear_source_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_table_ != nullptr) {
    delete _impl_.source_table_;
  }
  _impl_.source_table_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Extract::_internal_source_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.source_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Extract::source_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return _internal_source_table();
}
inline void JobConfiguration_Extract::unsafe_arena_set_allocated_source_table(
    ::google::cloud::bigquery::logging::v1::TableName* source_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_table_);
  }
  _impl_.source_table_ = source_table;
  if (source_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::release_source_table() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.source_table_;
  _impl_.source_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::unsafe_arena_release_source_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.source_table_;
  _impl_.source_table_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::_internal_mutable_source_table() {
  
  if (_impl_.source_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.source_table_ = p;
  }
  return _impl_.source_table_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::mutable_source_table() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_source_table();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return _msg;
}
inline void JobConfiguration_Extract::set_allocated_source_table(::google::cloud::bigquery::logging::v1::TableName* source_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_table_;
  }
  if (source_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_table);
    if (message_arena != submessage_arena) {
      source_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_table_ = source_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
}

// -------------------------------------------------------------------

// JobConfiguration_TableCopy

// repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
inline int JobConfiguration_TableCopy::_internal_source_tables_size() const {
  return _impl_.source_tables_.size();
}
inline int JobConfiguration_TableCopy::source_tables_size() const {
  return _internal_source_tables_size();
}
inline void JobConfiguration_TableCopy::clear_source_tables() {
  _impl_.source_tables_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_source_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return _impl_.source_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
JobConfiguration_TableCopy::mutable_source_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return &_impl_.source_tables_;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::_internal_source_tables(int index) const {
  return _impl_.source_tables_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::source_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return _internal_source_tables(index);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::_internal_add_source_tables() {
  return _impl_.source_tables_.Add();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::add_source_tables() {
  ::google::cloud::bigquery::logging::v1::TableName* _add = _internal_add_source_tables();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
JobConfiguration_TableCopy::source_tables() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return _impl_.source_tables_;
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
inline bool JobConfiguration_TableCopy::_internal_has_destination_table() const {
  return this != internal_default_instance() && _impl_.destination_table_ != nullptr;
}
inline bool JobConfiguration_TableCopy::has_destination_table() const {
  return _internal_has_destination_table();
}
inline void JobConfiguration_TableCopy::clear_destination_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_ != nullptr) {
    delete _impl_.destination_table_;
  }
  _impl_.destination_table_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::_internal_destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = _impl_.destination_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName&>(
      ::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return _internal_destination_table();
}
inline void JobConfiguration_TableCopy::unsafe_arena_set_allocated_destination_table(
    ::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_);
  }
  _impl_.destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::release_destination_table() {
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::unsafe_arena_release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = _impl_.destination_table_;
  _impl_.destination_table_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::_internal_mutable_destination_table() {
  
  if (_impl_.destination_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::TableName>(GetArenaForAllocation());
    _impl_.destination_table_ = p;
  }
  return _impl_.destination_table_;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_destination_table() {
  ::google::cloud::bigquery::logging::v1::TableName* _msg = _internal_mutable_destination_table();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return _msg;
}
inline void JobConfiguration_TableCopy::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_;
  }
  if (destination_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table);
    if (message_arena != submessage_arena) {
      destination_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
}

// string create_disposition = 3;
inline void JobConfiguration_TableCopy::clear_create_disposition() {
  _impl_.create_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_TableCopy::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return _internal_create_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_TableCopy::set_create_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
inline std::string* JobConfiguration_TableCopy::mutable_create_disposition() {
  std::string* _s = _internal_mutable_create_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return _s;
}
inline const std::string& JobConfiguration_TableCopy::_internal_create_disposition() const {
  return _impl_.create_disposition_.Get();
}
inline void JobConfiguration_TableCopy::_internal_set_create_disposition(const std::string& value) {
  
  _impl_.create_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_TableCopy::_internal_mutable_create_disposition() {
  
  return _impl_.create_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_TableCopy::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return _impl_.create_disposition_.Release();
}
inline void JobConfiguration_TableCopy::set_allocated_create_disposition(std::string* create_disposition) {
  if (create_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.create_disposition_.SetAllocated(create_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_disposition_.IsDefault()) {
    _impl_.create_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}

// string write_disposition = 4;
inline void JobConfiguration_TableCopy::clear_write_disposition() {
  _impl_.write_disposition_.ClearToEmpty();
}
inline const std::string& JobConfiguration_TableCopy::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return _internal_write_disposition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobConfiguration_TableCopy::set_write_disposition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_disposition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
inline std::string* JobConfiguration_TableCopy::mutable_write_disposition() {
  std::string* _s = _internal_mutable_write_disposition();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return _s;
}
inline const std::string& JobConfiguration_TableCopy::_internal_write_disposition() const {
  return _impl_.write_disposition_.Get();
}
inline void JobConfiguration_TableCopy::_internal_set_write_disposition(const std::string& value) {
  
  _impl_.write_disposition_.Set(value, GetArenaForAllocation());
}
inline std::string* JobConfiguration_TableCopy::_internal_mutable_write_disposition() {
  
  return _impl_.write_disposition_.Mutable(GetArenaForAllocation());
}
inline std::string* JobConfiguration_TableCopy::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return _impl_.write_disposition_.Release();
}
inline void JobConfiguration_TableCopy::set_allocated_write_disposition(std::string* write_disposition) {
  if (write_disposition != nullptr) {
    
  } else {
    
  }
  _impl_.write_disposition_.SetAllocated(write_disposition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_disposition_.IsDefault()) {
    _impl_.write_disposition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}

// .google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 5;
inline bool JobConfiguration_TableCopy::_internal_has_destination_table_encryption() const {
  return this != internal_default_instance() && _impl_.destination_table_encryption_ != nullptr;
}
inline bool JobConfiguration_TableCopy::has_destination_table_encryption() const {
  return _internal_has_destination_table_encryption();
}
inline void JobConfiguration_TableCopy::clear_destination_table_encryption() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_table_encryption_ != nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  _impl_.destination_table_encryption_ = nullptr;
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_TableCopy::_internal_destination_table_encryption() const {
  const ::google::cloud::bigquery::logging::v1::EncryptionInfo* p = _impl_.destination_table_encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::logging::v1::EncryptionInfo&>(
      ::google::cloud::bigquery::logging::v1::_EncryptionInfo_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::EncryptionInfo& JobConfiguration_TableCopy::destination_table_encryption() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table_encryption)
  return _internal_destination_table_encryption();
}
inline void JobConfiguration_TableCopy::unsafe_arena_set_allocated_destination_table_encryption(
    ::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_table_encryption_);
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  if (destination_table_encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table_encryption)
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_TableCopy::release_destination_table_encryption() {
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_TableCopy::unsafe_arena_release_destination_table_encryption() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table_encryption)
  
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* temp = _impl_.destination_table_encryption_;
  _impl_.destination_table_encryption_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_TableCopy::_internal_mutable_destination_table_encryption() {
  
  if (_impl_.destination_table_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::logging::v1::EncryptionInfo>(GetArenaForAllocation());
    _impl_.destination_table_encryption_ = p;
  }
  return _impl_.destination_table_encryption_;
}
inline ::google::cloud::bigquery::logging::v1::EncryptionInfo* JobConfiguration_TableCopy::mutable_destination_table_encryption() {
  ::google::cloud::bigquery::logging::v1::EncryptionInfo* _msg = _internal_mutable_destination_table_encryption();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table_encryption)
  return _msg;
}
inline void JobConfiguration_TableCopy::set_allocated_destination_table_encryption(::google::cloud::bigquery::logging::v1::EncryptionInfo* destination_table_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_table_encryption_;
  }
  if (destination_table_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination_table_encryption);
    if (message_arena != submessage_arena) {
      destination_table_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_table_encryption, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_table_encryption_ = destination_table_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table_encryption)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JobConfiguration

// .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
inline bool JobConfiguration::_internal_has_query() const {
  return configuration_case() == kQuery;
}
inline bool JobConfiguration::has_query() const {
  return _internal_has_query();
}
inline void JobConfiguration::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline void JobConfiguration::clear_query() {
  if (_internal_has_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.configuration_.query_;
    }
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  if (_internal_has_query()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* temp = _impl_.configuration_.query_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.configuration_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& JobConfiguration::_internal_query() const {
  return _internal_has_query()
      ? *_impl_.configuration_.query_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Query&>(::google::cloud::bigquery::logging::v1::_JobConfiguration_Query_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& JobConfiguration::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return _internal_query();
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  if (_internal_has_query()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* temp = _impl_.configuration_.query_;
    _impl_.configuration_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobConfiguration::unsafe_arena_set_allocated_query(::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query) {
  clear_configuration();
  if (query) {
    set_has_query();
    _impl_.configuration_.query_ = query;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.query)
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::_internal_mutable_query() {
  if (!_internal_has_query()) {
    clear_configuration();
    set_has_query();
    _impl_.configuration_.query_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobConfiguration_Query >(GetArenaForAllocation());
  }
  return _impl_.configuration_.query_;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::mutable_query() {
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
inline bool JobConfiguration::_internal_has_load() const {
  return configuration_case() == kLoad;
}
inline bool JobConfiguration::has_load() const {
  return _internal_has_load();
}
inline void JobConfiguration::set_has_load() {
  _impl_._oneof_case_[0] = kLoad;
}
inline void JobConfiguration::clear_load() {
  if (_internal_has_load()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.configuration_.load_;
    }
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::release_load() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  if (_internal_has_load()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* temp = _impl_.configuration_.load_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.configuration_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& JobConfiguration::_internal_load() const {
  return _internal_has_load()
      ? *_impl_.configuration_.load_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Load&>(::google::cloud::bigquery::logging::v1::_JobConfiguration_Load_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& JobConfiguration::load() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return _internal_load();
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  if (_internal_has_load()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* temp = _impl_.configuration_.load_;
    _impl_.configuration_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobConfiguration::unsafe_arena_set_allocated_load(::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load) {
  clear_configuration();
  if (load) {
    set_has_load();
    _impl_.configuration_.load_ = load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.load)
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::_internal_mutable_load() {
  if (!_internal_has_load()) {
    clear_configuration();
    set_has_load();
    _impl_.configuration_.load_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobConfiguration_Load >(GetArenaForAllocation());
  }
  return _impl_.configuration_.load_;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::mutable_load() {
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
inline bool JobConfiguration::_internal_has_extract() const {
  return configuration_case() == kExtract;
}
inline bool JobConfiguration::has_extract() const {
  return _internal_has_extract();
}
inline void JobConfiguration::set_has_extract() {
  _impl_._oneof_case_[0] = kExtract;
}
inline void JobConfiguration::clear_extract() {
  if (_internal_has_extract()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.configuration_.extract_;
    }
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::release_extract() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  if (_internal_has_extract()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* temp = _impl_.configuration_.extract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.configuration_.extract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& JobConfiguration::_internal_extract() const {
  return _internal_has_extract()
      ? *_impl_.configuration_.extract_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract&>(::google::cloud::bigquery::logging::v1::_JobConfiguration_Extract_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& JobConfiguration::extract() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return _internal_extract();
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::unsafe_arena_release_extract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  if (_internal_has_extract()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* temp = _impl_.configuration_.extract_;
    _impl_.configuration_.extract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobConfiguration::unsafe_arena_set_allocated_extract(::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract) {
  clear_configuration();
  if (extract) {
    set_has_extract();
    _impl_.configuration_.extract_ = extract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::_internal_mutable_extract() {
  if (!_internal_has_extract()) {
    clear_configuration();
    set_has_extract();
    _impl_.configuration_.extract_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract >(GetArenaForAllocation());
  }
  return _impl_.configuration_.extract_;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::mutable_extract() {
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* _msg = _internal_mutable_extract();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return _msg;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
inline bool JobConfiguration::_internal_has_table_copy() const {
  return configuration_case() == kTableCopy;
}
inline bool JobConfiguration::has_table_copy() const {
  return _internal_has_table_copy();
}
inline void JobConfiguration::set_has_table_copy() {
  _impl_._oneof_case_[0] = kTableCopy;
}
inline void JobConfiguration::clear_table_copy() {
  if (_internal_has_table_copy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.configuration_.table_copy_;
    }
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::release_table_copy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  if (_internal_has_table_copy()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* temp = _impl_.configuration_.table_copy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.configuration_.table_copy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& JobConfiguration::_internal_table_copy() const {
  return _internal_has_table_copy()
      ? *_impl_.configuration_.table_copy_
      : reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy&>(::google::cloud::bigquery::logging::v1::_JobConfiguration_TableCopy_default_instance_);
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& JobConfiguration::table_copy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return _internal_table_copy();
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::unsafe_arena_release_table_copy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  if (_internal_has_table_copy()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* temp = _impl_.configuration_.table_copy_;
    _impl_.configuration_.table_copy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobConfiguration::unsafe_arena_set_allocated_table_copy(::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy) {
  clear_configuration();
  if (table_copy) {
    set_has_table_copy();
    _impl_.configuration_.table_copy_ = table_copy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::_internal_mutable_table_copy() {
  if (!_internal_has_table_copy()) {
    clear_configuration();
    set_has_table_copy();
    _impl_.configuration_.table_copy_ = CreateMaybeMessage< ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy >(GetArenaForAllocation());
  }
  return _impl_.configuration_.table_copy_;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::mutable_table_copy() {
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* _msg = _internal_mutable_table_copy();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return _msg;
}

// bool dry_run = 9;
inline void JobConfiguration::clear_dry_run() {
  _impl_.dry_run_ = false;
}
inline bool JobConfiguration::_internal_dry_run() const {
  return _impl_.dry_run_;
}
inline bool JobConfiguration::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
  return _internal_dry_run();
}
inline void JobConfiguration::_internal_set_dry_run(bool value) {
  
  _impl_.dry_run_ = value;
}
inline void JobConfiguration::set_dry_run(bool value) {
  _internal_set_dry_run(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
}

// map<string, string> labels = 3;
inline int JobConfiguration::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int JobConfiguration::labels_size() const {
  return _internal_labels_size();
}
inline void JobConfiguration::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
JobConfiguration::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
JobConfiguration::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.bigquery.logging.v1.JobConfiguration.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
JobConfiguration::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
JobConfiguration::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.bigquery.logging.v1.JobConfiguration.labels)
  return _internal_mutable_labels();
}

inline bool JobConfiguration::has_configuration() const {
  return configuration_case() != CONFIGURATION_NOT_SET;
}
inline void JobConfiguration::clear_has_configuration() {
  _impl_._oneof_case_[0] = CONFIGURATION_NOT_SET;
}
inline JobConfiguration::ConfigurationCase JobConfiguration::configuration_case() const {
  return JobConfiguration::ConfigurationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TableDefinition

// string name = 1;
inline void TableDefinition::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TableDefinition::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableDefinition::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
inline std::string* TableDefinition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return _s;
}
inline const std::string& TableDefinition::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TableDefinition::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TableDefinition::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return _impl_.name_.Release();
}
inline void TableDefinition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableDefinition.name)
}

// repeated string source_uris = 2;
inline int TableDefinition::_internal_source_uris_size() const {
  return _impl_.source_uris_.size();
}
inline int TableDefinition::source_uris_size() const {
  return _internal_source_uris_size();
}
inline void TableDefinition::clear_source_uris() {
  _impl_.source_uris_.Clear();
}
inline std::string* TableDefinition::add_source_uris() {
  std::string* _s = _internal_add_source_uris();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return _s;
}
inline const std::string& TableDefinition::_internal_source_uris(int index) const {
  return _impl_.source_uris_.Get(index);
}
inline const std::string& TableDefinition::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return _internal_source_uris(index);
}
inline std::string* TableDefinition::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return _impl_.source_uris_.Mutable(index);
}
inline void TableDefinition::set_source_uris(int index, const std::string& value) {
  _impl_.source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::set_source_uris(int index, std::string&& value) {
  _impl_.source_uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::set_source_uris(int index, const char* value, size_t size) {
  _impl_.source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline std::string* TableDefinition::_internal_add_source_uris() {
  return _impl_.source_uris_.Add();
}
inline void TableDefinition::add_source_uris(const std::string& value) {
  _impl_.source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::add_source_uris(std::string&& value) {
  _impl_.source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::add_source_uris(const char* value, size_t size) {
  _impl_.source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableDefinition::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return _impl_.source_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableDefinition::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return &_impl_.source_uris_;
}

// -------------------------------------------------------------------

// JobStatus

// string state = 1;
inline void JobStatus::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& JobStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobStatus::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatus.state)
}
inline std::string* JobStatus::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.state)
  return _s;
}
inline const std::string& JobStatus::_internal_state() const {
  return _impl_.state_.Get();
}
inline void JobStatus::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* JobStatus::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* JobStatus::release_state() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.state)
  return _impl_.state_.Release();
}
inline void JobStatus::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.state)
}

// .google.rpc.Status error = 2;
inline bool JobStatus::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool JobStatus::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& JobStatus::_internal_error() const {
  const ::google::rpc::Status* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& JobStatus::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.error)
  return _internal_error();
}
inline void JobStatus::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.error)
}
inline ::google::rpc::Status* JobStatus::release_error() {
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* JobStatus::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.error)
  
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* JobStatus::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::google::rpc::Status* JobStatus::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.error)
  return _msg;
}
inline void JobStatus::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.error)
}

// repeated .google.rpc.Status additional_errors = 3;
inline int JobStatus::_internal_additional_errors_size() const {
  return _impl_.additional_errors_.size();
}
inline int JobStatus::additional_errors_size() const {
  return _internal_additional_errors_size();
}
inline ::google::rpc::Status* JobStatus::mutable_additional_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.additional_errors)
  return _impl_.additional_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >*
JobStatus::mutable_additional_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobStatus.additional_errors)
  return &_impl_.additional_errors_;
}
inline const ::google::rpc::Status& JobStatus::_internal_additional_errors(int index) const {
  return _impl_.additional_errors_.Get(index);
}
inline const ::google::rpc::Status& JobStatus::additional_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.additional_errors)
  return _internal_additional_errors(index);
}
inline ::google::rpc::Status* JobStatus::_internal_add_additional_errors() {
  return _impl_.additional_errors_.Add();
}
inline ::google::rpc::Status* JobStatus::add_additional_errors() {
  ::google::rpc::Status* _add = _internal_add_additional_errors();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobStatus.additional_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::Status >&
JobStatus::additional_errors() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobStatus.additional_errors)
  return _impl_.additional_errors_;
}

// -------------------------------------------------------------------

// JobStatistics_ReservationResourceUsage

// string name = 1;
inline void JobStatistics_ReservationResourceUsage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& JobStatistics_ReservationResourceUsage::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobStatistics_ReservationResourceUsage::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.name)
}
inline std::string* JobStatistics_ReservationResourceUsage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.name)
  return _s;
}
inline const std::string& JobStatistics_ReservationResourceUsage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void JobStatistics_ReservationResourceUsage::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* JobStatistics_ReservationResourceUsage::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* JobStatistics_ReservationResourceUsage::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.name)
  return _impl_.name_.Release();
}
inline void JobStatistics_ReservationResourceUsage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.name)
}

// int64 slot_ms = 2;
inline void JobStatistics_ReservationResourceUsage::clear_slot_ms() {
  _impl_.slot_ms_ = int64_t{0};
}
inline int64_t JobStatistics_ReservationResourceUsage::_internal_slot_ms() const {
  return _impl_.slot_ms_;
}
inline int64_t JobStatistics_ReservationResourceUsage::slot_ms() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.slot_ms)
  return _internal_slot_ms();
}
inline void JobStatistics_ReservationResourceUsage::_internal_set_slot_ms(int64_t value) {
  
  _impl_.slot_ms_ = value;
}
inline void JobStatistics_ReservationResourceUsage::set_slot_ms(int64_t value) {
  _internal_set_slot_ms(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.slot_ms)
}

// -------------------------------------------------------------------

// JobStatistics

// .google.protobuf.Timestamp create_time = 1;
inline bool JobStatistics::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool JobStatistics::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return _internal_create_time();
}
inline void JobStatistics::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return _msg;
}
inline void JobStatistics::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool JobStatistics::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool JobStatistics::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return _internal_start_time();
}
inline void JobStatistics::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return _msg;
}
inline void JobStatistics::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool JobStatistics::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool JobStatistics::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& JobStatistics::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return _internal_end_time();
}
inline void JobStatistics::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* JobStatistics::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return _msg;
}
inline void JobStatistics::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
}

// int64 total_processed_bytes = 4;
inline void JobStatistics::clear_total_processed_bytes() {
  _impl_.total_processed_bytes_ = int64_t{0};
}
inline int64_t JobStatistics::_internal_total_processed_bytes() const {
  return _impl_.total_processed_bytes_;
}
inline int64_t JobStatistics::total_processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
  return _internal_total_processed_bytes();
}
inline void JobStatistics::_internal_set_total_processed_bytes(int64_t value) {
  
  _impl_.total_processed_bytes_ = value;
}
inline void JobStatistics::set_total_processed_bytes(int64_t value) {
  _internal_set_total_processed_bytes(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
}

// int64 total_billed_bytes = 5;
inline void JobStatistics::clear_total_billed_bytes() {
  _impl_.total_billed_bytes_ = int64_t{0};
}
inline int64_t JobStatistics::_internal_total_billed_bytes() const {
  return _impl_.total_billed_bytes_;
}
inline int64_t JobStatistics::total_billed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
  return _internal_total_billed_bytes();
}
inline void JobStatistics::_internal_set_total_billed_bytes(int64_t value) {
  
  _impl_.total_billed_bytes_ = value;
}
inline void JobStatistics::set_total_billed_bytes(int64_t value) {
  _internal_set_total_billed_bytes(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
}

// int32 billing_tier = 7;
inline void JobStatistics::clear_billing_tier() {
  _impl_.billing_tier_ = 0;
}
inline int32_t JobStatistics::_internal_billing_tier() const {
  return _impl_.billing_tier_;
}
inline int32_t JobStatistics::billing_tier() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
  return _internal_billing_tier();
}
inline void JobStatistics::_internal_set_billing_tier(int32_t value) {
  
  _impl_.billing_tier_ = value;
}
inline void JobStatistics::set_billing_tier(int32_t value) {
  _internal_set_billing_tier(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
}

// int64 total_slot_ms = 8;
inline void JobStatistics::clear_total_slot_ms() {
  _impl_.total_slot_ms_ = int64_t{0};
}
inline int64_t JobStatistics::_internal_total_slot_ms() const {
  return _impl_.total_slot_ms_;
}
inline int64_t JobStatistics::total_slot_ms() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_slot_ms)
  return _internal_total_slot_ms();
}
inline void JobStatistics::_internal_set_total_slot_ms(int64_t value) {
  
  _impl_.total_slot_ms_ = value;
}
inline void JobStatistics::set_total_slot_ms(int64_t value) {
  _internal_set_total_slot_ms(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_slot_ms)
}

// repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;
inline int JobStatistics::_internal_reservation_usage_size() const {
  return _impl_.reservation_usage_.size();
}
inline int JobStatistics::reservation_usage_size() const {
  return _internal_reservation_usage_size();
}
inline void JobStatistics::clear_reservation_usage() {
  _impl_.reservation_usage_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* JobStatistics::mutable_reservation_usage(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.reservation_usage)
  return _impl_.reservation_usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage >*
JobStatistics::mutable_reservation_usage() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobStatistics.reservation_usage)
  return &_impl_.reservation_usage_;
}
inline const ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage& JobStatistics::_internal_reservation_usage(int index) const {
  return _impl_.reservation_usage_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage& JobStatistics::reservation_usage(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.reservation_usage)
  return _internal_reservation_usage(index);
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* JobStatistics::_internal_add_reservation_usage() {
  return _impl_.reservation_usage_.Add();
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* JobStatistics::add_reservation_usage() {
  ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage* _add = _internal_add_reservation_usage();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobStatistics.reservation_usage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::JobStatistics_ReservationResourceUsage >&
JobStatistics::reservation_usage() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobStatistics.reservation_usage)
  return _impl_.reservation_usage_;
}

// repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;
inline int JobStatistics::_internal_referenced_tables_size() const {
  return _impl_.referenced_tables_.size();
}
inline int JobStatistics::referenced_tables_size() const {
  return _internal_referenced_tables_size();
}
inline void JobStatistics::clear_referenced_tables() {
  _impl_.referenced_tables_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::mutable_referenced_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.referenced_tables)
  return _impl_.referenced_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
JobStatistics::mutable_referenced_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobStatistics.referenced_tables)
  return &_impl_.referenced_tables_;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobStatistics::_internal_referenced_tables(int index) const {
  return _impl_.referenced_tables_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobStatistics::referenced_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.referenced_tables)
  return _internal_referenced_tables(index);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::_internal_add_referenced_tables() {
  return _impl_.referenced_tables_.Add();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::add_referenced_tables() {
  ::google::cloud::bigquery::logging::v1::TableName* _add = _internal_add_referenced_tables();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobStatistics.referenced_tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
JobStatistics::referenced_tables() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobStatistics.referenced_tables)
  return _impl_.referenced_tables_;
}

// int32 total_tables_processed = 10;
inline void JobStatistics::clear_total_tables_processed() {
  _impl_.total_tables_processed_ = 0;
}
inline int32_t JobStatistics::_internal_total_tables_processed() const {
  return _impl_.total_tables_processed_;
}
inline int32_t JobStatistics::total_tables_processed() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_tables_processed)
  return _internal_total_tables_processed();
}
inline void JobStatistics::_internal_set_total_tables_processed(int32_t value) {
  
  _impl_.total_tables_processed_ = value;
}
inline void JobStatistics::set_total_tables_processed(int32_t value) {
  _internal_set_total_tables_processed(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_tables_processed)
}

// repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;
inline int JobStatistics::_internal_referenced_views_size() const {
  return _impl_.referenced_views_.size();
}
inline int JobStatistics::referenced_views_size() const {
  return _internal_referenced_views_size();
}
inline void JobStatistics::clear_referenced_views() {
  _impl_.referenced_views_.Clear();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::mutable_referenced_views(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.referenced_views)
  return _impl_.referenced_views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
JobStatistics::mutable_referenced_views() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobStatistics.referenced_views)
  return &_impl_.referenced_views_;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobStatistics::_internal_referenced_views(int index) const {
  return _impl_.referenced_views_.Get(index);
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobStatistics::referenced_views(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.referenced_views)
  return _internal_referenced_views(index);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::_internal_add_referenced_views() {
  return _impl_.referenced_views_.Add();
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobStatistics::add_referenced_views() {
  ::google::cloud::bigquery::logging::v1::TableName* _add = _internal_add_referenced_views();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobStatistics.referenced_views)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
JobStatistics::referenced_views() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobStatistics.referenced_views)
  return _impl_.referenced_views_;
}

// int32 total_views_processed = 12;
inline void JobStatistics::clear_total_views_processed() {
  _impl_.total_views_processed_ = 0;
}
inline int32_t JobStatistics::_internal_total_views_processed() const {
  return _impl_.total_views_processed_;
}
inline int32_t JobStatistics::total_views_processed() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_views_processed)
  return _internal_total_views_processed();
}
inline void JobStatistics::_internal_set_total_views_processed(int32_t value) {
  
  _impl_.total_views_processed_ = value;
}
inline void JobStatistics::set_total_views_processed(int32_t value) {
  _internal_set_total_views_processed(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_views_processed)
}

// int64 query_output_row_count = 15;
inline void JobStatistics::clear_query_output_row_count() {
  _impl_.query_output_row_count_ = int64_t{0};
}
inline int64_t JobStatistics::_internal_query_output_row_count() const {
  return _impl_.query_output_row_count_;
}
inline int64_t JobStatistics::query_output_row_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.query_output_row_count)
  return _internal_query_output_row_count();
}
inline void JobStatistics::_internal_set_query_output_row_count(int64_t value) {
  
  _impl_.query_output_row_count_ = value;
}
inline void JobStatistics::set_query_output_row_count(int64_t value) {
  _internal_set_query_output_row_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.query_output_row_count)
}

// int64 total_load_output_bytes = 13;
inline void JobStatistics::clear_total_load_output_bytes() {
  _impl_.total_load_output_bytes_ = int64_t{0};
}
inline int64_t JobStatistics::_internal_total_load_output_bytes() const {
  return _impl_.total_load_output_bytes_;
}
inline int64_t JobStatistics::total_load_output_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_load_output_bytes)
  return _internal_total_load_output_bytes();
}
inline void JobStatistics::_internal_set_total_load_output_bytes(int64_t value) {
  
  _impl_.total_load_output_bytes_ = value;
}
inline void JobStatistics::set_total_load_output_bytes(int64_t value) {
  _internal_set_total_load_output_bytes(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_load_output_bytes)
}

// -------------------------------------------------------------------

// DatasetName

// string project_id = 1;
inline void DatasetName::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& DatasetName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetName::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
inline std::string* DatasetName::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return _s;
}
inline const std::string& DatasetName::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void DatasetName::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetName::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return _impl_.project_id_.Release();
}
inline void DatasetName::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}

// string dataset_id = 2;
inline void DatasetName::clear_dataset_id() {
  _impl_.dataset_id_.ClearToEmpty();
}
inline const std::string& DatasetName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetName::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
inline std::string* DatasetName::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return _s;
}
inline const std::string& DatasetName::_internal_dataset_id() const {
  return _impl_.dataset_id_.Get();
}
inline void DatasetName::_internal_set_dataset_id(const std::string& value) {
  
  _impl_.dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetName::_internal_mutable_dataset_id() {
  
  return _impl_.dataset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return _impl_.dataset_id_.Release();
}
inline void DatasetName::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_id_.SetAllocated(dataset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_id_.IsDefault()) {
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}

// -------------------------------------------------------------------

// TableName

// string project_id = 1;
inline void TableName::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& TableName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableName::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.project_id)
}
inline std::string* TableName::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.project_id)
  return _s;
}
inline const std::string& TableName::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void TableName::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableName::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.project_id)
  return _impl_.project_id_.Release();
}
inline void TableName::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.project_id)
}

// string dataset_id = 2;
inline void TableName::clear_dataset_id() {
  _impl_.dataset_id_.ClearToEmpty();
}
inline const std::string& TableName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableName::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
inline std::string* TableName::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return _s;
}
inline const std::string& TableName::_internal_dataset_id() const {
  return _impl_.dataset_id_.Get();
}
inline void TableName::_internal_set_dataset_id(const std::string& value) {
  
  _impl_.dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableName::_internal_mutable_dataset_id() {
  
  return _impl_.dataset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return _impl_.dataset_id_.Release();
}
inline void TableName::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_id_.SetAllocated(dataset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_id_.IsDefault()) {
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}

// string table_id = 3;
inline void TableName::clear_table_id() {
  _impl_.table_id_.ClearToEmpty();
}
inline const std::string& TableName::table_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.table_id)
  return _internal_table_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableName::set_table_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.table_id)
}
inline std::string* TableName::mutable_table_id() {
  std::string* _s = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.table_id)
  return _s;
}
inline const std::string& TableName::_internal_table_id() const {
  return _impl_.table_id_.Get();
}
inline void TableName::_internal_set_table_id(const std::string& value) {
  
  _impl_.table_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableName::_internal_mutable_table_id() {
  
  return _impl_.table_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableName::release_table_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.table_id)
  return _impl_.table_id_.Release();
}
inline void TableName::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  _impl_.table_id_.SetAllocated(table_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_id_.IsDefault()) {
    _impl_.table_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.table_id)
}

// -------------------------------------------------------------------

// JobName

// string project_id = 1;
inline void JobName::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& JobName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobName::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.project_id)
}
inline std::string* JobName::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.project_id)
  return _s;
}
inline const std::string& JobName::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void JobName::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JobName::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JobName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.project_id)
  return _impl_.project_id_.Release();
}
inline void JobName::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.project_id)
}

// string job_id = 2;
inline void JobName::clear_job_id() {
  _impl_.job_id_.ClearToEmpty();
}
inline const std::string& JobName::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.job_id)
  return _internal_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobName::set_job_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.job_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.job_id)
}
inline std::string* JobName::mutable_job_id() {
  std::string* _s = _internal_mutable_job_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.job_id)
  return _s;
}
inline const std::string& JobName::_internal_job_id() const {
  return _impl_.job_id_.Get();
}
inline void JobName::_internal_set_job_id(const std::string& value) {
  
  _impl_.job_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JobName::_internal_mutable_job_id() {
  
  return _impl_.job_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JobName::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.job_id)
  return _impl_.job_id_.Release();
}
inline void JobName::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  _impl_.job_id_.SetAllocated(job_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.job_id_.IsDefault()) {
    _impl_.job_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.job_id)
}

// string location = 3;
inline void JobName::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& JobName::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JobName::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.location)
}
inline std::string* JobName::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.location)
  return _s;
}
inline const std::string& JobName::_internal_location() const {
  return _impl_.location_.Get();
}
inline void JobName::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* JobName::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* JobName::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.location)
  return _impl_.location_.Release();
}
inline void JobName::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.location)
}

// -------------------------------------------------------------------

// EncryptionInfo

// string kms_key_name = 1;
inline void EncryptionInfo::clear_kms_key_name() {
  _impl_.kms_key_name_.ClearToEmpty();
}
inline const std::string& EncryptionInfo::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.EncryptionInfo.kms_key_name)
  return _internal_kms_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionInfo::set_kms_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kms_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.EncryptionInfo.kms_key_name)
}
inline std::string* EncryptionInfo::mutable_kms_key_name() {
  std::string* _s = _internal_mutable_kms_key_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.EncryptionInfo.kms_key_name)
  return _s;
}
inline const std::string& EncryptionInfo::_internal_kms_key_name() const {
  return _impl_.kms_key_name_.Get();
}
inline void EncryptionInfo::_internal_set_kms_key_name(const std::string& value) {
  
  _impl_.kms_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionInfo::_internal_mutable_kms_key_name() {
  
  return _impl_.kms_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionInfo::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.EncryptionInfo.kms_key_name)
  return _impl_.kms_key_name_.Release();
}
inline void EncryptionInfo::set_allocated_kms_key_name(std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.kms_key_name_.SetAllocated(kms_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kms_key_name_.IsDefault()) {
    _impl_.kms_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.EncryptionInfo.kms_key_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logging
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto
