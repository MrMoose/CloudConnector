// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/avro.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class AvroRows;
struct AvroRowsDefaultTypeInternal;
extern AvroRowsDefaultTypeInternal _AvroRows_default_instance_;
class AvroSchema;
struct AvroSchemaDefaultTypeInternal;
extern AvroSchemaDefaultTypeInternal _AvroSchema_default_instance_;
class AvroSerializationOptions;
struct AvroSerializationOptionsDefaultTypeInternal;
extern AvroSerializationOptionsDefaultTypeInternal _AvroSerializationOptions_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::storage::v1::AvroRows* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AvroRows>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::AvroSchema* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AvroSchema>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AvroSerializationOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

// ===================================================================

class AvroSchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AvroSchema) */ {
 public:
  inline AvroSchema() : AvroSchema(nullptr) {}
  ~AvroSchema() override;
  explicit PROTOBUF_CONSTEXPR AvroSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvroSchema(const AvroSchema& from);
  AvroSchema(AvroSchema&& from) noexcept
    : AvroSchema() {
    *this = ::std::move(from);
  }

  inline AvroSchema& operator=(const AvroSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvroSchema& operator=(AvroSchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvroSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvroSchema* internal_default_instance() {
    return reinterpret_cast<const AvroSchema*>(
               &_AvroSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AvroSchema& a, AvroSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(AvroSchema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvroSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvroSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvroSchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvroSchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AvroSchema& from) {
    AvroSchema::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvroSchema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AvroSchema";
  }
  protected:
  explicit AvroSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
  };
  // string schema = 1;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AvroSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
};
// -------------------------------------------------------------------

class AvroRows final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AvroRows) */ {
 public:
  inline AvroRows() : AvroRows(nullptr) {}
  ~AvroRows() override;
  explicit PROTOBUF_CONSTEXPR AvroRows(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvroRows(const AvroRows& from);
  AvroRows(AvroRows&& from) noexcept
    : AvroRows() {
    *this = ::std::move(from);
  }

  inline AvroRows& operator=(const AvroRows& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvroRows& operator=(AvroRows&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvroRows& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvroRows* internal_default_instance() {
    return reinterpret_cast<const AvroRows*>(
               &_AvroRows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AvroRows& a, AvroRows& b) {
    a.Swap(&b);
  }
  inline void Swap(AvroRows* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvroRows* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvroRows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvroRows>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvroRows& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AvroRows& from) {
    AvroRows::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvroRows* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AvroRows";
  }
  protected:
  explicit AvroRows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedBinaryRowsFieldNumber = 1,
    kRowCountFieldNumber = 2,
  };
  // bytes serialized_binary_rows = 1;
  void clear_serialized_binary_rows();
  const std::string& serialized_binary_rows() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_binary_rows(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_binary_rows();
  PROTOBUF_NODISCARD std::string* release_serialized_binary_rows();
  void set_allocated_serialized_binary_rows(std::string* serialized_binary_rows);
  private:
  const std::string& _internal_serialized_binary_rows() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_binary_rows(const std::string& value);
  std::string* _internal_mutable_serialized_binary_rows();
  public:

  // int64 row_count = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_row_count();
  PROTOBUF_DEPRECATED int64_t row_count() const;
  PROTOBUF_DEPRECATED void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AvroRows)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_binary_rows_;
    int64_t row_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
};
// -------------------------------------------------------------------

class AvroSerializationOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AvroSerializationOptions) */ {
 public:
  inline AvroSerializationOptions() : AvroSerializationOptions(nullptr) {}
  ~AvroSerializationOptions() override;
  explicit PROTOBUF_CONSTEXPR AvroSerializationOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvroSerializationOptions(const AvroSerializationOptions& from);
  AvroSerializationOptions(AvroSerializationOptions&& from) noexcept
    : AvroSerializationOptions() {
    *this = ::std::move(from);
  }

  inline AvroSerializationOptions& operator=(const AvroSerializationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvroSerializationOptions& operator=(AvroSerializationOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvroSerializationOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvroSerializationOptions* internal_default_instance() {
    return reinterpret_cast<const AvroSerializationOptions*>(
               &_AvroSerializationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AvroSerializationOptions& a, AvroSerializationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AvroSerializationOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvroSerializationOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvroSerializationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvroSerializationOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvroSerializationOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AvroSerializationOptions& from) {
    AvroSerializationOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvroSerializationOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AvroSerializationOptions";
  }
  protected:
  explicit AvroSerializationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableDisplayNameAttributeFieldNumber = 1,
  };
  // bool enable_display_name_attribute = 1;
  void clear_enable_display_name_attribute();
  bool enable_display_name_attribute() const;
  void set_enable_display_name_attribute(bool value);
  private:
  bool _internal_enable_display_name_attribute() const;
  void _internal_set_enable_display_name_attribute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AvroSerializationOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_display_name_attribute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AvroSchema

// string schema = 1;
inline void AvroSchema::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& AvroSchema::schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AvroSchema.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AvroSchema::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AvroSchema.schema)
}
inline std::string* AvroSchema::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AvroSchema.schema)
  return _s;
}
inline const std::string& AvroSchema::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void AvroSchema::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* AvroSchema::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* AvroSchema::release_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AvroSchema.schema)
  return _impl_.schema_.Release();
}
inline void AvroSchema::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AvroSchema.schema)
}

// -------------------------------------------------------------------

// AvroRows

// bytes serialized_binary_rows = 1;
inline void AvroRows::clear_serialized_binary_rows() {
  _impl_.serialized_binary_rows_.ClearToEmpty();
}
inline const std::string& AvroRows::serialized_binary_rows() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AvroRows.serialized_binary_rows)
  return _internal_serialized_binary_rows();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AvroRows::set_serialized_binary_rows(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serialized_binary_rows_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AvroRows.serialized_binary_rows)
}
inline std::string* AvroRows::mutable_serialized_binary_rows() {
  std::string* _s = _internal_mutable_serialized_binary_rows();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AvroRows.serialized_binary_rows)
  return _s;
}
inline const std::string& AvroRows::_internal_serialized_binary_rows() const {
  return _impl_.serialized_binary_rows_.Get();
}
inline void AvroRows::_internal_set_serialized_binary_rows(const std::string& value) {
  
  _impl_.serialized_binary_rows_.Set(value, GetArenaForAllocation());
}
inline std::string* AvroRows::_internal_mutable_serialized_binary_rows() {
  
  return _impl_.serialized_binary_rows_.Mutable(GetArenaForAllocation());
}
inline std::string* AvroRows::release_serialized_binary_rows() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AvroRows.serialized_binary_rows)
  return _impl_.serialized_binary_rows_.Release();
}
inline void AvroRows::set_allocated_serialized_binary_rows(std::string* serialized_binary_rows) {
  if (serialized_binary_rows != nullptr) {
    
  } else {
    
  }
  _impl_.serialized_binary_rows_.SetAllocated(serialized_binary_rows, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialized_binary_rows_.IsDefault()) {
    _impl_.serialized_binary_rows_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AvroRows.serialized_binary_rows)
}

// int64 row_count = 2 [deprecated = true];
inline void AvroRows::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t AvroRows::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t AvroRows::row_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AvroRows.row_count)
  return _internal_row_count();
}
inline void AvroRows::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void AvroRows::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AvroRows.row_count)
}

// -------------------------------------------------------------------

// AvroSerializationOptions

// bool enable_display_name_attribute = 1;
inline void AvroSerializationOptions::clear_enable_display_name_attribute() {
  _impl_.enable_display_name_attribute_ = false;
}
inline bool AvroSerializationOptions::_internal_enable_display_name_attribute() const {
  return _impl_.enable_display_name_attribute_;
}
inline bool AvroSerializationOptions::enable_display_name_attribute() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AvroSerializationOptions.enable_display_name_attribute)
  return _internal_enable_display_name_attribute();
}
inline void AvroSerializationOptions::_internal_set_enable_display_name_attribute(bool value) {
  
  _impl_.enable_display_name_attribute_ = value;
}
inline void AvroSerializationOptions::set_enable_display_name_attribute(bool value) {
  _internal_set_enable_display_name_attribute(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AvroSerializationOptions.enable_display_name_attribute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto
