// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/storage/v1/arrow.pb.h"
#include "google/cloud/bigquery/storage/v1/avro.pb.h"
#include "google/cloud/bigquery/storage/v1/table.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class ReadSession;
struct ReadSessionDefaultTypeInternal;
extern ReadSessionDefaultTypeInternal _ReadSession_default_instance_;
class ReadSession_TableModifiers;
struct ReadSession_TableModifiersDefaultTypeInternal;
extern ReadSession_TableModifiersDefaultTypeInternal _ReadSession_TableModifiers_default_instance_;
class ReadSession_TableReadOptions;
struct ReadSession_TableReadOptionsDefaultTypeInternal;
extern ReadSession_TableReadOptionsDefaultTypeInternal _ReadSession_TableReadOptions_default_instance_;
class ReadStream;
struct ReadStreamDefaultTypeInternal;
extern ReadStreamDefaultTypeInternal _ReadStream_default_instance_;
class WriteStream;
struct WriteStreamDefaultTypeInternal;
extern WriteStreamDefaultTypeInternal _WriteStream_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::storage::v1::ReadSession* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadStream* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadStream>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::WriteStream* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::WriteStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

enum WriteStream_Type : int {
  WriteStream_Type_TYPE_UNSPECIFIED = 0,
  WriteStream_Type_COMMITTED = 1,
  WriteStream_Type_PENDING = 2,
  WriteStream_Type_BUFFERED = 3,
  WriteStream_Type_WriteStream_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteStream_Type_WriteStream_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteStream_Type_IsValid(int value);
constexpr WriteStream_Type WriteStream_Type_Type_MIN = WriteStream_Type_TYPE_UNSPECIFIED;
constexpr WriteStream_Type WriteStream_Type_Type_MAX = WriteStream_Type_BUFFERED;
constexpr int WriteStream_Type_Type_ARRAYSIZE = WriteStream_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteStream_Type_descriptor();
template<typename T>
inline const std::string& WriteStream_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteStream_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteStream_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteStream_Type_descriptor(), enum_t_value);
}
inline bool WriteStream_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteStream_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteStream_Type>(
    WriteStream_Type_descriptor(), name, value);
}
enum WriteStream_WriteMode : int {
  WriteStream_WriteMode_WRITE_MODE_UNSPECIFIED = 0,
  WriteStream_WriteMode_INSERT = 1,
  WriteStream_WriteMode_WriteStream_WriteMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteStream_WriteMode_WriteStream_WriteMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteStream_WriteMode_IsValid(int value);
constexpr WriteStream_WriteMode WriteStream_WriteMode_WriteMode_MIN = WriteStream_WriteMode_WRITE_MODE_UNSPECIFIED;
constexpr WriteStream_WriteMode WriteStream_WriteMode_WriteMode_MAX = WriteStream_WriteMode_INSERT;
constexpr int WriteStream_WriteMode_WriteMode_ARRAYSIZE = WriteStream_WriteMode_WriteMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteStream_WriteMode_descriptor();
template<typename T>
inline const std::string& WriteStream_WriteMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteStream_WriteMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteStream_WriteMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteStream_WriteMode_descriptor(), enum_t_value);
}
inline bool WriteStream_WriteMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteStream_WriteMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteStream_WriteMode>(
    WriteStream_WriteMode_descriptor(), name, value);
}
enum DataFormat : int {
  DATA_FORMAT_UNSPECIFIED = 0,
  AVRO = 1,
  ARROW = 2,
  DataFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataFormat_IsValid(int value);
constexpr DataFormat DataFormat_MIN = DATA_FORMAT_UNSPECIFIED;
constexpr DataFormat DataFormat_MAX = ARROW;
constexpr int DataFormat_ARRAYSIZE = DataFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataFormat_descriptor();
template<typename T>
inline const std::string& DataFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataFormat_descriptor(), enum_t_value);
}
inline bool DataFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataFormat>(
    DataFormat_descriptor(), name, value);
}
enum WriteStreamView : int {
  WRITE_STREAM_VIEW_UNSPECIFIED = 0,
  BASIC = 1,
  FULL = 2,
  WriteStreamView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WriteStreamView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WriteStreamView_IsValid(int value);
constexpr WriteStreamView WriteStreamView_MIN = WRITE_STREAM_VIEW_UNSPECIFIED;
constexpr WriteStreamView WriteStreamView_MAX = FULL;
constexpr int WriteStreamView_ARRAYSIZE = WriteStreamView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteStreamView_descriptor();
template<typename T>
inline const std::string& WriteStreamView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteStreamView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteStreamView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteStreamView_descriptor(), enum_t_value);
}
inline bool WriteStreamView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriteStreamView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteStreamView>(
    WriteStreamView_descriptor(), name, value);
}
// ===================================================================

class ReadSession_TableModifiers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers) */ {
 public:
  inline ReadSession_TableModifiers() : ReadSession_TableModifiers(nullptr) {}
  ~ReadSession_TableModifiers() override;
  explicit PROTOBUF_CONSTEXPR ReadSession_TableModifiers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadSession_TableModifiers(const ReadSession_TableModifiers& from);
  ReadSession_TableModifiers(ReadSession_TableModifiers&& from) noexcept
    : ReadSession_TableModifiers() {
    *this = ::std::move(from);
  }

  inline ReadSession_TableModifiers& operator=(const ReadSession_TableModifiers& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSession_TableModifiers& operator=(ReadSession_TableModifiers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadSession_TableModifiers& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadSession_TableModifiers* internal_default_instance() {
    return reinterpret_cast<const ReadSession_TableModifiers*>(
               &_ReadSession_TableModifiers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadSession_TableModifiers& a, ReadSession_TableModifiers& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSession_TableModifiers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadSession_TableModifiers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadSession_TableModifiers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadSession_TableModifiers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadSession_TableModifiers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadSession_TableModifiers& from) {
    ReadSession_TableModifiers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSession_TableModifiers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadSession.TableModifiers";
  }
  protected:
  explicit ReadSession_TableModifiers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp snapshot_time = 1;
  bool has_snapshot_time() const;
  private:
  bool _internal_has_snapshot_time() const;
  public:
  void clear_snapshot_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& snapshot_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_snapshot_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_snapshot_time();
  void set_allocated_snapshot_time(::PROTOBUF_NAMESPACE_ID::Timestamp* snapshot_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_snapshot_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_snapshot_time();
  public:
  void unsafe_arena_set_allocated_snapshot_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* snapshot_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_snapshot_time();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* snapshot_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
};
// -------------------------------------------------------------------

class ReadSession_TableReadOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions) */ {
 public:
  inline ReadSession_TableReadOptions() : ReadSession_TableReadOptions(nullptr) {}
  ~ReadSession_TableReadOptions() override;
  explicit PROTOBUF_CONSTEXPR ReadSession_TableReadOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadSession_TableReadOptions(const ReadSession_TableReadOptions& from);
  ReadSession_TableReadOptions(ReadSession_TableReadOptions&& from) noexcept
    : ReadSession_TableReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadSession_TableReadOptions& operator=(const ReadSession_TableReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSession_TableReadOptions& operator=(ReadSession_TableReadOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadSession_TableReadOptions& default_instance() {
    return *internal_default_instance();
  }
  enum OutputFormatSerializationOptionsCase {
    kArrowSerializationOptions = 3,
    kAvroSerializationOptions = 4,
    OUTPUT_FORMAT_SERIALIZATION_OPTIONS_NOT_SET = 0,
  };

  static inline const ReadSession_TableReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadSession_TableReadOptions*>(
               &_ReadSession_TableReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadSession_TableReadOptions& a, ReadSession_TableReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSession_TableReadOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadSession_TableReadOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadSession_TableReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadSession_TableReadOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadSession_TableReadOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadSession_TableReadOptions& from) {
    ReadSession_TableReadOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSession_TableReadOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions";
  }
  protected:
  explicit ReadSession_TableReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedFieldsFieldNumber = 1,
    kRowRestrictionFieldNumber = 2,
    kArrowSerializationOptionsFieldNumber = 3,
    kAvroSerializationOptionsFieldNumber = 4,
  };
  // repeated string selected_fields = 1;
  int selected_fields_size() const;
  private:
  int _internal_selected_fields_size() const;
  public:
  void clear_selected_fields();
  const std::string& selected_fields(int index) const;
  std::string* mutable_selected_fields(int index);
  void set_selected_fields(int index, const std::string& value);
  void set_selected_fields(int index, std::string&& value);
  void set_selected_fields(int index, const char* value);
  void set_selected_fields(int index, const char* value, size_t size);
  std::string* add_selected_fields();
  void add_selected_fields(const std::string& value);
  void add_selected_fields(std::string&& value);
  void add_selected_fields(const char* value);
  void add_selected_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& selected_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_selected_fields();
  private:
  const std::string& _internal_selected_fields(int index) const;
  std::string* _internal_add_selected_fields();
  public:

  // string row_restriction = 2;
  void clear_row_restriction();
  const std::string& row_restriction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row_restriction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row_restriction();
  PROTOBUF_NODISCARD std::string* release_row_restriction();
  void set_allocated_row_restriction(std::string* row_restriction);
  private:
  const std::string& _internal_row_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row_restriction(const std::string& value);
  std::string* _internal_mutable_row_restriction();
  public:

  // .google.cloud.bigquery.storage.v1.ArrowSerializationOptions arrow_serialization_options = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_arrow_serialization_options() const;
  private:
  bool _internal_has_arrow_serialization_options() const;
  public:
  void clear_arrow_serialization_options();
  const ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions& arrow_serialization_options() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* release_arrow_serialization_options();
  ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* mutable_arrow_serialization_options();
  void set_allocated_arrow_serialization_options(::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* arrow_serialization_options);
  private:
  const ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions& _internal_arrow_serialization_options() const;
  ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* _internal_mutable_arrow_serialization_options();
  public:
  void unsafe_arena_set_allocated_arrow_serialization_options(
      ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* arrow_serialization_options);
  ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* unsafe_arena_release_arrow_serialization_options();

  // .google.cloud.bigquery.storage.v1.AvroSerializationOptions avro_serialization_options = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_avro_serialization_options() const;
  private:
  bool _internal_has_avro_serialization_options() const;
  public:
  void clear_avro_serialization_options();
  const ::google::cloud::bigquery::storage::v1::AvroSerializationOptions& avro_serialization_options() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* release_avro_serialization_options();
  ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* mutable_avro_serialization_options();
  void set_allocated_avro_serialization_options(::google::cloud::bigquery::storage::v1::AvroSerializationOptions* avro_serialization_options);
  private:
  const ::google::cloud::bigquery::storage::v1::AvroSerializationOptions& _internal_avro_serialization_options() const;
  ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* _internal_mutable_avro_serialization_options();
  public:
  void unsafe_arena_set_allocated_avro_serialization_options(
      ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* avro_serialization_options);
  ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* unsafe_arena_release_avro_serialization_options();

  void clear_output_format_serialization_options();
  OutputFormatSerializationOptionsCase output_format_serialization_options_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions)
 private:
  class _Internal;
  void set_has_arrow_serialization_options();
  void set_has_avro_serialization_options();

  inline bool has_output_format_serialization_options() const;
  inline void clear_has_output_format_serialization_options();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> selected_fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_restriction_;
    union OutputFormatSerializationOptionsUnion {
      constexpr OutputFormatSerializationOptionsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* arrow_serialization_options_;
      ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* avro_serialization_options_;
    } output_format_serialization_options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
};
// -------------------------------------------------------------------

class ReadSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadSession) */ {
 public:
  inline ReadSession() : ReadSession(nullptr) {}
  ~ReadSession() override;
  explicit PROTOBUF_CONSTEXPR ReadSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadSession(const ReadSession& from);
  ReadSession(ReadSession&& from) noexcept
    : ReadSession() {
    *this = ::std::move(from);
  }

  inline ReadSession& operator=(const ReadSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSession& operator=(ReadSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadSession& default_instance() {
    return *internal_default_instance();
  }
  enum SchemaCase {
    kAvroSchema = 4,
    kArrowSchema = 5,
    SCHEMA_NOT_SET = 0,
  };

  static inline const ReadSession* internal_default_instance() {
    return reinterpret_cast<const ReadSession*>(
               &_ReadSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadSession& a, ReadSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadSession& from) {
    ReadSession::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadSession";
  }
  protected:
  explicit ReadSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadSession_TableModifiers TableModifiers;
  typedef ReadSession_TableReadOptions TableReadOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 10,
    kNameFieldNumber = 1,
    kTableFieldNumber = 6,
    kTraceIdFieldNumber = 13,
    kExpireTimeFieldNumber = 2,
    kTableModifiersFieldNumber = 7,
    kReadOptionsFieldNumber = 8,
    kEstimatedTotalBytesScannedFieldNumber = 12,
    kDataFormatFieldNumber = 3,
    kAvroSchemaFieldNumber = 4,
    kArrowSchemaFieldNumber = 5,
  };
  // repeated .google.cloud.bigquery.storage.v1.ReadStream streams = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::google::cloud::bigquery::storage::v1::ReadStream* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::ReadStream >*
      mutable_streams();
  private:
  const ::google::cloud::bigquery::storage::v1::ReadStream& _internal_streams(int index) const;
  ::google::cloud::bigquery::storage::v1::ReadStream* _internal_add_streams();
  public:
  const ::google::cloud::bigquery::storage::v1::ReadStream& streams(int index) const;
  ::google::cloud::bigquery::storage::v1::ReadStream* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::ReadStream >&
      streams() const;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string table = 6 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_table();
  const std::string& table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table();
  PROTOBUF_NODISCARD std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // string trace_id = 13 [(.google.api.field_behavior) = OPTIONAL];
  void clear_trace_id();
  const std::string& trace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // .google.protobuf.Timestamp expire_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.cloud.bigquery.storage.v1.ReadSession.TableModifiers table_modifiers = 7 [(.google.api.field_behavior) = OPTIONAL];
  bool has_table_modifiers() const;
  private:
  bool _internal_has_table_modifiers() const;
  public:
  void clear_table_modifiers();
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers& table_modifiers() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* release_table_modifiers();
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* mutable_table_modifiers();
  void set_allocated_table_modifiers(::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* table_modifiers);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers& _internal_table_modifiers() const;
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* _internal_mutable_table_modifiers();
  public:
  void unsafe_arena_set_allocated_table_modifiers(
      ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* table_modifiers);
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* unsafe_arena_release_table_modifiers();

  // .google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions read_options = 8 [(.google.api.field_behavior) = OPTIONAL];
  bool has_read_options() const;
  private:
  bool _internal_has_read_options() const;
  public:
  void clear_read_options();
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions& read_options() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* release_read_options();
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* mutable_read_options();
  void set_allocated_read_options(::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* read_options);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions& _internal_read_options() const;
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* _internal_mutable_read_options();
  public:
  void unsafe_arena_set_allocated_read_options(
      ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* read_options);
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* unsafe_arena_release_read_options();

  // int64 estimated_total_bytes_scanned = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_estimated_total_bytes_scanned();
  int64_t estimated_total_bytes_scanned() const;
  void set_estimated_total_bytes_scanned(int64_t value);
  private:
  int64_t _internal_estimated_total_bytes_scanned() const;
  void _internal_set_estimated_total_bytes_scanned(int64_t value);
  public:

  // .google.cloud.bigquery.storage.v1.DataFormat data_format = 3 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_data_format();
  ::google::cloud::bigquery::storage::v1::DataFormat data_format() const;
  void set_data_format(::google::cloud::bigquery::storage::v1::DataFormat value);
  private:
  ::google::cloud::bigquery::storage::v1::DataFormat _internal_data_format() const;
  void _internal_set_data_format(::google::cloud::bigquery::storage::v1::DataFormat value);
  public:

  // .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_avro_schema() const;
  private:
  bool _internal_has_avro_schema() const;
  public:
  void clear_avro_schema();
  const ::google::cloud::bigquery::storage::v1::AvroSchema& avro_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AvroSchema* release_avro_schema();
  ::google::cloud::bigquery::storage::v1::AvroSchema* mutable_avro_schema();
  void set_allocated_avro_schema(::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::AvroSchema& _internal_avro_schema() const;
  ::google::cloud::bigquery::storage::v1::AvroSchema* _internal_mutable_avro_schema();
  public:
  void unsafe_arena_set_allocated_avro_schema(
      ::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema);
  ::google::cloud::bigquery::storage::v1::AvroSchema* unsafe_arena_release_avro_schema();

  // .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_arrow_schema() const;
  private:
  bool _internal_has_arrow_schema() const;
  public:
  void clear_arrow_schema();
  const ::google::cloud::bigquery::storage::v1::ArrowSchema& arrow_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ArrowSchema* release_arrow_schema();
  ::google::cloud::bigquery::storage::v1::ArrowSchema* mutable_arrow_schema();
  void set_allocated_arrow_schema(::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::ArrowSchema& _internal_arrow_schema() const;
  ::google::cloud::bigquery::storage::v1::ArrowSchema* _internal_mutable_arrow_schema();
  public:
  void unsafe_arena_set_allocated_arrow_schema(
      ::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema);
  ::google::cloud::bigquery::storage::v1::ArrowSchema* unsafe_arena_release_arrow_schema();

  void clear_schema();
  SchemaCase schema_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadSession)
 private:
  class _Internal;
  void set_has_avro_schema();
  void set_has_arrow_schema();

  inline bool has_schema() const;
  inline void clear_has_schema();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::ReadStream > streams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
    ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* table_modifiers_;
    ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* read_options_;
    int64_t estimated_total_bytes_scanned_;
    int data_format_;
    union SchemaUnion {
      constexpr SchemaUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema_;
      ::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema_;
    } schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
};
// -------------------------------------------------------------------

class ReadStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadStream) */ {
 public:
  inline ReadStream() : ReadStream(nullptr) {}
  ~ReadStream() override;
  explicit PROTOBUF_CONSTEXPR ReadStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadStream(const ReadStream& from);
  ReadStream(ReadStream&& from) noexcept
    : ReadStream() {
    *this = ::std::move(from);
  }

  inline ReadStream& operator=(const ReadStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadStream& operator=(ReadStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadStream* internal_default_instance() {
    return reinterpret_cast<const ReadStream*>(
               &_ReadStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadStream& a, ReadStream& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadStream& from) {
    ReadStream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadStream";
  }
  protected:
  explicit ReadStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
};
// -------------------------------------------------------------------

class WriteStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.WriteStream) */ {
 public:
  inline WriteStream() : WriteStream(nullptr) {}
  ~WriteStream() override;
  explicit PROTOBUF_CONSTEXPR WriteStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteStream(const WriteStream& from);
  WriteStream(WriteStream&& from) noexcept
    : WriteStream() {
    *this = ::std::move(from);
  }

  inline WriteStream& operator=(const WriteStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteStream& operator=(WriteStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteStream* internal_default_instance() {
    return reinterpret_cast<const WriteStream*>(
               &_WriteStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteStream& a, WriteStream& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteStream& from) {
    WriteStream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.WriteStream";
  }
  protected:
  explicit WriteStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriteStream_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    WriteStream_Type_TYPE_UNSPECIFIED;
  static constexpr Type COMMITTED =
    WriteStream_Type_COMMITTED;
  static constexpr Type PENDING =
    WriteStream_Type_PENDING;
  static constexpr Type BUFFERED =
    WriteStream_Type_BUFFERED;
  static inline bool Type_IsValid(int value) {
    return WriteStream_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    WriteStream_Type_Type_MIN;
  static constexpr Type Type_MAX =
    WriteStream_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    WriteStream_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return WriteStream_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return WriteStream_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return WriteStream_Type_Parse(name, value);
  }

  typedef WriteStream_WriteMode WriteMode;
  static constexpr WriteMode WRITE_MODE_UNSPECIFIED =
    WriteStream_WriteMode_WRITE_MODE_UNSPECIFIED;
  static constexpr WriteMode INSERT =
    WriteStream_WriteMode_INSERT;
  static inline bool WriteMode_IsValid(int value) {
    return WriteStream_WriteMode_IsValid(value);
  }
  static constexpr WriteMode WriteMode_MIN =
    WriteStream_WriteMode_WriteMode_MIN;
  static constexpr WriteMode WriteMode_MAX =
    WriteStream_WriteMode_WriteMode_MAX;
  static constexpr int WriteMode_ARRAYSIZE =
    WriteStream_WriteMode_WriteMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WriteMode_descriptor() {
    return WriteStream_WriteMode_descriptor();
  }
  template<typename T>
  static inline const std::string& WriteMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WriteMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WriteMode_Name.");
    return WriteStream_WriteMode_Name(enum_t_value);
  }
  static inline bool WriteMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WriteMode* value) {
    return WriteStream_WriteMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 8,
    kCreateTimeFieldNumber = 3,
    kCommitTimeFieldNumber = 4,
    kTableSchemaFieldNumber = 5,
    kTypeFieldNumber = 2,
    kWriteModeFieldNumber = 7,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string location = 8 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp commit_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_commit_time() const;
  private:
  bool _internal_has_commit_time() const;
  public:
  void clear_commit_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& commit_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_commit_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commit_time();
  void set_allocated_commit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commit_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_commit_time();
  public:
  void unsafe_arena_set_allocated_commit_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_commit_time();

  // .google.cloud.bigquery.storage.v1.TableSchema table_schema = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_table_schema() const;
  private:
  bool _internal_has_table_schema() const;
  public:
  void clear_table_schema();
  const ::google::cloud::bigquery::storage::v1::TableSchema& table_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::TableSchema* release_table_schema();
  ::google::cloud::bigquery::storage::v1::TableSchema* mutable_table_schema();
  void set_allocated_table_schema(::google::cloud::bigquery::storage::v1::TableSchema* table_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::TableSchema& _internal_table_schema() const;
  ::google::cloud::bigquery::storage::v1::TableSchema* _internal_mutable_table_schema();
  public:
  void unsafe_arena_set_allocated_table_schema(
      ::google::cloud::bigquery::storage::v1::TableSchema* table_schema);
  ::google::cloud::bigquery::storage::v1::TableSchema* unsafe_arena_release_table_schema();

  // .google.cloud.bigquery.storage.v1.WriteStream.Type type = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_type();
  ::google::cloud::bigquery::storage::v1::WriteStream_Type type() const;
  void set_type(::google::cloud::bigquery::storage::v1::WriteStream_Type value);
  private:
  ::google::cloud::bigquery::storage::v1::WriteStream_Type _internal_type() const;
  void _internal_set_type(::google::cloud::bigquery::storage::v1::WriteStream_Type value);
  public:

  // .google.cloud.bigquery.storage.v1.WriteStream.WriteMode write_mode = 7 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_write_mode();
  ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode write_mode() const;
  void set_write_mode(::google::cloud::bigquery::storage::v1::WriteStream_WriteMode value);
  private:
  ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode _internal_write_mode() const;
  void _internal_set_write_mode(::google::cloud::bigquery::storage::v1::WriteStream_WriteMode value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.WriteStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time_;
    ::google::cloud::bigquery::storage::v1::TableSchema* table_schema_;
    int type_;
    int write_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadSession_TableModifiers

// .google.protobuf.Timestamp snapshot_time = 1;
inline bool ReadSession_TableModifiers::_internal_has_snapshot_time() const {
  return this != internal_default_instance() && _impl_.snapshot_time_ != nullptr;
}
inline bool ReadSession_TableModifiers::has_snapshot_time() const {
  return _internal_has_snapshot_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadSession_TableModifiers::_internal_snapshot_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.snapshot_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadSession_TableModifiers::snapshot_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers.snapshot_time)
  return _internal_snapshot_time();
}
inline void ReadSession_TableModifiers::unsafe_arena_set_allocated_snapshot_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* snapshot_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snapshot_time_);
  }
  _impl_.snapshot_time_ = snapshot_time;
  if (snapshot_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers.snapshot_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession_TableModifiers::release_snapshot_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.snapshot_time_;
  _impl_.snapshot_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession_TableModifiers::unsafe_arena_release_snapshot_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers.snapshot_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.snapshot_time_;
  _impl_.snapshot_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession_TableModifiers::_internal_mutable_snapshot_time() {
  
  if (_impl_.snapshot_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.snapshot_time_ = p;
  }
  return _impl_.snapshot_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession_TableModifiers::mutable_snapshot_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_snapshot_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers.snapshot_time)
  return _msg;
}
inline void ReadSession_TableModifiers::set_allocated_snapshot_time(::PROTOBUF_NAMESPACE_ID::Timestamp* snapshot_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.snapshot_time_);
  }
  if (snapshot_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_time));
    if (message_arena != submessage_arena) {
      snapshot_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.snapshot_time_ = snapshot_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.TableModifiers.snapshot_time)
}

// -------------------------------------------------------------------

// ReadSession_TableReadOptions

// repeated string selected_fields = 1;
inline int ReadSession_TableReadOptions::_internal_selected_fields_size() const {
  return _impl_.selected_fields_.size();
}
inline int ReadSession_TableReadOptions::selected_fields_size() const {
  return _internal_selected_fields_size();
}
inline void ReadSession_TableReadOptions::clear_selected_fields() {
  _impl_.selected_fields_.Clear();
}
inline std::string* ReadSession_TableReadOptions::add_selected_fields() {
  std::string* _s = _internal_add_selected_fields();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
  return _s;
}
inline const std::string& ReadSession_TableReadOptions::_internal_selected_fields(int index) const {
  return _impl_.selected_fields_.Get(index);
}
inline const std::string& ReadSession_TableReadOptions::selected_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
  return _internal_selected_fields(index);
}
inline std::string* ReadSession_TableReadOptions::mutable_selected_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
  return _impl_.selected_fields_.Mutable(index);
}
inline void ReadSession_TableReadOptions::set_selected_fields(int index, const std::string& value) {
  _impl_.selected_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::set_selected_fields(int index, std::string&& value) {
  _impl_.selected_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::set_selected_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.selected_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::set_selected_fields(int index, const char* value, size_t size) {
  _impl_.selected_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline std::string* ReadSession_TableReadOptions::_internal_add_selected_fields() {
  return _impl_.selected_fields_.Add();
}
inline void ReadSession_TableReadOptions::add_selected_fields(const std::string& value) {
  _impl_.selected_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::add_selected_fields(std::string&& value) {
  _impl_.selected_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::add_selected_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.selected_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline void ReadSession_TableReadOptions::add_selected_fields(const char* value, size_t size) {
  _impl_.selected_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadSession_TableReadOptions::selected_fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
  return _impl_.selected_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadSession_TableReadOptions::mutable_selected_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.selected_fields)
  return &_impl_.selected_fields_;
}

// string row_restriction = 2;
inline void ReadSession_TableReadOptions::clear_row_restriction() {
  _impl_.row_restriction_.ClearToEmpty();
}
inline const std::string& ReadSession_TableReadOptions::row_restriction() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.row_restriction)
  return _internal_row_restriction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSession_TableReadOptions::set_row_restriction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_restriction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.row_restriction)
}
inline std::string* ReadSession_TableReadOptions::mutable_row_restriction() {
  std::string* _s = _internal_mutable_row_restriction();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.row_restriction)
  return _s;
}
inline const std::string& ReadSession_TableReadOptions::_internal_row_restriction() const {
  return _impl_.row_restriction_.Get();
}
inline void ReadSession_TableReadOptions::_internal_set_row_restriction(const std::string& value) {
  
  _impl_.row_restriction_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadSession_TableReadOptions::_internal_mutable_row_restriction() {
  
  return _impl_.row_restriction_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadSession_TableReadOptions::release_row_restriction() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.row_restriction)
  return _impl_.row_restriction_.Release();
}
inline void ReadSession_TableReadOptions::set_allocated_row_restriction(std::string* row_restriction) {
  if (row_restriction != nullptr) {
    
  } else {
    
  }
  _impl_.row_restriction_.SetAllocated(row_restriction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_restriction_.IsDefault()) {
    _impl_.row_restriction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.row_restriction)
}

// .google.cloud.bigquery.storage.v1.ArrowSerializationOptions arrow_serialization_options = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool ReadSession_TableReadOptions::_internal_has_arrow_serialization_options() const {
  return output_format_serialization_options_case() == kArrowSerializationOptions;
}
inline bool ReadSession_TableReadOptions::has_arrow_serialization_options() const {
  return _internal_has_arrow_serialization_options();
}
inline void ReadSession_TableReadOptions::set_has_arrow_serialization_options() {
  _impl_._oneof_case_[0] = kArrowSerializationOptions;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* ReadSession_TableReadOptions::release_arrow_serialization_options() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.arrow_serialization_options)
  if (_internal_has_arrow_serialization_options()) {
    clear_has_output_format_serialization_options();
    ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* temp = _impl_.output_format_serialization_options_.arrow_serialization_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.output_format_serialization_options_.arrow_serialization_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions& ReadSession_TableReadOptions::_internal_arrow_serialization_options() const {
  return _internal_has_arrow_serialization_options()
      ? *_impl_.output_format_serialization_options_.arrow_serialization_options_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions&>(::google::cloud::bigquery::storage::v1::_ArrowSerializationOptions_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions& ReadSession_TableReadOptions::arrow_serialization_options() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.arrow_serialization_options)
  return _internal_arrow_serialization_options();
}
inline ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* ReadSession_TableReadOptions::unsafe_arena_release_arrow_serialization_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.arrow_serialization_options)
  if (_internal_has_arrow_serialization_options()) {
    clear_has_output_format_serialization_options();
    ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* temp = _impl_.output_format_serialization_options_.arrow_serialization_options_;
    _impl_.output_format_serialization_options_.arrow_serialization_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadSession_TableReadOptions::unsafe_arena_set_allocated_arrow_serialization_options(::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* arrow_serialization_options) {
  clear_output_format_serialization_options();
  if (arrow_serialization_options) {
    set_has_arrow_serialization_options();
    _impl_.output_format_serialization_options_.arrow_serialization_options_ = arrow_serialization_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.arrow_serialization_options)
}
inline ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* ReadSession_TableReadOptions::_internal_mutable_arrow_serialization_options() {
  if (!_internal_has_arrow_serialization_options()) {
    clear_output_format_serialization_options();
    set_has_arrow_serialization_options();
    _impl_.output_format_serialization_options_.arrow_serialization_options_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions >(GetArenaForAllocation());
  }
  return _impl_.output_format_serialization_options_.arrow_serialization_options_;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* ReadSession_TableReadOptions::mutable_arrow_serialization_options() {
  ::google::cloud::bigquery::storage::v1::ArrowSerializationOptions* _msg = _internal_mutable_arrow_serialization_options();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.arrow_serialization_options)
  return _msg;
}

// .google.cloud.bigquery.storage.v1.AvroSerializationOptions avro_serialization_options = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool ReadSession_TableReadOptions::_internal_has_avro_serialization_options() const {
  return output_format_serialization_options_case() == kAvroSerializationOptions;
}
inline bool ReadSession_TableReadOptions::has_avro_serialization_options() const {
  return _internal_has_avro_serialization_options();
}
inline void ReadSession_TableReadOptions::set_has_avro_serialization_options() {
  _impl_._oneof_case_[0] = kAvroSerializationOptions;
}
inline ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* ReadSession_TableReadOptions::release_avro_serialization_options() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.avro_serialization_options)
  if (_internal_has_avro_serialization_options()) {
    clear_has_output_format_serialization_options();
    ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* temp = _impl_.output_format_serialization_options_.avro_serialization_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.output_format_serialization_options_.avro_serialization_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AvroSerializationOptions& ReadSession_TableReadOptions::_internal_avro_serialization_options() const {
  return _internal_has_avro_serialization_options()
      ? *_impl_.output_format_serialization_options_.avro_serialization_options_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AvroSerializationOptions&>(::google::cloud::bigquery::storage::v1::_AvroSerializationOptions_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AvroSerializationOptions& ReadSession_TableReadOptions::avro_serialization_options() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.avro_serialization_options)
  return _internal_avro_serialization_options();
}
inline ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* ReadSession_TableReadOptions::unsafe_arena_release_avro_serialization_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.avro_serialization_options)
  if (_internal_has_avro_serialization_options()) {
    clear_has_output_format_serialization_options();
    ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* temp = _impl_.output_format_serialization_options_.avro_serialization_options_;
    _impl_.output_format_serialization_options_.avro_serialization_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadSession_TableReadOptions::unsafe_arena_set_allocated_avro_serialization_options(::google::cloud::bigquery::storage::v1::AvroSerializationOptions* avro_serialization_options) {
  clear_output_format_serialization_options();
  if (avro_serialization_options) {
    set_has_avro_serialization_options();
    _impl_.output_format_serialization_options_.avro_serialization_options_ = avro_serialization_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.avro_serialization_options)
}
inline ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* ReadSession_TableReadOptions::_internal_mutable_avro_serialization_options() {
  if (!_internal_has_avro_serialization_options()) {
    clear_output_format_serialization_options();
    set_has_avro_serialization_options();
    _impl_.output_format_serialization_options_.avro_serialization_options_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AvroSerializationOptions >(GetArenaForAllocation());
  }
  return _impl_.output_format_serialization_options_.avro_serialization_options_;
}
inline ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* ReadSession_TableReadOptions::mutable_avro_serialization_options() {
  ::google::cloud::bigquery::storage::v1::AvroSerializationOptions* _msg = _internal_mutable_avro_serialization_options();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions.avro_serialization_options)
  return _msg;
}

inline bool ReadSession_TableReadOptions::has_output_format_serialization_options() const {
  return output_format_serialization_options_case() != OUTPUT_FORMAT_SERIALIZATION_OPTIONS_NOT_SET;
}
inline void ReadSession_TableReadOptions::clear_has_output_format_serialization_options() {
  _impl_._oneof_case_[0] = OUTPUT_FORMAT_SERIALIZATION_OPTIONS_NOT_SET;
}
inline ReadSession_TableReadOptions::OutputFormatSerializationOptionsCase ReadSession_TableReadOptions::output_format_serialization_options_case() const {
  return ReadSession_TableReadOptions::OutputFormatSerializationOptionsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadSession

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ReadSession::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReadSession::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSession::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.name)
}
inline std::string* ReadSession::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.name)
  return _s;
}
inline const std::string& ReadSession::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReadSession::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadSession::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadSession::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.name)
  return _impl_.name_.Release();
}
inline void ReadSession::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.name)
}

// .google.protobuf.Timestamp expire_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ReadSession::_internal_has_expire_time() const {
  return this != internal_default_instance() && _impl_.expire_time_ != nullptr;
}
inline bool ReadSession::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadSession::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ReadSession::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.expire_time)
  return _internal_expire_time();
}
inline void ReadSession::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession::release_expire_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.expire_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession::_internal_mutable_expire_time() {
  
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ReadSession::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.expire_time)
  return _msg;
}
inline void ReadSession::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.expire_time)
}

// .google.cloud.bigquery.storage.v1.DataFormat data_format = 3 [(.google.api.field_behavior) = IMMUTABLE];
inline void ReadSession::clear_data_format() {
  _impl_.data_format_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::DataFormat ReadSession::_internal_data_format() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::DataFormat >(_impl_.data_format_);
}
inline ::google::cloud::bigquery::storage::v1::DataFormat ReadSession::data_format() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.data_format)
  return _internal_data_format();
}
inline void ReadSession::_internal_set_data_format(::google::cloud::bigquery::storage::v1::DataFormat value) {
  
  _impl_.data_format_ = value;
}
inline void ReadSession::set_data_format(::google::cloud::bigquery::storage::v1::DataFormat value) {
  _internal_set_data_format(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.data_format)
}

// .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ReadSession::_internal_has_avro_schema() const {
  return schema_case() == kAvroSchema;
}
inline bool ReadSession::has_avro_schema() const {
  return _internal_has_avro_schema();
}
inline void ReadSession::set_has_avro_schema() {
  _impl_._oneof_case_[0] = kAvroSchema;
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadSession::release_avro_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.avro_schema)
  if (_internal_has_avro_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::AvroSchema* temp = _impl_.schema_.avro_schema_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schema_.avro_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AvroSchema& ReadSession::_internal_avro_schema() const {
  return _internal_has_avro_schema()
      ? *_impl_.schema_.avro_schema_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AvroSchema&>(::google::cloud::bigquery::storage::v1::_AvroSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AvroSchema& ReadSession::avro_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.avro_schema)
  return _internal_avro_schema();
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadSession::unsafe_arena_release_avro_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadSession.avro_schema)
  if (_internal_has_avro_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::AvroSchema* temp = _impl_.schema_.avro_schema_;
    _impl_.schema_.avro_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadSession::unsafe_arena_set_allocated_avro_schema(::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema) {
  clear_schema();
  if (avro_schema) {
    set_has_avro_schema();
    _impl_.schema_.avro_schema_ = avro_schema;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.avro_schema)
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadSession::_internal_mutable_avro_schema() {
  if (!_internal_has_avro_schema()) {
    clear_schema();
    set_has_avro_schema();
    _impl_.schema_.avro_schema_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AvroSchema >(GetArenaForAllocation());
  }
  return _impl_.schema_.avro_schema_;
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadSession::mutable_avro_schema() {
  ::google::cloud::bigquery::storage::v1::AvroSchema* _msg = _internal_mutable_avro_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.avro_schema)
  return _msg;
}

// .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ReadSession::_internal_has_arrow_schema() const {
  return schema_case() == kArrowSchema;
}
inline bool ReadSession::has_arrow_schema() const {
  return _internal_has_arrow_schema();
}
inline void ReadSession::set_has_arrow_schema() {
  _impl_._oneof_case_[0] = kArrowSchema;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadSession::release_arrow_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.arrow_schema)
  if (_internal_has_arrow_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::ArrowSchema* temp = _impl_.schema_.arrow_schema_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schema_.arrow_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSchema& ReadSession::_internal_arrow_schema() const {
  return _internal_has_arrow_schema()
      ? *_impl_.schema_.arrow_schema_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::ArrowSchema&>(::google::cloud::bigquery::storage::v1::_ArrowSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSchema& ReadSession::arrow_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.arrow_schema)
  return _internal_arrow_schema();
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadSession::unsafe_arena_release_arrow_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadSession.arrow_schema)
  if (_internal_has_arrow_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::ArrowSchema* temp = _impl_.schema_.arrow_schema_;
    _impl_.schema_.arrow_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadSession::unsafe_arena_set_allocated_arrow_schema(::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema) {
  clear_schema();
  if (arrow_schema) {
    set_has_arrow_schema();
    _impl_.schema_.arrow_schema_ = arrow_schema;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.arrow_schema)
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadSession::_internal_mutable_arrow_schema() {
  if (!_internal_has_arrow_schema()) {
    clear_schema();
    set_has_arrow_schema();
    _impl_.schema_.arrow_schema_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ArrowSchema >(GetArenaForAllocation());
  }
  return _impl_.schema_.arrow_schema_;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadSession::mutable_arrow_schema() {
  ::google::cloud::bigquery::storage::v1::ArrowSchema* _msg = _internal_mutable_arrow_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.arrow_schema)
  return _msg;
}

// string table = 6 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void ReadSession::clear_table() {
  _impl_.table_.ClearToEmpty();
}
inline const std::string& ReadSession::table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.table)
  return _internal_table();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSession::set_table(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.table)
}
inline std::string* ReadSession::mutable_table() {
  std::string* _s = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.table)
  return _s;
}
inline const std::string& ReadSession::_internal_table() const {
  return _impl_.table_.Get();
}
inline void ReadSession::_internal_set_table(const std::string& value) {
  
  _impl_.table_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadSession::_internal_mutable_table() {
  
  return _impl_.table_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadSession::release_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.table)
  return _impl_.table_.Release();
}
inline void ReadSession::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  _impl_.table_.SetAllocated(table, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_.IsDefault()) {
    _impl_.table_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.table)
}

// .google.cloud.bigquery.storage.v1.ReadSession.TableModifiers table_modifiers = 7 [(.google.api.field_behavior) = OPTIONAL];
inline bool ReadSession::_internal_has_table_modifiers() const {
  return this != internal_default_instance() && _impl_.table_modifiers_ != nullptr;
}
inline bool ReadSession::has_table_modifiers() const {
  return _internal_has_table_modifiers();
}
inline void ReadSession::clear_table_modifiers() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_modifiers_ != nullptr) {
    delete _impl_.table_modifiers_;
  }
  _impl_.table_modifiers_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers& ReadSession::_internal_table_modifiers() const {
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* p = _impl_.table_modifiers_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers&>(
      ::google::cloud::bigquery::storage::v1::_ReadSession_TableModifiers_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers& ReadSession::table_modifiers() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.table_modifiers)
  return _internal_table_modifiers();
}
inline void ReadSession::unsafe_arena_set_allocated_table_modifiers(
    ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* table_modifiers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_modifiers_);
  }
  _impl_.table_modifiers_ = table_modifiers;
  if (table_modifiers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.table_modifiers)
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* ReadSession::release_table_modifiers() {
  
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* temp = _impl_.table_modifiers_;
  _impl_.table_modifiers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* ReadSession::unsafe_arena_release_table_modifiers() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.table_modifiers)
  
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* temp = _impl_.table_modifiers_;
  _impl_.table_modifiers_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* ReadSession::_internal_mutable_table_modifiers() {
  
  if (_impl_.table_modifiers_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers>(GetArenaForAllocation());
    _impl_.table_modifiers_ = p;
  }
  return _impl_.table_modifiers_;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* ReadSession::mutable_table_modifiers() {
  ::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* _msg = _internal_mutable_table_modifiers();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.table_modifiers)
  return _msg;
}
inline void ReadSession::set_allocated_table_modifiers(::google::cloud::bigquery::storage::v1::ReadSession_TableModifiers* table_modifiers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_modifiers_;
  }
  if (table_modifiers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_modifiers);
    if (message_arena != submessage_arena) {
      table_modifiers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_modifiers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_modifiers_ = table_modifiers;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.table_modifiers)
}

// .google.cloud.bigquery.storage.v1.ReadSession.TableReadOptions read_options = 8 [(.google.api.field_behavior) = OPTIONAL];
inline bool ReadSession::_internal_has_read_options() const {
  return this != internal_default_instance() && _impl_.read_options_ != nullptr;
}
inline bool ReadSession::has_read_options() const {
  return _internal_has_read_options();
}
inline void ReadSession::clear_read_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_options_ != nullptr) {
    delete _impl_.read_options_;
  }
  _impl_.read_options_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions& ReadSession::_internal_read_options() const {
  const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* p = _impl_.read_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions&>(
      ::google::cloud::bigquery::storage::v1::_ReadSession_TableReadOptions_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions& ReadSession::read_options() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.read_options)
  return _internal_read_options();
}
inline void ReadSession::unsafe_arena_set_allocated_read_options(
    ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* read_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_options_);
  }
  _impl_.read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.read_options)
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* ReadSession::release_read_options() {
  
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* temp = _impl_.read_options_;
  _impl_.read_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* ReadSession::unsafe_arena_release_read_options() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.read_options)
  
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* temp = _impl_.read_options_;
  _impl_.read_options_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* ReadSession::_internal_mutable_read_options() {
  
  if (_impl_.read_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions>(GetArenaForAllocation());
    _impl_.read_options_ = p;
  }
  return _impl_.read_options_;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* ReadSession::mutable_read_options() {
  ::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* _msg = _internal_mutable_read_options();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.read_options)
  return _msg;
}
inline void ReadSession::set_allocated_read_options(::google::cloud::bigquery::storage::v1::ReadSession_TableReadOptions* read_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.read_options_;
  }
  if (read_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(read_options);
    if (message_arena != submessage_arena) {
      read_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_options_ = read_options;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.read_options)
}

// repeated .google.cloud.bigquery.storage.v1.ReadStream streams = 10 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int ReadSession::_internal_streams_size() const {
  return _impl_.streams_.size();
}
inline int ReadSession::streams_size() const {
  return _internal_streams_size();
}
inline void ReadSession::clear_streams() {
  _impl_.streams_.Clear();
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* ReadSession::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.streams)
  return _impl_.streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::ReadStream >*
ReadSession::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.ReadSession.streams)
  return &_impl_.streams_;
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& ReadSession::_internal_streams(int index) const {
  return _impl_.streams_.Get(index);
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& ReadSession::streams(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.streams)
  return _internal_streams(index);
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* ReadSession::_internal_add_streams() {
  return _impl_.streams_.Add();
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* ReadSession::add_streams() {
  ::google::cloud::bigquery::storage::v1::ReadStream* _add = _internal_add_streams();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.ReadSession.streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::ReadStream >&
ReadSession::streams() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.ReadSession.streams)
  return _impl_.streams_;
}

// int64 estimated_total_bytes_scanned = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ReadSession::clear_estimated_total_bytes_scanned() {
  _impl_.estimated_total_bytes_scanned_ = int64_t{0};
}
inline int64_t ReadSession::_internal_estimated_total_bytes_scanned() const {
  return _impl_.estimated_total_bytes_scanned_;
}
inline int64_t ReadSession::estimated_total_bytes_scanned() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.estimated_total_bytes_scanned)
  return _internal_estimated_total_bytes_scanned();
}
inline void ReadSession::_internal_set_estimated_total_bytes_scanned(int64_t value) {
  
  _impl_.estimated_total_bytes_scanned_ = value;
}
inline void ReadSession::set_estimated_total_bytes_scanned(int64_t value) {
  _internal_set_estimated_total_bytes_scanned(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.estimated_total_bytes_scanned)
}

// string trace_id = 13 [(.google.api.field_behavior) = OPTIONAL];
inline void ReadSession::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& ReadSession::trace_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadSession.trace_id)
  return _internal_trace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSession::set_trace_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trace_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadSession.trace_id)
}
inline std::string* ReadSession::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadSession.trace_id)
  return _s;
}
inline const std::string& ReadSession::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void ReadSession::_internal_set_trace_id(const std::string& value) {
  
  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadSession::_internal_mutable_trace_id() {
  
  return _impl_.trace_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadSession::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadSession.trace_id)
  return _impl_.trace_id_.Release();
}
inline void ReadSession::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  _impl_.trace_id_.SetAllocated(trace_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trace_id_.IsDefault()) {
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadSession.trace_id)
}

inline bool ReadSession::has_schema() const {
  return schema_case() != SCHEMA_NOT_SET;
}
inline void ReadSession::clear_has_schema() {
  _impl_._oneof_case_[0] = SCHEMA_NOT_SET;
}
inline ReadSession::SchemaCase ReadSession::schema_case() const {
  return ReadSession::SchemaCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadStream

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ReadStream::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReadStream::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadStream.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadStream::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadStream.name)
}
inline std::string* ReadStream::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadStream.name)
  return _s;
}
inline const std::string& ReadStream::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReadStream::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadStream::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadStream::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadStream.name)
  return _impl_.name_.Release();
}
inline void ReadStream::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadStream.name)
}

// -------------------------------------------------------------------

// WriteStream

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WriteStream::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WriteStream::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteStream::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.WriteStream.name)
}
inline std::string* WriteStream::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.WriteStream.name)
  return _s;
}
inline const std::string& WriteStream::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WriteStream::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteStream::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteStream::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.WriteStream.name)
  return _impl_.name_.Release();
}
inline void WriteStream::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.name)
}

// .google.cloud.bigquery.storage.v1.WriteStream.Type type = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void WriteStream::clear_type() {
  _impl_.type_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::WriteStream_Type WriteStream::_internal_type() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::WriteStream_Type >(_impl_.type_);
}
inline ::google::cloud::bigquery::storage::v1::WriteStream_Type WriteStream::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.type)
  return _internal_type();
}
inline void WriteStream::_internal_set_type(::google::cloud::bigquery::storage::v1::WriteStream_Type value) {
  
  _impl_.type_ = value;
}
inline void WriteStream::set_type(::google::cloud::bigquery::storage::v1::WriteStream_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.WriteStream.type)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool WriteStream::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool WriteStream::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WriteStream::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WriteStream::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.create_time)
  return _internal_create_time();
}
inline void WriteStream::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.WriteStream.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.WriteStream.create_time)
  return _msg;
}
inline void WriteStream::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.create_time)
}

// .google.protobuf.Timestamp commit_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool WriteStream::_internal_has_commit_time() const {
  return this != internal_default_instance() && _impl_.commit_time_ != nullptr;
}
inline bool WriteStream::has_commit_time() const {
  return _internal_has_commit_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WriteStream::_internal_commit_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.commit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WriteStream::commit_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.commit_time)
  return _internal_commit_time();
}
inline void WriteStream::unsafe_arena_set_allocated_commit_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_time_);
  }
  _impl_.commit_time_ = commit_time;
  if (commit_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.commit_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::release_commit_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_time_;
  _impl_.commit_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::unsafe_arena_release_commit_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.WriteStream.commit_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_time_;
  _impl_.commit_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::_internal_mutable_commit_time() {
  
  if (_impl_.commit_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.commit_time_ = p;
  }
  return _impl_.commit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WriteStream::mutable_commit_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_commit_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.WriteStream.commit_time)
  return _msg;
}
inline void WriteStream::set_allocated_commit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_time_);
  }
  if (commit_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_time));
    if (message_arena != submessage_arena) {
      commit_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commit_time_ = commit_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.commit_time)
}

// .google.cloud.bigquery.storage.v1.TableSchema table_schema = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool WriteStream::_internal_has_table_schema() const {
  return this != internal_default_instance() && _impl_.table_schema_ != nullptr;
}
inline bool WriteStream::has_table_schema() const {
  return _internal_has_table_schema();
}
inline const ::google::cloud::bigquery::storage::v1::TableSchema& WriteStream::_internal_table_schema() const {
  const ::google::cloud::bigquery::storage::v1::TableSchema* p = _impl_.table_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::TableSchema&>(
      ::google::cloud::bigquery::storage::v1::_TableSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::TableSchema& WriteStream::table_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.table_schema)
  return _internal_table_schema();
}
inline void WriteStream::unsafe_arena_set_allocated_table_schema(
    ::google::cloud::bigquery::storage::v1::TableSchema* table_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  _impl_.table_schema_ = table_schema;
  if (table_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.table_schema)
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* WriteStream::release_table_schema() {
  
  ::google::cloud::bigquery::storage::v1::TableSchema* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* WriteStream::unsafe_arena_release_table_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.WriteStream.table_schema)
  
  ::google::cloud::bigquery::storage::v1::TableSchema* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* WriteStream::_internal_mutable_table_schema() {
  
  if (_impl_.table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::TableSchema>(GetArenaForAllocation());
    _impl_.table_schema_ = p;
  }
  return _impl_.table_schema_;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* WriteStream::mutable_table_schema() {
  ::google::cloud::bigquery::storage::v1::TableSchema* _msg = _internal_mutable_table_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.WriteStream.table_schema)
  return _msg;
}
inline void WriteStream::set_allocated_table_schema(::google::cloud::bigquery::storage::v1::TableSchema* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema));
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.table_schema)
}

// .google.cloud.bigquery.storage.v1.WriteStream.WriteMode write_mode = 7 [(.google.api.field_behavior) = IMMUTABLE];
inline void WriteStream::clear_write_mode() {
  _impl_.write_mode_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode WriteStream::_internal_write_mode() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode >(_impl_.write_mode_);
}
inline ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode WriteStream::write_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.write_mode)
  return _internal_write_mode();
}
inline void WriteStream::_internal_set_write_mode(::google::cloud::bigquery::storage::v1::WriteStream_WriteMode value) {
  
  _impl_.write_mode_ = value;
}
inline void WriteStream::set_write_mode(::google::cloud::bigquery::storage::v1::WriteStream_WriteMode value) {
  _internal_set_write_mode(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.WriteStream.write_mode)
}

// string location = 8 [(.google.api.field_behavior) = IMMUTABLE];
inline void WriteStream::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& WriteStream::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.WriteStream.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteStream::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.WriteStream.location)
}
inline std::string* WriteStream::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.WriteStream.location)
  return _s;
}
inline const std::string& WriteStream::_internal_location() const {
  return _impl_.location_.Get();
}
inline void WriteStream::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteStream::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteStream::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.WriteStream.location)
  return _impl_.location_.Release();
}
inline void WriteStream::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.WriteStream.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::WriteStream_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::WriteStream_Type>() {
  return ::google::cloud::bigquery::storage::v1::WriteStream_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode>() {
  return ::google::cloud::bigquery::storage::v1::WriteStream_WriteMode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::DataFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::DataFormat>() {
  return ::google::cloud::bigquery::storage::v1::DataFormat_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::WriteStreamView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::WriteStreamView>() {
  return ::google::cloud::bigquery::storage::v1::WriteStreamView_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto
