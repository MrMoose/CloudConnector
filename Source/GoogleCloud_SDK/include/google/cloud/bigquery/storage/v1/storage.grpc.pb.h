// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/storage/v1/storage.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto__INCLUDED

#include "google/cloud/bigquery/storage/v1/storage.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

// BigQuery Read API.
//
// The Read API can be used to read data from BigQuery.
class BigQueryRead final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.bigquery.storage.v1.BigQueryRead";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new read session. A read session divides the contents of a
    // BigQuery table into one or more streams, which can then be used to read
    // data from the table. The read session also specifies properties of the
    // data to be read, such as a list of columns or a push-down filter describing
    // the rows to be returned.
    //
    // A particular row can be read by at most one stream. When the caller has
    // reached the end of each stream in the session, then all the data in the
    // table has been read.
    //
    // Data is assigned to each stream such that roughly the same number of
    // rows can be read from each stream. Because the server-side unit for
    // assigning data is collections of rows, the API does not guarantee that
    // each stream will return the same number or rows. Additionally, the
    // limits are enforced based on the number of pre-filtered rows, so some
    // filters can lead to lopsided assignments.
    //
    // Read sessions automatically expire 24 hours after they are created and do
    // not require manual clean-up by the caller.
    virtual ::grpc::Status CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::google::cloud::bigquery::storage::v1::ReadSession* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>> AsyncCreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>>(AsyncCreateReadSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>> PrepareAsyncCreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>>(PrepareAsyncCreateReadSessionRaw(context, request, cq));
    }
    // Reads rows from the stream in the format prescribed by the ReadSession.
    // Each response contains one or more table rows, up to a maximum of 100 MiB
    // per response; read requests which attempt to read individual rows larger
    // than 100 MiB will fail.
    //
    // Each request also returns a set of stream statistics reflecting the current
    // state of the stream.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(ReadRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> AsyncReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(AsyncReadRowsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> PrepareAsyncReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(PrepareAsyncReadRowsRaw(context, request, cq));
    }
    // Splits a given `ReadStream` into two `ReadStream` objects. These
    // `ReadStream` objects are referred to as the primary and the residual
    // streams of the split. The original `ReadStream` can still be read from in
    // the same manner as before. Both of the returned `ReadStream` objects can
    // also be read from, and the rows returned by both child streams will be
    // the same as the rows read from the original stream.
    //
    // Moreover, the two child streams will be allocated back-to-back in the
    // original `ReadStream`. Concretely, it is guaranteed that for streams
    // original, primary, and residual, that original[0-j] = primary[0-j] and
    // original[j-n] = residual[0-m] once the streams have been read to
    // completion.
    virtual ::grpc::Status SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>> AsyncSplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>>(AsyncSplitReadStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>> PrepareAsyncSplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>>(PrepareAsyncSplitReadStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a new read session. A read session divides the contents of a
      // BigQuery table into one or more streams, which can then be used to read
      // data from the table. The read session also specifies properties of the
      // data to be read, such as a list of columns or a push-down filter describing
      // the rows to be returned.
      //
      // A particular row can be read by at most one stream. When the caller has
      // reached the end of each stream in the session, then all the data in the
      // table has been read.
      //
      // Data is assigned to each stream such that roughly the same number of
      // rows can be read from each stream. Because the server-side unit for
      // assigning data is collections of rows, the API does not guarantee that
      // each stream will return the same number or rows. Additionally, the
      // limits are enforced based on the number of pre-filtered rows, so some
      // filters can lead to lopsided assignments.
      //
      // Read sessions automatically expire 24 hours after they are created and do
      // not require manual clean-up by the caller.
      virtual void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Reads rows from the stream in the format prescribed by the ReadSession.
      // Each response contains one or more table rows, up to a maximum of 100 MiB
      // per response; read requests which attempt to read individual rows larger
      // than 100 MiB will fail.
      //
      // Each request also returns a set of stream statistics reflecting the current
      // state of the stream.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::ClientReadReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* reactor) = 0;
      #else
      virtual void ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::experimental::ClientReadReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* reactor) = 0;
      #endif
      // Splits a given `ReadStream` into two `ReadStream` objects. These
      // `ReadStream` objects are referred to as the primary and the residual
      // streams of the split. The original `ReadStream` can still be read from in
      // the same manner as before. Both of the returned `ReadStream` objects can
      // also be read from, and the rows returned by both child streams will be
      // the same as the rows read from the original stream.
      //
      // Moreover, the two child streams will be allocated back-to-back in the
      // original `ReadStream`. Concretely, it is guaranteed that for streams
      // original, primary, and residual, that original[0-j] = primary[0-j] and
      // original[j-n] = residual[0-m] once the streams have been read to
      // completion.
      virtual void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>* AsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::ReadSession>* PrepareAsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* ReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* PrepareAsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* AsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* PrepareAsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::google::cloud::bigquery::storage::v1::ReadSession* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>> AsyncCreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>>(AsyncCreateReadSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>> PrepareAsyncCreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>>(PrepareAsyncCreateReadSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(ReadRowsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> AsyncReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(AsyncReadRowsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>> PrepareAsyncReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>>(PrepareAsyncReadRowsRaw(context, request, cq));
    }
    ::grpc::Status SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>> AsyncSplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>>(AsyncSplitReadStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>> PrepareAsyncSplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>>(PrepareAsyncSplitReadStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateReadSession(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::ClientReadReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* reactor) override;
      #else
      void ReadRows(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::experimental::ClientReadReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* reactor) override;
      #endif
      void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SplitReadStream(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>* AsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::ReadSession>* PrepareAsyncCreateReadSessionRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* ReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* PrepareAsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* AsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* PrepareAsyncSplitReadStreamRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateReadSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadRows_;
    const ::grpc::internal::RpcMethod rpcmethod_SplitReadStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new read session. A read session divides the contents of a
    // BigQuery table into one or more streams, which can then be used to read
    // data from the table. The read session also specifies properties of the
    // data to be read, such as a list of columns or a push-down filter describing
    // the rows to be returned.
    //
    // A particular row can be read by at most one stream. When the caller has
    // reached the end of each stream in the session, then all the data in the
    // table has been read.
    //
    // Data is assigned to each stream such that roughly the same number of
    // rows can be read from each stream. Because the server-side unit for
    // assigning data is collections of rows, the API does not guarantee that
    // each stream will return the same number or rows. Additionally, the
    // limits are enforced based on the number of pre-filtered rows, so some
    // filters can lead to lopsided assignments.
    //
    // Read sessions automatically expire 24 hours after they are created and do
    // not require manual clean-up by the caller.
    virtual ::grpc::Status CreateReadSession(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response);
    // Reads rows from the stream in the format prescribed by the ReadSession.
    // Each response contains one or more table rows, up to a maximum of 100 MiB
    // per response; read requests which attempt to read individual rows larger
    // than 100 MiB will fail.
    //
    // Each request also returns a set of stream statistics reflecting the current
    // state of the stream.
    virtual ::grpc::Status ReadRows(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* writer);
    // Splits a given `ReadStream` into two `ReadStream` objects. These
    // `ReadStream` objects are referred to as the primary and the residual
    // streams of the split. The original `ReadStream` can still be read from in
    // the same manner as before. Both of the returned `ReadStream` objects can
    // also be read from, and the rows returned by both child streams will be
    // the same as the rows read from the original stream.
    //
    // Moreover, the two child streams will be allocated back-to-back in the
    // original `ReadStream`. Concretely, it is guaranteed that for streams
    // original, primary, and residual, that original[0-j] = primary[0-j] and
    // original[j-n] = residual[0-m] once the streams have been read to
    // completion.
    virtual ::grpc::Status SplitReadStream(::grpc::ServerContext* context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateReadSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReadSession(::grpc::ServerContext* context, ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::storage::v1::ReadSession>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadRows() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRows(::grpc::ServerContext* context, ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request, ::grpc::ServerAsyncWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SplitReadStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitReadStream(::grpc::ServerContext* context, ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateReadSession<WithAsyncMethod_ReadRows<WithAsyncMethod_SplitReadStream<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateReadSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* request, ::google::cloud::bigquery::storage::v1::ReadSession* response) { return this->CreateReadSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateReadSession(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateReadSession(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateReadSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadRows() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::cloud::bigquery::storage::v1::ReadRowsRequest, ::google::cloud::bigquery::storage::v1::ReadRowsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* request) { return this->ReadRows(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* ReadRows(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* ReadRows(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SplitReadStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* request, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* response) { return this->SplitReadStream(context, request, response); }));}
    void SetMessageAllocatorFor_SplitReadStream(
        ::grpc::experimental::MessageAllocator< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SplitReadStream(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SplitReadStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateReadSession<ExperimentalWithCallbackMethod_ReadRows<ExperimentalWithCallbackMethod_SplitReadStream<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateReadSession<ExperimentalWithCallbackMethod_ReadRows<ExperimentalWithCallbackMethod_SplitReadStream<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateReadSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadRows() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SplitReadStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateReadSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReadSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadRows() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadRows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SplitReadStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitReadStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateReadSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateReadSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateReadSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateReadSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadRows() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ReadRows(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReadRows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ReadRows(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SplitReadStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SplitReadStream(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SplitReadStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SplitReadStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateReadSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateReadSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, ::google::cloud::bigquery::storage::v1::ReadSession>* streamer) {
                       return this->StreamedCreateReadSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateReadSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateReadSession(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* /*request*/, ::google::cloud::bigquery::storage::v1::ReadSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateReadSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest,::google::cloud::bigquery::storage::v1::ReadSession>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SplitReadStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SplitReadStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* streamer) {
                       return this->StreamedSplitReadStream(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SplitReadStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SplitReadStream(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* /*request*/, ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSplitReadStream(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest,::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateReadSession<WithStreamedUnaryMethod_SplitReadStream<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReadRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReadRows() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::cloud::bigquery::storage::v1::ReadRowsRequest, ::google::cloud::bigquery::storage::v1::ReadRowsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::cloud::bigquery::storage::v1::ReadRowsRequest, ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* streamer) {
                       return this->StreamedReadRows(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReadRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadRows(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::storage::v1::ReadRowsRequest* /*request*/, ::grpc::ServerWriter< ::google::cloud::bigquery::storage::v1::ReadRowsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReadRows(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::cloud::bigquery::storage::v1::ReadRowsRequest,::google::cloud::bigquery::storage::v1::ReadRowsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReadRows<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateReadSession<WithSplitStreamingMethod_ReadRows<WithStreamedUnaryMethod_SplitReadStream<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto__INCLUDED
