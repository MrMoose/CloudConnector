// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class ProtoRows;
struct ProtoRowsDefaultTypeInternal;
extern ProtoRowsDefaultTypeInternal _ProtoRows_default_instance_;
class ProtoSchema;
struct ProtoSchemaDefaultTypeInternal;
extern ProtoSchemaDefaultTypeInternal _ProtoSchema_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::storage::v1::ProtoRows* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ProtoRows>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ProtoSchema* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ProtoSchema>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

// ===================================================================

class ProtoSchema PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ProtoSchema) */ {
 public:
  inline ProtoSchema() : ProtoSchema(nullptr) {}
  virtual ~ProtoSchema();
  explicit constexpr ProtoSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoSchema(const ProtoSchema& from);
  ProtoSchema(ProtoSchema&& from) noexcept
    : ProtoSchema() {
    *this = ::std::move(from);
  }

  inline ProtoSchema& operator=(const ProtoSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoSchema& operator=(ProtoSchema&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoSchema* internal_default_instance() {
    return reinterpret_cast<const ProtoSchema*>(
               &_ProtoSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoSchema& a, ProtoSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoSchema* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoSchema* New() const final {
    return CreateMaybeMessage<ProtoSchema>(nullptr);
  }

  ProtoSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoSchema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoSchema& from);
  void MergeFrom(const ProtoSchema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ProtoSchema";
  }
  protected:
  explicit ProtoSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoDescriptorFieldNumber = 1,
  };
  // .google.protobuf.DescriptorProto proto_descriptor = 1;
  bool has_proto_descriptor() const;
  private:
  bool _internal_has_proto_descriptor() const;
  public:
  void clear_proto_descriptor();
  const PROTOBUF_NAMESPACE_ID::DescriptorProto& proto_descriptor() const;
  PROTOBUF_NAMESPACE_ID::DescriptorProto* release_proto_descriptor();
  PROTOBUF_NAMESPACE_ID::DescriptorProto* mutable_proto_descriptor();
  void set_allocated_proto_descriptor(PROTOBUF_NAMESPACE_ID::DescriptorProto* proto_descriptor);
  private:
  const PROTOBUF_NAMESPACE_ID::DescriptorProto& _internal_proto_descriptor() const;
  PROTOBUF_NAMESPACE_ID::DescriptorProto* _internal_mutable_proto_descriptor();
  public:
  void unsafe_arena_set_allocated_proto_descriptor(
      PROTOBUF_NAMESPACE_ID::DescriptorProto* proto_descriptor);
  PROTOBUF_NAMESPACE_ID::DescriptorProto* unsafe_arena_release_proto_descriptor();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ProtoSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::DescriptorProto* proto_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class ProtoRows PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ProtoRows) */ {
 public:
  inline ProtoRows() : ProtoRows(nullptr) {}
  virtual ~ProtoRows();
  explicit constexpr ProtoRows(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoRows(const ProtoRows& from);
  ProtoRows(ProtoRows&& from) noexcept
    : ProtoRows() {
    *this = ::std::move(from);
  }

  inline ProtoRows& operator=(const ProtoRows& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoRows& operator=(ProtoRows&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoRows& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoRows* internal_default_instance() {
    return reinterpret_cast<const ProtoRows*>(
               &_ProtoRows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoRows& a, ProtoRows& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoRows* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoRows* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoRows* New() const final {
    return CreateMaybeMessage<ProtoRows>(nullptr);
  }

  ProtoRows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoRows>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoRows& from);
  void MergeFrom(const ProtoRows& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoRows* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ProtoRows";
  }
  protected:
  explicit ProtoRows(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedRowsFieldNumber = 1,
  };
  // repeated bytes serialized_rows = 1;
  int serialized_rows_size() const;
  private:
  int _internal_serialized_rows_size() const;
  public:
  void clear_serialized_rows();
  const std::string& serialized_rows(int index) const;
  std::string* mutable_serialized_rows(int index);
  void set_serialized_rows(int index, const std::string& value);
  void set_serialized_rows(int index, std::string&& value);
  void set_serialized_rows(int index, const char* value);
  void set_serialized_rows(int index, const void* value, size_t size);
  std::string* add_serialized_rows();
  void add_serialized_rows(const std::string& value);
  void add_serialized_rows(std::string&& value);
  void add_serialized_rows(const char* value);
  void add_serialized_rows(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& serialized_rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_serialized_rows();
  private:
  const std::string& _internal_serialized_rows(int index) const;
  std::string* _internal_add_serialized_rows();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ProtoRows)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> serialized_rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoSchema

// .google.protobuf.DescriptorProto proto_descriptor = 1;
inline bool ProtoSchema::_internal_has_proto_descriptor() const {
  return this != internal_default_instance() && proto_descriptor_ != nullptr;
}
inline bool ProtoSchema::has_proto_descriptor() const {
  return _internal_has_proto_descriptor();
}
inline const PROTOBUF_NAMESPACE_ID::DescriptorProto& ProtoSchema::_internal_proto_descriptor() const {
  const PROTOBUF_NAMESPACE_ID::DescriptorProto* p = proto_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DescriptorProto&>(
      PROTOBUF_NAMESPACE_ID::_DescriptorProto_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DescriptorProto& ProtoSchema::proto_descriptor() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ProtoSchema.proto_descriptor)
  return _internal_proto_descriptor();
}
inline void ProtoSchema::unsafe_arena_set_allocated_proto_descriptor(
    PROTOBUF_NAMESPACE_ID::DescriptorProto* proto_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_descriptor_);
  }
  proto_descriptor_ = proto_descriptor;
  if (proto_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ProtoSchema.proto_descriptor)
}
inline PROTOBUF_NAMESPACE_ID::DescriptorProto* ProtoSchema::release_proto_descriptor() {
  
  PROTOBUF_NAMESPACE_ID::DescriptorProto* temp = proto_descriptor_;
  proto_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DescriptorProto* ProtoSchema::unsafe_arena_release_proto_descriptor() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ProtoSchema.proto_descriptor)
  
  PROTOBUF_NAMESPACE_ID::DescriptorProto* temp = proto_descriptor_;
  proto_descriptor_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DescriptorProto* ProtoSchema::_internal_mutable_proto_descriptor() {
  
  if (proto_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DescriptorProto>(GetArena());
    proto_descriptor_ = p;
  }
  return proto_descriptor_;
}
inline PROTOBUF_NAMESPACE_ID::DescriptorProto* ProtoSchema::mutable_proto_descriptor() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ProtoSchema.proto_descriptor)
  return _internal_mutable_proto_descriptor();
}
inline void ProtoSchema::set_allocated_proto_descriptor(PROTOBUF_NAMESPACE_ID::DescriptorProto* proto_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_descriptor_);
  }
  if (proto_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_descriptor)->GetArena();
    if (message_arena != submessage_arena) {
      proto_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  proto_descriptor_ = proto_descriptor;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ProtoSchema.proto_descriptor)
}

// -------------------------------------------------------------------

// ProtoRows

// repeated bytes serialized_rows = 1;
inline int ProtoRows::_internal_serialized_rows_size() const {
  return serialized_rows_.size();
}
inline int ProtoRows::serialized_rows_size() const {
  return _internal_serialized_rows_size();
}
inline void ProtoRows::clear_serialized_rows() {
  serialized_rows_.Clear();
}
inline std::string* ProtoRows::add_serialized_rows() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  return _internal_add_serialized_rows();
}
inline const std::string& ProtoRows::_internal_serialized_rows(int index) const {
  return serialized_rows_.Get(index);
}
inline const std::string& ProtoRows::serialized_rows(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  return _internal_serialized_rows(index);
}
inline std::string* ProtoRows::mutable_serialized_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  return serialized_rows_.Mutable(index);
}
inline void ProtoRows::set_serialized_rows(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  serialized_rows_.Mutable(index)->assign(value);
}
inline void ProtoRows::set_serialized_rows(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  serialized_rows_.Mutable(index)->assign(std::move(value));
}
inline void ProtoRows::set_serialized_rows(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  serialized_rows_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline void ProtoRows::set_serialized_rows(int index, const void* value, size_t size) {
  serialized_rows_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline std::string* ProtoRows::_internal_add_serialized_rows() {
  return serialized_rows_.Add();
}
inline void ProtoRows::add_serialized_rows(const std::string& value) {
  serialized_rows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline void ProtoRows::add_serialized_rows(std::string&& value) {
  serialized_rows_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline void ProtoRows::add_serialized_rows(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  serialized_rows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline void ProtoRows::add_serialized_rows(const void* value, size_t size) {
  serialized_rows_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtoRows::serialized_rows() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  return serialized_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtoRows::mutable_serialized_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.ProtoRows.serialized_rows)
  return &serialized_rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto
