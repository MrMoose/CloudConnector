// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/storage/v1/arrow.pb.h"
#include "google/cloud/bigquery/storage/v1/avro.pb.h"
#include "google/cloud/bigquery/storage/v1/protobuf.pb.h"
#include "google/cloud/bigquery/storage/v1/stream.pb.h"
#include "google/cloud/bigquery/storage/v1/table.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class AppendRowsRequest;
struct AppendRowsRequestDefaultTypeInternal;
extern AppendRowsRequestDefaultTypeInternal _AppendRowsRequest_default_instance_;
class AppendRowsRequest_ProtoData;
struct AppendRowsRequest_ProtoDataDefaultTypeInternal;
extern AppendRowsRequest_ProtoDataDefaultTypeInternal _AppendRowsRequest_ProtoData_default_instance_;
class AppendRowsResponse;
struct AppendRowsResponseDefaultTypeInternal;
extern AppendRowsResponseDefaultTypeInternal _AppendRowsResponse_default_instance_;
class AppendRowsResponse_AppendResult;
struct AppendRowsResponse_AppendResultDefaultTypeInternal;
extern AppendRowsResponse_AppendResultDefaultTypeInternal _AppendRowsResponse_AppendResult_default_instance_;
class BatchCommitWriteStreamsRequest;
struct BatchCommitWriteStreamsRequestDefaultTypeInternal;
extern BatchCommitWriteStreamsRequestDefaultTypeInternal _BatchCommitWriteStreamsRequest_default_instance_;
class BatchCommitWriteStreamsResponse;
struct BatchCommitWriteStreamsResponseDefaultTypeInternal;
extern BatchCommitWriteStreamsResponseDefaultTypeInternal _BatchCommitWriteStreamsResponse_default_instance_;
class CreateReadSessionRequest;
struct CreateReadSessionRequestDefaultTypeInternal;
extern CreateReadSessionRequestDefaultTypeInternal _CreateReadSessionRequest_default_instance_;
class CreateWriteStreamRequest;
struct CreateWriteStreamRequestDefaultTypeInternal;
extern CreateWriteStreamRequestDefaultTypeInternal _CreateWriteStreamRequest_default_instance_;
class FinalizeWriteStreamRequest;
struct FinalizeWriteStreamRequestDefaultTypeInternal;
extern FinalizeWriteStreamRequestDefaultTypeInternal _FinalizeWriteStreamRequest_default_instance_;
class FinalizeWriteStreamResponse;
struct FinalizeWriteStreamResponseDefaultTypeInternal;
extern FinalizeWriteStreamResponseDefaultTypeInternal _FinalizeWriteStreamResponse_default_instance_;
class FlushRowsRequest;
struct FlushRowsRequestDefaultTypeInternal;
extern FlushRowsRequestDefaultTypeInternal _FlushRowsRequest_default_instance_;
class FlushRowsResponse;
struct FlushRowsResponseDefaultTypeInternal;
extern FlushRowsResponseDefaultTypeInternal _FlushRowsResponse_default_instance_;
class GetWriteStreamRequest;
struct GetWriteStreamRequestDefaultTypeInternal;
extern GetWriteStreamRequestDefaultTypeInternal _GetWriteStreamRequest_default_instance_;
class ReadRowsRequest;
struct ReadRowsRequestDefaultTypeInternal;
extern ReadRowsRequestDefaultTypeInternal _ReadRowsRequest_default_instance_;
class ReadRowsResponse;
struct ReadRowsResponseDefaultTypeInternal;
extern ReadRowsResponseDefaultTypeInternal _ReadRowsResponse_default_instance_;
class RowError;
struct RowErrorDefaultTypeInternal;
extern RowErrorDefaultTypeInternal _RowError_default_instance_;
class SplitReadStreamRequest;
struct SplitReadStreamRequestDefaultTypeInternal;
extern SplitReadStreamRequestDefaultTypeInternal _SplitReadStreamRequest_default_instance_;
class SplitReadStreamResponse;
struct SplitReadStreamResponseDefaultTypeInternal;
extern SplitReadStreamResponseDefaultTypeInternal _SplitReadStreamResponse_default_instance_;
class StorageError;
struct StorageErrorDefaultTypeInternal;
extern StorageErrorDefaultTypeInternal _StorageError_default_instance_;
class StreamStats;
struct StreamStatsDefaultTypeInternal;
extern StreamStatsDefaultTypeInternal _StreamStats_default_instance_;
class StreamStats_Progress;
struct StreamStats_ProgressDefaultTypeInternal;
extern StreamStats_ProgressDefaultTypeInternal _StreamStats_Progress_default_instance_;
class ThrottleState;
struct ThrottleStateDefaultTypeInternal;
extern ThrottleStateDefaultTypeInternal _ThrottleState_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::storage::v1::AppendRowsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AppendRowsRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::AppendRowsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AppendRowsResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::CreateReadSessionRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::FlushRowsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::FlushRowsRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::FlushRowsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::FlushRowsResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::GetWriteStreamRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadRowsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadRowsRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadRowsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadRowsResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::RowError* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::RowError>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::SplitReadStreamRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::StorageError* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StorageError>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::StreamStats* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::StreamStats_Progress* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats_Progress>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ThrottleState* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ThrottleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

enum StorageError_StorageErrorCode : int {
  StorageError_StorageErrorCode_STORAGE_ERROR_CODE_UNSPECIFIED = 0,
  StorageError_StorageErrorCode_TABLE_NOT_FOUND = 1,
  StorageError_StorageErrorCode_STREAM_ALREADY_COMMITTED = 2,
  StorageError_StorageErrorCode_STREAM_NOT_FOUND = 3,
  StorageError_StorageErrorCode_INVALID_STREAM_TYPE = 4,
  StorageError_StorageErrorCode_INVALID_STREAM_STATE = 5,
  StorageError_StorageErrorCode_STREAM_FINALIZED = 6,
  StorageError_StorageErrorCode_SCHEMA_MISMATCH_EXTRA_FIELDS = 7,
  StorageError_StorageErrorCode_OFFSET_ALREADY_EXISTS = 8,
  StorageError_StorageErrorCode_OFFSET_OUT_OF_RANGE = 9,
  StorageError_StorageErrorCode_StorageError_StorageErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StorageError_StorageErrorCode_StorageError_StorageErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StorageError_StorageErrorCode_IsValid(int value);
constexpr StorageError_StorageErrorCode StorageError_StorageErrorCode_StorageErrorCode_MIN = StorageError_StorageErrorCode_STORAGE_ERROR_CODE_UNSPECIFIED;
constexpr StorageError_StorageErrorCode StorageError_StorageErrorCode_StorageErrorCode_MAX = StorageError_StorageErrorCode_OFFSET_OUT_OF_RANGE;
constexpr int StorageError_StorageErrorCode_StorageErrorCode_ARRAYSIZE = StorageError_StorageErrorCode_StorageErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageError_StorageErrorCode_descriptor();
template<typename T>
inline const std::string& StorageError_StorageErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageError_StorageErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageError_StorageErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageError_StorageErrorCode_descriptor(), enum_t_value);
}
inline bool StorageError_StorageErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageError_StorageErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageError_StorageErrorCode>(
    StorageError_StorageErrorCode_descriptor(), name, value);
}
enum RowError_RowErrorCode : int {
  RowError_RowErrorCode_ROW_ERROR_CODE_UNSPECIFIED = 0,
  RowError_RowErrorCode_FIELDS_ERROR = 1,
  RowError_RowErrorCode_RowError_RowErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RowError_RowErrorCode_RowError_RowErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RowError_RowErrorCode_IsValid(int value);
constexpr RowError_RowErrorCode RowError_RowErrorCode_RowErrorCode_MIN = RowError_RowErrorCode_ROW_ERROR_CODE_UNSPECIFIED;
constexpr RowError_RowErrorCode RowError_RowErrorCode_RowErrorCode_MAX = RowError_RowErrorCode_FIELDS_ERROR;
constexpr int RowError_RowErrorCode_RowErrorCode_ARRAYSIZE = RowError_RowErrorCode_RowErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RowError_RowErrorCode_descriptor();
template<typename T>
inline const std::string& RowError_RowErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RowError_RowErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RowError_RowErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RowError_RowErrorCode_descriptor(), enum_t_value);
}
inline bool RowError_RowErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RowError_RowErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RowError_RowErrorCode>(
    RowError_RowErrorCode_descriptor(), name, value);
}
// ===================================================================

class CreateReadSessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.CreateReadSessionRequest) */ {
 public:
  inline CreateReadSessionRequest() : CreateReadSessionRequest(nullptr) {}
  ~CreateReadSessionRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateReadSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateReadSessionRequest(const CreateReadSessionRequest& from);
  CreateReadSessionRequest(CreateReadSessionRequest&& from) noexcept
    : CreateReadSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateReadSessionRequest& operator=(const CreateReadSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReadSessionRequest& operator=(CreateReadSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateReadSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateReadSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateReadSessionRequest*>(
               &_CreateReadSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateReadSessionRequest& a, CreateReadSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReadSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReadSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateReadSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateReadSessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateReadSessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateReadSessionRequest& from) {
    CreateReadSessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReadSessionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.CreateReadSessionRequest";
  }
  protected:
  explicit CreateReadSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kReadSessionFieldNumber = 2,
    kMaxStreamCountFieldNumber = 3,
    kPreferredMinStreamCountFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_read_session() const;
  private:
  bool _internal_has_read_session() const;
  public:
  void clear_read_session();
  const ::google::cloud::bigquery::storage::v1::ReadSession& read_session() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ReadSession* release_read_session();
  ::google::cloud::bigquery::storage::v1::ReadSession* mutable_read_session();
  void set_allocated_read_session(::google::cloud::bigquery::storage::v1::ReadSession* read_session);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadSession& _internal_read_session() const;
  ::google::cloud::bigquery::storage::v1::ReadSession* _internal_mutable_read_session();
  public:
  void unsafe_arena_set_allocated_read_session(
      ::google::cloud::bigquery::storage::v1::ReadSession* read_session);
  ::google::cloud::bigquery::storage::v1::ReadSession* unsafe_arena_release_read_session();

  // int32 max_stream_count = 3;
  void clear_max_stream_count();
  int32_t max_stream_count() const;
  void set_max_stream_count(int32_t value);
  private:
  int32_t _internal_max_stream_count() const;
  void _internal_set_max_stream_count(int32_t value);
  public:

  // int32 preferred_min_stream_count = 4;
  void clear_preferred_min_stream_count();
  int32_t preferred_min_stream_count() const;
  void set_preferred_min_stream_count(int32_t value);
  private:
  int32_t _internal_preferred_min_stream_count() const;
  void _internal_set_preferred_min_stream_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::bigquery::storage::v1::ReadSession* read_session_;
    int32_t max_stream_count_;
    int32_t preferred_min_stream_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadRowsRequest) */ {
 public:
  inline ReadRowsRequest() : ReadRowsRequest(nullptr) {}
  ~ReadRowsRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsRequest(const ReadRowsRequest& from);
  ReadRowsRequest(ReadRowsRequest&& from) noexcept
    : ReadRowsRequest() {
    *this = ::std::move(from);
  }

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsRequest& operator=(ReadRowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRowsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRowsRequest*>(
               &_ReadRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadRowsRequest& a, ReadRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRowsRequest& from) {
    ReadRowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadRowsRequest";
  }
  protected:
  explicit ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadStreamFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_read_stream();
  const std::string& read_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_read_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_read_stream();
  PROTOBUF_NODISCARD std::string* release_read_stream();
  void set_allocated_read_stream(std::string* read_stream);
  private:
  const std::string& _internal_read_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_read_stream(const std::string& value);
  std::string* _internal_mutable_read_stream();
  public:

  // int64 offset = 2;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_stream_;
    int64_t offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ThrottleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ThrottleState) */ {
 public:
  inline ThrottleState() : ThrottleState(nullptr) {}
  ~ThrottleState() override;
  explicit PROTOBUF_CONSTEXPR ThrottleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThrottleState(const ThrottleState& from);
  ThrottleState(ThrottleState&& from) noexcept
    : ThrottleState() {
    *this = ::std::move(from);
  }

  inline ThrottleState& operator=(const ThrottleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThrottleState& operator=(ThrottleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThrottleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThrottleState* internal_default_instance() {
    return reinterpret_cast<const ThrottleState*>(
               &_ThrottleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThrottleState& a, ThrottleState& b) {
    a.Swap(&b);
  }
  inline void Swap(ThrottleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThrottleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThrottleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThrottleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThrottleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThrottleState& from) {
    ThrottleState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThrottleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ThrottleState";
  }
  protected:
  explicit ThrottleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThrottlePercentFieldNumber = 1,
  };
  // int32 throttle_percent = 1;
  void clear_throttle_percent();
  int32_t throttle_percent() const;
  void set_throttle_percent(int32_t value);
  private:
  int32_t _internal_throttle_percent() const;
  void _internal_set_throttle_percent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ThrottleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t throttle_percent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StreamStats_Progress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.StreamStats.Progress) */ {
 public:
  inline StreamStats_Progress() : StreamStats_Progress(nullptr) {}
  ~StreamStats_Progress() override;
  explicit PROTOBUF_CONSTEXPR StreamStats_Progress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStats_Progress(const StreamStats_Progress& from);
  StreamStats_Progress(StreamStats_Progress&& from) noexcept
    : StreamStats_Progress() {
    *this = ::std::move(from);
  }

  inline StreamStats_Progress& operator=(const StreamStats_Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStats_Progress& operator=(StreamStats_Progress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStats_Progress& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStats_Progress* internal_default_instance() {
    return reinterpret_cast<const StreamStats_Progress*>(
               &_StreamStats_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamStats_Progress& a, StreamStats_Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStats_Progress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStats_Progress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStats_Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStats_Progress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStats_Progress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamStats_Progress& from) {
    StreamStats_Progress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStats_Progress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.StreamStats.Progress";
  }
  protected:
  explicit StreamStats_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtResponseStartFieldNumber = 1,
    kAtResponseEndFieldNumber = 2,
  };
  // double at_response_start = 1;
  void clear_at_response_start();
  double at_response_start() const;
  void set_at_response_start(double value);
  private:
  double _internal_at_response_start() const;
  void _internal_set_at_response_start(double value);
  public:

  // double at_response_end = 2;
  void clear_at_response_end();
  double at_response_end() const;
  void set_at_response_end(double value);
  private:
  double _internal_at_response_end() const;
  void _internal_set_at_response_end(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.StreamStats.Progress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double at_response_start_;
    double at_response_end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StreamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.StreamStats) */ {
 public:
  inline StreamStats() : StreamStats(nullptr) {}
  ~StreamStats() override;
  explicit PROTOBUF_CONSTEXPR StreamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStats(const StreamStats& from);
  StreamStats(StreamStats&& from) noexcept
    : StreamStats() {
    *this = ::std::move(from);
  }

  inline StreamStats& operator=(const StreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStats& operator=(StreamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStats* internal_default_instance() {
    return reinterpret_cast<const StreamStats*>(
               &_StreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamStats& a, StreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamStats& from) {
    StreamStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.StreamStats";
  }
  protected:
  explicit StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamStats_Progress Progress;

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
  };
  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& progress() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::StreamStats_Progress* release_progress();
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* mutable_progress();
  void set_allocated_progress(::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress);
  private:
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& _internal_progress() const;
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress);
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* unsafe_arena_release_progress();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.StreamStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadRowsResponse) */ {
 public:
  inline ReadRowsResponse() : ReadRowsResponse(nullptr) {}
  ~ReadRowsResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRowsResponse(const ReadRowsResponse& from);
  ReadRowsResponse(ReadRowsResponse&& from) noexcept
    : ReadRowsResponse() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse& operator=(ReadRowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  enum RowsCase {
    kAvroRows = 3,
    kArrowRecordBatch = 4,
    ROWS_NOT_SET = 0,
  };

  enum SchemaCase {
    kAvroSchema = 7,
    kArrowSchema = 8,
    SCHEMA_NOT_SET = 0,
  };

  static inline const ReadRowsResponse* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse*>(
               &_ReadRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadRowsResponse& a, ReadRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRowsResponse& from) {
    ReadRowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadRowsResponse";
  }
  protected:
  explicit ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kThrottleStateFieldNumber = 5,
    kRowCountFieldNumber = 6,
    kAvroRowsFieldNumber = 3,
    kArrowRecordBatchFieldNumber = 4,
    kAvroSchemaFieldNumber = 7,
    kArrowSchemaFieldNumber = 8,
  };
  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::google::cloud::bigquery::storage::v1::StreamStats& stats() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::StreamStats* release_stats();
  ::google::cloud::bigquery::storage::v1::StreamStats* mutable_stats();
  void set_allocated_stats(::google::cloud::bigquery::storage::v1::StreamStats* stats);
  private:
  const ::google::cloud::bigquery::storage::v1::StreamStats& _internal_stats() const;
  ::google::cloud::bigquery::storage::v1::StreamStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::google::cloud::bigquery::storage::v1::StreamStats* stats);
  ::google::cloud::bigquery::storage::v1::StreamStats* unsafe_arena_release_stats();

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  bool has_throttle_state() const;
  private:
  bool _internal_has_throttle_state() const;
  public:
  void clear_throttle_state();
  const ::google::cloud::bigquery::storage::v1::ThrottleState& throttle_state() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ThrottleState* release_throttle_state();
  ::google::cloud::bigquery::storage::v1::ThrottleState* mutable_throttle_state();
  void set_allocated_throttle_state(::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state);
  private:
  const ::google::cloud::bigquery::storage::v1::ThrottleState& _internal_throttle_state() const;
  ::google::cloud::bigquery::storage::v1::ThrottleState* _internal_mutable_throttle_state();
  public:
  void unsafe_arena_set_allocated_throttle_state(
      ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state);
  ::google::cloud::bigquery::storage::v1::ThrottleState* unsafe_arena_release_throttle_state();

  // int64 row_count = 6;
  void clear_row_count();
  int64_t row_count() const;
  void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
  bool has_avro_rows() const;
  private:
  bool _internal_has_avro_rows() const;
  public:
  void clear_avro_rows();
  const ::google::cloud::bigquery::storage::v1::AvroRows& avro_rows() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AvroRows* release_avro_rows();
  ::google::cloud::bigquery::storage::v1::AvroRows* mutable_avro_rows();
  void set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows);
  private:
  const ::google::cloud::bigquery::storage::v1::AvroRows& _internal_avro_rows() const;
  ::google::cloud::bigquery::storage::v1::AvroRows* _internal_mutable_avro_rows();
  public:
  void unsafe_arena_set_allocated_avro_rows(
      ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows);
  ::google::cloud::bigquery::storage::v1::AvroRows* unsafe_arena_release_avro_rows();

  // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
  bool has_arrow_record_batch() const;
  private:
  bool _internal_has_arrow_record_batch() const;
  public:
  void clear_arrow_record_batch();
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& arrow_record_batch() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* release_arrow_record_batch();
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* mutable_arrow_record_batch();
  void set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch);
  private:
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& _internal_arrow_record_batch() const;
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* _internal_mutable_arrow_record_batch();
  public:
  void unsafe_arena_set_allocated_arrow_record_batch(
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch);
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* unsafe_arena_release_arrow_record_batch();

  // .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_avro_schema() const;
  private:
  bool _internal_has_avro_schema() const;
  public:
  void clear_avro_schema();
  const ::google::cloud::bigquery::storage::v1::AvroSchema& avro_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AvroSchema* release_avro_schema();
  ::google::cloud::bigquery::storage::v1::AvroSchema* mutable_avro_schema();
  void set_allocated_avro_schema(::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::AvroSchema& _internal_avro_schema() const;
  ::google::cloud::bigquery::storage::v1::AvroSchema* _internal_mutable_avro_schema();
  public:
  void unsafe_arena_set_allocated_avro_schema(
      ::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema);
  ::google::cloud::bigquery::storage::v1::AvroSchema* unsafe_arena_release_avro_schema();

  // .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_arrow_schema() const;
  private:
  bool _internal_has_arrow_schema() const;
  public:
  void clear_arrow_schema();
  const ::google::cloud::bigquery::storage::v1::ArrowSchema& arrow_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ArrowSchema* release_arrow_schema();
  ::google::cloud::bigquery::storage::v1::ArrowSchema* mutable_arrow_schema();
  void set_allocated_arrow_schema(::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::ArrowSchema& _internal_arrow_schema() const;
  ::google::cloud::bigquery::storage::v1::ArrowSchema* _internal_mutable_arrow_schema();
  public:
  void unsafe_arena_set_allocated_arrow_schema(
      ::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema);
  ::google::cloud::bigquery::storage::v1::ArrowSchema* unsafe_arena_release_arrow_schema();

  void clear_rows();
  RowsCase rows_case() const;
  void clear_schema();
  SchemaCase schema_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadRowsResponse)
 private:
  class _Internal;
  void set_has_avro_rows();
  void set_has_arrow_record_batch();
  void set_has_avro_schema();
  void set_has_arrow_schema();

  inline bool has_rows() const;
  inline void clear_has_rows();

  inline bool has_schema() const;
  inline void clear_has_schema();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::storage::v1::StreamStats* stats_;
    ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state_;
    int64_t row_count_;
    union RowsUnion {
      constexpr RowsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows_;
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch_;
    } rows_;
    union SchemaUnion {
      constexpr SchemaUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema_;
      ::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema_;
    } schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class SplitReadStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.SplitReadStreamRequest) */ {
 public:
  inline SplitReadStreamRequest() : SplitReadStreamRequest(nullptr) {}
  ~SplitReadStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR SplitReadStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitReadStreamRequest(const SplitReadStreamRequest& from);
  SplitReadStreamRequest(SplitReadStreamRequest&& from) noexcept
    : SplitReadStreamRequest() {
    *this = ::std::move(from);
  }

  inline SplitReadStreamRequest& operator=(const SplitReadStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitReadStreamRequest& operator=(SplitReadStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitReadStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitReadStreamRequest* internal_default_instance() {
    return reinterpret_cast<const SplitReadStreamRequest*>(
               &_SplitReadStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SplitReadStreamRequest& a, SplitReadStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitReadStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitReadStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitReadStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitReadStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitReadStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitReadStreamRequest& from) {
    SplitReadStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitReadStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.SplitReadStreamRequest";
  }
  protected:
  explicit SplitReadStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFractionFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double fraction = 2;
  void clear_fraction();
  double fraction() const;
  void set_fraction(double value);
  private:
  double _internal_fraction() const;
  void _internal_set_fraction(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double fraction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class SplitReadStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.SplitReadStreamResponse) */ {
 public:
  inline SplitReadStreamResponse() : SplitReadStreamResponse(nullptr) {}
  ~SplitReadStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR SplitReadStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitReadStreamResponse(const SplitReadStreamResponse& from);
  SplitReadStreamResponse(SplitReadStreamResponse&& from) noexcept
    : SplitReadStreamResponse() {
    *this = ::std::move(from);
  }

  inline SplitReadStreamResponse& operator=(const SplitReadStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitReadStreamResponse& operator=(SplitReadStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitReadStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitReadStreamResponse* internal_default_instance() {
    return reinterpret_cast<const SplitReadStreamResponse*>(
               &_SplitReadStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SplitReadStreamResponse& a, SplitReadStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitReadStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitReadStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitReadStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitReadStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitReadStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SplitReadStreamResponse& from) {
    SplitReadStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitReadStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.SplitReadStreamResponse";
  }
  protected:
  explicit SplitReadStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryStreamFieldNumber = 1,
    kRemainderStreamFieldNumber = 2,
  };
  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  bool has_primary_stream() const;
  private:
  bool _internal_has_primary_stream() const;
  public:
  void clear_primary_stream();
  const ::google::cloud::bigquery::storage::v1::ReadStream& primary_stream() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ReadStream* release_primary_stream();
  ::google::cloud::bigquery::storage::v1::ReadStream* mutable_primary_stream();
  void set_allocated_primary_stream(::google::cloud::bigquery::storage::v1::ReadStream* primary_stream);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadStream& _internal_primary_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* _internal_mutable_primary_stream();
  public:
  void unsafe_arena_set_allocated_primary_stream(
      ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream);
  ::google::cloud::bigquery::storage::v1::ReadStream* unsafe_arena_release_primary_stream();

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  bool has_remainder_stream() const;
  private:
  bool _internal_has_remainder_stream() const;
  public:
  void clear_remainder_stream();
  const ::google::cloud::bigquery::storage::v1::ReadStream& remainder_stream() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ReadStream* release_remainder_stream();
  ::google::cloud::bigquery::storage::v1::ReadStream* mutable_remainder_stream();
  void set_allocated_remainder_stream(::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadStream& _internal_remainder_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* _internal_mutable_remainder_stream();
  public:
  void unsafe_arena_set_allocated_remainder_stream(
      ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream);
  ::google::cloud::bigquery::storage::v1::ReadStream* unsafe_arena_release_remainder_stream();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream_;
    ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CreateWriteStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest) */ {
 public:
  inline CreateWriteStreamRequest() : CreateWriteStreamRequest(nullptr) {}
  ~CreateWriteStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateWriteStreamRequest(const CreateWriteStreamRequest& from);
  CreateWriteStreamRequest(CreateWriteStreamRequest&& from) noexcept
    : CreateWriteStreamRequest() {
    *this = ::std::move(from);
  }

  inline CreateWriteStreamRequest& operator=(const CreateWriteStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWriteStreamRequest& operator=(CreateWriteStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWriteStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWriteStreamRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWriteStreamRequest*>(
               &_CreateWriteStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateWriteStreamRequest& a, CreateWriteStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWriteStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWriteStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWriteStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWriteStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateWriteStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateWriteStreamRequest& from) {
    CreateWriteStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWriteStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.CreateWriteStreamRequest";
  }
  protected:
  explicit CreateWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kWriteStreamFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.storage.v1.WriteStream write_stream = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_write_stream() const;
  private:
  bool _internal_has_write_stream() const;
  public:
  void clear_write_stream();
  const ::google::cloud::bigquery::storage::v1::WriteStream& write_stream() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::WriteStream* release_write_stream();
  ::google::cloud::bigquery::storage::v1::WriteStream* mutable_write_stream();
  void set_allocated_write_stream(::google::cloud::bigquery::storage::v1::WriteStream* write_stream);
  private:
  const ::google::cloud::bigquery::storage::v1::WriteStream& _internal_write_stream() const;
  ::google::cloud::bigquery::storage::v1::WriteStream* _internal_mutable_write_stream();
  public:
  void unsafe_arena_set_allocated_write_stream(
      ::google::cloud::bigquery::storage::v1::WriteStream* write_stream);
  ::google::cloud::bigquery::storage::v1::WriteStream* unsafe_arena_release_write_stream();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::cloud::bigquery::storage::v1::WriteStream* write_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class AppendRowsRequest_ProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData) */ {
 public:
  inline AppendRowsRequest_ProtoData() : AppendRowsRequest_ProtoData(nullptr) {}
  ~AppendRowsRequest_ProtoData() override;
  explicit PROTOBUF_CONSTEXPR AppendRowsRequest_ProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRowsRequest_ProtoData(const AppendRowsRequest_ProtoData& from);
  AppendRowsRequest_ProtoData(AppendRowsRequest_ProtoData&& from) noexcept
    : AppendRowsRequest_ProtoData() {
    *this = ::std::move(from);
  }

  inline AppendRowsRequest_ProtoData& operator=(const AppendRowsRequest_ProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRowsRequest_ProtoData& operator=(AppendRowsRequest_ProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRowsRequest_ProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendRowsRequest_ProtoData* internal_default_instance() {
    return reinterpret_cast<const AppendRowsRequest_ProtoData*>(
               &_AppendRowsRequest_ProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AppendRowsRequest_ProtoData& a, AppendRowsRequest_ProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRowsRequest_ProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRowsRequest_ProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRowsRequest_ProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRowsRequest_ProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRowsRequest_ProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRowsRequest_ProtoData& from) {
    AppendRowsRequest_ProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRowsRequest_ProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData";
  }
  protected:
  explicit AppendRowsRequest_ProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterSchemaFieldNumber = 1,
    kRowsFieldNumber = 2,
  };
  // .google.cloud.bigquery.storage.v1.ProtoSchema writer_schema = 1;
  bool has_writer_schema() const;
  private:
  bool _internal_has_writer_schema() const;
  public:
  void clear_writer_schema();
  const ::google::cloud::bigquery::storage::v1::ProtoSchema& writer_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ProtoSchema* release_writer_schema();
  ::google::cloud::bigquery::storage::v1::ProtoSchema* mutable_writer_schema();
  void set_allocated_writer_schema(::google::cloud::bigquery::storage::v1::ProtoSchema* writer_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::ProtoSchema& _internal_writer_schema() const;
  ::google::cloud::bigquery::storage::v1::ProtoSchema* _internal_mutable_writer_schema();
  public:
  void unsafe_arena_set_allocated_writer_schema(
      ::google::cloud::bigquery::storage::v1::ProtoSchema* writer_schema);
  ::google::cloud::bigquery::storage::v1::ProtoSchema* unsafe_arena_release_writer_schema();

  // .google.cloud.bigquery.storage.v1.ProtoRows rows = 2;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  const ::google::cloud::bigquery::storage::v1::ProtoRows& rows() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::ProtoRows* release_rows();
  ::google::cloud::bigquery::storage::v1::ProtoRows* mutable_rows();
  void set_allocated_rows(::google::cloud::bigquery::storage::v1::ProtoRows* rows);
  private:
  const ::google::cloud::bigquery::storage::v1::ProtoRows& _internal_rows() const;
  ::google::cloud::bigquery::storage::v1::ProtoRows* _internal_mutable_rows();
  public:
  void unsafe_arena_set_allocated_rows(
      ::google::cloud::bigquery::storage::v1::ProtoRows* rows);
  ::google::cloud::bigquery::storage::v1::ProtoRows* unsafe_arena_release_rows();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::cloud::bigquery::storage::v1::ProtoSchema* writer_schema_;
    ::google::cloud::bigquery::storage::v1::ProtoRows* rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class AppendRowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AppendRowsRequest) */ {
 public:
  inline AppendRowsRequest() : AppendRowsRequest(nullptr) {}
  ~AppendRowsRequest() override;
  explicit PROTOBUF_CONSTEXPR AppendRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRowsRequest(const AppendRowsRequest& from);
  AppendRowsRequest(AppendRowsRequest&& from) noexcept
    : AppendRowsRequest() {
    *this = ::std::move(from);
  }

  inline AppendRowsRequest& operator=(const AppendRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRowsRequest& operator=(AppendRowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RowsCase {
    kProtoRows = 4,
    ROWS_NOT_SET = 0,
  };

  static inline const AppendRowsRequest* internal_default_instance() {
    return reinterpret_cast<const AppendRowsRequest*>(
               &_AppendRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AppendRowsRequest& a, AppendRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRowsRequest& from) {
    AppendRowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AppendRowsRequest";
  }
  protected:
  explicit AppendRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppendRowsRequest_ProtoData ProtoData;

  // accessors -------------------------------------------------------

  enum : int {
    kWriteStreamFieldNumber = 1,
    kTraceIdFieldNumber = 6,
    kOffsetFieldNumber = 2,
    kProtoRowsFieldNumber = 4,
  };
  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_write_stream();
  const std::string& write_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_stream();
  PROTOBUF_NODISCARD std::string* release_write_stream();
  void set_allocated_write_stream(std::string* write_stream);
  private:
  const std::string& _internal_write_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_stream(const std::string& value);
  std::string* _internal_mutable_write_stream();
  public:

  // string trace_id = 6;
  void clear_trace_id();
  const std::string& trace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // .google.protobuf.Int64Value offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int64Value* release_offset();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_offset();
  void set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  ::PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_offset();

  // .google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;
  bool has_proto_rows() const;
  private:
  bool _internal_has_proto_rows() const;
  public:
  void clear_proto_rows();
  const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData& proto_rows() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* release_proto_rows();
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* mutable_proto_rows();
  void set_allocated_proto_rows(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows);
  private:
  const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData& _internal_proto_rows() const;
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* _internal_mutable_proto_rows();
  public:
  void unsafe_arena_set_allocated_proto_rows(
      ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows);
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* unsafe_arena_release_proto_rows();

  void clear_rows();
  RowsCase rows_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AppendRowsRequest)
 private:
  class _Internal;
  void set_has_proto_rows();

  inline bool has_rows() const;
  inline void clear_has_rows();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_stream_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset_;
    union RowsUnion {
      constexpr RowsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows_;
    } rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class AppendRowsResponse_AppendResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult) */ {
 public:
  inline AppendRowsResponse_AppendResult() : AppendRowsResponse_AppendResult(nullptr) {}
  ~AppendRowsResponse_AppendResult() override;
  explicit PROTOBUF_CONSTEXPR AppendRowsResponse_AppendResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRowsResponse_AppendResult(const AppendRowsResponse_AppendResult& from);
  AppendRowsResponse_AppendResult(AppendRowsResponse_AppendResult&& from) noexcept
    : AppendRowsResponse_AppendResult() {
    *this = ::std::move(from);
  }

  inline AppendRowsResponse_AppendResult& operator=(const AppendRowsResponse_AppendResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRowsResponse_AppendResult& operator=(AppendRowsResponse_AppendResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRowsResponse_AppendResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendRowsResponse_AppendResult* internal_default_instance() {
    return reinterpret_cast<const AppendRowsResponse_AppendResult*>(
               &_AppendRowsResponse_AppendResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AppendRowsResponse_AppendResult& a, AppendRowsResponse_AppendResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRowsResponse_AppendResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRowsResponse_AppendResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRowsResponse_AppendResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRowsResponse_AppendResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRowsResponse_AppendResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRowsResponse_AppendResult& from) {
    AppendRowsResponse_AppendResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRowsResponse_AppendResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult";
  }
  protected:
  explicit AppendRowsResponse_AppendResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // .google.protobuf.Int64Value offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int64Value* release_offset();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_offset();
  void set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  ::PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_offset();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class AppendRowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.AppendRowsResponse) */ {
 public:
  inline AppendRowsResponse() : AppendRowsResponse(nullptr) {}
  ~AppendRowsResponse() override;
  explicit PROTOBUF_CONSTEXPR AppendRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRowsResponse(const AppendRowsResponse& from);
  AppendRowsResponse(AppendRowsResponse&& from) noexcept
    : AppendRowsResponse() {
    *this = ::std::move(from);
  }

  inline AppendRowsResponse& operator=(const AppendRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRowsResponse& operator=(AppendRowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kAppendResult = 1,
    kError = 2,
    RESPONSE_NOT_SET = 0,
  };

  static inline const AppendRowsResponse* internal_default_instance() {
    return reinterpret_cast<const AppendRowsResponse*>(
               &_AppendRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AppendRowsResponse& a, AppendRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRowsResponse& from) {
    AppendRowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.AppendRowsResponse";
  }
  protected:
  explicit AppendRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppendRowsResponse_AppendResult AppendResult;

  // accessors -------------------------------------------------------

  enum : int {
    kRowErrorsFieldNumber = 4,
    kWriteStreamFieldNumber = 5,
    kUpdatedSchemaFieldNumber = 3,
    kAppendResultFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // repeated .google.cloud.bigquery.storage.v1.RowError row_errors = 4;
  int row_errors_size() const;
  private:
  int _internal_row_errors_size() const;
  public:
  void clear_row_errors();
  ::google::cloud::bigquery::storage::v1::RowError* mutable_row_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::RowError >*
      mutable_row_errors();
  private:
  const ::google::cloud::bigquery::storage::v1::RowError& _internal_row_errors(int index) const;
  ::google::cloud::bigquery::storage::v1::RowError* _internal_add_row_errors();
  public:
  const ::google::cloud::bigquery::storage::v1::RowError& row_errors(int index) const;
  ::google::cloud::bigquery::storage::v1::RowError* add_row_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::RowError >&
      row_errors() const;

  // string write_stream = 5;
  void clear_write_stream();
  const std::string& write_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_stream();
  PROTOBUF_NODISCARD std::string* release_write_stream();
  void set_allocated_write_stream(std::string* write_stream);
  private:
  const std::string& _internal_write_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_stream(const std::string& value);
  std::string* _internal_mutable_write_stream();
  public:

  // .google.cloud.bigquery.storage.v1.TableSchema updated_schema = 3;
  bool has_updated_schema() const;
  private:
  bool _internal_has_updated_schema() const;
  public:
  void clear_updated_schema();
  const ::google::cloud::bigquery::storage::v1::TableSchema& updated_schema() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::TableSchema* release_updated_schema();
  ::google::cloud::bigquery::storage::v1::TableSchema* mutable_updated_schema();
  void set_allocated_updated_schema(::google::cloud::bigquery::storage::v1::TableSchema* updated_schema);
  private:
  const ::google::cloud::bigquery::storage::v1::TableSchema& _internal_updated_schema() const;
  ::google::cloud::bigquery::storage::v1::TableSchema* _internal_mutable_updated_schema();
  public:
  void unsafe_arena_set_allocated_updated_schema(
      ::google::cloud::bigquery::storage::v1::TableSchema* updated_schema);
  ::google::cloud::bigquery::storage::v1::TableSchema* unsafe_arena_release_updated_schema();

  // .google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult append_result = 1;
  bool has_append_result() const;
  private:
  bool _internal_has_append_result() const;
  public:
  void clear_append_result();
  const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult& append_result() const;
  PROTOBUF_NODISCARD ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* release_append_result();
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* mutable_append_result();
  void set_allocated_append_result(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result);
  private:
  const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult& _internal_append_result() const;
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* _internal_mutable_append_result();
  public:
  void unsafe_arena_set_allocated_append_result(
      ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result);
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* unsafe_arena_release_append_result();

  // .google.rpc.Status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.AppendRowsResponse)
 private:
  class _Internal;
  void set_has_append_result();
  void set_has_error();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::RowError > row_errors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_stream_;
    ::google::cloud::bigquery::storage::v1::TableSchema* updated_schema_;
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result_;
      ::google::rpc::Status* error_;
    } response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetWriteStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.GetWriteStreamRequest) */ {
 public:
  inline GetWriteStreamRequest() : GetWriteStreamRequest(nullptr) {}
  ~GetWriteStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR GetWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWriteStreamRequest(const GetWriteStreamRequest& from);
  GetWriteStreamRequest(GetWriteStreamRequest&& from) noexcept
    : GetWriteStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetWriteStreamRequest& operator=(const GetWriteStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWriteStreamRequest& operator=(GetWriteStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWriteStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWriteStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetWriteStreamRequest*>(
               &_GetWriteStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetWriteStreamRequest& a, GetWriteStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWriteStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWriteStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWriteStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWriteStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWriteStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWriteStreamRequest& from) {
    GetWriteStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWriteStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.GetWriteStreamRequest";
  }
  protected:
  explicit GetWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.bigquery.storage.v1.WriteStreamView view = 3;
  void clear_view();
  ::google::cloud::bigquery::storage::v1::WriteStreamView view() const;
  void set_view(::google::cloud::bigquery::storage::v1::WriteStreamView value);
  private:
  ::google::cloud::bigquery::storage::v1::WriteStreamView _internal_view() const;
  void _internal_set_view(::google::cloud::bigquery::storage::v1::WriteStreamView value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class BatchCommitWriteStreamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest) */ {
 public:
  inline BatchCommitWriteStreamsRequest() : BatchCommitWriteStreamsRequest(nullptr) {}
  ~BatchCommitWriteStreamsRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchCommitWriteStreamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCommitWriteStreamsRequest(const BatchCommitWriteStreamsRequest& from);
  BatchCommitWriteStreamsRequest(BatchCommitWriteStreamsRequest&& from) noexcept
    : BatchCommitWriteStreamsRequest() {
    *this = ::std::move(from);
  }

  inline BatchCommitWriteStreamsRequest& operator=(const BatchCommitWriteStreamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCommitWriteStreamsRequest& operator=(BatchCommitWriteStreamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCommitWriteStreamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCommitWriteStreamsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchCommitWriteStreamsRequest*>(
               &_BatchCommitWriteStreamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BatchCommitWriteStreamsRequest& a, BatchCommitWriteStreamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCommitWriteStreamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCommitWriteStreamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCommitWriteStreamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCommitWriteStreamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCommitWriteStreamsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCommitWriteStreamsRequest& from) {
    BatchCommitWriteStreamsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCommitWriteStreamsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest";
  }
  protected:
  explicit BatchCommitWriteStreamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteStreamsFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated string write_streams = 2 [(.google.api.field_behavior) = REQUIRED];
  int write_streams_size() const;
  private:
  int _internal_write_streams_size() const;
  public:
  void clear_write_streams();
  const std::string& write_streams(int index) const;
  std::string* mutable_write_streams(int index);
  void set_write_streams(int index, const std::string& value);
  void set_write_streams(int index, std::string&& value);
  void set_write_streams(int index, const char* value);
  void set_write_streams(int index, const char* value, size_t size);
  std::string* add_write_streams();
  void add_write_streams(const std::string& value);
  void add_write_streams(std::string&& value);
  void add_write_streams(const char* value);
  void add_write_streams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& write_streams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_write_streams();
  private:
  const std::string& _internal_write_streams(int index) const;
  std::string* _internal_add_write_streams();
  public:

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> write_streams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class BatchCommitWriteStreamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse) */ {
 public:
  inline BatchCommitWriteStreamsResponse() : BatchCommitWriteStreamsResponse(nullptr) {}
  ~BatchCommitWriteStreamsResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchCommitWriteStreamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCommitWriteStreamsResponse(const BatchCommitWriteStreamsResponse& from);
  BatchCommitWriteStreamsResponse(BatchCommitWriteStreamsResponse&& from) noexcept
    : BatchCommitWriteStreamsResponse() {
    *this = ::std::move(from);
  }

  inline BatchCommitWriteStreamsResponse& operator=(const BatchCommitWriteStreamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCommitWriteStreamsResponse& operator=(BatchCommitWriteStreamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCommitWriteStreamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCommitWriteStreamsResponse* internal_default_instance() {
    return reinterpret_cast<const BatchCommitWriteStreamsResponse*>(
               &_BatchCommitWriteStreamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BatchCommitWriteStreamsResponse& a, BatchCommitWriteStreamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCommitWriteStreamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCommitWriteStreamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCommitWriteStreamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCommitWriteStreamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCommitWriteStreamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCommitWriteStreamsResponse& from) {
    BatchCommitWriteStreamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCommitWriteStreamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse";
  }
  protected:
  explicit BatchCommitWriteStreamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamErrorsFieldNumber = 2,
    kCommitTimeFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.storage.v1.StorageError stream_errors = 2;
  int stream_errors_size() const;
  private:
  int _internal_stream_errors_size() const;
  public:
  void clear_stream_errors();
  ::google::cloud::bigquery::storage::v1::StorageError* mutable_stream_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::StorageError >*
      mutable_stream_errors();
  private:
  const ::google::cloud::bigquery::storage::v1::StorageError& _internal_stream_errors(int index) const;
  ::google::cloud::bigquery::storage::v1::StorageError* _internal_add_stream_errors();
  public:
  const ::google::cloud::bigquery::storage::v1::StorageError& stream_errors(int index) const;
  ::google::cloud::bigquery::storage::v1::StorageError* add_stream_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::StorageError >&
      stream_errors() const;

  // .google.protobuf.Timestamp commit_time = 1;
  bool has_commit_time() const;
  private:
  bool _internal_has_commit_time() const;
  public:
  void clear_commit_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& commit_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_commit_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_commit_time();
  void set_allocated_commit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_commit_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_commit_time();
  public:
  void unsafe_arena_set_allocated_commit_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_commit_time();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::StorageError > stream_errors_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class FinalizeWriteStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest) */ {
 public:
  inline FinalizeWriteStreamRequest() : FinalizeWriteStreamRequest(nullptr) {}
  ~FinalizeWriteStreamRequest() override;
  explicit PROTOBUF_CONSTEXPR FinalizeWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalizeWriteStreamRequest(const FinalizeWriteStreamRequest& from);
  FinalizeWriteStreamRequest(FinalizeWriteStreamRequest&& from) noexcept
    : FinalizeWriteStreamRequest() {
    *this = ::std::move(from);
  }

  inline FinalizeWriteStreamRequest& operator=(const FinalizeWriteStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeWriteStreamRequest& operator=(FinalizeWriteStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinalizeWriteStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalizeWriteStreamRequest* internal_default_instance() {
    return reinterpret_cast<const FinalizeWriteStreamRequest*>(
               &_FinalizeWriteStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FinalizeWriteStreamRequest& a, FinalizeWriteStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeWriteStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalizeWriteStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinalizeWriteStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinalizeWriteStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FinalizeWriteStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FinalizeWriteStreamRequest& from) {
    FinalizeWriteStreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalizeWriteStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest";
  }
  protected:
  explicit FinalizeWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class FinalizeWriteStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse) */ {
 public:
  inline FinalizeWriteStreamResponse() : FinalizeWriteStreamResponse(nullptr) {}
  ~FinalizeWriteStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR FinalizeWriteStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalizeWriteStreamResponse(const FinalizeWriteStreamResponse& from);
  FinalizeWriteStreamResponse(FinalizeWriteStreamResponse&& from) noexcept
    : FinalizeWriteStreamResponse() {
    *this = ::std::move(from);
  }

  inline FinalizeWriteStreamResponse& operator=(const FinalizeWriteStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeWriteStreamResponse& operator=(FinalizeWriteStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinalizeWriteStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalizeWriteStreamResponse* internal_default_instance() {
    return reinterpret_cast<const FinalizeWriteStreamResponse*>(
               &_FinalizeWriteStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FinalizeWriteStreamResponse& a, FinalizeWriteStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeWriteStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalizeWriteStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinalizeWriteStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinalizeWriteStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FinalizeWriteStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FinalizeWriteStreamResponse& from) {
    FinalizeWriteStreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalizeWriteStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse";
  }
  protected:
  explicit FinalizeWriteStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowCountFieldNumber = 1,
  };
  // int64 row_count = 1;
  void clear_row_count();
  int64_t row_count() const;
  void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t row_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class FlushRowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.FlushRowsRequest) */ {
 public:
  inline FlushRowsRequest() : FlushRowsRequest(nullptr) {}
  ~FlushRowsRequest() override;
  explicit PROTOBUF_CONSTEXPR FlushRowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushRowsRequest(const FlushRowsRequest& from);
  FlushRowsRequest(FlushRowsRequest&& from) noexcept
    : FlushRowsRequest() {
    *this = ::std::move(from);
  }

  inline FlushRowsRequest& operator=(const FlushRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRowsRequest& operator=(FlushRowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushRowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushRowsRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRowsRequest*>(
               &_FlushRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FlushRowsRequest& a, FlushRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushRowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushRowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushRowsRequest& from) {
    FlushRowsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.FlushRowsRequest";
  }
  protected:
  explicit FlushRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteStreamFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_write_stream();
  const std::string& write_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_stream();
  PROTOBUF_NODISCARD std::string* release_write_stream();
  void set_allocated_write_stream(std::string* write_stream);
  private:
  const std::string& _internal_write_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_stream(const std::string& value);
  std::string* _internal_mutable_write_stream();
  public:

  // .google.protobuf.Int64Value offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& offset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int64Value* release_offset();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_offset();
  void set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_offset() const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::PROTOBUF_NAMESPACE_ID::Int64Value* offset);
  ::PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_offset();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.FlushRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_stream_;
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class FlushRowsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.FlushRowsResponse) */ {
 public:
  inline FlushRowsResponse() : FlushRowsResponse(nullptr) {}
  ~FlushRowsResponse() override;
  explicit PROTOBUF_CONSTEXPR FlushRowsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushRowsResponse(const FlushRowsResponse& from);
  FlushRowsResponse(FlushRowsResponse&& from) noexcept
    : FlushRowsResponse() {
    *this = ::std::move(from);
  }

  inline FlushRowsResponse& operator=(const FlushRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRowsResponse& operator=(FlushRowsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushRowsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushRowsResponse* internal_default_instance() {
    return reinterpret_cast<const FlushRowsResponse*>(
               &_FlushRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FlushRowsResponse& a, FlushRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRowsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushRowsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushRowsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushRowsResponse& from) {
    FlushRowsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRowsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.FlushRowsResponse";
  }
  protected:
  explicit FlushRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.FlushRowsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StorageError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.StorageError) */ {
 public:
  inline StorageError() : StorageError(nullptr) {}
  ~StorageError() override;
  explicit PROTOBUF_CONSTEXPR StorageError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageError(const StorageError& from);
  StorageError(StorageError&& from) noexcept
    : StorageError() {
    *this = ::std::move(from);
  }

  inline StorageError& operator=(const StorageError& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageError& operator=(StorageError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageError& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageError* internal_default_instance() {
    return reinterpret_cast<const StorageError*>(
               &_StorageError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StorageError& a, StorageError& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageError& from) {
    StorageError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.StorageError";
  }
  protected:
  explicit StorageError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StorageError_StorageErrorCode StorageErrorCode;
  static constexpr StorageErrorCode STORAGE_ERROR_CODE_UNSPECIFIED =
    StorageError_StorageErrorCode_STORAGE_ERROR_CODE_UNSPECIFIED;
  static constexpr StorageErrorCode TABLE_NOT_FOUND =
    StorageError_StorageErrorCode_TABLE_NOT_FOUND;
  static constexpr StorageErrorCode STREAM_ALREADY_COMMITTED =
    StorageError_StorageErrorCode_STREAM_ALREADY_COMMITTED;
  static constexpr StorageErrorCode STREAM_NOT_FOUND =
    StorageError_StorageErrorCode_STREAM_NOT_FOUND;
  static constexpr StorageErrorCode INVALID_STREAM_TYPE =
    StorageError_StorageErrorCode_INVALID_STREAM_TYPE;
  static constexpr StorageErrorCode INVALID_STREAM_STATE =
    StorageError_StorageErrorCode_INVALID_STREAM_STATE;
  static constexpr StorageErrorCode STREAM_FINALIZED =
    StorageError_StorageErrorCode_STREAM_FINALIZED;
  static constexpr StorageErrorCode SCHEMA_MISMATCH_EXTRA_FIELDS =
    StorageError_StorageErrorCode_SCHEMA_MISMATCH_EXTRA_FIELDS;
  static constexpr StorageErrorCode OFFSET_ALREADY_EXISTS =
    StorageError_StorageErrorCode_OFFSET_ALREADY_EXISTS;
  static constexpr StorageErrorCode OFFSET_OUT_OF_RANGE =
    StorageError_StorageErrorCode_OFFSET_OUT_OF_RANGE;
  static inline bool StorageErrorCode_IsValid(int value) {
    return StorageError_StorageErrorCode_IsValid(value);
  }
  static constexpr StorageErrorCode StorageErrorCode_MIN =
    StorageError_StorageErrorCode_StorageErrorCode_MIN;
  static constexpr StorageErrorCode StorageErrorCode_MAX =
    StorageError_StorageErrorCode_StorageErrorCode_MAX;
  static constexpr int StorageErrorCode_ARRAYSIZE =
    StorageError_StorageErrorCode_StorageErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageErrorCode_descriptor() {
    return StorageError_StorageErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageErrorCode_Name.");
    return StorageError_StorageErrorCode_Name(enum_t_value);
  }
  static inline bool StorageErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageErrorCode* value) {
    return StorageError_StorageErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string entity = 2;
  void clear_entity();
  const std::string& entity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity();
  PROTOBUF_NODISCARD std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .google.cloud.bigquery.storage.v1.StorageError.StorageErrorCode code = 1;
  void clear_code();
  ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode code() const;
  void set_code(::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode value);
  private:
  ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode _internal_code() const;
  void _internal_set_code(::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.StorageError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class RowError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.RowError) */ {
 public:
  inline RowError() : RowError(nullptr) {}
  ~RowError() override;
  explicit PROTOBUF_CONSTEXPR RowError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowError(const RowError& from);
  RowError(RowError&& from) noexcept
    : RowError() {
    *this = ::std::move(from);
  }

  inline RowError& operator=(const RowError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowError& operator=(RowError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowError& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowError* internal_default_instance() {
    return reinterpret_cast<const RowError*>(
               &_RowError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RowError& a, RowError& b) {
    a.Swap(&b);
  }
  inline void Swap(RowError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowError& from) {
    RowError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.RowError";
  }
  protected:
  explicit RowError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RowError_RowErrorCode RowErrorCode;
  static constexpr RowErrorCode ROW_ERROR_CODE_UNSPECIFIED =
    RowError_RowErrorCode_ROW_ERROR_CODE_UNSPECIFIED;
  static constexpr RowErrorCode FIELDS_ERROR =
    RowError_RowErrorCode_FIELDS_ERROR;
  static inline bool RowErrorCode_IsValid(int value) {
    return RowError_RowErrorCode_IsValid(value);
  }
  static constexpr RowErrorCode RowErrorCode_MIN =
    RowError_RowErrorCode_RowErrorCode_MIN;
  static constexpr RowErrorCode RowErrorCode_MAX =
    RowError_RowErrorCode_RowErrorCode_MAX;
  static constexpr int RowErrorCode_ARRAYSIZE =
    RowError_RowErrorCode_RowErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RowErrorCode_descriptor() {
    return RowError_RowErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& RowErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RowErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RowErrorCode_Name.");
    return RowError_RowErrorCode_Name(enum_t_value);
  }
  static inline bool RowErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RowErrorCode* value) {
    return RowError_RowErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kIndexFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 index = 1;
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // .google.cloud.bigquery.storage.v1.RowError.RowErrorCode code = 2;
  void clear_code();
  ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode code() const;
  void set_code(::google::cloud::bigquery::storage::v1::RowError_RowErrorCode value);
  private:
  ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode _internal_code() const;
  void _internal_set_code(::google::cloud::bigquery::storage::v1::RowError_RowErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.RowError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t index_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateReadSessionRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateReadSessionRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateReadSessionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateReadSessionRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}
inline std::string* CreateReadSessionRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return _s;
}
inline const std::string& CreateReadSessionRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateReadSessionRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateReadSessionRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateReadSessionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateReadSessionRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}

// .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateReadSessionRequest::_internal_has_read_session() const {
  return this != internal_default_instance() && _impl_.read_session_ != nullptr;
}
inline bool CreateReadSessionRequest::has_read_session() const {
  return _internal_has_read_session();
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession& CreateReadSessionRequest::_internal_read_session() const {
  const ::google::cloud::bigquery::storage::v1::ReadSession* p = _impl_.read_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadSession&>(
      ::google::cloud::bigquery::storage::v1::_ReadSession_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession& CreateReadSessionRequest::read_session() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  return _internal_read_session();
}
inline void CreateReadSessionRequest::unsafe_arena_set_allocated_read_session(
    ::google::cloud::bigquery::storage::v1::ReadSession* read_session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_session_);
  }
  _impl_.read_session_ = read_session;
  if (read_session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::release_read_session() {
  
  ::google::cloud::bigquery::storage::v1::ReadSession* temp = _impl_.read_session_;
  _impl_.read_session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::unsafe_arena_release_read_session() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  
  ::google::cloud::bigquery::storage::v1::ReadSession* temp = _impl_.read_session_;
  _impl_.read_session_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::_internal_mutable_read_session() {
  
  if (_impl_.read_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession>(GetArenaForAllocation());
    _impl_.read_session_ = p;
  }
  return _impl_.read_session_;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::mutable_read_session() {
  ::google::cloud::bigquery::storage::v1::ReadSession* _msg = _internal_mutable_read_session();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  return _msg;
}
inline void CreateReadSessionRequest::set_allocated_read_session(::google::cloud::bigquery::storage::v1::ReadSession* read_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.read_session_);
  }
  if (read_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_session));
    if (message_arena != submessage_arena) {
      read_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_session, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.read_session_ = read_session;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
}

// int32 max_stream_count = 3;
inline void CreateReadSessionRequest::clear_max_stream_count() {
  _impl_.max_stream_count_ = 0;
}
inline int32_t CreateReadSessionRequest::_internal_max_stream_count() const {
  return _impl_.max_stream_count_;
}
inline int32_t CreateReadSessionRequest::max_stream_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.max_stream_count)
  return _internal_max_stream_count();
}
inline void CreateReadSessionRequest::_internal_set_max_stream_count(int32_t value) {
  
  _impl_.max_stream_count_ = value;
}
inline void CreateReadSessionRequest::set_max_stream_count(int32_t value) {
  _internal_set_max_stream_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.max_stream_count)
}

// int32 preferred_min_stream_count = 4;
inline void CreateReadSessionRequest::clear_preferred_min_stream_count() {
  _impl_.preferred_min_stream_count_ = 0;
}
inline int32_t CreateReadSessionRequest::_internal_preferred_min_stream_count() const {
  return _impl_.preferred_min_stream_count_;
}
inline int32_t CreateReadSessionRequest::preferred_min_stream_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.preferred_min_stream_count)
  return _internal_preferred_min_stream_count();
}
inline void CreateReadSessionRequest::_internal_set_preferred_min_stream_count(int32_t value) {
  
  _impl_.preferred_min_stream_count_ = value;
}
inline void CreateReadSessionRequest::set_preferred_min_stream_count(int32_t value) {
  _internal_set_preferred_min_stream_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.preferred_min_stream_count)
}

// -------------------------------------------------------------------

// ReadRowsRequest

// string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadRowsRequest::clear_read_stream() {
  _impl_.read_stream_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::read_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return _internal_read_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadRowsRequest::set_read_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.read_stream_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}
inline std::string* ReadRowsRequest::mutable_read_stream() {
  std::string* _s = _internal_mutable_read_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return _s;
}
inline const std::string& ReadRowsRequest::_internal_read_stream() const {
  return _impl_.read_stream_.Get();
}
inline void ReadRowsRequest::_internal_set_read_stream(const std::string& value) {
  
  _impl_.read_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::_internal_mutable_read_stream() {
  
  return _impl_.read_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadRowsRequest::release_read_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return _impl_.read_stream_.Release();
}
inline void ReadRowsRequest::set_allocated_read_stream(std::string* read_stream) {
  if (read_stream != nullptr) {
    
  } else {
    
  }
  _impl_.read_stream_.SetAllocated(read_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.read_stream_.IsDefault()) {
    _impl_.read_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}

// int64 offset = 2;
inline void ReadRowsRequest::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t ReadRowsRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t ReadRowsRequest::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsRequest.offset)
  return _internal_offset();
}
inline void ReadRowsRequest::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void ReadRowsRequest::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsRequest.offset)
}

// -------------------------------------------------------------------

// ThrottleState

// int32 throttle_percent = 1;
inline void ThrottleState::clear_throttle_percent() {
  _impl_.throttle_percent_ = 0;
}
inline int32_t ThrottleState::_internal_throttle_percent() const {
  return _impl_.throttle_percent_;
}
inline int32_t ThrottleState::throttle_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ThrottleState.throttle_percent)
  return _internal_throttle_percent();
}
inline void ThrottleState::_internal_set_throttle_percent(int32_t value) {
  
  _impl_.throttle_percent_ = value;
}
inline void ThrottleState::set_throttle_percent(int32_t value) {
  _internal_set_throttle_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ThrottleState.throttle_percent)
}

// -------------------------------------------------------------------

// StreamStats_Progress

// double at_response_start = 1;
inline void StreamStats_Progress::clear_at_response_start() {
  _impl_.at_response_start_ = 0;
}
inline double StreamStats_Progress::_internal_at_response_start() const {
  return _impl_.at_response_start_;
}
inline double StreamStats_Progress::at_response_start() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_start)
  return _internal_at_response_start();
}
inline void StreamStats_Progress::_internal_set_at_response_start(double value) {
  
  _impl_.at_response_start_ = value;
}
inline void StreamStats_Progress::set_at_response_start(double value) {
  _internal_set_at_response_start(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_start)
}

// double at_response_end = 2;
inline void StreamStats_Progress::clear_at_response_end() {
  _impl_.at_response_end_ = 0;
}
inline double StreamStats_Progress::_internal_at_response_end() const {
  return _impl_.at_response_end_;
}
inline double StreamStats_Progress::at_response_end() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_end)
  return _internal_at_response_end();
}
inline void StreamStats_Progress::_internal_set_at_response_end(double value) {
  
  _impl_.at_response_end_ = value;
}
inline void StreamStats_Progress::set_at_response_end(double value) {
  _internal_set_at_response_end(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_end)
}

// -------------------------------------------------------------------

// StreamStats

// .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
inline bool StreamStats::_internal_has_progress() const {
  return this != internal_default_instance() && _impl_.progress_ != nullptr;
}
inline bool StreamStats::has_progress() const {
  return _internal_has_progress();
}
inline void StreamStats::clear_progress() {
  if (GetArenaForAllocation() == nullptr && _impl_.progress_ != nullptr) {
    delete _impl_.progress_;
  }
  _impl_.progress_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& StreamStats::_internal_progress() const {
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress* p = _impl_.progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::StreamStats_Progress&>(
      ::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& StreamStats::progress() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.progress)
  return _internal_progress();
}
inline void StreamStats::unsafe_arena_set_allocated_progress(
    ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progress_);
  }
  _impl_.progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.StreamStats.progress)
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::release_progress() {
  
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* temp = _impl_.progress_;
  _impl_.progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.StreamStats.progress)
  
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* temp = _impl_.progress_;
  _impl_.progress_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::_internal_mutable_progress() {
  
  if (_impl_.progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats_Progress>(GetArenaForAllocation());
    _impl_.progress_ = p;
  }
  return _impl_.progress_;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::mutable_progress() {
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.StreamStats.progress)
  return _msg;
}
inline void StreamStats::set_allocated_progress(::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.StreamStats.progress)
}

// -------------------------------------------------------------------

// ReadRowsResponse

// .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
inline bool ReadRowsResponse::_internal_has_avro_rows() const {
  return rows_case() == kAvroRows;
}
inline bool ReadRowsResponse::has_avro_rows() const {
  return _internal_has_avro_rows();
}
inline void ReadRowsResponse::set_has_avro_rows() {
  _impl_._oneof_case_[0] = kAvroRows;
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::release_avro_rows() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  if (_internal_has_avro_rows()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::AvroRows* temp = _impl_.rows_.avro_rows_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rows_.avro_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AvroRows& ReadRowsResponse::_internal_avro_rows() const {
  return _internal_has_avro_rows()
      ? *_impl_.rows_.avro_rows_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AvroRows&>(::google::cloud::bigquery::storage::v1::_AvroRows_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AvroRows& ReadRowsResponse::avro_rows() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  return _internal_avro_rows();
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::unsafe_arena_release_avro_rows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  if (_internal_has_avro_rows()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::AvroRows* temp = _impl_.rows_.avro_rows_;
    _impl_.rows_.avro_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows) {
  clear_rows();
  if (avro_rows) {
    set_has_avro_rows();
    _impl_.rows_.avro_rows_ = avro_rows;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::_internal_mutable_avro_rows() {
  if (!_internal_has_avro_rows()) {
    clear_rows();
    set_has_avro_rows();
    _impl_.rows_.avro_rows_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AvroRows >(GetArenaForAllocation());
  }
  return _impl_.rows_.avro_rows_;
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::mutable_avro_rows() {
  ::google::cloud::bigquery::storage::v1::AvroRows* _msg = _internal_mutable_avro_rows();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  return _msg;
}

// .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
inline bool ReadRowsResponse::_internal_has_arrow_record_batch() const {
  return rows_case() == kArrowRecordBatch;
}
inline bool ReadRowsResponse::has_arrow_record_batch() const {
  return _internal_has_arrow_record_batch();
}
inline void ReadRowsResponse::set_has_arrow_record_batch() {
  _impl_._oneof_case_[0] = kArrowRecordBatch;
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::release_arrow_record_batch() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  if (_internal_has_arrow_record_batch()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* temp = _impl_.rows_.arrow_record_batch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rows_.arrow_record_batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& ReadRowsResponse::_internal_arrow_record_batch() const {
  return _internal_has_arrow_record_batch()
      ? *_impl_.rows_.arrow_record_batch_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch&>(::google::cloud::bigquery::storage::v1::_ArrowRecordBatch_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& ReadRowsResponse::arrow_record_batch() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  return _internal_arrow_record_batch();
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::unsafe_arena_release_arrow_record_batch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  if (_internal_has_arrow_record_batch()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* temp = _impl_.rows_.arrow_record_batch_;
    _impl_.rows_.arrow_record_batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch) {
  clear_rows();
  if (arrow_record_batch) {
    set_has_arrow_record_batch();
    _impl_.rows_.arrow_record_batch_ = arrow_record_batch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::_internal_mutable_arrow_record_batch() {
  if (!_internal_has_arrow_record_batch()) {
    clear_rows();
    set_has_arrow_record_batch();
    _impl_.rows_.arrow_record_batch_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch >(GetArenaForAllocation());
  }
  return _impl_.rows_.arrow_record_batch_;
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::mutable_arrow_record_batch() {
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* _msg = _internal_mutable_arrow_record_batch();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  return _msg;
}

// int64 row_count = 6;
inline void ReadRowsResponse::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t ReadRowsResponse::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t ReadRowsResponse::row_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.row_count)
  return _internal_row_count();
}
inline void ReadRowsResponse::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void ReadRowsResponse::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsResponse.row_count)
}

// .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
inline bool ReadRowsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool ReadRowsResponse::has_stats() const {
  return _internal_has_stats();
}
inline void ReadRowsResponse::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats& ReadRowsResponse::_internal_stats() const {
  const ::google::cloud::bigquery::storage::v1::StreamStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::StreamStats&>(
      ::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats& ReadRowsResponse::stats() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  return _internal_stats();
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_stats(
    ::google::cloud::bigquery::storage::v1::StreamStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::release_stats() {
  
  ::google::cloud::bigquery::storage::v1::StreamStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  
  ::google::cloud::bigquery::storage::v1::StreamStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::mutable_stats() {
  ::google::cloud::bigquery::storage::v1::StreamStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  return _msg;
}
inline void ReadRowsResponse::set_allocated_stats(::google::cloud::bigquery::storage::v1::StreamStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
}

// .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
inline bool ReadRowsResponse::_internal_has_throttle_state() const {
  return this != internal_default_instance() && _impl_.throttle_state_ != nullptr;
}
inline bool ReadRowsResponse::has_throttle_state() const {
  return _internal_has_throttle_state();
}
inline void ReadRowsResponse::clear_throttle_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_state_ != nullptr) {
    delete _impl_.throttle_state_;
  }
  _impl_.throttle_state_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::ThrottleState& ReadRowsResponse::_internal_throttle_state() const {
  const ::google::cloud::bigquery::storage::v1::ThrottleState* p = _impl_.throttle_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ThrottleState&>(
      ::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ThrottleState& ReadRowsResponse::throttle_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  return _internal_throttle_state();
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_throttle_state(
    ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_state_);
  }
  _impl_.throttle_state_ = throttle_state;
  if (throttle_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::release_throttle_state() {
  
  ::google::cloud::bigquery::storage::v1::ThrottleState* temp = _impl_.throttle_state_;
  _impl_.throttle_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::unsafe_arena_release_throttle_state() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  
  ::google::cloud::bigquery::storage::v1::ThrottleState* temp = _impl_.throttle_state_;
  _impl_.throttle_state_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::_internal_mutable_throttle_state() {
  
  if (_impl_.throttle_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ThrottleState>(GetArenaForAllocation());
    _impl_.throttle_state_ = p;
  }
  return _impl_.throttle_state_;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::mutable_throttle_state() {
  ::google::cloud::bigquery::storage::v1::ThrottleState* _msg = _internal_mutable_throttle_state();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  return _msg;
}
inline void ReadRowsResponse::set_allocated_throttle_state(::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.throttle_state_;
  }
  if (throttle_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_state);
    if (message_arena != submessage_arena) {
      throttle_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.throttle_state_ = throttle_state;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
}

// .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ReadRowsResponse::_internal_has_avro_schema() const {
  return schema_case() == kAvroSchema;
}
inline bool ReadRowsResponse::has_avro_schema() const {
  return _internal_has_avro_schema();
}
inline void ReadRowsResponse::set_has_avro_schema() {
  _impl_._oneof_case_[1] = kAvroSchema;
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadRowsResponse::release_avro_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
  if (_internal_has_avro_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::AvroSchema* temp = _impl_.schema_.avro_schema_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schema_.avro_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AvroSchema& ReadRowsResponse::_internal_avro_schema() const {
  return _internal_has_avro_schema()
      ? *_impl_.schema_.avro_schema_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AvroSchema&>(::google::cloud::bigquery::storage::v1::_AvroSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AvroSchema& ReadRowsResponse::avro_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
  return _internal_avro_schema();
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadRowsResponse::unsafe_arena_release_avro_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
  if (_internal_has_avro_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::AvroSchema* temp = _impl_.schema_.avro_schema_;
    _impl_.schema_.avro_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_avro_schema(::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema) {
  clear_schema();
  if (avro_schema) {
    set_has_avro_schema();
    _impl_.schema_.avro_schema_ = avro_schema;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadRowsResponse::_internal_mutable_avro_schema() {
  if (!_internal_has_avro_schema()) {
    clear_schema();
    set_has_avro_schema();
    _impl_.schema_.avro_schema_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AvroSchema >(GetArenaForAllocation());
  }
  return _impl_.schema_.avro_schema_;
}
inline ::google::cloud::bigquery::storage::v1::AvroSchema* ReadRowsResponse::mutable_avro_schema() {
  ::google::cloud::bigquery::storage::v1::AvroSchema* _msg = _internal_mutable_avro_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
  return _msg;
}

// .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ReadRowsResponse::_internal_has_arrow_schema() const {
  return schema_case() == kArrowSchema;
}
inline bool ReadRowsResponse::has_arrow_schema() const {
  return _internal_has_arrow_schema();
}
inline void ReadRowsResponse::set_has_arrow_schema() {
  _impl_._oneof_case_[1] = kArrowSchema;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadRowsResponse::release_arrow_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
  if (_internal_has_arrow_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::ArrowSchema* temp = _impl_.schema_.arrow_schema_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schema_.arrow_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSchema& ReadRowsResponse::_internal_arrow_schema() const {
  return _internal_has_arrow_schema()
      ? *_impl_.schema_.arrow_schema_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::ArrowSchema&>(::google::cloud::bigquery::storage::v1::_ArrowSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ArrowSchema& ReadRowsResponse::arrow_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
  return _internal_arrow_schema();
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadRowsResponse::unsafe_arena_release_arrow_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
  if (_internal_has_arrow_schema()) {
    clear_has_schema();
    ::google::cloud::bigquery::storage::v1::ArrowSchema* temp = _impl_.schema_.arrow_schema_;
    _impl_.schema_.arrow_schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_arrow_schema(::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema) {
  clear_schema();
  if (arrow_schema) {
    set_has_arrow_schema();
    _impl_.schema_.arrow_schema_ = arrow_schema;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadRowsResponse::_internal_mutable_arrow_schema() {
  if (!_internal_has_arrow_schema()) {
    clear_schema();
    set_has_arrow_schema();
    _impl_.schema_.arrow_schema_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ArrowSchema >(GetArenaForAllocation());
  }
  return _impl_.schema_.arrow_schema_;
}
inline ::google::cloud::bigquery::storage::v1::ArrowSchema* ReadRowsResponse::mutable_arrow_schema() {
  ::google::cloud::bigquery::storage::v1::ArrowSchema* _msg = _internal_mutable_arrow_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
  return _msg;
}

inline bool ReadRowsResponse::has_rows() const {
  return rows_case() != ROWS_NOT_SET;
}
inline void ReadRowsResponse::clear_has_rows() {
  _impl_._oneof_case_[0] = ROWS_NOT_SET;
}
inline bool ReadRowsResponse::has_schema() const {
  return schema_case() != SCHEMA_NOT_SET;
}
inline void ReadRowsResponse::clear_has_schema() {
  _impl_._oneof_case_[1] = SCHEMA_NOT_SET;
}
inline ReadRowsResponse::RowsCase ReadRowsResponse::rows_case() const {
  return ReadRowsResponse::RowsCase(_impl_._oneof_case_[0]);
}
inline ReadRowsResponse::SchemaCase ReadRowsResponse::schema_case() const {
  return ReadRowsResponse::SchemaCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// SplitReadStreamRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SplitReadStreamRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SplitReadStreamRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitReadStreamRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}
inline std::string* SplitReadStreamRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return _s;
}
inline const std::string& SplitReadStreamRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SplitReadStreamRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SplitReadStreamRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SplitReadStreamRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return _impl_.name_.Release();
}
inline void SplitReadStreamRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}

// double fraction = 2;
inline void SplitReadStreamRequest::clear_fraction() {
  _impl_.fraction_ = 0;
}
inline double SplitReadStreamRequest::_internal_fraction() const {
  return _impl_.fraction_;
}
inline double SplitReadStreamRequest::fraction() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.fraction)
  return _internal_fraction();
}
inline void SplitReadStreamRequest::_internal_set_fraction(double value) {
  
  _impl_.fraction_ = value;
}
inline void SplitReadStreamRequest::set_fraction(double value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.fraction)
}

// -------------------------------------------------------------------

// SplitReadStreamResponse

// .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
inline bool SplitReadStreamResponse::_internal_has_primary_stream() const {
  return this != internal_default_instance() && _impl_.primary_stream_ != nullptr;
}
inline bool SplitReadStreamResponse::has_primary_stream() const {
  return _internal_has_primary_stream();
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::_internal_primary_stream() const {
  const ::google::cloud::bigquery::storage::v1::ReadStream* p = _impl_.primary_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadStream&>(
      ::google::cloud::bigquery::storage::v1::_ReadStream_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::primary_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  return _internal_primary_stream();
}
inline void SplitReadStreamResponse::unsafe_arena_set_allocated_primary_stream(
    ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_stream_);
  }
  _impl_.primary_stream_ = primary_stream;
  if (primary_stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::release_primary_stream() {
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = _impl_.primary_stream_;
  _impl_.primary_stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::unsafe_arena_release_primary_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = _impl_.primary_stream_;
  _impl_.primary_stream_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::_internal_mutable_primary_stream() {
  
  if (_impl_.primary_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadStream>(GetArenaForAllocation());
    _impl_.primary_stream_ = p;
  }
  return _impl_.primary_stream_;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::mutable_primary_stream() {
  ::google::cloud::bigquery::storage::v1::ReadStream* _msg = _internal_mutable_primary_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  return _msg;
}
inline void SplitReadStreamResponse::set_allocated_primary_stream(::google::cloud::bigquery::storage::v1::ReadStream* primary_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_stream_);
  }
  if (primary_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_stream));
    if (message_arena != submessage_arena) {
      primary_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_stream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.primary_stream_ = primary_stream;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
}

// .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
inline bool SplitReadStreamResponse::_internal_has_remainder_stream() const {
  return this != internal_default_instance() && _impl_.remainder_stream_ != nullptr;
}
inline bool SplitReadStreamResponse::has_remainder_stream() const {
  return _internal_has_remainder_stream();
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::_internal_remainder_stream() const {
  const ::google::cloud::bigquery::storage::v1::ReadStream* p = _impl_.remainder_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadStream&>(
      ::google::cloud::bigquery::storage::v1::_ReadStream_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::remainder_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  return _internal_remainder_stream();
}
inline void SplitReadStreamResponse::unsafe_arena_set_allocated_remainder_stream(
    ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remainder_stream_);
  }
  _impl_.remainder_stream_ = remainder_stream;
  if (remainder_stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::release_remainder_stream() {
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = _impl_.remainder_stream_;
  _impl_.remainder_stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::unsafe_arena_release_remainder_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = _impl_.remainder_stream_;
  _impl_.remainder_stream_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::_internal_mutable_remainder_stream() {
  
  if (_impl_.remainder_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadStream>(GetArenaForAllocation());
    _impl_.remainder_stream_ = p;
  }
  return _impl_.remainder_stream_;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::mutable_remainder_stream() {
  ::google::cloud::bigquery::storage::v1::ReadStream* _msg = _internal_mutable_remainder_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  return _msg;
}
inline void SplitReadStreamResponse::set_allocated_remainder_stream(::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remainder_stream_);
  }
  if (remainder_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remainder_stream));
    if (message_arena != submessage_arena) {
      remainder_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remainder_stream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.remainder_stream_ = remainder_stream;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
}

// -------------------------------------------------------------------

// CreateWriteStreamRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateWriteStreamRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateWriteStreamRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateWriteStreamRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent)
}
inline std::string* CreateWriteStreamRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent)
  return _s;
}
inline const std::string& CreateWriteStreamRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateWriteStreamRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateWriteStreamRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateWriteStreamRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateWriteStreamRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent)
}

// .google.cloud.bigquery.storage.v1.WriteStream write_stream = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateWriteStreamRequest::_internal_has_write_stream() const {
  return this != internal_default_instance() && _impl_.write_stream_ != nullptr;
}
inline bool CreateWriteStreamRequest::has_write_stream() const {
  return _internal_has_write_stream();
}
inline const ::google::cloud::bigquery::storage::v1::WriteStream& CreateWriteStreamRequest::_internal_write_stream() const {
  const ::google::cloud::bigquery::storage::v1::WriteStream* p = _impl_.write_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::WriteStream&>(
      ::google::cloud::bigquery::storage::v1::_WriteStream_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::WriteStream& CreateWriteStreamRequest::write_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.write_stream)
  return _internal_write_stream();
}
inline void CreateWriteStreamRequest::unsafe_arena_set_allocated_write_stream(
    ::google::cloud::bigquery::storage::v1::WriteStream* write_stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.write_stream_);
  }
  _impl_.write_stream_ = write_stream;
  if (write_stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.write_stream)
}
inline ::google::cloud::bigquery::storage::v1::WriteStream* CreateWriteStreamRequest::release_write_stream() {
  
  ::google::cloud::bigquery::storage::v1::WriteStream* temp = _impl_.write_stream_;
  _impl_.write_stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::WriteStream* CreateWriteStreamRequest::unsafe_arena_release_write_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.write_stream)
  
  ::google::cloud::bigquery::storage::v1::WriteStream* temp = _impl_.write_stream_;
  _impl_.write_stream_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::WriteStream* CreateWriteStreamRequest::_internal_mutable_write_stream() {
  
  if (_impl_.write_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::WriteStream>(GetArenaForAllocation());
    _impl_.write_stream_ = p;
  }
  return _impl_.write_stream_;
}
inline ::google::cloud::bigquery::storage::v1::WriteStream* CreateWriteStreamRequest::mutable_write_stream() {
  ::google::cloud::bigquery::storage::v1::WriteStream* _msg = _internal_mutable_write_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.write_stream)
  return _msg;
}
inline void CreateWriteStreamRequest::set_allocated_write_stream(::google::cloud::bigquery::storage::v1::WriteStream* write_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.write_stream_);
  }
  if (write_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(write_stream));
    if (message_arena != submessage_arena) {
      write_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_stream, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.write_stream_ = write_stream;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.write_stream)
}

// -------------------------------------------------------------------

// AppendRowsRequest_ProtoData

// .google.cloud.bigquery.storage.v1.ProtoSchema writer_schema = 1;
inline bool AppendRowsRequest_ProtoData::_internal_has_writer_schema() const {
  return this != internal_default_instance() && _impl_.writer_schema_ != nullptr;
}
inline bool AppendRowsRequest_ProtoData::has_writer_schema() const {
  return _internal_has_writer_schema();
}
inline const ::google::cloud::bigquery::storage::v1::ProtoSchema& AppendRowsRequest_ProtoData::_internal_writer_schema() const {
  const ::google::cloud::bigquery::storage::v1::ProtoSchema* p = _impl_.writer_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ProtoSchema&>(
      ::google::cloud::bigquery::storage::v1::_ProtoSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ProtoSchema& AppendRowsRequest_ProtoData::writer_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.writer_schema)
  return _internal_writer_schema();
}
inline void AppendRowsRequest_ProtoData::unsafe_arena_set_allocated_writer_schema(
    ::google::cloud::bigquery::storage::v1::ProtoSchema* writer_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.writer_schema_);
  }
  _impl_.writer_schema_ = writer_schema;
  if (writer_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.writer_schema)
}
inline ::google::cloud::bigquery::storage::v1::ProtoSchema* AppendRowsRequest_ProtoData::release_writer_schema() {
  
  ::google::cloud::bigquery::storage::v1::ProtoSchema* temp = _impl_.writer_schema_;
  _impl_.writer_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ProtoSchema* AppendRowsRequest_ProtoData::unsafe_arena_release_writer_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.writer_schema)
  
  ::google::cloud::bigquery::storage::v1::ProtoSchema* temp = _impl_.writer_schema_;
  _impl_.writer_schema_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ProtoSchema* AppendRowsRequest_ProtoData::_internal_mutable_writer_schema() {
  
  if (_impl_.writer_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ProtoSchema>(GetArenaForAllocation());
    _impl_.writer_schema_ = p;
  }
  return _impl_.writer_schema_;
}
inline ::google::cloud::bigquery::storage::v1::ProtoSchema* AppendRowsRequest_ProtoData::mutable_writer_schema() {
  ::google::cloud::bigquery::storage::v1::ProtoSchema* _msg = _internal_mutable_writer_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.writer_schema)
  return _msg;
}
inline void AppendRowsRequest_ProtoData::set_allocated_writer_schema(::google::cloud::bigquery::storage::v1::ProtoSchema* writer_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.writer_schema_);
  }
  if (writer_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(writer_schema));
    if (message_arena != submessage_arena) {
      writer_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writer_schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.writer_schema_ = writer_schema;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.writer_schema)
}

// .google.cloud.bigquery.storage.v1.ProtoRows rows = 2;
inline bool AppendRowsRequest_ProtoData::_internal_has_rows() const {
  return this != internal_default_instance() && _impl_.rows_ != nullptr;
}
inline bool AppendRowsRequest_ProtoData::has_rows() const {
  return _internal_has_rows();
}
inline const ::google::cloud::bigquery::storage::v1::ProtoRows& AppendRowsRequest_ProtoData::_internal_rows() const {
  const ::google::cloud::bigquery::storage::v1::ProtoRows* p = _impl_.rows_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ProtoRows&>(
      ::google::cloud::bigquery::storage::v1::_ProtoRows_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ProtoRows& AppendRowsRequest_ProtoData::rows() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.rows)
  return _internal_rows();
}
inline void AppendRowsRequest_ProtoData::unsafe_arena_set_allocated_rows(
    ::google::cloud::bigquery::storage::v1::ProtoRows* rows) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rows_);
  }
  _impl_.rows_ = rows;
  if (rows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.rows)
}
inline ::google::cloud::bigquery::storage::v1::ProtoRows* AppendRowsRequest_ProtoData::release_rows() {
  
  ::google::cloud::bigquery::storage::v1::ProtoRows* temp = _impl_.rows_;
  _impl_.rows_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ProtoRows* AppendRowsRequest_ProtoData::unsafe_arena_release_rows() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.rows)
  
  ::google::cloud::bigquery::storage::v1::ProtoRows* temp = _impl_.rows_;
  _impl_.rows_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ProtoRows* AppendRowsRequest_ProtoData::_internal_mutable_rows() {
  
  if (_impl_.rows_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ProtoRows>(GetArenaForAllocation());
    _impl_.rows_ = p;
  }
  return _impl_.rows_;
}
inline ::google::cloud::bigquery::storage::v1::ProtoRows* AppendRowsRequest_ProtoData::mutable_rows() {
  ::google::cloud::bigquery::storage::v1::ProtoRows* _msg = _internal_mutable_rows();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.rows)
  return _msg;
}
inline void AppendRowsRequest_ProtoData::set_allocated_rows(::google::cloud::bigquery::storage::v1::ProtoRows* rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rows_);
  }
  if (rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rows));
    if (message_arena != submessage_arena) {
      rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rows, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rows_ = rows;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData.rows)
}

// -------------------------------------------------------------------

// AppendRowsRequest

// string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AppendRowsRequest::clear_write_stream() {
  _impl_.write_stream_.ClearToEmpty();
}
inline const std::string& AppendRowsRequest::write_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream)
  return _internal_write_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendRowsRequest::set_write_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_stream_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream)
}
inline std::string* AppendRowsRequest::mutable_write_stream() {
  std::string* _s = _internal_mutable_write_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream)
  return _s;
}
inline const std::string& AppendRowsRequest::_internal_write_stream() const {
  return _impl_.write_stream_.Get();
}
inline void AppendRowsRequest::_internal_set_write_stream(const std::string& value) {
  
  _impl_.write_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendRowsRequest::_internal_mutable_write_stream() {
  
  return _impl_.write_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendRowsRequest::release_write_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream)
  return _impl_.write_stream_.Release();
}
inline void AppendRowsRequest::set_allocated_write_stream(std::string* write_stream) {
  if (write_stream != nullptr) {
    
  } else {
    
  }
  _impl_.write_stream_.SetAllocated(write_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_stream_.IsDefault()) {
    _impl_.write_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream)
}

// .google.protobuf.Int64Value offset = 2;
inline bool AppendRowsRequest::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool AppendRowsRequest::has_offset() const {
  return _internal_has_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& AppendRowsRequest::_internal_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Int64Value* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& AppendRowsRequest::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.offset)
  return _internal_offset();
}
inline void AppendRowsRequest::unsafe_arena_set_allocated_offset(
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsRequest::release_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsRequest::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.offset)
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsRequest::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsRequest::mutable_offset() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.offset)
  return _msg;
}
inline void AppendRowsRequest::set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.offset)
}

// .google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;
inline bool AppendRowsRequest::_internal_has_proto_rows() const {
  return rows_case() == kProtoRows;
}
inline bool AppendRowsRequest::has_proto_rows() const {
  return _internal_has_proto_rows();
}
inline void AppendRowsRequest::set_has_proto_rows() {
  _impl_._oneof_case_[0] = kProtoRows;
}
inline void AppendRowsRequest::clear_proto_rows() {
  if (_internal_has_proto_rows()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rows_.proto_rows_;
    }
    clear_has_rows();
  }
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* AppendRowsRequest::release_proto_rows() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
  if (_internal_has_proto_rows()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* temp = _impl_.rows_.proto_rows_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rows_.proto_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData& AppendRowsRequest::_internal_proto_rows() const {
  return _internal_has_proto_rows()
      ? *_impl_.rows_.proto_rows_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData&>(::google::cloud::bigquery::storage::v1::_AppendRowsRequest_ProtoData_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData& AppendRowsRequest::proto_rows() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
  return _internal_proto_rows();
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* AppendRowsRequest::unsafe_arena_release_proto_rows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
  if (_internal_has_proto_rows()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* temp = _impl_.rows_.proto_rows_;
    _impl_.rows_.proto_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendRowsRequest::unsafe_arena_set_allocated_proto_rows(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows) {
  clear_rows();
  if (proto_rows) {
    set_has_proto_rows();
    _impl_.rows_.proto_rows_ = proto_rows;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* AppendRowsRequest::_internal_mutable_proto_rows() {
  if (!_internal_has_proto_rows()) {
    clear_rows();
    set_has_proto_rows();
    _impl_.rows_.proto_rows_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData >(GetArenaForAllocation());
  }
  return _impl_.rows_.proto_rows_;
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* AppendRowsRequest::mutable_proto_rows() {
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* _msg = _internal_mutable_proto_rows();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
  return _msg;
}

// string trace_id = 6;
inline void AppendRowsRequest::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& AppendRowsRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id)
  return _internal_trace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendRowsRequest::set_trace_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trace_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id)
}
inline std::string* AppendRowsRequest::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id)
  return _s;
}
inline const std::string& AppendRowsRequest::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void AppendRowsRequest::_internal_set_trace_id(const std::string& value) {
  
  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendRowsRequest::_internal_mutable_trace_id() {
  
  return _impl_.trace_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendRowsRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id)
  return _impl_.trace_id_.Release();
}
inline void AppendRowsRequest::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  _impl_.trace_id_.SetAllocated(trace_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trace_id_.IsDefault()) {
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id)
}

inline bool AppendRowsRequest::has_rows() const {
  return rows_case() != ROWS_NOT_SET;
}
inline void AppendRowsRequest::clear_has_rows() {
  _impl_._oneof_case_[0] = ROWS_NOT_SET;
}
inline AppendRowsRequest::RowsCase AppendRowsRequest::rows_case() const {
  return AppendRowsRequest::RowsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppendRowsResponse_AppendResult

// .google.protobuf.Int64Value offset = 1;
inline bool AppendRowsResponse_AppendResult::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool AppendRowsResponse_AppendResult::has_offset() const {
  return _internal_has_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& AppendRowsResponse_AppendResult::_internal_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Int64Value* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& AppendRowsResponse_AppendResult::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult.offset)
  return _internal_offset();
}
inline void AppendRowsResponse_AppendResult::unsafe_arena_set_allocated_offset(
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult.offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsResponse_AppendResult::release_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsResponse_AppendResult::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult.offset)
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsResponse_AppendResult::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* AppendRowsResponse_AppendResult::mutable_offset() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult.offset)
  return _msg;
}
inline void AppendRowsResponse_AppendResult::set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult.offset)
}

// -------------------------------------------------------------------

// AppendRowsResponse

// .google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult append_result = 1;
inline bool AppendRowsResponse::_internal_has_append_result() const {
  return response_case() == kAppendResult;
}
inline bool AppendRowsResponse::has_append_result() const {
  return _internal_has_append_result();
}
inline void AppendRowsResponse::set_has_append_result() {
  _impl_._oneof_case_[0] = kAppendResult;
}
inline void AppendRowsResponse::clear_append_result() {
  if (_internal_has_append_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.append_result_;
    }
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* AppendRowsResponse::release_append_result() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
  if (_internal_has_append_result()) {
    clear_has_response();
    ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* temp = _impl_.response_.append_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.append_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult& AppendRowsResponse::_internal_append_result() const {
  return _internal_has_append_result()
      ? *_impl_.response_.append_result_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult&>(::google::cloud::bigquery::storage::v1::_AppendRowsResponse_AppendResult_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult& AppendRowsResponse::append_result() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
  return _internal_append_result();
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* AppendRowsResponse::unsafe_arena_release_append_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
  if (_internal_has_append_result()) {
    clear_has_response();
    ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* temp = _impl_.response_.append_result_;
    _impl_.response_.append_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendRowsResponse::unsafe_arena_set_allocated_append_result(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result) {
  clear_response();
  if (append_result) {
    set_has_append_result();
    _impl_.response_.append_result_ = append_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* AppendRowsResponse::_internal_mutable_append_result() {
  if (!_internal_has_append_result()) {
    clear_response();
    set_has_append_result();
    _impl_.response_.append_result_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult >(GetArenaForAllocation());
  }
  return _impl_.response_.append_result_;
}
inline ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* AppendRowsResponse::mutable_append_result() {
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* _msg = _internal_mutable_append_result();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
  return _msg;
}

// .google.rpc.Status error = 2;
inline bool AppendRowsResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline bool AppendRowsResponse::has_error() const {
  return _internal_has_error();
}
inline void AppendRowsResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::google::rpc::Status* AppendRowsResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::google::rpc::Status* temp = _impl_.response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::rpc::Status& AppendRowsResponse::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.response_.error_
      : reinterpret_cast< ::google::rpc::Status&>(::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& AppendRowsResponse::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* AppendRowsResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::google::rpc::Status* temp = _impl_.response_.error_;
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendRowsResponse::unsafe_arena_set_allocated_error(::google::rpc::Status* error) {
  clear_response();
  if (error) {
    set_has_error();
    _impl_.response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
}
inline ::google::rpc::Status* AppendRowsResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    _impl_.response_.error_ = CreateMaybeMessage< ::google::rpc::Status >(GetArenaForAllocation());
  }
  return _impl_.response_.error_;
}
inline ::google::rpc::Status* AppendRowsResponse::mutable_error() {
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
  return _msg;
}

// .google.cloud.bigquery.storage.v1.TableSchema updated_schema = 3;
inline bool AppendRowsResponse::_internal_has_updated_schema() const {
  return this != internal_default_instance() && _impl_.updated_schema_ != nullptr;
}
inline bool AppendRowsResponse::has_updated_schema() const {
  return _internal_has_updated_schema();
}
inline const ::google::cloud::bigquery::storage::v1::TableSchema& AppendRowsResponse::_internal_updated_schema() const {
  const ::google::cloud::bigquery::storage::v1::TableSchema* p = _impl_.updated_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::TableSchema&>(
      ::google::cloud::bigquery::storage::v1::_TableSchema_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::TableSchema& AppendRowsResponse::updated_schema() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.updated_schema)
  return _internal_updated_schema();
}
inline void AppendRowsResponse::unsafe_arena_set_allocated_updated_schema(
    ::google::cloud::bigquery::storage::v1::TableSchema* updated_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_schema_);
  }
  _impl_.updated_schema_ = updated_schema;
  if (updated_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.updated_schema)
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* AppendRowsResponse::release_updated_schema() {
  
  ::google::cloud::bigquery::storage::v1::TableSchema* temp = _impl_.updated_schema_;
  _impl_.updated_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* AppendRowsResponse::unsafe_arena_release_updated_schema() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.updated_schema)
  
  ::google::cloud::bigquery::storage::v1::TableSchema* temp = _impl_.updated_schema_;
  _impl_.updated_schema_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* AppendRowsResponse::_internal_mutable_updated_schema() {
  
  if (_impl_.updated_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::TableSchema>(GetArenaForAllocation());
    _impl_.updated_schema_ = p;
  }
  return _impl_.updated_schema_;
}
inline ::google::cloud::bigquery::storage::v1::TableSchema* AppendRowsResponse::mutable_updated_schema() {
  ::google::cloud::bigquery::storage::v1::TableSchema* _msg = _internal_mutable_updated_schema();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.updated_schema)
  return _msg;
}
inline void AppendRowsResponse::set_allocated_updated_schema(::google::cloud::bigquery::storage::v1::TableSchema* updated_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_schema_);
  }
  if (updated_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_schema));
    if (message_arena != submessage_arena) {
      updated_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_schema_ = updated_schema;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.updated_schema)
}

// repeated .google.cloud.bigquery.storage.v1.RowError row_errors = 4;
inline int AppendRowsResponse::_internal_row_errors_size() const {
  return _impl_.row_errors_.size();
}
inline int AppendRowsResponse::row_errors_size() const {
  return _internal_row_errors_size();
}
inline void AppendRowsResponse::clear_row_errors() {
  _impl_.row_errors_.Clear();
}
inline ::google::cloud::bigquery::storage::v1::RowError* AppendRowsResponse::mutable_row_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.row_errors)
  return _impl_.row_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::RowError >*
AppendRowsResponse::mutable_row_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.AppendRowsResponse.row_errors)
  return &_impl_.row_errors_;
}
inline const ::google::cloud::bigquery::storage::v1::RowError& AppendRowsResponse::_internal_row_errors(int index) const {
  return _impl_.row_errors_.Get(index);
}
inline const ::google::cloud::bigquery::storage::v1::RowError& AppendRowsResponse::row_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.row_errors)
  return _internal_row_errors(index);
}
inline ::google::cloud::bigquery::storage::v1::RowError* AppendRowsResponse::_internal_add_row_errors() {
  return _impl_.row_errors_.Add();
}
inline ::google::cloud::bigquery::storage::v1::RowError* AppendRowsResponse::add_row_errors() {
  ::google::cloud::bigquery::storage::v1::RowError* _add = _internal_add_row_errors();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.AppendRowsResponse.row_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::RowError >&
AppendRowsResponse::row_errors() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.AppendRowsResponse.row_errors)
  return _impl_.row_errors_;
}

// string write_stream = 5;
inline void AppendRowsResponse::clear_write_stream() {
  _impl_.write_stream_.ClearToEmpty();
}
inline const std::string& AppendRowsResponse::write_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream)
  return _internal_write_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendRowsResponse::set_write_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_stream_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream)
}
inline std::string* AppendRowsResponse::mutable_write_stream() {
  std::string* _s = _internal_mutable_write_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream)
  return _s;
}
inline const std::string& AppendRowsResponse::_internal_write_stream() const {
  return _impl_.write_stream_.Get();
}
inline void AppendRowsResponse::_internal_set_write_stream(const std::string& value) {
  
  _impl_.write_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendRowsResponse::_internal_mutable_write_stream() {
  
  return _impl_.write_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendRowsResponse::release_write_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream)
  return _impl_.write_stream_.Release();
}
inline void AppendRowsResponse::set_allocated_write_stream(std::string* write_stream) {
  if (write_stream != nullptr) {
    
  } else {
    
  }
  _impl_.write_stream_.SetAllocated(write_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_stream_.IsDefault()) {
    _impl_.write_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream)
}

inline bool AppendRowsResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void AppendRowsResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline AppendRowsResponse::ResponseCase AppendRowsResponse::response_case() const {
  return AppendRowsResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetWriteStreamRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetWriteStreamRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetWriteStreamRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWriteStreamRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name)
}
inline std::string* GetWriteStreamRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name)
  return _s;
}
inline const std::string& GetWriteStreamRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetWriteStreamRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetWriteStreamRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetWriteStreamRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name)
  return _impl_.name_.Release();
}
inline void GetWriteStreamRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name)
}

// .google.cloud.bigquery.storage.v1.WriteStreamView view = 3;
inline void GetWriteStreamRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::WriteStreamView GetWriteStreamRequest::_internal_view() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::WriteStreamView >(_impl_.view_);
}
inline ::google::cloud::bigquery::storage::v1::WriteStreamView GetWriteStreamRequest::view() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.view)
  return _internal_view();
}
inline void GetWriteStreamRequest::_internal_set_view(::google::cloud::bigquery::storage::v1::WriteStreamView value) {
  
  _impl_.view_ = value;
}
inline void GetWriteStreamRequest::set_view(::google::cloud::bigquery::storage::v1::WriteStreamView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.GetWriteStreamRequest.view)
}

// -------------------------------------------------------------------

// BatchCommitWriteStreamsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void BatchCommitWriteStreamsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchCommitWriteStreamsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchCommitWriteStreamsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent)
}
inline std::string* BatchCommitWriteStreamsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent)
  return _s;
}
inline const std::string& BatchCommitWriteStreamsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchCommitWriteStreamsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCommitWriteStreamsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchCommitWriteStreamsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchCommitWriteStreamsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent)
}

// repeated string write_streams = 2 [(.google.api.field_behavior) = REQUIRED];
inline int BatchCommitWriteStreamsRequest::_internal_write_streams_size() const {
  return _impl_.write_streams_.size();
}
inline int BatchCommitWriteStreamsRequest::write_streams_size() const {
  return _internal_write_streams_size();
}
inline void BatchCommitWriteStreamsRequest::clear_write_streams() {
  _impl_.write_streams_.Clear();
}
inline std::string* BatchCommitWriteStreamsRequest::add_write_streams() {
  std::string* _s = _internal_add_write_streams();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
  return _s;
}
inline const std::string& BatchCommitWriteStreamsRequest::_internal_write_streams(int index) const {
  return _impl_.write_streams_.Get(index);
}
inline const std::string& BatchCommitWriteStreamsRequest::write_streams(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
  return _internal_write_streams(index);
}
inline std::string* BatchCommitWriteStreamsRequest::mutable_write_streams(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
  return _impl_.write_streams_.Mutable(index);
}
inline void BatchCommitWriteStreamsRequest::set_write_streams(int index, const std::string& value) {
  _impl_.write_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::set_write_streams(int index, std::string&& value) {
  _impl_.write_streams_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::set_write_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.write_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::set_write_streams(int index, const char* value, size_t size) {
  _impl_.write_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline std::string* BatchCommitWriteStreamsRequest::_internal_add_write_streams() {
  return _impl_.write_streams_.Add();
}
inline void BatchCommitWriteStreamsRequest::add_write_streams(const std::string& value) {
  _impl_.write_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::add_write_streams(std::string&& value) {
  _impl_.write_streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::add_write_streams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.write_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline void BatchCommitWriteStreamsRequest::add_write_streams(const char* value, size_t size) {
  _impl_.write_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCommitWriteStreamsRequest::write_streams() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
  return _impl_.write_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchCommitWriteStreamsRequest::mutable_write_streams() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams)
  return &_impl_.write_streams_;
}

// -------------------------------------------------------------------

// BatchCommitWriteStreamsResponse

// .google.protobuf.Timestamp commit_time = 1;
inline bool BatchCommitWriteStreamsResponse::_internal_has_commit_time() const {
  return this != internal_default_instance() && _impl_.commit_time_ != nullptr;
}
inline bool BatchCommitWriteStreamsResponse::has_commit_time() const {
  return _internal_has_commit_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BatchCommitWriteStreamsResponse::_internal_commit_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.commit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BatchCommitWriteStreamsResponse::commit_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.commit_time)
  return _internal_commit_time();
}
inline void BatchCommitWriteStreamsResponse::unsafe_arena_set_allocated_commit_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_time_);
  }
  _impl_.commit_time_ = commit_time;
  if (commit_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.commit_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BatchCommitWriteStreamsResponse::release_commit_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_time_;
  _impl_.commit_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BatchCommitWriteStreamsResponse::unsafe_arena_release_commit_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.commit_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.commit_time_;
  _impl_.commit_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BatchCommitWriteStreamsResponse::_internal_mutable_commit_time() {
  
  if (_impl_.commit_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.commit_time_ = p;
  }
  return _impl_.commit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BatchCommitWriteStreamsResponse::mutable_commit_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_commit_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.commit_time)
  return _msg;
}
inline void BatchCommitWriteStreamsResponse::set_allocated_commit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* commit_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_time_);
  }
  if (commit_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_time));
    if (message_arena != submessage_arena) {
      commit_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commit_time_ = commit_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.commit_time)
}

// repeated .google.cloud.bigquery.storage.v1.StorageError stream_errors = 2;
inline int BatchCommitWriteStreamsResponse::_internal_stream_errors_size() const {
  return _impl_.stream_errors_.size();
}
inline int BatchCommitWriteStreamsResponse::stream_errors_size() const {
  return _internal_stream_errors_size();
}
inline void BatchCommitWriteStreamsResponse::clear_stream_errors() {
  _impl_.stream_errors_.Clear();
}
inline ::google::cloud::bigquery::storage::v1::StorageError* BatchCommitWriteStreamsResponse::mutable_stream_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.stream_errors)
  return _impl_.stream_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::StorageError >*
BatchCommitWriteStreamsResponse::mutable_stream_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.stream_errors)
  return &_impl_.stream_errors_;
}
inline const ::google::cloud::bigquery::storage::v1::StorageError& BatchCommitWriteStreamsResponse::_internal_stream_errors(int index) const {
  return _impl_.stream_errors_.Get(index);
}
inline const ::google::cloud::bigquery::storage::v1::StorageError& BatchCommitWriteStreamsResponse::stream_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.stream_errors)
  return _internal_stream_errors(index);
}
inline ::google::cloud::bigquery::storage::v1::StorageError* BatchCommitWriteStreamsResponse::_internal_add_stream_errors() {
  return _impl_.stream_errors_.Add();
}
inline ::google::cloud::bigquery::storage::v1::StorageError* BatchCommitWriteStreamsResponse::add_stream_errors() {
  ::google::cloud::bigquery::storage::v1::StorageError* _add = _internal_add_stream_errors();
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.stream_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::storage::v1::StorageError >&
BatchCommitWriteStreamsResponse::stream_errors() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse.stream_errors)
  return _impl_.stream_errors_;
}

// -------------------------------------------------------------------

// FinalizeWriteStreamRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void FinalizeWriteStreamRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FinalizeWriteStreamRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FinalizeWriteStreamRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name)
}
inline std::string* FinalizeWriteStreamRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name)
  return _s;
}
inline const std::string& FinalizeWriteStreamRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FinalizeWriteStreamRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FinalizeWriteStreamRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FinalizeWriteStreamRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name)
  return _impl_.name_.Release();
}
inline void FinalizeWriteStreamRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name)
}

// -------------------------------------------------------------------

// FinalizeWriteStreamResponse

// int64 row_count = 1;
inline void FinalizeWriteStreamResponse::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t FinalizeWriteStreamResponse::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t FinalizeWriteStreamResponse::row_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse.row_count)
  return _internal_row_count();
}
inline void FinalizeWriteStreamResponse::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void FinalizeWriteStreamResponse::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse.row_count)
}

// -------------------------------------------------------------------

// FlushRowsRequest

// string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void FlushRowsRequest::clear_write_stream() {
  _impl_.write_stream_.ClearToEmpty();
}
inline const std::string& FlushRowsRequest::write_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream)
  return _internal_write_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlushRowsRequest::set_write_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_stream_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream)
}
inline std::string* FlushRowsRequest::mutable_write_stream() {
  std::string* _s = _internal_mutable_write_stream();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream)
  return _s;
}
inline const std::string& FlushRowsRequest::_internal_write_stream() const {
  return _impl_.write_stream_.Get();
}
inline void FlushRowsRequest::_internal_set_write_stream(const std::string& value) {
  
  _impl_.write_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* FlushRowsRequest::_internal_mutable_write_stream() {
  
  return _impl_.write_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* FlushRowsRequest::release_write_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream)
  return _impl_.write_stream_.Release();
}
inline void FlushRowsRequest::set_allocated_write_stream(std::string* write_stream) {
  if (write_stream != nullptr) {
    
  } else {
    
  }
  _impl_.write_stream_.SetAllocated(write_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_stream_.IsDefault()) {
    _impl_.write_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream)
}

// .google.protobuf.Int64Value offset = 2;
inline bool FlushRowsRequest::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool FlushRowsRequest::has_offset() const {
  return _internal_has_offset();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& FlushRowsRequest::_internal_offset() const {
  const ::PROTOBUF_NAMESPACE_ID::Int64Value* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& FlushRowsRequest::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.FlushRowsRequest.offset)
  return _internal_offset();
}
inline void FlushRowsRequest::unsafe_arena_set_allocated_offset(
    ::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.FlushRowsRequest.offset)
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* FlushRowsRequest::release_offset() {
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* FlushRowsRequest::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.FlushRowsRequest.offset)
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* FlushRowsRequest::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* FlushRowsRequest::mutable_offset() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.FlushRowsRequest.offset)
  return _msg;
}
inline void FlushRowsRequest::set_allocated_offset(::PROTOBUF_NAMESPACE_ID::Int64Value* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.FlushRowsRequest.offset)
}

// -------------------------------------------------------------------

// FlushRowsResponse

// int64 offset = 1;
inline void FlushRowsResponse::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t FlushRowsResponse::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t FlushRowsResponse::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.FlushRowsResponse.offset)
  return _internal_offset();
}
inline void FlushRowsResponse::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void FlushRowsResponse::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.FlushRowsResponse.offset)
}

// -------------------------------------------------------------------

// StorageError

// .google.cloud.bigquery.storage.v1.StorageError.StorageErrorCode code = 1;
inline void StorageError::clear_code() {
  _impl_.code_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode StorageError::_internal_code() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode >(_impl_.code_);
}
inline ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode StorageError::code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StorageError.code)
  return _internal_code();
}
inline void StorageError::_internal_set_code(::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode value) {
  
  _impl_.code_ = value;
}
inline void StorageError::set_code(::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StorageError.code)
}

// string entity = 2;
inline void StorageError::clear_entity() {
  _impl_.entity_.ClearToEmpty();
}
inline const std::string& StorageError::entity() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StorageError.entity)
  return _internal_entity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageError::set_entity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StorageError.entity)
}
inline std::string* StorageError::mutable_entity() {
  std::string* _s = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.StorageError.entity)
  return _s;
}
inline const std::string& StorageError::_internal_entity() const {
  return _impl_.entity_.Get();
}
inline void StorageError::_internal_set_entity(const std::string& value) {
  
  _impl_.entity_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageError::_internal_mutable_entity() {
  
  return _impl_.entity_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageError::release_entity() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.StorageError.entity)
  return _impl_.entity_.Release();
}
inline void StorageError::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  _impl_.entity_.SetAllocated(entity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_.IsDefault()) {
    _impl_.entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.StorageError.entity)
}

// string error_message = 3;
inline void StorageError::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& StorageError::error_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StorageError.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageError::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StorageError.error_message)
}
inline std::string* StorageError::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.StorageError.error_message)
  return _s;
}
inline const std::string& StorageError::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void StorageError::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageError::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageError::release_error_message() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.StorageError.error_message)
  return _impl_.error_message_.Release();
}
inline void StorageError::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.StorageError.error_message)
}

// -------------------------------------------------------------------

// RowError

// int64 index = 1;
inline void RowError::clear_index() {
  _impl_.index_ = int64_t{0};
}
inline int64_t RowError::_internal_index() const {
  return _impl_.index_;
}
inline int64_t RowError::index() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.RowError.index)
  return _internal_index();
}
inline void RowError::_internal_set_index(int64_t value) {
  
  _impl_.index_ = value;
}
inline void RowError::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.RowError.index)
}

// .google.cloud.bigquery.storage.v1.RowError.RowErrorCode code = 2;
inline void RowError::clear_code() {
  _impl_.code_ = 0;
}
inline ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode RowError::_internal_code() const {
  return static_cast< ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode >(_impl_.code_);
}
inline ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode RowError::code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.RowError.code)
  return _internal_code();
}
inline void RowError::_internal_set_code(::google::cloud::bigquery::storage::v1::RowError_RowErrorCode value) {
  
  _impl_.code_ = value;
}
inline void RowError::set_code(::google::cloud::bigquery::storage::v1::RowError_RowErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.RowError.code)
}

// string message = 3;
inline void RowError::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RowError::message() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.RowError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RowError::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.RowError.message)
}
inline std::string* RowError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.RowError.message)
  return _s;
}
inline const std::string& RowError::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RowError::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RowError::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RowError::release_message() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.RowError.message)
  return _impl_.message_.Release();
}
inline void RowError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.RowError.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode>() {
  return ::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode>() {
  return ::google::cloud::bigquery::storage::v1::RowError_RowErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
