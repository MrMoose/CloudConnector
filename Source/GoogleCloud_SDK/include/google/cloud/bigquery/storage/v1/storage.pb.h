// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/cloud/bigquery/storage/v1/arrow.pb.h"
#include "google/cloud/bigquery/storage/v1/avro.pb.h"
#include "google/cloud/bigquery/storage/v1/stream.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class CreateReadSessionRequest;
class CreateReadSessionRequestDefaultTypeInternal;
extern CreateReadSessionRequestDefaultTypeInternal _CreateReadSessionRequest_default_instance_;
class ReadRowsRequest;
class ReadRowsRequestDefaultTypeInternal;
extern ReadRowsRequestDefaultTypeInternal _ReadRowsRequest_default_instance_;
class ReadRowsResponse;
class ReadRowsResponseDefaultTypeInternal;
extern ReadRowsResponseDefaultTypeInternal _ReadRowsResponse_default_instance_;
class SplitReadStreamRequest;
class SplitReadStreamRequestDefaultTypeInternal;
extern SplitReadStreamRequestDefaultTypeInternal _SplitReadStreamRequest_default_instance_;
class SplitReadStreamResponse;
class SplitReadStreamResponseDefaultTypeInternal;
extern SplitReadStreamResponseDefaultTypeInternal _SplitReadStreamResponse_default_instance_;
class StreamStats;
class StreamStatsDefaultTypeInternal;
extern StreamStatsDefaultTypeInternal _StreamStats_default_instance_;
class StreamStats_Progress;
class StreamStats_ProgressDefaultTypeInternal;
extern StreamStats_ProgressDefaultTypeInternal _StreamStats_Progress_default_instance_;
class ThrottleState;
class ThrottleStateDefaultTypeInternal;
extern ThrottleStateDefaultTypeInternal _ThrottleState_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::CreateReadSessionRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadRowsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadRowsRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ReadRowsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadRowsResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::SplitReadStreamRequest>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::SplitReadStreamResponse>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::StreamStats* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::StreamStats_Progress* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats_Progress>(Arena*);
template<> ::google::cloud::bigquery::storage::v1::ThrottleState* Arena::CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ThrottleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {

// ===================================================================

class CreateReadSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.CreateReadSessionRequest) */ {
 public:
  inline CreateReadSessionRequest() : CreateReadSessionRequest(nullptr) {}
  virtual ~CreateReadSessionRequest();

  CreateReadSessionRequest(const CreateReadSessionRequest& from);
  CreateReadSessionRequest(CreateReadSessionRequest&& from) noexcept
    : CreateReadSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateReadSessionRequest& operator=(const CreateReadSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReadSessionRequest& operator=(CreateReadSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReadSessionRequest& default_instance();

  static inline const CreateReadSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateReadSessionRequest*>(
               &_CreateReadSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateReadSessionRequest& a, CreateReadSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReadSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReadSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReadSessionRequest* New() const final {
    return CreateMaybeMessage<CreateReadSessionRequest>(nullptr);
  }

  CreateReadSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReadSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReadSessionRequest& from);
  void MergeFrom(const CreateReadSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReadSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.CreateReadSessionRequest";
  }
  protected:
  explicit CreateReadSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kReadSessionFieldNumber = 2,
    kMaxStreamCountFieldNumber = 3,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_read_session() const;
  private:
  bool _internal_has_read_session() const;
  public:
  void clear_read_session();
  const ::google::cloud::bigquery::storage::v1::ReadSession& read_session() const;
  ::google::cloud::bigquery::storage::v1::ReadSession* release_read_session();
  ::google::cloud::bigquery::storage::v1::ReadSession* mutable_read_session();
  void set_allocated_read_session(::google::cloud::bigquery::storage::v1::ReadSession* read_session);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadSession& _internal_read_session() const;
  ::google::cloud::bigquery::storage::v1::ReadSession* _internal_mutable_read_session();
  public:
  void unsafe_arena_set_allocated_read_session(
      ::google::cloud::bigquery::storage::v1::ReadSession* read_session);
  ::google::cloud::bigquery::storage::v1::ReadSession* unsafe_arena_release_read_session();

  // int32 max_stream_count = 3;
  void clear_max_stream_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_stream_count() const;
  void set_max_stream_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_stream_count() const;
  void _internal_set_max_stream_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::cloud::bigquery::storage::v1::ReadSession* read_session_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_stream_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadRowsRequest) */ {
 public:
  inline ReadRowsRequest() : ReadRowsRequest(nullptr) {}
  virtual ~ReadRowsRequest();

  ReadRowsRequest(const ReadRowsRequest& from);
  ReadRowsRequest(ReadRowsRequest&& from) noexcept
    : ReadRowsRequest() {
    *this = ::std::move(from);
  }

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsRequest& operator=(ReadRowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRowsRequest& default_instance();

  static inline const ReadRowsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRowsRequest*>(
               &_ReadRowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadRowsRequest& a, ReadRowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRowsRequest* New() const final {
    return CreateMaybeMessage<ReadRowsRequest>(nullptr);
  }

  ReadRowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRowsRequest& from);
  void MergeFrom(const ReadRowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadRowsRequest";
  }
  protected:
  explicit ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadStreamFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_read_stream();
  const std::string& read_stream() const;
  void set_read_stream(const std::string& value);
  void set_read_stream(std::string&& value);
  void set_read_stream(const char* value);
  void set_read_stream(const char* value, size_t size);
  std::string* mutable_read_stream();
  std::string* release_read_stream();
  void set_allocated_read_stream(std::string* read_stream);
  private:
  const std::string& _internal_read_stream() const;
  void _internal_set_read_stream(const std::string& value);
  std::string* _internal_mutable_read_stream();
  public:

  // int64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadRowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_stream_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ThrottleState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ThrottleState) */ {
 public:
  inline ThrottleState() : ThrottleState(nullptr) {}
  virtual ~ThrottleState();

  ThrottleState(const ThrottleState& from);
  ThrottleState(ThrottleState&& from) noexcept
    : ThrottleState() {
    *this = ::std::move(from);
  }

  inline ThrottleState& operator=(const ThrottleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThrottleState& operator=(ThrottleState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThrottleState& default_instance();

  static inline const ThrottleState* internal_default_instance() {
    return reinterpret_cast<const ThrottleState*>(
               &_ThrottleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThrottleState& a, ThrottleState& b) {
    a.Swap(&b);
  }
  inline void Swap(ThrottleState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThrottleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThrottleState* New() const final {
    return CreateMaybeMessage<ThrottleState>(nullptr);
  }

  ThrottleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThrottleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThrottleState& from);
  void MergeFrom(const ThrottleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThrottleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ThrottleState";
  }
  protected:
  explicit ThrottleState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThrottlePercentFieldNumber = 1,
  };
  // int32 throttle_percent = 1;
  void clear_throttle_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_percent() const;
  void set_throttle_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throttle_percent() const;
  void _internal_set_throttle_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ThrottleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StreamStats_Progress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.StreamStats.Progress) */ {
 public:
  inline StreamStats_Progress() : StreamStats_Progress(nullptr) {}
  virtual ~StreamStats_Progress();

  StreamStats_Progress(const StreamStats_Progress& from);
  StreamStats_Progress(StreamStats_Progress&& from) noexcept
    : StreamStats_Progress() {
    *this = ::std::move(from);
  }

  inline StreamStats_Progress& operator=(const StreamStats_Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStats_Progress& operator=(StreamStats_Progress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStats_Progress& default_instance();

  static inline const StreamStats_Progress* internal_default_instance() {
    return reinterpret_cast<const StreamStats_Progress*>(
               &_StreamStats_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamStats_Progress& a, StreamStats_Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStats_Progress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStats_Progress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStats_Progress* New() const final {
    return CreateMaybeMessage<StreamStats_Progress>(nullptr);
  }

  StreamStats_Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStats_Progress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStats_Progress& from);
  void MergeFrom(const StreamStats_Progress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStats_Progress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.StreamStats.Progress";
  }
  protected:
  explicit StreamStats_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtResponseStartFieldNumber = 1,
    kAtResponseEndFieldNumber = 2,
  };
  // double at_response_start = 1;
  void clear_at_response_start();
  double at_response_start() const;
  void set_at_response_start(double value);
  private:
  double _internal_at_response_start() const;
  void _internal_set_at_response_start(double value);
  public:

  // double at_response_end = 2;
  void clear_at_response_end();
  double at_response_end() const;
  void set_at_response_end(double value);
  private:
  double _internal_at_response_end() const;
  void _internal_set_at_response_end(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.StreamStats.Progress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double at_response_start_;
  double at_response_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StreamStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.StreamStats) */ {
 public:
  inline StreamStats() : StreamStats(nullptr) {}
  virtual ~StreamStats();

  StreamStats(const StreamStats& from);
  StreamStats(StreamStats&& from) noexcept
    : StreamStats() {
    *this = ::std::move(from);
  }

  inline StreamStats& operator=(const StreamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStats& operator=(StreamStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStats& default_instance();

  static inline const StreamStats* internal_default_instance() {
    return reinterpret_cast<const StreamStats*>(
               &_StreamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamStats& a, StreamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStats* New() const final {
    return CreateMaybeMessage<StreamStats>(nullptr);
  }

  StreamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStats& from);
  void MergeFrom(const StreamStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.StreamStats";
  }
  protected:
  explicit StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamStats_Progress Progress;

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
  };
  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& progress() const;
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* release_progress();
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* mutable_progress();
  void set_allocated_progress(::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress);
  private:
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& _internal_progress() const;
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress);
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* unsafe_arena_release_progress();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.StreamStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadRowsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.ReadRowsResponse) */ {
 public:
  inline ReadRowsResponse() : ReadRowsResponse(nullptr) {}
  virtual ~ReadRowsResponse();

  ReadRowsResponse(const ReadRowsResponse& from);
  ReadRowsResponse(ReadRowsResponse&& from) noexcept
    : ReadRowsResponse() {
    *this = ::std::move(from);
  }

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRowsResponse& operator=(ReadRowsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRowsResponse& default_instance();

  enum RowsCase {
    kAvroRows = 3,
    kArrowRecordBatch = 4,
    ROWS_NOT_SET = 0,
  };

  static inline const ReadRowsResponse* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse*>(
               &_ReadRowsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadRowsResponse& a, ReadRowsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRowsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRowsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRowsResponse* New() const final {
    return CreateMaybeMessage<ReadRowsResponse>(nullptr);
  }

  ReadRowsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRowsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRowsResponse& from);
  void MergeFrom(const ReadRowsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRowsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.ReadRowsResponse";
  }
  protected:
  explicit ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kThrottleStateFieldNumber = 5,
    kRowCountFieldNumber = 6,
    kAvroRowsFieldNumber = 3,
    kArrowRecordBatchFieldNumber = 4,
  };
  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::google::cloud::bigquery::storage::v1::StreamStats& stats() const;
  ::google::cloud::bigquery::storage::v1::StreamStats* release_stats();
  ::google::cloud::bigquery::storage::v1::StreamStats* mutable_stats();
  void set_allocated_stats(::google::cloud::bigquery::storage::v1::StreamStats* stats);
  private:
  const ::google::cloud::bigquery::storage::v1::StreamStats& _internal_stats() const;
  ::google::cloud::bigquery::storage::v1::StreamStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::google::cloud::bigquery::storage::v1::StreamStats* stats);
  ::google::cloud::bigquery::storage::v1::StreamStats* unsafe_arena_release_stats();

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  bool has_throttle_state() const;
  private:
  bool _internal_has_throttle_state() const;
  public:
  void clear_throttle_state();
  const ::google::cloud::bigquery::storage::v1::ThrottleState& throttle_state() const;
  ::google::cloud::bigquery::storage::v1::ThrottleState* release_throttle_state();
  ::google::cloud::bigquery::storage::v1::ThrottleState* mutable_throttle_state();
  void set_allocated_throttle_state(::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state);
  private:
  const ::google::cloud::bigquery::storage::v1::ThrottleState& _internal_throttle_state() const;
  ::google::cloud::bigquery::storage::v1::ThrottleState* _internal_mutable_throttle_state();
  public:
  void unsafe_arena_set_allocated_throttle_state(
      ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state);
  ::google::cloud::bigquery::storage::v1::ThrottleState* unsafe_arena_release_throttle_state();

  // int64 row_count = 6;
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::int64 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
  bool has_avro_rows() const;
  private:
  bool _internal_has_avro_rows() const;
  public:
  void clear_avro_rows();
  const ::google::cloud::bigquery::storage::v1::AvroRows& avro_rows() const;
  ::google::cloud::bigquery::storage::v1::AvroRows* release_avro_rows();
  ::google::cloud::bigquery::storage::v1::AvroRows* mutable_avro_rows();
  void set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows);
  private:
  const ::google::cloud::bigquery::storage::v1::AvroRows& _internal_avro_rows() const;
  ::google::cloud::bigquery::storage::v1::AvroRows* _internal_mutable_avro_rows();
  public:
  void unsafe_arena_set_allocated_avro_rows(
      ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows);
  ::google::cloud::bigquery::storage::v1::AvroRows* unsafe_arena_release_avro_rows();

  // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
  bool has_arrow_record_batch() const;
  private:
  bool _internal_has_arrow_record_batch() const;
  public:
  void clear_arrow_record_batch();
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& arrow_record_batch() const;
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* release_arrow_record_batch();
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* mutable_arrow_record_batch();
  void set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch);
  private:
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& _internal_arrow_record_batch() const;
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* _internal_mutable_arrow_record_batch();
  public:
  void unsafe_arena_set_allocated_arrow_record_batch(
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch);
  ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* unsafe_arena_release_arrow_record_batch();

  void clear_rows();
  RowsCase rows_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.ReadRowsResponse)
 private:
  class _Internal;
  void set_has_avro_rows();
  void set_has_arrow_record_batch();

  inline bool has_rows() const;
  inline void clear_has_rows();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::bigquery::storage::v1::StreamStats* stats_;
  ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 row_count_;
  union RowsUnion {
    RowsUnion() {}
    ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows_;
    ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch_;
  } rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class SplitReadStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.SplitReadStreamRequest) */ {
 public:
  inline SplitReadStreamRequest() : SplitReadStreamRequest(nullptr) {}
  virtual ~SplitReadStreamRequest();

  SplitReadStreamRequest(const SplitReadStreamRequest& from);
  SplitReadStreamRequest(SplitReadStreamRequest&& from) noexcept
    : SplitReadStreamRequest() {
    *this = ::std::move(from);
  }

  inline SplitReadStreamRequest& operator=(const SplitReadStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitReadStreamRequest& operator=(SplitReadStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitReadStreamRequest& default_instance();

  static inline const SplitReadStreamRequest* internal_default_instance() {
    return reinterpret_cast<const SplitReadStreamRequest*>(
               &_SplitReadStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SplitReadStreamRequest& a, SplitReadStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitReadStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitReadStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitReadStreamRequest* New() const final {
    return CreateMaybeMessage<SplitReadStreamRequest>(nullptr);
  }

  SplitReadStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitReadStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitReadStreamRequest& from);
  void MergeFrom(const SplitReadStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitReadStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.SplitReadStreamRequest";
  }
  protected:
  explicit SplitReadStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFractionFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double fraction = 2;
  void clear_fraction();
  double fraction() const;
  void set_fraction(double value);
  private:
  double _internal_fraction() const;
  void _internal_set_fraction(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double fraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class SplitReadStreamResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.storage.v1.SplitReadStreamResponse) */ {
 public:
  inline SplitReadStreamResponse() : SplitReadStreamResponse(nullptr) {}
  virtual ~SplitReadStreamResponse();

  SplitReadStreamResponse(const SplitReadStreamResponse& from);
  SplitReadStreamResponse(SplitReadStreamResponse&& from) noexcept
    : SplitReadStreamResponse() {
    *this = ::std::move(from);
  }

  inline SplitReadStreamResponse& operator=(const SplitReadStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitReadStreamResponse& operator=(SplitReadStreamResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitReadStreamResponse& default_instance();

  static inline const SplitReadStreamResponse* internal_default_instance() {
    return reinterpret_cast<const SplitReadStreamResponse*>(
               &_SplitReadStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SplitReadStreamResponse& a, SplitReadStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitReadStreamResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitReadStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitReadStreamResponse* New() const final {
    return CreateMaybeMessage<SplitReadStreamResponse>(nullptr);
  }

  SplitReadStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitReadStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitReadStreamResponse& from);
  void MergeFrom(const SplitReadStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitReadStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.storage.v1.SplitReadStreamResponse";
  }
  protected:
  explicit SplitReadStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
    return ::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryStreamFieldNumber = 1,
    kRemainderStreamFieldNumber = 2,
  };
  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  bool has_primary_stream() const;
  private:
  bool _internal_has_primary_stream() const;
  public:
  void clear_primary_stream();
  const ::google::cloud::bigquery::storage::v1::ReadStream& primary_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* release_primary_stream();
  ::google::cloud::bigquery::storage::v1::ReadStream* mutable_primary_stream();
  void set_allocated_primary_stream(::google::cloud::bigquery::storage::v1::ReadStream* primary_stream);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadStream& _internal_primary_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* _internal_mutable_primary_stream();
  public:
  void unsafe_arena_set_allocated_primary_stream(
      ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream);
  ::google::cloud::bigquery::storage::v1::ReadStream* unsafe_arena_release_primary_stream();

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  bool has_remainder_stream() const;
  private:
  bool _internal_has_remainder_stream() const;
  public:
  void clear_remainder_stream();
  const ::google::cloud::bigquery::storage::v1::ReadStream& remainder_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* release_remainder_stream();
  ::google::cloud::bigquery::storage::v1::ReadStream* mutable_remainder_stream();
  void set_allocated_remainder_stream(::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream);
  private:
  const ::google::cloud::bigquery::storage::v1::ReadStream& _internal_remainder_stream() const;
  ::google::cloud::bigquery::storage::v1::ReadStream* _internal_mutable_remainder_stream();
  public:
  void unsafe_arena_set_allocated_remainder_stream(
      ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream);
  ::google::cloud::bigquery::storage::v1::ReadStream* unsafe_arena_release_remainder_stream();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream_;
  ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateReadSessionRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateReadSessionRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateReadSessionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return _internal_parent();
}
inline void CreateReadSessionRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}
inline std::string* CreateReadSessionRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateReadSessionRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateReadSessionRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateReadSessionRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}
inline void CreateReadSessionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}
inline void CreateReadSessionRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}
inline std::string* CreateReadSessionRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateReadSessionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReadSessionRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent)
}

// .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateReadSessionRequest::_internal_has_read_session() const {
  return this != internal_default_instance() && read_session_ != nullptr;
}
inline bool CreateReadSessionRequest::has_read_session() const {
  return _internal_has_read_session();
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession& CreateReadSessionRequest::_internal_read_session() const {
  const ::google::cloud::bigquery::storage::v1::ReadSession* p = read_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadSession&>(
      ::google::cloud::bigquery::storage::v1::_ReadSession_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadSession& CreateReadSessionRequest::read_session() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  return _internal_read_session();
}
inline void CreateReadSessionRequest::unsafe_arena_set_allocated_read_session(
    ::google::cloud::bigquery::storage::v1::ReadSession* read_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_session_);
  }
  read_session_ = read_session;
  if (read_session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::release_read_session() {
  
  ::google::cloud::bigquery::storage::v1::ReadSession* temp = read_session_;
  read_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::unsafe_arena_release_read_session() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  
  ::google::cloud::bigquery::storage::v1::ReadSession* temp = read_session_;
  read_session_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::_internal_mutable_read_session() {
  
  if (read_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadSession>(GetArena());
    read_session_ = p;
  }
  return read_session_;
}
inline ::google::cloud::bigquery::storage::v1::ReadSession* CreateReadSessionRequest::mutable_read_session() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
  return _internal_mutable_read_session();
}
inline void CreateReadSessionRequest::set_allocated_read_session(::google::cloud::bigquery::storage::v1::ReadSession* read_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_session_);
  }
  if (read_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_session)->GetArena();
    if (message_arena != submessage_arena) {
      read_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_session, submessage_arena);
    }
    
  } else {
    
  }
  read_session_ = read_session;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.read_session)
}

// int32 max_stream_count = 3;
inline void CreateReadSessionRequest::clear_max_stream_count() {
  max_stream_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReadSessionRequest::_internal_max_stream_count() const {
  return max_stream_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReadSessionRequest::max_stream_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.max_stream_count)
  return _internal_max_stream_count();
}
inline void CreateReadSessionRequest::_internal_set_max_stream_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_stream_count_ = value;
}
inline void CreateReadSessionRequest::set_max_stream_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_stream_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.CreateReadSessionRequest.max_stream_count)
}

// -------------------------------------------------------------------

// ReadRowsRequest

// string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ReadRowsRequest::clear_read_stream() {
  read_stream_.ClearToEmpty();
}
inline const std::string& ReadRowsRequest::read_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return _internal_read_stream();
}
inline void ReadRowsRequest::set_read_stream(const std::string& value) {
  _internal_set_read_stream(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}
inline std::string* ReadRowsRequest::mutable_read_stream() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return _internal_mutable_read_stream();
}
inline const std::string& ReadRowsRequest::_internal_read_stream() const {
  return read_stream_.Get();
}
inline void ReadRowsRequest::_internal_set_read_stream(const std::string& value) {
  
  read_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRowsRequest::set_read_stream(std::string&& value) {
  
  read_stream_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}
inline void ReadRowsRequest::set_read_stream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  read_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}
inline void ReadRowsRequest::set_read_stream(const char* value,
    size_t size) {
  
  read_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}
inline std::string* ReadRowsRequest::_internal_mutable_read_stream() {
  
  return read_stream_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRowsRequest::release_read_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
  return read_stream_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRowsRequest::set_allocated_read_stream(std::string* read_stream) {
  if (read_stream != nullptr) {
    
  } else {
    
  }
  read_stream_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), read_stream,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream)
}

// int64 offset = 2;
inline void ReadRowsRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsRequest::offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsRequest.offset)
  return _internal_offset();
}
inline void ReadRowsRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void ReadRowsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsRequest.offset)
}

// -------------------------------------------------------------------

// ThrottleState

// int32 throttle_percent = 1;
inline void ThrottleState::clear_throttle_percent() {
  throttle_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThrottleState::_internal_throttle_percent() const {
  return throttle_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThrottleState::throttle_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ThrottleState.throttle_percent)
  return _internal_throttle_percent();
}
inline void ThrottleState::_internal_set_throttle_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throttle_percent_ = value;
}
inline void ThrottleState::set_throttle_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throttle_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ThrottleState.throttle_percent)
}

// -------------------------------------------------------------------

// StreamStats_Progress

// double at_response_start = 1;
inline void StreamStats_Progress::clear_at_response_start() {
  at_response_start_ = 0;
}
inline double StreamStats_Progress::_internal_at_response_start() const {
  return at_response_start_;
}
inline double StreamStats_Progress::at_response_start() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_start)
  return _internal_at_response_start();
}
inline void StreamStats_Progress::_internal_set_at_response_start(double value) {
  
  at_response_start_ = value;
}
inline void StreamStats_Progress::set_at_response_start(double value) {
  _internal_set_at_response_start(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_start)
}

// double at_response_end = 2;
inline void StreamStats_Progress::clear_at_response_end() {
  at_response_end_ = 0;
}
inline double StreamStats_Progress::_internal_at_response_end() const {
  return at_response_end_;
}
inline double StreamStats_Progress::at_response_end() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_end)
  return _internal_at_response_end();
}
inline void StreamStats_Progress::_internal_set_at_response_end(double value) {
  
  at_response_end_ = value;
}
inline void StreamStats_Progress::set_at_response_end(double value) {
  _internal_set_at_response_end(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.StreamStats.Progress.at_response_end)
}

// -------------------------------------------------------------------

// StreamStats

// .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
inline bool StreamStats::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool StreamStats::has_progress() const {
  return _internal_has_progress();
}
inline void StreamStats::clear_progress() {
  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& StreamStats::_internal_progress() const {
  const ::google::cloud::bigquery::storage::v1::StreamStats_Progress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::StreamStats_Progress&>(
      ::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& StreamStats::progress() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.StreamStats.progress)
  return _internal_progress();
}
inline void StreamStats::unsafe_arena_set_allocated_progress(
    ::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.StreamStats.progress)
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::release_progress() {
  
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* temp = progress_;
  progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.StreamStats.progress)
  
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats_Progress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats_Progress* StreamStats::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.StreamStats.progress)
  return _internal_mutable_progress();
}
inline void StreamStats::set_allocated_progress(::google::cloud::bigquery::storage::v1::StreamStats_Progress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.StreamStats.progress)
}

// -------------------------------------------------------------------

// ReadRowsResponse

// .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
inline bool ReadRowsResponse::_internal_has_avro_rows() const {
  return rows_case() == kAvroRows;
}
inline bool ReadRowsResponse::has_avro_rows() const {
  return _internal_has_avro_rows();
}
inline void ReadRowsResponse::set_has_avro_rows() {
  _oneof_case_[0] = kAvroRows;
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::release_avro_rows() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  if (_internal_has_avro_rows()) {
    clear_has_rows();
      ::google::cloud::bigquery::storage::v1::AvroRows* temp = rows_.avro_rows_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rows_.avro_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::AvroRows& ReadRowsResponse::_internal_avro_rows() const {
  return _internal_has_avro_rows()
      ? *rows_.avro_rows_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::AvroRows&>(::google::cloud::bigquery::storage::v1::_AvroRows_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::AvroRows& ReadRowsResponse::avro_rows() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  return _internal_avro_rows();
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::unsafe_arena_release_avro_rows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  if (_internal_has_avro_rows()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::AvroRows* temp = rows_.avro_rows_;
    rows_.avro_rows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows) {
  clear_rows();
  if (avro_rows) {
    set_has_avro_rows();
    rows_.avro_rows_ = avro_rows;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::_internal_mutable_avro_rows() {
  if (!_internal_has_avro_rows()) {
    clear_rows();
    set_has_avro_rows();
    rows_.avro_rows_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AvroRows >(GetArena());
  }
  return rows_.avro_rows_;
}
inline ::google::cloud::bigquery::storage::v1::AvroRows* ReadRowsResponse::mutable_avro_rows() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
  return _internal_mutable_avro_rows();
}

// .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
inline bool ReadRowsResponse::_internal_has_arrow_record_batch() const {
  return rows_case() == kArrowRecordBatch;
}
inline bool ReadRowsResponse::has_arrow_record_batch() const {
  return _internal_has_arrow_record_batch();
}
inline void ReadRowsResponse::set_has_arrow_record_batch() {
  _oneof_case_[0] = kArrowRecordBatch;
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::release_arrow_record_batch() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  if (_internal_has_arrow_record_batch()) {
    clear_has_rows();
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* temp = rows_.arrow_record_batch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rows_.arrow_record_batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& ReadRowsResponse::_internal_arrow_record_batch() const {
  return _internal_has_arrow_record_batch()
      ? *rows_.arrow_record_batch_
      : reinterpret_cast< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch&>(::google::cloud::bigquery::storage::v1::_ArrowRecordBatch_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& ReadRowsResponse::arrow_record_batch() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  return _internal_arrow_record_batch();
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::unsafe_arena_release_arrow_record_batch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  if (_internal_has_arrow_record_batch()) {
    clear_has_rows();
    ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* temp = rows_.arrow_record_batch_;
    rows_.arrow_record_batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch) {
  clear_rows();
  if (arrow_record_batch) {
    set_has_arrow_record_batch();
    rows_.arrow_record_batch_ = arrow_record_batch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::_internal_mutable_arrow_record_batch() {
  if (!_internal_has_arrow_record_batch()) {
    clear_rows();
    set_has_arrow_record_batch();
    rows_.arrow_record_batch_ = CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch >(GetArena());
  }
  return rows_.arrow_record_batch_;
}
inline ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* ReadRowsResponse::mutable_arrow_record_batch() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
  return _internal_mutable_arrow_record_batch();
}

// int64 row_count = 6;
inline void ReadRowsResponse::clear_row_count() {
  row_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsResponse::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRowsResponse::row_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.row_count)
  return _internal_row_count();
}
inline void ReadRowsResponse::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  row_count_ = value;
}
inline void ReadRowsResponse::set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.ReadRowsResponse.row_count)
}

// .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
inline bool ReadRowsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool ReadRowsResponse::has_stats() const {
  return _internal_has_stats();
}
inline void ReadRowsResponse::clear_stats() {
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats& ReadRowsResponse::_internal_stats() const {
  const ::google::cloud::bigquery::storage::v1::StreamStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::StreamStats&>(
      ::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::StreamStats& ReadRowsResponse::stats() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  return _internal_stats();
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_stats(
    ::google::cloud::bigquery::storage::v1::StreamStats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::release_stats() {
  
  ::google::cloud::bigquery::storage::v1::StreamStats* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  
  ::google::cloud::bigquery::storage::v1::StreamStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::StreamStats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::google::cloud::bigquery::storage::v1::StreamStats* ReadRowsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
  return _internal_mutable_stats();
}
inline void ReadRowsResponse::set_allocated_stats(::google::cloud::bigquery::storage::v1::StreamStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.stats)
}

// .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
inline bool ReadRowsResponse::_internal_has_throttle_state() const {
  return this != internal_default_instance() && throttle_state_ != nullptr;
}
inline bool ReadRowsResponse::has_throttle_state() const {
  return _internal_has_throttle_state();
}
inline void ReadRowsResponse::clear_throttle_state() {
  if (GetArena() == nullptr && throttle_state_ != nullptr) {
    delete throttle_state_;
  }
  throttle_state_ = nullptr;
}
inline const ::google::cloud::bigquery::storage::v1::ThrottleState& ReadRowsResponse::_internal_throttle_state() const {
  const ::google::cloud::bigquery::storage::v1::ThrottleState* p = throttle_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ThrottleState&>(
      ::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ThrottleState& ReadRowsResponse::throttle_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  return _internal_throttle_state();
}
inline void ReadRowsResponse::unsafe_arena_set_allocated_throttle_state(
    ::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_state_);
  }
  throttle_state_ = throttle_state;
  if (throttle_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::release_throttle_state() {
  
  ::google::cloud::bigquery::storage::v1::ThrottleState* temp = throttle_state_;
  throttle_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::unsafe_arena_release_throttle_state() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  
  ::google::cloud::bigquery::storage::v1::ThrottleState* temp = throttle_state_;
  throttle_state_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::_internal_mutable_throttle_state() {
  
  if (throttle_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ThrottleState>(GetArena());
    throttle_state_ = p;
  }
  return throttle_state_;
}
inline ::google::cloud::bigquery::storage::v1::ThrottleState* ReadRowsResponse::mutable_throttle_state() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
  return _internal_mutable_throttle_state();
}
inline void ReadRowsResponse::set_allocated_throttle_state(::google::cloud::bigquery::storage::v1::ThrottleState* throttle_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete throttle_state_;
  }
  if (throttle_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(throttle_state);
    if (message_arena != submessage_arena) {
      throttle_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_state, submessage_arena);
    }
    
  } else {
    
  }
  throttle_state_ = throttle_state;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.throttle_state)
}

inline bool ReadRowsResponse::has_rows() const {
  return rows_case() != ROWS_NOT_SET;
}
inline void ReadRowsResponse::clear_has_rows() {
  _oneof_case_[0] = ROWS_NOT_SET;
}
inline ReadRowsResponse::RowsCase ReadRowsResponse::rows_case() const {
  return ReadRowsResponse::RowsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SplitReadStreamRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SplitReadStreamRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SplitReadStreamRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return _internal_name();
}
inline void SplitReadStreamRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}
inline std::string* SplitReadStreamRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SplitReadStreamRequest::_internal_name() const {
  return name_.Get();
}
inline void SplitReadStreamRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SplitReadStreamRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}
inline void SplitReadStreamRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}
inline void SplitReadStreamRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}
inline std::string* SplitReadStreamRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SplitReadStreamRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SplitReadStreamRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name)
}

// double fraction = 2;
inline void SplitReadStreamRequest::clear_fraction() {
  fraction_ = 0;
}
inline double SplitReadStreamRequest::_internal_fraction() const {
  return fraction_;
}
inline double SplitReadStreamRequest::fraction() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.fraction)
  return _internal_fraction();
}
inline void SplitReadStreamRequest::_internal_set_fraction(double value) {
  
  fraction_ = value;
}
inline void SplitReadStreamRequest::set_fraction(double value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.storage.v1.SplitReadStreamRequest.fraction)
}

// -------------------------------------------------------------------

// SplitReadStreamResponse

// .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
inline bool SplitReadStreamResponse::_internal_has_primary_stream() const {
  return this != internal_default_instance() && primary_stream_ != nullptr;
}
inline bool SplitReadStreamResponse::has_primary_stream() const {
  return _internal_has_primary_stream();
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::_internal_primary_stream() const {
  const ::google::cloud::bigquery::storage::v1::ReadStream* p = primary_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadStream&>(
      ::google::cloud::bigquery::storage::v1::_ReadStream_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::primary_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  return _internal_primary_stream();
}
inline void SplitReadStreamResponse::unsafe_arena_set_allocated_primary_stream(
    ::google::cloud::bigquery::storage::v1::ReadStream* primary_stream) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_stream_);
  }
  primary_stream_ = primary_stream;
  if (primary_stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::release_primary_stream() {
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = primary_stream_;
  primary_stream_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::unsafe_arena_release_primary_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = primary_stream_;
  primary_stream_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::_internal_mutable_primary_stream() {
  
  if (primary_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadStream>(GetArena());
    primary_stream_ = p;
  }
  return primary_stream_;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::mutable_primary_stream() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
  return _internal_mutable_primary_stream();
}
inline void SplitReadStreamResponse::set_allocated_primary_stream(::google::cloud::bigquery::storage::v1::ReadStream* primary_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_stream_);
  }
  if (primary_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_stream)->GetArena();
    if (message_arena != submessage_arena) {
      primary_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_stream, submessage_arena);
    }
    
  } else {
    
  }
  primary_stream_ = primary_stream;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.primary_stream)
}

// .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
inline bool SplitReadStreamResponse::_internal_has_remainder_stream() const {
  return this != internal_default_instance() && remainder_stream_ != nullptr;
}
inline bool SplitReadStreamResponse::has_remainder_stream() const {
  return _internal_has_remainder_stream();
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::_internal_remainder_stream() const {
  const ::google::cloud::bigquery::storage::v1::ReadStream* p = remainder_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::storage::v1::ReadStream&>(
      ::google::cloud::bigquery::storage::v1::_ReadStream_default_instance_);
}
inline const ::google::cloud::bigquery::storage::v1::ReadStream& SplitReadStreamResponse::remainder_stream() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  return _internal_remainder_stream();
}
inline void SplitReadStreamResponse::unsafe_arena_set_allocated_remainder_stream(
    ::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remainder_stream_);
  }
  remainder_stream_ = remainder_stream;
  if (remainder_stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::release_remainder_stream() {
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = remainder_stream_;
  remainder_stream_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::unsafe_arena_release_remainder_stream() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  
  ::google::cloud::bigquery::storage::v1::ReadStream* temp = remainder_stream_;
  remainder_stream_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::_internal_mutable_remainder_stream() {
  
  if (remainder_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::storage::v1::ReadStream>(GetArena());
    remainder_stream_ = p;
  }
  return remainder_stream_;
}
inline ::google::cloud::bigquery::storage::v1::ReadStream* SplitReadStreamResponse::mutable_remainder_stream() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
  return _internal_mutable_remainder_stream();
}
inline void SplitReadStreamResponse::set_allocated_remainder_stream(::google::cloud::bigquery::storage::v1::ReadStream* remainder_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remainder_stream_);
  }
  if (remainder_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remainder_stream)->GetArena();
    if (message_arena != submessage_arena) {
      remainder_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remainder_stream, submessage_arena);
    }
    
  } else {
    
  }
  remainder_stream_ = remainder_stream;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.SplitReadStreamResponse.remainder_stream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto
