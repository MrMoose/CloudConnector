// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/bigquery/v2/model.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fbigquery_2fv2_2fmodel_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fbigquery_2fv2_2fmodel_2eproto__INCLUDED

#include "google/cloud/bigquery/v2/model.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace cloud {
namespace bigquery {
namespace v2 {

class ModelService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.bigquery.v2.ModelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Gets the specified model resource by model ID.
    virtual ::grpc::Status GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::google::cloud::bigquery::v2::Model* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>> AsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    // Lists all models in the specified dataset. Requires the READER dataset
    // role. After retrieving the list of models, you can get information about a
    // particular model by calling the models.get method.
    virtual ::grpc::Status ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::google::cloud::bigquery::v2::ListModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    // Patch specific fields in the specified model.
    virtual ::grpc::Status PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::google::cloud::bigquery::v2::Model* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>> AsyncPatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>>(AsyncPatchModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>> PrepareAsyncPatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>>(PrepareAsyncPatchModelRaw(context, request, cq));
    }
    // Deletes the model specified by modelId from the dataset.
    virtual ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Gets the specified model resource by model ID.
      virtual void GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists all models in the specified dataset. Requires the READER dataset
      // role. After retrieving the list of models, you can get information about a
      // particular model by calling the models.get method.
      virtual void ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch specific fields in the specified model.
      virtual void PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the model specified by modelId from the dataset.
      virtual void DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::ListModelsResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>* AsyncPatchModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::bigquery::v2::Model>* PrepareAsyncPatchModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::google::cloud::bigquery::v2::Model* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>> AsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    ::grpc::Status ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::google::cloud::bigquery::v2::ListModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>> AsyncListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    ::grpc::Status PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::google::cloud::bigquery::v2::Model* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>> AsyncPatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>>(AsyncPatchModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>> PrepareAsyncPatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>>(PrepareAsyncPatchModelRaw(context, request, cq));
    }
    ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response, std::function<void(::grpc::Status)>) override;
      void GetModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModels(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response, std::function<void(::grpc::Status)>) override;
      void PatchModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteModel(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::ListModelsResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>* AsyncPatchModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::bigquery::v2::Model>* PrepareAsyncPatchModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetModel_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModels_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteModel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Gets the specified model resource by model ID.
    virtual ::grpc::Status GetModel(::grpc::ServerContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response);
    // Lists all models in the specified dataset. Requires the READER dataset
    // role. After retrieving the list of models, you can get information about a
    // particular model by calling the models.get method.
    virtual ::grpc::Status ListModels(::grpc::ServerContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response);
    // Patch specific fields in the specified model.
    virtual ::grpc::Status PatchModel(::grpc::ServerContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response);
    // Deletes the model specified by modelId from the dataset.
    virtual ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::google::cloud::bigquery::v2::GetModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::v2::Model>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::google::cloud::bigquery::v2::ListModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::v2::ListModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModel(::grpc::ServerContext* context, ::google::cloud::bigquery::v2::PatchModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::bigquery::v2::Model>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetModel<WithAsyncMethod_ListModels<WithAsyncMethod_PatchModel<WithAsyncMethod_DeleteModel<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::GetModelRequest, ::google::cloud::bigquery::v2::Model>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::v2::GetModelRequest* request, ::google::cloud::bigquery::v2::Model* response) { return this->GetModel(context, request, response); }));}
    void SetMessageAllocatorFor_GetModel(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::v2::GetModelRequest, ::google::cloud::bigquery::v2::Model>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::GetModelRequest, ::google::cloud::bigquery::v2::Model>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::ListModelsRequest, ::google::cloud::bigquery::v2::ListModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::v2::ListModelsRequest* request, ::google::cloud::bigquery::v2::ListModelsResponse* response) { return this->ListModels(context, request, response); }));}
    void SetMessageAllocatorFor_ListModels(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::v2::ListModelsRequest, ::google::cloud::bigquery::v2::ListModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::ListModelsRequest, ::google::cloud::bigquery::v2::ListModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::PatchModelRequest, ::google::cloud::bigquery::v2::Model>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::v2::PatchModelRequest* request, ::google::cloud::bigquery::v2::Model* response) { return this->PatchModel(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModel(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::v2::PatchModelRequest, ::google::cloud::bigquery::v2::Model>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::PatchModelRequest, ::google::cloud::bigquery::v2::Model>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteModel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::DeleteModelRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::cloud::bigquery::v2::DeleteModelRequest* request, ::google::protobuf::Empty* response) { return this->DeleteModel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteModel(
        ::grpc::MessageAllocator< ::google::cloud::bigquery::v2::DeleteModelRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::cloud::bigquery::v2::DeleteModelRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetModel<WithCallbackMethod_ListModels<WithCallbackMethod_PatchModel<WithCallbackMethod_DeleteModel<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteModel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::v2::GetModelRequest, ::google::cloud::bigquery::v2::Model>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::v2::GetModelRequest, ::google::cloud::bigquery::v2::Model>* streamer) {
                       return this->StreamedGetModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::GetModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::v2::GetModelRequest,::google::cloud::bigquery::v2::Model>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::v2::ListModelsRequest, ::google::cloud::bigquery::v2::ListModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::v2::ListModelsRequest, ::google::cloud::bigquery::v2::ListModelsResponse>* streamer) {
                       return this->StreamedListModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::ListModelsRequest* /*request*/, ::google::cloud::bigquery::v2::ListModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::v2::ListModelsRequest,::google::cloud::bigquery::v2::ListModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::v2::PatchModelRequest, ::google::cloud::bigquery::v2::Model>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::v2::PatchModelRequest, ::google::cloud::bigquery::v2::Model>* streamer) {
                       return this->StreamedPatchModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::PatchModelRequest* /*request*/, ::google::cloud::bigquery::v2::Model* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::v2::PatchModelRequest,::google::cloud::bigquery::v2::Model>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::cloud::bigquery::v2::DeleteModelRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::cloud::bigquery::v2::DeleteModelRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::google::cloud::bigquery::v2::DeleteModelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::bigquery::v2::DeleteModelRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_PatchModel<WithStreamedUnaryMethod_DeleteModel<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_PatchModel<WithStreamedUnaryMethod_DeleteModel<Service > > > > StreamedService;
};

}  // namespace v2
}  // namespace bigquery
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fbigquery_2fv2_2fmodel_2eproto__INCLUDED
