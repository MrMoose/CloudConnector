// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/v2/table_reference.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace v2 {
class TableReference;
struct TableReferenceDefaultTypeInternal;
extern TableReferenceDefaultTypeInternal _TableReference_default_instance_;
}  // namespace v2
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::v2::TableReference* Arena::CreateMaybeMessage<::google::cloud::bigquery::v2::TableReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace v2 {

// ===================================================================

class TableReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.v2.TableReference) */ {
 public:
  inline TableReference() : TableReference(nullptr) {}
  ~TableReference() override;
  explicit PROTOBUF_CONSTEXPR TableReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableReference(const TableReference& from);
  TableReference(TableReference&& from) noexcept
    : TableReference() {
    *this = ::std::move(from);
  }

  inline TableReference& operator=(const TableReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableReference& operator=(TableReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableReference* internal_default_instance() {
    return reinterpret_cast<const TableReference*>(
               &_TableReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableReference& a, TableReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TableReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableReference& from) {
    TableReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.v2.TableReference";
  }
  protected:
  explicit TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdAlternativeFieldNumber = 4,
    kDatasetIdAlternativeFieldNumber = 5,
    kTableIdAlternativeFieldNumber = 6,
    kProjectIdFieldNumber = 1,
    kDatasetIdFieldNumber = 2,
    kTableIdFieldNumber = 3,
  };
  // repeated string project_id_alternative = 4;
  int project_id_alternative_size() const;
  private:
  int _internal_project_id_alternative_size() const;
  public:
  void clear_project_id_alternative();
  const std::string& project_id_alternative(int index) const;
  std::string* mutable_project_id_alternative(int index);
  void set_project_id_alternative(int index, const std::string& value);
  void set_project_id_alternative(int index, std::string&& value);
  void set_project_id_alternative(int index, const char* value);
  void set_project_id_alternative(int index, const char* value, size_t size);
  std::string* add_project_id_alternative();
  void add_project_id_alternative(const std::string& value);
  void add_project_id_alternative(std::string&& value);
  void add_project_id_alternative(const char* value);
  void add_project_id_alternative(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& project_id_alternative() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_project_id_alternative();
  private:
  const std::string& _internal_project_id_alternative(int index) const;
  std::string* _internal_add_project_id_alternative();
  public:

  // repeated string dataset_id_alternative = 5;
  int dataset_id_alternative_size() const;
  private:
  int _internal_dataset_id_alternative_size() const;
  public:
  void clear_dataset_id_alternative();
  const std::string& dataset_id_alternative(int index) const;
  std::string* mutable_dataset_id_alternative(int index);
  void set_dataset_id_alternative(int index, const std::string& value);
  void set_dataset_id_alternative(int index, std::string&& value);
  void set_dataset_id_alternative(int index, const char* value);
  void set_dataset_id_alternative(int index, const char* value, size_t size);
  std::string* add_dataset_id_alternative();
  void add_dataset_id_alternative(const std::string& value);
  void add_dataset_id_alternative(std::string&& value);
  void add_dataset_id_alternative(const char* value);
  void add_dataset_id_alternative(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dataset_id_alternative() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dataset_id_alternative();
  private:
  const std::string& _internal_dataset_id_alternative(int index) const;
  std::string* _internal_add_dataset_id_alternative();
  public:

  // repeated string table_id_alternative = 6;
  int table_id_alternative_size() const;
  private:
  int _internal_table_id_alternative_size() const;
  public:
  void clear_table_id_alternative();
  const std::string& table_id_alternative(int index) const;
  std::string* mutable_table_id_alternative(int index);
  void set_table_id_alternative(int index, const std::string& value);
  void set_table_id_alternative(int index, std::string&& value);
  void set_table_id_alternative(int index, const char* value);
  void set_table_id_alternative(int index, const char* value, size_t size);
  std::string* add_table_id_alternative();
  void add_table_id_alternative(const std::string& value);
  void add_table_id_alternative(std::string&& value);
  void add_table_id_alternative(const char* value);
  void add_table_id_alternative(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_id_alternative() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_id_alternative();
  private:
  const std::string& _internal_table_id_alternative(int index) const;
  std::string* _internal_add_table_id_alternative();
  public:

  // string project_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string dataset_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string table_id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_table_id();
  const std::string& table_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_id();
  PROTOBUF_NODISCARD std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.v2.TableReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> project_id_alternative_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dataset_id_alternative_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_id_alternative_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableReference

// string project_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void TableReference::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& TableReference::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.project_id)
}
inline std::string* TableReference::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.project_id)
  return _s;
}
inline const std::string& TableReference::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void TableReference::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.TableReference.project_id)
  return _impl_.project_id_.Release();
}
inline void TableReference::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.v2.TableReference.project_id)
}

// string dataset_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void TableReference::clear_dataset_id() {
  _impl_.dataset_id_.ClearToEmpty();
}
inline const std::string& TableReference::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataset_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.dataset_id)
}
inline std::string* TableReference::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.dataset_id)
  return _s;
}
inline const std::string& TableReference::_internal_dataset_id() const {
  return _impl_.dataset_id_.Get();
}
inline void TableReference::_internal_set_dataset_id(const std::string& value) {
  
  _impl_.dataset_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_dataset_id() {
  
  return _impl_.dataset_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.TableReference.dataset_id)
  return _impl_.dataset_id_.Release();
}
inline void TableReference::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  _impl_.dataset_id_.SetAllocated(dataset_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataset_id_.IsDefault()) {
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.v2.TableReference.dataset_id)
}

// string table_id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void TableReference::clear_table_id() {
  _impl_.table_id_.ClearToEmpty();
}
inline const std::string& TableReference::table_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.table_id)
  return _internal_table_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableReference::set_table_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.table_id)
}
inline std::string* TableReference::mutable_table_id() {
  std::string* _s = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.table_id)
  return _s;
}
inline const std::string& TableReference::_internal_table_id() const {
  return _impl_.table_id_.Get();
}
inline void TableReference::_internal_set_table_id(const std::string& value) {
  
  _impl_.table_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TableReference::_internal_mutable_table_id() {
  
  return _impl_.table_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TableReference::release_table_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.TableReference.table_id)
  return _impl_.table_id_.Release();
}
inline void TableReference::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    
  } else {
    
  }
  _impl_.table_id_.SetAllocated(table_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_id_.IsDefault()) {
    _impl_.table_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.v2.TableReference.table_id)
}

// repeated string project_id_alternative = 4;
inline int TableReference::_internal_project_id_alternative_size() const {
  return _impl_.project_id_alternative_.size();
}
inline int TableReference::project_id_alternative_size() const {
  return _internal_project_id_alternative_size();
}
inline void TableReference::clear_project_id_alternative() {
  _impl_.project_id_alternative_.Clear();
}
inline std::string* TableReference::add_project_id_alternative() {
  std::string* _s = _internal_add_project_id_alternative();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.v2.TableReference.project_id_alternative)
  return _s;
}
inline const std::string& TableReference::_internal_project_id_alternative(int index) const {
  return _impl_.project_id_alternative_.Get(index);
}
inline const std::string& TableReference::project_id_alternative(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.project_id_alternative)
  return _internal_project_id_alternative(index);
}
inline std::string* TableReference::mutable_project_id_alternative(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.project_id_alternative)
  return _impl_.project_id_alternative_.Mutable(index);
}
inline void TableReference::set_project_id_alternative(int index, const std::string& value) {
  _impl_.project_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::set_project_id_alternative(int index, std::string&& value) {
  _impl_.project_id_alternative_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::set_project_id_alternative(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.project_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::set_project_id_alternative(int index, const char* value, size_t size) {
  _impl_.project_id_alternative_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline std::string* TableReference::_internal_add_project_id_alternative() {
  return _impl_.project_id_alternative_.Add();
}
inline void TableReference::add_project_id_alternative(const std::string& value) {
  _impl_.project_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::add_project_id_alternative(std::string&& value) {
  _impl_.project_id_alternative_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::add_project_id_alternative(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.project_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline void TableReference::add_project_id_alternative(const char* value, size_t size) {
  _impl_.project_id_alternative_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.v2.TableReference.project_id_alternative)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableReference::project_id_alternative() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.v2.TableReference.project_id_alternative)
  return _impl_.project_id_alternative_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableReference::mutable_project_id_alternative() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.v2.TableReference.project_id_alternative)
  return &_impl_.project_id_alternative_;
}

// repeated string dataset_id_alternative = 5;
inline int TableReference::_internal_dataset_id_alternative_size() const {
  return _impl_.dataset_id_alternative_.size();
}
inline int TableReference::dataset_id_alternative_size() const {
  return _internal_dataset_id_alternative_size();
}
inline void TableReference::clear_dataset_id_alternative() {
  _impl_.dataset_id_alternative_.Clear();
}
inline std::string* TableReference::add_dataset_id_alternative() {
  std::string* _s = _internal_add_dataset_id_alternative();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
  return _s;
}
inline const std::string& TableReference::_internal_dataset_id_alternative(int index) const {
  return _impl_.dataset_id_alternative_.Get(index);
}
inline const std::string& TableReference::dataset_id_alternative(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
  return _internal_dataset_id_alternative(index);
}
inline std::string* TableReference::mutable_dataset_id_alternative(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
  return _impl_.dataset_id_alternative_.Mutable(index);
}
inline void TableReference::set_dataset_id_alternative(int index, const std::string& value) {
  _impl_.dataset_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::set_dataset_id_alternative(int index, std::string&& value) {
  _impl_.dataset_id_alternative_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::set_dataset_id_alternative(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dataset_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::set_dataset_id_alternative(int index, const char* value, size_t size) {
  _impl_.dataset_id_alternative_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline std::string* TableReference::_internal_add_dataset_id_alternative() {
  return _impl_.dataset_id_alternative_.Add();
}
inline void TableReference::add_dataset_id_alternative(const std::string& value) {
  _impl_.dataset_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::add_dataset_id_alternative(std::string&& value) {
  _impl_.dataset_id_alternative_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::add_dataset_id_alternative(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dataset_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline void TableReference::add_dataset_id_alternative(const char* value, size_t size) {
  _impl_.dataset_id_alternative_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableReference::dataset_id_alternative() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
  return _impl_.dataset_id_alternative_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableReference::mutable_dataset_id_alternative() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.v2.TableReference.dataset_id_alternative)
  return &_impl_.dataset_id_alternative_;
}

// repeated string table_id_alternative = 6;
inline int TableReference::_internal_table_id_alternative_size() const {
  return _impl_.table_id_alternative_.size();
}
inline int TableReference::table_id_alternative_size() const {
  return _internal_table_id_alternative_size();
}
inline void TableReference::clear_table_id_alternative() {
  _impl_.table_id_alternative_.Clear();
}
inline std::string* TableReference::add_table_id_alternative() {
  std::string* _s = _internal_add_table_id_alternative();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.v2.TableReference.table_id_alternative)
  return _s;
}
inline const std::string& TableReference::_internal_table_id_alternative(int index) const {
  return _impl_.table_id_alternative_.Get(index);
}
inline const std::string& TableReference::table_id_alternative(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.TableReference.table_id_alternative)
  return _internal_table_id_alternative(index);
}
inline std::string* TableReference::mutable_table_id_alternative(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.TableReference.table_id_alternative)
  return _impl_.table_id_alternative_.Mutable(index);
}
inline void TableReference::set_table_id_alternative(int index, const std::string& value) {
  _impl_.table_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::set_table_id_alternative(int index, std::string&& value) {
  _impl_.table_id_alternative_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::set_table_id_alternative(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.table_id_alternative_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::set_table_id_alternative(int index, const char* value, size_t size) {
  _impl_.table_id_alternative_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline std::string* TableReference::_internal_add_table_id_alternative() {
  return _impl_.table_id_alternative_.Add();
}
inline void TableReference::add_table_id_alternative(const std::string& value) {
  _impl_.table_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::add_table_id_alternative(std::string&& value) {
  _impl_.table_id_alternative_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::add_table_id_alternative(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.table_id_alternative_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline void TableReference::add_table_id_alternative(const char* value, size_t size) {
  _impl_.table_id_alternative_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.v2.TableReference.table_id_alternative)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableReference::table_id_alternative() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.v2.TableReference.table_id_alternative)
  return _impl_.table_id_alternative_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableReference::mutable_table_id_alternative() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.v2.TableReference.table_id_alternative)
  return &_impl_.table_id_alternative_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2ftable_5freference_2eproto
