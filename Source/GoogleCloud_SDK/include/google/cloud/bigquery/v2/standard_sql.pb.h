// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/v2/standard_sql.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto_metadata_getter(int index);
namespace google {
namespace cloud {
namespace bigquery {
namespace v2 {
class StandardSqlDataType;
struct StandardSqlDataTypeDefaultTypeInternal;
extern StandardSqlDataTypeDefaultTypeInternal _StandardSqlDataType_default_instance_;
class StandardSqlField;
struct StandardSqlFieldDefaultTypeInternal;
extern StandardSqlFieldDefaultTypeInternal _StandardSqlField_default_instance_;
class StandardSqlStructType;
struct StandardSqlStructTypeDefaultTypeInternal;
extern StandardSqlStructTypeDefaultTypeInternal _StandardSqlStructType_default_instance_;
}  // namespace v2
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::bigquery::v2::StandardSqlDataType* Arena::CreateMaybeMessage<::google::cloud::bigquery::v2::StandardSqlDataType>(Arena*);
template<> ::google::cloud::bigquery::v2::StandardSqlField* Arena::CreateMaybeMessage<::google::cloud::bigquery::v2::StandardSqlField>(Arena*);
template<> ::google::cloud::bigquery::v2::StandardSqlStructType* Arena::CreateMaybeMessage<::google::cloud::bigquery::v2::StandardSqlStructType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace bigquery {
namespace v2 {

enum StandardSqlDataType_TypeKind : int {
  StandardSqlDataType_TypeKind_TYPE_KIND_UNSPECIFIED = 0,
  StandardSqlDataType_TypeKind_INT64 = 2,
  StandardSqlDataType_TypeKind_BOOL = 5,
  StandardSqlDataType_TypeKind_FLOAT64 = 7,
  StandardSqlDataType_TypeKind_STRING = 8,
  StandardSqlDataType_TypeKind_BYTES = 9,
  StandardSqlDataType_TypeKind_TIMESTAMP = 19,
  StandardSqlDataType_TypeKind_DATE = 10,
  StandardSqlDataType_TypeKind_TIME = 20,
  StandardSqlDataType_TypeKind_DATETIME = 21,
  StandardSqlDataType_TypeKind_GEOGRAPHY = 22,
  StandardSqlDataType_TypeKind_NUMERIC = 23,
  StandardSqlDataType_TypeKind_BIGNUMERIC = 24,
  StandardSqlDataType_TypeKind_ARRAY = 16,
  StandardSqlDataType_TypeKind_STRUCT = 17,
  StandardSqlDataType_TypeKind_StandardSqlDataType_TypeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StandardSqlDataType_TypeKind_StandardSqlDataType_TypeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StandardSqlDataType_TypeKind_IsValid(int value);
constexpr StandardSqlDataType_TypeKind StandardSqlDataType_TypeKind_TypeKind_MIN = StandardSqlDataType_TypeKind_TYPE_KIND_UNSPECIFIED;
constexpr StandardSqlDataType_TypeKind StandardSqlDataType_TypeKind_TypeKind_MAX = StandardSqlDataType_TypeKind_BIGNUMERIC;
constexpr int StandardSqlDataType_TypeKind_TypeKind_ARRAYSIZE = StandardSqlDataType_TypeKind_TypeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StandardSqlDataType_TypeKind_descriptor();
template<typename T>
inline const std::string& StandardSqlDataType_TypeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StandardSqlDataType_TypeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StandardSqlDataType_TypeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StandardSqlDataType_TypeKind_descriptor(), enum_t_value);
}
inline bool StandardSqlDataType_TypeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StandardSqlDataType_TypeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StandardSqlDataType_TypeKind>(
    StandardSqlDataType_TypeKind_descriptor(), name, value);
}
// ===================================================================

class StandardSqlDataType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.v2.StandardSqlDataType) */ {
 public:
  inline StandardSqlDataType() : StandardSqlDataType(nullptr) {}
  virtual ~StandardSqlDataType();
  explicit constexpr StandardSqlDataType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StandardSqlDataType(const StandardSqlDataType& from);
  StandardSqlDataType(StandardSqlDataType&& from) noexcept
    : StandardSqlDataType() {
    *this = ::std::move(from);
  }

  inline StandardSqlDataType& operator=(const StandardSqlDataType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandardSqlDataType& operator=(StandardSqlDataType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandardSqlDataType& default_instance() {
    return *internal_default_instance();
  }
  enum SubTypeCase {
    kArrayElementType = 2,
    kStructType = 3,
    SUB_TYPE_NOT_SET = 0,
  };

  static inline const StandardSqlDataType* internal_default_instance() {
    return reinterpret_cast<const StandardSqlDataType*>(
               &_StandardSqlDataType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StandardSqlDataType& a, StandardSqlDataType& b) {
    a.Swap(&b);
  }
  inline void Swap(StandardSqlDataType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandardSqlDataType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandardSqlDataType* New() const final {
    return CreateMaybeMessage<StandardSqlDataType>(nullptr);
  }

  StandardSqlDataType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandardSqlDataType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandardSqlDataType& from);
  void MergeFrom(const StandardSqlDataType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardSqlDataType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.v2.StandardSqlDataType";
  }
  protected:
  explicit StandardSqlDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StandardSqlDataType_TypeKind TypeKind;
  static constexpr TypeKind TYPE_KIND_UNSPECIFIED =
    StandardSqlDataType_TypeKind_TYPE_KIND_UNSPECIFIED;
  static constexpr TypeKind INT64 =
    StandardSqlDataType_TypeKind_INT64;
  static constexpr TypeKind BOOL =
    StandardSqlDataType_TypeKind_BOOL;
  static constexpr TypeKind FLOAT64 =
    StandardSqlDataType_TypeKind_FLOAT64;
  static constexpr TypeKind STRING =
    StandardSqlDataType_TypeKind_STRING;
  static constexpr TypeKind BYTES =
    StandardSqlDataType_TypeKind_BYTES;
  static constexpr TypeKind TIMESTAMP =
    StandardSqlDataType_TypeKind_TIMESTAMP;
  static constexpr TypeKind DATE =
    StandardSqlDataType_TypeKind_DATE;
  static constexpr TypeKind TIME =
    StandardSqlDataType_TypeKind_TIME;
  static constexpr TypeKind DATETIME =
    StandardSqlDataType_TypeKind_DATETIME;
  static constexpr TypeKind GEOGRAPHY =
    StandardSqlDataType_TypeKind_GEOGRAPHY;
  static constexpr TypeKind NUMERIC =
    StandardSqlDataType_TypeKind_NUMERIC;
  static constexpr TypeKind BIGNUMERIC =
    StandardSqlDataType_TypeKind_BIGNUMERIC;
  static constexpr TypeKind ARRAY =
    StandardSqlDataType_TypeKind_ARRAY;
  static constexpr TypeKind STRUCT =
    StandardSqlDataType_TypeKind_STRUCT;
  static inline bool TypeKind_IsValid(int value) {
    return StandardSqlDataType_TypeKind_IsValid(value);
  }
  static constexpr TypeKind TypeKind_MIN =
    StandardSqlDataType_TypeKind_TypeKind_MIN;
  static constexpr TypeKind TypeKind_MAX =
    StandardSqlDataType_TypeKind_TypeKind_MAX;
  static constexpr int TypeKind_ARRAYSIZE =
    StandardSqlDataType_TypeKind_TypeKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeKind_descriptor() {
    return StandardSqlDataType_TypeKind_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeKind_Name.");
    return StandardSqlDataType_TypeKind_Name(enum_t_value);
  }
  static inline bool TypeKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeKind* value) {
    return StandardSqlDataType_TypeKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeKindFieldNumber = 1,
    kArrayElementTypeFieldNumber = 2,
    kStructTypeFieldNumber = 3,
  };
  // .google.cloud.bigquery.v2.StandardSqlDataType.TypeKind type_kind = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_type_kind();
  ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind type_kind() const;
  void set_type_kind(::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind value);
  private:
  ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind _internal_type_kind() const;
  void _internal_set_type_kind(::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind value);
  public:

  // .google.cloud.bigquery.v2.StandardSqlDataType array_element_type = 2;
  bool has_array_element_type() const;
  private:
  bool _internal_has_array_element_type() const;
  public:
  void clear_array_element_type();
  const ::google::cloud::bigquery::v2::StandardSqlDataType& array_element_type() const;
  ::google::cloud::bigquery::v2::StandardSqlDataType* release_array_element_type();
  ::google::cloud::bigquery::v2::StandardSqlDataType* mutable_array_element_type();
  void set_allocated_array_element_type(::google::cloud::bigquery::v2::StandardSqlDataType* array_element_type);
  private:
  const ::google::cloud::bigquery::v2::StandardSqlDataType& _internal_array_element_type() const;
  ::google::cloud::bigquery::v2::StandardSqlDataType* _internal_mutable_array_element_type();
  public:
  void unsafe_arena_set_allocated_array_element_type(
      ::google::cloud::bigquery::v2::StandardSqlDataType* array_element_type);
  ::google::cloud::bigquery::v2::StandardSqlDataType* unsafe_arena_release_array_element_type();

  // .google.cloud.bigquery.v2.StandardSqlStructType struct_type = 3;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::google::cloud::bigquery::v2::StandardSqlStructType& struct_type() const;
  ::google::cloud::bigquery::v2::StandardSqlStructType* release_struct_type();
  ::google::cloud::bigquery::v2::StandardSqlStructType* mutable_struct_type();
  void set_allocated_struct_type(::google::cloud::bigquery::v2::StandardSqlStructType* struct_type);
  private:
  const ::google::cloud::bigquery::v2::StandardSqlStructType& _internal_struct_type() const;
  ::google::cloud::bigquery::v2::StandardSqlStructType* _internal_mutable_struct_type();
  public:
  void unsafe_arena_set_allocated_struct_type(
      ::google::cloud::bigquery::v2::StandardSqlStructType* struct_type);
  ::google::cloud::bigquery::v2::StandardSqlStructType* unsafe_arena_release_struct_type();

  void clear_sub_type();
  SubTypeCase sub_type_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.v2.StandardSqlDataType)
 private:
  class _Internal;
  void set_has_array_element_type();
  void set_has_struct_type();

  inline bool has_sub_type() const;
  inline void clear_has_sub_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_kind_;
  union SubTypeUnion {
    constexpr SubTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::cloud::bigquery::v2::StandardSqlDataType* array_element_type_;
    ::google::cloud::bigquery::v2::StandardSqlStructType* struct_type_;
  } sub_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto;
};
// -------------------------------------------------------------------

class StandardSqlField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.v2.StandardSqlField) */ {
 public:
  inline StandardSqlField() : StandardSqlField(nullptr) {}
  virtual ~StandardSqlField();
  explicit constexpr StandardSqlField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StandardSqlField(const StandardSqlField& from);
  StandardSqlField(StandardSqlField&& from) noexcept
    : StandardSqlField() {
    *this = ::std::move(from);
  }

  inline StandardSqlField& operator=(const StandardSqlField& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandardSqlField& operator=(StandardSqlField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandardSqlField& default_instance() {
    return *internal_default_instance();
  }
  static inline const StandardSqlField* internal_default_instance() {
    return reinterpret_cast<const StandardSqlField*>(
               &_StandardSqlField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StandardSqlField& a, StandardSqlField& b) {
    a.Swap(&b);
  }
  inline void Swap(StandardSqlField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandardSqlField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandardSqlField* New() const final {
    return CreateMaybeMessage<StandardSqlField>(nullptr);
  }

  StandardSqlField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandardSqlField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandardSqlField& from);
  void MergeFrom(const StandardSqlField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardSqlField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.v2.StandardSqlField";
  }
  protected:
  explicit StandardSqlField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.cloud.bigquery.v2.StandardSqlDataType type = 2 [(.google.api.field_behavior) = OPTIONAL];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::cloud::bigquery::v2::StandardSqlDataType& type() const;
  ::google::cloud::bigquery::v2::StandardSqlDataType* release_type();
  ::google::cloud::bigquery::v2::StandardSqlDataType* mutable_type();
  void set_allocated_type(::google::cloud::bigquery::v2::StandardSqlDataType* type);
  private:
  const ::google::cloud::bigquery::v2::StandardSqlDataType& _internal_type() const;
  ::google::cloud::bigquery::v2::StandardSqlDataType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::google::cloud::bigquery::v2::StandardSqlDataType* type);
  ::google::cloud::bigquery::v2::StandardSqlDataType* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.v2.StandardSqlField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::cloud::bigquery::v2::StandardSqlDataType* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto;
};
// -------------------------------------------------------------------

class StandardSqlStructType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.v2.StandardSqlStructType) */ {
 public:
  inline StandardSqlStructType() : StandardSqlStructType(nullptr) {}
  virtual ~StandardSqlStructType();
  explicit constexpr StandardSqlStructType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StandardSqlStructType(const StandardSqlStructType& from);
  StandardSqlStructType(StandardSqlStructType&& from) noexcept
    : StandardSqlStructType() {
    *this = ::std::move(from);
  }

  inline StandardSqlStructType& operator=(const StandardSqlStructType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandardSqlStructType& operator=(StandardSqlStructType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandardSqlStructType& default_instance() {
    return *internal_default_instance();
  }
  static inline const StandardSqlStructType* internal_default_instance() {
    return reinterpret_cast<const StandardSqlStructType*>(
               &_StandardSqlStructType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StandardSqlStructType& a, StandardSqlStructType& b) {
    a.Swap(&b);
  }
  inline void Swap(StandardSqlStructType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandardSqlStructType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandardSqlStructType* New() const final {
    return CreateMaybeMessage<StandardSqlStructType>(nullptr);
  }

  StandardSqlStructType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandardSqlStructType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandardSqlStructType& from);
  void MergeFrom(const StandardSqlStructType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardSqlStructType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.bigquery.v2.StandardSqlStructType";
  }
  protected:
  explicit StandardSqlStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .google.cloud.bigquery.v2.StandardSqlField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::google::cloud::bigquery::v2::StandardSqlField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::v2::StandardSqlField >*
      mutable_fields();
  private:
  const ::google::cloud::bigquery::v2::StandardSqlField& _internal_fields(int index) const;
  ::google::cloud::bigquery::v2::StandardSqlField* _internal_add_fields();
  public:
  const ::google::cloud::bigquery::v2::StandardSqlField& fields(int index) const;
  ::google::cloud::bigquery::v2::StandardSqlField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::v2::StandardSqlField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.v2.StandardSqlStructType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::v2::StandardSqlField > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StandardSqlDataType

// .google.cloud.bigquery.v2.StandardSqlDataType.TypeKind type_kind = 1 [(.google.api.field_behavior) = REQUIRED];
inline void StandardSqlDataType::clear_type_kind() {
  type_kind_ = 0;
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind StandardSqlDataType::_internal_type_kind() const {
  return static_cast< ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind >(type_kind_);
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind StandardSqlDataType::type_kind() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlDataType.type_kind)
  return _internal_type_kind();
}
inline void StandardSqlDataType::_internal_set_type_kind(::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind value) {
  
  type_kind_ = value;
}
inline void StandardSqlDataType::set_type_kind(::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind value) {
  _internal_set_type_kind(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.StandardSqlDataType.type_kind)
}

// .google.cloud.bigquery.v2.StandardSqlDataType array_element_type = 2;
inline bool StandardSqlDataType::_internal_has_array_element_type() const {
  return sub_type_case() == kArrayElementType;
}
inline bool StandardSqlDataType::has_array_element_type() const {
  return _internal_has_array_element_type();
}
inline void StandardSqlDataType::set_has_array_element_type() {
  _oneof_case_[0] = kArrayElementType;
}
inline void StandardSqlDataType::clear_array_element_type() {
  if (_internal_has_array_element_type()) {
    if (GetArena() == nullptr) {
      delete sub_type_.array_element_type_;
    }
    clear_has_sub_type();
  }
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlDataType::release_array_element_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.StandardSqlDataType.array_element_type)
  if (_internal_has_array_element_type()) {
    clear_has_sub_type();
      ::google::cloud::bigquery::v2::StandardSqlDataType* temp = sub_type_.array_element_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_type_.array_element_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::v2::StandardSqlDataType& StandardSqlDataType::_internal_array_element_type() const {
  return _internal_has_array_element_type()
      ? *sub_type_.array_element_type_
      : reinterpret_cast< ::google::cloud::bigquery::v2::StandardSqlDataType&>(::google::cloud::bigquery::v2::_StandardSqlDataType_default_instance_);
}
inline const ::google::cloud::bigquery::v2::StandardSqlDataType& StandardSqlDataType::array_element_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlDataType.array_element_type)
  return _internal_array_element_type();
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlDataType::unsafe_arena_release_array_element_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.v2.StandardSqlDataType.array_element_type)
  if (_internal_has_array_element_type()) {
    clear_has_sub_type();
    ::google::cloud::bigquery::v2::StandardSqlDataType* temp = sub_type_.array_element_type_;
    sub_type_.array_element_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StandardSqlDataType::unsafe_arena_set_allocated_array_element_type(::google::cloud::bigquery::v2::StandardSqlDataType* array_element_type) {
  clear_sub_type();
  if (array_element_type) {
    set_has_array_element_type();
    sub_type_.array_element_type_ = array_element_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.v2.StandardSqlDataType.array_element_type)
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlDataType::_internal_mutable_array_element_type() {
  if (!_internal_has_array_element_type()) {
    clear_sub_type();
    set_has_array_element_type();
    sub_type_.array_element_type_ = CreateMaybeMessage< ::google::cloud::bigquery::v2::StandardSqlDataType >(GetArena());
  }
  return sub_type_.array_element_type_;
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlDataType::mutable_array_element_type() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.StandardSqlDataType.array_element_type)
  return _internal_mutable_array_element_type();
}

// .google.cloud.bigquery.v2.StandardSqlStructType struct_type = 3;
inline bool StandardSqlDataType::_internal_has_struct_type() const {
  return sub_type_case() == kStructType;
}
inline bool StandardSqlDataType::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void StandardSqlDataType::set_has_struct_type() {
  _oneof_case_[0] = kStructType;
}
inline void StandardSqlDataType::clear_struct_type() {
  if (_internal_has_struct_type()) {
    if (GetArena() == nullptr) {
      delete sub_type_.struct_type_;
    }
    clear_has_sub_type();
  }
}
inline ::google::cloud::bigquery::v2::StandardSqlStructType* StandardSqlDataType::release_struct_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.StandardSqlDataType.struct_type)
  if (_internal_has_struct_type()) {
    clear_has_sub_type();
      ::google::cloud::bigquery::v2::StandardSqlStructType* temp = sub_type_.struct_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_type_.struct_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::bigquery::v2::StandardSqlStructType& StandardSqlDataType::_internal_struct_type() const {
  return _internal_has_struct_type()
      ? *sub_type_.struct_type_
      : reinterpret_cast< ::google::cloud::bigquery::v2::StandardSqlStructType&>(::google::cloud::bigquery::v2::_StandardSqlStructType_default_instance_);
}
inline const ::google::cloud::bigquery::v2::StandardSqlStructType& StandardSqlDataType::struct_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlDataType.struct_type)
  return _internal_struct_type();
}
inline ::google::cloud::bigquery::v2::StandardSqlStructType* StandardSqlDataType::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.bigquery.v2.StandardSqlDataType.struct_type)
  if (_internal_has_struct_type()) {
    clear_has_sub_type();
    ::google::cloud::bigquery::v2::StandardSqlStructType* temp = sub_type_.struct_type_;
    sub_type_.struct_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StandardSqlDataType::unsafe_arena_set_allocated_struct_type(::google::cloud::bigquery::v2::StandardSqlStructType* struct_type) {
  clear_sub_type();
  if (struct_type) {
    set_has_struct_type();
    sub_type_.struct_type_ = struct_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.v2.StandardSqlDataType.struct_type)
}
inline ::google::cloud::bigquery::v2::StandardSqlStructType* StandardSqlDataType::_internal_mutable_struct_type() {
  if (!_internal_has_struct_type()) {
    clear_sub_type();
    set_has_struct_type();
    sub_type_.struct_type_ = CreateMaybeMessage< ::google::cloud::bigquery::v2::StandardSqlStructType >(GetArena());
  }
  return sub_type_.struct_type_;
}
inline ::google::cloud::bigquery::v2::StandardSqlStructType* StandardSqlDataType::mutable_struct_type() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.StandardSqlDataType.struct_type)
  return _internal_mutable_struct_type();
}

inline bool StandardSqlDataType::has_sub_type() const {
  return sub_type_case() != SUB_TYPE_NOT_SET;
}
inline void StandardSqlDataType::clear_has_sub_type() {
  _oneof_case_[0] = SUB_TYPE_NOT_SET;
}
inline StandardSqlDataType::SubTypeCase StandardSqlDataType::sub_type_case() const {
  return StandardSqlDataType::SubTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StandardSqlField

// string name = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void StandardSqlField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StandardSqlField::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlField.name)
  return _internal_name();
}
inline void StandardSqlField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.v2.StandardSqlField.name)
}
inline std::string* StandardSqlField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.StandardSqlField.name)
  return _internal_mutable_name();
}
inline const std::string& StandardSqlField::_internal_name() const {
  return name_.Get();
}
inline void StandardSqlField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StandardSqlField::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.v2.StandardSqlField.name)
}
inline void StandardSqlField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.v2.StandardSqlField.name)
}
inline void StandardSqlField::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.v2.StandardSqlField.name)
}
inline std::string* StandardSqlField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StandardSqlField::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.StandardSqlField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StandardSqlField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.v2.StandardSqlField.name)
}

// .google.cloud.bigquery.v2.StandardSqlDataType type = 2 [(.google.api.field_behavior) = OPTIONAL];
inline bool StandardSqlField::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool StandardSqlField::has_type() const {
  return _internal_has_type();
}
inline void StandardSqlField::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::google::cloud::bigquery::v2::StandardSqlDataType& StandardSqlField::_internal_type() const {
  const ::google::cloud::bigquery::v2::StandardSqlDataType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::bigquery::v2::StandardSqlDataType&>(
      ::google::cloud::bigquery::v2::_StandardSqlDataType_default_instance_);
}
inline const ::google::cloud::bigquery::v2::StandardSqlDataType& StandardSqlField::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlField.type)
  return _internal_type();
}
inline void StandardSqlField::unsafe_arena_set_allocated_type(
    ::google::cloud::bigquery::v2::StandardSqlDataType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.bigquery.v2.StandardSqlField.type)
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlField::release_type() {
  
  ::google::cloud::bigquery::v2::StandardSqlDataType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.v2.StandardSqlField.type)
  
  ::google::cloud::bigquery::v2::StandardSqlDataType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlField::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::v2::StandardSqlDataType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::google::cloud::bigquery::v2::StandardSqlDataType* StandardSqlField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.StandardSqlField.type)
  return _internal_mutable_type();
}
inline void StandardSqlField::set_allocated_type(::google::cloud::bigquery::v2::StandardSqlDataType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.v2.StandardSqlField.type)
}

// -------------------------------------------------------------------

// StandardSqlStructType

// repeated .google.cloud.bigquery.v2.StandardSqlField fields = 1;
inline int StandardSqlStructType::_internal_fields_size() const {
  return fields_.size();
}
inline int StandardSqlStructType::fields_size() const {
  return _internal_fields_size();
}
inline void StandardSqlStructType::clear_fields() {
  fields_.Clear();
}
inline ::google::cloud::bigquery::v2::StandardSqlField* StandardSqlStructType::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.v2.StandardSqlStructType.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::v2::StandardSqlField >*
StandardSqlStructType::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.v2.StandardSqlStructType.fields)
  return &fields_;
}
inline const ::google::cloud::bigquery::v2::StandardSqlField& StandardSqlStructType::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::google::cloud::bigquery::v2::StandardSqlField& StandardSqlStructType::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.v2.StandardSqlStructType.fields)
  return _internal_fields(index);
}
inline ::google::cloud::bigquery::v2::StandardSqlField* StandardSqlStructType::_internal_add_fields() {
  return fields_.Add();
}
inline ::google::cloud::bigquery::v2::StandardSqlField* StandardSqlStructType::add_fields() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.v2.StandardSqlStructType.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::bigquery::v2::StandardSqlField >&
StandardSqlStructType::fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.v2.StandardSqlStructType.fields)
  return fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind>() {
  return ::google::cloud::bigquery::v2::StandardSqlDataType_TypeKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fv2_2fstandard_5fsql_2eproto
